from js2py.pyjs import *
# setting scope
var = Scope( JS_BUILTINS )
set_global_object(var)

# Code follows:
var.registers(['_typeof', 'obj2gltf', 'getFromGlobals'])
@Js
def PyJsHoisted_getFromGlobals_(name, this, arguments, var=var):
    var = Scope({'name':name, 'this':this, 'arguments':arguments}, var)
    var.registers(['name'])
    if var.get('Object').get('prototype').callprop('hasOwnProperty', Js('_fake_exports')).neg():
        PyJsTempException = JsToPyException(var.get('Error')((Js('Could not find any value named ')+var.get('name'))))
        raise PyJsTempException
    if var.get('Object').get('prototype').get('_fake_exports').callprop('hasOwnProperty', var.get('name')):
        return var.get('Object').get('prototype').get('_fake_exports').get(var.get('name'))
    else:
        PyJsTempException = JsToPyException(var.get('Error')((Js('Could not find any value named ')+var.get('name'))))
        raise PyJsTempException
PyJsHoisted_getFromGlobals_.func_name = 'getFromGlobals'
var.put('getFromGlobals', PyJsHoisted_getFromGlobals_)
Js('use strict')
@Js
def PyJs_anonymous_0_(obj, this, arguments, var=var):
    var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
    var.registers(['obj'])
    return var.get('obj',throw=False).typeof()
PyJs_anonymous_0_._set_name('anonymous')
@Js
def PyJs_anonymous_1_(obj, this, arguments, var=var):
    var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
    var.registers(['obj'])
    return (Js('symbol') if (((var.get('obj') and PyJsStrictEq(var.get('Symbol',throw=False).typeof(),Js('function'))) and PyJsStrictEq(var.get('obj').get('constructor'),var.get('Symbol'))) and PyJsStrictNeq(var.get('obj'),var.get('Symbol').get('prototype'))) else var.get('obj',throw=False).typeof())
PyJs_anonymous_1_._set_name('anonymous')
var.put('_typeof', (PyJs_anonymous_0_ if (PyJsStrictEq(var.get('Symbol',throw=False).typeof(),Js('function')) and PyJsStrictEq(var.get('Symbol').get('iterator').typeof(),Js('symbol'))) else PyJs_anonymous_1_))
def PyJs_LONG_2615_(var=var):
    @Js
    def PyJs_anonymous_2_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'hasOwn', 'module', 'exports'])
        @Js
        def PyJs_anonymous_3_(arr, fn, self, this, arguments, var=var):
            var = Scope({'arr':arr, 'fn':fn, 'self':self, 'this':this, 'arguments':arguments}, var)
            var.registers(['self', 'val', 'i', 'ret', 'fn', 'arr'])
            if var.get('arr').get('filter'):
                return var.get('arr').callprop('filter', var.get('fn'), var.get('self'))
            if (PyJsStrictEq(PyJsComma(Js(0.0), Js(None)),var.get('arr')) or PyJsStrictEq(var.get(u"null"),var.get('arr'))):
                PyJsTempException = JsToPyException(var.get('TypeError').create())
                raise PyJsTempException
            if (Js('function')!=var.get('fn',throw=False).typeof()):
                PyJsTempException = JsToPyException(var.get('TypeError').create())
                raise PyJsTempException
            var.put('ret', Js([]))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('arr').get('length')):
                try:
                    if var.get('hasOwn').callprop('call', var.get('arr'), var.get('i')).neg():
                        continue
                    var.put('val', var.get('arr').get(var.get('i')))
                    if var.get('fn').callprop('call', var.get('self'), var.get('val'), var.get('i'), var.get('arr')):
                        var.get('ret').callprop('push', var.get('val'))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('ret')
        PyJs_anonymous_3_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_3_)
        var.put('hasOwn', var.get('Object').get('prototype').get('hasOwnProperty'))
    PyJs_anonymous_2_._set_name('anonymous')
    @Js
    def PyJs_anonymous_4_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_5_(PyJsArg_676c6f62616c_, this, arguments, var=var):
            var = Scope({'global':PyJsArg_676c6f62616c_, 'this':this, 'arguments':arguments}, var)
            var.registers(['global'])
            @Js
            def PyJs_anonymous_6_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['ok', 'util', 'assert', 'isBuffer', 'objEquiv', 'functionsHaveNames', 'expectedException', 'notDeepStrictEqual', 'fail', 'truncate', 'inspect', 'getName', 'compare', 'strict', 'isView', 'objectAssign', 'getMessage', 'objectKeys', 'pSlice', '_tryBlock', 'regex', 'hasOwn', 'isArguments', '_deepEqual', '_throws', 'pToString'])
                @Js
                def PyJsHoisted_compare_(a, b, this, arguments, var=var):
                    var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments}, var)
                    var.registers(['y', 'len', 'x', 'i', 'b', 'a'])
                    if PyJsStrictEq(var.get('a'),var.get('b')):
                        return Js(0.0)
                    var.put('x', var.get('a').get('length'))
                    var.put('y', var.get('b').get('length'))
                    #for JS loop
                    var.put('i', Js(0.0))
                    var.put('len', var.get('Math').callprop('min', var.get('x'), var.get('y')))
                    while (var.get('i')<var.get('len')):
                        try:
                            if PyJsStrictNeq(var.get('a').get(var.get('i')),var.get('b').get(var.get('i'))):
                                var.put('x', var.get('a').get(var.get('i')))
                                var.put('y', var.get('b').get(var.get('i')))
                                break
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    if (var.get('x')<var.get('y')):
                        return (-Js(1.0))
                    if (var.get('y')<var.get('x')):
                        return Js(1.0)
                    return Js(0.0)
                PyJsHoisted_compare_.func_name = 'compare'
                var.put('compare', PyJsHoisted_compare_)
                @Js
                def PyJsHoisted_isBuffer_(b, this, arguments, var=var):
                    var = Scope({'b':b, 'this':this, 'arguments':arguments}, var)
                    var.registers(['b'])
                    if (var.get('global').get('Buffer') and PyJsStrictEq(var.get('global').get('Buffer').get('isBuffer').typeof(),Js('function'))):
                        return var.get('global').get('Buffer').callprop('isBuffer', var.get('b'))
                    return ((var.get('b')!=var.get(u"null")) and var.get('b').get('_isBuffer')).neg().neg()
                PyJsHoisted_isBuffer_.func_name = 'isBuffer'
                var.put('isBuffer', PyJsHoisted_isBuffer_)
                @Js
                def PyJsHoisted_pToString_(obj, this, arguments, var=var):
                    var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
                    var.registers(['obj'])
                    return var.get('Object').get('prototype').get('toString').callprop('call', var.get('obj'))
                PyJsHoisted_pToString_.func_name = 'pToString'
                var.put('pToString', PyJsHoisted_pToString_)
                @Js
                def PyJsHoisted_isView_(arrbuf, this, arguments, var=var):
                    var = Scope({'arrbuf':arrbuf, 'this':this, 'arguments':arguments}, var)
                    var.registers(['arrbuf'])
                    if var.get('isBuffer')(var.get('arrbuf')):
                        return Js(False)
                    if PyJsStrictNeq(var.get('global').get('ArrayBuffer').typeof(),Js('function')):
                        return Js(False)
                    if PyJsStrictEq(var.get('ArrayBuffer').get('isView').typeof(),Js('function')):
                        return var.get('ArrayBuffer').callprop('isView', var.get('arrbuf'))
                    if var.get('arrbuf').neg():
                        return Js(False)
                    if var.get('arrbuf').instanceof(var.get('DataView')):
                        return Js(True)
                    if (var.get('arrbuf').get('buffer') and var.get('arrbuf').get('buffer').instanceof(var.get('ArrayBuffer'))):
                        return Js(True)
                    return Js(False)
                PyJsHoisted_isView_.func_name = 'isView'
                var.put('isView', PyJsHoisted_isView_)
                @Js
                def PyJsHoisted_getName_(func, this, arguments, var=var):
                    var = Scope({'func':func, 'this':this, 'arguments':arguments}, var)
                    var.registers(['str', 'func', 'match'])
                    if var.get('util').callprop('isFunction', var.get('func')).neg():
                        return var.get('undefined')
                    if var.get('functionsHaveNames'):
                        return var.get('func').get('name')
                    var.put('str', var.get('func').callprop('toString'))
                    var.put('match', var.get('str').callprop('match', var.get('regex')))
                    return (var.get('match') and var.get('match').get('1'))
                PyJsHoisted_getName_.func_name = 'getName'
                var.put('getName', PyJsHoisted_getName_)
                @Js
                def PyJsHoisted_truncate_(s, n, this, arguments, var=var):
                    var = Scope({'s':s, 'n':n, 'this':this, 'arguments':arguments}, var)
                    var.registers(['n', 's'])
                    if PyJsStrictEq(var.get('s',throw=False).typeof(),Js('string')):
                        return (var.get('s') if (var.get('s').get('length')<var.get('n')) else var.get('s').callprop('slice', Js(0.0), var.get('n')))
                    else:
                        return var.get('s')
                PyJsHoisted_truncate_.func_name = 'truncate'
                var.put('truncate', PyJsHoisted_truncate_)
                @Js
                def PyJsHoisted_inspect_(something, this, arguments, var=var):
                    var = Scope({'something':something, 'this':this, 'arguments':arguments}, var)
                    var.registers(['something', 'name', 'rawname'])
                    if (var.get('functionsHaveNames') or var.get('util').callprop('isFunction', var.get('something')).neg()):
                        return var.get('util').callprop('inspect', var.get('something'))
                    var.put('rawname', var.get('getName')(var.get('something')))
                    var.put('name', ((Js(': ')+var.get('rawname')) if var.get('rawname') else Js('')))
                    return ((Js('[Function')+var.get('name'))+Js(']'))
                PyJsHoisted_inspect_.func_name = 'inspect'
                var.put('inspect', PyJsHoisted_inspect_)
                @Js
                def PyJsHoisted_getMessage_(self, this, arguments, var=var):
                    var = Scope({'self':self, 'this':this, 'arguments':arguments}, var)
                    var.registers(['self'])
                    return ((((var.get('truncate')(var.get('inspect')(var.get('self').get('actual')), Js(128.0))+Js(' '))+var.get('self').get('operator'))+Js(' '))+var.get('truncate')(var.get('inspect')(var.get('self').get('expected')), Js(128.0)))
                PyJsHoisted_getMessage_.func_name = 'getMessage'
                var.put('getMessage', PyJsHoisted_getMessage_)
                @Js
                def PyJsHoisted_fail_(actual, expected, message, operator, stackStartFunction, this, arguments, var=var):
                    var = Scope({'actual':actual, 'expected':expected, 'message':message, 'operator':operator, 'stackStartFunction':stackStartFunction, 'this':this, 'arguments':arguments}, var)
                    var.registers(['expected', 'operator', 'message', 'actual', 'stackStartFunction'])
                    PyJsTempException = JsToPyException(var.get('assert').get('AssertionError').create(Js({'message':var.get('message'),'actual':var.get('actual'),'expected':var.get('expected'),'operator':var.get('operator'),'stackStartFunction':var.get('stackStartFunction')})))
                    raise PyJsTempException
                PyJsHoisted_fail_.func_name = 'fail'
                var.put('fail', PyJsHoisted_fail_)
                @Js
                def PyJsHoisted_ok_(value, message, this, arguments, var=var):
                    var = Scope({'value':value, 'message':message, 'this':this, 'arguments':arguments}, var)
                    var.registers(['message', 'value'])
                    if var.get('value').neg():
                        var.get('fail')(var.get('value'), Js(True), var.get('message'), Js('=='), var.get('assert').get('ok'))
                PyJsHoisted_ok_.func_name = 'ok'
                var.put('ok', PyJsHoisted_ok_)
                @Js
                def PyJsHoisted__deepEqual_(actual, expected, strict, memos, this, arguments, var=var):
                    var = Scope({'actual':actual, 'expected':expected, 'strict':strict, 'memos':memos, 'this':this, 'arguments':arguments}, var)
                    var.registers(['expected', 'actualIndex', 'strict', 'memos', 'actual'])
                    if PyJsStrictEq(var.get('actual'),var.get('expected')):
                        return Js(True)
                    else:
                        if (var.get('isBuffer')(var.get('actual')) and var.get('isBuffer')(var.get('expected'))):
                            return PyJsStrictEq(var.get('compare')(var.get('actual'), var.get('expected')),Js(0.0))
                        else:
                            if (var.get('util').callprop('isDate', var.get('actual')) and var.get('util').callprop('isDate', var.get('expected'))):
                                return PyJsStrictEq(var.get('actual').callprop('getTime'),var.get('expected').callprop('getTime'))
                            else:
                                if (var.get('util').callprop('isRegExp', var.get('actual')) and var.get('util').callprop('isRegExp', var.get('expected'))):
                                    def PyJs_LONG_14_(var=var):
                                        return ((((PyJsStrictEq(var.get('actual').get('source'),var.get('expected').get('source')) and PyJsStrictEq(var.get('actual').get('global'),var.get('expected').get('global'))) and PyJsStrictEq(var.get('actual').get('multiline'),var.get('expected').get('multiline'))) and PyJsStrictEq(var.get('actual').get('lastIndex'),var.get('expected').get('lastIndex'))) and PyJsStrictEq(var.get('actual').get('ignoreCase'),var.get('expected').get('ignoreCase')))
                                    return PyJs_LONG_14_()
                                else:
                                    def PyJs_LONG_15_(var=var):
                                        return ((PyJsStrictEq(var.get('actual'),var.get(u"null")) or PyJsStrictNeq((Js('undefined') if PyJsStrictEq(var.get('actual',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('actual'))),Js('object'))) and (PyJsStrictEq(var.get('expected'),var.get(u"null")) or PyJsStrictNeq((Js('undefined') if PyJsStrictEq(var.get('expected',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('expected'))),Js('object'))))
                                    if PyJs_LONG_15_():
                                        return (PyJsStrictEq(var.get('actual'),var.get('expected')) if var.get('strict') else (var.get('actual')==var.get('expected')))
                                    else:
                                        if (((var.get('isView')(var.get('actual')) and var.get('isView')(var.get('expected'))) and PyJsStrictEq(var.get('pToString')(var.get('actual')),var.get('pToString')(var.get('expected')))) and (var.get('actual').instanceof(var.get('Float32Array')) or var.get('actual').instanceof(var.get('Float64Array'))).neg()):
                                            return PyJsStrictEq(var.get('compare')(var.get('Uint8Array').create(var.get('actual').get('buffer')), var.get('Uint8Array').create(var.get('expected').get('buffer'))),Js(0.0))
                                        else:
                                            if PyJsStrictNeq(var.get('isBuffer')(var.get('actual')),var.get('isBuffer')(var.get('expected'))):
                                                return Js(False)
                                            else:
                                                var.put('memos', (var.get('memos') or Js({'actual':Js([]),'expected':Js([])})))
                                                var.put('actualIndex', var.get('memos').get('actual').callprop('indexOf', var.get('actual')))
                                                if PyJsStrictNeq(var.get('actualIndex'),(-Js(1.0))):
                                                    if PyJsStrictEq(var.get('actualIndex'),var.get('memos').get('expected').callprop('indexOf', var.get('expected'))):
                                                        return Js(True)
                                                var.get('memos').get('actual').callprop('push', var.get('actual'))
                                                var.get('memos').get('expected').callprop('push', var.get('expected'))
                                                return var.get('objEquiv')(var.get('actual'), var.get('expected'), var.get('strict'), var.get('memos'))
                PyJsHoisted__deepEqual_.func_name = '_deepEqual'
                var.put('_deepEqual', PyJsHoisted__deepEqual_)
                @Js
                def PyJsHoisted_isArguments_(object, this, arguments, var=var):
                    var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                    var.registers(['object'])
                    return (var.get('Object').get('prototype').get('toString').callprop('call', var.get('object'))==Js('[object Arguments]'))
                PyJsHoisted_isArguments_.func_name = 'isArguments'
                var.put('isArguments', PyJsHoisted_isArguments_)
                @Js
                def PyJsHoisted_objEquiv_(a, b, strict, actualVisitedObjects, this, arguments, var=var):
                    var = Scope({'a':a, 'b':b, 'strict':strict, 'actualVisitedObjects':actualVisitedObjects, 'this':this, 'arguments':arguments}, var)
                    var.registers(['i', 'b', 'key', 'a', 'ka', 'strict', 'actualVisitedObjects', 'bIsArgs', 'aIsArgs', 'kb'])
                    if (((PyJsStrictEq(var.get('a'),var.get(u"null")) or PyJsStrictEq(var.get('a'),var.get('undefined'))) or PyJsStrictEq(var.get('b'),var.get(u"null"))) or PyJsStrictEq(var.get('b'),var.get('undefined'))):
                        return Js(False)
                    if (var.get('util').callprop('isPrimitive', var.get('a')) or var.get('util').callprop('isPrimitive', var.get('b'))):
                        return PyJsStrictEq(var.get('a'),var.get('b'))
                    if (var.get('strict') and PyJsStrictNeq(var.get('Object').callprop('getPrototypeOf', var.get('a')),var.get('Object').callprop('getPrototypeOf', var.get('b')))):
                        return Js(False)
                    var.put('aIsArgs', var.get('isArguments')(var.get('a')))
                    var.put('bIsArgs', var.get('isArguments')(var.get('b')))
                    if ((var.get('aIsArgs') and var.get('bIsArgs').neg()) or (var.get('aIsArgs').neg() and var.get('bIsArgs'))):
                        return Js(False)
                    if var.get('aIsArgs'):
                        var.put('a', var.get('pSlice').callprop('call', var.get('a')))
                        var.put('b', var.get('pSlice').callprop('call', var.get('b')))
                        return var.get('_deepEqual')(var.get('a'), var.get('b'), var.get('strict'))
                    var.put('ka', var.get('objectKeys')(var.get('a')))
                    var.put('kb', var.get('objectKeys')(var.get('b')))
                    pass
                    if PyJsStrictNeq(var.get('ka').get('length'),var.get('kb').get('length')):
                        return Js(False)
                    var.get('ka').callprop('sort')
                    var.get('kb').callprop('sort')
                    #for JS loop
                    var.put('i', (var.get('ka').get('length')-Js(1.0)))
                    while (var.get('i')>=Js(0.0)):
                        try:
                            if PyJsStrictNeq(var.get('ka').get(var.get('i')),var.get('kb').get(var.get('i'))):
                                return Js(False)
                        finally:
                                (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
                    #for JS loop
                    var.put('i', (var.get('ka').get('length')-Js(1.0)))
                    while (var.get('i')>=Js(0.0)):
                        try:
                            var.put('key', var.get('ka').get(var.get('i')))
                            if var.get('_deepEqual')(var.get('a').get(var.get('key')), var.get('b').get(var.get('key')), var.get('strict'), var.get('actualVisitedObjects')).neg():
                                return Js(False)
                        finally:
                                (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
                    return Js(True)
                PyJsHoisted_objEquiv_.func_name = 'objEquiv'
                var.put('objEquiv', PyJsHoisted_objEquiv_)
                @Js
                def PyJsHoisted_notDeepStrictEqual_(actual, expected, message, this, arguments, var=var):
                    var = Scope({'actual':actual, 'expected':expected, 'message':message, 'this':this, 'arguments':arguments}, var)
                    var.registers(['message', 'actual', 'expected'])
                    if var.get('_deepEqual')(var.get('actual'), var.get('expected'), Js(True)):
                        var.get('fail')(var.get('actual'), var.get('expected'), var.get('message'), Js('notDeepStrictEqual'), var.get('notDeepStrictEqual'))
                PyJsHoisted_notDeepStrictEqual_.func_name = 'notDeepStrictEqual'
                var.put('notDeepStrictEqual', PyJsHoisted_notDeepStrictEqual_)
                @Js
                def PyJsHoisted_expectedException_(actual, expected, this, arguments, var=var):
                    var = Scope({'actual':actual, 'expected':expected, 'this':this, 'arguments':arguments}, var)
                    var.registers(['actual', 'expected'])
                    if (var.get('actual').neg() or var.get('expected').neg()):
                        return Js(False)
                    if (var.get('Object').get('prototype').get('toString').callprop('call', var.get('expected'))==Js('[object RegExp]')):
                        return var.get('expected').callprop('test', var.get('actual'))
                    try:
                        if var.get('actual').instanceof(var.get('expected')):
                            return Js(True)
                    except PyJsException as PyJsTempException:
                        PyJsHolder_65_92151490 = var.own.get('e')
                        var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                        try:
                            pass
                        finally:
                            if PyJsHolder_65_92151490 is not None:
                                var.own['e'] = PyJsHolder_65_92151490
                            else:
                                del var.own['e']
                            del PyJsHolder_65_92151490
                    if var.get('Error').callprop('isPrototypeOf', var.get('expected')):
                        return Js(False)
                    return PyJsStrictEq(var.get('expected').callprop('call', Js({}), var.get('actual')),Js(True))
                PyJsHoisted_expectedException_.func_name = 'expectedException'
                var.put('expectedException', PyJsHoisted_expectedException_)
                @Js
                def PyJsHoisted__tryBlock_(block, this, arguments, var=var):
                    var = Scope({'block':block, 'this':this, 'arguments':arguments}, var)
                    var.registers(['error', 'block'])
                    pass
                    try:
                        var.get('block')()
                    except PyJsException as PyJsTempException:
                        PyJsHolder_65_50511297 = var.own.get('e')
                        var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                        try:
                            var.put('error', var.get('e'))
                        finally:
                            if PyJsHolder_65_50511297 is not None:
                                var.own['e'] = PyJsHolder_65_50511297
                            else:
                                del var.own['e']
                            del PyJsHolder_65_50511297
                    return var.get('error')
                PyJsHoisted__tryBlock_.func_name = '_tryBlock'
                var.put('_tryBlock', PyJsHoisted__tryBlock_)
                @Js
                def PyJsHoisted__throws_(shouldThrow, block, expected, message, this, arguments, var=var):
                    var = Scope({'shouldThrow':shouldThrow, 'block':block, 'expected':expected, 'message':message, 'this':this, 'arguments':arguments}, var)
                    var.registers(['isUnwantedException', 'expected', 'shouldThrow', 'block', 'isUnexpectedException', 'message', 'userProvidedMessage', 'actual'])
                    pass
                    if PyJsStrictNeq(var.get('block',throw=False).typeof(),Js('function')):
                        PyJsTempException = JsToPyException(var.get('TypeError').create(Js('"block" argument must be a function')))
                        raise PyJsTempException
                    if PyJsStrictEq(var.get('expected',throw=False).typeof(),Js('string')):
                        var.put('message', var.get('expected'))
                        var.put('expected', var.get(u"null"))
                    var.put('actual', var.get('_tryBlock')(var.get('block')))
                    var.put('message', ((((Js(' (')+var.get('expected').get('name'))+Js(').')) if (var.get('expected') and var.get('expected').get('name')) else Js('.'))+((Js(' ')+var.get('message')) if var.get('message') else Js('.'))))
                    if (var.get('shouldThrow') and var.get('actual').neg()):
                        var.get('fail')(var.get('actual'), var.get('expected'), (Js('Missing expected exception')+var.get('message')))
                    var.put('userProvidedMessage', PyJsStrictEq(var.get('message',throw=False).typeof(),Js('string')))
                    var.put('isUnwantedException', (var.get('shouldThrow').neg() and var.get('util').callprop('isError', var.get('actual'))))
                    var.put('isUnexpectedException', ((var.get('shouldThrow').neg() and var.get('actual')) and var.get('expected').neg()))
                    if (((var.get('isUnwantedException') and var.get('userProvidedMessage')) and var.get('expectedException')(var.get('actual'), var.get('expected'))) or var.get('isUnexpectedException')):
                        var.get('fail')(var.get('actual'), var.get('expected'), (Js('Got unwanted exception')+var.get('message')))
                    if ((((var.get('shouldThrow') and var.get('actual')) and var.get('expected')) and var.get('expectedException')(var.get('actual'), var.get('expected')).neg()) or (var.get('shouldThrow').neg() and var.get('actual'))):
                        PyJsTempException = JsToPyException(var.get('actual'))
                        raise PyJsTempException
                PyJsHoisted__throws_.func_name = '_throws'
                var.put('_throws', PyJsHoisted__throws_)
                @Js
                def PyJsHoisted_strict_(value, message, this, arguments, var=var):
                    var = Scope({'value':value, 'message':message, 'this':this, 'arguments':arguments}, var)
                    var.registers(['message', 'value'])
                    if var.get('value').neg():
                        var.get('fail')(var.get('value'), Js(True), var.get('message'), Js('=='), var.get('strict'))
                PyJsHoisted_strict_.func_name = 'strict'
                var.put('strict', PyJsHoisted_strict_)
                Js('use strict')
                var.put('objectAssign', var.get('require')(Js('object-assign')))
                pass
                pass
                var.put('util', var.get('require')(Js('util/')))
                var.put('hasOwn', var.get('Object').get('prototype').get('hasOwnProperty'))
                var.put('pSlice', var.get('Array').get('prototype').get('slice'))
                @Js
                def PyJs_anonymous_7_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    @Js
                    def PyJs_foo_8_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments, 'foo':PyJs_foo_8_}, var)
                        var.registers([])
                        pass
                    PyJs_foo_8_._set_name('foo')
                    return PyJsStrictEq(PyJs_foo_8_.get('name'),Js('foo'))
                PyJs_anonymous_7_._set_name('anonymous')
                var.put('functionsHaveNames', PyJs_anonymous_7_())
                pass
                pass
                var.put('assert', var.get('module').put('exports', var.get('ok')))
                var.put('regex', JsRegExp('/\\s*function\\s+([^\\(\\s]*)\\s*/'))
                pass
                @Js
                def PyJs_AssertionError_9_(options, this, arguments, var=var):
                    var = Scope({'options':options, 'this':this, 'arguments':arguments, 'AssertionError':PyJs_AssertionError_9_}, var)
                    var.registers(['out', 'next_line', 'err', 'idx', 'options', 'fn_name', 'stackStartFunction'])
                    var.get(u"this").put('name', Js('AssertionError'))
                    var.get(u"this").put('actual', var.get('options').get('actual'))
                    var.get(u"this").put('expected', var.get('options').get('expected'))
                    var.get(u"this").put('operator', var.get('options').get('operator'))
                    if var.get('options').get('message'):
                        var.get(u"this").put('message', var.get('options').get('message'))
                        var.get(u"this").put('generatedMessage', Js(False))
                    else:
                        var.get(u"this").put('message', var.get('getMessage')(var.get(u"this")))
                        var.get(u"this").put('generatedMessage', Js(True))
                    var.put('stackStartFunction', (var.get('options').get('stackStartFunction') or var.get('fail')))
                    if var.get('Error').get('captureStackTrace'):
                        var.get('Error').callprop('captureStackTrace', var.get(u"this"), var.get('stackStartFunction'))
                    else:
                        var.put('err', var.get('Error').create())
                        if var.get('err').get('stack'):
                            var.put('out', var.get('err').get('stack'))
                            var.put('fn_name', var.get('getName')(var.get('stackStartFunction')))
                            var.put('idx', var.get('out').callprop('indexOf', (Js('\n')+var.get('fn_name'))))
                            if (var.get('idx')>=Js(0.0)):
                                var.put('next_line', var.get('out').callprop('indexOf', Js('\n'), (var.get('idx')+Js(1.0))))
                                var.put('out', var.get('out').callprop('substring', (var.get('next_line')+Js(1.0))))
                            var.get(u"this").put('stack', var.get('out'))
                PyJs_AssertionError_9_._set_name('AssertionError')
                var.get('assert').put('AssertionError', PyJs_AssertionError_9_)
                var.get('util').callprop('inherits', var.get('assert').get('AssertionError'), var.get('Error'))
                pass
                pass
                pass
                pass
                var.get('assert').put('fail', var.get('fail'))
                pass
                var.get('assert').put('ok', var.get('ok'))
                @Js
                def PyJs_equal_10_(actual, expected, message, this, arguments, var=var):
                    var = Scope({'actual':actual, 'expected':expected, 'message':message, 'this':this, 'arguments':arguments, 'equal':PyJs_equal_10_}, var)
                    var.registers(['message', 'actual', 'expected'])
                    if (var.get('actual')!=var.get('expected')):
                        var.get('fail')(var.get('actual'), var.get('expected'), var.get('message'), Js('=='), var.get('assert').get('equal'))
                PyJs_equal_10_._set_name('equal')
                var.get('assert').put('equal', PyJs_equal_10_)
                @Js
                def PyJs_notEqual_11_(actual, expected, message, this, arguments, var=var):
                    var = Scope({'actual':actual, 'expected':expected, 'message':message, 'this':this, 'arguments':arguments, 'notEqual':PyJs_notEqual_11_}, var)
                    var.registers(['message', 'actual', 'expected'])
                    if (var.get('actual')==var.get('expected')):
                        var.get('fail')(var.get('actual'), var.get('expected'), var.get('message'), Js('!='), var.get('assert').get('notEqual'))
                PyJs_notEqual_11_._set_name('notEqual')
                var.get('assert').put('notEqual', PyJs_notEqual_11_)
                @Js
                def PyJs_deepEqual_12_(actual, expected, message, this, arguments, var=var):
                    var = Scope({'actual':actual, 'expected':expected, 'message':message, 'this':this, 'arguments':arguments, 'deepEqual':PyJs_deepEqual_12_}, var)
                    var.registers(['message', 'actual', 'expected'])
                    if var.get('_deepEqual')(var.get('actual'), var.get('expected'), Js(False)).neg():
                        var.get('fail')(var.get('actual'), var.get('expected'), var.get('message'), Js('deepEqual'), var.get('assert').get('deepEqual'))
                PyJs_deepEqual_12_._set_name('deepEqual')
                var.get('assert').put('deepEqual', PyJs_deepEqual_12_)
                @Js
                def PyJs_deepStrictEqual_13_(actual, expected, message, this, arguments, var=var):
                    var = Scope({'actual':actual, 'expected':expected, 'message':message, 'this':this, 'arguments':arguments, 'deepStrictEqual':PyJs_deepStrictEqual_13_}, var)
                    var.registers(['message', 'actual', 'expected'])
                    if var.get('_deepEqual')(var.get('actual'), var.get('expected'), Js(True)).neg():
                        var.get('fail')(var.get('actual'), var.get('expected'), var.get('message'), Js('deepStrictEqual'), var.get('assert').get('deepStrictEqual'))
                PyJs_deepStrictEqual_13_._set_name('deepStrictEqual')
                var.get('assert').put('deepStrictEqual', PyJs_deepStrictEqual_13_)
                pass
                pass
                pass
                @Js
                def PyJs_notDeepEqual_16_(actual, expected, message, this, arguments, var=var):
                    var = Scope({'actual':actual, 'expected':expected, 'message':message, 'this':this, 'arguments':arguments, 'notDeepEqual':PyJs_notDeepEqual_16_}, var)
                    var.registers(['message', 'actual', 'expected'])
                    if var.get('_deepEqual')(var.get('actual'), var.get('expected'), Js(False)):
                        var.get('fail')(var.get('actual'), var.get('expected'), var.get('message'), Js('notDeepEqual'), var.get('assert').get('notDeepEqual'))
                PyJs_notDeepEqual_16_._set_name('notDeepEqual')
                var.get('assert').put('notDeepEqual', PyJs_notDeepEqual_16_)
                var.get('assert').put('notDeepStrictEqual', var.get('notDeepStrictEqual'))
                pass
                @Js
                def PyJs_strictEqual_17_(actual, expected, message, this, arguments, var=var):
                    var = Scope({'actual':actual, 'expected':expected, 'message':message, 'this':this, 'arguments':arguments, 'strictEqual':PyJs_strictEqual_17_}, var)
                    var.registers(['message', 'actual', 'expected'])
                    if PyJsStrictNeq(var.get('actual'),var.get('expected')):
                        var.get('fail')(var.get('actual'), var.get('expected'), var.get('message'), Js('==='), var.get('assert').get('strictEqual'))
                PyJs_strictEqual_17_._set_name('strictEqual')
                var.get('assert').put('strictEqual', PyJs_strictEqual_17_)
                @Js
                def PyJs_notStrictEqual_18_(actual, expected, message, this, arguments, var=var):
                    var = Scope({'actual':actual, 'expected':expected, 'message':message, 'this':this, 'arguments':arguments, 'notStrictEqual':PyJs_notStrictEqual_18_}, var)
                    var.registers(['message', 'actual', 'expected'])
                    if PyJsStrictEq(var.get('actual'),var.get('expected')):
                        var.get('fail')(var.get('actual'), var.get('expected'), var.get('message'), Js('!=='), var.get('assert').get('notStrictEqual'))
                PyJs_notStrictEqual_18_._set_name('notStrictEqual')
                var.get('assert').put('notStrictEqual', PyJs_notStrictEqual_18_)
                pass
                pass
                pass
                @Js
                def PyJs_anonymous_19_(block, error, message, this, arguments, var=var):
                    var = Scope({'block':block, 'error':error, 'message':message, 'this':this, 'arguments':arguments}, var)
                    var.registers(['message', 'error', 'block'])
                    var.get('_throws')(Js(True), var.get('block'), var.get('error'), var.get('message'))
                PyJs_anonymous_19_._set_name('anonymous')
                var.get('assert').put('throws', PyJs_anonymous_19_)
                @Js
                def PyJs_anonymous_20_(block, error, message, this, arguments, var=var):
                    var = Scope({'block':block, 'error':error, 'message':message, 'this':this, 'arguments':arguments}, var)
                    var.registers(['message', 'error', 'block'])
                    var.get('_throws')(Js(False), var.get('block'), var.get('error'), var.get('message'))
                PyJs_anonymous_20_._set_name('anonymous')
                var.get('assert').put('doesNotThrow', PyJs_anonymous_20_)
                @Js
                def PyJs_anonymous_21_(err, this, arguments, var=var):
                    var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                    var.registers(['err'])
                    if var.get('err'):
                        PyJsTempException = JsToPyException(var.get('err'))
                        raise PyJsTempException
                PyJs_anonymous_21_._set_name('anonymous')
                var.get('assert').put('ifError', PyJs_anonymous_21_)
                pass
                var.get('assert').put('strict', var.get('objectAssign')(var.get('strict'), var.get('assert'), Js({'equal':var.get('assert').get('strictEqual'),'deepEqual':var.get('assert').get('deepStrictEqual'),'notEqual':var.get('assert').get('notStrictEqual'),'notDeepEqual':var.get('assert').get('notDeepStrictEqual')})))
                var.get('assert').get('strict').put('strict', var.get('assert').get('strict'))
                @Js
                def PyJs_anonymous_22_(obj, this, arguments, var=var):
                    var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
                    var.registers(['key', 'keys', 'obj'])
                    var.put('keys', Js([]))
                    for PyJsTemp in var.get('obj'):
                        var.put('key', PyJsTemp)
                        if var.get('hasOwn').callprop('call', var.get('obj'), var.get('key')):
                            var.get('keys').callprop('push', var.get('key'))
                    return var.get('keys')
                PyJs_anonymous_22_._set_name('anonymous')
                var.put('objectKeys', (var.get('Object').get('keys') or PyJs_anonymous_22_))
            PyJs_anonymous_6_._set_name('anonymous')
            PyJs_anonymous_6_.callprop('call', var.get(u"this"))
        PyJs_anonymous_5_._set_name('anonymous')
        PyJs_anonymous_5_.callprop('call', var.get(u"this"), (var.get('global') if PyJsStrictNeq(var.get('global',throw=False).typeof(),Js('undefined')) else (var.get('self') if PyJsStrictNeq(var.get('self',throw=False).typeof(),Js('undefined')) else (var.get('window') if PyJsStrictNeq(var.get('window',throw=False).typeof(),Js('undefined')) else Js({})))))
    PyJs_anonymous_4_._set_name('anonymous')
    @Js
    def PyJs_anonymous_23_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        if PyJsStrictEq(var.get('Object').get('create').typeof(),Js('function')):
            @Js
            def PyJs_inherits_24_(ctor, superCtor, this, arguments, var=var):
                var = Scope({'ctor':ctor, 'superCtor':superCtor, 'this':this, 'arguments':arguments, 'inherits':PyJs_inherits_24_}, var)
                var.registers(['superCtor', 'ctor'])
                var.get('ctor').put('super_', var.get('superCtor'))
                var.get('ctor').put('prototype', var.get('Object').callprop('create', var.get('superCtor').get('prototype'), Js({'constructor':Js({'value':var.get('ctor'),'enumerable':Js(False),'writable':Js(True),'configurable':Js(True)})})))
            PyJs_inherits_24_._set_name('inherits')
            var.get('module').put('exports', PyJs_inherits_24_)
        else:
            @Js
            def PyJs_inherits_25_(ctor, superCtor, this, arguments, var=var):
                var = Scope({'ctor':ctor, 'superCtor':superCtor, 'this':this, 'arguments':arguments, 'inherits':PyJs_inherits_25_}, var)
                var.registers(['TempCtor', 'ctor', 'superCtor'])
                var.get('ctor').put('super_', var.get('superCtor'))
                @Js
                def PyJs_TempCtor_26_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'TempCtor':PyJs_TempCtor_26_}, var)
                    var.registers([])
                    pass
                PyJs_TempCtor_26_._set_name('TempCtor')
                var.put('TempCtor', PyJs_TempCtor_26_)
                var.get('TempCtor').put('prototype', var.get('superCtor').get('prototype'))
                var.get('ctor').put('prototype', var.get('TempCtor').create())
                var.get('ctor').get('prototype').put('constructor', var.get('ctor'))
            PyJs_inherits_25_._set_name('inherits')
            var.get('module').put('exports', PyJs_inherits_25_)
    PyJs_anonymous_23_._set_name('anonymous')
    @Js
    def PyJs_anonymous_27_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_isBuffer_28_(arg, this, arguments, var=var):
            var = Scope({'arg':arg, 'this':this, 'arguments':arguments, 'isBuffer':PyJs_isBuffer_28_}, var)
            var.registers(['arg'])
            return ((((var.get('arg') and PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('arg',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('arg'))),Js('object'))) and PyJsStrictEq(var.get('arg').get('copy').typeof(),Js('function'))) and PyJsStrictEq(var.get('arg').get('fill').typeof(),Js('function'))) and PyJsStrictEq(var.get('arg').get('readUInt8').typeof(),Js('function')))
        PyJs_isBuffer_28_._set_name('isBuffer')
        var.get('module').put('exports', PyJs_isBuffer_28_)
    PyJs_anonymous_27_._set_name('anonymous')
    @Js
    def PyJs_anonymous_29_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_30_(process, PyJsArg_676c6f62616c_, this, arguments, var=var):
            var = Scope({'process':process, 'global':PyJsArg_676c6f62616c_, 'this':this, 'arguments':arguments}, var)
            var.registers(['global', 'process'])
            @Js
            def PyJs_anonymous_31_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['isError', 'objectToString', 'isNumber', 'stylizeNoColor', 'formatRegExp', 'formatError', 'isUndefined', 'formatPrimitive', 'isArray', 'reduceToSingleString', 'stylizeWithColor', 'timestamp', 'hasOwnProperty', 'isNull', 'inspect', 'formatArray', 'pad', 'isSymbol', 'isBoolean', 'isString', 'isNullOrUndefined', 'isPrimitive', 'formatProperty', 'isObject', 'isFunction', 'debugs', 'debugEnviron', 'months', 'formatValue', 'isDate', 'isRegExp', 'arrayToHash'])
                @Js
                def PyJsHoisted_inspect_(obj, opts, this, arguments, var=var):
                    var = Scope({'obj':obj, 'opts':opts, 'this':this, 'arguments':arguments}, var)
                    var.registers(['ctx', 'opts', 'obj'])
                    var.put('ctx', Js({'seen':Js([]),'stylize':var.get('stylizeNoColor')}))
                    if (var.get('arguments').get('length')>=Js(3.0)):
                        var.get('ctx').put('depth', var.get('arguments').get('2'))
                    if (var.get('arguments').get('length')>=Js(4.0)):
                        var.get('ctx').put('colors', var.get('arguments').get('3'))
                    if var.get('isBoolean')(var.get('opts')):
                        var.get('ctx').put('showHidden', var.get('opts'))
                    else:
                        if var.get('opts'):
                            var.get('exports').callprop('_extend', var.get('ctx'), var.get('opts'))
                    if var.get('isUndefined')(var.get('ctx').get('showHidden')):
                        var.get('ctx').put('showHidden', Js(False))
                    if var.get('isUndefined')(var.get('ctx').get('depth')):
                        var.get('ctx').put('depth', Js(2.0))
                    if var.get('isUndefined')(var.get('ctx').get('colors')):
                        var.get('ctx').put('colors', Js(False))
                    if var.get('isUndefined')(var.get('ctx').get('customInspect')):
                        var.get('ctx').put('customInspect', Js(True))
                    if var.get('ctx').get('colors'):
                        var.get('ctx').put('stylize', var.get('stylizeWithColor'))
                    return var.get('formatValue')(var.get('ctx'), var.get('obj'), var.get('ctx').get('depth'))
                PyJsHoisted_inspect_.func_name = 'inspect'
                var.put('inspect', PyJsHoisted_inspect_)
                @Js
                def PyJsHoisted_stylizeWithColor_(str, styleType, this, arguments, var=var):
                    var = Scope({'str':str, 'styleType':styleType, 'this':this, 'arguments':arguments}, var)
                    var.registers(['str', 'style', 'styleType'])
                    var.put('style', var.get('inspect').get('styles').get(var.get('styleType')))
                    if var.get('style'):
                        return ((((((Js('\x1b[')+var.get('inspect').get('colors').get(var.get('style')).get('0'))+Js('m'))+var.get('str'))+Js('\x1b['))+var.get('inspect').get('colors').get(var.get('style')).get('1'))+Js('m'))
                    else:
                        return var.get('str')
                PyJsHoisted_stylizeWithColor_.func_name = 'stylizeWithColor'
                var.put('stylizeWithColor', PyJsHoisted_stylizeWithColor_)
                @Js
                def PyJsHoisted_stylizeNoColor_(str, styleType, this, arguments, var=var):
                    var = Scope({'str':str, 'styleType':styleType, 'this':this, 'arguments':arguments}, var)
                    var.registers(['str', 'styleType'])
                    return var.get('str')
                PyJsHoisted_stylizeNoColor_.func_name = 'stylizeNoColor'
                var.put('stylizeNoColor', PyJsHoisted_stylizeNoColor_)
                @Js
                def PyJsHoisted_arrayToHash_(array, this, arguments, var=var):
                    var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
                    var.registers(['hash', 'array'])
                    var.put('hash', Js({}))
                    @Js
                    def PyJs_anonymous_40_(val, idx, this, arguments, var=var):
                        var = Scope({'val':val, 'idx':idx, 'this':this, 'arguments':arguments}, var)
                        var.registers(['idx', 'val'])
                        var.get('hash').put(var.get('val'), Js(True))
                    PyJs_anonymous_40_._set_name('anonymous')
                    var.get('array').callprop('forEach', PyJs_anonymous_40_)
                    return var.get('hash')
                PyJsHoisted_arrayToHash_.func_name = 'arrayToHash'
                var.put('arrayToHash', PyJsHoisted_arrayToHash_)
                @Js
                def PyJsHoisted_formatValue_(ctx, value, recurseTimes, this, arguments, var=var):
                    var = Scope({'ctx':ctx, 'value':value, 'recurseTimes':recurseTimes, 'this':this, 'arguments':arguments}, var)
                    var.registers(['n', 'visibleKeys', 'braces', 'ret', 'primitive', 'name', 'array', 'value', 'recurseTimes', 'base', 'ctx', 'keys', 'output'])
                    if ((((var.get('ctx').get('customInspect') and var.get('value')) and var.get('isFunction')(var.get('value').get('inspect'))) and PyJsStrictNeq(var.get('value').get('inspect'),var.get('exports').get('inspect'))) and (var.get('value').get('constructor') and PyJsStrictEq(var.get('value').get('constructor').get('prototype'),var.get('value'))).neg()):
                        var.put('ret', var.get('value').callprop('inspect', var.get('recurseTimes'), var.get('ctx')))
                        if var.get('isString')(var.get('ret')).neg():
                            var.put('ret', var.get('formatValue')(var.get('ctx'), var.get('ret'), var.get('recurseTimes')))
                        return var.get('ret')
                    var.put('primitive', var.get('formatPrimitive')(var.get('ctx'), var.get('value')))
                    if var.get('primitive'):
                        return var.get('primitive')
                    var.put('keys', var.get('Object').callprop('keys', var.get('value')))
                    var.put('visibleKeys', var.get('arrayToHash')(var.get('keys')))
                    if var.get('ctx').get('showHidden'):
                        var.put('keys', var.get('Object').callprop('getOwnPropertyNames', var.get('value')))
                    if (var.get('isError')(var.get('value')) and ((var.get('keys').callprop('indexOf', Js('message'))>=Js(0.0)) or (var.get('keys').callprop('indexOf', Js('description'))>=Js(0.0)))):
                        return var.get('formatError')(var.get('value'))
                    if PyJsStrictEq(var.get('keys').get('length'),Js(0.0)):
                        if var.get('isFunction')(var.get('value')):
                            var.put('name', ((Js(': ')+var.get('value').get('name')) if var.get('value').get('name') else Js('')))
                            return var.get('ctx').callprop('stylize', ((Js('[Function')+var.get('name'))+Js(']')), Js('special'))
                        if var.get('isRegExp')(var.get('value')):
                            return var.get('ctx').callprop('stylize', var.get('RegExp').get('prototype').get('toString').callprop('call', var.get('value')), Js('regexp'))
                        if var.get('isDate')(var.get('value')):
                            return var.get('ctx').callprop('stylize', var.get('Date').get('prototype').get('toString').callprop('call', var.get('value')), Js('date'))
                        if var.get('isError')(var.get('value')):
                            return var.get('formatError')(var.get('value'))
                    var.put('base', Js(''))
                    var.put('array', Js(False))
                    var.put('braces', Js([Js('{'), Js('}')]))
                    if var.get('isArray')(var.get('value')):
                        var.put('array', Js(True))
                        var.put('braces', Js([Js('['), Js(']')]))
                    if var.get('isFunction')(var.get('value')):
                        var.put('n', ((Js(': ')+var.get('value').get('name')) if var.get('value').get('name') else Js('')))
                        var.put('base', ((Js(' [Function')+var.get('n'))+Js(']')))
                    if var.get('isRegExp')(var.get('value')):
                        var.put('base', (Js(' ')+var.get('RegExp').get('prototype').get('toString').callprop('call', var.get('value'))))
                    if var.get('isDate')(var.get('value')):
                        var.put('base', (Js(' ')+var.get('Date').get('prototype').get('toUTCString').callprop('call', var.get('value'))))
                    if var.get('isError')(var.get('value')):
                        var.put('base', (Js(' ')+var.get('formatError')(var.get('value'))))
                    if (PyJsStrictEq(var.get('keys').get('length'),Js(0.0)) and (var.get('array').neg() or (var.get('value').get('length')==Js(0.0)))):
                        return ((var.get('braces').get('0')+var.get('base'))+var.get('braces').get('1'))
                    if (var.get('recurseTimes')<Js(0.0)):
                        if var.get('isRegExp')(var.get('value')):
                            return var.get('ctx').callprop('stylize', var.get('RegExp').get('prototype').get('toString').callprop('call', var.get('value')), Js('regexp'))
                        else:
                            return var.get('ctx').callprop('stylize', Js('[Object]'), Js('special'))
                    var.get('ctx').get('seen').callprop('push', var.get('value'))
                    pass
                    if var.get('array'):
                        var.put('output', var.get('formatArray')(var.get('ctx'), var.get('value'), var.get('recurseTimes'), var.get('visibleKeys'), var.get('keys')))
                    else:
                        @Js
                        def PyJs_anonymous_41_(key, this, arguments, var=var):
                            var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                            var.registers(['key'])
                            return var.get('formatProperty')(var.get('ctx'), var.get('value'), var.get('recurseTimes'), var.get('visibleKeys'), var.get('key'), var.get('array'))
                        PyJs_anonymous_41_._set_name('anonymous')
                        var.put('output', var.get('keys').callprop('map', PyJs_anonymous_41_))
                    var.get('ctx').get('seen').callprop('pop')
                    return var.get('reduceToSingleString')(var.get('output'), var.get('base'), var.get('braces'))
                PyJsHoisted_formatValue_.func_name = 'formatValue'
                var.put('formatValue', PyJsHoisted_formatValue_)
                @Js
                def PyJsHoisted_formatPrimitive_(ctx, value, this, arguments, var=var):
                    var = Scope({'ctx':ctx, 'value':value, 'this':this, 'arguments':arguments}, var)
                    var.registers(['ctx', 'value', 'simple'])
                    if var.get('isUndefined')(var.get('value')):
                        return var.get('ctx').callprop('stylize', Js('undefined'), Js('undefined'))
                    if var.get('isString')(var.get('value')):
                        var.put('simple', ((Js("'")+var.get('JSON').callprop('stringify', var.get('value')).callprop('replace', JsRegExp('/^"|"$/g'), Js('')).callprop('replace', JsRegExp("/'/g"), Js("\\'")).callprop('replace', JsRegExp('/\\\\"/g'), Js('"')))+Js("'")))
                        return var.get('ctx').callprop('stylize', var.get('simple'), Js('string'))
                    if var.get('isNumber')(var.get('value')):
                        return var.get('ctx').callprop('stylize', (Js('')+var.get('value')), Js('number'))
                    if var.get('isBoolean')(var.get('value')):
                        return var.get('ctx').callprop('stylize', (Js('')+var.get('value')), Js('boolean'))
                    if var.get('isNull')(var.get('value')):
                        return var.get('ctx').callprop('stylize', Js('null'), Js('null'))
                PyJsHoisted_formatPrimitive_.func_name = 'formatPrimitive'
                var.put('formatPrimitive', PyJsHoisted_formatPrimitive_)
                @Js
                def PyJsHoisted_formatError_(value, this, arguments, var=var):
                    var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                    var.registers(['value'])
                    return ((Js('[')+var.get('Error').get('prototype').get('toString').callprop('call', var.get('value')))+Js(']'))
                PyJsHoisted_formatError_.func_name = 'formatError'
                var.put('formatError', PyJsHoisted_formatError_)
                @Js
                def PyJsHoisted_formatArray_(ctx, value, recurseTimes, visibleKeys, keys, this, arguments, var=var):
                    var = Scope({'ctx':ctx, 'value':value, 'recurseTimes':recurseTimes, 'visibleKeys':visibleKeys, 'keys':keys, 'this':this, 'arguments':arguments}, var)
                    var.registers(['visibleKeys', 'i', 'l', 'recurseTimes', 'value', 'ctx', 'keys', 'output'])
                    var.put('output', Js([]))
                    #for JS loop
                    var.put('i', Js(0.0))
                    var.put('l', var.get('value').get('length'))
                    while (var.get('i')<var.get('l')):
                        try:
                            if var.get('hasOwnProperty')(var.get('value'), var.get('String')(var.get('i'))):
                                var.get('output').callprop('push', var.get('formatProperty')(var.get('ctx'), var.get('value'), var.get('recurseTimes'), var.get('visibleKeys'), var.get('String')(var.get('i')), Js(True)))
                            else:
                                var.get('output').callprop('push', Js(''))
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    @Js
                    def PyJs_anonymous_42_(key, this, arguments, var=var):
                        var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key'])
                        if var.get('key').callprop('match', JsRegExp('/^\\d+$/')).neg():
                            var.get('output').callprop('push', var.get('formatProperty')(var.get('ctx'), var.get('value'), var.get('recurseTimes'), var.get('visibleKeys'), var.get('key'), Js(True)))
                    PyJs_anonymous_42_._set_name('anonymous')
                    var.get('keys').callprop('forEach', PyJs_anonymous_42_)
                    return var.get('output')
                PyJsHoisted_formatArray_.func_name = 'formatArray'
                var.put('formatArray', PyJsHoisted_formatArray_)
                @Js
                def PyJsHoisted_formatProperty_(ctx, value, recurseTimes, visibleKeys, key, array, this, arguments, var=var):
                    var = Scope({'ctx':ctx, 'value':value, 'recurseTimes':recurseTimes, 'visibleKeys':visibleKeys, 'key':key, 'array':array, 'this':this, 'arguments':arguments}, var)
                    var.registers(['visibleKeys', 'str', 'key', 'desc', 'name', 'recurseTimes', 'array', 'ctx', 'value'])
                    pass
                    var.put('desc', (var.get('Object').callprop('getOwnPropertyDescriptor', var.get('value'), var.get('key')) or Js({'value':var.get('value').get(var.get('key'))})))
                    if var.get('desc').get('get'):
                        if var.get('desc').get('set'):
                            var.put('str', var.get('ctx').callprop('stylize', Js('[Getter/Setter]'), Js('special')))
                        else:
                            var.put('str', var.get('ctx').callprop('stylize', Js('[Getter]'), Js('special')))
                    else:
                        if var.get('desc').get('set'):
                            var.put('str', var.get('ctx').callprop('stylize', Js('[Setter]'), Js('special')))
                    if var.get('hasOwnProperty')(var.get('visibleKeys'), var.get('key')).neg():
                        var.put('name', ((Js('[')+var.get('key'))+Js(']')))
                    if var.get('str').neg():
                        if (var.get('ctx').get('seen').callprop('indexOf', var.get('desc').get('value'))<Js(0.0)):
                            if var.get('isNull')(var.get('recurseTimes')):
                                var.put('str', var.get('formatValue')(var.get('ctx'), var.get('desc').get('value'), var.get(u"null")))
                            else:
                                var.put('str', var.get('formatValue')(var.get('ctx'), var.get('desc').get('value'), (var.get('recurseTimes')-Js(1.0))))
                            if (var.get('str').callprop('indexOf', Js('\n'))>(-Js(1.0))):
                                if var.get('array'):
                                    @Js
                                    def PyJs_anonymous_43_(line, this, arguments, var=var):
                                        var = Scope({'line':line, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['line'])
                                        return (Js('  ')+var.get('line'))
                                    PyJs_anonymous_43_._set_name('anonymous')
                                    var.put('str', var.get('str').callprop('split', Js('\n')).callprop('map', PyJs_anonymous_43_).callprop('join', Js('\n')).callprop('substr', Js(2.0)))
                                else:
                                    @Js
                                    def PyJs_anonymous_44_(line, this, arguments, var=var):
                                        var = Scope({'line':line, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['line'])
                                        return (Js('   ')+var.get('line'))
                                    PyJs_anonymous_44_._set_name('anonymous')
                                    var.put('str', (Js('\n')+var.get('str').callprop('split', Js('\n')).callprop('map', PyJs_anonymous_44_).callprop('join', Js('\n'))))
                        else:
                            var.put('str', var.get('ctx').callprop('stylize', Js('[Circular]'), Js('special')))
                    if var.get('isUndefined')(var.get('name')):
                        if (var.get('array') and var.get('key').callprop('match', JsRegExp('/^\\d+$/'))):
                            return var.get('str')
                        var.put('name', var.get('JSON').callprop('stringify', (Js('')+var.get('key'))))
                        if var.get('name').callprop('match', JsRegExp('/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/')):
                            var.put('name', var.get('name').callprop('substr', Js(1.0), (var.get('name').get('length')-Js(2.0))))
                            var.put('name', var.get('ctx').callprop('stylize', var.get('name'), Js('name')))
                        else:
                            var.put('name', var.get('name').callprop('replace', JsRegExp("/'/g"), Js("\\'")).callprop('replace', JsRegExp('/\\\\"/g'), Js('"')).callprop('replace', JsRegExp('/(^"|"$)/g'), Js("'")))
                            var.put('name', var.get('ctx').callprop('stylize', var.get('name'), Js('string')))
                    return ((var.get('name')+Js(': '))+var.get('str'))
                PyJsHoisted_formatProperty_.func_name = 'formatProperty'
                var.put('formatProperty', PyJsHoisted_formatProperty_)
                @Js
                def PyJsHoisted_reduceToSingleString_(output, base, braces, this, arguments, var=var):
                    var = Scope({'output':output, 'base':base, 'braces':braces, 'this':this, 'arguments':arguments}, var)
                    var.registers(['braces', 'numLinesEst', 'length', 'base', 'output'])
                    var.put('numLinesEst', Js(0.0))
                    @Js
                    def PyJs_anonymous_45_(prev, cur, this, arguments, var=var):
                        var = Scope({'prev':prev, 'cur':cur, 'this':this, 'arguments':arguments}, var)
                        var.registers(['prev', 'cur'])
                        (var.put('numLinesEst',Js(var.get('numLinesEst').to_number())+Js(1))-Js(1))
                        if (var.get('cur').callprop('indexOf', Js('\n'))>=Js(0.0)):
                            (var.put('numLinesEst',Js(var.get('numLinesEst').to_number())+Js(1))-Js(1))
                        return ((var.get('prev')+var.get('cur').callprop('replace', JsRegExp('/\\u001b\\[\\d\\d?m/g'), Js('')).get('length'))+Js(1.0))
                    PyJs_anonymous_45_._set_name('anonymous')
                    var.put('length', var.get('output').callprop('reduce', PyJs_anonymous_45_, Js(0.0)))
                    if (var.get('length')>Js(60.0)):
                        return (((((var.get('braces').get('0')+(Js('') if PyJsStrictEq(var.get('base'),Js('')) else (var.get('base')+Js('\n '))))+Js(' '))+var.get('output').callprop('join', Js(',\n  ')))+Js(' '))+var.get('braces').get('1'))
                    return (((((var.get('braces').get('0')+var.get('base'))+Js(' '))+var.get('output').callprop('join', Js(', ')))+Js(' '))+var.get('braces').get('1'))
                PyJsHoisted_reduceToSingleString_.func_name = 'reduceToSingleString'
                var.put('reduceToSingleString', PyJsHoisted_reduceToSingleString_)
                @Js
                def PyJsHoisted_isArray_(ar, this, arguments, var=var):
                    var = Scope({'ar':ar, 'this':this, 'arguments':arguments}, var)
                    var.registers(['ar'])
                    return var.get('Array').callprop('isArray', var.get('ar'))
                PyJsHoisted_isArray_.func_name = 'isArray'
                var.put('isArray', PyJsHoisted_isArray_)
                @Js
                def PyJsHoisted_isBoolean_(arg, this, arguments, var=var):
                    var = Scope({'arg':arg, 'this':this, 'arguments':arguments}, var)
                    var.registers(['arg'])
                    return PyJsStrictEq(var.get('arg',throw=False).typeof(),Js('boolean'))
                PyJsHoisted_isBoolean_.func_name = 'isBoolean'
                var.put('isBoolean', PyJsHoisted_isBoolean_)
                @Js
                def PyJsHoisted_isNull_(arg, this, arguments, var=var):
                    var = Scope({'arg':arg, 'this':this, 'arguments':arguments}, var)
                    var.registers(['arg'])
                    return PyJsStrictEq(var.get('arg'),var.get(u"null"))
                PyJsHoisted_isNull_.func_name = 'isNull'
                var.put('isNull', PyJsHoisted_isNull_)
                @Js
                def PyJsHoisted_isNullOrUndefined_(arg, this, arguments, var=var):
                    var = Scope({'arg':arg, 'this':this, 'arguments':arguments}, var)
                    var.registers(['arg'])
                    return (var.get('arg')==var.get(u"null"))
                PyJsHoisted_isNullOrUndefined_.func_name = 'isNullOrUndefined'
                var.put('isNullOrUndefined', PyJsHoisted_isNullOrUndefined_)
                @Js
                def PyJsHoisted_isNumber_(arg, this, arguments, var=var):
                    var = Scope({'arg':arg, 'this':this, 'arguments':arguments}, var)
                    var.registers(['arg'])
                    return PyJsStrictEq(var.get('arg',throw=False).typeof(),Js('number'))
                PyJsHoisted_isNumber_.func_name = 'isNumber'
                var.put('isNumber', PyJsHoisted_isNumber_)
                @Js
                def PyJsHoisted_isString_(arg, this, arguments, var=var):
                    var = Scope({'arg':arg, 'this':this, 'arguments':arguments}, var)
                    var.registers(['arg'])
                    return PyJsStrictEq(var.get('arg',throw=False).typeof(),Js('string'))
                PyJsHoisted_isString_.func_name = 'isString'
                var.put('isString', PyJsHoisted_isString_)
                @Js
                def PyJsHoisted_isSymbol_(arg, this, arguments, var=var):
                    var = Scope({'arg':arg, 'this':this, 'arguments':arguments}, var)
                    var.registers(['arg'])
                    return PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('arg',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('arg'))),Js('symbol'))
                PyJsHoisted_isSymbol_.func_name = 'isSymbol'
                var.put('isSymbol', PyJsHoisted_isSymbol_)
                @Js
                def PyJsHoisted_isUndefined_(arg, this, arguments, var=var):
                    var = Scope({'arg':arg, 'this':this, 'arguments':arguments}, var)
                    var.registers(['arg'])
                    return PyJsStrictEq(var.get('arg'),PyJsComma(Js(0.0), Js(None)))
                PyJsHoisted_isUndefined_.func_name = 'isUndefined'
                var.put('isUndefined', PyJsHoisted_isUndefined_)
                @Js
                def PyJsHoisted_isRegExp_(re, this, arguments, var=var):
                    var = Scope({'re':re, 'this':this, 'arguments':arguments}, var)
                    var.registers(['re'])
                    return (var.get('isObject')(var.get('re')) and PyJsStrictEq(var.get('objectToString')(var.get('re')),Js('[object RegExp]')))
                PyJsHoisted_isRegExp_.func_name = 'isRegExp'
                var.put('isRegExp', PyJsHoisted_isRegExp_)
                @Js
                def PyJsHoisted_isObject_(arg, this, arguments, var=var):
                    var = Scope({'arg':arg, 'this':this, 'arguments':arguments}, var)
                    var.registers(['arg'])
                    return (PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('arg',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('arg'))),Js('object')) and PyJsStrictNeq(var.get('arg'),var.get(u"null")))
                PyJsHoisted_isObject_.func_name = 'isObject'
                var.put('isObject', PyJsHoisted_isObject_)
                @Js
                def PyJsHoisted_isDate_(d, this, arguments, var=var):
                    var = Scope({'d':d, 'this':this, 'arguments':arguments}, var)
                    var.registers(['d'])
                    return (var.get('isObject')(var.get('d')) and PyJsStrictEq(var.get('objectToString')(var.get('d')),Js('[object Date]')))
                PyJsHoisted_isDate_.func_name = 'isDate'
                var.put('isDate', PyJsHoisted_isDate_)
                @Js
                def PyJsHoisted_isError_(e, this, arguments, var=var):
                    var = Scope({'e':e, 'this':this, 'arguments':arguments}, var)
                    var.registers(['e'])
                    return (var.get('isObject')(var.get('e')) and (PyJsStrictEq(var.get('objectToString')(var.get('e')),Js('[object Error]')) or var.get('e').instanceof(var.get('Error'))))
                PyJsHoisted_isError_.func_name = 'isError'
                var.put('isError', PyJsHoisted_isError_)
                @Js
                def PyJsHoisted_isFunction_(arg, this, arguments, var=var):
                    var = Scope({'arg':arg, 'this':this, 'arguments':arguments}, var)
                    var.registers(['arg'])
                    return PyJsStrictEq(var.get('arg',throw=False).typeof(),Js('function'))
                PyJsHoisted_isFunction_.func_name = 'isFunction'
                var.put('isFunction', PyJsHoisted_isFunction_)
                @Js
                def PyJsHoisted_isPrimitive_(arg, this, arguments, var=var):
                    var = Scope({'arg':arg, 'this':this, 'arguments':arguments}, var)
                    var.registers(['arg'])
                    def PyJs_LONG_46_(var=var):
                        return ((((PyJsStrictEq(var.get('arg'),var.get(u"null")) or PyJsStrictEq(var.get('arg',throw=False).typeof(),Js('boolean'))) or PyJsStrictEq(var.get('arg',throw=False).typeof(),Js('number'))) or PyJsStrictEq(var.get('arg',throw=False).typeof(),Js('string'))) or PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('arg',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('arg'))),Js('symbol')))
                    return (PyJs_LONG_46_() or PyJsStrictEq(var.get('arg',throw=False).typeof(),Js('undefined')))
                PyJsHoisted_isPrimitive_.func_name = 'isPrimitive'
                var.put('isPrimitive', PyJsHoisted_isPrimitive_)
                @Js
                def PyJsHoisted_objectToString_(o, this, arguments, var=var):
                    var = Scope({'o':o, 'this':this, 'arguments':arguments}, var)
                    var.registers(['o'])
                    return var.get('Object').get('prototype').get('toString').callprop('call', var.get('o'))
                PyJsHoisted_objectToString_.func_name = 'objectToString'
                var.put('objectToString', PyJsHoisted_objectToString_)
                @Js
                def PyJsHoisted_pad_(n, this, arguments, var=var):
                    var = Scope({'n':n, 'this':this, 'arguments':arguments}, var)
                    var.registers(['n'])
                    return ((Js('0')+var.get('n').callprop('toString', Js(10.0))) if (var.get('n')<Js(10.0)) else var.get('n').callprop('toString', Js(10.0)))
                PyJsHoisted_pad_.func_name = 'pad'
                var.put('pad', PyJsHoisted_pad_)
                @Js
                def PyJsHoisted_timestamp_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers(['d', 'time'])
                    var.put('d', var.get('Date').create())
                    var.put('time', Js([var.get('pad')(var.get('d').callprop('getHours')), var.get('pad')(var.get('d').callprop('getMinutes')), var.get('pad')(var.get('d').callprop('getSeconds'))]).callprop('join', Js(':')))
                    return Js([var.get('d').callprop('getDate'), var.get('months').get(var.get('d').callprop('getMonth')), var.get('time')]).callprop('join', Js(' '))
                PyJsHoisted_timestamp_.func_name = 'timestamp'
                var.put('timestamp', PyJsHoisted_timestamp_)
                @Js
                def PyJsHoisted_hasOwnProperty_(obj, prop, this, arguments, var=var):
                    var = Scope({'obj':obj, 'prop':prop, 'this':this, 'arguments':arguments}, var)
                    var.registers(['prop', 'obj'])
                    return var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('prop'))
                PyJsHoisted_hasOwnProperty_.func_name = 'hasOwnProperty'
                var.put('hasOwnProperty', PyJsHoisted_hasOwnProperty_)
                var.put('formatRegExp', JsRegExp('/%[sdj%]/g'))
                @Js
                def PyJs_anonymous_32_(f, this, arguments, var=var):
                    var = Scope({'f':f, 'this':this, 'arguments':arguments}, var)
                    var.registers(['len', 'x', 'i', 'objects', 'str', 'args', 'f'])
                    if var.get('isString')(var.get('f')).neg():
                        var.put('objects', Js([]))
                        #for JS loop
                        var.put('i', Js(0.0))
                        while (var.get('i')<var.get('arguments').get('length')):
                            try:
                                var.get('objects').callprop('push', var.get('inspect')(var.get('arguments').get(var.get('i'))))
                            finally:
                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                        return var.get('objects').callprop('join', Js(' '))
                    var.put('i', Js(1.0))
                    var.put('args', var.get('arguments'))
                    var.put('len', var.get('args').get('length'))
                    @Js
                    def PyJs_anonymous_33_(x, this, arguments, var=var):
                        var = Scope({'x':x, 'this':this, 'arguments':arguments}, var)
                        var.registers(['x'])
                        if PyJsStrictEq(var.get('x'),Js('%%')):
                            return Js('%')
                        if (var.get('i')>=var.get('len')):
                            return var.get('x')
                        while 1:
                            SWITCHED = False
                            CONDITION = (var.get('x'))
                            if SWITCHED or PyJsStrictEq(CONDITION, Js('%s')):
                                SWITCHED = True
                                return var.get('String')(var.get('args').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))
                            if SWITCHED or PyJsStrictEq(CONDITION, Js('%d')):
                                SWITCHED = True
                                return var.get('Number')(var.get('args').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))
                            if SWITCHED or PyJsStrictEq(CONDITION, Js('%j')):
                                SWITCHED = True
                                try:
                                    return var.get('JSON').callprop('stringify', var.get('args').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))
                                except PyJsException as PyJsTempException:
                                    PyJsHolder_5f_74804923 = var.own.get('_')
                                    var.force_own_put('_', PyExceptionToJs(PyJsTempException))
                                    try:
                                        return Js('[Circular]')
                                    finally:
                                        if PyJsHolder_5f_74804923 is not None:
                                            var.own['_'] = PyJsHolder_5f_74804923
                                        else:
                                            del var.own['_']
                                        del PyJsHolder_5f_74804923
                            if True:
                                SWITCHED = True
                                return var.get('x')
                            SWITCHED = True
                            break
                    PyJs_anonymous_33_._set_name('anonymous')
                    var.put('str', var.get('String')(var.get('f')).callprop('replace', var.get('formatRegExp'), PyJs_anonymous_33_))
                    #for JS loop
                    var.put('x', var.get('args').get(var.get('i')))
                    while (var.get('i')<var.get('len')):
                        try:
                            if (var.get('isNull')(var.get('x')) or var.get('isObject')(var.get('x')).neg()):
                                var.put('str', (Js(' ')+var.get('x')), '+')
                            else:
                                var.put('str', (Js(' ')+var.get('inspect')(var.get('x'))), '+')
                        finally:
                                var.put('x', var.get('args').get(var.put('i',Js(var.get('i').to_number())+Js(1))))
                    return var.get('str')
                PyJs_anonymous_32_._set_name('anonymous')
                var.get('exports').put('format', PyJs_anonymous_32_)
                @Js
                def PyJs_anonymous_34_(fn, msg, this, arguments, var=var):
                    var = Scope({'fn':fn, 'msg':msg, 'this':this, 'arguments':arguments}, var)
                    var.registers(['fn', 'msg', 'deprecated', 'warned'])
                    @Js
                    def PyJsHoisted_deprecated_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        if var.get('warned').neg():
                            if var.get('process').get('throwDeprecation'):
                                PyJsTempException = JsToPyException(var.get('Error').create(var.get('msg')))
                                raise PyJsTempException
                            else:
                                if var.get('process').get('traceDeprecation'):
                                    var.get('console').callprop('trace', var.get('msg'))
                                else:
                                    var.get('console').callprop('error', var.get('msg'))
                            var.put('warned', Js(True))
                        return var.get('fn').callprop('apply', var.get(u"this"), var.get('arguments'))
                    PyJsHoisted_deprecated_.func_name = 'deprecated'
                    var.put('deprecated', PyJsHoisted_deprecated_)
                    if var.get('isUndefined')(var.get('global').get('process')):
                        @Js
                        def PyJs_anonymous_35_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers([])
                            return var.get('exports').callprop('deprecate', var.get('fn'), var.get('msg')).callprop('apply', var.get(u"this"), var.get('arguments'))
                        PyJs_anonymous_35_._set_name('anonymous')
                        return PyJs_anonymous_35_
                    if PyJsStrictEq(var.get('process').get('noDeprecation'),Js(True)):
                        return var.get('fn')
                    var.put('warned', Js(False))
                    pass
                    return var.get('deprecated')
                PyJs_anonymous_34_._set_name('anonymous')
                var.get('exports').put('deprecate', PyJs_anonymous_34_)
                var.put('debugs', Js({}))
                pass
                @Js
                def PyJs_anonymous_36_(set, this, arguments, var=var):
                    var = Scope({'set':set, 'this':this, 'arguments':arguments}, var)
                    var.registers(['pid', 'set'])
                    if var.get('isUndefined')(var.get('debugEnviron')):
                        var.put('debugEnviron', (var.get('process').get('env').get('NODE_DEBUG') or Js('')))
                    var.put('set', var.get('set').callprop('toUpperCase'))
                    if var.get('debugs').get(var.get('set')).neg():
                        if var.get('RegExp').create(((Js('\\b')+var.get('set'))+Js('\\b')), Js('i')).callprop('test', var.get('debugEnviron')):
                            var.put('pid', var.get('process').get('pid'))
                            @Js
                            def PyJs_anonymous_37_(this, arguments, var=var):
                                var = Scope({'this':this, 'arguments':arguments}, var)
                                var.registers(['msg'])
                                var.put('msg', var.get('exports').get('format').callprop('apply', var.get('exports'), var.get('arguments')))
                                var.get('console').callprop('error', Js('%s %d: %s'), var.get('set'), var.get('pid'), var.get('msg'))
                            PyJs_anonymous_37_._set_name('anonymous')
                            var.get('debugs').put(var.get('set'), PyJs_anonymous_37_)
                        else:
                            @Js
                            def PyJs_anonymous_38_(this, arguments, var=var):
                                var = Scope({'this':this, 'arguments':arguments}, var)
                                var.registers([])
                                pass
                            PyJs_anonymous_38_._set_name('anonymous')
                            var.get('debugs').put(var.get('set'), PyJs_anonymous_38_)
                    return var.get('debugs').get(var.get('set'))
                PyJs_anonymous_36_._set_name('anonymous')
                var.get('exports').put('debuglog', PyJs_anonymous_36_)
                pass
                var.get('exports').put('inspect', var.get('inspect'))
                def PyJs_LONG_39_(var=var):
                    return var.get('inspect').put('colors', Js({'bold':Js([Js(1.0), Js(22.0)]),'italic':Js([Js(3.0), Js(23.0)]),'underline':Js([Js(4.0), Js(24.0)]),'inverse':Js([Js(7.0), Js(27.0)]),'white':Js([Js(37.0), Js(39.0)]),'grey':Js([Js(90.0), Js(39.0)]),'black':Js([Js(30.0), Js(39.0)]),'blue':Js([Js(34.0), Js(39.0)]),'cyan':Js([Js(36.0), Js(39.0)]),'green':Js([Js(32.0), Js(39.0)]),'magenta':Js([Js(35.0), Js(39.0)]),'red':Js([Js(31.0), Js(39.0)]),'yellow':Js([Js(33.0), Js(39.0)])}))
                PyJs_LONG_39_()
                var.get('inspect').put('styles', Js({'special':Js('cyan'),'number':Js('yellow'),'boolean':Js('yellow'),'undefined':Js('grey'),'null':Js('bold'),'string':Js('green'),'date':Js('magenta'),'regexp':Js('red')}))
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                var.get('exports').put('isArray', var.get('isArray'))
                pass
                var.get('exports').put('isBoolean', var.get('isBoolean'))
                pass
                var.get('exports').put('isNull', var.get('isNull'))
                pass
                var.get('exports').put('isNullOrUndefined', var.get('isNullOrUndefined'))
                pass
                var.get('exports').put('isNumber', var.get('isNumber'))
                pass
                var.get('exports').put('isString', var.get('isString'))
                pass
                var.get('exports').put('isSymbol', var.get('isSymbol'))
                pass
                var.get('exports').put('isUndefined', var.get('isUndefined'))
                pass
                var.get('exports').put('isRegExp', var.get('isRegExp'))
                pass
                var.get('exports').put('isObject', var.get('isObject'))
                pass
                var.get('exports').put('isDate', var.get('isDate'))
                pass
                var.get('exports').put('isError', var.get('isError'))
                pass
                var.get('exports').put('isFunction', var.get('isFunction'))
                pass
                var.get('exports').put('isPrimitive', var.get('isPrimitive'))
                var.get('exports').put('isBuffer', var.get('require')(Js('./support/isBuffer')))
                pass
                pass
                var.put('months', Js([Js('Jan'), Js('Feb'), Js('Mar'), Js('Apr'), Js('May'), Js('Jun'), Js('Jul'), Js('Aug'), Js('Sep'), Js('Oct'), Js('Nov'), Js('Dec')]))
                pass
                @Js
                def PyJs_anonymous_47_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.get('console').callprop('log', Js('%s - %s'), var.get('timestamp')(), var.get('exports').get('format').callprop('apply', var.get('exports'), var.get('arguments')))
                PyJs_anonymous_47_._set_name('anonymous')
                var.get('exports').put('log', PyJs_anonymous_47_)
                var.get('exports').put('inherits', var.get('require')(Js('inherits')))
                @Js
                def PyJs_anonymous_48_(origin, add, this, arguments, var=var):
                    var = Scope({'origin':origin, 'add':add, 'this':this, 'arguments':arguments}, var)
                    var.registers(['origin', 'keys', 'i', 'add'])
                    if (var.get('add').neg() or var.get('isObject')(var.get('add')).neg()):
                        return var.get('origin')
                    var.put('keys', var.get('Object').callprop('keys', var.get('add')))
                    var.put('i', var.get('keys').get('length'))
                    while (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1)):
                        var.get('origin').put(var.get('keys').get(var.get('i')), var.get('add').get(var.get('keys').get(var.get('i'))))
                    return var.get('origin')
                PyJs_anonymous_48_._set_name('anonymous')
                var.get('exports').put('_extend', PyJs_anonymous_48_)
                pass
            PyJs_anonymous_31_._set_name('anonymous')
            PyJs_anonymous_31_.callprop('call', var.get(u"this"))
        PyJs_anonymous_30_._set_name('anonymous')
        PyJs_anonymous_30_.callprop('call', var.get(u"this"), var.get('require')(Js('_process')), (var.get('global') if PyJsStrictNeq(var.get('global',throw=False).typeof(),Js('undefined')) else (var.get('self') if PyJsStrictNeq(var.get('self',throw=False).typeof(),Js('undefined')) else (var.get('window') if PyJsStrictNeq(var.get('window',throw=False).typeof(),Js('undefined')) else Js({})))))
    PyJs_anonymous_29_._set_name('anonymous')
    @Js
    def PyJs_anonymous_49_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_50_(PyJsArg_676c6f62616c_, this, arguments, var=var):
            var = Scope({'global':PyJsArg_676c6f62616c_, 'this':this, 'arguments':arguments}, var)
            var.registers(['global'])
            @Js
            def PyJs_anonymous_51_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['filter'])
                Js('use strict')
                var.put('filter', var.get('require')(Js('array-filter')))
                @Js
                def PyJs_availableTypedArrays_52_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'availableTypedArrays':PyJs_availableTypedArrays_52_}, var)
                    var.registers([])
                    @Js
                    def PyJs_anonymous_53_(typedArray, this, arguments, var=var):
                        var = Scope({'typedArray':typedArray, 'this':this, 'arguments':arguments}, var)
                        var.registers(['typedArray'])
                        return PyJsStrictEq(var.get('global').get(var.get('typedArray')).typeof(),Js('function'))
                    PyJs_anonymous_53_._set_name('anonymous')
                    return var.get('filter')(Js([Js('BigInt64Array'), Js('BigUint64Array'), Js('Float32Array'), Js('Float64Array'), Js('Int16Array'), Js('Int32Array'), Js('Int8Array'), Js('Uint16Array'), Js('Uint32Array'), Js('Uint8Array'), Js('Uint8ClampedArray')]), PyJs_anonymous_53_)
                PyJs_availableTypedArrays_52_._set_name('availableTypedArrays')
                var.get('module').put('exports', PyJs_availableTypedArrays_52_)
            PyJs_anonymous_51_._set_name('anonymous')
            PyJs_anonymous_51_.callprop('call', var.get(u"this"))
        PyJs_anonymous_50_._set_name('anonymous')
        PyJs_anonymous_50_.callprop('call', var.get(u"this"), (var.get('global') if PyJsStrictNeq(var.get('global',throw=False).typeof(),Js('undefined')) else (var.get('self') if PyJsStrictNeq(var.get('self',throw=False).typeof(),Js('undefined')) else (var.get('window') if PyJsStrictNeq(var.get('window',throw=False).typeof(),Js('undefined')) else Js({})))))
    PyJs_anonymous_49_._set_name('anonymous')
    @Js
    def PyJs_anonymous_54_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_55_(PyJsArg_676c6f62616c_, this, arguments, var=var):
            var = Scope({'global':PyJsArg_676c6f62616c_, 'this':this, 'arguments':arguments}, var)
            var.registers(['global'])
            @Js
            def PyJs_anonymous_56_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['DEFINE_PROPERTY', 'define'])
                @Js
                def PyJsHoisted_define_(O, key, value, this, arguments, var=var):
                    var = Scope({'O':O, 'key':key, 'value':value, 'this':this, 'arguments':arguments}, var)
                    var.registers(['O', 'key', 'value'])
                    (var.get('O').get(var.get('key')) or var.get('Object').callprop(var.get('DEFINE_PROPERTY'), var.get('O'), var.get('key'), Js({'writable':Js(True),'configurable':Js(True),'value':var.get('value')})))
                PyJsHoisted_define_.func_name = 'define'
                var.put('define', PyJsHoisted_define_)
                Js('use strict')
                var.get('require')(Js('core-js/shim'))
                var.get('require')(Js('regenerator-runtime/runtime'))
                var.get('require')(Js('core-js/fn/regexp/escape'))
                if var.get('global').get('_babelPolyfill'):
                    PyJsTempException = JsToPyException(var.get('Error').create(Js('only one instance of babel-polyfill is allowed')))
                    raise PyJsTempException
                var.get('global').put('_babelPolyfill', Js(True))
                var.put('DEFINE_PROPERTY', Js('defineProperty'))
                pass
                var.get('define')(var.get('String').get('prototype'), Js('padLeft'), Js('').get('padStart'))
                var.get('define')(var.get('String').get('prototype'), Js('padRight'), Js('').get('padEnd'))
                @Js
                def PyJs_anonymous_57_(key, this, arguments, var=var):
                    var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                    var.registers(['key'])
                    (Js([]).get(var.get('key')) and var.get('define')(var.get('Array'), var.get('key'), var.get('Function').get('call').callprop('bind', Js([]).get(var.get('key')))))
                PyJs_anonymous_57_._set_name('anonymous')
                Js('pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill').callprop('split', Js(',')).callprop('forEach', PyJs_anonymous_57_)
            PyJs_anonymous_56_._set_name('anonymous')
            PyJs_anonymous_56_.callprop('call', var.get(u"this"))
        PyJs_anonymous_55_._set_name('anonymous')
        PyJs_anonymous_55_.callprop('call', var.get(u"this"), (var.get('global') if PyJsStrictNeq(var.get('global',throw=False).typeof(),Js('undefined')) else (var.get('self') if PyJsStrictNeq(var.get('self',throw=False).typeof(),Js('undefined')) else (var.get('window') if PyJsStrictNeq(var.get('window',throw=False).typeof(),Js('undefined')) else Js({})))))
    PyJs_anonymous_54_._set_name('anonymous')
    @Js
    def PyJs_anonymous_58_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_59_(PyJsArg_676c6f62616c_, this, arguments, var=var):
            var = Scope({'global':PyJsArg_676c6f62616c_, 'this':this, 'arguments':arguments}, var)
            var.registers(['global'])
            @Js
            def PyJs_anonymous_60_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                def PyJs_LONG_61_(var=var):
                    return (var.get('global') if PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('global',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('global'))),Js('object')) else (var.get('window') if PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('window',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('window'))),Js('object')) else (var.get('self') if PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('self',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('self'))),Js('object')) else var.get(u"this"))))
                @Js
                def PyJs_anonymous_62_(PyJsArg_676c6f62616c_, this, arguments, var=var):
                    var = Scope({'global':PyJsArg_676c6f62616c_, 'this':this, 'arguments':arguments}, var)
                    var.registers(['doneResult', 'global', 'Gp', 'IteratorPrototype', 'ContinueSentinel', 'GeneratorFunction', 'Generator', 'getProto', 'Context', 'makeInvokeMethod', 'toStringTagSymbol', 'maybeInvokeDelegate', 'resetTryEntry', 'tryCatch', 'undefined', 'GeneratorFunctionPrototype', 'inModule', 'Op', 'iteratorSymbol', 'GenStateSuspendedStart', 'GenStateSuspendedYield', 'NativeIteratorPrototype', 'GenStateCompleted', 'values', 'GenStateExecuting', 'AsyncIterator', '$Symbol', 'defineIteratorMethods', 'wrap', 'runtime', 'hasOwn', 'pushTryEntry', 'asyncIteratorSymbol'])
                    @Js
                    def PyJsHoisted_wrap_(innerFn, outerFn, self, tryLocsList, this, arguments, var=var):
                        var = Scope({'innerFn':innerFn, 'outerFn':outerFn, 'self':self, 'tryLocsList':tryLocsList, 'this':this, 'arguments':arguments}, var)
                        var.registers(['context', 'self', 'protoGenerator', 'innerFn', 'tryLocsList', 'generator', 'outerFn'])
                        var.put('protoGenerator', (var.get('outerFn') if (var.get('outerFn') and var.get('outerFn').get('prototype').instanceof(var.get('Generator'))) else var.get('Generator')))
                        var.put('generator', var.get('Object').callprop('create', var.get('protoGenerator').get('prototype')))
                        var.put('context', var.get('Context').create((var.get('tryLocsList') or Js([]))))
                        var.get('generator').put('_invoke', var.get('makeInvokeMethod')(var.get('innerFn'), var.get('self'), var.get('context')))
                        return var.get('generator')
                    PyJsHoisted_wrap_.func_name = 'wrap'
                    var.put('wrap', PyJsHoisted_wrap_)
                    @Js
                    def PyJsHoisted_tryCatch_(fn, obj, arg, this, arguments, var=var):
                        var = Scope({'fn':fn, 'obj':obj, 'arg':arg, 'this':this, 'arguments':arguments}, var)
                        var.registers(['arg', 'fn', 'obj'])
                        try:
                            return Js({'type':Js('normal'),'arg':var.get('fn').callprop('call', var.get('obj'), var.get('arg'))})
                        except PyJsException as PyJsTempException:
                            PyJsHolder_657272_24382259 = var.own.get('err')
                            var.force_own_put('err', PyExceptionToJs(PyJsTempException))
                            try:
                                return Js({'type':Js('throw'),'arg':var.get('err')})
                            finally:
                                if PyJsHolder_657272_24382259 is not None:
                                    var.own['err'] = PyJsHolder_657272_24382259
                                else:
                                    del var.own['err']
                                del PyJsHolder_657272_24382259
                    PyJsHoisted_tryCatch_.func_name = 'tryCatch'
                    var.put('tryCatch', PyJsHoisted_tryCatch_)
                    @Js
                    def PyJsHoisted_Generator_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        pass
                    PyJsHoisted_Generator_.func_name = 'Generator'
                    var.put('Generator', PyJsHoisted_Generator_)
                    @Js
                    def PyJsHoisted_GeneratorFunction_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        pass
                    PyJsHoisted_GeneratorFunction_.func_name = 'GeneratorFunction'
                    var.put('GeneratorFunction', PyJsHoisted_GeneratorFunction_)
                    @Js
                    def PyJsHoisted_GeneratorFunctionPrototype_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        pass
                    PyJsHoisted_GeneratorFunctionPrototype_.func_name = 'GeneratorFunctionPrototype'
                    var.put('GeneratorFunctionPrototype', PyJsHoisted_GeneratorFunctionPrototype_)
                    @Js
                    def PyJsHoisted_defineIteratorMethods_(prototype, this, arguments, var=var):
                        var = Scope({'prototype':prototype, 'this':this, 'arguments':arguments}, var)
                        var.registers(['prototype'])
                        @Js
                        def PyJs_anonymous_64_(method, this, arguments, var=var):
                            var = Scope({'method':method, 'this':this, 'arguments':arguments}, var)
                            var.registers(['method'])
                            @Js
                            def PyJs_anonymous_65_(arg, this, arguments, var=var):
                                var = Scope({'arg':arg, 'this':this, 'arguments':arguments}, var)
                                var.registers(['arg'])
                                return var.get(u"this").callprop('_invoke', var.get('method'), var.get('arg'))
                            PyJs_anonymous_65_._set_name('anonymous')
                            var.get('prototype').put(var.get('method'), PyJs_anonymous_65_)
                        PyJs_anonymous_64_._set_name('anonymous')
                        Js([Js('next'), Js('throw'), Js('return')]).callprop('forEach', PyJs_anonymous_64_)
                    PyJsHoisted_defineIteratorMethods_.func_name = 'defineIteratorMethods'
                    var.put('defineIteratorMethods', PyJsHoisted_defineIteratorMethods_)
                    @Js
                    def PyJsHoisted_AsyncIterator_(generator, this, arguments, var=var):
                        var = Scope({'generator':generator, 'this':this, 'arguments':arguments}, var)
                        var.registers(['previousPromise', 'generator', 'invoke', 'enqueue'])
                        @Js
                        def PyJsHoisted_invoke_(method, arg, resolve, reject, this, arguments, var=var):
                            var = Scope({'method':method, 'arg':arg, 'resolve':resolve, 'reject':reject, 'this':this, 'arguments':arguments}, var)
                            var.registers(['arg', 'method', 'record', 'resolve', 'result', 'reject', 'value'])
                            var.put('record', var.get('tryCatch')(var.get('generator').get(var.get('method')), var.get('generator'), var.get('arg')))
                            if PyJsStrictEq(var.get('record').get('type'),Js('throw')):
                                var.get('reject')(var.get('record').get('arg'))
                            else:
                                var.put('result', var.get('record').get('arg'))
                                var.put('value', var.get('result').get('value'))
                                if ((var.get('value') and PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('value',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('value'))),Js('object'))) and var.get('hasOwn').callprop('call', var.get('value'), Js('__await'))):
                                    @Js
                                    def PyJs_anonymous_69_(value, this, arguments, var=var):
                                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['value'])
                                        var.get('invoke')(Js('next'), var.get('value'), var.get('resolve'), var.get('reject'))
                                    PyJs_anonymous_69_._set_name('anonymous')
                                    @Js
                                    def PyJs_anonymous_70_(err, this, arguments, var=var):
                                        var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['err'])
                                        var.get('invoke')(Js('throw'), var.get('err'), var.get('resolve'), var.get('reject'))
                                    PyJs_anonymous_70_._set_name('anonymous')
                                    return var.get('Promise').callprop('resolve', var.get('value').get('__await')).callprop('then', PyJs_anonymous_69_, PyJs_anonymous_70_)
                                @Js
                                def PyJs_anonymous_71_(unwrapped, this, arguments, var=var):
                                    var = Scope({'unwrapped':unwrapped, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['unwrapped'])
                                    var.get('result').put('value', var.get('unwrapped'))
                                    var.get('resolve')(var.get('result'))
                                PyJs_anonymous_71_._set_name('anonymous')
                                return var.get('Promise').callprop('resolve', var.get('value')).callprop('then', PyJs_anonymous_71_, var.get('reject'))
                        PyJsHoisted_invoke_.func_name = 'invoke'
                        var.put('invoke', PyJsHoisted_invoke_)
                        @Js
                        def PyJsHoisted_enqueue_(method, arg, this, arguments, var=var):
                            var = Scope({'method':method, 'arg':arg, 'this':this, 'arguments':arguments}, var)
                            var.registers(['callInvokeWithMethodAndArg', 'arg', 'method'])
                            @Js
                            def PyJsHoisted_callInvokeWithMethodAndArg_(this, arguments, var=var):
                                var = Scope({'this':this, 'arguments':arguments}, var)
                                var.registers([])
                                @Js
                                def PyJs_anonymous_72_(resolve, reject, this, arguments, var=var):
                                    var = Scope({'resolve':resolve, 'reject':reject, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['resolve', 'reject'])
                                    var.get('invoke')(var.get('method'), var.get('arg'), var.get('resolve'), var.get('reject'))
                                PyJs_anonymous_72_._set_name('anonymous')
                                return var.get('Promise').create(PyJs_anonymous_72_)
                            PyJsHoisted_callInvokeWithMethodAndArg_.func_name = 'callInvokeWithMethodAndArg'
                            var.put('callInvokeWithMethodAndArg', PyJsHoisted_callInvokeWithMethodAndArg_)
                            pass
                            return var.put('previousPromise', (var.get('previousPromise').callprop('then', var.get('callInvokeWithMethodAndArg'), var.get('callInvokeWithMethodAndArg')) if var.get('previousPromise') else var.get('callInvokeWithMethodAndArg')()))
                        PyJsHoisted_enqueue_.func_name = 'enqueue'
                        var.put('enqueue', PyJsHoisted_enqueue_)
                        pass
                        if (PyJsStrictEq(var.get('_typeof')(var.get('global').get('process')),Js('object')) and var.get('global').get('process').get('domain')):
                            var.put('invoke', var.get('global').get('process').get('domain').callprop('bind', var.get('invoke')))
                        pass
                        pass
                        var.get(u"this").put('_invoke', var.get('enqueue'))
                    PyJsHoisted_AsyncIterator_.func_name = 'AsyncIterator'
                    var.put('AsyncIterator', PyJsHoisted_AsyncIterator_)
                    @Js
                    def PyJsHoisted_makeInvokeMethod_(innerFn, self, context, this, arguments, var=var):
                        var = Scope({'innerFn':innerFn, 'self':self, 'context':context, 'this':this, 'arguments':arguments}, var)
                        var.registers(['state', 'context', 'self', 'innerFn'])
                        var.put('state', var.get('GenStateSuspendedStart'))
                        @Js
                        def PyJs_invoke_76_(method, arg, this, arguments, var=var):
                            var = Scope({'method':method, 'arg':arg, 'this':this, 'arguments':arguments, 'invoke':PyJs_invoke_76_}, var)
                            var.registers(['arg', 'delegateResult', 'record', 'delegate', 'method'])
                            if PyJsStrictEq(var.get('state'),var.get('GenStateExecuting')):
                                PyJsTempException = JsToPyException(var.get('Error').create(Js('Generator is already running')))
                                raise PyJsTempException
                            if PyJsStrictEq(var.get('state'),var.get('GenStateCompleted')):
                                if PyJsStrictEq(var.get('method'),Js('throw')):
                                    PyJsTempException = JsToPyException(var.get('arg'))
                                    raise PyJsTempException
                                return var.get('doneResult')()
                            var.get('context').put('method', var.get('method'))
                            var.get('context').put('arg', var.get('arg'))
                            while Js(True):
                                var.put('delegate', var.get('context').get('delegate'))
                                if var.get('delegate'):
                                    var.put('delegateResult', var.get('maybeInvokeDelegate')(var.get('delegate'), var.get('context')))
                                    if var.get('delegateResult'):
                                        if PyJsStrictEq(var.get('delegateResult'),var.get('ContinueSentinel')):
                                            continue
                                        return var.get('delegateResult')
                                if PyJsStrictEq(var.get('context').get('method'),Js('next')):
                                    var.get('context').put('sent', var.get('context').put('_sent', var.get('context').get('arg')))
                                else:
                                    if PyJsStrictEq(var.get('context').get('method'),Js('throw')):
                                        if PyJsStrictEq(var.get('state'),var.get('GenStateSuspendedStart')):
                                            var.put('state', var.get('GenStateCompleted'))
                                            PyJsTempException = JsToPyException(var.get('context').get('arg'))
                                            raise PyJsTempException
                                        var.get('context').callprop('dispatchException', var.get('context').get('arg'))
                                    else:
                                        if PyJsStrictEq(var.get('context').get('method'),Js('return')):
                                            var.get('context').callprop('abrupt', Js('return'), var.get('context').get('arg'))
                                var.put('state', var.get('GenStateExecuting'))
                                var.put('record', var.get('tryCatch')(var.get('innerFn'), var.get('self'), var.get('context')))
                                if PyJsStrictEq(var.get('record').get('type'),Js('normal')):
                                    var.put('state', (var.get('GenStateCompleted') if var.get('context').get('done') else var.get('GenStateSuspendedYield')))
                                    if PyJsStrictEq(var.get('record').get('arg'),var.get('ContinueSentinel')):
                                        continue
                                    return Js({'value':var.get('record').get('arg'),'done':var.get('context').get('done')})
                                else:
                                    if PyJsStrictEq(var.get('record').get('type'),Js('throw')):
                                        var.put('state', var.get('GenStateCompleted'))
                                        var.get('context').put('method', Js('throw'))
                                        var.get('context').put('arg', var.get('record').get('arg'))
                        PyJs_invoke_76_._set_name('invoke')
                        return PyJs_invoke_76_
                    PyJsHoisted_makeInvokeMethod_.func_name = 'makeInvokeMethod'
                    var.put('makeInvokeMethod', PyJsHoisted_makeInvokeMethod_)
                    @Js
                    def PyJsHoisted_maybeInvokeDelegate_(delegate, context, this, arguments, var=var):
                        var = Scope({'delegate':delegate, 'context':context, 'this':this, 'arguments':arguments}, var)
                        var.registers(['context', 'info', 'record', 'delegate', 'method'])
                        var.put('method', var.get('delegate').get('iterator').get(var.get('context').get('method')))
                        if PyJsStrictEq(var.get('method'),var.get('undefined')):
                            var.get('context').put('delegate', var.get(u"null"))
                            if PyJsStrictEq(var.get('context').get('method'),Js('throw')):
                                if var.get('delegate').get('iterator').get('return'):
                                    var.get('context').put('method', Js('return'))
                                    var.get('context').put('arg', var.get('undefined'))
                                    var.get('maybeInvokeDelegate')(var.get('delegate'), var.get('context'))
                                    if PyJsStrictEq(var.get('context').get('method'),Js('throw')):
                                        return var.get('ContinueSentinel')
                                var.get('context').put('method', Js('throw'))
                                var.get('context').put('arg', var.get('TypeError').create(Js("The iterator does not provide a 'throw' method")))
                            return var.get('ContinueSentinel')
                        var.put('record', var.get('tryCatch')(var.get('method'), var.get('delegate').get('iterator'), var.get('context').get('arg')))
                        if PyJsStrictEq(var.get('record').get('type'),Js('throw')):
                            var.get('context').put('method', Js('throw'))
                            var.get('context').put('arg', var.get('record').get('arg'))
                            var.get('context').put('delegate', var.get(u"null"))
                            return var.get('ContinueSentinel')
                        var.put('info', var.get('record').get('arg'))
                        if var.get('info').neg():
                            var.get('context').put('method', Js('throw'))
                            var.get('context').put('arg', var.get('TypeError').create(Js('iterator result is not an object')))
                            var.get('context').put('delegate', var.get(u"null"))
                            return var.get('ContinueSentinel')
                        if var.get('info').get('done'):
                            var.get('context').put(var.get('delegate').get('resultName'), var.get('info').get('value'))
                            var.get('context').put('next', var.get('delegate').get('nextLoc'))
                            if PyJsStrictNeq(var.get('context').get('method'),Js('return')):
                                var.get('context').put('method', Js('next'))
                                var.get('context').put('arg', var.get('undefined'))
                        else:
                            return var.get('info')
                        var.get('context').put('delegate', var.get(u"null"))
                        return var.get('ContinueSentinel')
                    PyJsHoisted_maybeInvokeDelegate_.func_name = 'maybeInvokeDelegate'
                    var.put('maybeInvokeDelegate', PyJsHoisted_maybeInvokeDelegate_)
                    @Js
                    def PyJsHoisted_pushTryEntry_(locs, this, arguments, var=var):
                        var = Scope({'locs':locs, 'this':this, 'arguments':arguments}, var)
                        var.registers(['entry', 'locs'])
                        var.put('entry', Js({'tryLoc':var.get('locs').get('0')}))
                        if var.get('locs').contains(Js(1.0)):
                            var.get('entry').put('catchLoc', var.get('locs').get('1'))
                        if var.get('locs').contains(Js(2.0)):
                            var.get('entry').put('finallyLoc', var.get('locs').get('2'))
                            var.get('entry').put('afterLoc', var.get('locs').get('3'))
                        var.get(u"this").get('tryEntries').callprop('push', var.get('entry'))
                    PyJsHoisted_pushTryEntry_.func_name = 'pushTryEntry'
                    var.put('pushTryEntry', PyJsHoisted_pushTryEntry_)
                    @Js
                    def PyJsHoisted_resetTryEntry_(entry, this, arguments, var=var):
                        var = Scope({'entry':entry, 'this':this, 'arguments':arguments}, var)
                        var.registers(['entry', 'record'])
                        var.put('record', (var.get('entry').get('completion') or Js({})))
                        var.get('record').put('type', Js('normal'))
                        var.get('record').delete('arg')
                        var.get('entry').put('completion', var.get('record'))
                    PyJsHoisted_resetTryEntry_.func_name = 'resetTryEntry'
                    var.put('resetTryEntry', PyJsHoisted_resetTryEntry_)
                    @Js
                    def PyJsHoisted_Context_(tryLocsList, this, arguments, var=var):
                        var = Scope({'tryLocsList':tryLocsList, 'this':this, 'arguments':arguments}, var)
                        var.registers(['tryLocsList'])
                        var.get(u"this").put('tryEntries', Js([Js({'tryLoc':Js('root')})]))
                        var.get('tryLocsList').callprop('forEach', var.get('pushTryEntry'), var.get(u"this"))
                        var.get(u"this").callprop('reset', Js(True))
                    PyJsHoisted_Context_.func_name = 'Context'
                    var.put('Context', PyJsHoisted_Context_)
                    @Js
                    def PyJsHoisted_values_(iterable, this, arguments, var=var):
                        var = Scope({'iterable':iterable, 'this':this, 'arguments':arguments}, var)
                        var.registers(['next', 'iterable', 'i', 'iteratorMethod'])
                        if var.get('iterable'):
                            var.put('iteratorMethod', var.get('iterable').get(var.get('iteratorSymbol')))
                            if var.get('iteratorMethod'):
                                return var.get('iteratorMethod').callprop('call', var.get('iterable'))
                            if PyJsStrictEq(var.get('iterable').get('next').typeof(),Js('function')):
                                return var.get('iterable')
                            if var.get('isNaN')(var.get('iterable').get('length')).neg():
                                var.put('i', (-Js(1.0)))
                                @Js
                                def PyJs_next_81_(this, arguments, var=var):
                                    var = Scope({'this':this, 'arguments':arguments, 'next':PyJs_next_81_}, var)
                                    var.registers([])
                                    while (var.put('i',Js(var.get('i').to_number())+Js(1))<var.get('iterable').get('length')):
                                        if var.get('hasOwn').callprop('call', var.get('iterable'), var.get('i')):
                                            var.get('next').put('value', var.get('iterable').get(var.get('i')))
                                            var.get('next').put('done', Js(False))
                                            return var.get('next')
                                    var.get('next').put('value', var.get('undefined'))
                                    var.get('next').put('done', Js(True))
                                    return var.get('next')
                                PyJs_next_81_._set_name('next')
                                var.put('next', PyJs_next_81_)
                                return var.get('next').put('next', var.get('next'))
                        return Js({'next':var.get('doneResult')})
                    PyJsHoisted_values_.func_name = 'values'
                    var.put('values', PyJsHoisted_values_)
                    @Js
                    def PyJsHoisted_doneResult_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return Js({'value':var.get('undefined'),'done':Js(True)})
                    PyJsHoisted_doneResult_.func_name = 'doneResult'
                    var.put('doneResult', PyJsHoisted_doneResult_)
                    Js('use strict')
                    var.put('Op', var.get('Object').get('prototype'))
                    var.put('hasOwn', var.get('Op').get('hasOwnProperty'))
                    pass
                    var.put('$Symbol', (var.get('Symbol') if PyJsStrictEq(var.get('Symbol',throw=False).typeof(),Js('function')) else Js({})))
                    var.put('iteratorSymbol', (var.get('$Symbol').get('iterator') or Js('@@iterator')))
                    var.put('asyncIteratorSymbol', (var.get('$Symbol').get('asyncIterator') or Js('@@asyncIterator')))
                    var.put('toStringTagSymbol', (var.get('$Symbol').get('toStringTag') or Js('@@toStringTag')))
                    var.put('inModule', PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('module',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('module'))),Js('object')))
                    var.put('runtime', var.get('global').get('regeneratorRuntime'))
                    if var.get('runtime'):
                        if var.get('inModule'):
                            var.get('module').put('exports', var.get('runtime'))
                        return var.get('undefined')
                    var.put('runtime', var.get('global').put('regeneratorRuntime', (var.get('module').get('exports') if var.get('inModule') else Js({}))))
                    pass
                    var.get('runtime').put('wrap', var.get('wrap'))
                    pass
                    var.put('GenStateSuspendedStart', Js('suspendedStart'))
                    var.put('GenStateSuspendedYield', Js('suspendedYield'))
                    var.put('GenStateExecuting', Js('executing'))
                    var.put('GenStateCompleted', Js('completed'))
                    var.put('ContinueSentinel', Js({}))
                    pass
                    pass
                    pass
                    var.put('IteratorPrototype', Js({}))
                    @Js
                    def PyJs_anonymous_63_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return var.get(u"this")
                    PyJs_anonymous_63_._set_name('anonymous')
                    var.get('IteratorPrototype').put(var.get('iteratorSymbol'), PyJs_anonymous_63_)
                    var.put('getProto', var.get('Object').get('getPrototypeOf'))
                    var.put('NativeIteratorPrototype', (var.get('getProto') and var.get('getProto')(var.get('getProto')(var.get('values')(Js([]))))))
                    if ((var.get('NativeIteratorPrototype') and PyJsStrictNeq(var.get('NativeIteratorPrototype'),var.get('Op'))) and var.get('hasOwn').callprop('call', var.get('NativeIteratorPrototype'), var.get('iteratorSymbol'))):
                        var.put('IteratorPrototype', var.get('NativeIteratorPrototype'))
                    var.put('Gp', var.get('GeneratorFunctionPrototype').put('prototype', var.get('Generator').put('prototype', var.get('Object').callprop('create', var.get('IteratorPrototype')))))
                    var.get('GeneratorFunction').put('prototype', var.get('Gp').put('constructor', var.get('GeneratorFunctionPrototype')))
                    var.get('GeneratorFunctionPrototype').put('constructor', var.get('GeneratorFunction'))
                    var.get('GeneratorFunctionPrototype').put(var.get('toStringTagSymbol'), var.get('GeneratorFunction').put('displayName', Js('GeneratorFunction')))
                    pass
                    @Js
                    def PyJs_anonymous_66_(genFun, this, arguments, var=var):
                        var = Scope({'genFun':genFun, 'this':this, 'arguments':arguments}, var)
                        var.registers(['ctor', 'genFun'])
                        var.put('ctor', (PyJsStrictEq(var.get('genFun',throw=False).typeof(),Js('function')) and var.get('genFun').get('constructor')))
                        return ((PyJsStrictEq(var.get('ctor'),var.get('GeneratorFunction')) or PyJsStrictEq((var.get('ctor').get('displayName') or var.get('ctor').get('name')),Js('GeneratorFunction'))) if var.get('ctor') else Js(False))
                    PyJs_anonymous_66_._set_name('anonymous')
                    var.get('runtime').put('isGeneratorFunction', PyJs_anonymous_66_)
                    @Js
                    def PyJs_anonymous_67_(genFun, this, arguments, var=var):
                        var = Scope({'genFun':genFun, 'this':this, 'arguments':arguments}, var)
                        var.registers(['genFun'])
                        if var.get('Object').get('setPrototypeOf'):
                            var.get('Object').callprop('setPrototypeOf', var.get('genFun'), var.get('GeneratorFunctionPrototype'))
                        else:
                            var.get('genFun').put('__proto__', var.get('GeneratorFunctionPrototype'))
                            if var.get('genFun').contains(var.get('toStringTagSymbol')).neg():
                                var.get('genFun').put(var.get('toStringTagSymbol'), Js('GeneratorFunction'))
                        var.get('genFun').put('prototype', var.get('Object').callprop('create', var.get('Gp')))
                        return var.get('genFun')
                    PyJs_anonymous_67_._set_name('anonymous')
                    var.get('runtime').put('mark', PyJs_anonymous_67_)
                    @Js
                    def PyJs_anonymous_68_(arg, this, arguments, var=var):
                        var = Scope({'arg':arg, 'this':this, 'arguments':arguments}, var)
                        var.registers(['arg'])
                        return Js({'__await':var.get('arg')})
                    PyJs_anonymous_68_._set_name('anonymous')
                    var.get('runtime').put('awrap', PyJs_anonymous_68_)
                    pass
                    var.get('defineIteratorMethods')(var.get('AsyncIterator').get('prototype'))
                    @Js
                    def PyJs_anonymous_73_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return var.get(u"this")
                    PyJs_anonymous_73_._set_name('anonymous')
                    var.get('AsyncIterator').get('prototype').put(var.get('asyncIteratorSymbol'), PyJs_anonymous_73_)
                    var.get('runtime').put('AsyncIterator', var.get('AsyncIterator'))
                    @Js
                    def PyJs_anonymous_74_(innerFn, outerFn, self, tryLocsList, this, arguments, var=var):
                        var = Scope({'innerFn':innerFn, 'outerFn':outerFn, 'self':self, 'tryLocsList':tryLocsList, 'this':this, 'arguments':arguments}, var)
                        var.registers(['self', 'innerFn', 'tryLocsList', 'outerFn', 'iter'])
                        var.put('iter', var.get('AsyncIterator').create(var.get('wrap')(var.get('innerFn'), var.get('outerFn'), var.get('self'), var.get('tryLocsList'))))
                        @Js
                        def PyJs_anonymous_75_(result, this, arguments, var=var):
                            var = Scope({'result':result, 'this':this, 'arguments':arguments}, var)
                            var.registers(['result'])
                            return (var.get('result').get('value') if var.get('result').get('done') else var.get('iter').callprop('next'))
                        PyJs_anonymous_75_._set_name('anonymous')
                        return (var.get('iter') if var.get('runtime').callprop('isGeneratorFunction', var.get('outerFn')) else var.get('iter').callprop('next').callprop('then', PyJs_anonymous_75_))
                    PyJs_anonymous_74_._set_name('anonymous')
                    var.get('runtime').put('async', PyJs_anonymous_74_)
                    pass
                    pass
                    var.get('defineIteratorMethods')(var.get('Gp'))
                    var.get('Gp').put(var.get('toStringTagSymbol'), Js('Generator'))
                    @Js
                    def PyJs_anonymous_77_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return var.get(u"this")
                    PyJs_anonymous_77_._set_name('anonymous')
                    var.get('Gp').put(var.get('iteratorSymbol'), PyJs_anonymous_77_)
                    @Js
                    def PyJs_anonymous_78_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return Js('[object Generator]')
                    PyJs_anonymous_78_._set_name('anonymous')
                    var.get('Gp').put('toString', PyJs_anonymous_78_)
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_79_(object, this, arguments, var=var):
                        var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'key', 'keys'])
                        var.put('keys', Js([]))
                        for PyJsTemp in var.get('object'):
                            var.put('key', PyJsTemp)
                            var.get('keys').callprop('push', var.get('key'))
                        var.get('keys').callprop('reverse')
                        @Js
                        def PyJs_next_80_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments, 'next':PyJs_next_80_}, var)
                            var.registers(['key'])
                            while var.get('keys').get('length'):
                                var.put('key', var.get('keys').callprop('pop'))
                                if var.get('object').contains(var.get('key')):
                                    var.get('next').put('value', var.get('key'))
                                    var.get('next').put('done', Js(False))
                                    return var.get('next')
                            var.get('next').put('done', Js(True))
                            return var.get('next')
                        PyJs_next_80_._set_name('next')
                        return PyJs_next_80_
                    PyJs_anonymous_79_._set_name('anonymous')
                    var.get('runtime').put('keys', PyJs_anonymous_79_)
                    pass
                    var.get('runtime').put('values', var.get('values'))
                    pass
                    @Js
                    def PyJs_reset_82_(skipTempReset, this, arguments, var=var):
                        var = Scope({'skipTempReset':skipTempReset, 'this':this, 'arguments':arguments, 'reset':PyJs_reset_82_}, var)
                        var.registers(['skipTempReset', 'name'])
                        var.get(u"this").put('prev', Js(0.0))
                        var.get(u"this").put('next', Js(0.0))
                        var.get(u"this").put('sent', var.get(u"this").put('_sent', var.get('undefined')))
                        var.get(u"this").put('done', Js(False))
                        var.get(u"this").put('delegate', var.get(u"null"))
                        var.get(u"this").put('method', Js('next'))
                        var.get(u"this").put('arg', var.get('undefined'))
                        var.get(u"this").get('tryEntries').callprop('forEach', var.get('resetTryEntry'))
                        if var.get('skipTempReset').neg():
                            for PyJsTemp in var.get(u"this"):
                                var.put('name', PyJsTemp)
                                if ((PyJsStrictEq(var.get('name').callprop('charAt', Js(0.0)),Js('t')) and var.get('hasOwn').callprop('call', var.get(u"this"), var.get('name'))) and var.get('isNaN')((+var.get('name').callprop('slice', Js(1.0)))).neg()):
                                    var.get(u"this").put(var.get('name'), var.get('undefined'))
                    PyJs_reset_82_._set_name('reset')
                    @Js
                    def PyJs_stop_83_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments, 'stop':PyJs_stop_83_}, var)
                        var.registers(['rootRecord', 'rootEntry'])
                        var.get(u"this").put('done', Js(True))
                        var.put('rootEntry', var.get(u"this").get('tryEntries').get('0'))
                        var.put('rootRecord', var.get('rootEntry').get('completion'))
                        if PyJsStrictEq(var.get('rootRecord').get('type'),Js('throw')):
                            PyJsTempException = JsToPyException(var.get('rootRecord').get('arg'))
                            raise PyJsTempException
                        return var.get(u"this").get('rval')
                    PyJs_stop_83_._set_name('stop')
                    @Js
                    def PyJs_dispatchException_84_(exception, this, arguments, var=var):
                        var = Scope({'exception':exception, 'this':this, 'arguments':arguments, 'dispatchException':PyJs_dispatchException_84_}, var)
                        var.registers(['entry', 'context', 'hasCatch', 'handle', 'i', 'hasFinally', 'exception', 'record'])
                        @Js
                        def PyJsHoisted_handle_(loc, caught, this, arguments, var=var):
                            var = Scope({'loc':loc, 'caught':caught, 'this':this, 'arguments':arguments}, var)
                            var.registers(['loc', 'caught'])
                            var.get('record').put('type', Js('throw'))
                            var.get('record').put('arg', var.get('exception'))
                            var.get('context').put('next', var.get('loc'))
                            if var.get('caught'):
                                var.get('context').put('method', Js('next'))
                                var.get('context').put('arg', var.get('undefined'))
                            return var.get('caught').neg().neg()
                        PyJsHoisted_handle_.func_name = 'handle'
                        var.put('handle', PyJsHoisted_handle_)
                        if var.get(u"this").get('done'):
                            PyJsTempException = JsToPyException(var.get('exception'))
                            raise PyJsTempException
                        var.put('context', var.get(u"this"))
                        pass
                        #for JS loop
                        var.put('i', (var.get(u"this").get('tryEntries').get('length')-Js(1.0)))
                        while (var.get('i')>=Js(0.0)):
                            try:
                                var.put('entry', var.get(u"this").get('tryEntries').get(var.get('i')))
                                var.put('record', var.get('entry').get('completion'))
                                if PyJsStrictEq(var.get('entry').get('tryLoc'),Js('root')):
                                    return var.get('handle')(Js('end'))
                                if (var.get('entry').get('tryLoc')<=var.get(u"this").get('prev')):
                                    var.put('hasCatch', var.get('hasOwn').callprop('call', var.get('entry'), Js('catchLoc')))
                                    var.put('hasFinally', var.get('hasOwn').callprop('call', var.get('entry'), Js('finallyLoc')))
                                    if (var.get('hasCatch') and var.get('hasFinally')):
                                        if (var.get(u"this").get('prev')<var.get('entry').get('catchLoc')):
                                            return var.get('handle')(var.get('entry').get('catchLoc'), Js(True))
                                        else:
                                            if (var.get(u"this").get('prev')<var.get('entry').get('finallyLoc')):
                                                return var.get('handle')(var.get('entry').get('finallyLoc'))
                                    else:
                                        if var.get('hasCatch'):
                                            if (var.get(u"this").get('prev')<var.get('entry').get('catchLoc')):
                                                return var.get('handle')(var.get('entry').get('catchLoc'), Js(True))
                                        else:
                                            if var.get('hasFinally'):
                                                if (var.get(u"this").get('prev')<var.get('entry').get('finallyLoc')):
                                                    return var.get('handle')(var.get('entry').get('finallyLoc'))
                                            else:
                                                PyJsTempException = JsToPyException(var.get('Error').create(Js('try statement without catch or finally')))
                                                raise PyJsTempException
                            finally:
                                    var.put('i',Js(var.get('i').to_number())-Js(1))
                    PyJs_dispatchException_84_._set_name('dispatchException')
                    @Js
                    def PyJs_abrupt_85_(type, arg, this, arguments, var=var):
                        var = Scope({'type':type, 'arg':arg, 'this':this, 'arguments':arguments, 'abrupt':PyJs_abrupt_85_}, var)
                        var.registers(['entry', 'arg', 'i', 'finallyEntry', 'type', 'record'])
                        #for JS loop
                        var.put('i', (var.get(u"this").get('tryEntries').get('length')-Js(1.0)))
                        while (var.get('i')>=Js(0.0)):
                            try:
                                var.put('entry', var.get(u"this").get('tryEntries').get(var.get('i')))
                                if (((var.get('entry').get('tryLoc')<=var.get(u"this").get('prev')) and var.get('hasOwn').callprop('call', var.get('entry'), Js('finallyLoc'))) and (var.get(u"this").get('prev')<var.get('entry').get('finallyLoc'))):
                                    var.put('finallyEntry', var.get('entry'))
                                    break
                            finally:
                                    var.put('i',Js(var.get('i').to_number())-Js(1))
                        if (((var.get('finallyEntry') and (PyJsStrictEq(var.get('type'),Js('break')) or PyJsStrictEq(var.get('type'),Js('continue')))) and (var.get('finallyEntry').get('tryLoc')<=var.get('arg'))) and (var.get('arg')<=var.get('finallyEntry').get('finallyLoc'))):
                            var.put('finallyEntry', var.get(u"null"))
                        var.put('record', (var.get('finallyEntry').get('completion') if var.get('finallyEntry') else Js({})))
                        var.get('record').put('type', var.get('type'))
                        var.get('record').put('arg', var.get('arg'))
                        if var.get('finallyEntry'):
                            var.get(u"this").put('method', Js('next'))
                            var.get(u"this").put('next', var.get('finallyEntry').get('finallyLoc'))
                            return var.get('ContinueSentinel')
                        return var.get(u"this").callprop('complete', var.get('record'))
                    PyJs_abrupt_85_._set_name('abrupt')
                    @Js
                    def PyJs_complete_86_(record, afterLoc, this, arguments, var=var):
                        var = Scope({'record':record, 'afterLoc':afterLoc, 'this':this, 'arguments':arguments, 'complete':PyJs_complete_86_}, var)
                        var.registers(['afterLoc', 'record'])
                        if PyJsStrictEq(var.get('record').get('type'),Js('throw')):
                            PyJsTempException = JsToPyException(var.get('record').get('arg'))
                            raise PyJsTempException
                        if (PyJsStrictEq(var.get('record').get('type'),Js('break')) or PyJsStrictEq(var.get('record').get('type'),Js('continue'))):
                            var.get(u"this").put('next', var.get('record').get('arg'))
                        else:
                            if PyJsStrictEq(var.get('record').get('type'),Js('return')):
                                var.get(u"this").put('rval', var.get(u"this").put('arg', var.get('record').get('arg')))
                                var.get(u"this").put('method', Js('return'))
                                var.get(u"this").put('next', Js('end'))
                            else:
                                if (PyJsStrictEq(var.get('record').get('type'),Js('normal')) and var.get('afterLoc')):
                                    var.get(u"this").put('next', var.get('afterLoc'))
                        return var.get('ContinueSentinel')
                    PyJs_complete_86_._set_name('complete')
                    @Js
                    def PyJs_finish_87_(finallyLoc, this, arguments, var=var):
                        var = Scope({'finallyLoc':finallyLoc, 'this':this, 'arguments':arguments, 'finish':PyJs_finish_87_}, var)
                        var.registers(['entry', 'i', 'finallyLoc'])
                        #for JS loop
                        var.put('i', (var.get(u"this").get('tryEntries').get('length')-Js(1.0)))
                        while (var.get('i')>=Js(0.0)):
                            try:
                                var.put('entry', var.get(u"this").get('tryEntries').get(var.get('i')))
                                if PyJsStrictEq(var.get('entry').get('finallyLoc'),var.get('finallyLoc')):
                                    var.get(u"this").callprop('complete', var.get('entry').get('completion'), var.get('entry').get('afterLoc'))
                                    var.get('resetTryEntry')(var.get('entry'))
                                    return var.get('ContinueSentinel')
                            finally:
                                    var.put('i',Js(var.get('i').to_number())-Js(1))
                    PyJs_finish_87_._set_name('finish')
                    @Js
                    def PyJs__catch_88_(tryLoc, this, arguments, var=var):
                        var = Scope({'tryLoc':tryLoc, 'this':this, 'arguments':arguments, '_catch':PyJs__catch_88_}, var)
                        var.registers(['entry', 'i', 'record', 'thrown', 'tryLoc'])
                        #for JS loop
                        var.put('i', (var.get(u"this").get('tryEntries').get('length')-Js(1.0)))
                        while (var.get('i')>=Js(0.0)):
                            try:
                                var.put('entry', var.get(u"this").get('tryEntries').get(var.get('i')))
                                if PyJsStrictEq(var.get('entry').get('tryLoc'),var.get('tryLoc')):
                                    var.put('record', var.get('entry').get('completion'))
                                    if PyJsStrictEq(var.get('record').get('type'),Js('throw')):
                                        var.put('thrown', var.get('record').get('arg'))
                                        var.get('resetTryEntry')(var.get('entry'))
                                    return var.get('thrown')
                            finally:
                                    var.put('i',Js(var.get('i').to_number())-Js(1))
                        PyJsTempException = JsToPyException(var.get('Error').create(Js('illegal catch attempt')))
                        raise PyJsTempException
                    PyJs__catch_88_._set_name('_catch')
                    @Js
                    def PyJs_delegateYield_89_(iterable, resultName, nextLoc, this, arguments, var=var):
                        var = Scope({'iterable':iterable, 'resultName':resultName, 'nextLoc':nextLoc, 'this':this, 'arguments':arguments, 'delegateYield':PyJs_delegateYield_89_}, var)
                        var.registers(['resultName', 'nextLoc', 'iterable'])
                        var.get(u"this").put('delegate', Js({'iterator':var.get('values')(var.get('iterable')),'resultName':var.get('resultName'),'nextLoc':var.get('nextLoc')}))
                        if PyJsStrictEq(var.get(u"this").get('method'),Js('next')):
                            var.get(u"this").put('arg', var.get('undefined'))
                        return var.get('ContinueSentinel')
                    PyJs_delegateYield_89_._set_name('delegateYield')
                    var.get('Context').put('prototype', Js({'constructor':var.get('Context'),'reset':PyJs_reset_82_,'stop':PyJs_stop_83_,'dispatchException':PyJs_dispatchException_84_,'abrupt':PyJs_abrupt_85_,'complete':PyJs_complete_86_,'finish':PyJs_finish_87_,'catch':PyJs__catch_88_,'delegateYield':PyJs_delegateYield_89_}))
                PyJs_anonymous_62_._set_name('anonymous')
                PyJs_anonymous_62_(PyJs_LONG_61_()).neg()
            PyJs_anonymous_60_._set_name('anonymous')
            PyJs_anonymous_60_.callprop('call', var.get(u"this"))
        PyJs_anonymous_59_._set_name('anonymous')
        PyJs_anonymous_59_.callprop('call', var.get(u"this"), (var.get('global') if PyJsStrictNeq(var.get('global',throw=False).typeof(),Js('undefined')) else (var.get('self') if PyJsStrictNeq(var.get('self',throw=False).typeof(),Js('undefined')) else (var.get('window') if PyJsStrictNeq(var.get('window',throw=False).typeof(),Js('undefined')) else Js({})))))
    PyJs_anonymous_58_._set_name('anonymous')
    @Js
    def PyJs_anonymous_90_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['byteLength', 'encodeChunk', 'len', 'module', 'i', 'lookup', 'Arr', 'getLens', 'toByteArray', 'tripletToBase64', 'exports', 'revLookup', 'code', '_byteLength', 'require', 'fromByteArray'])
        @Js
        def PyJsHoisted_getLens_(b64, this, arguments, var=var):
            var = Scope({'b64':b64, 'this':this, 'arguments':arguments}, var)
            var.registers(['validLen', 'len', 'b64', 'placeHoldersLen'])
            var.put('len', var.get('b64').get('length'))
            if ((var.get('len')%Js(4.0))>Js(0.0)):
                PyJsTempException = JsToPyException(var.get('Error').create(Js('Invalid string. Length must be a multiple of 4')))
                raise PyJsTempException
            var.put('validLen', var.get('b64').callprop('indexOf', Js('=')))
            if PyJsStrictEq(var.get('validLen'),(-Js(1.0))):
                var.put('validLen', var.get('len'))
            var.put('placeHoldersLen', (Js(0.0) if PyJsStrictEq(var.get('validLen'),var.get('len')) else (Js(4.0)-(var.get('validLen')%Js(4.0)))))
            return Js([var.get('validLen'), var.get('placeHoldersLen')])
        PyJsHoisted_getLens_.func_name = 'getLens'
        var.put('getLens', PyJsHoisted_getLens_)
        @Js
        def PyJsHoisted_byteLength_(b64, this, arguments, var=var):
            var = Scope({'b64':b64, 'this':this, 'arguments':arguments}, var)
            var.registers(['lens', 'validLen', 'b64', 'placeHoldersLen'])
            var.put('lens', var.get('getLens')(var.get('b64')))
            var.put('validLen', var.get('lens').get('0'))
            var.put('placeHoldersLen', var.get('lens').get('1'))
            return ((((var.get('validLen')+var.get('placeHoldersLen'))*Js(3.0))/Js(4.0))-var.get('placeHoldersLen'))
        PyJsHoisted_byteLength_.func_name = 'byteLength'
        var.put('byteLength', PyJsHoisted_byteLength_)
        @Js
        def PyJsHoisted__byteLength_(b64, validLen, placeHoldersLen, this, arguments, var=var):
            var = Scope({'b64':b64, 'validLen':validLen, 'placeHoldersLen':placeHoldersLen, 'this':this, 'arguments':arguments}, var)
            var.registers(['validLen', 'placeHoldersLen', 'b64'])
            return ((((var.get('validLen')+var.get('placeHoldersLen'))*Js(3.0))/Js(4.0))-var.get('placeHoldersLen'))
        PyJsHoisted__byteLength_.func_name = '_byteLength'
        var.put('_byteLength', PyJsHoisted__byteLength_)
        @Js
        def PyJsHoisted_toByteArray_(b64, this, arguments, var=var):
            var = Scope({'b64':b64, 'this':this, 'arguments':arguments}, var)
            var.registers(['len', 'i', 'curByte', 'validLen', 'placeHoldersLen', 'tmp', 'b64', 'lens', 'arr'])
            pass
            var.put('lens', var.get('getLens')(var.get('b64')))
            var.put('validLen', var.get('lens').get('0'))
            var.put('placeHoldersLen', var.get('lens').get('1'))
            var.put('arr', var.get('Arr').create(var.get('_byteLength')(var.get('b64'), var.get('validLen'), var.get('placeHoldersLen'))))
            var.put('curByte', Js(0.0))
            var.put('len', ((var.get('validLen')-Js(4.0)) if (var.get('placeHoldersLen')>Js(0.0)) else var.get('validLen')))
            pass
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('len')):
                try:
                    var.put('tmp', ((((var.get('revLookup').get(var.get('b64').callprop('charCodeAt', var.get('i')))<<Js(18.0))|(var.get('revLookup').get(var.get('b64').callprop('charCodeAt', (var.get('i')+Js(1.0))))<<Js(12.0)))|(var.get('revLookup').get(var.get('b64').callprop('charCodeAt', (var.get('i')+Js(2.0))))<<Js(6.0)))|var.get('revLookup').get(var.get('b64').callprop('charCodeAt', (var.get('i')+Js(3.0))))))
                    var.get('arr').put((var.put('curByte',Js(var.get('curByte').to_number())+Js(1))-Js(1)), ((var.get('tmp')>>Js(16.0))&Js(255)))
                    var.get('arr').put((var.put('curByte',Js(var.get('curByte').to_number())+Js(1))-Js(1)), ((var.get('tmp')>>Js(8.0))&Js(255)))
                    var.get('arr').put((var.put('curByte',Js(var.get('curByte').to_number())+Js(1))-Js(1)), (var.get('tmp')&Js(255)))
                finally:
                        var.put('i', Js(4.0), '+')
            if PyJsStrictEq(var.get('placeHoldersLen'),Js(2.0)):
                var.put('tmp', ((var.get('revLookup').get(var.get('b64').callprop('charCodeAt', var.get('i')))<<Js(2.0))|(var.get('revLookup').get(var.get('b64').callprop('charCodeAt', (var.get('i')+Js(1.0))))>>Js(4.0))))
                var.get('arr').put((var.put('curByte',Js(var.get('curByte').to_number())+Js(1))-Js(1)), (var.get('tmp')&Js(255)))
            if PyJsStrictEq(var.get('placeHoldersLen'),Js(1.0)):
                var.put('tmp', (((var.get('revLookup').get(var.get('b64').callprop('charCodeAt', var.get('i')))<<Js(10.0))|(var.get('revLookup').get(var.get('b64').callprop('charCodeAt', (var.get('i')+Js(1.0))))<<Js(4.0)))|(var.get('revLookup').get(var.get('b64').callprop('charCodeAt', (var.get('i')+Js(2.0))))>>Js(2.0))))
                var.get('arr').put((var.put('curByte',Js(var.get('curByte').to_number())+Js(1))-Js(1)), ((var.get('tmp')>>Js(8.0))&Js(255)))
                var.get('arr').put((var.put('curByte',Js(var.get('curByte').to_number())+Js(1))-Js(1)), (var.get('tmp')&Js(255)))
            return var.get('arr')
        PyJsHoisted_toByteArray_.func_name = 'toByteArray'
        var.put('toByteArray', PyJsHoisted_toByteArray_)
        @Js
        def PyJsHoisted_tripletToBase64_(num, this, arguments, var=var):
            var = Scope({'num':num, 'this':this, 'arguments':arguments}, var)
            var.registers(['num'])
            return (((var.get('lookup').get(((var.get('num')>>Js(18.0))&Js(63)))+var.get('lookup').get(((var.get('num')>>Js(12.0))&Js(63))))+var.get('lookup').get(((var.get('num')>>Js(6.0))&Js(63))))+var.get('lookup').get((var.get('num')&Js(63))))
        PyJsHoisted_tripletToBase64_.func_name = 'tripletToBase64'
        var.put('tripletToBase64', PyJsHoisted_tripletToBase64_)
        @Js
        def PyJsHoisted_encodeChunk_(uint8, start, end, this, arguments, var=var):
            var = Scope({'uint8':uint8, 'start':start, 'end':end, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'start', 'end', 'uint8', 'tmp', 'output'])
            pass
            var.put('output', Js([]))
            #for JS loop
            var.put('i', var.get('start'))
            while (var.get('i')<var.get('end')):
                try:
                    var.put('tmp', ((((var.get('uint8').get(var.get('i'))<<Js(16.0))&Js(16711680))+((var.get('uint8').get((var.get('i')+Js(1.0)))<<Js(8.0))&Js(65280)))+(var.get('uint8').get((var.get('i')+Js(2.0)))&Js(255))))
                    var.get('output').callprop('push', var.get('tripletToBase64')(var.get('tmp')))
                finally:
                        var.put('i', Js(3.0), '+')
            return var.get('output').callprop('join', Js(''))
        PyJsHoisted_encodeChunk_.func_name = 'encodeChunk'
        var.put('encodeChunk', PyJsHoisted_encodeChunk_)
        @Js
        def PyJsHoisted_fromByteArray_(uint8, this, arguments, var=var):
            var = Scope({'uint8':uint8, 'this':this, 'arguments':arguments}, var)
            var.registers(['extraBytes', 'len', 'i', 'uint8', 'maxChunkLength', 'tmp', 'parts', 'len2'])
            pass
            var.put('len', var.get('uint8').get('length'))
            var.put('extraBytes', (var.get('len')%Js(3.0)))
            var.put('parts', Js([]))
            var.put('maxChunkLength', Js(16383.0))
            #for JS loop
            var.put('i', Js(0.0))
            var.put('len2', (var.get('len')-var.get('extraBytes')))
            while (var.get('i')<var.get('len2')):
                try:
                    var.get('parts').callprop('push', var.get('encodeChunk')(var.get('uint8'), var.get('i'), (var.get('len2') if ((var.get('i')+var.get('maxChunkLength'))>var.get('len2')) else (var.get('i')+var.get('maxChunkLength')))))
                finally:
                        var.put('i', var.get('maxChunkLength'), '+')
            if PyJsStrictEq(var.get('extraBytes'),Js(1.0)):
                var.put('tmp', var.get('uint8').get((var.get('len')-Js(1.0))))
                var.get('parts').callprop('push', ((var.get('lookup').get((var.get('tmp')>>Js(2.0)))+var.get('lookup').get(((var.get('tmp')<<Js(4.0))&Js(63))))+Js('==')))
            else:
                if PyJsStrictEq(var.get('extraBytes'),Js(2.0)):
                    var.put('tmp', ((var.get('uint8').get((var.get('len')-Js(2.0)))<<Js(8.0))+var.get('uint8').get((var.get('len')-Js(1.0)))))
                    var.get('parts').callprop('push', (((var.get('lookup').get((var.get('tmp')>>Js(10.0)))+var.get('lookup').get(((var.get('tmp')>>Js(4.0))&Js(63))))+var.get('lookup').get(((var.get('tmp')<<Js(2.0))&Js(63))))+Js('=')))
            return var.get('parts').callprop('join', Js(''))
        PyJsHoisted_fromByteArray_.func_name = 'fromByteArray'
        var.put('fromByteArray', PyJsHoisted_fromByteArray_)
        Js('use strict')
        var.get('exports').put('byteLength', var.get('byteLength'))
        var.get('exports').put('toByteArray', var.get('toByteArray'))
        var.get('exports').put('fromByteArray', var.get('fromByteArray'))
        var.put('lookup', Js([]))
        var.put('revLookup', Js([]))
        var.put('Arr', (var.get('Uint8Array') if PyJsStrictNeq(var.get('Uint8Array',throw=False).typeof(),Js('undefined')) else var.get('Array')))
        var.put('code', Js('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'))
        #for JS loop
        var.put('i', Js(0.0))
        var.put('len', var.get('code').get('length'))
        while (var.get('i')<var.get('len')):
            try:
                var.get('lookup').put(var.get('i'), var.get('code').get(var.get('i')))
                var.get('revLookup').put(var.get('code').callprop('charCodeAt', var.get('i')), var.get('i'))
            finally:
                    var.put('i',Js(var.get('i').to_number())+Js(1))
        var.get('revLookup').put(Js('-').callprop('charCodeAt', Js(0.0)), Js(62.0))
        var.get('revLookup').put(Js('_').callprop('charCodeAt', Js(0.0)), Js(63.0))
        pass
        pass
        pass
        pass
        pass
        pass
        pass
    PyJs_anonymous_90_._set_name('anonymous')
    @Js
    def PyJs_anonymous_91_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        def PyJs_LONG_580_(var=var):
            @Js
            def PyJs_anonymous_92_(process, PyJsArg_676c6f62616c_, setImmediate, this, arguments, var=var):
                var = Scope({'process':process, 'global':PyJsArg_676c6f62616c_, 'setImmediate':setImmediate, 'this':this, 'arguments':arguments}, var)
                var.registers(['setImmediate', 'global', 'process'])
                @Js
                def PyJs_anonymous_93_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    @Js
                    def PyJs_anonymous_94_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['define', 'module', 'exports'])
                        pass
                        def PyJs_LONG_578_(var=var):
                            @Js
                            def PyJs_anonymous_95_(_dereq_, module, exports, this, arguments, var=var):
                                var = Scope({'_dereq_':_dereq_, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
                                var.registers(['exports', 'module', '_dereq_'])
                                Js('use strict')
                                @Js
                                def PyJs_anonymous_96_(Promise, this, arguments, var=var):
                                    var = Scope({'Promise':Promise, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['any', 'SomePromiseArray', 'Promise'])
                                    @Js
                                    def PyJsHoisted_any_(promises, this, arguments, var=var):
                                        var = Scope({'promises':promises, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['promise', 'promises', 'ret'])
                                        var.put('ret', var.get('SomePromiseArray').create(var.get('promises')))
                                        var.put('promise', var.get('ret').callprop('promise'))
                                        var.get('ret').callprop('setHowMany', Js(1.0))
                                        var.get('ret').callprop('setUnwrap')
                                        var.get('ret').callprop('init')
                                        return var.get('promise')
                                    PyJsHoisted_any_.func_name = 'any'
                                    var.put('any', PyJsHoisted_any_)
                                    var.put('SomePromiseArray', var.get('Promise').get('_SomePromiseArray'))
                                    pass
                                    @Js
                                    def PyJs_anonymous_97_(promises, this, arguments, var=var):
                                        var = Scope({'promises':promises, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['promises'])
                                        return var.get('any')(var.get('promises'))
                                    PyJs_anonymous_97_._set_name('anonymous')
                                    var.get('Promise').put('any', PyJs_anonymous_97_)
                                    @Js
                                    def PyJs_anonymous_98_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return var.get('any')(var.get(u"this"))
                                    PyJs_anonymous_98_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('any', PyJs_anonymous_98_)
                                PyJs_anonymous_96_._set_name('anonymous')
                                var.get('module').put('exports', PyJs_anonymous_96_)
                            PyJs_anonymous_95_._set_name('anonymous')
                            @Js
                            def PyJs_anonymous_99_(_dereq_, module, exports, this, arguments, var=var):
                                var = Scope({'_dereq_':_dereq_, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
                                var.registers(['module', 'schedule', '_drainQueue', '_dereq_', 'exports', 'firstLineError', 'AsyncInvoke', 'AsyncInvokeLater', '_drainQueueStep', 'AsyncSettlePromises', 'Queue', 'Async'])
                                @Js
                                def PyJsHoisted_Async_(this, arguments, var=var):
                                    var = Scope({'this':this, 'arguments':arguments}, var)
                                    var.registers(['self'])
                                    var.get(u"this").put('_customScheduler', Js(False))
                                    var.get(u"this").put('_isTickUsed', Js(False))
                                    var.get(u"this").put('_lateQueue', var.get('Queue').create(Js(16.0)))
                                    var.get(u"this").put('_normalQueue', var.get('Queue').create(Js(16.0)))
                                    var.get(u"this").put('_haveDrainedQueues', Js(False))
                                    var.put('self', var.get(u"this"))
                                    @Js
                                    def PyJs_anonymous_100_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        var.get('self').callprop('_drainQueues')
                                    PyJs_anonymous_100_._set_name('anonymous')
                                    var.get(u"this").put('drainQueues', PyJs_anonymous_100_)
                                    var.get(u"this").put('_schedule', var.get('schedule'))
                                PyJsHoisted_Async_.func_name = 'Async'
                                var.put('Async', PyJsHoisted_Async_)
                                @Js
                                def PyJsHoisted_AsyncInvokeLater_(fn, receiver, arg, this, arguments, var=var):
                                    var = Scope({'fn':fn, 'receiver':receiver, 'arg':arg, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['receiver', 'fn', 'arg'])
                                    var.get(u"this").get('_lateQueue').callprop('push', var.get('fn'), var.get('receiver'), var.get('arg'))
                                    var.get(u"this").callprop('_queueTick')
                                PyJsHoisted_AsyncInvokeLater_.func_name = 'AsyncInvokeLater'
                                var.put('AsyncInvokeLater', PyJsHoisted_AsyncInvokeLater_)
                                @Js
                                def PyJsHoisted_AsyncInvoke_(fn, receiver, arg, this, arguments, var=var):
                                    var = Scope({'fn':fn, 'receiver':receiver, 'arg':arg, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['receiver', 'fn', 'arg'])
                                    var.get(u"this").get('_normalQueue').callprop('push', var.get('fn'), var.get('receiver'), var.get('arg'))
                                    var.get(u"this").callprop('_queueTick')
                                PyJsHoisted_AsyncInvoke_.func_name = 'AsyncInvoke'
                                var.put('AsyncInvoke', PyJsHoisted_AsyncInvoke_)
                                @Js
                                def PyJsHoisted_AsyncSettlePromises_(promise, this, arguments, var=var):
                                    var = Scope({'promise':promise, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['promise'])
                                    var.get(u"this").get('_normalQueue').callprop('_pushOne', var.get('promise'))
                                    var.get(u"this").callprop('_queueTick')
                                PyJsHoisted_AsyncSettlePromises_.func_name = 'AsyncSettlePromises'
                                var.put('AsyncSettlePromises', PyJsHoisted_AsyncSettlePromises_)
                                @Js
                                def PyJsHoisted__drainQueue_(queue, this, arguments, var=var):
                                    var = Scope({'queue':queue, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['queue'])
                                    while (var.get('queue').callprop('length')>Js(0.0)):
                                        var.get('_drainQueueStep')(var.get('queue'))
                                PyJsHoisted__drainQueue_.func_name = '_drainQueue'
                                var.put('_drainQueue', PyJsHoisted__drainQueue_)
                                @Js
                                def PyJsHoisted__drainQueueStep_(queue, this, arguments, var=var):
                                    var = Scope({'queue':queue, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['receiver', 'queue', 'fn', 'arg'])
                                    var.put('fn', var.get('queue').callprop('shift'))
                                    if PyJsStrictNeq(var.get('fn',throw=False).typeof(),Js('function')):
                                        var.get('fn').callprop('_settlePromises')
                                    else:
                                        var.put('receiver', var.get('queue').callprop('shift'))
                                        var.put('arg', var.get('queue').callprop('shift'))
                                        var.get('fn').callprop('call', var.get('receiver'), var.get('arg'))
                                PyJsHoisted__drainQueueStep_.func_name = '_drainQueueStep'
                                var.put('_drainQueueStep', PyJsHoisted__drainQueueStep_)
                                Js('use strict')
                                pass
                                try:
                                    PyJsTempException = JsToPyException(var.get('Error').create())
                                    raise PyJsTempException
                                except PyJsException as PyJsTempException:
                                    PyJsHolder_65_59704595 = var.own.get('e')
                                    var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                                    try:
                                        var.put('firstLineError', var.get('e'))
                                    finally:
                                        if PyJsHolder_65_59704595 is not None:
                                            var.own['e'] = PyJsHolder_65_59704595
                                        else:
                                            del var.own['e']
                                        del PyJsHolder_65_59704595
                                var.put('schedule', var.get('_dereq_')(Js('./schedule')))
                                var.put('Queue', var.get('_dereq_')(Js('./queue')))
                                pass
                                @Js
                                def PyJs_anonymous_101_(fn, this, arguments, var=var):
                                    var = Scope({'fn':fn, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['prev', 'fn'])
                                    var.put('prev', var.get(u"this").get('_schedule'))
                                    var.get(u"this").put('_schedule', var.get('fn'))
                                    var.get(u"this").put('_customScheduler', Js(True))
                                    return var.get('prev')
                                PyJs_anonymous_101_._set_name('anonymous')
                                var.get('Async').get('prototype').put('setScheduler', PyJs_anonymous_101_)
                                @Js
                                def PyJs_anonymous_102_(this, arguments, var=var):
                                    var = Scope({'this':this, 'arguments':arguments}, var)
                                    var.registers([])
                                    return var.get(u"this").get('_customScheduler')
                                PyJs_anonymous_102_._set_name('anonymous')
                                var.get('Async').get('prototype').put('hasCustomScheduler', PyJs_anonymous_102_)
                                @Js
                                def PyJs_anonymous_103_(this, arguments, var=var):
                                    var = Scope({'this':this, 'arguments':arguments}, var)
                                    var.registers([])
                                    return (var.get(u"this").get('_isTickUsed') or var.get(u"this").get('_haveDrainedQueues'))
                                PyJs_anonymous_103_._set_name('anonymous')
                                var.get('Async').get('prototype').put('haveItemsQueued', PyJs_anonymous_103_)
                                @Js
                                def PyJs_anonymous_104_(e, isNode, this, arguments, var=var):
                                    var = Scope({'e':e, 'isNode':isNode, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['isNode', 'e'])
                                    if var.get('isNode'):
                                        var.get('process').get('stderr').callprop('write', ((Js('Fatal ')+(var.get('e').get('stack') if var.get('e').instanceof(var.get('Error')) else var.get('e')))+Js('\n')))
                                        var.get('process').callprop('exit', Js(2.0))
                                    else:
                                        var.get(u"this").callprop('throwLater', var.get('e'))
                                PyJs_anonymous_104_._set_name('anonymous')
                                var.get('Async').get('prototype').put('fatalError', PyJs_anonymous_104_)
                                @Js
                                def PyJs_anonymous_105_(fn, arg, this, arguments, var=var):
                                    var = Scope({'fn':fn, 'arg':arg, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['arg', 'fn'])
                                    if PyJsStrictEq(var.get('arguments').get('length'),Js(1.0)):
                                        var.put('arg', var.get('fn'))
                                        @Js
                                        def PyJs_fn_106_(this, arguments, var=var):
                                            var = Scope({'this':this, 'arguments':arguments, 'fn':PyJs_fn_106_}, var)
                                            var.registers([])
                                            PyJsTempException = JsToPyException(var.get('arg'))
                                            raise PyJsTempException
                                        PyJs_fn_106_._set_name('fn')
                                        var.put('fn', PyJs_fn_106_)
                                    if PyJsStrictNeq(var.get('setTimeout',throw=False).typeof(),Js('undefined')):
                                        @Js
                                        def PyJs_anonymous_107_(this, arguments, var=var):
                                            var = Scope({'this':this, 'arguments':arguments}, var)
                                            var.registers([])
                                            var.get('fn')(var.get('arg'))
                                        PyJs_anonymous_107_._set_name('anonymous')
                                        var.get('setTimeout')(PyJs_anonymous_107_, Js(0.0))
                                    else:
                                        try:
                                            @Js
                                            def PyJs_anonymous_108_(this, arguments, var=var):
                                                var = Scope({'this':this, 'arguments':arguments}, var)
                                                var.registers([])
                                                var.get('fn')(var.get('arg'))
                                            PyJs_anonymous_108_._set_name('anonymous')
                                            var.get(u"this").callprop('_schedule', PyJs_anonymous_108_)
                                        except PyJsException as PyJsTempException:
                                            PyJsHolder_65_57073510 = var.own.get('e')
                                            var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                                            try:
                                                PyJsTempException = JsToPyException(var.get('Error').create(Js('No async scheduler available\n\n    See http://goo.gl/MqrFmX\n')))
                                                raise PyJsTempException
                                            finally:
                                                if PyJsHolder_65_57073510 is not None:
                                                    var.own['e'] = PyJsHolder_65_57073510
                                                else:
                                                    del var.own['e']
                                                del PyJsHolder_65_57073510
                                PyJs_anonymous_105_._set_name('anonymous')
                                var.get('Async').get('prototype').put('throwLater', PyJs_anonymous_105_)
                                pass
                                pass
                                pass
                                var.get('Async').get('prototype').put('invokeLater', var.get('AsyncInvokeLater'))
                                var.get('Async').get('prototype').put('invoke', var.get('AsyncInvoke'))
                                var.get('Async').get('prototype').put('settlePromises', var.get('AsyncSettlePromises'))
                                pass
                                pass
                                @Js
                                def PyJs_anonymous_109_(this, arguments, var=var):
                                    var = Scope({'this':this, 'arguments':arguments}, var)
                                    var.registers([])
                                    var.get('_drainQueue')(var.get(u"this").get('_normalQueue'))
                                    var.get(u"this").callprop('_reset')
                                    var.get(u"this").put('_haveDrainedQueues', Js(True))
                                    var.get('_drainQueue')(var.get(u"this").get('_lateQueue'))
                                PyJs_anonymous_109_._set_name('anonymous')
                                var.get('Async').get('prototype').put('_drainQueues', PyJs_anonymous_109_)
                                @Js
                                def PyJs_anonymous_110_(this, arguments, var=var):
                                    var = Scope({'this':this, 'arguments':arguments}, var)
                                    var.registers([])
                                    if var.get(u"this").get('_isTickUsed').neg():
                                        var.get(u"this").put('_isTickUsed', Js(True))
                                        var.get(u"this").callprop('_schedule', var.get(u"this").get('drainQueues'))
                                PyJs_anonymous_110_._set_name('anonymous')
                                var.get('Async').get('prototype').put('_queueTick', PyJs_anonymous_110_)
                                @Js
                                def PyJs_anonymous_111_(this, arguments, var=var):
                                    var = Scope({'this':this, 'arguments':arguments}, var)
                                    var.registers([])
                                    var.get(u"this").put('_isTickUsed', Js(False))
                                PyJs_anonymous_111_._set_name('anonymous')
                                var.get('Async').get('prototype').put('_reset', PyJs_anonymous_111_)
                                var.get('module').put('exports', var.get('Async'))
                                var.get('module').get('exports').put('firstLineError', var.get('firstLineError'))
                            PyJs_anonymous_99_._set_name('anonymous')
                            @Js
                            def PyJs_anonymous_112_(_dereq_, module, exports, this, arguments, var=var):
                                var = Scope({'_dereq_':_dereq_, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
                                var.registers(['exports', 'module', '_dereq_'])
                                Js('use strict')
                                @Js
                                def PyJs_anonymous_113_(Promise, INTERNAL, tryConvertToPromise, debug, this, arguments, var=var):
                                    var = Scope({'Promise':Promise, 'INTERNAL':INTERNAL, 'tryConvertToPromise':tryConvertToPromise, 'debug':debug, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['bindingRejected', 'rejectThis', 'calledBind', 'tryConvertToPromise', 'INTERNAL', 'debug', 'Promise', 'targetRejected', 'bindingResolved'])
                                    var.put('calledBind', Js(False))
                                    @Js
                                    def PyJs_rejectThis_114_(_, e, this, arguments, var=var):
                                        var = Scope({'_':_, 'e':e, 'this':this, 'arguments':arguments, 'rejectThis':PyJs_rejectThis_114_}, var)
                                        var.registers(['_', 'e'])
                                        var.get(u"this").callprop('_reject', var.get('e'))
                                    PyJs_rejectThis_114_._set_name('rejectThis')
                                    var.put('rejectThis', PyJs_rejectThis_114_)
                                    @Js
                                    def PyJs_targetRejected_115_(e, context, this, arguments, var=var):
                                        var = Scope({'e':e, 'context':context, 'this':this, 'arguments':arguments, 'targetRejected':PyJs_targetRejected_115_}, var)
                                        var.registers(['context', 'e'])
                                        var.get('context').put('promiseRejectionQueued', Js(True))
                                        var.get('context').get('bindingPromise').callprop('_then', var.get('rejectThis'), var.get('rejectThis'), var.get(u"null"), var.get(u"this"), var.get('e'))
                                    PyJs_targetRejected_115_._set_name('targetRejected')
                                    var.put('targetRejected', PyJs_targetRejected_115_)
                                    @Js
                                    def PyJs_bindingResolved_116_(thisArg, context, this, arguments, var=var):
                                        var = Scope({'thisArg':thisArg, 'context':context, 'this':this, 'arguments':arguments, 'bindingResolved':PyJs_bindingResolved_116_}, var)
                                        var.registers(['context', 'thisArg'])
                                        if PyJsStrictEq((var.get(u"this").get('_bitField')&Js(50397184.0)),Js(0.0)):
                                            var.get(u"this").callprop('_resolveCallback', var.get('context').get('target'))
                                    PyJs_bindingResolved_116_._set_name('bindingResolved')
                                    var.put('bindingResolved', PyJs_bindingResolved_116_)
                                    @Js
                                    def PyJs_bindingRejected_117_(e, context, this, arguments, var=var):
                                        var = Scope({'e':e, 'context':context, 'this':this, 'arguments':arguments, 'bindingRejected':PyJs_bindingRejected_117_}, var)
                                        var.registers(['context', 'e'])
                                        if var.get('context').get('promiseRejectionQueued').neg():
                                            var.get(u"this").callprop('_reject', var.get('e'))
                                    PyJs_bindingRejected_117_._set_name('bindingRejected')
                                    var.put('bindingRejected', PyJs_bindingRejected_117_)
                                    @Js
                                    def PyJs_anonymous_118_(thisArg, this, arguments, var=var):
                                        var = Scope({'thisArg':thisArg, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['context', 'ret', 'target', 'thisArg', 'maybePromise'])
                                        if var.get('calledBind').neg():
                                            var.put('calledBind', Js(True))
                                            var.get('Promise').get('prototype').put('_propagateFrom', var.get('debug').callprop('propagateFromFunction'))
                                            var.get('Promise').get('prototype').put('_boundValue', var.get('debug').callprop('boundValueFunction'))
                                        var.put('maybePromise', var.get('tryConvertToPromise')(var.get('thisArg')))
                                        var.put('ret', var.get('Promise').create(var.get('INTERNAL')))
                                        var.get('ret').callprop('_propagateFrom', var.get(u"this"), Js(1.0))
                                        var.put('target', var.get(u"this").callprop('_target'))
                                        var.get('ret').callprop('_setBoundTo', var.get('maybePromise'))
                                        if var.get('maybePromise').instanceof(var.get('Promise')):
                                            var.put('context', Js({'promiseRejectionQueued':Js(False),'promise':var.get('ret'),'target':var.get('target'),'bindingPromise':var.get('maybePromise')}))
                                            var.get('target').callprop('_then', var.get('INTERNAL'), var.get('targetRejected'), var.get('undefined'), var.get('ret'), var.get('context'))
                                            var.get('maybePromise').callprop('_then', var.get('bindingResolved'), var.get('bindingRejected'), var.get('undefined'), var.get('ret'), var.get('context'))
                                            var.get('ret').callprop('_setOnCancel', var.get('maybePromise'))
                                        else:
                                            var.get('ret').callprop('_resolveCallback', var.get('target'))
                                        return var.get('ret')
                                    PyJs_anonymous_118_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('bind', PyJs_anonymous_118_)
                                    @Js
                                    def PyJs_anonymous_119_(obj, this, arguments, var=var):
                                        var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['obj'])
                                        if PyJsStrictNeq(var.get('obj'),var.get('undefined')):
                                            var.get(u"this").put('_bitField', (var.get(u"this").get('_bitField')|Js(2097152.0)))
                                            var.get(u"this").put('_boundTo', var.get('obj'))
                                        else:
                                            var.get(u"this").put('_bitField', (var.get(u"this").get('_bitField')&(~Js(2097152.0))))
                                    PyJs_anonymous_119_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_setBoundTo', PyJs_anonymous_119_)
                                    @Js
                                    def PyJs_anonymous_120_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return PyJsStrictEq((var.get(u"this").get('_bitField')&Js(2097152.0)),Js(2097152.0))
                                    PyJs_anonymous_120_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_isBound', PyJs_anonymous_120_)
                                    @Js
                                    def PyJs_anonymous_121_(thisArg, value, this, arguments, var=var):
                                        var = Scope({'thisArg':thisArg, 'value':value, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['thisArg', 'value'])
                                        return var.get('Promise').callprop('resolve', var.get('value')).callprop('bind', var.get('thisArg'))
                                    PyJs_anonymous_121_._set_name('anonymous')
                                    var.get('Promise').put('bind', PyJs_anonymous_121_)
                                PyJs_anonymous_113_._set_name('anonymous')
                                var.get('module').put('exports', PyJs_anonymous_113_)
                            PyJs_anonymous_112_._set_name('anonymous')
                            @Js
                            def PyJs_anonymous_122_(_dereq_, module, exports, this, arguments, var=var):
                                var = Scope({'_dereq_':_dereq_, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
                                var.registers(['noConflict', 'module', '_dereq_', 'exports', 'bluebird', 'old'])
                                @Js
                                def PyJsHoisted_noConflict_(this, arguments, var=var):
                                    var = Scope({'this':this, 'arguments':arguments}, var)
                                    var.registers([])
                                    try:
                                        if PyJsStrictEq(var.get('Promise'),var.get('bluebird')):
                                            var.put('Promise', var.get('old'))
                                    except PyJsException as PyJsTempException:
                                        PyJsHolder_65_31430593 = var.own.get('e')
                                        var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                                        try:
                                            pass
                                        finally:
                                            if PyJsHolder_65_31430593 is not None:
                                                var.own['e'] = PyJsHolder_65_31430593
                                            else:
                                                del var.own['e']
                                            del PyJsHolder_65_31430593
                                    return var.get('bluebird')
                                PyJsHoisted_noConflict_.func_name = 'noConflict'
                                var.put('noConflict', PyJsHoisted_noConflict_)
                                Js('use strict')
                                pass
                                if PyJsStrictNeq(var.get('Promise',throw=False).typeof(),Js('undefined')):
                                    var.put('old', var.get('Promise'))
                                pass
                                var.put('bluebird', var.get('_dereq_')(Js('./promise'))())
                                var.get('bluebird').put('noConflict', var.get('noConflict'))
                                var.get('module').put('exports', var.get('bluebird'))
                            PyJs_anonymous_122_._set_name('anonymous')
                            @Js
                            def PyJs_anonymous_123_(_dereq_, module, exports, this, arguments, var=var):
                                var = Scope({'_dereq_':_dereq_, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
                                var.registers(['module', 'callerCache', '_dereq_', 'getterCache', 'exports', 'cr'])
                                Js('use strict')
                                var.put('cr', var.get('Object').get('create'))
                                if var.get('cr'):
                                    var.put('callerCache', var.get('cr')(var.get(u"null")))
                                    var.put('getterCache', var.get('cr')(var.get(u"null")))
                                    var.get('callerCache').put(' size', var.get('getterCache').put(' size', Js(0.0)))
                                @Js
                                def PyJs_anonymous_124_(Promise, this, arguments, var=var):
                                    var = Scope({'Promise':Promise, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['ensureMethod', 'getGetter', 'indexedGetter', 'util', 'isIdentifier', 'canEvaluate', 'Promise', 'getCompiled', 'caller', 'getMethodCaller', 'makeMethodCaller', 'makeGetter', 'namedGetter'])
                                    @Js
                                    def PyJsHoisted_ensureMethod_(obj, methodName, this, arguments, var=var):
                                        var = Scope({'obj':obj, 'methodName':methodName, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['methodName', 'message', 'fn', 'obj'])
                                        pass
                                        if (var.get('obj')!=var.get(u"null")):
                                            var.put('fn', var.get('obj').get(var.get('methodName')))
                                        if PyJsStrictNeq(var.get('fn',throw=False).typeof(),Js('function')):
                                            var.put('message', ((((Js('Object ')+var.get('util').callprop('classString', var.get('obj')))+Js(" has no method '"))+var.get('util').callprop('toString', var.get('methodName')))+Js("'")))
                                            PyJsTempException = JsToPyException(var.get('Promise').get('TypeError').create(var.get('message')))
                                            raise PyJsTempException
                                        return var.get('fn')
                                    PyJsHoisted_ensureMethod_.func_name = 'ensureMethod'
                                    var.put('ensureMethod', PyJsHoisted_ensureMethod_)
                                    @Js
                                    def PyJsHoisted_caller_(obj, this, arguments, var=var):
                                        var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['methodName', 'fn', 'obj'])
                                        var.put('methodName', var.get(u"this").callprop('pop'))
                                        var.put('fn', var.get('ensureMethod')(var.get('obj'), var.get('methodName')))
                                        return var.get('fn').callprop('apply', var.get('obj'), var.get(u"this"))
                                    PyJsHoisted_caller_.func_name = 'caller'
                                    var.put('caller', PyJsHoisted_caller_)
                                    @Js
                                    def PyJsHoisted_namedGetter_(obj, this, arguments, var=var):
                                        var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['obj'])
                                        return var.get('obj').get(var.get(u"this"))
                                    PyJsHoisted_namedGetter_.func_name = 'namedGetter'
                                    var.put('namedGetter', PyJsHoisted_namedGetter_)
                                    @Js
                                    def PyJsHoisted_indexedGetter_(obj, this, arguments, var=var):
                                        var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['index', 'obj'])
                                        var.put('index', (+var.get(u"this")))
                                        if (var.get('index')<Js(0.0)):
                                            var.put('index', var.get('Math').callprop('max', Js(0.0), (var.get('index')+var.get('obj').get('length'))))
                                        return var.get('obj').get(var.get('index'))
                                    PyJsHoisted_indexedGetter_.func_name = 'indexedGetter'
                                    var.put('indexedGetter', PyJsHoisted_indexedGetter_)
                                    var.put('util', var.get('_dereq_')(Js('./util')))
                                    var.put('canEvaluate', var.get('util').get('canEvaluate'))
                                    var.put('isIdentifier', var.get('util').get('isIdentifier'))
                                    pass
                                    pass
                                    if Js(True).neg():
                                        @Js
                                        def PyJs_makeMethodCaller_125_(methodName, this, arguments, var=var):
                                            var = Scope({'methodName':methodName, 'this':this, 'arguments':arguments, 'makeMethodCaller':PyJs_makeMethodCaller_125_}, var)
                                            var.registers(['methodName'])
                                            def PyJs_LONG_126_(var=var):
                                                return Js("                                    \n        return function(obj) {                                               \n            'use strict'                                                     \n            var len = this.length;                                           \n            ensureMethod(obj, 'methodName');                                 \n            switch(len) {                                                    \n                case 1: return obj.methodName(this[0]);                      \n                case 2: return obj.methodName(this[0], this[1]);             \n                case 3: return obj.methodName(this[0], this[1], this[2]);    \n                case 0: return obj.methodName();                             \n                default:                                                     \n                    return obj.methodName.apply(obj, this);                  \n            }                                                                \n        };                                                                   \n        ").callprop('replace', JsRegExp('/methodName/g'), var.get('methodName'))
                                            return var.get('Function').create(Js('ensureMethod'), PyJs_LONG_126_())(var.get('ensureMethod'))
                                        PyJs_makeMethodCaller_125_._set_name('makeMethodCaller')
                                        var.put('makeMethodCaller', PyJs_makeMethodCaller_125_)
                                        @Js
                                        def PyJs_makeGetter_127_(propertyName, this, arguments, var=var):
                                            var = Scope({'propertyName':propertyName, 'this':this, 'arguments':arguments, 'makeGetter':PyJs_makeGetter_127_}, var)
                                            var.registers(['propertyName'])
                                            return var.get('Function').create(Js('obj'), Js("                                             \n        'use strict';                                                        \n        return obj.propertyName;                                             \n        ").callprop('replace', Js('propertyName'), var.get('propertyName')))
                                        PyJs_makeGetter_127_._set_name('makeGetter')
                                        var.put('makeGetter', PyJs_makeGetter_127_)
                                        @Js
                                        def PyJs_getCompiled_128_(name, compiler, cache, this, arguments, var=var):
                                            var = Scope({'name':name, 'compiler':compiler, 'cache':cache, 'this':this, 'arguments':arguments, 'getCompiled':PyJs_getCompiled_128_}, var)
                                            var.registers(['i', 'cache', 'ret', 'name', 'keys', 'compiler'])
                                            var.put('ret', var.get('cache').get(var.get('name')))
                                            if PyJsStrictNeq(var.get('ret',throw=False).typeof(),Js('function')):
                                                if var.get('isIdentifier')(var.get('name')).neg():
                                                    return var.get(u"null")
                                                var.put('ret', var.get('compiler')(var.get('name')))
                                                var.get('cache').put(var.get('name'), var.get('ret'))
                                                (var.get('cache').put(' size',Js(var.get('cache').get(' size').to_number())+Js(1))-Js(1))
                                                if (var.get('cache').get(' size')>Js(512.0)):
                                                    var.put('keys', var.get('Object').callprop('keys', var.get('cache')))
                                                    #for JS loop
                                                    var.put('i', Js(0.0))
                                                    while (var.get('i')<Js(256.0)):
                                                        try:
                                                            var.get('cache').delete(var.get('keys').get(var.get('i')))
                                                        finally:
                                                                var.put('i',Js(var.get('i').to_number())+Js(1))
                                                    var.get('cache').put(' size', (var.get('keys').get('length')-Js(256.0)))
                                            return var.get('ret')
                                        PyJs_getCompiled_128_._set_name('getCompiled')
                                        var.put('getCompiled', PyJs_getCompiled_128_)
                                        @Js
                                        def PyJs_getMethodCaller_129_(name, this, arguments, var=var):
                                            var = Scope({'name':name, 'this':this, 'arguments':arguments, 'getMethodCaller':PyJs_getMethodCaller_129_}, var)
                                            var.registers(['name'])
                                            return var.get('getCompiled')(var.get('name'), var.get('makeMethodCaller'), var.get('callerCache'))
                                        PyJs_getMethodCaller_129_._set_name('getMethodCaller')
                                        var.put('getMethodCaller', PyJs_getMethodCaller_129_)
                                        @Js
                                        def PyJs_getGetter_130_(name, this, arguments, var=var):
                                            var = Scope({'name':name, 'this':this, 'arguments':arguments, 'getGetter':PyJs_getGetter_130_}, var)
                                            var.registers(['name'])
                                            return var.get('getCompiled')(var.get('name'), var.get('makeGetter'), var.get('getterCache'))
                                        PyJs_getGetter_130_._set_name('getGetter')
                                        var.put('getGetter', PyJs_getGetter_130_)
                                    pass
                                    pass
                                    @Js
                                    def PyJs_anonymous_131_(methodName, this, arguments, var=var):
                                        var = Scope({'methodName':methodName, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['args', 'maybeCaller', 'methodName'])
                                        var.put('args', Js([]).get('slice').callprop('call', var.get('arguments'), Js(1.0)))
                                        pass
                                        if Js(True).neg():
                                            if var.get('canEvaluate'):
                                                var.put('maybeCaller', var.get('getMethodCaller')(var.get('methodName')))
                                                if PyJsStrictNeq(var.get('maybeCaller'),var.get(u"null")):
                                                    return var.get(u"this").callprop('_then', var.get('maybeCaller'), var.get('undefined'), var.get('undefined'), var.get('args'), var.get('undefined'))
                                        var.get('args').callprop('push', var.get('methodName'))
                                        return var.get(u"this").callprop('_then', var.get('caller'), var.get('undefined'), var.get('undefined'), var.get('args'), var.get('undefined'))
                                    PyJs_anonymous_131_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('call', PyJs_anonymous_131_)
                                    pass
                                    pass
                                    @Js
                                    def PyJs_anonymous_132_(propertyName, this, arguments, var=var):
                                        var = Scope({'propertyName':propertyName, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['getter', 'propertyName', 'isIndex', 'maybeGetter'])
                                        var.put('isIndex', PyJsStrictEq(var.get('propertyName',throw=False).typeof(),Js('number')))
                                        pass
                                        if var.get('isIndex').neg():
                                            if var.get('canEvaluate'):
                                                var.put('maybeGetter', var.get('getGetter')(var.get('propertyName')))
                                                var.put('getter', (var.get('maybeGetter') if PyJsStrictNeq(var.get('maybeGetter'),var.get(u"null")) else var.get('namedGetter')))
                                            else:
                                                var.put('getter', var.get('namedGetter'))
                                        else:
                                            var.put('getter', var.get('indexedGetter'))
                                        return var.get(u"this").callprop('_then', var.get('getter'), var.get('undefined'), var.get('undefined'), var.get('propertyName'), var.get('undefined'))
                                    PyJs_anonymous_132_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('get', PyJs_anonymous_132_)
                                PyJs_anonymous_124_._set_name('anonymous')
                                var.get('module').put('exports', PyJs_anonymous_124_)
                            PyJs_anonymous_123_._set_name('anonymous')
                            @Js
                            def PyJs_anonymous_133_(_dereq_, module, exports, this, arguments, var=var):
                                var = Scope({'_dereq_':_dereq_, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
                                var.registers(['exports', 'module', '_dereq_'])
                                Js('use strict')
                                @Js
                                def PyJs_anonymous_134_(Promise, PromiseArray, apiRejection, debug, this, arguments, var=var):
                                    var = Scope({'Promise':Promise, 'PromiseArray':PromiseArray, 'apiRejection':apiRejection, 'debug':debug, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['errorObj', 'apiRejection', 'PromiseArray', 'util', 'debug', 'Promise', 'tryCatch', 'async'])
                                    var.put('util', var.get('_dereq_')(Js('./util')))
                                    var.put('tryCatch', var.get('util').get('tryCatch'))
                                    var.put('errorObj', var.get('util').get('errorObj'))
                                    var.put('async', var.get('Promise').get('_async'))
                                    @Js
                                    def PyJs_anonymous_135_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers(['parent', 'child', 'promise'])
                                        if var.get('debug').callprop('cancellation').neg():
                                            return var.get(u"this").callprop('_warn', Js('cancellation is disabled'))
                                        var.put('promise', var.get(u"this"))
                                        var.put('child', var.get('promise'))
                                        while var.get('promise').callprop('_isCancellable'):
                                            if var.get('promise').callprop('_cancelBy', var.get('child')).neg():
                                                if var.get('child').callprop('_isFollowing'):
                                                    var.get('child').callprop('_followee').callprop('cancel')
                                                else:
                                                    var.get('child').callprop('_cancelBranched')
                                                break
                                            var.put('parent', var.get('promise').get('_cancellationParent'))
                                            if ((var.get('parent')==var.get(u"null")) or var.get('parent').callprop('_isCancellable').neg()):
                                                if var.get('promise').callprop('_isFollowing'):
                                                    var.get('promise').callprop('_followee').callprop('cancel')
                                                else:
                                                    var.get('promise').callprop('_cancelBranched')
                                                break
                                            else:
                                                if var.get('promise').callprop('_isFollowing'):
                                                    var.get('promise').callprop('_followee').callprop('cancel')
                                                var.get('promise').callprop('_setWillBeCancelled')
                                                var.put('child', var.get('promise'))
                                                var.put('promise', var.get('parent'))
                                    PyJs_anonymous_135_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('break', var.get('Promise').get('prototype').put('cancel', PyJs_anonymous_135_))
                                    @Js
                                    def PyJs_anonymous_136_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        (var.get(u"this").put('_branchesRemainingToCancel',Js(var.get(u"this").get('_branchesRemainingToCancel').to_number())-Js(1))+Js(1))
                                    PyJs_anonymous_136_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_branchHasCancelled', PyJs_anonymous_136_)
                                    @Js
                                    def PyJs_anonymous_137_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return (PyJsStrictEq(var.get(u"this").get('_branchesRemainingToCancel'),var.get('undefined')) or (var.get(u"this").get('_branchesRemainingToCancel')<=Js(0.0)))
                                    PyJs_anonymous_137_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_enoughBranchesHaveCancelled', PyJs_anonymous_137_)
                                    @Js
                                    def PyJs_anonymous_138_(canceller, this, arguments, var=var):
                                        var = Scope({'canceller':canceller, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['canceller'])
                                        if PyJsStrictEq(var.get('canceller'),var.get(u"this")):
                                            var.get(u"this").put('_branchesRemainingToCancel', Js(0.0))
                                            var.get(u"this").callprop('_invokeOnCancel')
                                            return Js(True)
                                        else:
                                            var.get(u"this").callprop('_branchHasCancelled')
                                            if var.get(u"this").callprop('_enoughBranchesHaveCancelled'):
                                                var.get(u"this").callprop('_invokeOnCancel')
                                                return Js(True)
                                        return Js(False)
                                    PyJs_anonymous_138_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_cancelBy', PyJs_anonymous_138_)
                                    @Js
                                    def PyJs_anonymous_139_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        if var.get(u"this").callprop('_enoughBranchesHaveCancelled'):
                                            var.get(u"this").callprop('_cancel')
                                    PyJs_anonymous_139_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_cancelBranched', PyJs_anonymous_139_)
                                    @Js
                                    def PyJs_anonymous_140_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        if var.get(u"this").callprop('_isCancellable').neg():
                                            return var.get('undefined')
                                        var.get(u"this").callprop('_setCancelled')
                                        var.get('async').callprop('invoke', var.get(u"this").get('_cancelPromises'), var.get(u"this"), var.get('undefined'))
                                    PyJs_anonymous_140_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_cancel', PyJs_anonymous_140_)
                                    @Js
                                    def PyJs_anonymous_141_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        if (var.get(u"this").callprop('_length')>Js(0.0)):
                                            var.get(u"this").callprop('_settlePromises')
                                    PyJs_anonymous_141_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_cancelPromises', PyJs_anonymous_141_)
                                    @Js
                                    def PyJs_anonymous_142_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        var.get(u"this").put('_onCancelField', var.get('undefined'))
                                    PyJs_anonymous_142_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_unsetOnCancel', PyJs_anonymous_142_)
                                    @Js
                                    def PyJs_anonymous_143_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return (var.get(u"this").callprop('isPending') and var.get(u"this").callprop('_isCancelled').neg())
                                    PyJs_anonymous_143_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_isCancellable', PyJs_anonymous_143_)
                                    @Js
                                    def PyJs_anonymous_144_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return (var.get(u"this").callprop('isPending') and var.get(u"this").callprop('isCancelled').neg())
                                    PyJs_anonymous_144_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('isCancellable', PyJs_anonymous_144_)
                                    @Js
                                    def PyJs_anonymous_145_(onCancelCallback, internalOnly, this, arguments, var=var):
                                        var = Scope({'onCancelCallback':onCancelCallback, 'internalOnly':internalOnly, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['internalOnly', 'i', 'onCancelCallback', 'e'])
                                        if var.get('util').callprop('isArray', var.get('onCancelCallback')):
                                            #for JS loop
                                            var.put('i', Js(0.0))
                                            while (var.get('i')<var.get('onCancelCallback').get('length')):
                                                try:
                                                    var.get(u"this").callprop('_doInvokeOnCancel', var.get('onCancelCallback').get(var.get('i')), var.get('internalOnly'))
                                                finally:
                                                        var.put('i',Js(var.get('i').to_number())+Js(1))
                                        else:
                                            if PyJsStrictNeq(var.get('onCancelCallback'),var.get('undefined')):
                                                if PyJsStrictEq(var.get('onCancelCallback',throw=False).typeof(),Js('function')):
                                                    if var.get('internalOnly').neg():
                                                        var.put('e', var.get('tryCatch')(var.get('onCancelCallback')).callprop('call', var.get(u"this").callprop('_boundValue')))
                                                        if PyJsStrictEq(var.get('e'),var.get('errorObj')):
                                                            var.get(u"this").callprop('_attachExtraTrace', var.get('e').get('e'))
                                                            var.get('async').callprop('throwLater', var.get('e').get('e'))
                                                else:
                                                    var.get('onCancelCallback').callprop('_resultCancelled', var.get(u"this"))
                                    PyJs_anonymous_145_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_doInvokeOnCancel', PyJs_anonymous_145_)
                                    @Js
                                    def PyJs_anonymous_146_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers(['onCancelCallback'])
                                        var.put('onCancelCallback', var.get(u"this").callprop('_onCancel'))
                                        var.get(u"this").callprop('_unsetOnCancel')
                                        var.get('async').callprop('invoke', var.get(u"this").get('_doInvokeOnCancel'), var.get(u"this"), var.get('onCancelCallback'))
                                    PyJs_anonymous_146_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_invokeOnCancel', PyJs_anonymous_146_)
                                    @Js
                                    def PyJs_anonymous_147_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        if var.get(u"this").callprop('_isCancellable'):
                                            var.get(u"this").callprop('_doInvokeOnCancel', var.get(u"this").callprop('_onCancel'), Js(True))
                                            var.get(u"this").callprop('_unsetOnCancel')
                                    PyJs_anonymous_147_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_invokeInternalOnCancel', PyJs_anonymous_147_)
                                    @Js
                                    def PyJs_anonymous_148_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        var.get(u"this").callprop('cancel')
                                    PyJs_anonymous_148_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_resultCancelled', PyJs_anonymous_148_)
                                PyJs_anonymous_134_._set_name('anonymous')
                                var.get('module').put('exports', PyJs_anonymous_134_)
                            PyJs_anonymous_133_._set_name('anonymous')
                            @Js
                            def PyJs_anonymous_149_(_dereq_, module, exports, this, arguments, var=var):
                                var = Scope({'_dereq_':_dereq_, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
                                var.registers(['exports', 'module', '_dereq_'])
                                Js('use strict')
                                @Js
                                def PyJs_anonymous_150_(NEXT_FILTER, this, arguments, var=var):
                                    var = Scope({'NEXT_FILTER':NEXT_FILTER, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['errorObj', 'catchFilter', 'util', 'tryCatch', 'getKeys', 'NEXT_FILTER'])
                                    @Js
                                    def PyJsHoisted_catchFilter_(instances, cb, promise, this, arguments, var=var):
                                        var = Scope({'instances':instances, 'cb':cb, 'promise':promise, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['promise', 'instances', 'cb'])
                                        @Js
                                        def PyJs_anonymous_151_(e, this, arguments, var=var):
                                            var = Scope({'e':e, 'this':this, 'arguments':arguments}, var)
                                            var.registers(['boundTo', 'matchesPredicate', 'i', 'key', 'e', 'item', 'keys', 'j'])
                                            var.put('boundTo', var.get('promise').callprop('_boundValue'))
                                            class JS_CONTINUE_LABEL_7072656469636174654c6f6f70(Exception): pass
                                            class JS_BREAK_LABEL_7072656469636174654c6f6f70(Exception): pass
                                            try:
                                                #for JS loop
                                                var.put('i', Js(0.0))
                                                while (var.get('i')<var.get('instances').get('length')):
                                                    try:
                                                        try:
                                                            var.put('item', var.get('instances').get(var.get('i')))
                                                            if (PyJsStrictEq(var.get('item'),var.get('Error')) or ((var.get('item')!=var.get(u"null")) and var.get('item').get('prototype').instanceof(var.get('Error')))):
                                                                if var.get('e').instanceof(var.get('item')):
                                                                    return var.get('tryCatch')(var.get('cb')).callprop('call', var.get('boundTo'), var.get('e'))
                                                            else:
                                                                if PyJsStrictEq(var.get('item',throw=False).typeof(),Js('function')):
                                                                    var.put('matchesPredicate', var.get('tryCatch')(var.get('item')).callprop('call', var.get('boundTo'), var.get('e')))
                                                                    if PyJsStrictEq(var.get('matchesPredicate'),var.get('errorObj')):
                                                                        return var.get('matchesPredicate')
                                                                    else:
                                                                        if var.get('matchesPredicate'):
                                                                            return var.get('tryCatch')(var.get('cb')).callprop('call', var.get('boundTo'), var.get('e'))
                                                                else:
                                                                    if var.get('util').callprop('isObject', var.get('e')):
                                                                        var.put('keys', var.get('getKeys')(var.get('item')))
                                                                        #for JS loop
                                                                        var.put('j', Js(0.0))
                                                                        while (var.get('j')<var.get('keys').get('length')):
                                                                            try:
                                                                                var.put('key', var.get('keys').get(var.get('j')))
                                                                                if (var.get('item').get(var.get('key'))!=var.get('e').get(var.get('key'))):
                                                                                    raise JS_CONTINUE_LABEL_7072656469636174654c6f6f70("Continued")
                                                                            finally:
                                                                                    var.put('j',Js(var.get('j').to_number())+Js(1))
                                                                        return var.get('tryCatch')(var.get('cb')).callprop('call', var.get('boundTo'), var.get('e'))
                                                        finally:
                                                                var.put('i',Js(var.get('i').to_number())+Js(1))
                                                    except JS_CONTINUE_LABEL_7072656469636174654c6f6f70:
                                                        pass
                                            except JS_BREAK_LABEL_7072656469636174654c6f6f70:
                                                pass
                                            return var.get('NEXT_FILTER')
                                        PyJs_anonymous_151_._set_name('anonymous')
                                        return PyJs_anonymous_151_
                                    PyJsHoisted_catchFilter_.func_name = 'catchFilter'
                                    var.put('catchFilter', PyJsHoisted_catchFilter_)
                                    var.put('util', var.get('_dereq_')(Js('./util')))
                                    var.put('getKeys', var.get('_dereq_')(Js('./es5')).get('keys'))
                                    var.put('tryCatch', var.get('util').get('tryCatch'))
                                    var.put('errorObj', var.get('util').get('errorObj'))
                                    pass
                                    return var.get('catchFilter')
                                PyJs_anonymous_150_._set_name('anonymous')
                                var.get('module').put('exports', PyJs_anonymous_150_)
                            PyJs_anonymous_149_._set_name('anonymous')
                            @Js
                            def PyJs_anonymous_152_(_dereq_, module, exports, this, arguments, var=var):
                                var = Scope({'_dereq_':_dereq_, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
                                var.registers(['exports', 'module', '_dereq_'])
                                Js('use strict')
                                @Js
                                def PyJs_anonymous_153_(Promise, this, arguments, var=var):
                                    var = Scope({'Promise':Promise, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['contextStack', 'createContext', 'Context', 'longStackTraces', 'Promise', 'peekContext'])
                                    @Js
                                    def PyJsHoisted_Context_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        var.get(u"this").put('_trace', var.get('Context').get('CapturedTrace').create(var.get('peekContext')()))
                                    PyJsHoisted_Context_.func_name = 'Context'
                                    var.put('Context', PyJsHoisted_Context_)
                                    @Js
                                    def PyJsHoisted_createContext_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        if var.get('longStackTraces'):
                                            return var.get('Context').create()
                                    PyJsHoisted_createContext_.func_name = 'createContext'
                                    var.put('createContext', PyJsHoisted_createContext_)
                                    @Js
                                    def PyJsHoisted_peekContext_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers(['lastIndex'])
                                        var.put('lastIndex', (var.get('contextStack').get('length')-Js(1.0)))
                                        if (var.get('lastIndex')>=Js(0.0)):
                                            return var.get('contextStack').get(var.get('lastIndex'))
                                        return var.get('undefined')
                                    PyJsHoisted_peekContext_.func_name = 'peekContext'
                                    var.put('peekContext', PyJsHoisted_peekContext_)
                                    var.put('longStackTraces', Js(False))
                                    var.put('contextStack', Js([]))
                                    @Js
                                    def PyJs_anonymous_154_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        pass
                                    PyJs_anonymous_154_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_promiseCreated', PyJs_anonymous_154_)
                                    @Js
                                    def PyJs_anonymous_155_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        pass
                                    PyJs_anonymous_155_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_pushContext', PyJs_anonymous_155_)
                                    @Js
                                    def PyJs_anonymous_156_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return var.get(u"null")
                                    PyJs_anonymous_156_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_popContext', PyJs_anonymous_156_)
                                    @Js
                                    def PyJs_anonymous_157_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        pass
                                    PyJs_anonymous_157_._set_name('anonymous')
                                    var.get('Promise').put('_peekContext', var.get('Promise').get('prototype').put('_peekContext', PyJs_anonymous_157_))
                                    pass
                                    @Js
                                    def PyJs_anonymous_158_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        if PyJsStrictNeq(var.get(u"this").get('_trace'),var.get('undefined')):
                                            var.get(u"this").get('_trace').put('_promiseCreated', var.get(u"null"))
                                            var.get('contextStack').callprop('push', var.get(u"this").get('_trace'))
                                    PyJs_anonymous_158_._set_name('anonymous')
                                    var.get('Context').get('prototype').put('_pushContext', PyJs_anonymous_158_)
                                    @Js
                                    def PyJs_anonymous_159_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers(['trace', 'ret'])
                                        if PyJsStrictNeq(var.get(u"this").get('_trace'),var.get('undefined')):
                                            var.put('trace', var.get('contextStack').callprop('pop'))
                                            var.put('ret', var.get('trace').get('_promiseCreated'))
                                            var.get('trace').put('_promiseCreated', var.get(u"null"))
                                            return var.get('ret')
                                        return var.get(u"null")
                                    PyJs_anonymous_159_._set_name('anonymous')
                                    var.get('Context').get('prototype').put('_popContext', PyJs_anonymous_159_)
                                    pass
                                    pass
                                    var.get('Context').put('CapturedTrace', var.get(u"null"))
                                    var.get('Context').put('create', var.get('createContext'))
                                    @Js
                                    def PyJs_anonymous_160_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        pass
                                    PyJs_anonymous_160_._set_name('anonymous')
                                    var.get('Context').put('deactivateLongStackTraces', PyJs_anonymous_160_)
                                    @Js
                                    def PyJs_anonymous_161_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers(['Promise_pushContext', 'Promise_popContext', 'Promise_promiseCreated', 'Promise_PeekContext', 'Promise_peekContext'])
                                        var.put('Promise_pushContext', var.get('Promise').get('prototype').get('_pushContext'))
                                        var.put('Promise_popContext', var.get('Promise').get('prototype').get('_popContext'))
                                        var.put('Promise_PeekContext', var.get('Promise').get('_peekContext'))
                                        var.put('Promise_peekContext', var.get('Promise').get('prototype').get('_peekContext'))
                                        var.put('Promise_promiseCreated', var.get('Promise').get('prototype').get('_promiseCreated'))
                                        @Js
                                        def PyJs_anonymous_162_(this, arguments, var=var):
                                            var = Scope({'this':this, 'arguments':arguments}, var)
                                            var.registers([])
                                            var.get('Promise').get('prototype').put('_pushContext', var.get('Promise_pushContext'))
                                            var.get('Promise').get('prototype').put('_popContext', var.get('Promise_popContext'))
                                            var.get('Promise').put('_peekContext', var.get('Promise_PeekContext'))
                                            var.get('Promise').get('prototype').put('_peekContext', var.get('Promise_peekContext'))
                                            var.get('Promise').get('prototype').put('_promiseCreated', var.get('Promise_promiseCreated'))
                                            var.put('longStackTraces', Js(False))
                                        PyJs_anonymous_162_._set_name('anonymous')
                                        var.get('Context').put('deactivateLongStackTraces', PyJs_anonymous_162_)
                                        var.put('longStackTraces', Js(True))
                                        var.get('Promise').get('prototype').put('_pushContext', var.get('Context').get('prototype').get('_pushContext'))
                                        var.get('Promise').get('prototype').put('_popContext', var.get('Context').get('prototype').get('_popContext'))
                                        var.get('Promise').put('_peekContext', var.get('Promise').get('prototype').put('_peekContext', var.get('peekContext')))
                                        @Js
                                        def PyJs_anonymous_163_(this, arguments, var=var):
                                            var = Scope({'this':this, 'arguments':arguments}, var)
                                            var.registers(['ctx'])
                                            var.put('ctx', var.get(u"this").callprop('_peekContext'))
                                            if (var.get('ctx') and (var.get('ctx').get('_promiseCreated')==var.get(u"null"))):
                                                var.get('ctx').put('_promiseCreated', var.get(u"this"))
                                        PyJs_anonymous_163_._set_name('anonymous')
                                        var.get('Promise').get('prototype').put('_promiseCreated', PyJs_anonymous_163_)
                                    PyJs_anonymous_161_._set_name('anonymous')
                                    var.get('Context').put('activateLongStackTraces', PyJs_anonymous_161_)
                                    return var.get('Context')
                                PyJs_anonymous_153_._set_name('anonymous')
                                var.get('module').put('exports', PyJs_anonymous_153_)
                            PyJs_anonymous_152_._set_name('anonymous')
                            @Js
                            def PyJs_anonymous_164_(_dereq_, module, exports, this, arguments, var=var):
                                var = Scope({'_dereq_':_dereq_, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
                                var.registers(['exports', 'module', '_dereq_'])
                                Js('use strict')
                                @Js
                                def PyJs_anonymous_165_(Promise, Context, enableAsyncHooks, disableAsyncHooks, this, arguments, var=var):
                                    var = Scope({'Promise':Promise, 'Context':Context, 'enableAsyncHooks':enableAsyncHooks, 'disableAsyncHooks':disableAsyncHooks, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['parseLineInfo', 'util', 'fireGlobalEvent', 'eventToObjectGenerator', 'cancellationOnCancel', 'removeCommonRoots', 'bindingPropagateFrom', 'es5', 'longStackTracesAttachExtraTrace', 'removeDuplicateOrEmptyJumps', 'enableAsyncHooks', 'fireDomEvent', 'unhandledRejectionHandled', '_boundValueFunction', 'stackFramesAsArray', 'longStackTracesIsSupported', 'shouldIgnore', 'Context', 'nodeFramePattern', 'snip', 'parseLinePattern', 'stackFramePattern', 'legacyHandlers', 'deprecated', 'cancellationPropagateFrom', 'reconstructStack', 'cleanStack', 'formatAndLogError', 'formatStack', 'CapturedTrace', 'printWarning', 'possiblyUnhandledRejection', 'longStackTracesCaptureStackTrace', 'checkForgottenReturns', 'formatNonError', 'indentStackFrames', 'wForgottenReturn', 'parseStackAndMessage', 'cancellationExecute', 'parseLineInfoRegex', 'disableAsyncHooks', 'canAttachTrace', 'Warning', 'bluebirdFramePattern', 'deferUnhandledRejectionCheck', 'defaultFireEvent', 'warn', 'fireRejectionEvent', 'setBounds', 'disableLongStackTraces', 'cancellationAttachCancellationCallback', 'cancellationClearCancellationData', 'longStackTracesDereferenceTrace', 'captureStackTrace', 'warnings', 'longStackTraces', 'config', 'activeFireEvent', 'debugging', '_propagateFromFunction', 'generatePromiseLifecycleEventObject', 'Promise', 'async', 'cancellationSetOnCancel'])
                                    @Js
                                    def PyJsHoisted_generatePromiseLifecycleEventObject_(name, promise, this, arguments, var=var):
                                        var = Scope({'name':name, 'promise':promise, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['name', 'promise'])
                                        return Js({'promise':var.get('promise')})
                                    PyJsHoisted_generatePromiseLifecycleEventObject_.func_name = 'generatePromiseLifecycleEventObject'
                                    var.put('generatePromiseLifecycleEventObject', PyJsHoisted_generatePromiseLifecycleEventObject_)
                                    @Js
                                    def PyJsHoisted_defaultFireEvent_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return Js(False)
                                    PyJsHoisted_defaultFireEvent_.func_name = 'defaultFireEvent'
                                    var.put('defaultFireEvent', PyJsHoisted_defaultFireEvent_)
                                    @Js
                                    def PyJsHoisted_cancellationExecute_(executor, resolve, reject, this, arguments, var=var):
                                        var = Scope({'executor':executor, 'resolve':resolve, 'reject':reject, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['resolve', 'executor', 'reject', 'promise'])
                                        var.put('promise', var.get(u"this"))
                                        try:
                                            @Js
                                            def PyJs_anonymous_215_(onCancel, this, arguments, var=var):
                                                var = Scope({'onCancel':onCancel, 'this':this, 'arguments':arguments}, var)
                                                var.registers(['onCancel'])
                                                if PyJsStrictNeq(var.get('onCancel',throw=False).typeof(),Js('function')):
                                                    PyJsTempException = JsToPyException(var.get('TypeError').create((Js('onCancel must be a function, got: ')+var.get('util').callprop('toString', var.get('onCancel')))))
                                                    raise PyJsTempException
                                                var.get('promise').callprop('_attachCancellationCallback', var.get('onCancel'))
                                            PyJs_anonymous_215_._set_name('anonymous')
                                            var.get('executor')(var.get('resolve'), var.get('reject'), PyJs_anonymous_215_)
                                        except PyJsException as PyJsTempException:
                                            PyJsHolder_65_10540904 = var.own.get('e')
                                            var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                                            try:
                                                return var.get('e')
                                            finally:
                                                if PyJsHolder_65_10540904 is not None:
                                                    var.own['e'] = PyJsHolder_65_10540904
                                                else:
                                                    del var.own['e']
                                                del PyJsHolder_65_10540904
                                    PyJsHoisted_cancellationExecute_.func_name = 'cancellationExecute'
                                    var.put('cancellationExecute', PyJsHoisted_cancellationExecute_)
                                    @Js
                                    def PyJsHoisted_cancellationAttachCancellationCallback_(onCancel, this, arguments, var=var):
                                        var = Scope({'onCancel':onCancel, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['previousOnCancel', 'onCancel'])
                                        if var.get(u"this").callprop('_isCancellable').neg():
                                            return var.get(u"this")
                                        var.put('previousOnCancel', var.get(u"this").callprop('_onCancel'))
                                        if PyJsStrictNeq(var.get('previousOnCancel'),var.get('undefined')):
                                            if var.get('util').callprop('isArray', var.get('previousOnCancel')):
                                                var.get('previousOnCancel').callprop('push', var.get('onCancel'))
                                            else:
                                                var.get(u"this").callprop('_setOnCancel', Js([var.get('previousOnCancel'), var.get('onCancel')]))
                                        else:
                                            var.get(u"this").callprop('_setOnCancel', var.get('onCancel'))
                                    PyJsHoisted_cancellationAttachCancellationCallback_.func_name = 'cancellationAttachCancellationCallback'
                                    var.put('cancellationAttachCancellationCallback', PyJsHoisted_cancellationAttachCancellationCallback_)
                                    @Js
                                    def PyJsHoisted_cancellationOnCancel_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return var.get(u"this").get('_onCancelField')
                                    PyJsHoisted_cancellationOnCancel_.func_name = 'cancellationOnCancel'
                                    var.put('cancellationOnCancel', PyJsHoisted_cancellationOnCancel_)
                                    @Js
                                    def PyJsHoisted_cancellationSetOnCancel_(onCancel, this, arguments, var=var):
                                        var = Scope({'onCancel':onCancel, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['onCancel'])
                                        var.get(u"this").put('_onCancelField', var.get('onCancel'))
                                    PyJsHoisted_cancellationSetOnCancel_.func_name = 'cancellationSetOnCancel'
                                    var.put('cancellationSetOnCancel', PyJsHoisted_cancellationSetOnCancel_)
                                    @Js
                                    def PyJsHoisted_cancellationClearCancellationData_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        var.get(u"this").put('_cancellationParent', var.get('undefined'))
                                        var.get(u"this").put('_onCancelField', var.get('undefined'))
                                    PyJsHoisted_cancellationClearCancellationData_.func_name = 'cancellationClearCancellationData'
                                    var.put('cancellationClearCancellationData', PyJsHoisted_cancellationClearCancellationData_)
                                    @Js
                                    def PyJsHoisted_cancellationPropagateFrom_(parent, flags, this, arguments, var=var):
                                        var = Scope({'parent':parent, 'flags':flags, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['parent', 'branchesRemainingToCancel', 'flags'])
                                        if PyJsStrictNeq((var.get('flags')&Js(1.0)),Js(0.0)):
                                            var.get(u"this").put('_cancellationParent', var.get('parent'))
                                            var.put('branchesRemainingToCancel', var.get('parent').get('_branchesRemainingToCancel'))
                                            if PyJsStrictEq(var.get('branchesRemainingToCancel'),var.get('undefined')):
                                                var.put('branchesRemainingToCancel', Js(0.0))
                                            var.get('parent').put('_branchesRemainingToCancel', (var.get('branchesRemainingToCancel')+Js(1.0)))
                                        if (PyJsStrictNeq((var.get('flags')&Js(2.0)),Js(0.0)) and var.get('parent').callprop('_isBound')):
                                            var.get(u"this").callprop('_setBoundTo', var.get('parent').get('_boundTo'))
                                    PyJsHoisted_cancellationPropagateFrom_.func_name = 'cancellationPropagateFrom'
                                    var.put('cancellationPropagateFrom', PyJsHoisted_cancellationPropagateFrom_)
                                    @Js
                                    def PyJsHoisted_bindingPropagateFrom_(parent, flags, this, arguments, var=var):
                                        var = Scope({'parent':parent, 'flags':flags, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['parent', 'flags'])
                                        if (PyJsStrictNeq((var.get('flags')&Js(2.0)),Js(0.0)) and var.get('parent').callprop('_isBound')):
                                            var.get(u"this").callprop('_setBoundTo', var.get('parent').get('_boundTo'))
                                    PyJsHoisted_bindingPropagateFrom_.func_name = 'bindingPropagateFrom'
                                    var.put('bindingPropagateFrom', PyJsHoisted_bindingPropagateFrom_)
                                    @Js
                                    def PyJsHoisted__boundValueFunction_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers(['ret'])
                                        var.put('ret', var.get(u"this").get('_boundTo'))
                                        if PyJsStrictNeq(var.get('ret'),var.get('undefined')):
                                            if var.get('ret').instanceof(var.get('Promise')):
                                                if var.get('ret').callprop('isFulfilled'):
                                                    return var.get('ret').callprop('value')
                                                else:
                                                    return var.get('undefined')
                                        return var.get('ret')
                                    PyJsHoisted__boundValueFunction_.func_name = '_boundValueFunction'
                                    var.put('_boundValueFunction', PyJsHoisted__boundValueFunction_)
                                    @Js
                                    def PyJsHoisted_longStackTracesCaptureStackTrace_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        var.get(u"this").put('_trace', var.get('CapturedTrace').create(var.get(u"this").callprop('_peekContext')))
                                    PyJsHoisted_longStackTracesCaptureStackTrace_.func_name = 'longStackTracesCaptureStackTrace'
                                    var.put('longStackTracesCaptureStackTrace', PyJsHoisted_longStackTracesCaptureStackTrace_)
                                    @Js
                                    def PyJsHoisted_longStackTracesAttachExtraTrace_(error, ignoreSelf, this, arguments, var=var):
                                        var = Scope({'error':error, 'ignoreSelf':ignoreSelf, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['trace', 'parsed', 'error', 'ignoreSelf'])
                                        if var.get('canAttachTrace')(var.get('error')):
                                            var.put('trace', var.get(u"this").get('_trace'))
                                            if PyJsStrictNeq(var.get('trace'),var.get('undefined')):
                                                if var.get('ignoreSelf'):
                                                    var.put('trace', var.get('trace').get('_parent'))
                                            if PyJsStrictNeq(var.get('trace'),var.get('undefined')):
                                                var.get('trace').callprop('attachExtraTrace', var.get('error'))
                                            else:
                                                if var.get('error').get('__stackCleaned__').neg():
                                                    var.put('parsed', var.get('parseStackAndMessage')(var.get('error')))
                                                    var.get('util').callprop('notEnumerableProp', var.get('error'), Js('stack'), ((var.get('parsed').get('message')+Js('\n'))+var.get('parsed').get('stack').callprop('join', Js('\n'))))
                                                    var.get('util').callprop('notEnumerableProp', var.get('error'), Js('__stackCleaned__'), Js(True))
                                    PyJsHoisted_longStackTracesAttachExtraTrace_.func_name = 'longStackTracesAttachExtraTrace'
                                    var.put('longStackTracesAttachExtraTrace', PyJsHoisted_longStackTracesAttachExtraTrace_)
                                    @Js
                                    def PyJsHoisted_longStackTracesDereferenceTrace_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        var.get(u"this").put('_trace', var.get('undefined'))
                                    PyJsHoisted_longStackTracesDereferenceTrace_.func_name = 'longStackTracesDereferenceTrace'
                                    var.put('longStackTracesDereferenceTrace', PyJsHoisted_longStackTracesDereferenceTrace_)
                                    @Js
                                    def PyJsHoisted_checkForgottenReturns_(returnValue, promiseCreated, name, promise, parent, this, arguments, var=var):
                                        var = Scope({'returnValue':returnValue, 'promiseCreated':promiseCreated, 'name':name, 'promise':promise, 'parent':parent, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['traceLines', 'creatorLine', 'i', 'handlerLine', 'returnValue', 'name', 'promise', 'firstUserLine', 'parent', 'msg', 'promiseCreated', 'stack', 'line', 'lineMatches'])
                                        if ((PyJsStrictEq(var.get('returnValue'),var.get('undefined')) and PyJsStrictNeq(var.get('promiseCreated'),var.get(u"null"))) and var.get('wForgottenReturn')):
                                            if (PyJsStrictNeq(var.get('parent'),var.get('undefined')) and var.get('parent').callprop('_returnedNonUndefined')):
                                                return var.get('undefined')
                                            if PyJsStrictEq((var.get('promise').get('_bitField')&Js(65535.0)),Js(0.0)):
                                                return var.get('undefined')
                                            if var.get('name'):
                                                var.put('name', (var.get('name')+Js(' ')))
                                            var.put('handlerLine', Js(''))
                                            var.put('creatorLine', Js(''))
                                            if var.get('promiseCreated').get('_trace'):
                                                var.put('traceLines', var.get('promiseCreated').get('_trace').get('stack').callprop('split', Js('\n')))
                                                var.put('stack', var.get('cleanStack')(var.get('traceLines')))
                                                #for JS loop
                                                var.put('i', (var.get('stack').get('length')-Js(1.0)))
                                                while (var.get('i')>=Js(0.0)):
                                                    try:
                                                        var.put('line', var.get('stack').get(var.get('i')))
                                                        if var.get('nodeFramePattern').callprop('test', var.get('line')).neg():
                                                            var.put('lineMatches', var.get('line').callprop('match', var.get('parseLinePattern')))
                                                            if var.get('lineMatches'):
                                                                var.put('handlerLine', ((((((Js('at ')+var.get('lineMatches').get('1'))+Js(':'))+var.get('lineMatches').get('2'))+Js(':'))+var.get('lineMatches').get('3'))+Js(' ')))
                                                            break
                                                    finally:
                                                            var.put('i',Js(var.get('i').to_number())-Js(1))
                                                if (var.get('stack').get('length')>Js(0.0)):
                                                    var.put('firstUserLine', var.get('stack').get('0'))
                                                    #for JS loop
                                                    var.put('i', Js(0.0))
                                                    while (var.get('i')<var.get('traceLines').get('length')):
                                                        try:
                                                            if PyJsStrictEq(var.get('traceLines').get(var.get('i')),var.get('firstUserLine')):
                                                                if (var.get('i')>Js(0.0)):
                                                                    var.put('creatorLine', (Js('\n')+var.get('traceLines').get((var.get('i')-Js(1.0)))))
                                                                break
                                                        finally:
                                                                var.put('i',Js(var.get('i').to_number())+Js(1))
                                            var.put('msg', ((((((Js('a promise was created in a ')+var.get('name'))+Js('handler '))+var.get('handlerLine'))+Js('but was not returned from it, '))+Js('see http://goo.gl/rRqMUw'))+var.get('creatorLine')))
                                            var.get('promise').callprop('_warn', var.get('msg'), Js(True), var.get('promiseCreated'))
                                    PyJsHoisted_checkForgottenReturns_.func_name = 'checkForgottenReturns'
                                    var.put('checkForgottenReturns', PyJsHoisted_checkForgottenReturns_)
                                    @Js
                                    def PyJsHoisted_deprecated_(name, replacement, this, arguments, var=var):
                                        var = Scope({'name':name, 'replacement':replacement, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['message', 'replacement', 'name'])
                                        var.put('message', (var.get('name')+Js(' is deprecated and will be removed in a future version.')))
                                        if var.get('replacement'):
                                            var.put('message', ((Js(' Use ')+var.get('replacement'))+Js(' instead.')), '+')
                                        return var.get('warn')(var.get('message'))
                                    PyJsHoisted_deprecated_.func_name = 'deprecated'
                                    var.put('deprecated', PyJsHoisted_deprecated_)
                                    @Js
                                    def PyJsHoisted_warn_(message, shouldUseOwnTrace, promise, this, arguments, var=var):
                                        var = Scope({'message':message, 'shouldUseOwnTrace':shouldUseOwnTrace, 'promise':promise, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['warning', 'parsed', 'promise', 'message', 'ctx', 'shouldUseOwnTrace'])
                                        if var.get('config').get('warnings').neg():
                                            return var.get('undefined')
                                        var.put('warning', var.get('Warning').create(var.get('message')))
                                        pass
                                        if var.get('shouldUseOwnTrace'):
                                            var.get('promise').callprop('_attachExtraTrace', var.get('warning'))
                                        else:
                                            if (var.get('config').get('longStackTraces') and var.put('ctx', var.get('Promise').callprop('_peekContext'))):
                                                var.get('ctx').callprop('attachExtraTrace', var.get('warning'))
                                            else:
                                                var.put('parsed', var.get('parseStackAndMessage')(var.get('warning')))
                                                var.get('warning').put('stack', ((var.get('parsed').get('message')+Js('\n'))+var.get('parsed').get('stack').callprop('join', Js('\n'))))
                                        if var.get('activeFireEvent')(Js('warning'), var.get('warning')).neg():
                                            var.get('formatAndLogError')(var.get('warning'), Js(''), Js(True))
                                    PyJsHoisted_warn_.func_name = 'warn'
                                    var.put('warn', PyJsHoisted_warn_)
                                    @Js
                                    def PyJsHoisted_reconstructStack_(message, stacks, this, arguments, var=var):
                                        var = Scope({'message':message, 'stacks':stacks, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['message', 'i', 'stacks'])
                                        #for JS loop
                                        var.put('i', Js(0.0))
                                        while (var.get('i')<(var.get('stacks').get('length')-Js(1.0))):
                                            try:
                                                var.get('stacks').get(var.get('i')).callprop('push', Js('From previous event:'))
                                                var.get('stacks').put(var.get('i'), var.get('stacks').get(var.get('i')).callprop('join', Js('\n')))
                                            finally:
                                                    var.put('i',Js(var.get('i').to_number())+Js(1))
                                        if (var.get('i')<var.get('stacks').get('length')):
                                            var.get('stacks').put(var.get('i'), var.get('stacks').get(var.get('i')).callprop('join', Js('\n')))
                                        return ((var.get('message')+Js('\n'))+var.get('stacks').callprop('join', Js('\n')))
                                    PyJsHoisted_reconstructStack_.func_name = 'reconstructStack'
                                    var.put('reconstructStack', PyJsHoisted_reconstructStack_)
                                    @Js
                                    def PyJsHoisted_removeDuplicateOrEmptyJumps_(stacks, this, arguments, var=var):
                                        var = Scope({'stacks':stacks, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['i', 'stacks'])
                                        #for JS loop
                                        var.put('i', Js(0.0))
                                        while (var.get('i')<var.get('stacks').get('length')):
                                            try:
                                                if (PyJsStrictEq(var.get('stacks').get(var.get('i')).get('length'),Js(0.0)) or (((var.get('i')+Js(1.0))<var.get('stacks').get('length')) and PyJsStrictEq(var.get('stacks').get(var.get('i')).get('0'),var.get('stacks').get((var.get('i')+Js(1.0))).get('0')))):
                                                    var.get('stacks').callprop('splice', var.get('i'), Js(1.0))
                                                    (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
                                            finally:
                                                    var.put('i',Js(var.get('i').to_number())+Js(1))
                                    PyJsHoisted_removeDuplicateOrEmptyJumps_.func_name = 'removeDuplicateOrEmptyJumps'
                                    var.put('removeDuplicateOrEmptyJumps', PyJsHoisted_removeDuplicateOrEmptyJumps_)
                                    @Js
                                    def PyJsHoisted_removeCommonRoots_(stacks, this, arguments, var=var):
                                        var = Scope({'stacks':stacks, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['prev', 'commonRootMeetPoint', 'currentLastLine', 'i', 'stacks', 'currentLastIndex', 'current', 'line', 'j'])
                                        var.put('current', var.get('stacks').get('0'))
                                        #for JS loop
                                        var.put('i', Js(1.0))
                                        while (var.get('i')<var.get('stacks').get('length')):
                                            try:
                                                var.put('prev', var.get('stacks').get(var.get('i')))
                                                var.put('currentLastIndex', (var.get('current').get('length')-Js(1.0)))
                                                var.put('currentLastLine', var.get('current').get(var.get('currentLastIndex')))
                                                var.put('commonRootMeetPoint', (-Js(1.0)))
                                                #for JS loop
                                                var.put('j', (var.get('prev').get('length')-Js(1.0)))
                                                while (var.get('j')>=Js(0.0)):
                                                    try:
                                                        if PyJsStrictEq(var.get('prev').get(var.get('j')),var.get('currentLastLine')):
                                                            var.put('commonRootMeetPoint', var.get('j'))
                                                            break
                                                    finally:
                                                            var.put('j',Js(var.get('j').to_number())-Js(1))
                                                #for JS loop
                                                var.put('j', var.get('commonRootMeetPoint'))
                                                while (var.get('j')>=Js(0.0)):
                                                    try:
                                                        var.put('line', var.get('prev').get(var.get('j')))
                                                        if PyJsStrictEq(var.get('current').get(var.get('currentLastIndex')),var.get('line')):
                                                            var.get('current').callprop('pop')
                                                            (var.put('currentLastIndex',Js(var.get('currentLastIndex').to_number())-Js(1))+Js(1))
                                                        else:
                                                            break
                                                    finally:
                                                            var.put('j',Js(var.get('j').to_number())-Js(1))
                                                var.put('current', var.get('prev'))
                                            finally:
                                                    var.put('i',Js(var.get('i').to_number())+Js(1))
                                    PyJsHoisted_removeCommonRoots_.func_name = 'removeCommonRoots'
                                    var.put('removeCommonRoots', PyJsHoisted_removeCommonRoots_)
                                    @Js
                                    def PyJsHoisted_cleanStack_(stack, this, arguments, var=var):
                                        var = Scope({'stack':stack, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['i', 'ret', 'stack', 'isInternalFrame', 'isTraceLine', 'line'])
                                        var.put('ret', Js([]))
                                        #for JS loop
                                        var.put('i', Js(0.0))
                                        while (var.get('i')<var.get('stack').get('length')):
                                            try:
                                                var.put('line', var.get('stack').get(var.get('i')))
                                                var.put('isTraceLine', (PyJsStrictEq(Js('    (No stack trace)'),var.get('line')) or var.get('stackFramePattern').callprop('test', var.get('line'))))
                                                var.put('isInternalFrame', (var.get('isTraceLine') and var.get('shouldIgnore')(var.get('line'))))
                                                if (var.get('isTraceLine') and var.get('isInternalFrame').neg()):
                                                    if (var.get('indentStackFrames') and PyJsStrictNeq(var.get('line').callprop('charAt', Js(0.0)),Js(' '))):
                                                        var.put('line', (Js('    ')+var.get('line')))
                                                    var.get('ret').callprop('push', var.get('line'))
                                            finally:
                                                    var.put('i',Js(var.get('i').to_number())+Js(1))
                                        return var.get('ret')
                                    PyJsHoisted_cleanStack_.func_name = 'cleanStack'
                                    var.put('cleanStack', PyJsHoisted_cleanStack_)
                                    @Js
                                    def PyJsHoisted_stackFramesAsArray_(error, this, arguments, var=var):
                                        var = Scope({'error':error, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['line', 'i', 'error', 'stack'])
                                        var.put('stack', var.get('error').get('stack').callprop('replace', JsRegExp('/\\s+$/g'), Js('')).callprop('split', Js('\n')))
                                        #for JS loop
                                        var.put('i', Js(0.0))
                                        while (var.get('i')<var.get('stack').get('length')):
                                            try:
                                                var.put('line', var.get('stack').get(var.get('i')))
                                                if (PyJsStrictEq(Js('    (No stack trace)'),var.get('line')) or var.get('stackFramePattern').callprop('test', var.get('line'))):
                                                    break
                                            finally:
                                                    var.put('i',Js(var.get('i').to_number())+Js(1))
                                        if ((var.get('i')>Js(0.0)) and (var.get('error').get('name')!=Js('SyntaxError'))):
                                            var.put('stack', var.get('stack').callprop('slice', var.get('i')))
                                        return var.get('stack')
                                    PyJsHoisted_stackFramesAsArray_.func_name = 'stackFramesAsArray'
                                    var.put('stackFramesAsArray', PyJsHoisted_stackFramesAsArray_)
                                    @Js
                                    def PyJsHoisted_parseStackAndMessage_(error, this, arguments, var=var):
                                        var = Scope({'error':error, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['message', 'error', 'stack'])
                                        var.put('stack', var.get('error').get('stack'))
                                        var.put('message', var.get('error').callprop('toString'))
                                        var.put('stack', (var.get('stackFramesAsArray')(var.get('error')) if (PyJsStrictEq(var.get('stack',throw=False).typeof(),Js('string')) and (var.get('stack').get('length')>Js(0.0))) else Js([Js('    (No stack trace)')])))
                                        return Js({'message':var.get('message'),'stack':(var.get('stack') if (var.get('error').get('name')==Js('SyntaxError')) else var.get('cleanStack')(var.get('stack')))})
                                    PyJsHoisted_parseStackAndMessage_.func_name = 'parseStackAndMessage'
                                    var.put('parseStackAndMessage', PyJsHoisted_parseStackAndMessage_)
                                    @Js
                                    def PyJsHoisted_formatAndLogError_(error, title, isSoft, this, arguments, var=var):
                                        var = Scope({'error':error, 'title':title, 'isSoft':isSoft, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['title', 'error', 'message', 'stack', 'isSoft'])
                                        if PyJsStrictNeq(var.get('console',throw=False).typeof(),Js('undefined')):
                                            pass
                                            if var.get('util').callprop('isObject', var.get('error')):
                                                var.put('stack', var.get('error').get('stack'))
                                                var.put('message', (var.get('title')+var.get('formatStack')(var.get('stack'), var.get('error'))))
                                            else:
                                                var.put('message', (var.get('title')+var.get('String')(var.get('error'))))
                                            if PyJsStrictEq(var.get('printWarning',throw=False).typeof(),Js('function')):
                                                var.get('printWarning')(var.get('message'), var.get('isSoft'))
                                            else:
                                                if (PyJsStrictEq(var.get('console').get('log').typeof(),Js('function')) or PyJsStrictEq(var.get('_typeof')(var.get('console').get('log')),Js('object'))):
                                                    var.get('console').callprop('log', var.get('message'))
                                    PyJsHoisted_formatAndLogError_.func_name = 'formatAndLogError'
                                    var.put('formatAndLogError', PyJsHoisted_formatAndLogError_)
                                    @Js
                                    def PyJsHoisted_fireRejectionEvent_(name, localHandler, reason, promise, this, arguments, var=var):
                                        var = Scope({'name':name, 'localHandler':localHandler, 'reason':reason, 'promise':promise, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['localEventFired', 'localHandler', 'reason', 'name', 'promise'])
                                        var.put('localEventFired', Js(False))
                                        try:
                                            if PyJsStrictEq(var.get('localHandler',throw=False).typeof(),Js('function')):
                                                var.put('localEventFired', Js(True))
                                                if PyJsStrictEq(var.get('name'),Js('rejectionHandled')):
                                                    var.get('localHandler')(var.get('promise'))
                                                else:
                                                    var.get('localHandler')(var.get('reason'), var.get('promise'))
                                        except PyJsException as PyJsTempException:
                                            PyJsHolder_65_2615517 = var.own.get('e')
                                            var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                                            try:
                                                var.get('async').callprop('throwLater', var.get('e'))
                                            finally:
                                                if PyJsHolder_65_2615517 is not None:
                                                    var.own['e'] = PyJsHolder_65_2615517
                                                else:
                                                    del var.own['e']
                                                del PyJsHolder_65_2615517
                                        if PyJsStrictEq(var.get('name'),Js('unhandledRejection')):
                                            if (var.get('activeFireEvent')(var.get('name'), var.get('reason'), var.get('promise')).neg() and var.get('localEventFired').neg()):
                                                var.get('formatAndLogError')(var.get('reason'), Js('Unhandled rejection '))
                                        else:
                                            var.get('activeFireEvent')(var.get('name'), var.get('promise'))
                                    PyJsHoisted_fireRejectionEvent_.func_name = 'fireRejectionEvent'
                                    var.put('fireRejectionEvent', PyJsHoisted_fireRejectionEvent_)
                                    @Js
                                    def PyJsHoisted_formatNonError_(obj, this, arguments, var=var):
                                        var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['str', 'newStr', 'ruselessToString', 'obj'])
                                        pass
                                        if PyJsStrictEq(var.get('obj',throw=False).typeof(),Js('function')):
                                            var.put('str', ((Js('[function ')+(var.get('obj').get('name') or Js('anonymous')))+Js(']')))
                                        else:
                                            var.put('str', (var.get('obj').callprop('toString') if (var.get('obj') and PyJsStrictEq(var.get('obj').get('toString').typeof(),Js('function'))) else var.get('util').callprop('toString', var.get('obj'))))
                                            var.put('ruselessToString', JsRegExp('/\\[object [a-zA-Z0-9$_]+\\]/'))
                                            if var.get('ruselessToString').callprop('test', var.get('str')):
                                                try:
                                                    var.put('newStr', var.get('JSON').callprop('stringify', var.get('obj')))
                                                    var.put('str', var.get('newStr'))
                                                except PyJsException as PyJsTempException:
                                                    PyJsHolder_65_21573053 = var.own.get('e')
                                                    var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                                                    try:
                                                        pass
                                                    finally:
                                                        if PyJsHolder_65_21573053 is not None:
                                                            var.own['e'] = PyJsHolder_65_21573053
                                                        else:
                                                            del var.own['e']
                                                        del PyJsHolder_65_21573053
                                            if PyJsStrictEq(var.get('str').get('length'),Js(0.0)):
                                                var.put('str', Js('(empty array)'))
                                        return ((Js('(<')+var.get('snip')(var.get('str')))+Js('>, no stack trace)'))
                                    PyJsHoisted_formatNonError_.func_name = 'formatNonError'
                                    var.put('formatNonError', PyJsHoisted_formatNonError_)
                                    @Js
                                    def PyJsHoisted_snip_(str, this, arguments, var=var):
                                        var = Scope({'str':str, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['str', 'maxChars'])
                                        var.put('maxChars', Js(41.0))
                                        if (var.get('str').get('length')<var.get('maxChars')):
                                            return var.get('str')
                                        return (var.get('str').callprop('substr', Js(0.0), (var.get('maxChars')-Js(3.0)))+Js('...'))
                                    PyJsHoisted_snip_.func_name = 'snip'
                                    var.put('snip', PyJsHoisted_snip_)
                                    @Js
                                    def PyJsHoisted_longStackTracesIsSupported_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return PyJsStrictEq(var.get('captureStackTrace',throw=False).typeof(),Js('function'))
                                    PyJsHoisted_longStackTracesIsSupported_.func_name = 'longStackTracesIsSupported'
                                    var.put('longStackTracesIsSupported', PyJsHoisted_longStackTracesIsSupported_)
                                    @Js
                                    def PyJsHoisted_parseLineInfo_(line, this, arguments, var=var):
                                        var = Scope({'line':line, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['matches', 'line'])
                                        var.put('matches', var.get('line').callprop('match', var.get('parseLineInfoRegex')))
                                        if var.get('matches'):
                                            return Js({'fileName':var.get('matches').get('1'),'line':var.get('parseInt')(var.get('matches').get('2'), Js(10.0))})
                                    PyJsHoisted_parseLineInfo_.func_name = 'parseLineInfo'
                                    var.put('parseLineInfo', PyJsHoisted_parseLineInfo_)
                                    @Js
                                    def PyJsHoisted_setBounds_(firstLineError, lastLineError, this, arguments, var=var):
                                        var = Scope({'firstLineError':firstLineError, 'lastLineError':lastLineError, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['lastStackLines', 'i', 'firstLineError', 'lastIndex', 'firstIndex', 'firstFileName', 'lastLineError', 'firstStackLines', 'result', 'lastFileName'])
                                        if var.get('longStackTracesIsSupported')().neg():
                                            return var.get('undefined')
                                        var.put('firstStackLines', (var.get('firstLineError').get('stack') or Js('')).callprop('split', Js('\n')))
                                        var.put('lastStackLines', (var.get('lastLineError').get('stack') or Js('')).callprop('split', Js('\n')))
                                        var.put('firstIndex', (-Js(1.0)))
                                        var.put('lastIndex', (-Js(1.0)))
                                        pass
                                        pass
                                        #for JS loop
                                        var.put('i', Js(0.0))
                                        while (var.get('i')<var.get('firstStackLines').get('length')):
                                            try:
                                                var.put('result', var.get('parseLineInfo')(var.get('firstStackLines').get(var.get('i'))))
                                                if var.get('result'):
                                                    var.put('firstFileName', var.get('result').get('fileName'))
                                                    var.put('firstIndex', var.get('result').get('line'))
                                                    break
                                            finally:
                                                    var.put('i',Js(var.get('i').to_number())+Js(1))
                                        #for JS loop
                                        var.put('i', Js(0.0))
                                        while (var.get('i')<var.get('lastStackLines').get('length')):
                                            try:
                                                var.put('result', var.get('parseLineInfo')(var.get('lastStackLines').get(var.get('i'))))
                                                if var.get('result'):
                                                    var.put('lastFileName', var.get('result').get('fileName'))
                                                    var.put('lastIndex', var.get('result').get('line'))
                                                    break
                                            finally:
                                                    var.put('i',Js(var.get('i').to_number())+Js(1))
                                        if ((((((var.get('firstIndex')<Js(0.0)) or (var.get('lastIndex')<Js(0.0))) or var.get('firstFileName').neg()) or var.get('lastFileName').neg()) or PyJsStrictNeq(var.get('firstFileName'),var.get('lastFileName'))) or (var.get('firstIndex')>=var.get('lastIndex'))):
                                            return var.get('undefined')
                                        @Js
                                        def PyJs_shouldIgnore_217_(line, this, arguments, var=var):
                                            var = Scope({'line':line, 'this':this, 'arguments':arguments, 'shouldIgnore':PyJs_shouldIgnore_217_}, var)
                                            var.registers(['info', 'line'])
                                            if var.get('bluebirdFramePattern').callprop('test', var.get('line')):
                                                return Js(True)
                                            var.put('info', var.get('parseLineInfo')(var.get('line')))
                                            if var.get('info'):
                                                if ((PyJsStrictEq(var.get('info').get('fileName'),var.get('firstFileName')) and (var.get('firstIndex')<=var.get('info').get('line'))) and (var.get('info').get('line')<=var.get('lastIndex'))):
                                                    return Js(True)
                                            return Js(False)
                                        PyJs_shouldIgnore_217_._set_name('shouldIgnore')
                                        var.put('shouldIgnore', PyJs_shouldIgnore_217_)
                                    PyJsHoisted_setBounds_.func_name = 'setBounds'
                                    var.put('setBounds', PyJsHoisted_setBounds_)
                                    @Js
                                    def PyJsHoisted_CapturedTrace_(parent, this, arguments, var=var):
                                        var = Scope({'parent':parent, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['parent', 'length'])
                                        var.get(u"this").put('_parent', var.get('parent'))
                                        var.get(u"this").put('_promisesCreated', Js(0.0))
                                        var.put('length', var.get(u"this").put('_length', (Js(1.0)+(Js(0.0) if PyJsStrictEq(var.get('parent'),var.get('undefined')) else var.get('parent').get('_length')))))
                                        var.get('captureStackTrace')(var.get(u"this"), var.get('CapturedTrace'))
                                        if (var.get('length')>Js(32.0)):
                                            var.get(u"this").callprop('uncycle')
                                    PyJsHoisted_CapturedTrace_.func_name = 'CapturedTrace'
                                    var.put('CapturedTrace', PyJsHoisted_CapturedTrace_)
                                    var.put('async', var.get('Promise').get('_async'))
                                    var.put('Warning', var.get('_dereq_')(Js('./errors')).get('Warning'))
                                    var.put('util', var.get('_dereq_')(Js('./util')))
                                    var.put('es5', var.get('_dereq_')(Js('./es5')))
                                    var.put('canAttachTrace', var.get('util').get('canAttachTrace'))
                                    pass
                                    pass
                                    var.put('bluebirdFramePattern', JsRegExp('/[\\\\\\/]bluebird[\\\\\\/]js[\\\\\\/](release|debug|instrumented)/'))
                                    var.put('nodeFramePattern', JsRegExp('/\\((?:timers\\.js):\\d+:\\d+\\)/'))
                                    var.put('parseLinePattern', JsRegExp('/[\\/<\\(](.+?):(\\d+):(\\d+)\\)?\\s*$/'))
                                    var.put('stackFramePattern', var.get(u"null"))
                                    var.put('formatStack', var.get(u"null"))
                                    var.put('indentStackFrames', Js(False))
                                    pass
                                    var.put('debugging', ((var.get('util').callprop('env', Js('BLUEBIRD_DEBUG'))!=Js(0.0)) and ((Js(True) or var.get('util').callprop('env', Js('BLUEBIRD_DEBUG'))) or PyJsStrictEq(var.get('util').callprop('env', Js('NODE_ENV')),Js('development')))).neg().neg())
                                    var.put('warnings', ((var.get('util').callprop('env', Js('BLUEBIRD_WARNINGS'))!=Js(0.0)) and (var.get('debugging') or var.get('util').callprop('env', Js('BLUEBIRD_WARNINGS')))).neg().neg())
                                    var.put('longStackTraces', ((var.get('util').callprop('env', Js('BLUEBIRD_LONG_STACK_TRACES'))!=Js(0.0)) and (var.get('debugging') or var.get('util').callprop('env', Js('BLUEBIRD_LONG_STACK_TRACES')))).neg().neg())
                                    var.put('wForgottenReturn', ((var.get('util').callprop('env', Js('BLUEBIRD_W_FORGOTTEN_RETURN'))!=Js(0.0)) and (var.get('warnings') or var.get('util').callprop('env', Js('BLUEBIRD_W_FORGOTTEN_RETURN')).neg().neg())))
                                    pass
                                    @Js
                                    def PyJs_anonymous_166_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers(['promises', 'unhandledRejectionCheck', 'unhandledRejectionClear'])
                                        @Js
                                        def PyJsHoisted_unhandledRejectionCheck_(this, arguments, var=var):
                                            var = Scope({'this':this, 'arguments':arguments}, var)
                                            var.registers(['i'])
                                            #for JS loop
                                            var.put('i', Js(0.0))
                                            while (var.get('i')<var.get('promises').get('length')):
                                                try:
                                                    var.get('promises').get(var.get('i')).callprop('_notifyUnhandledRejection')
                                                finally:
                                                        var.put('i',Js(var.get('i').to_number())+Js(1))
                                            var.get('unhandledRejectionClear')()
                                        PyJsHoisted_unhandledRejectionCheck_.func_name = 'unhandledRejectionCheck'
                                        var.put('unhandledRejectionCheck', PyJsHoisted_unhandledRejectionCheck_)
                                        @Js
                                        def PyJsHoisted_unhandledRejectionClear_(this, arguments, var=var):
                                            var = Scope({'this':this, 'arguments':arguments}, var)
                                            var.registers([])
                                            var.get('promises').put('length', Js(0.0))
                                        PyJsHoisted_unhandledRejectionClear_.func_name = 'unhandledRejectionClear'
                                        var.put('unhandledRejectionClear', PyJsHoisted_unhandledRejectionClear_)
                                        var.put('promises', Js([]))
                                        pass
                                        pass
                                        @Js
                                        def PyJs_deferUnhandledRejectionCheck_167_(promise, this, arguments, var=var):
                                            var = Scope({'promise':promise, 'this':this, 'arguments':arguments, 'deferUnhandledRejectionCheck':PyJs_deferUnhandledRejectionCheck_167_}, var)
                                            var.registers(['promise'])
                                            var.get('promises').callprop('push', var.get('promise'))
                                            var.get('setTimeout')(var.get('unhandledRejectionCheck'), Js(1.0))
                                        PyJs_deferUnhandledRejectionCheck_167_._set_name('deferUnhandledRejectionCheck')
                                        var.put('deferUnhandledRejectionCheck', PyJs_deferUnhandledRejectionCheck_167_)
                                        var.get('es5').callprop('defineProperty', var.get('Promise'), Js('_unhandledRejectionCheck'), Js({'value':var.get('unhandledRejectionCheck')}))
                                        var.get('es5').callprop('defineProperty', var.get('Promise'), Js('_unhandledRejectionClear'), Js({'value':var.get('unhandledRejectionClear')}))
                                    PyJs_anonymous_166_._set_name('anonymous')
                                    PyJs_anonymous_166_()
                                    @Js
                                    def PyJs_anonymous_168_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers(['target'])
                                        var.put('target', var.get(u"this").callprop('_target'))
                                        var.get('target').put('_bitField', ((var.get('target').get('_bitField')&(~Js(1048576.0)))|Js(524288.0)))
                                    PyJs_anonymous_168_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('suppressUnhandledRejections', PyJs_anonymous_168_)
                                    @Js
                                    def PyJs_anonymous_169_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        if PyJsStrictNeq((var.get(u"this").get('_bitField')&Js(524288.0)),Js(0.0)):
                                            return var.get('undefined')
                                        var.get(u"this").callprop('_setRejectionIsUnhandled')
                                        var.get('deferUnhandledRejectionCheck')(var.get(u"this"))
                                    PyJs_anonymous_169_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_ensurePossibleRejectionHandled', PyJs_anonymous_169_)
                                    @Js
                                    def PyJs_anonymous_170_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        var.get('fireRejectionEvent')(Js('rejectionHandled'), var.get('unhandledRejectionHandled'), var.get('undefined'), var.get(u"this"))
                                    PyJs_anonymous_170_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_notifyUnhandledRejectionIsHandled', PyJs_anonymous_170_)
                                    @Js
                                    def PyJs_anonymous_171_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        var.get(u"this").put('_bitField', (var.get(u"this").get('_bitField')|Js(268435456.0)))
                                    PyJs_anonymous_171_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_setReturnedNonUndefined', PyJs_anonymous_171_)
                                    @Js
                                    def PyJs_anonymous_172_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return PyJsStrictNeq((var.get(u"this").get('_bitField')&Js(268435456.0)),Js(0.0))
                                    PyJs_anonymous_172_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_returnedNonUndefined', PyJs_anonymous_172_)
                                    @Js
                                    def PyJs_anonymous_173_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers(['reason'])
                                        if var.get(u"this").callprop('_isRejectionUnhandled'):
                                            var.put('reason', var.get(u"this").callprop('_settledValue'))
                                            var.get(u"this").callprop('_setUnhandledRejectionIsNotified')
                                            var.get('fireRejectionEvent')(Js('unhandledRejection'), var.get('possiblyUnhandledRejection'), var.get('reason'), var.get(u"this"))
                                    PyJs_anonymous_173_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_notifyUnhandledRejection', PyJs_anonymous_173_)
                                    @Js
                                    def PyJs_anonymous_174_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        var.get(u"this").put('_bitField', (var.get(u"this").get('_bitField')|Js(262144.0)))
                                    PyJs_anonymous_174_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_setUnhandledRejectionIsNotified', PyJs_anonymous_174_)
                                    @Js
                                    def PyJs_anonymous_175_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        var.get(u"this").put('_bitField', (var.get(u"this").get('_bitField')&(~Js(262144.0))))
                                    PyJs_anonymous_175_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_unsetUnhandledRejectionIsNotified', PyJs_anonymous_175_)
                                    @Js
                                    def PyJs_anonymous_176_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return ((var.get(u"this").get('_bitField')&Js(262144.0))>Js(0.0))
                                    PyJs_anonymous_176_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_isUnhandledRejectionNotified', PyJs_anonymous_176_)
                                    @Js
                                    def PyJs_anonymous_177_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        var.get(u"this").put('_bitField', (var.get(u"this").get('_bitField')|Js(1048576.0)))
                                    PyJs_anonymous_177_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_setRejectionIsUnhandled', PyJs_anonymous_177_)
                                    @Js
                                    def PyJs_anonymous_178_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        var.get(u"this").put('_bitField', (var.get(u"this").get('_bitField')&(~Js(1048576.0))))
                                        if var.get(u"this").callprop('_isUnhandledRejectionNotified'):
                                            var.get(u"this").callprop('_unsetUnhandledRejectionIsNotified')
                                            var.get(u"this").callprop('_notifyUnhandledRejectionIsHandled')
                                    PyJs_anonymous_178_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_unsetRejectionIsUnhandled', PyJs_anonymous_178_)
                                    @Js
                                    def PyJs_anonymous_179_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return ((var.get(u"this").get('_bitField')&Js(1048576.0))>Js(0.0))
                                    PyJs_anonymous_179_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_isRejectionUnhandled', PyJs_anonymous_179_)
                                    @Js
                                    def PyJs_anonymous_180_(message, shouldUseOwnTrace, promise, this, arguments, var=var):
                                        var = Scope({'message':message, 'shouldUseOwnTrace':shouldUseOwnTrace, 'promise':promise, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['message', 'shouldUseOwnTrace', 'promise'])
                                        return var.get('warn')(var.get('message'), var.get('shouldUseOwnTrace'), (var.get('promise') or var.get(u"this")))
                                    PyJs_anonymous_180_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_warn', PyJs_anonymous_180_)
                                    @Js
                                    def PyJs_anonymous_181_(fn, this, arguments, var=var):
                                        var = Scope({'fn':fn, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['context', 'fn'])
                                        var.put('context', var.get('Promise').callprop('_getContext'))
                                        var.put('possiblyUnhandledRejection', var.get('util').callprop('contextBind', var.get('context'), var.get('fn')))
                                    PyJs_anonymous_181_._set_name('anonymous')
                                    var.get('Promise').put('onPossiblyUnhandledRejection', PyJs_anonymous_181_)
                                    @Js
                                    def PyJs_anonymous_182_(fn, this, arguments, var=var):
                                        var = Scope({'fn':fn, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['context', 'fn'])
                                        var.put('context', var.get('Promise').callprop('_getContext'))
                                        var.put('unhandledRejectionHandled', var.get('util').callprop('contextBind', var.get('context'), var.get('fn')))
                                    PyJs_anonymous_182_._set_name('anonymous')
                                    var.get('Promise').put('onUnhandledRejectionHandled', PyJs_anonymous_182_)
                                    @Js
                                    def PyJs_disableLongStackTraces_183_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments, 'disableLongStackTraces':PyJs_disableLongStackTraces_183_}, var)
                                        var.registers([])
                                        pass
                                    PyJs_disableLongStackTraces_183_._set_name('disableLongStackTraces')
                                    var.put('disableLongStackTraces', PyJs_disableLongStackTraces_183_)
                                    @Js
                                    def PyJs_anonymous_184_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers(['Promise_attachExtraTrace', 'Promise_dereferenceTrace', 'Promise_captureStackTrace'])
                                        if (var.get('async').callprop('haveItemsQueued') and var.get('config').get('longStackTraces').neg()):
                                            PyJsTempException = JsToPyException(var.get('Error').create(Js('cannot enable long stack traces after promises have been created\n\n    See http://goo.gl/MqrFmX\n')))
                                            raise PyJsTempException
                                        if (var.get('config').get('longStackTraces').neg() and var.get('longStackTracesIsSupported')()):
                                            var.put('Promise_captureStackTrace', var.get('Promise').get('prototype').get('_captureStackTrace'))
                                            var.put('Promise_attachExtraTrace', var.get('Promise').get('prototype').get('_attachExtraTrace'))
                                            var.put('Promise_dereferenceTrace', var.get('Promise').get('prototype').get('_dereferenceTrace'))
                                            var.get('config').put('longStackTraces', Js(True))
                                            @Js
                                            def PyJs_disableLongStackTraces_185_(this, arguments, var=var):
                                                var = Scope({'this':this, 'arguments':arguments, 'disableLongStackTraces':PyJs_disableLongStackTraces_185_}, var)
                                                var.registers([])
                                                if (var.get('async').callprop('haveItemsQueued') and var.get('config').get('longStackTraces').neg()):
                                                    PyJsTempException = JsToPyException(var.get('Error').create(Js('cannot enable long stack traces after promises have been created\n\n    See http://goo.gl/MqrFmX\n')))
                                                    raise PyJsTempException
                                                var.get('Promise').get('prototype').put('_captureStackTrace', var.get('Promise_captureStackTrace'))
                                                var.get('Promise').get('prototype').put('_attachExtraTrace', var.get('Promise_attachExtraTrace'))
                                                var.get('Promise').get('prototype').put('_dereferenceTrace', var.get('Promise_dereferenceTrace'))
                                                var.get('Context').callprop('deactivateLongStackTraces')
                                                var.get('config').put('longStackTraces', Js(False))
                                            PyJs_disableLongStackTraces_185_._set_name('disableLongStackTraces')
                                            var.put('disableLongStackTraces', PyJs_disableLongStackTraces_185_)
                                            var.get('Promise').get('prototype').put('_captureStackTrace', var.get('longStackTracesCaptureStackTrace'))
                                            var.get('Promise').get('prototype').put('_attachExtraTrace', var.get('longStackTracesAttachExtraTrace'))
                                            var.get('Promise').get('prototype').put('_dereferenceTrace', var.get('longStackTracesDereferenceTrace'))
                                            var.get('Context').callprop('activateLongStackTraces')
                                    PyJs_anonymous_184_._set_name('anonymous')
                                    var.get('Promise').put('longStackTraces', PyJs_anonymous_184_)
                                    @Js
                                    def PyJs_anonymous_186_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return (var.get('config').get('longStackTraces') and var.get('longStackTracesIsSupported')())
                                    PyJs_anonymous_186_._set_name('anonymous')
                                    var.get('Promise').put('hasLongStackTraces', PyJs_anonymous_186_)
                                    @Js
                                    def PyJs_before_187_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments, 'before':PyJs_before_187_}, var)
                                        var.registers(['ret'])
                                        var.put('ret', var.get('util').get('global').get('onunhandledrejection'))
                                        var.get('util').get('global').put('onunhandledrejection', var.get(u"null"))
                                        return var.get('ret')
                                    PyJs_before_187_._set_name('before')
                                    @Js
                                    def PyJs_after_188_(fn, this, arguments, var=var):
                                        var = Scope({'fn':fn, 'this':this, 'arguments':arguments, 'after':PyJs_after_188_}, var)
                                        var.registers(['fn'])
                                        var.get('util').get('global').put('onunhandledrejection', var.get('fn'))
                                    PyJs_after_188_._set_name('after')
                                    @Js
                                    def PyJs_before_189_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments, 'before':PyJs_before_189_}, var)
                                        var.registers(['ret'])
                                        var.put('ret', var.get('util').get('global').get('onrejectionhandled'))
                                        var.get('util').get('global').put('onrejectionhandled', var.get(u"null"))
                                        return var.get('ret')
                                    PyJs_before_189_._set_name('before')
                                    @Js
                                    def PyJs_after_190_(fn, this, arguments, var=var):
                                        var = Scope({'fn':fn, 'this':this, 'arguments':arguments, 'after':PyJs_after_190_}, var)
                                        var.registers(['fn'])
                                        var.get('util').get('global').put('onrejectionhandled', var.get('fn'))
                                    PyJs_after_190_._set_name('after')
                                    var.put('legacyHandlers', Js({'unhandledrejection':Js({'before':PyJs_before_187_,'after':PyJs_after_188_}),'rejectionhandled':Js({'before':PyJs_before_189_,'after':PyJs_after_190_})}))
                                    @Js
                                    def PyJs_anonymous_191_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers(['event', 'dispatch'])
                                        @Js
                                        def PyJs_dispatch_192_(legacy, e, this, arguments, var=var):
                                            var = Scope({'legacy':legacy, 'e':e, 'this':this, 'arguments':arguments, 'dispatch':PyJs_dispatch_192_}, var)
                                            var.registers(['legacy', 'fn', 'e'])
                                            if var.get('legacy'):
                                                pass
                                                try:
                                                    var.put('fn', var.get('legacy').callprop('before'))
                                                    return var.get('util').get('global').callprop('dispatchEvent', var.get('e')).neg()
                                                finally:
                                                    var.get('legacy').callprop('after', var.get('fn'))
                                            else:
                                                return var.get('util').get('global').callprop('dispatchEvent', var.get('e')).neg()
                                        PyJs_dispatch_192_._set_name('dispatch')
                                        var.put('dispatch', PyJs_dispatch_192_)
                                        try:
                                            if PyJsStrictEq(var.get('CustomEvent',throw=False).typeof(),Js('function')):
                                                var.put('event', var.get('CustomEvent').create(Js('CustomEvent')))
                                                var.get('util').get('global').callprop('dispatchEvent', var.get('event'))
                                                @Js
                                                def PyJs_anonymous_193_(name, event, this, arguments, var=var):
                                                    var = Scope({'name':name, 'event':event, 'this':this, 'arguments':arguments}, var)
                                                    var.registers(['domEvent', 'event', 'eventData', 'name'])
                                                    var.put('name', var.get('name').callprop('toLowerCase'))
                                                    var.put('eventData', Js({'detail':var.get('event'),'cancelable':Js(True)}))
                                                    var.put('domEvent', var.get('CustomEvent').create(var.get('name'), var.get('eventData')))
                                                    var.get('es5').callprop('defineProperty', var.get('domEvent'), Js('promise'), Js({'value':var.get('event').get('promise')}))
                                                    var.get('es5').callprop('defineProperty', var.get('domEvent'), Js('reason'), Js({'value':var.get('event').get('reason')}))
                                                    return var.get('dispatch')(var.get('legacyHandlers').get(var.get('name')), var.get('domEvent'))
                                                PyJs_anonymous_193_._set_name('anonymous')
                                                return PyJs_anonymous_193_
                                            else:
                                                if PyJsStrictEq(var.get('Event',throw=False).typeof(),Js('function')):
                                                    var.put('event', var.get('Event').create(Js('CustomEvent')))
                                                    var.get('util').get('global').callprop('dispatchEvent', var.get('event'))
                                                    @Js
                                                    def PyJs_anonymous_194_(name, event, this, arguments, var=var):
                                                        var = Scope({'name':name, 'event':event, 'this':this, 'arguments':arguments}, var)
                                                        var.registers(['domEvent', 'event', 'name'])
                                                        var.put('name', var.get('name').callprop('toLowerCase'))
                                                        var.put('domEvent', var.get('Event').create(var.get('name'), Js({'cancelable':Js(True)})))
                                                        var.get('domEvent').put('detail', var.get('event'))
                                                        var.get('es5').callprop('defineProperty', var.get('domEvent'), Js('promise'), Js({'value':var.get('event').get('promise')}))
                                                        var.get('es5').callprop('defineProperty', var.get('domEvent'), Js('reason'), Js({'value':var.get('event').get('reason')}))
                                                        return var.get('dispatch')(var.get('legacyHandlers').get(var.get('name')), var.get('domEvent'))
                                                    PyJs_anonymous_194_._set_name('anonymous')
                                                    return PyJs_anonymous_194_
                                                else:
                                                    var.put('event', var.get('document').callprop('createEvent', Js('CustomEvent')))
                                                    var.get('event').callprop('initCustomEvent', Js('testingtheevent'), Js(False), Js(True), Js({}))
                                                    var.get('util').get('global').callprop('dispatchEvent', var.get('event'))
                                                    @Js
                                                    def PyJs_anonymous_195_(name, event, this, arguments, var=var):
                                                        var = Scope({'name':name, 'event':event, 'this':this, 'arguments':arguments}, var)
                                                        var.registers(['domEvent', 'event', 'name'])
                                                        var.put('name', var.get('name').callprop('toLowerCase'))
                                                        var.put('domEvent', var.get('document').callprop('createEvent', Js('CustomEvent')))
                                                        var.get('domEvent').callprop('initCustomEvent', var.get('name'), Js(False), Js(True), var.get('event'))
                                                        return var.get('dispatch')(var.get('legacyHandlers').get(var.get('name')), var.get('domEvent'))
                                                    PyJs_anonymous_195_._set_name('anonymous')
                                                    return PyJs_anonymous_195_
                                        except PyJsException as PyJsTempException:
                                            PyJsHolder_65_64814733 = var.own.get('e')
                                            var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                                            try:
                                                pass
                                            finally:
                                                if PyJsHolder_65_64814733 is not None:
                                                    var.own['e'] = PyJsHolder_65_64814733
                                                else:
                                                    del var.own['e']
                                                del PyJsHolder_65_64814733
                                        @Js
                                        def PyJs_anonymous_196_(this, arguments, var=var):
                                            var = Scope({'this':this, 'arguments':arguments}, var)
                                            var.registers([])
                                            return Js(False)
                                        PyJs_anonymous_196_._set_name('anonymous')
                                        return PyJs_anonymous_196_
                                    PyJs_anonymous_191_._set_name('anonymous')
                                    var.put('fireDomEvent', PyJs_anonymous_191_())
                                    @Js
                                    def PyJs_anonymous_197_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        if var.get('util').get('isNode'):
                                            @Js
                                            def PyJs_anonymous_198_(this, arguments, var=var):
                                                var = Scope({'this':this, 'arguments':arguments}, var)
                                                var.registers([])
                                                return var.get('process').get('emit').callprop('apply', var.get('process'), var.get('arguments'))
                                            PyJs_anonymous_198_._set_name('anonymous')
                                            return PyJs_anonymous_198_
                                        else:
                                            if var.get('util').get('global').neg():
                                                @Js
                                                def PyJs_anonymous_199_(this, arguments, var=var):
                                                    var = Scope({'this':this, 'arguments':arguments}, var)
                                                    var.registers([])
                                                    return Js(False)
                                                PyJs_anonymous_199_._set_name('anonymous')
                                                return PyJs_anonymous_199_
                                            @Js
                                            def PyJs_anonymous_200_(name, this, arguments, var=var):
                                                var = Scope({'name':name, 'this':this, 'arguments':arguments}, var)
                                                var.registers(['methodName', 'name', 'method'])
                                                var.put('methodName', (Js('on')+var.get('name').callprop('toLowerCase')))
                                                var.put('method', var.get('util').get('global').get(var.get('methodName')))
                                                if var.get('method').neg():
                                                    return Js(False)
                                                var.get('method').callprop('apply', var.get('util').get('global'), Js([]).get('slice').callprop('call', var.get('arguments'), Js(1.0)))
                                                return Js(True)
                                            PyJs_anonymous_200_._set_name('anonymous')
                                            return PyJs_anonymous_200_
                                    PyJs_anonymous_197_._set_name('anonymous')
                                    var.put('fireGlobalEvent', PyJs_anonymous_197_())
                                    pass
                                    @Js
                                    def PyJs_promiseChained_201_(name, promise, child, this, arguments, var=var):
                                        var = Scope({'name':name, 'promise':promise, 'child':child, 'this':this, 'arguments':arguments, 'promiseChained':PyJs_promiseChained_201_}, var)
                                        var.registers(['child', 'name', 'promise'])
                                        return Js({'promise':var.get('promise'),'child':var.get('child')})
                                    PyJs_promiseChained_201_._set_name('promiseChained')
                                    @Js
                                    def PyJs_warning_202_(name, _warning, this, arguments, var=var):
                                        var = Scope({'name':name, '_warning':_warning, 'this':this, 'arguments':arguments, 'warning':PyJs_warning_202_}, var)
                                        var.registers(['_warning', 'name'])
                                        return Js({'warning':var.get('_warning')})
                                    PyJs_warning_202_._set_name('warning')
                                    @Js
                                    def PyJs_unhandledRejection_203_(name, reason, promise, this, arguments, var=var):
                                        var = Scope({'name':name, 'reason':reason, 'promise':promise, 'this':this, 'arguments':arguments, 'unhandledRejection':PyJs_unhandledRejection_203_}, var)
                                        var.registers(['reason', 'name', 'promise'])
                                        return Js({'reason':var.get('reason'),'promise':var.get('promise')})
                                    PyJs_unhandledRejection_203_._set_name('unhandledRejection')
                                    var.put('eventToObjectGenerator', Js({'promiseCreated':var.get('generatePromiseLifecycleEventObject'),'promiseFulfilled':var.get('generatePromiseLifecycleEventObject'),'promiseRejected':var.get('generatePromiseLifecycleEventObject'),'promiseResolved':var.get('generatePromiseLifecycleEventObject'),'promiseCancelled':var.get('generatePromiseLifecycleEventObject'),'promiseChained':PyJs_promiseChained_201_,'warning':PyJs_warning_202_,'unhandledRejection':PyJs_unhandledRejection_203_,'rejectionHandled':var.get('generatePromiseLifecycleEventObject')}))
                                    @Js
                                    def PyJs_activeFireEvent_204_(name, this, arguments, var=var):
                                        var = Scope({'name':name, 'this':this, 'arguments':arguments, 'activeFireEvent':PyJs_activeFireEvent_204_}, var)
                                        var.registers(['globalEventFired', 'name', 'domEventFired'])
                                        var.put('globalEventFired', Js(False))
                                        try:
                                            var.put('globalEventFired', var.get('fireGlobalEvent').callprop('apply', var.get(u"null"), var.get('arguments')))
                                        except PyJsException as PyJsTempException:
                                            PyJsHolder_65_34978503 = var.own.get('e')
                                            var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                                            try:
                                                var.get('async').callprop('throwLater', var.get('e'))
                                                var.put('globalEventFired', Js(True))
                                            finally:
                                                if PyJsHolder_65_34978503 is not None:
                                                    var.own['e'] = PyJsHolder_65_34978503
                                                else:
                                                    del var.own['e']
                                                del PyJsHolder_65_34978503
                                        var.put('domEventFired', Js(False))
                                        try:
                                            var.put('domEventFired', var.get('fireDomEvent')(var.get('name'), var.get('eventToObjectGenerator').get(var.get('name')).callprop('apply', var.get(u"null"), var.get('arguments'))))
                                        except PyJsException as PyJsTempException:
                                            PyJsHolder_65_93586343 = var.own.get('e')
                                            var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                                            try:
                                                var.get('async').callprop('throwLater', var.get('e'))
                                                var.put('domEventFired', Js(True))
                                            finally:
                                                if PyJsHolder_65_93586343 is not None:
                                                    var.own['e'] = PyJsHolder_65_93586343
                                                else:
                                                    del var.own['e']
                                                del PyJsHolder_65_93586343
                                        return (var.get('domEventFired') or var.get('globalEventFired'))
                                    PyJs_activeFireEvent_204_._set_name('activeFireEvent')
                                    var.put('activeFireEvent', PyJs_activeFireEvent_204_)
                                    @Js
                                    def PyJs_anonymous_205_(opts, this, arguments, var=var):
                                        var = Scope({'opts':opts, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['prev', 'opts', 'cur', 'warningsOption'])
                                        var.put('opts', var.get('Object')(var.get('opts')))
                                        if var.get('opts').contains(Js('longStackTraces')):
                                            if var.get('opts').get('longStackTraces'):
                                                var.get('Promise').callprop('longStackTraces')
                                            else:
                                                if (var.get('opts').get('longStackTraces').neg() and var.get('Promise').callprop('hasLongStackTraces')):
                                                    var.get('disableLongStackTraces')()
                                        if var.get('opts').contains(Js('warnings')):
                                            var.put('warningsOption', var.get('opts').get('warnings'))
                                            var.get('config').put('warnings', var.get('warningsOption').neg().neg())
                                            var.put('wForgottenReturn', var.get('config').get('warnings'))
                                            if var.get('util').callprop('isObject', var.get('warningsOption')):
                                                if var.get('warningsOption').contains(Js('wForgottenReturn')):
                                                    var.put('wForgottenReturn', var.get('warningsOption').get('wForgottenReturn').neg().neg())
                                        if ((var.get('opts').contains(Js('cancellation')) and var.get('opts').get('cancellation')) and var.get('config').get('cancellation').neg()):
                                            if var.get('async').callprop('haveItemsQueued'):
                                                PyJsTempException = JsToPyException(var.get('Error').create(Js('cannot enable cancellation after promises are in use')))
                                                raise PyJsTempException
                                            var.get('Promise').get('prototype').put('_clearCancellationData', var.get('cancellationClearCancellationData'))
                                            var.get('Promise').get('prototype').put('_propagateFrom', var.get('cancellationPropagateFrom'))
                                            var.get('Promise').get('prototype').put('_onCancel', var.get('cancellationOnCancel'))
                                            var.get('Promise').get('prototype').put('_setOnCancel', var.get('cancellationSetOnCancel'))
                                            var.get('Promise').get('prototype').put('_attachCancellationCallback', var.get('cancellationAttachCancellationCallback'))
                                            var.get('Promise').get('prototype').put('_execute', var.get('cancellationExecute'))
                                            var.put('_propagateFromFunction', var.get('cancellationPropagateFrom'))
                                            var.get('config').put('cancellation', Js(True))
                                        if var.get('opts').contains(Js('monitoring')):
                                            if (var.get('opts').get('monitoring') and var.get('config').get('monitoring').neg()):
                                                var.get('config').put('monitoring', Js(True))
                                                var.get('Promise').get('prototype').put('_fireEvent', var.get('activeFireEvent'))
                                            else:
                                                if (var.get('opts').get('monitoring').neg() and var.get('config').get('monitoring')):
                                                    var.get('config').put('monitoring', Js(False))
                                                    var.get('Promise').get('prototype').put('_fireEvent', var.get('defaultFireEvent'))
                                        if (var.get('opts').contains(Js('asyncHooks')) and var.get('util').get('nodeSupportsAsyncResource')):
                                            var.put('prev', var.get('config').get('asyncHooks'))
                                            var.put('cur', var.get('opts').get('asyncHooks').neg().neg())
                                            if PyJsStrictNeq(var.get('prev'),var.get('cur')):
                                                var.get('config').put('asyncHooks', var.get('cur'))
                                                if var.get('cur'):
                                                    var.get('enableAsyncHooks')()
                                                else:
                                                    var.get('disableAsyncHooks')()
                                        return var.get('Promise')
                                    PyJs_anonymous_205_._set_name('anonymous')
                                    var.get('Promise').put('config', PyJs_anonymous_205_)
                                    pass
                                    var.get('Promise').get('prototype').put('_fireEvent', var.get('defaultFireEvent'))
                                    @Js
                                    def PyJs_anonymous_206_(executor, resolve, reject, this, arguments, var=var):
                                        var = Scope({'executor':executor, 'resolve':resolve, 'reject':reject, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['resolve', 'executor', 'reject'])
                                        try:
                                            var.get('executor')(var.get('resolve'), var.get('reject'))
                                        except PyJsException as PyJsTempException:
                                            PyJsHolder_65_96115095 = var.own.get('e')
                                            var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                                            try:
                                                return var.get('e')
                                            finally:
                                                if PyJsHolder_65_96115095 is not None:
                                                    var.own['e'] = PyJsHolder_65_96115095
                                                else:
                                                    del var.own['e']
                                                del PyJsHolder_65_96115095
                                    PyJs_anonymous_206_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_execute', PyJs_anonymous_206_)
                                    @Js
                                    def PyJs_anonymous_207_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        pass
                                    PyJs_anonymous_207_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_onCancel', PyJs_anonymous_207_)
                                    @Js
                                    def PyJs_anonymous_208_(handler, this, arguments, var=var):
                                        var = Scope({'handler':handler, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['handler'])
                                        pass
                                    PyJs_anonymous_208_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_setOnCancel', PyJs_anonymous_208_)
                                    @Js
                                    def PyJs_anonymous_209_(onCancel, this, arguments, var=var):
                                        var = Scope({'onCancel':onCancel, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['onCancel'])
                                        pass
                                    PyJs_anonymous_209_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_attachCancellationCallback', PyJs_anonymous_209_)
                                    @Js
                                    def PyJs_anonymous_210_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        pass
                                    PyJs_anonymous_210_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_captureStackTrace', PyJs_anonymous_210_)
                                    @Js
                                    def PyJs_anonymous_211_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        pass
                                    PyJs_anonymous_211_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_attachExtraTrace', PyJs_anonymous_211_)
                                    @Js
                                    def PyJs_anonymous_212_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        pass
                                    PyJs_anonymous_212_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_dereferenceTrace', PyJs_anonymous_212_)
                                    @Js
                                    def PyJs_anonymous_213_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        pass
                                    PyJs_anonymous_213_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_clearCancellationData', PyJs_anonymous_213_)
                                    @Js
                                    def PyJs_anonymous_214_(parent, flags, this, arguments, var=var):
                                        var = Scope({'parent':parent, 'flags':flags, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['parent', 'flags'])
                                        pass
                                        pass
                                    PyJs_anonymous_214_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_propagateFrom', PyJs_anonymous_214_)
                                    pass
                                    pass
                                    pass
                                    pass
                                    pass
                                    pass
                                    pass
                                    var.put('_propagateFromFunction', var.get('bindingPropagateFrom'))
                                    pass
                                    pass
                                    pass
                                    pass
                                    pass
                                    pass
                                    pass
                                    pass
                                    pass
                                    pass
                                    pass
                                    pass
                                    pass
                                    pass
                                    pass
                                    pass
                                    pass
                                    pass
                                    @Js
                                    def PyJs_shouldIgnore_216_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments, 'shouldIgnore':PyJs_shouldIgnore_216_}, var)
                                        var.registers([])
                                        return Js(False)
                                    PyJs_shouldIgnore_216_._set_name('shouldIgnore')
                                    var.put('shouldIgnore', PyJs_shouldIgnore_216_)
                                    var.put('parseLineInfoRegex', JsRegExp('/[\\/<\\(]([^:\\/]+):(\\d+):(?:\\d+)\\)?\\s*$/'))
                                    pass
                                    pass
                                    pass
                                    var.get('util').callprop('inherits', var.get('CapturedTrace'), var.get('Error'))
                                    var.get('Context').put('CapturedTrace', var.get('CapturedTrace'))
                                    @Js
                                    def PyJs_anonymous_218_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers(['stackToIndex', 'i', 'cycleEdgeNode', 'currentStack', 'currentChildLength', 'nodes', 'length', 'stack', 'node', 'index', 'j'])
                                        var.put('length', var.get(u"this").get('_length'))
                                        if (var.get('length')<Js(2.0)):
                                            return var.get('undefined')
                                        var.put('nodes', Js([]))
                                        var.put('stackToIndex', Js({}))
                                        #for JS loop
                                        var.put('i', Js(0.0))
                                        var.put('node', var.get(u"this"))
                                        while PyJsStrictNeq(var.get('node'),var.get('undefined')):
                                            try:
                                                var.get('nodes').callprop('push', var.get('node'))
                                                var.put('node', var.get('node').get('_parent'))
                                            finally:
                                                    var.put('i',Js(var.get('i').to_number())+Js(1))
                                        var.put('length', var.get(u"this").put('_length', var.get('i')))
                                        #for JS loop
                                        var.put('i', (var.get('length')-Js(1.0)))
                                        while (var.get('i')>=Js(0.0)):
                                            try:
                                                var.put('stack', var.get('nodes').get(var.get('i')).get('stack'))
                                                if PyJsStrictEq(var.get('stackToIndex').get(var.get('stack')),var.get('undefined')):
                                                    var.get('stackToIndex').put(var.get('stack'), var.get('i'))
                                            finally:
                                                    var.put('i',Js(var.get('i').to_number())-Js(1))
                                        #for JS loop
                                        var.put('i', Js(0.0))
                                        while (var.get('i')<var.get('length')):
                                            try:
                                                var.put('currentStack', var.get('nodes').get(var.get('i')).get('stack'))
                                                var.put('index', var.get('stackToIndex').get(var.get('currentStack')))
                                                if (PyJsStrictNeq(var.get('index'),var.get('undefined')) and PyJsStrictNeq(var.get('index'),var.get('i'))):
                                                    if (var.get('index')>Js(0.0)):
                                                        var.get('nodes').get((var.get('index')-Js(1.0))).put('_parent', var.get('undefined'))
                                                        var.get('nodes').get((var.get('index')-Js(1.0))).put('_length', Js(1.0))
                                                    var.get('nodes').get(var.get('i')).put('_parent', var.get('undefined'))
                                                    var.get('nodes').get(var.get('i')).put('_length', Js(1.0))
                                                    var.put('cycleEdgeNode', (var.get('nodes').get((var.get('i')-Js(1.0))) if (var.get('i')>Js(0.0)) else var.get(u"this")))
                                                    if (var.get('index')<(var.get('length')-Js(1.0))):
                                                        var.get('cycleEdgeNode').put('_parent', var.get('nodes').get((var.get('index')+Js(1.0))))
                                                        var.get('cycleEdgeNode').get('_parent').callprop('uncycle')
                                                        var.get('cycleEdgeNode').put('_length', (var.get('cycleEdgeNode').get('_parent').get('_length')+Js(1.0)))
                                                    else:
                                                        var.get('cycleEdgeNode').put('_parent', var.get('undefined'))
                                                        var.get('cycleEdgeNode').put('_length', Js(1.0))
                                                    var.put('currentChildLength', (var.get('cycleEdgeNode').get('_length')+Js(1.0)))
                                                    #for JS loop
                                                    var.put('j', (var.get('i')-Js(2.0)))
                                                    while (var.get('j')>=Js(0.0)):
                                                        try:
                                                            var.get('nodes').get(var.get('j')).put('_length', var.get('currentChildLength'))
                                                            (var.put('currentChildLength',Js(var.get('currentChildLength').to_number())+Js(1))-Js(1))
                                                        finally:
                                                                var.put('j',Js(var.get('j').to_number())-Js(1))
                                                    return var.get('undefined')
                                            finally:
                                                    var.put('i',Js(var.get('i').to_number())+Js(1))
                                    PyJs_anonymous_218_._set_name('anonymous')
                                    var.get('CapturedTrace').get('prototype').put('uncycle', PyJs_anonymous_218_)
                                    @Js
                                    def PyJs_anonymous_219_(error, this, arguments, var=var):
                                        var = Scope({'error':error, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['trace', 'error', 'parsed', 'message', 'stacks'])
                                        if var.get('error').get('__stackCleaned__'):
                                            return var.get('undefined')
                                        var.get(u"this").callprop('uncycle')
                                        var.put('parsed', var.get('parseStackAndMessage')(var.get('error')))
                                        var.put('message', var.get('parsed').get('message'))
                                        var.put('stacks', Js([var.get('parsed').get('stack')]))
                                        var.put('trace', var.get(u"this"))
                                        while PyJsStrictNeq(var.get('trace'),var.get('undefined')):
                                            var.get('stacks').callprop('push', var.get('cleanStack')(var.get('trace').get('stack').callprop('split', Js('\n'))))
                                            var.put('trace', var.get('trace').get('_parent'))
                                        var.get('removeCommonRoots')(var.get('stacks'))
                                        var.get('removeDuplicateOrEmptyJumps')(var.get('stacks'))
                                        var.get('util').callprop('notEnumerableProp', var.get('error'), Js('stack'), var.get('reconstructStack')(var.get('message'), var.get('stacks')))
                                        var.get('util').callprop('notEnumerableProp', var.get('error'), Js('__stackCleaned__'), Js(True))
                                    PyJs_anonymous_219_._set_name('anonymous')
                                    var.get('CapturedTrace').get('prototype').put('attachExtraTrace', PyJs_anonymous_219_)
                                    @Js
                                    def PyJs_stackDetection_220_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments, 'stackDetection':PyJs_stackDetection_220_}, var)
                                        var.registers(['v8stackFormatter', 'hasStackAfterThrow', 'err', 'captureStackTrace', 'v8stackFramePattern'])
                                        var.put('v8stackFramePattern', JsRegExp('/^\\s*at\\s*/'))
                                        @Js
                                        def PyJs_v8stackFormatter_221_(stack, error, this, arguments, var=var):
                                            var = Scope({'stack':stack, 'error':error, 'this':this, 'arguments':arguments, 'v8stackFormatter':PyJs_v8stackFormatter_221_}, var)
                                            var.registers(['error', 'stack'])
                                            if PyJsStrictEq(var.get('stack',throw=False).typeof(),Js('string')):
                                                return var.get('stack')
                                            if (PyJsStrictNeq(var.get('error').get('name'),var.get('undefined')) and PyJsStrictNeq(var.get('error').get('message'),var.get('undefined'))):
                                                return var.get('error').callprop('toString')
                                            return var.get('formatNonError')(var.get('error'))
                                        PyJs_v8stackFormatter_221_._set_name('v8stackFormatter')
                                        var.put('v8stackFormatter', PyJs_v8stackFormatter_221_)
                                        if (PyJsStrictEq(var.get('Error').get('stackTraceLimit').typeof(),Js('number')) and PyJsStrictEq(var.get('Error').get('captureStackTrace').typeof(),Js('function'))):
                                            var.get('Error').put('stackTraceLimit', Js(6.0), '+')
                                            var.put('stackFramePattern', var.get('v8stackFramePattern'))
                                            var.put('formatStack', var.get('v8stackFormatter'))
                                            var.put('captureStackTrace', var.get('Error').get('captureStackTrace'))
                                            @Js
                                            def PyJs_shouldIgnore_222_(line, this, arguments, var=var):
                                                var = Scope({'line':line, 'this':this, 'arguments':arguments, 'shouldIgnore':PyJs_shouldIgnore_222_}, var)
                                                var.registers(['line'])
                                                return var.get('bluebirdFramePattern').callprop('test', var.get('line'))
                                            PyJs_shouldIgnore_222_._set_name('shouldIgnore')
                                            var.put('shouldIgnore', PyJs_shouldIgnore_222_)
                                            @Js
                                            def PyJs_anonymous_223_(receiver, ignoreUntil, this, arguments, var=var):
                                                var = Scope({'receiver':receiver, 'ignoreUntil':ignoreUntil, 'this':this, 'arguments':arguments}, var)
                                                var.registers(['receiver', 'ignoreUntil'])
                                                var.get('Error').put('stackTraceLimit', Js(6.0), '+')
                                                var.get('captureStackTrace')(var.get('receiver'), var.get('ignoreUntil'))
                                                var.get('Error').put('stackTraceLimit', Js(6.0), '-')
                                            PyJs_anonymous_223_._set_name('anonymous')
                                            return PyJs_anonymous_223_
                                        var.put('err', var.get('Error').create())
                                        if (PyJsStrictEq(var.get('err').get('stack').typeof(),Js('string')) and (var.get('err').get('stack').callprop('split', Js('\n')).get('0').callprop('indexOf', Js('stackDetection@'))>=Js(0.0))):
                                            var.put('stackFramePattern', JsRegExp('/@/'))
                                            var.put('formatStack', var.get('v8stackFormatter'))
                                            var.put('indentStackFrames', Js(True))
                                            @Js
                                            def PyJs_captureStackTrace_224_(o, this, arguments, var=var):
                                                var = Scope({'o':o, 'this':this, 'arguments':arguments, 'captureStackTrace':PyJs_captureStackTrace_224_}, var)
                                                var.registers(['o'])
                                                var.get('o').put('stack', var.get('Error').create().get('stack'))
                                            PyJs_captureStackTrace_224_._set_name('captureStackTrace')
                                            return PyJs_captureStackTrace_224_
                                        pass
                                        try:
                                            PyJsTempException = JsToPyException(var.get('Error').create())
                                            raise PyJsTempException
                                        except PyJsException as PyJsTempException:
                                            PyJsHolder_65_42458283 = var.own.get('e')
                                            var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                                            try:
                                                var.put('hasStackAfterThrow', var.get('e').contains(Js('stack')))
                                            finally:
                                                if PyJsHolder_65_42458283 is not None:
                                                    var.own['e'] = PyJsHolder_65_42458283
                                                else:
                                                    del var.own['e']
                                                del PyJsHolder_65_42458283
                                        if ((var.get('err').contains(Js('stack')).neg() and var.get('hasStackAfterThrow')) and PyJsStrictEq(var.get('Error').get('stackTraceLimit').typeof(),Js('number'))):
                                            var.put('stackFramePattern', var.get('v8stackFramePattern'))
                                            var.put('formatStack', var.get('v8stackFormatter'))
                                            @Js
                                            def PyJs_captureStackTrace_225_(o, this, arguments, var=var):
                                                var = Scope({'o':o, 'this':this, 'arguments':arguments, 'captureStackTrace':PyJs_captureStackTrace_225_}, var)
                                                var.registers(['o'])
                                                var.get('Error').put('stackTraceLimit', Js(6.0), '+')
                                                try:
                                                    PyJsTempException = JsToPyException(var.get('Error').create())
                                                    raise PyJsTempException
                                                except PyJsException as PyJsTempException:
                                                    PyJsHolder_65_76359502 = var.own.get('e')
                                                    var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                                                    try:
                                                        var.get('o').put('stack', var.get('e').get('stack'))
                                                    finally:
                                                        if PyJsHolder_65_76359502 is not None:
                                                            var.own['e'] = PyJsHolder_65_76359502
                                                        else:
                                                            del var.own['e']
                                                        del PyJsHolder_65_76359502
                                                var.get('Error').put('stackTraceLimit', Js(6.0), '-')
                                            PyJs_captureStackTrace_225_._set_name('captureStackTrace')
                                            return PyJs_captureStackTrace_225_
                                        @Js
                                        def PyJs_formatStack_226_(stack, error, this, arguments, var=var):
                                            var = Scope({'stack':stack, 'error':error, 'this':this, 'arguments':arguments, 'formatStack':PyJs_formatStack_226_}, var)
                                            var.registers(['error', 'stack'])
                                            if PyJsStrictEq(var.get('stack',throw=False).typeof(),Js('string')):
                                                return var.get('stack')
                                            if (((PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('error',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('error'))),Js('object')) or PyJsStrictEq(var.get('error',throw=False).typeof(),Js('function'))) and PyJsStrictNeq(var.get('error').get('name'),var.get('undefined'))) and PyJsStrictNeq(var.get('error').get('message'),var.get('undefined'))):
                                                return var.get('error').callprop('toString')
                                            return var.get('formatNonError')(var.get('error'))
                                        PyJs_formatStack_226_._set_name('formatStack')
                                        var.put('formatStack', PyJs_formatStack_226_)
                                        return var.get(u"null")
                                    PyJs_stackDetection_220_._set_name('stackDetection')
                                    var.put('captureStackTrace', PyJs_stackDetection_220_(Js([])))
                                    if (PyJsStrictNeq(var.get('console',throw=False).typeof(),Js('undefined')) and PyJsStrictNeq(var.get('console').get('warn').typeof(),Js('undefined'))):
                                        @Js
                                        def PyJs_printWarning_227_(message, this, arguments, var=var):
                                            var = Scope({'message':message, 'this':this, 'arguments':arguments, 'printWarning':PyJs_printWarning_227_}, var)
                                            var.registers(['message'])
                                            var.get('console').callprop('warn', var.get('message'))
                                        PyJs_printWarning_227_._set_name('printWarning')
                                        var.put('printWarning', PyJs_printWarning_227_)
                                        if (var.get('util').get('isNode') and var.get('process').get('stderr').get('isTTY')):
                                            @Js
                                            def PyJs_printWarning_228_(message, isSoft, this, arguments, var=var):
                                                var = Scope({'message':message, 'isSoft':isSoft, 'this':this, 'arguments':arguments, 'printWarning':PyJs_printWarning_228_}, var)
                                                var.registers(['color', 'message', 'isSoft'])
                                                var.put('color', (Js('\x1b[33m') if var.get('isSoft') else Js('\x1b[31m')))
                                                var.get('console').callprop('warn', ((var.get('color')+var.get('message'))+Js('\x1b[0m\n')))
                                            PyJs_printWarning_228_._set_name('printWarning')
                                            var.put('printWarning', PyJs_printWarning_228_)
                                        else:
                                            if (var.get('util').get('isNode').neg() and PyJsStrictEq(var.get('Error').create().get('stack').typeof(),Js('string'))):
                                                @Js
                                                def PyJs_printWarning_229_(message, isSoft, this, arguments, var=var):
                                                    var = Scope({'message':message, 'isSoft':isSoft, 'this':this, 'arguments':arguments, 'printWarning':PyJs_printWarning_229_}, var)
                                                    var.registers(['message', 'isSoft'])
                                                    var.get('console').callprop('warn', (Js('%c')+var.get('message')), (Js('color: darkorange') if var.get('isSoft') else Js('color: red')))
                                                PyJs_printWarning_229_._set_name('printWarning')
                                                var.put('printWarning', PyJs_printWarning_229_)
                                    var.put('config', Js({'warnings':var.get('warnings'),'longStackTraces':Js(False),'cancellation':Js(False),'monitoring':Js(False),'asyncHooks':Js(False)}))
                                    if var.get('longStackTraces'):
                                        var.get('Promise').callprop('longStackTraces')
                                    @Js
                                    def PyJs_asyncHooks_230_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments, 'asyncHooks':PyJs_asyncHooks_230_}, var)
                                        var.registers([])
                                        return var.get('config').get('asyncHooks')
                                    PyJs_asyncHooks_230_._set_name('asyncHooks')
                                    @Js
                                    def PyJs_longStackTraces_231_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments, 'longStackTraces':PyJs_longStackTraces_231_}, var)
                                        var.registers([])
                                        return var.get('config').get('longStackTraces')
                                    PyJs_longStackTraces_231_._set_name('longStackTraces')
                                    @Js
                                    def PyJs_warnings_232_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments, 'warnings':PyJs_warnings_232_}, var)
                                        var.registers([])
                                        return var.get('config').get('warnings')
                                    PyJs_warnings_232_._set_name('warnings')
                                    @Js
                                    def PyJs_cancellation_233_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments, 'cancellation':PyJs_cancellation_233_}, var)
                                        var.registers([])
                                        return var.get('config').get('cancellation')
                                    PyJs_cancellation_233_._set_name('cancellation')
                                    @Js
                                    def PyJs_monitoring_234_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments, 'monitoring':PyJs_monitoring_234_}, var)
                                        var.registers([])
                                        return var.get('config').get('monitoring')
                                    PyJs_monitoring_234_._set_name('monitoring')
                                    @Js
                                    def PyJs_propagateFromFunction_235_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments, 'propagateFromFunction':PyJs_propagateFromFunction_235_}, var)
                                        var.registers([])
                                        return var.get('_propagateFromFunction')
                                    PyJs_propagateFromFunction_235_._set_name('propagateFromFunction')
                                    @Js
                                    def PyJs_boundValueFunction_236_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments, 'boundValueFunction':PyJs_boundValueFunction_236_}, var)
                                        var.registers([])
                                        return var.get('_boundValueFunction')
                                    PyJs_boundValueFunction_236_._set_name('boundValueFunction')
                                    return Js({'asyncHooks':PyJs_asyncHooks_230_,'longStackTraces':PyJs_longStackTraces_231_,'warnings':PyJs_warnings_232_,'cancellation':PyJs_cancellation_233_,'monitoring':PyJs_monitoring_234_,'propagateFromFunction':PyJs_propagateFromFunction_235_,'boundValueFunction':PyJs_boundValueFunction_236_,'checkForgottenReturns':var.get('checkForgottenReturns'),'setBounds':var.get('setBounds'),'warn':var.get('warn'),'deprecated':var.get('deprecated'),'CapturedTrace':var.get('CapturedTrace'),'fireDomEvent':var.get('fireDomEvent'),'fireGlobalEvent':var.get('fireGlobalEvent')})
                                PyJs_anonymous_165_._set_name('anonymous')
                                var.get('module').put('exports', PyJs_anonymous_165_)
                            PyJs_anonymous_164_._set_name('anonymous')
                            @Js
                            def PyJs_anonymous_237_(_dereq_, module, exports, this, arguments, var=var):
                                var = Scope({'_dereq_':_dereq_, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
                                var.registers(['exports', 'module', '_dereq_'])
                                Js('use strict')
                                @Js
                                def PyJs_anonymous_238_(Promise, this, arguments, var=var):
                                    var = Scope({'Promise':Promise, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['Promise', 'returner', 'thrower'])
                                    @Js
                                    def PyJsHoisted_returner_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return var.get(u"this").get('value')
                                    PyJsHoisted_returner_.func_name = 'returner'
                                    var.put('returner', PyJsHoisted_returner_)
                                    @Js
                                    def PyJsHoisted_thrower_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        PyJsTempException = JsToPyException(var.get(u"this").get('reason'))
                                        raise PyJsTempException
                                    PyJsHoisted_thrower_.func_name = 'thrower'
                                    var.put('thrower', PyJsHoisted_thrower_)
                                    pass
                                    pass
                                    @Js
                                    def PyJs_anonymous_239_(value, this, arguments, var=var):
                                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['value'])
                                        if var.get('value').instanceof(var.get('Promise')):
                                            var.get('value').callprop('suppressUnhandledRejections')
                                        return var.get(u"this").callprop('_then', var.get('returner'), var.get('undefined'), var.get('undefined'), Js({'value':var.get('value')}), var.get('undefined'))
                                    PyJs_anonymous_239_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('return', var.get('Promise').get('prototype').put('thenReturn', PyJs_anonymous_239_))
                                    @Js
                                    def PyJs_anonymous_240_(reason, this, arguments, var=var):
                                        var = Scope({'reason':reason, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['reason'])
                                        return var.get(u"this").callprop('_then', var.get('thrower'), var.get('undefined'), var.get('undefined'), Js({'reason':var.get('reason')}), var.get('undefined'))
                                    PyJs_anonymous_240_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('throw', var.get('Promise').get('prototype').put('thenThrow', PyJs_anonymous_240_))
                                    @Js
                                    def PyJs_anonymous_241_(reason, this, arguments, var=var):
                                        var = Scope({'reason':reason, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['reason', '_reason', 'handler'])
                                        if (var.get('arguments').get('length')<=Js(1.0)):
                                            return var.get(u"this").callprop('_then', var.get('undefined'), var.get('thrower'), var.get('undefined'), Js({'reason':var.get('reason')}), var.get('undefined'))
                                        else:
                                            var.put('_reason', var.get('arguments').get('1'))
                                            @Js
                                            def PyJs_handler_242_(this, arguments, var=var):
                                                var = Scope({'this':this, 'arguments':arguments, 'handler':PyJs_handler_242_}, var)
                                                var.registers([])
                                                PyJsTempException = JsToPyException(var.get('_reason'))
                                                raise PyJsTempException
                                            PyJs_handler_242_._set_name('handler')
                                            var.put('handler', PyJs_handler_242_)
                                            return var.get(u"this").callprop('caught', var.get('reason'), var.get('handler'))
                                    PyJs_anonymous_241_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('catchThrow', PyJs_anonymous_241_)
                                    @Js
                                    def PyJs_anonymous_243_(value, this, arguments, var=var):
                                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['value', 'handler', '_value'])
                                        if (var.get('arguments').get('length')<=Js(1.0)):
                                            if var.get('value').instanceof(var.get('Promise')):
                                                var.get('value').callprop('suppressUnhandledRejections')
                                            return var.get(u"this").callprop('_then', var.get('undefined'), var.get('returner'), var.get('undefined'), Js({'value':var.get('value')}), var.get('undefined'))
                                        else:
                                            var.put('_value', var.get('arguments').get('1'))
                                            if var.get('_value').instanceof(var.get('Promise')):
                                                var.get('_value').callprop('suppressUnhandledRejections')
                                            @Js
                                            def PyJs_handler_244_(this, arguments, var=var):
                                                var = Scope({'this':this, 'arguments':arguments, 'handler':PyJs_handler_244_}, var)
                                                var.registers([])
                                                return var.get('_value')
                                            PyJs_handler_244_._set_name('handler')
                                            var.put('handler', PyJs_handler_244_)
                                            return var.get(u"this").callprop('caught', var.get('value'), var.get('handler'))
                                    PyJs_anonymous_243_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('catchReturn', PyJs_anonymous_243_)
                                PyJs_anonymous_238_._set_name('anonymous')
                                var.get('module').put('exports', PyJs_anonymous_238_)
                            PyJs_anonymous_237_._set_name('anonymous')
                            @Js
                            def PyJs_anonymous_245_(_dereq_, module, exports, this, arguments, var=var):
                                var = Scope({'_dereq_':_dereq_, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
                                var.registers(['exports', 'module', '_dereq_'])
                                Js('use strict')
                                @Js
                                def PyJs_anonymous_246_(Promise, INTERNAL, this, arguments, var=var):
                                    var = Scope({'Promise':Promise, 'INTERNAL':INTERNAL, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['promiseAllThis', 'INTERNAL', 'PromiseMapSeries', 'Promise', 'PromiseReduce', 'PromiseAll'])
                                    @Js
                                    def PyJsHoisted_promiseAllThis_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return var.get('PromiseAll')(var.get(u"this"))
                                    PyJsHoisted_promiseAllThis_.func_name = 'promiseAllThis'
                                    var.put('promiseAllThis', PyJsHoisted_promiseAllThis_)
                                    @Js
                                    def PyJsHoisted_PromiseMapSeries_(promises, fn, this, arguments, var=var):
                                        var = Scope({'promises':promises, 'fn':fn, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['promises', 'fn'])
                                        return var.get('PromiseReduce')(var.get('promises'), var.get('fn'), var.get('INTERNAL'), var.get('INTERNAL'))
                                    PyJsHoisted_PromiseMapSeries_.func_name = 'PromiseMapSeries'
                                    var.put('PromiseMapSeries', PyJsHoisted_PromiseMapSeries_)
                                    var.put('PromiseReduce', var.get('Promise').get('reduce'))
                                    var.put('PromiseAll', var.get('Promise').get('all'))
                                    pass
                                    pass
                                    @Js
                                    def PyJs_anonymous_247_(fn, this, arguments, var=var):
                                        var = Scope({'fn':fn, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['fn'])
                                        return var.get('PromiseReduce')(var.get(u"this"), var.get('fn'), var.get('INTERNAL'), Js(0.0)).callprop('_then', var.get('promiseAllThis'), var.get('undefined'), var.get('undefined'), var.get(u"this"), var.get('undefined'))
                                    PyJs_anonymous_247_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('each', PyJs_anonymous_247_)
                                    @Js
                                    def PyJs_anonymous_248_(fn, this, arguments, var=var):
                                        var = Scope({'fn':fn, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['fn'])
                                        return var.get('PromiseReduce')(var.get(u"this"), var.get('fn'), var.get('INTERNAL'), var.get('INTERNAL'))
                                    PyJs_anonymous_248_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('mapSeries', PyJs_anonymous_248_)
                                    @Js
                                    def PyJs_anonymous_249_(promises, fn, this, arguments, var=var):
                                        var = Scope({'promises':promises, 'fn':fn, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['promises', 'fn'])
                                        return var.get('PromiseReduce')(var.get('promises'), var.get('fn'), var.get('INTERNAL'), Js(0.0)).callprop('_then', var.get('promiseAllThis'), var.get('undefined'), var.get('undefined'), var.get('promises'), var.get('undefined'))
                                    PyJs_anonymous_249_._set_name('anonymous')
                                    var.get('Promise').put('each', PyJs_anonymous_249_)
                                    var.get('Promise').put('mapSeries', var.get('PromiseMapSeries'))
                                PyJs_anonymous_246_._set_name('anonymous')
                                var.get('module').put('exports', PyJs_anonymous_246_)
                            PyJs_anonymous_245_._set_name('anonymous')
                            @Js
                            def PyJs_anonymous_250_(_dereq_, module, exports, this, arguments, var=var):
                                var = Scope({'_dereq_':_dereq_, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
                                var.registers(['i', 'inherits', 'util', '_TypeError', 'es5', 'AggregateError', 'level', 'subError', 'CancellationError', '_dereq_', 'methods', 'Objectfreeze', 'OperationalError', 'Warning', '_RangeError', 'module', 'notEnumerableProp', 'exports', 'errorTypes', 'TimeoutError'])
                                @Js
                                def PyJsHoisted_subError_(nameProperty, defaultMessage, this, arguments, var=var):
                                    var = Scope({'nameProperty':nameProperty, 'defaultMessage':defaultMessage, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['SubError', 'nameProperty', 'defaultMessage'])
                                    @Js
                                    def PyJsHoisted_SubError_(message, this, arguments, var=var):
                                        var = Scope({'message':message, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['message'])
                                        if var.get(u"this").instanceof(var.get('SubError')).neg():
                                            return var.get('SubError').create(var.get('message'))
                                        var.get('notEnumerableProp')(var.get(u"this"), Js('message'), (var.get('message') if PyJsStrictEq(var.get('message',throw=False).typeof(),Js('string')) else var.get('defaultMessage')))
                                        var.get('notEnumerableProp')(var.get(u"this"), Js('name'), var.get('nameProperty'))
                                        if var.get('Error').get('captureStackTrace'):
                                            var.get('Error').callprop('captureStackTrace', var.get(u"this"), var.get(u"this").get('constructor'))
                                        else:
                                            var.get('Error').callprop('call', var.get(u"this"))
                                    PyJsHoisted_SubError_.func_name = 'SubError'
                                    var.put('SubError', PyJsHoisted_SubError_)
                                    pass
                                    var.get('inherits')(var.get('SubError'), var.get('Error'))
                                    return var.get('SubError')
                                PyJsHoisted_subError_.func_name = 'subError'
                                var.put('subError', PyJsHoisted_subError_)
                                @Js
                                def PyJsHoisted_OperationalError_(message, this, arguments, var=var):
                                    var = Scope({'message':message, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['message'])
                                    if var.get(u"this").instanceof(var.get('OperationalError')).neg():
                                        return var.get('OperationalError').create(var.get('message'))
                                    var.get('notEnumerableProp')(var.get(u"this"), Js('name'), Js('OperationalError'))
                                    var.get('notEnumerableProp')(var.get(u"this"), Js('message'), var.get('message'))
                                    var.get(u"this").put('cause', var.get('message'))
                                    var.get(u"this").put('isOperational', Js(True))
                                    if var.get('message').instanceof(var.get('Error')):
                                        var.get('notEnumerableProp')(var.get(u"this"), Js('message'), var.get('message').get('message'))
                                        var.get('notEnumerableProp')(var.get(u"this"), Js('stack'), var.get('message').get('stack'))
                                    else:
                                        if var.get('Error').get('captureStackTrace'):
                                            var.get('Error').callprop('captureStackTrace', var.get(u"this"), var.get(u"this").get('constructor'))
                                PyJsHoisted_OperationalError_.func_name = 'OperationalError'
                                var.put('OperationalError', PyJsHoisted_OperationalError_)
                                Js('use strict')
                                var.put('es5', var.get('_dereq_')(Js('./es5')))
                                var.put('Objectfreeze', var.get('es5').get('freeze'))
                                var.put('util', var.get('_dereq_')(Js('./util')))
                                var.put('inherits', var.get('util').get('inherits'))
                                var.put('notEnumerableProp', var.get('util').get('notEnumerableProp'))
                                pass
                                pass
                                var.put('Warning', var.get('subError')(Js('Warning'), Js('warning')))
                                var.put('CancellationError', var.get('subError')(Js('CancellationError'), Js('cancellation error')))
                                var.put('TimeoutError', var.get('subError')(Js('TimeoutError'), Js('timeout error')))
                                var.put('AggregateError', var.get('subError')(Js('AggregateError'), Js('aggregate error')))
                                try:
                                    var.put('_TypeError', var.get('TypeError'))
                                    var.put('_RangeError', var.get('RangeError'))
                                except PyJsException as PyJsTempException:
                                    PyJsHolder_65_25939948 = var.own.get('e')
                                    var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                                    try:
                                        var.put('_TypeError', var.get('subError')(Js('TypeError'), Js('type error')))
                                        var.put('_RangeError', var.get('subError')(Js('RangeError'), Js('range error')))
                                    finally:
                                        if PyJsHolder_65_25939948 is not None:
                                            var.own['e'] = PyJsHolder_65_25939948
                                        else:
                                            del var.own['e']
                                        del PyJsHolder_65_25939948
                                var.put('methods', (Js('join pop push shift unshift slice filter forEach some ')+Js('every map indexOf lastIndexOf reduce reduceRight sort reverse')).callprop('split', Js(' ')))
                                #for JS loop
                                var.put('i', Js(0.0))
                                while (var.get('i')<var.get('methods').get('length')):
                                    try:
                                        if PyJsStrictEq(var.get('Array').get('prototype').get(var.get('methods').get(var.get('i'))).typeof(),Js('function')):
                                            var.get('AggregateError').get('prototype').put(var.get('methods').get(var.get('i')), var.get('Array').get('prototype').get(var.get('methods').get(var.get('i'))))
                                    finally:
                                            var.put('i',Js(var.get('i').to_number())+Js(1))
                                var.get('es5').callprop('defineProperty', var.get('AggregateError').get('prototype'), Js('length'), Js({'value':Js(0.0),'configurable':Js(False),'writable':Js(True),'enumerable':Js(True)}))
                                var.get('AggregateError').get('prototype').put('isOperational', Js(True))
                                var.put('level', Js(0.0))
                                @Js
                                def PyJs_anonymous_251_(this, arguments, var=var):
                                    var = Scope({'this':this, 'arguments':arguments}, var)
                                    var.registers(['i', 'lines', 'str', 'ret', 'j', 'indent'])
                                    var.put('indent', var.get('Array')(((var.get('level')*Js(4.0))+Js(1.0))).callprop('join', Js(' ')))
                                    var.put('ret', (((Js('\n')+var.get('indent'))+Js('AggregateError of:'))+Js('\n')))
                                    (var.put('level',Js(var.get('level').to_number())+Js(1))-Js(1))
                                    var.put('indent', var.get('Array')(((var.get('level')*Js(4.0))+Js(1.0))).callprop('join', Js(' ')))
                                    #for JS loop
                                    var.put('i', Js(0.0))
                                    while (var.get('i')<var.get(u"this").get('length')):
                                        try:
                                            var.put('str', (Js('[Circular AggregateError]') if PyJsStrictEq(var.get(u"this").get(var.get('i')),var.get(u"this")) else (var.get(u"this").get(var.get('i'))+Js(''))))
                                            var.put('lines', var.get('str').callprop('split', Js('\n')))
                                            #for JS loop
                                            var.put('j', Js(0.0))
                                            while (var.get('j')<var.get('lines').get('length')):
                                                try:
                                                    var.get('lines').put(var.get('j'), (var.get('indent')+var.get('lines').get(var.get('j'))))
                                                finally:
                                                        var.put('j',Js(var.get('j').to_number())+Js(1))
                                            var.put('str', var.get('lines').callprop('join', Js('\n')))
                                            var.put('ret', (var.get('str')+Js('\n')), '+')
                                        finally:
                                                var.put('i',Js(var.get('i').to_number())+Js(1))
                                    (var.put('level',Js(var.get('level').to_number())-Js(1))+Js(1))
                                    return var.get('ret')
                                PyJs_anonymous_251_._set_name('anonymous')
                                var.get('AggregateError').get('prototype').put('toString', PyJs_anonymous_251_)
                                pass
                                var.get('inherits')(var.get('OperationalError'), var.get('Error'))
                                var.put('errorTypes', var.get('Error').get('__BluebirdErrorTypes__'))
                                if var.get('errorTypes').neg():
                                    var.put('errorTypes', var.get('Objectfreeze')(Js({'CancellationError':var.get('CancellationError'),'TimeoutError':var.get('TimeoutError'),'OperationalError':var.get('OperationalError'),'RejectionError':var.get('OperationalError'),'AggregateError':var.get('AggregateError')})))
                                    var.get('es5').callprop('defineProperty', var.get('Error'), Js('__BluebirdErrorTypes__'), Js({'value':var.get('errorTypes'),'writable':Js(False),'enumerable':Js(False),'configurable':Js(False)}))
                                def PyJs_LONG_252_(var=var):
                                    return var.get('module').put('exports', Js({'Error':var.get('Error'),'TypeError':var.get('_TypeError'),'RangeError':var.get('_RangeError'),'CancellationError':var.get('errorTypes').get('CancellationError'),'OperationalError':var.get('errorTypes').get('OperationalError'),'TimeoutError':var.get('errorTypes').get('TimeoutError'),'AggregateError':var.get('errorTypes').get('AggregateError'),'Warning':var.get('Warning')}))
                                PyJs_LONG_252_()
                            PyJs_anonymous_250_._set_name('anonymous')
                            @Js
                            def PyJs_anonymous_253_(_dereq_, module, exports, this, arguments, var=var):
                                var = Scope({'_dereq_':_dereq_, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
                                var.registers(['has', 'module', '_dereq_', 'ArrayIsArray', 'str', 'ObjectGetDescriptor', 'exports', 'ObjectFreeze', 'isES5', 'proto', 'ObjectKeys', 'ObjectDefineProperty', 'ObjectGetPrototypeOf'])
                                @Js
                                def PyJs_anonymous_254_(this, arguments, var=var):
                                    var = Scope({'this':this, 'arguments':arguments}, var)
                                    var.registers([])
                                    Js('use strict')
                                    return PyJsStrictEq(var.get(u"this"),var.get('undefined'))
                                PyJs_anonymous_254_._set_name('anonymous')
                                var.put('isES5', PyJs_anonymous_254_())
                                if var.get('isES5'):
                                    def PyJs_LONG_256_(var=var):
                                        @Js
                                        def PyJs_propertyIsWritable_255_(obj, prop, this, arguments, var=var):
                                            var = Scope({'obj':obj, 'prop':prop, 'this':this, 'arguments':arguments, 'propertyIsWritable':PyJs_propertyIsWritable_255_}, var)
                                            var.registers(['prop', 'descriptor', 'obj'])
                                            var.put('descriptor', var.get('Object').callprop('getOwnPropertyDescriptor', var.get('obj'), var.get('prop')))
                                            return ((var.get('descriptor').neg() or var.get('descriptor').get('writable')) or var.get('descriptor').get('set')).neg().neg()
                                        PyJs_propertyIsWritable_255_._set_name('propertyIsWritable')
                                        return var.get('module').put('exports', Js({'freeze':var.get('Object').get('freeze'),'defineProperty':var.get('Object').get('defineProperty'),'getDescriptor':var.get('Object').get('getOwnPropertyDescriptor'),'keys':var.get('Object').get('keys'),'names':var.get('Object').get('getOwnPropertyNames'),'getPrototypeOf':var.get('Object').get('getPrototypeOf'),'isArray':var.get('Array').get('isArray'),'isES5':var.get('isES5'),'propertyIsWritable':PyJs_propertyIsWritable_255_}))
                                    PyJs_LONG_256_()
                                else:
                                    var.put('has', Js({}).get('hasOwnProperty'))
                                    var.put('str', Js({}).get('toString'))
                                    var.put('proto', Js({}).get('constructor').get('prototype'))
                                    @Js
                                    def PyJs_ObjectKeys_257_(o, this, arguments, var=var):
                                        var = Scope({'o':o, 'this':this, 'arguments':arguments, 'ObjectKeys':PyJs_ObjectKeys_257_}, var)
                                        var.registers(['o', 'key', 'ret'])
                                        var.put('ret', Js([]))
                                        for PyJsTemp in var.get('o'):
                                            var.put('key', PyJsTemp)
                                            if var.get('has').callprop('call', var.get('o'), var.get('key')):
                                                var.get('ret').callprop('push', var.get('key'))
                                        return var.get('ret')
                                    PyJs_ObjectKeys_257_._set_name('ObjectKeys')
                                    var.put('ObjectKeys', PyJs_ObjectKeys_257_)
                                    @Js
                                    def PyJs_ObjectGetDescriptor_258_(o, key, this, arguments, var=var):
                                        var = Scope({'o':o, 'key':key, 'this':this, 'arguments':arguments, 'ObjectGetDescriptor':PyJs_ObjectGetDescriptor_258_}, var)
                                        var.registers(['o', 'key'])
                                        return Js({'value':var.get('o').get(var.get('key'))})
                                    PyJs_ObjectGetDescriptor_258_._set_name('ObjectGetDescriptor')
                                    var.put('ObjectGetDescriptor', PyJs_ObjectGetDescriptor_258_)
                                    @Js
                                    def PyJs_ObjectDefineProperty_259_(o, key, desc, this, arguments, var=var):
                                        var = Scope({'o':o, 'key':key, 'desc':desc, 'this':this, 'arguments':arguments, 'ObjectDefineProperty':PyJs_ObjectDefineProperty_259_}, var)
                                        var.registers(['o', 'key', 'desc'])
                                        var.get('o').put(var.get('key'), var.get('desc').get('value'))
                                        return var.get('o')
                                    PyJs_ObjectDefineProperty_259_._set_name('ObjectDefineProperty')
                                    var.put('ObjectDefineProperty', PyJs_ObjectDefineProperty_259_)
                                    @Js
                                    def PyJs_ObjectFreeze_260_(obj, this, arguments, var=var):
                                        var = Scope({'obj':obj, 'this':this, 'arguments':arguments, 'ObjectFreeze':PyJs_ObjectFreeze_260_}, var)
                                        var.registers(['obj'])
                                        return var.get('obj')
                                    PyJs_ObjectFreeze_260_._set_name('ObjectFreeze')
                                    var.put('ObjectFreeze', PyJs_ObjectFreeze_260_)
                                    @Js
                                    def PyJs_ObjectGetPrototypeOf_261_(obj, this, arguments, var=var):
                                        var = Scope({'obj':obj, 'this':this, 'arguments':arguments, 'ObjectGetPrototypeOf':PyJs_ObjectGetPrototypeOf_261_}, var)
                                        var.registers(['obj'])
                                        try:
                                            return var.get('Object')(var.get('obj')).get('constructor').get('prototype')
                                        except PyJsException as PyJsTempException:
                                            PyJsHolder_65_36237704 = var.own.get('e')
                                            var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                                            try:
                                                return var.get('proto')
                                            finally:
                                                if PyJsHolder_65_36237704 is not None:
                                                    var.own['e'] = PyJsHolder_65_36237704
                                                else:
                                                    del var.own['e']
                                                del PyJsHolder_65_36237704
                                    PyJs_ObjectGetPrototypeOf_261_._set_name('ObjectGetPrototypeOf')
                                    var.put('ObjectGetPrototypeOf', PyJs_ObjectGetPrototypeOf_261_)
                                    @Js
                                    def PyJs_ArrayIsArray_262_(obj, this, arguments, var=var):
                                        var = Scope({'obj':obj, 'this':this, 'arguments':arguments, 'ArrayIsArray':PyJs_ArrayIsArray_262_}, var)
                                        var.registers(['obj'])
                                        try:
                                            return PyJsStrictEq(var.get('str').callprop('call', var.get('obj')),Js('[object Array]'))
                                        except PyJsException as PyJsTempException:
                                            PyJsHolder_65_75064184 = var.own.get('e')
                                            var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                                            try:
                                                return Js(False)
                                            finally:
                                                if PyJsHolder_65_75064184 is not None:
                                                    var.own['e'] = PyJsHolder_65_75064184
                                                else:
                                                    del var.own['e']
                                                del PyJsHolder_65_75064184
                                    PyJs_ArrayIsArray_262_._set_name('ArrayIsArray')
                                    var.put('ArrayIsArray', PyJs_ArrayIsArray_262_)
                                    @Js
                                    def PyJs_propertyIsWritable_263_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments, 'propertyIsWritable':PyJs_propertyIsWritable_263_}, var)
                                        var.registers([])
                                        return Js(True)
                                    PyJs_propertyIsWritable_263_._set_name('propertyIsWritable')
                                    var.get('module').put('exports', Js({'isArray':var.get('ArrayIsArray'),'keys':var.get('ObjectKeys'),'names':var.get('ObjectKeys'),'defineProperty':var.get('ObjectDefineProperty'),'getDescriptor':var.get('ObjectGetDescriptor'),'freeze':var.get('ObjectFreeze'),'getPrototypeOf':var.get('ObjectGetPrototypeOf'),'isES5':var.get('isES5'),'propertyIsWritable':PyJs_propertyIsWritable_263_}))
                            PyJs_anonymous_253_._set_name('anonymous')
                            @Js
                            def PyJs_anonymous_264_(_dereq_, module, exports, this, arguments, var=var):
                                var = Scope({'_dereq_':_dereq_, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
                                var.registers(['exports', 'module', '_dereq_'])
                                Js('use strict')
                                @Js
                                def PyJs_anonymous_265_(Promise, INTERNAL, this, arguments, var=var):
                                    var = Scope({'Promise':Promise, 'INTERNAL':INTERNAL, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['Promise', 'PromiseMap', 'INTERNAL'])
                                    var.put('PromiseMap', var.get('Promise').get('map'))
                                    @Js
                                    def PyJs_anonymous_266_(fn, options, this, arguments, var=var):
                                        var = Scope({'fn':fn, 'options':options, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['options', 'fn'])
                                        return var.get('PromiseMap')(var.get(u"this"), var.get('fn'), var.get('options'), var.get('INTERNAL'))
                                    PyJs_anonymous_266_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('filter', PyJs_anonymous_266_)
                                    @Js
                                    def PyJs_anonymous_267_(promises, fn, options, this, arguments, var=var):
                                        var = Scope({'promises':promises, 'fn':fn, 'options':options, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['options', 'promises', 'fn'])
                                        return var.get('PromiseMap')(var.get('promises'), var.get('fn'), var.get('options'), var.get('INTERNAL'))
                                    PyJs_anonymous_267_._set_name('anonymous')
                                    var.get('Promise').put('filter', PyJs_anonymous_267_)
                                PyJs_anonymous_265_._set_name('anonymous')
                                var.get('module').put('exports', PyJs_anonymous_265_)
                            PyJs_anonymous_264_._set_name('anonymous')
                            @Js
                            def PyJs_anonymous_268_(_dereq_, module, exports, this, arguments, var=var):
                                var = Scope({'_dereq_':_dereq_, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
                                var.registers(['exports', 'module', '_dereq_'])
                                Js('use strict')
                                @Js
                                def PyJs_anonymous_269_(Promise, tryConvertToPromise, NEXT_FILTER, this, arguments, var=var):
                                    var = Scope({'Promise':Promise, 'tryConvertToPromise':tryConvertToPromise, 'NEXT_FILTER':NEXT_FILTER, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['errorObj', 'CancellationError', 'catchFilter', 'util', 'succeed', 'fail', 'tryConvertToPromise', 'FinallyHandlerCancelReaction', 'Promise', 'checkCancel', 'PassThroughHandlerContext', 'finallyHandler', 'NEXT_FILTER'])
                                    @Js
                                    def PyJsHoisted_PassThroughHandlerContext_(promise, type, handler, this, arguments, var=var):
                                        var = Scope({'promise':promise, 'type':type, 'handler':handler, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['type', 'handler', 'promise'])
                                        var.get(u"this").put('promise', var.get('promise'))
                                        var.get(u"this").put('type', var.get('type'))
                                        var.get(u"this").put('handler', var.get('handler'))
                                        var.get(u"this").put('called', Js(False))
                                        var.get(u"this").put('cancelPromise', var.get(u"null"))
                                    PyJsHoisted_PassThroughHandlerContext_.func_name = 'PassThroughHandlerContext'
                                    var.put('PassThroughHandlerContext', PyJsHoisted_PassThroughHandlerContext_)
                                    @Js
                                    def PyJsHoisted_FinallyHandlerCancelReaction_(finallyHandler, this, arguments, var=var):
                                        var = Scope({'finallyHandler':finallyHandler, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['finallyHandler'])
                                        var.get(u"this").put('finallyHandler', var.get('finallyHandler'))
                                    PyJsHoisted_FinallyHandlerCancelReaction_.func_name = 'FinallyHandlerCancelReaction'
                                    var.put('FinallyHandlerCancelReaction', PyJsHoisted_FinallyHandlerCancelReaction_)
                                    @Js
                                    def PyJsHoisted_checkCancel_(ctx, reason, this, arguments, var=var):
                                        var = Scope({'ctx':ctx, 'reason':reason, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['ctx', 'reason'])
                                        if (var.get('ctx').get('cancelPromise')!=var.get(u"null")):
                                            if (var.get('arguments').get('length')>Js(1.0)):
                                                var.get('ctx').get('cancelPromise').callprop('_reject', var.get('reason'))
                                            else:
                                                var.get('ctx').get('cancelPromise').callprop('_cancel')
                                            var.get('ctx').put('cancelPromise', var.get(u"null"))
                                            return Js(True)
                                        return Js(False)
                                    PyJsHoisted_checkCancel_.func_name = 'checkCancel'
                                    var.put('checkCancel', PyJsHoisted_checkCancel_)
                                    @Js
                                    def PyJsHoisted_succeed_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return var.get('finallyHandler').callprop('call', var.get(u"this"), var.get(u"this").get('promise').callprop('_target').callprop('_settledValue'))
                                    PyJsHoisted_succeed_.func_name = 'succeed'
                                    var.put('succeed', PyJsHoisted_succeed_)
                                    @Js
                                    def PyJsHoisted_fail_(reason, this, arguments, var=var):
                                        var = Scope({'reason':reason, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['reason'])
                                        if var.get('checkCancel')(var.get(u"this"), var.get('reason')):
                                            return var.get('undefined')
                                        var.get('errorObj').put('e', var.get('reason'))
                                        return var.get('errorObj')
                                    PyJsHoisted_fail_.func_name = 'fail'
                                    var.put('fail', PyJsHoisted_fail_)
                                    @Js
                                    def PyJsHoisted_finallyHandler_(reasonOrValue, this, arguments, var=var):
                                        var = Scope({'reasonOrValue':reasonOrValue, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['ret', 'reason', 'reasonOrValue', 'handler', 'promise', 'maybePromise'])
                                        var.put('promise', var.get(u"this").get('promise'))
                                        var.put('handler', var.get(u"this").get('handler'))
                                        if var.get(u"this").get('called').neg():
                                            var.get(u"this").put('called', Js(True))
                                            var.put('ret', (var.get('handler').callprop('call', var.get('promise').callprop('_boundValue')) if var.get(u"this").callprop('isFinallyHandler') else var.get('handler').callprop('call', var.get('promise').callprop('_boundValue'), var.get('reasonOrValue'))))
                                            if PyJsStrictEq(var.get('ret'),var.get('NEXT_FILTER')):
                                                return var.get('ret')
                                            else:
                                                if PyJsStrictNeq(var.get('ret'),var.get('undefined')):
                                                    var.get('promise').callprop('_setReturnedNonUndefined')
                                                    var.put('maybePromise', var.get('tryConvertToPromise')(var.get('ret'), var.get('promise')))
                                                    if var.get('maybePromise').instanceof(var.get('Promise')):
                                                        if (var.get(u"this").get('cancelPromise')!=var.get(u"null")):
                                                            if var.get('maybePromise').callprop('_isCancelled'):
                                                                var.put('reason', var.get('CancellationError').create(Js('late cancellation observer')))
                                                                var.get('promise').callprop('_attachExtraTrace', var.get('reason'))
                                                                var.get('errorObj').put('e', var.get('reason'))
                                                                return var.get('errorObj')
                                                            else:
                                                                if var.get('maybePromise').callprop('isPending'):
                                                                    var.get('maybePromise').callprop('_attachCancellationCallback', var.get('FinallyHandlerCancelReaction').create(var.get(u"this")))
                                                        return var.get('maybePromise').callprop('_then', var.get('succeed'), var.get('fail'), var.get('undefined'), var.get(u"this"), var.get('undefined'))
                                        if var.get('promise').callprop('isRejected'):
                                            var.get('checkCancel')(var.get(u"this"))
                                            var.get('errorObj').put('e', var.get('reasonOrValue'))
                                            return var.get('errorObj')
                                        else:
                                            var.get('checkCancel')(var.get(u"this"))
                                            return var.get('reasonOrValue')
                                    PyJsHoisted_finallyHandler_.func_name = 'finallyHandler'
                                    var.put('finallyHandler', PyJsHoisted_finallyHandler_)
                                    var.put('util', var.get('_dereq_')(Js('./util')))
                                    var.put('CancellationError', var.get('Promise').get('CancellationError'))
                                    var.put('errorObj', var.get('util').get('errorObj'))
                                    var.put('catchFilter', var.get('_dereq_')(Js('./catch_filter'))(var.get('NEXT_FILTER')))
                                    pass
                                    @Js
                                    def PyJs_anonymous_270_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return PyJsStrictEq(var.get(u"this").get('type'),Js(0.0))
                                    PyJs_anonymous_270_._set_name('anonymous')
                                    var.get('PassThroughHandlerContext').get('prototype').put('isFinallyHandler', PyJs_anonymous_270_)
                                    pass
                                    @Js
                                    def PyJs_anonymous_271_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        var.get('checkCancel')(var.get(u"this").get('finallyHandler'))
                                    PyJs_anonymous_271_._set_name('anonymous')
                                    var.get('FinallyHandlerCancelReaction').get('prototype').put('_resultCancelled', PyJs_anonymous_271_)
                                    pass
                                    pass
                                    pass
                                    pass
                                    @Js
                                    def PyJs_anonymous_272_(handler, type, success, fail, this, arguments, var=var):
                                        var = Scope({'handler':handler, 'type':type, 'success':success, 'fail':fail, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['success', 'fail', 'type', 'handler'])
                                        if PyJsStrictNeq(var.get('handler',throw=False).typeof(),Js('function')):
                                            return var.get(u"this").callprop('then')
                                        return var.get(u"this").callprop('_then', var.get('success'), var.get('fail'), var.get('undefined'), var.get('PassThroughHandlerContext').create(var.get(u"this"), var.get('type'), var.get('handler')), var.get('undefined'))
                                    PyJs_anonymous_272_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_passThrough', PyJs_anonymous_272_)
                                    @Js
                                    def PyJs_anonymous_273_(handler, this, arguments, var=var):
                                        var = Scope({'handler':handler, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['handler'])
                                        return var.get(u"this").callprop('_passThrough', var.get('handler'), Js(0.0), var.get('finallyHandler'), var.get('finallyHandler'))
                                    PyJs_anonymous_273_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('lastly', var.get('Promise').get('prototype').put('finally', PyJs_anonymous_273_))
                                    @Js
                                    def PyJs_anonymous_274_(handler, this, arguments, var=var):
                                        var = Scope({'handler':handler, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['handler'])
                                        return var.get(u"this").callprop('_passThrough', var.get('handler'), Js(1.0), var.get('finallyHandler'))
                                    PyJs_anonymous_274_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('tap', PyJs_anonymous_274_)
                                    @Js
                                    def PyJs_anonymous_275_(handlerOrPredicate, this, arguments, var=var):
                                        var = Scope({'handlerOrPredicate':handlerOrPredicate, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['len', 'i', 'handler', 'catchInstances', 'handlerOrPredicate', 'item', 'j'])
                                        var.put('len', var.get('arguments').get('length'))
                                        if PyJsStrictEq(var.get('len'),Js(1.0)):
                                            return var.get(u"this").callprop('_passThrough', var.get('handlerOrPredicate'), Js(1.0), var.get('undefined'), var.get('finallyHandler'))
                                        else:
                                            var.put('catchInstances', var.get('Array').create((var.get('len')-Js(1.0))))
                                            var.put('j', Js(0.0))
                                            #for JS loop
                                            var.put('i', Js(0.0))
                                            while (var.get('i')<(var.get('len')-Js(1.0))):
                                                try:
                                                    var.put('item', var.get('arguments').get(var.get('i')))
                                                    if var.get('util').callprop('isObject', var.get('item')):
                                                        var.get('catchInstances').put((var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1)), var.get('item'))
                                                    else:
                                                        return var.get('Promise').callprop('reject', var.get('TypeError').create(((Js('tapCatch statement predicate: ')+Js('expecting an object but got '))+var.get('util').callprop('classString', var.get('item')))))
                                                finally:
                                                        var.put('i',Js(var.get('i').to_number())+Js(1))
                                            var.get('catchInstances').put('length', var.get('j'))
                                            var.put('handler', var.get('arguments').get(var.get('i')))
                                            return var.get(u"this").callprop('_passThrough', var.get('catchFilter')(var.get('catchInstances'), var.get('handler'), var.get(u"this")), Js(1.0), var.get('undefined'), var.get('finallyHandler'))
                                    PyJs_anonymous_275_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('tapCatch', PyJs_anonymous_275_)
                                    return var.get('PassThroughHandlerContext')
                                PyJs_anonymous_269_._set_name('anonymous')
                                var.get('module').put('exports', PyJs_anonymous_269_)
                            PyJs_anonymous_268_._set_name('anonymous')
                            @Js
                            def PyJs_anonymous_276_(_dereq_, module, exports, this, arguments, var=var):
                                var = Scope({'_dereq_':_dereq_, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
                                var.registers(['exports', 'module', '_dereq_'])
                                Js('use strict')
                                @Js
                                def PyJs_anonymous_277_(Promise, apiRejection, INTERNAL, tryConvertToPromise, Proxyable, debug, this, arguments, var=var):
                                    var = Scope({'Promise':Promise, 'apiRejection':apiRejection, 'INTERNAL':INTERNAL, 'tryConvertToPromise':tryConvertToPromise, 'Proxyable':Proxyable, 'debug':debug, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['errorObj', 'TypeError', 'apiRejection', 'util', 'tryConvertToPromise', 'INTERNAL', 'Proxyable', 'debug', 'errors', 'Promise', 'tryCatch', 'PromiseSpawn', 'promiseFromYieldHandler', 'yieldHandlers'])
                                    @Js
                                    def PyJsHoisted_promiseFromYieldHandler_(value, yieldHandlers, traceParent, this, arguments, var=var):
                                        var = Scope({'value':value, 'yieldHandlers':yieldHandlers, 'traceParent':traceParent, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['i', 'ret', 'yieldHandlers', 'traceParent', 'result', 'maybePromise', 'value'])
                                        #for JS loop
                                        var.put('i', Js(0.0))
                                        while (var.get('i')<var.get('yieldHandlers').get('length')):
                                            try:
                                                var.get('traceParent').callprop('_pushContext')
                                                var.put('result', var.get('tryCatch')(var.get('yieldHandlers').get(var.get('i')))(var.get('value')))
                                                var.get('traceParent').callprop('_popContext')
                                                if PyJsStrictEq(var.get('result'),var.get('errorObj')):
                                                    var.get('traceParent').callprop('_pushContext')
                                                    var.put('ret', var.get('Promise').callprop('reject', var.get('errorObj').get('e')))
                                                    var.get('traceParent').callprop('_popContext')
                                                    return var.get('ret')
                                                var.put('maybePromise', var.get('tryConvertToPromise')(var.get('result'), var.get('traceParent')))
                                                if var.get('maybePromise').instanceof(var.get('Promise')):
                                                    return var.get('maybePromise')
                                            finally:
                                                    var.put('i',Js(var.get('i').to_number())+Js(1))
                                        return var.get(u"null")
                                    PyJsHoisted_promiseFromYieldHandler_.func_name = 'promiseFromYieldHandler'
                                    var.put('promiseFromYieldHandler', PyJsHoisted_promiseFromYieldHandler_)
                                    @Js
                                    def PyJsHoisted_PromiseSpawn_(generatorFunction, receiver, yieldHandler, stack, this, arguments, var=var):
                                        var = Scope({'generatorFunction':generatorFunction, 'receiver':receiver, 'yieldHandler':yieldHandler, 'stack':stack, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['generatorFunction', '_finallyPromise', 'yieldHandler', 'promise', 'internal', 'receiver', 'stack'])
                                        if var.get('debug').callprop('cancellation'):
                                            var.put('internal', var.get('Promise').create(var.get('INTERNAL')))
                                            var.put('_finallyPromise', var.get(u"this").put('_finallyPromise', var.get('Promise').create(var.get('INTERNAL'))))
                                            @Js
                                            def PyJs_anonymous_278_(this, arguments, var=var):
                                                var = Scope({'this':this, 'arguments':arguments}, var)
                                                var.registers([])
                                                return var.get('_finallyPromise')
                                            PyJs_anonymous_278_._set_name('anonymous')
                                            var.get(u"this").put('_promise', var.get('internal').callprop('lastly', PyJs_anonymous_278_))
                                            var.get('internal').callprop('_captureStackTrace')
                                            var.get('internal').callprop('_setOnCancel', var.get(u"this"))
                                        else:
                                            var.put('promise', var.get(u"this").put('_promise', var.get('Promise').create(var.get('INTERNAL'))))
                                            var.get('promise').callprop('_captureStackTrace')
                                        var.get(u"this").put('_stack', var.get('stack'))
                                        var.get(u"this").put('_generatorFunction', var.get('generatorFunction'))
                                        var.get(u"this").put('_receiver', var.get('receiver'))
                                        var.get(u"this").put('_generator', var.get('undefined'))
                                        var.get(u"this").put('_yieldHandlers', (Js([var.get('yieldHandler')]).callprop('concat', var.get('yieldHandlers')) if PyJsStrictEq(var.get('yieldHandler',throw=False).typeof(),Js('function')) else var.get('yieldHandlers')))
                                        var.get(u"this").put('_yieldedPromise', var.get(u"null"))
                                        var.get(u"this").put('_cancellationPhase', Js(False))
                                    PyJsHoisted_PromiseSpawn_.func_name = 'PromiseSpawn'
                                    var.put('PromiseSpawn', PyJsHoisted_PromiseSpawn_)
                                    var.put('errors', var.get('_dereq_')(Js('./errors')))
                                    var.put('TypeError', var.get('errors').get('TypeError'))
                                    var.put('util', var.get('_dereq_')(Js('./util')))
                                    var.put('errorObj', var.get('util').get('errorObj'))
                                    var.put('tryCatch', var.get('util').get('tryCatch'))
                                    var.put('yieldHandlers', Js([]))
                                    pass
                                    pass
                                    var.get('util').callprop('inherits', var.get('PromiseSpawn'), var.get('Proxyable'))
                                    @Js
                                    def PyJs_anonymous_279_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return PyJsStrictEq(var.get(u"this").get('_promise'),var.get(u"null"))
                                    PyJs_anonymous_279_._set_name('anonymous')
                                    var.get('PromiseSpawn').get('prototype').put('_isResolved', PyJs_anonymous_279_)
                                    @Js
                                    def PyJs_anonymous_280_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        var.get(u"this").put('_promise', var.get(u"this").put('_generator', var.get(u"null")))
                                        if (var.get('debug').callprop('cancellation') and PyJsStrictNeq(var.get(u"this").get('_finallyPromise'),var.get(u"null"))):
                                            var.get(u"this").get('_finallyPromise').callprop('_fulfill')
                                            var.get(u"this").put('_finallyPromise', var.get(u"null"))
                                    PyJs_anonymous_280_._set_name('anonymous')
                                    var.get('PromiseSpawn').get('prototype').put('_cleanup', PyJs_anonymous_280_)
                                    @Js
                                    def PyJs_anonymous_281_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers(['result', 'implementsReturn', 'reason'])
                                        if var.get(u"this").callprop('_isResolved'):
                                            return var.get('undefined')
                                        var.put('implementsReturn', PyJsStrictNeq(var.get(u"this").get('_generator').get('return').typeof(),Js('undefined')))
                                        pass
                                        if var.get('implementsReturn').neg():
                                            var.put('reason', var.get('Promise').get('CancellationError').create(Js('generator .return() sentinel')))
                                            var.get('Promise').get('coroutine').put('returnSentinel', var.get('reason'))
                                            var.get(u"this").get('_promise').callprop('_attachExtraTrace', var.get('reason'))
                                            var.get(u"this").get('_promise').callprop('_pushContext')
                                            var.put('result', var.get('tryCatch')(var.get(u"this").get('_generator').get('throw')).callprop('call', var.get(u"this").get('_generator'), var.get('reason')))
                                            var.get(u"this").get('_promise').callprop('_popContext')
                                        else:
                                            var.get(u"this").get('_promise').callprop('_pushContext')
                                            var.put('result', var.get('tryCatch')(var.get(u"this").get('_generator').get('return')).callprop('call', var.get(u"this").get('_generator'), var.get('undefined')))
                                            var.get(u"this").get('_promise').callprop('_popContext')
                                        var.get(u"this").put('_cancellationPhase', Js(True))
                                        var.get(u"this").put('_yieldedPromise', var.get(u"null"))
                                        var.get(u"this").callprop('_continue', var.get('result'))
                                    PyJs_anonymous_281_._set_name('anonymous')
                                    var.get('PromiseSpawn').get('prototype').put('_promiseCancelled', PyJs_anonymous_281_)
                                    @Js
                                    def PyJs_anonymous_282_(value, this, arguments, var=var):
                                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['result', 'value'])
                                        var.get(u"this").put('_yieldedPromise', var.get(u"null"))
                                        var.get(u"this").get('_promise').callprop('_pushContext')
                                        var.put('result', var.get('tryCatch')(var.get(u"this").get('_generator').get('next')).callprop('call', var.get(u"this").get('_generator'), var.get('value')))
                                        var.get(u"this").get('_promise').callprop('_popContext')
                                        var.get(u"this").callprop('_continue', var.get('result'))
                                    PyJs_anonymous_282_._set_name('anonymous')
                                    var.get('PromiseSpawn').get('prototype').put('_promiseFulfilled', PyJs_anonymous_282_)
                                    @Js
                                    def PyJs_anonymous_283_(reason, this, arguments, var=var):
                                        var = Scope({'reason':reason, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['result', 'reason'])
                                        var.get(u"this").put('_yieldedPromise', var.get(u"null"))
                                        var.get(u"this").get('_promise').callprop('_attachExtraTrace', var.get('reason'))
                                        var.get(u"this").get('_promise').callprop('_pushContext')
                                        var.put('result', var.get('tryCatch')(var.get(u"this").get('_generator').get('throw')).callprop('call', var.get(u"this").get('_generator'), var.get('reason')))
                                        var.get(u"this").get('_promise').callprop('_popContext')
                                        var.get(u"this").callprop('_continue', var.get('result'))
                                    PyJs_anonymous_283_._set_name('anonymous')
                                    var.get('PromiseSpawn').get('prototype').put('_promiseRejected', PyJs_anonymous_283_)
                                    @Js
                                    def PyJs_anonymous_284_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers(['promise'])
                                        if var.get(u"this").get('_yieldedPromise').instanceof(var.get('Promise')):
                                            var.put('promise', var.get(u"this").get('_yieldedPromise'))
                                            var.get(u"this").put('_yieldedPromise', var.get(u"null"))
                                            var.get('promise').callprop('cancel')
                                    PyJs_anonymous_284_._set_name('anonymous')
                                    var.get('PromiseSpawn').get('prototype').put('_resultCancelled', PyJs_anonymous_284_)
                                    @Js
                                    def PyJs_anonymous_285_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return var.get(u"this").get('_promise')
                                    PyJs_anonymous_285_._set_name('anonymous')
                                    var.get('PromiseSpawn').get('prototype').put('promise', PyJs_anonymous_285_)
                                    @Js
                                    def PyJs_anonymous_286_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        var.get(u"this").put('_generator', var.get(u"this").get('_generatorFunction').callprop('call', var.get(u"this").get('_receiver')))
                                        var.get(u"this").put('_receiver', var.get(u"this").put('_generatorFunction', var.get('undefined')))
                                        var.get(u"this").callprop('_promiseFulfilled', var.get('undefined'))
                                    PyJs_anonymous_286_._set_name('anonymous')
                                    var.get('PromiseSpawn').get('prototype').put('_run', PyJs_anonymous_286_)
                                    @Js
                                    def PyJs_anonymous_287_(result, this, arguments, var=var):
                                        var = Scope({'result':result, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['promise', 'bitField', 'result', 'maybePromise', 'value'])
                                        var.put('promise', var.get(u"this").get('_promise'))
                                        if PyJsStrictEq(var.get('result'),var.get('errorObj')):
                                            var.get(u"this").callprop('_cleanup')
                                            if var.get(u"this").get('_cancellationPhase'):
                                                return var.get('promise').callprop('cancel')
                                            else:
                                                return var.get('promise').callprop('_rejectCallback', var.get('result').get('e'), Js(False))
                                        var.put('value', var.get('result').get('value'))
                                        if PyJsStrictEq(var.get('result').get('done'),Js(True)):
                                            var.get(u"this").callprop('_cleanup')
                                            if var.get(u"this").get('_cancellationPhase'):
                                                return var.get('promise').callprop('cancel')
                                            else:
                                                return var.get('promise').callprop('_resolveCallback', var.get('value'))
                                        else:
                                            var.put('maybePromise', var.get('tryConvertToPromise')(var.get('value'), var.get(u"this").get('_promise')))
                                            if var.get('maybePromise').instanceof(var.get('Promise')).neg():
                                                var.put('maybePromise', var.get('promiseFromYieldHandler')(var.get('maybePromise'), var.get(u"this").get('_yieldHandlers'), var.get(u"this").get('_promise')))
                                                if PyJsStrictEq(var.get('maybePromise'),var.get(u"null")):
                                                    var.get(u"this").callprop('_promiseRejected', var.get('TypeError').create(((Js('A value %s was yielded that could not be treated as a promise\n\n    See http://goo.gl/MqrFmX\n\n').callprop('replace', Js('%s'), var.get('String')(var.get('value')))+Js('From coroutine:\n'))+var.get(u"this").get('_stack').callprop('split', Js('\n')).callprop('slice', Js(1.0), (-Js(7.0))).callprop('join', Js('\n')))))
                                                    return var.get('undefined')
                                            var.put('maybePromise', var.get('maybePromise').callprop('_target'))
                                            var.put('bitField', var.get('maybePromise').get('_bitField'))
                                            pass
                                            if PyJsStrictEq((var.get('bitField')&Js(50397184.0)),Js(0.0)):
                                                var.get(u"this").put('_yieldedPromise', var.get('maybePromise'))
                                                var.get('maybePromise').callprop('_proxy', var.get(u"this"), var.get(u"null"))
                                            else:
                                                if PyJsStrictNeq((var.get('bitField')&Js(33554432.0)),Js(0.0)):
                                                    var.get('Promise').get('_async').callprop('invoke', var.get(u"this").get('_promiseFulfilled'), var.get(u"this"), var.get('maybePromise').callprop('_value'))
                                                else:
                                                    if PyJsStrictNeq((var.get('bitField')&Js(16777216.0)),Js(0.0)):
                                                        var.get('Promise').get('_async').callprop('invoke', var.get(u"this").get('_promiseRejected'), var.get(u"this"), var.get('maybePromise').callprop('_reason'))
                                                    else:
                                                        var.get(u"this").callprop('_promiseCancelled')
                                    PyJs_anonymous_287_._set_name('anonymous')
                                    var.get('PromiseSpawn').get('prototype').put('_continue', PyJs_anonymous_287_)
                                    @Js
                                    def PyJs_anonymous_288_(generatorFunction, options, this, arguments, var=var):
                                        var = Scope({'generatorFunction':generatorFunction, 'options':options, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['generatorFunction', 'PromiseSpawn$', 'yieldHandler', 'options', 'stack'])
                                        if PyJsStrictNeq(var.get('generatorFunction',throw=False).typeof(),Js('function')):
                                            PyJsTempException = JsToPyException(var.get('TypeError').create(Js('generatorFunction must be a function\n\n    See http://goo.gl/MqrFmX\n')))
                                            raise PyJsTempException
                                        var.put('yieldHandler', var.get('Object')(var.get('options')).get('yieldHandler'))
                                        var.put('PromiseSpawn$', var.get('PromiseSpawn'))
                                        var.put('stack', var.get('Error').create().get('stack'))
                                        @Js
                                        def PyJs_anonymous_289_(this, arguments, var=var):
                                            var = Scope({'this':this, 'arguments':arguments}, var)
                                            var.registers(['generator', 'spawn', 'ret'])
                                            var.put('generator', var.get('generatorFunction').callprop('apply', var.get(u"this"), var.get('arguments')))
                                            var.put('spawn', var.get('PromiseSpawn$').create(var.get('undefined'), var.get('undefined'), var.get('yieldHandler'), var.get('stack')))
                                            var.put('ret', var.get('spawn').callprop('promise'))
                                            var.get('spawn').put('_generator', var.get('generator'))
                                            var.get('spawn').callprop('_promiseFulfilled', var.get('undefined'))
                                            return var.get('ret')
                                        PyJs_anonymous_289_._set_name('anonymous')
                                        return PyJs_anonymous_289_
                                    PyJs_anonymous_288_._set_name('anonymous')
                                    var.get('Promise').put('coroutine', PyJs_anonymous_288_)
                                    @Js
                                    def PyJs_anonymous_290_(fn, this, arguments, var=var):
                                        var = Scope({'fn':fn, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['fn'])
                                        if PyJsStrictNeq(var.get('fn',throw=False).typeof(),Js('function')):
                                            PyJsTempException = JsToPyException(var.get('TypeError').create((Js('expecting a function but got ')+var.get('util').callprop('classString', var.get('fn')))))
                                            raise PyJsTempException
                                        var.get('yieldHandlers').callprop('push', var.get('fn'))
                                    PyJs_anonymous_290_._set_name('anonymous')
                                    var.get('Promise').get('coroutine').put('addYieldHandler', PyJs_anonymous_290_)
                                    @Js
                                    def PyJs_anonymous_291_(generatorFunction, this, arguments, var=var):
                                        var = Scope({'generatorFunction':generatorFunction, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['generatorFunction', 'spawn', 'ret'])
                                        var.get('debug').callprop('deprecated', Js('Promise.spawn()'), Js('Promise.coroutine()'))
                                        if PyJsStrictNeq(var.get('generatorFunction',throw=False).typeof(),Js('function')):
                                            return var.get('apiRejection')(Js('generatorFunction must be a function\n\n    See http://goo.gl/MqrFmX\n'))
                                        var.put('spawn', var.get('PromiseSpawn').create(var.get('generatorFunction'), var.get(u"this")))
                                        var.put('ret', var.get('spawn').callprop('promise'))
                                        var.get('spawn').callprop('_run', var.get('Promise').get('spawn'))
                                        return var.get('ret')
                                    PyJs_anonymous_291_._set_name('anonymous')
                                    var.get('Promise').put('spawn', PyJs_anonymous_291_)
                                PyJs_anonymous_277_._set_name('anonymous')
                                var.get('module').put('exports', PyJs_anonymous_277_)
                            PyJs_anonymous_276_._set_name('anonymous')
                            @Js
                            def PyJs_anonymous_292_(_dereq_, module, exports, this, arguments, var=var):
                                var = Scope({'_dereq_':_dereq_, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
                                var.registers(['exports', 'module', '_dereq_'])
                                Js('use strict')
                                @Js
                                def PyJs_anonymous_293_(Promise, PromiseArray, tryConvertToPromise, INTERNAL, PyJsArg_6173796e63_, this, arguments, var=var):
                                    var = Scope({'Promise':Promise, 'PromiseArray':PromiseArray, 'tryConvertToPromise':tryConvertToPromise, 'INTERNAL':INTERNAL, 'async':PyJsArg_6173796e63_, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['promiseSetter', 'errorObj', 'thenCallback', 'thenCallbacks', 'i', 'promiseSetters', 'PromiseArray', 'util', 'canEvaluate', 'tryConvertToPromise', 'INTERNAL', 'holderClasses', 'Promise', 'tryCatch', 'async', 'generateHolderClass', 'reject'])
                                    var.put('util', var.get('_dereq_')(Js('./util')))
                                    var.put('canEvaluate', var.get('util').get('canEvaluate'))
                                    var.put('tryCatch', var.get('util').get('tryCatch'))
                                    var.put('errorObj', var.get('util').get('errorObj'))
                                    pass
                                    if Js(True).neg():
                                        if var.get('canEvaluate'):
                                            @Js
                                            def PyJs_thenCallback_294_(i, this, arguments, var=var):
                                                var = Scope({'i':i, 'this':this, 'arguments':arguments, 'thenCallback':PyJs_thenCallback_294_}, var)
                                                var.registers(['i'])
                                                return var.get('Function').create(Js('value'), Js('holder'), Js("                             \n            'use strict';                                                    \n            holder.pIndex = value;                                           \n            holder.checkFulfillment(this);                                   \n            ").callprop('replace', JsRegExp('/Index/g'), var.get('i')))
                                            PyJs_thenCallback_294_._set_name('thenCallback')
                                            var.put('thenCallback', PyJs_thenCallback_294_)
                                            @Js
                                            def PyJs_promiseSetter_295_(i, this, arguments, var=var):
                                                var = Scope({'i':i, 'this':this, 'arguments':arguments, 'promiseSetter':PyJs_promiseSetter_295_}, var)
                                                var.registers(['i'])
                                                return var.get('Function').create(Js('promise'), Js('holder'), Js("                           \n            'use strict';                                                    \n            holder.pIndex = promise;                                         \n            ").callprop('replace', JsRegExp('/Index/g'), var.get('i')))
                                            PyJs_promiseSetter_295_._set_name('promiseSetter')
                                            var.put('promiseSetter', PyJs_promiseSetter_295_)
                                            @Js
                                            def PyJs_generateHolderClass_296_(total, this, arguments, var=var):
                                                var = Scope({'total':total, 'this':this, 'arguments':arguments, 'generateHolderClass':PyJs_generateHolderClass_296_}, var)
                                                var.registers(['passedArguments', 'i', 'total', 'code', 'name', 'assignment', 'props', 'cancellationCode'])
                                                var.put('props', var.get('Array').create(var.get('total')))
                                                #for JS loop
                                                var.put('i', Js(0.0))
                                                while (var.get('i')<var.get('props').get('length')):
                                                    try:
                                                        var.get('props').put(var.get('i'), (Js('this.p')+(var.get('i')+Js(1.0))))
                                                    finally:
                                                            var.put('i',Js(var.get('i').to_number())+Js(1))
                                                var.put('assignment', (var.get('props').callprop('join', Js(' = '))+Js(' = null;')))
                                                @Js
                                                def PyJs_anonymous_297_(prop, this, arguments, var=var):
                                                    var = Scope({'prop':prop, 'this':this, 'arguments':arguments}, var)
                                                    var.registers(['prop'])
                                                    def PyJs_LONG_298_(var=var):
                                                        return ((Js('                                                         \n                promise = ')+var.get('prop'))+Js(';                                      \n                if (promise instanceof Promise) {                            \n                    promise.cancel();                                        \n                }                                                            \n            '))
                                                    return PyJs_LONG_298_()
                                                PyJs_anonymous_297_._set_name('anonymous')
                                                var.put('cancellationCode', (Js('var promise;\n')+var.get('props').callprop('map', PyJs_anonymous_297_).callprop('join', Js('\n'))))
                                                var.put('passedArguments', var.get('props').callprop('join', Js(', ')))
                                                var.put('name', (Js('Holder$')+var.get('total')))
                                                var.put('code', Js("return function(tryCatch, errorObj, Promise, async) {    \n            'use strict';                                                    \n            function [TheName](fn) {                                         \n                [TheProperties]                                              \n                this.fn = fn;                                                \n                this.asyncNeeded = true;                                     \n                this.now = 0;                                                \n            }                                                                \n                                                                             \n            [TheName].prototype._callFunction = function(promise) {          \n                promise._pushContext();                                      \n                var ret = tryCatch(this.fn)([ThePassedArguments]);           \n                promise._popContext();                                       \n                if (ret === errorObj) {                                      \n                    promise._rejectCallback(ret.e, false);                   \n                } else {                                                     \n                    promise._resolveCallback(ret);                           \n                }                                                            \n            };                                                               \n                                                                             \n            [TheName].prototype.checkFulfillment = function(promise) {       \n                var now = ++this.now;                                        \n                if (now === [TheTotal]) {                                    \n                    if (this.asyncNeeded) {                                  \n                        async.invoke(this._callFunction, this, promise);     \n                    } else {                                                 \n                        this._callFunction(promise);                         \n                    }                                                        \n                                                                             \n                }                                                            \n            };                                                               \n                                                                             \n            [TheName].prototype._resultCancelled = function() {              \n                [CancellationCode]                                           \n            };                                                               \n                                                                             \n            return [TheName];                                                \n        }(tryCatch, errorObj, Promise, async);                               \n        "))
                                                def PyJs_LONG_299_(var=var):
                                                    return var.get('code').callprop('replace', JsRegExp('/\\[TheName\\]/g'), var.get('name')).callprop('replace', JsRegExp('/\\[TheTotal\\]/g'), var.get('total')).callprop('replace', JsRegExp('/\\[ThePassedArguments\\]/g'), var.get('passedArguments')).callprop('replace', JsRegExp('/\\[TheProperties\\]/g'), var.get('assignment')).callprop('replace', JsRegExp('/\\[CancellationCode\\]/g'), var.get('cancellationCode'))
                                                var.put('code', PyJs_LONG_299_())
                                                return var.get('Function').create(Js('tryCatch'), Js('errorObj'), Js('Promise'), Js('async'), var.get('code'))(var.get('tryCatch'), var.get('errorObj'), var.get('Promise'), var.get('async'))
                                            PyJs_generateHolderClass_296_._set_name('generateHolderClass')
                                            var.put('generateHolderClass', PyJs_generateHolderClass_296_)
                                            var.put('holderClasses', Js([]))
                                            var.put('thenCallbacks', Js([]))
                                            var.put('promiseSetters', Js([]))
                                            #for JS loop
                                            var.put('i', Js(0.0))
                                            while (var.get('i')<Js(8.0)):
                                                try:
                                                    var.get('holderClasses').callprop('push', var.get('generateHolderClass')((var.get('i')+Js(1.0))))
                                                    var.get('thenCallbacks').callprop('push', var.get('thenCallback')((var.get('i')+Js(1.0))))
                                                    var.get('promiseSetters').callprop('push', var.get('promiseSetter')((var.get('i')+Js(1.0))))
                                                finally:
                                                        var.put('i',Js(var.get('i').to_number())+Js(1))
                                            @Js
                                            def PyJs_reject_300_(reason, this, arguments, var=var):
                                                var = Scope({'reason':reason, 'this':this, 'arguments':arguments, 'reject':PyJs_reject_300_}, var)
                                                var.registers(['reason'])
                                                var.get(u"this").callprop('_reject', var.get('reason'))
                                            PyJs_reject_300_._set_name('reject')
                                            var.put('reject', PyJs_reject_300_)
                                    @Js
                                    def PyJs_anonymous_301_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers(['context', 'last', 'holder', 'callbacks', 'HolderClass', 'i', 'ret', 'args', 'bitField', 'maybePromise', 'fn'])
                                        var.put('last', (var.get('arguments').get('length')-Js(1.0)))
                                        pass
                                        if ((var.get('last')>Js(0.0)) and PyJsStrictEq(var.get('arguments').get(var.get('last')).typeof(),Js('function'))):
                                            var.put('fn', var.get('arguments').get(var.get('last')))
                                            if Js(True).neg():
                                                if ((var.get('last')<=Js(8.0)) and var.get('canEvaluate')):
                                                    var.put('ret', var.get('Promise').create(var.get('INTERNAL')))
                                                    var.get('ret').callprop('_captureStackTrace')
                                                    var.put('HolderClass', var.get('holderClasses').get((var.get('last')-Js(1.0))))
                                                    var.put('holder', var.get('HolderClass').create(var.get('fn')))
                                                    var.put('callbacks', var.get('thenCallbacks'))
                                                    #for JS loop
                                                    var.put('i', Js(0.0))
                                                    while (var.get('i')<var.get('last')):
                                                        try:
                                                            var.put('maybePromise', var.get('tryConvertToPromise')(var.get('arguments').get(var.get('i')), var.get('ret')))
                                                            if var.get('maybePromise').instanceof(var.get('Promise')):
                                                                var.put('maybePromise', var.get('maybePromise').callprop('_target'))
                                                                var.put('bitField', var.get('maybePromise').get('_bitField'))
                                                                pass
                                                                if PyJsStrictEq((var.get('bitField')&Js(50397184.0)),Js(0.0)):
                                                                    var.get('maybePromise').callprop('_then', var.get('callbacks').get(var.get('i')), var.get('reject'), var.get('undefined'), var.get('ret'), var.get('holder'))
                                                                    var.get('promiseSetters').callprop(var.get('i'), var.get('maybePromise'), var.get('holder'))
                                                                    var.get('holder').put('asyncNeeded', Js(False))
                                                                else:
                                                                    if PyJsStrictNeq((var.get('bitField')&Js(33554432.0)),Js(0.0)):
                                                                        var.get('callbacks').get(var.get('i')).callprop('call', var.get('ret'), var.get('maybePromise').callprop('_value'), var.get('holder'))
                                                                    else:
                                                                        if PyJsStrictNeq((var.get('bitField')&Js(16777216.0)),Js(0.0)):
                                                                            var.get('ret').callprop('_reject', var.get('maybePromise').callprop('_reason'))
                                                                        else:
                                                                            var.get('ret').callprop('_cancel')
                                                            else:
                                                                var.get('callbacks').get(var.get('i')).callprop('call', var.get('ret'), var.get('maybePromise'), var.get('holder'))
                                                        finally:
                                                                var.put('i',Js(var.get('i').to_number())+Js(1))
                                                    if var.get('ret').callprop('_isFateSealed').neg():
                                                        if var.get('holder').get('asyncNeeded'):
                                                            var.put('context', var.get('Promise').callprop('_getContext'))
                                                            var.get('holder').put('fn', var.get('util').callprop('contextBind', var.get('context'), var.get('holder').get('fn')))
                                                        var.get('ret').callprop('_setAsyncGuaranteed')
                                                        var.get('ret').callprop('_setOnCancel', var.get('holder'))
                                                    return var.get('ret')
                                        var.put('args', Js([]).get('slice').callprop('call', var.get('arguments')))
                                        pass
                                        if var.get('fn'):
                                            var.get('args').callprop('pop')
                                        var.put('ret', var.get('PromiseArray').create(var.get('args')).callprop('promise'))
                                        return (var.get('ret').callprop('spread', var.get('fn')) if PyJsStrictNeq(var.get('fn'),var.get('undefined')) else var.get('ret'))
                                    PyJs_anonymous_301_._set_name('anonymous')
                                    var.get('Promise').put('join', PyJs_anonymous_301_)
                                PyJs_anonymous_293_._set_name('anonymous')
                                var.get('module').put('exports', PyJs_anonymous_293_)
                            PyJs_anonymous_292_._set_name('anonymous')
                            @Js
                            def PyJs_anonymous_302_(_dereq_, module, exports, this, arguments, var=var):
                                var = Scope({'_dereq_':_dereq_, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
                                var.registers(['exports', 'module', '_dereq_'])
                                Js('use strict')
                                @Js
                                def PyJs_anonymous_303_(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug, this, arguments, var=var):
                                    var = Scope({'Promise':Promise, 'PromiseArray':PromiseArray, 'apiRejection':apiRejection, 'tryConvertToPromise':tryConvertToPromise, 'INTERNAL':INTERNAL, 'debug':debug, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['errorObj', 'apiRejection', 'PromiseArray', 'util', 'tryConvertToPromise', 'INTERNAL', 'debug', 'Promise', 'MappingPromiseArray', 'tryCatch', 'map', 'async'])
                                    @Js
                                    def PyJsHoisted_MappingPromiseArray_(promises, fn, limit, _filter, this, arguments, var=var):
                                        var = Scope({'promises':promises, 'fn':fn, 'limit':limit, '_filter':_filter, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['context', 'i', '_filter', 'promises', 'limit', 'maybePromise', 'fn'])
                                        var.get(u"this").callprop('constructor$', var.get('promises'))
                                        var.get(u"this").get('_promise').callprop('_captureStackTrace')
                                        var.put('context', var.get('Promise').callprop('_getContext'))
                                        var.get(u"this").put('_callback', var.get('util').callprop('contextBind', var.get('context'), var.get('fn')))
                                        var.get(u"this").put('_preservedValues', (var.get('Array').create(var.get(u"this").callprop('length')) if PyJsStrictEq(var.get('_filter'),var.get('INTERNAL')) else var.get(u"null")))
                                        var.get(u"this").put('_limit', var.get('limit'))
                                        var.get(u"this").put('_inFlight', Js(0.0))
                                        var.get(u"this").put('_queue', Js([]))
                                        var.get('async').callprop('invoke', var.get(u"this").get('_asyncInit'), var.get(u"this"), var.get('undefined'))
                                        if var.get('util').callprop('isArray', var.get('promises')):
                                            #for JS loop
                                            var.put('i', Js(0.0))
                                            while (var.get('i')<var.get('promises').get('length')):
                                                try:
                                                    var.put('maybePromise', var.get('promises').get(var.get('i')))
                                                    if var.get('maybePromise').instanceof(var.get('Promise')):
                                                        var.get('maybePromise').callprop('suppressUnhandledRejections')
                                                finally:
                                                        var.put('i',Js(var.get('i').to_number())+Js(1))
                                    PyJsHoisted_MappingPromiseArray_.func_name = 'MappingPromiseArray'
                                    var.put('MappingPromiseArray', PyJsHoisted_MappingPromiseArray_)
                                    @Js
                                    def PyJsHoisted_map_(promises, fn, options, _filter, this, arguments, var=var):
                                        var = Scope({'promises':promises, 'fn':fn, 'options':options, '_filter':_filter, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['_filter', 'options', 'promises', 'limit', 'fn'])
                                        if PyJsStrictNeq(var.get('fn',throw=False).typeof(),Js('function')):
                                            return var.get('apiRejection')((Js('expecting a function but got ')+var.get('util').callprop('classString', var.get('fn'))))
                                        var.put('limit', Js(0.0))
                                        if PyJsStrictNeq(var.get('options'),var.get('undefined')):
                                            if (PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('options',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('options'))),Js('object')) and PyJsStrictNeq(var.get('options'),var.get(u"null"))):
                                                if PyJsStrictNeq(var.get('options').get('concurrency').typeof(),Js('number')):
                                                    return var.get('Promise').callprop('reject', var.get('TypeError').create((Js("'concurrency' must be a number but it is ")+var.get('util').callprop('classString', var.get('options').get('concurrency')))))
                                                var.put('limit', var.get('options').get('concurrency'))
                                            else:
                                                return var.get('Promise').callprop('reject', var.get('TypeError').create((Js('options argument must be an object but it is ')+var.get('util').callprop('classString', var.get('options')))))
                                        var.put('limit', (var.get('limit') if ((PyJsStrictEq(var.get('limit',throw=False).typeof(),Js('number')) and var.get('isFinite')(var.get('limit'))) and (var.get('limit')>=Js(1.0))) else Js(0.0)))
                                        return var.get('MappingPromiseArray').create(var.get('promises'), var.get('fn'), var.get('limit'), var.get('_filter')).callprop('promise')
                                    PyJsHoisted_map_.func_name = 'map'
                                    var.put('map', PyJsHoisted_map_)
                                    var.put('util', var.get('_dereq_')(Js('./util')))
                                    var.put('tryCatch', var.get('util').get('tryCatch'))
                                    var.put('errorObj', var.get('util').get('errorObj'))
                                    var.put('async', var.get('Promise').get('_async'))
                                    pass
                                    var.get('util').callprop('inherits', var.get('MappingPromiseArray'), var.get('PromiseArray'))
                                    @Js
                                    def PyJs_anonymous_304_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        var.get(u"this").callprop('_init$', var.get('undefined'), (-Js(2.0)))
                                    PyJs_anonymous_304_._set_name('anonymous')
                                    var.get('MappingPromiseArray').get('prototype').put('_asyncInit', PyJs_anonymous_304_)
                                    @Js
                                    def PyJs_anonymous_305_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        pass
                                    PyJs_anonymous_305_._set_name('anonymous')
                                    var.get('MappingPromiseArray').get('prototype').put('_init', PyJs_anonymous_305_)
                                    @Js
                                    def PyJs_anonymous_306_(value, index, this, arguments, var=var):
                                        var = Scope({'value':value, 'index':index, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['callback', 'ret', 'preservedValues', 'promise', 'totalResolved', 'values', 'receiver', 'length', 'promiseCreated', 'bitField', 'limit', 'maybePromise', 'index', 'value'])
                                        var.put('values', var.get(u"this").get('_values'))
                                        var.put('length', var.get(u"this").callprop('length'))
                                        var.put('preservedValues', var.get(u"this").get('_preservedValues'))
                                        var.put('limit', var.get(u"this").get('_limit'))
                                        if (var.get('index')<Js(0.0)):
                                            var.put('index', ((var.get('index')*(-Js(1.0)))-Js(1.0)))
                                            var.get('values').put(var.get('index'), var.get('value'))
                                            if (var.get('limit')>=Js(1.0)):
                                                (var.get(u"this").put('_inFlight',Js(var.get(u"this").get('_inFlight').to_number())-Js(1))+Js(1))
                                                var.get(u"this").callprop('_drainQueue')
                                                if var.get(u"this").callprop('_isResolved'):
                                                    return Js(True)
                                        else:
                                            if ((var.get('limit')>=Js(1.0)) and (var.get(u"this").get('_inFlight')>=var.get('limit'))):
                                                var.get('values').put(var.get('index'), var.get('value'))
                                                var.get(u"this").get('_queue').callprop('push', var.get('index'))
                                                return Js(False)
                                            if PyJsStrictNeq(var.get('preservedValues'),var.get(u"null")):
                                                var.get('preservedValues').put(var.get('index'), var.get('value'))
                                            var.put('promise', var.get(u"this").get('_promise'))
                                            var.put('callback', var.get(u"this").get('_callback'))
                                            var.put('receiver', var.get('promise').callprop('_boundValue'))
                                            var.get('promise').callprop('_pushContext')
                                            var.put('ret', var.get('tryCatch')(var.get('callback')).callprop('call', var.get('receiver'), var.get('value'), var.get('index'), var.get('length')))
                                            var.put('promiseCreated', var.get('promise').callprop('_popContext'))
                                            var.get('debug').callprop('checkForgottenReturns', var.get('ret'), var.get('promiseCreated'), (Js('Promise.filter') if PyJsStrictNeq(var.get('preservedValues'),var.get(u"null")) else Js('Promise.map')), var.get('promise'))
                                            if PyJsStrictEq(var.get('ret'),var.get('errorObj')):
                                                var.get(u"this").callprop('_reject', var.get('ret').get('e'))
                                                return Js(True)
                                            var.put('maybePromise', var.get('tryConvertToPromise')(var.get('ret'), var.get(u"this").get('_promise')))
                                            if var.get('maybePromise').instanceof(var.get('Promise')):
                                                var.put('maybePromise', var.get('maybePromise').callprop('_target'))
                                                var.put('bitField', var.get('maybePromise').get('_bitField'))
                                                pass
                                                if PyJsStrictEq((var.get('bitField')&Js(50397184.0)),Js(0.0)):
                                                    if (var.get('limit')>=Js(1.0)):
                                                        (var.get(u"this").put('_inFlight',Js(var.get(u"this").get('_inFlight').to_number())+Js(1))-Js(1))
                                                    var.get('values').put(var.get('index'), var.get('maybePromise'))
                                                    var.get('maybePromise').callprop('_proxy', var.get(u"this"), ((var.get('index')+Js(1.0))*(-Js(1.0))))
                                                    return Js(False)
                                                else:
                                                    if PyJsStrictNeq((var.get('bitField')&Js(33554432.0)),Js(0.0)):
                                                        var.put('ret', var.get('maybePromise').callprop('_value'))
                                                    else:
                                                        if PyJsStrictNeq((var.get('bitField')&Js(16777216.0)),Js(0.0)):
                                                            var.get(u"this").callprop('_reject', var.get('maybePromise').callprop('_reason'))
                                                            return Js(True)
                                                        else:
                                                            var.get(u"this").callprop('_cancel')
                                                            return Js(True)
                                            var.get('values').put(var.get('index'), var.get('ret'))
                                        var.put('totalResolved', var.get(u"this").put('_totalResolved',Js(var.get(u"this").get('_totalResolved').to_number())+Js(1)))
                                        if (var.get('totalResolved')>=var.get('length')):
                                            if PyJsStrictNeq(var.get('preservedValues'),var.get(u"null")):
                                                var.get(u"this").callprop('_filter', var.get('values'), var.get('preservedValues'))
                                            else:
                                                var.get(u"this").callprop('_resolve', var.get('values'))
                                            return Js(True)
                                        return Js(False)
                                    PyJs_anonymous_306_._set_name('anonymous')
                                    var.get('MappingPromiseArray').get('prototype').put('_promiseFulfilled', PyJs_anonymous_306_)
                                    @Js
                                    def PyJs_anonymous_307_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers(['values', 'limit', 'queue', 'index'])
                                        var.put('queue', var.get(u"this").get('_queue'))
                                        var.put('limit', var.get(u"this").get('_limit'))
                                        var.put('values', var.get(u"this").get('_values'))
                                        while ((var.get('queue').get('length')>Js(0.0)) and (var.get(u"this").get('_inFlight')<var.get('limit'))):
                                            if var.get(u"this").callprop('_isResolved'):
                                                return var.get('undefined')
                                            var.put('index', var.get('queue').callprop('pop'))
                                            var.get(u"this").callprop('_promiseFulfilled', var.get('values').get(var.get('index')), var.get('index'))
                                    PyJs_anonymous_307_._set_name('anonymous')
                                    var.get('MappingPromiseArray').get('prototype').put('_drainQueue', PyJs_anonymous_307_)
                                    @Js
                                    def PyJs_anonymous_308_(booleans, values, this, arguments, var=var):
                                        var = Scope({'booleans':booleans, 'values':values, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['len', 'booleans', 'i', 'ret', 'values', 'j'])
                                        var.put('len', var.get('values').get('length'))
                                        var.put('ret', var.get('Array').create(var.get('len')))
                                        var.put('j', Js(0.0))
                                        #for JS loop
                                        var.put('i', Js(0.0))
                                        while (var.get('i')<var.get('len')):
                                            try:
                                                if var.get('booleans').get(var.get('i')):
                                                    var.get('ret').put((var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1)), var.get('values').get(var.get('i')))
                                            finally:
                                                    var.put('i',Js(var.get('i').to_number())+Js(1))
                                        var.get('ret').put('length', var.get('j'))
                                        var.get(u"this").callprop('_resolve', var.get('ret'))
                                    PyJs_anonymous_308_._set_name('anonymous')
                                    var.get('MappingPromiseArray').get('prototype').put('_filter', PyJs_anonymous_308_)
                                    @Js
                                    def PyJs_anonymous_309_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return var.get(u"this").get('_preservedValues')
                                    PyJs_anonymous_309_._set_name('anonymous')
                                    var.get('MappingPromiseArray').get('prototype').put('preservedValues', PyJs_anonymous_309_)
                                    pass
                                    @Js
                                    def PyJs_anonymous_310_(fn, options, this, arguments, var=var):
                                        var = Scope({'fn':fn, 'options':options, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['options', 'fn'])
                                        return var.get('map')(var.get(u"this"), var.get('fn'), var.get('options'), var.get(u"null"))
                                    PyJs_anonymous_310_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('map', PyJs_anonymous_310_)
                                    @Js
                                    def PyJs_anonymous_311_(promises, fn, options, _filter, this, arguments, var=var):
                                        var = Scope({'promises':promises, 'fn':fn, 'options':options, '_filter':_filter, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['options', '_filter', 'promises', 'fn'])
                                        return var.get('map')(var.get('promises'), var.get('fn'), var.get('options'), var.get('_filter'))
                                    PyJs_anonymous_311_._set_name('anonymous')
                                    var.get('Promise').put('map', PyJs_anonymous_311_)
                                PyJs_anonymous_303_._set_name('anonymous')
                                var.get('module').put('exports', PyJs_anonymous_303_)
                            PyJs_anonymous_302_._set_name('anonymous')
                            @Js
                            def PyJs_anonymous_312_(_dereq_, module, exports, this, arguments, var=var):
                                var = Scope({'_dereq_':_dereq_, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
                                var.registers(['exports', 'module', '_dereq_'])
                                Js('use strict')
                                @Js
                                def PyJs_anonymous_313_(Promise, INTERNAL, tryConvertToPromise, apiRejection, debug, this, arguments, var=var):
                                    var = Scope({'Promise':Promise, 'INTERNAL':INTERNAL, 'tryConvertToPromise':tryConvertToPromise, 'apiRejection':apiRejection, 'debug':debug, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['apiRejection', 'util', 'tryConvertToPromise', 'INTERNAL', 'debug', 'Promise', 'tryCatch'])
                                    var.put('util', var.get('_dereq_')(Js('./util')))
                                    var.put('tryCatch', var.get('util').get('tryCatch'))
                                    @Js
                                    def PyJs_anonymous_314_(fn, this, arguments, var=var):
                                        var = Scope({'fn':fn, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['fn'])
                                        if PyJsStrictNeq(var.get('fn',throw=False).typeof(),Js('function')):
                                            PyJsTempException = JsToPyException(var.get('Promise').get('TypeError').create((Js('expecting a function but got ')+var.get('util').callprop('classString', var.get('fn')))))
                                            raise PyJsTempException
                                        @Js
                                        def PyJs_anonymous_315_(this, arguments, var=var):
                                            var = Scope({'this':this, 'arguments':arguments}, var)
                                            var.registers(['promiseCreated', 'value', 'ret'])
                                            var.put('ret', var.get('Promise').create(var.get('INTERNAL')))
                                            var.get('ret').callprop('_captureStackTrace')
                                            var.get('ret').callprop('_pushContext')
                                            var.put('value', var.get('tryCatch')(var.get('fn')).callprop('apply', var.get(u"this"), var.get('arguments')))
                                            var.put('promiseCreated', var.get('ret').callprop('_popContext'))
                                            var.get('debug').callprop('checkForgottenReturns', var.get('value'), var.get('promiseCreated'), Js('Promise.method'), var.get('ret'))
                                            var.get('ret').callprop('_resolveFromSyncValue', var.get('value'))
                                            return var.get('ret')
                                        PyJs_anonymous_315_._set_name('anonymous')
                                        return PyJs_anonymous_315_
                                    PyJs_anonymous_314_._set_name('anonymous')
                                    var.get('Promise').put('method', PyJs_anonymous_314_)
                                    @Js
                                    def PyJs_anonymous_316_(fn, this, arguments, var=var):
                                        var = Scope({'fn':fn, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['arg', 'ret', 'promiseCreated', 'ctx', 'fn', 'value'])
                                        if PyJsStrictNeq(var.get('fn',throw=False).typeof(),Js('function')):
                                            return var.get('apiRejection')((Js('expecting a function but got ')+var.get('util').callprop('classString', var.get('fn'))))
                                        var.put('ret', var.get('Promise').create(var.get('INTERNAL')))
                                        var.get('ret').callprop('_captureStackTrace')
                                        var.get('ret').callprop('_pushContext')
                                        pass
                                        if (var.get('arguments').get('length')>Js(1.0)):
                                            var.get('debug').callprop('deprecated', Js('calling Promise.try with more than 1 argument'))
                                            var.put('arg', var.get('arguments').get('1'))
                                            var.put('ctx', var.get('arguments').get('2'))
                                            var.put('value', (var.get('tryCatch')(var.get('fn')).callprop('apply', var.get('ctx'), var.get('arg')) if var.get('util').callprop('isArray', var.get('arg')) else var.get('tryCatch')(var.get('fn')).callprop('call', var.get('ctx'), var.get('arg'))))
                                        else:
                                            var.put('value', var.get('tryCatch')(var.get('fn'))())
                                        var.put('promiseCreated', var.get('ret').callprop('_popContext'))
                                        var.get('debug').callprop('checkForgottenReturns', var.get('value'), var.get('promiseCreated'), Js('Promise.try'), var.get('ret'))
                                        var.get('ret').callprop('_resolveFromSyncValue', var.get('value'))
                                        return var.get('ret')
                                    PyJs_anonymous_316_._set_name('anonymous')
                                    var.get('Promise').put('attempt', var.get('Promise').put('try', PyJs_anonymous_316_))
                                    @Js
                                    def PyJs_anonymous_317_(value, this, arguments, var=var):
                                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['value'])
                                        if PyJsStrictEq(var.get('value'),var.get('util').get('errorObj')):
                                            var.get(u"this").callprop('_rejectCallback', var.get('value').get('e'), Js(False))
                                        else:
                                            var.get(u"this").callprop('_resolveCallback', var.get('value'), Js(True))
                                    PyJs_anonymous_317_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_resolveFromSyncValue', PyJs_anonymous_317_)
                                PyJs_anonymous_313_._set_name('anonymous')
                                var.get('module').put('exports', PyJs_anonymous_313_)
                            PyJs_anonymous_312_._set_name('anonymous')
                            @Js
                            def PyJs_anonymous_318_(_dereq_, module, exports, this, arguments, var=var):
                                var = Scope({'_dereq_':_dereq_, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
                                var.registers(['OperationalError', 'module', '_dereq_', 'exports', 'util', 'errors', 'maybeWrapAsError', 'es5', 'rErrorKey', 'wrapAsOperationalError', 'nodebackForPromise', 'isUntypedError'])
                                @Js
                                def PyJsHoisted_isUntypedError_(obj, this, arguments, var=var):
                                    var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['obj'])
                                    return (var.get('obj').instanceof(var.get('Error')) and PyJsStrictEq(var.get('es5').callprop('getPrototypeOf', var.get('obj')),var.get('Error').get('prototype')))
                                PyJsHoisted_isUntypedError_.func_name = 'isUntypedError'
                                var.put('isUntypedError', PyJsHoisted_isUntypedError_)
                                @Js
                                def PyJsHoisted_wrapAsOperationalError_(obj, this, arguments, var=var):
                                    var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['i', 'ret', 'key', 'keys', 'obj'])
                                    pass
                                    if var.get('isUntypedError')(var.get('obj')):
                                        var.put('ret', var.get('OperationalError').create(var.get('obj')))
                                        var.get('ret').put('name', var.get('obj').get('name'))
                                        var.get('ret').put('message', var.get('obj').get('message'))
                                        var.get('ret').put('stack', var.get('obj').get('stack'))
                                        var.put('keys', var.get('es5').callprop('keys', var.get('obj')))
                                        #for JS loop
                                        var.put('i', Js(0.0))
                                        while (var.get('i')<var.get('keys').get('length')):
                                            try:
                                                var.put('key', var.get('keys').get(var.get('i')))
                                                if var.get('rErrorKey').callprop('test', var.get('key')).neg():
                                                    var.get('ret').put(var.get('key'), var.get('obj').get(var.get('key')))
                                            finally:
                                                    var.put('i',Js(var.get('i').to_number())+Js(1))
                                        return var.get('ret')
                                    var.get('util').callprop('markAsOriginatingFromRejection', var.get('obj'))
                                    return var.get('obj')
                                PyJsHoisted_wrapAsOperationalError_.func_name = 'wrapAsOperationalError'
                                var.put('wrapAsOperationalError', PyJsHoisted_wrapAsOperationalError_)
                                @Js
                                def PyJsHoisted_nodebackForPromise_(promise, multiArgs, this, arguments, var=var):
                                    var = Scope({'promise':promise, 'multiArgs':multiArgs, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['multiArgs', 'promise'])
                                    @Js
                                    def PyJs_anonymous_319_(err, value, this, arguments, var=var):
                                        var = Scope({'err':err, 'value':value, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['args', 'wrapped', 'err', 'value'])
                                        if PyJsStrictEq(var.get('promise'),var.get(u"null")):
                                            return var.get('undefined')
                                        if var.get('err'):
                                            var.put('wrapped', var.get('wrapAsOperationalError')(var.get('maybeWrapAsError')(var.get('err'))))
                                            var.get('promise').callprop('_attachExtraTrace', var.get('wrapped'))
                                            var.get('promise').callprop('_reject', var.get('wrapped'))
                                        else:
                                            if var.get('multiArgs').neg():
                                                var.get('promise').callprop('_fulfill', var.get('value'))
                                            else:
                                                var.put('args', Js([]).get('slice').callprop('call', var.get('arguments'), Js(1.0)))
                                                pass
                                                var.get('promise').callprop('_fulfill', var.get('args'))
                                        var.put('promise', var.get(u"null"))
                                    PyJs_anonymous_319_._set_name('anonymous')
                                    return PyJs_anonymous_319_
                                PyJsHoisted_nodebackForPromise_.func_name = 'nodebackForPromise'
                                var.put('nodebackForPromise', PyJsHoisted_nodebackForPromise_)
                                Js('use strict')
                                var.put('util', var.get('_dereq_')(Js('./util')))
                                var.put('maybeWrapAsError', var.get('util').get('maybeWrapAsError'))
                                var.put('errors', var.get('_dereq_')(Js('./errors')))
                                var.put('OperationalError', var.get('errors').get('OperationalError'))
                                var.put('es5', var.get('_dereq_')(Js('./es5')))
                                pass
                                var.put('rErrorKey', JsRegExp('/^(?:name|message|stack|cause)$/'))
                                pass
                                pass
                                var.get('module').put('exports', var.get('nodebackForPromise'))
                            PyJs_anonymous_318_._set_name('anonymous')
                            @Js
                            def PyJs_anonymous_320_(_dereq_, module, exports, this, arguments, var=var):
                                var = Scope({'_dereq_':_dereq_, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
                                var.registers(['exports', 'module', '_dereq_'])
                                Js('use strict')
                                @Js
                                def PyJs_anonymous_321_(Promise, this, arguments, var=var):
                                    var = Scope({'Promise':Promise, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['errorObj', 'spreadAdapter', 'util', 'Promise', 'tryCatch', 'errorAdapter', 'async', 'successAdapter'])
                                    @Js
                                    def PyJsHoisted_spreadAdapter_(val, nodeback, this, arguments, var=var):
                                        var = Scope({'val':val, 'nodeback':nodeback, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['nodeback', 'ret', 'val', 'promise'])
                                        var.put('promise', var.get(u"this"))
                                        if var.get('util').callprop('isArray', var.get('val')).neg():
                                            return var.get('successAdapter').callprop('call', var.get('promise'), var.get('val'), var.get('nodeback'))
                                        var.put('ret', var.get('tryCatch')(var.get('nodeback')).callprop('apply', var.get('promise').callprop('_boundValue'), Js([var.get(u"null")]).callprop('concat', var.get('val'))))
                                        if PyJsStrictEq(var.get('ret'),var.get('errorObj')):
                                            var.get('async').callprop('throwLater', var.get('ret').get('e'))
                                    PyJsHoisted_spreadAdapter_.func_name = 'spreadAdapter'
                                    var.put('spreadAdapter', PyJsHoisted_spreadAdapter_)
                                    @Js
                                    def PyJsHoisted_successAdapter_(val, nodeback, this, arguments, var=var):
                                        var = Scope({'val':val, 'nodeback':nodeback, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['val', 'ret', 'nodeback', 'promise', 'receiver'])
                                        var.put('promise', var.get(u"this"))
                                        var.put('receiver', var.get('promise').callprop('_boundValue'))
                                        var.put('ret', (var.get('tryCatch')(var.get('nodeback')).callprop('call', var.get('receiver'), var.get(u"null")) if PyJsStrictEq(var.get('val'),var.get('undefined')) else var.get('tryCatch')(var.get('nodeback')).callprop('call', var.get('receiver'), var.get(u"null"), var.get('val'))))
                                        if PyJsStrictEq(var.get('ret'),var.get('errorObj')):
                                            var.get('async').callprop('throwLater', var.get('ret').get('e'))
                                    PyJsHoisted_successAdapter_.func_name = 'successAdapter'
                                    var.put('successAdapter', PyJsHoisted_successAdapter_)
                                    @Js
                                    def PyJsHoisted_errorAdapter_(reason, nodeback, this, arguments, var=var):
                                        var = Scope({'reason':reason, 'nodeback':nodeback, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['newReason', 'ret', 'nodeback', 'reason', 'promise'])
                                        var.put('promise', var.get(u"this"))
                                        if var.get('reason').neg():
                                            var.put('newReason', var.get('Error').create((var.get('reason')+Js(''))))
                                            var.get('newReason').put('cause', var.get('reason'))
                                            var.put('reason', var.get('newReason'))
                                        var.put('ret', var.get('tryCatch')(var.get('nodeback')).callprop('call', var.get('promise').callprop('_boundValue'), var.get('reason')))
                                        if PyJsStrictEq(var.get('ret'),var.get('errorObj')):
                                            var.get('async').callprop('throwLater', var.get('ret').get('e'))
                                    PyJsHoisted_errorAdapter_.func_name = 'errorAdapter'
                                    var.put('errorAdapter', PyJsHoisted_errorAdapter_)
                                    var.put('util', var.get('_dereq_')(Js('./util')))
                                    var.put('async', var.get('Promise').get('_async'))
                                    var.put('tryCatch', var.get('util').get('tryCatch'))
                                    var.put('errorObj', var.get('util').get('errorObj'))
                                    pass
                                    pass
                                    pass
                                    @Js
                                    def PyJs_anonymous_322_(nodeback, options, this, arguments, var=var):
                                        var = Scope({'nodeback':nodeback, 'options':options, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['adapter', 'nodeback', 'options'])
                                        if (var.get('nodeback',throw=False).typeof()==Js('function')):
                                            var.put('adapter', var.get('successAdapter'))
                                            if (PyJsStrictNeq(var.get('options'),var.get('undefined')) and var.get('Object')(var.get('options')).get('spread')):
                                                var.put('adapter', var.get('spreadAdapter'))
                                            var.get(u"this").callprop('_then', var.get('adapter'), var.get('errorAdapter'), var.get('undefined'), var.get(u"this"), var.get('nodeback'))
                                        return var.get(u"this")
                                    PyJs_anonymous_322_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('asCallback', var.get('Promise').get('prototype').put('nodeify', PyJs_anonymous_322_))
                                PyJs_anonymous_321_._set_name('anonymous')
                                var.get('module').put('exports', PyJs_anonymous_321_)
                            PyJs_anonymous_320_._set_name('anonymous')
                            @Js
                            def PyJs_anonymous_323_(_dereq_, module, exports, this, arguments, var=var):
                                var = Scope({'_dereq_':_dereq_, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
                                var.registers(['exports', 'module', '_dereq_'])
                                Js('use strict')
                                @Js
                                def PyJs_anonymous_324_(this, arguments, var=var):
                                    var = Scope({'this':this, 'arguments':arguments}, var)
                                    var.registers(['fillTypes', 'getContextDomain', 'apiRejection', 'PromiseArray', 'catchFilter', 'util', 'tryConvertToPromise', 'INTERNAL', 'es5', 'enableAsyncHooks', 'getContext', 'async', 'NEXT_FILTER', 'APPLY', 'CancellationError', 'Context', 'makeSelfResolutionError', 'CapturedTrace', 'AsyncResource', 'tryCatch', 'nodebackForPromise', 'reflectHandler', 'debug', 'errors', 'disableAsyncHooks', 'Async', 'deferReject', 'getContextAsyncHooks', 'TypeError', 'errorObj', 'createContext', 'UNDEFINED_BINDING', 'getDomain', 'deferResolve', 'getContextDefault', 'Promise', 'Proxyable', 'PassThroughHandlerContext', 'check'])
                                    @Js
                                    def PyJsHoisted_Proxyable_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        pass
                                    PyJsHoisted_Proxyable_.func_name = 'Proxyable'
                                    var.put('Proxyable', PyJsHoisted_Proxyable_)
                                    @Js
                                    def PyJsHoisted_check_(self, executor, this, arguments, var=var):
                                        var = Scope({'self':self, 'executor':executor, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['executor', 'self'])
                                        if ((var.get('self')==var.get(u"null")) or PyJsStrictNeq(var.get('self').get('constructor'),var.get('Promise'))):
                                            PyJsTempException = JsToPyException(var.get('TypeError').create(Js('the promise constructor cannot be invoked directly\n\n    See http://goo.gl/MqrFmX\n')))
                                            raise PyJsTempException
                                        if PyJsStrictNeq(var.get('executor',throw=False).typeof(),Js('function')):
                                            PyJsTempException = JsToPyException(var.get('TypeError').create((Js('expecting a function but got ')+var.get('util').callprop('classString', var.get('executor')))))
                                            raise PyJsTempException
                                    PyJsHoisted_check_.func_name = 'check'
                                    var.put('check', PyJsHoisted_check_)
                                    @Js
                                    def PyJsHoisted_Promise_(executor, this, arguments, var=var):
                                        var = Scope({'executor':executor, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['executor'])
                                        if PyJsStrictNeq(var.get('executor'),var.get('INTERNAL')):
                                            var.get('check')(var.get(u"this"), var.get('executor'))
                                        var.get(u"this").put('_bitField', Js(0.0))
                                        var.get(u"this").put('_fulfillmentHandler0', var.get('undefined'))
                                        var.get(u"this").put('_rejectionHandler0', var.get('undefined'))
                                        var.get(u"this").put('_promise0', var.get('undefined'))
                                        var.get(u"this").put('_receiver0', var.get('undefined'))
                                        var.get(u"this").callprop('_resolveFromExecutor', var.get('executor'))
                                        var.get(u"this").callprop('_promiseCreated')
                                        var.get(u"this").callprop('_fireEvent', Js('promiseCreated'), var.get(u"this"))
                                    PyJsHoisted_Promise_.func_name = 'Promise'
                                    var.put('Promise', PyJsHoisted_Promise_)
                                    @Js
                                    def PyJsHoisted_deferResolve_(v, this, arguments, var=var):
                                        var = Scope({'v':v, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['v'])
                                        var.get(u"this").get('promise').callprop('_resolveCallback', var.get('v'))
                                    PyJsHoisted_deferResolve_.func_name = 'deferResolve'
                                    var.put('deferResolve', PyJsHoisted_deferResolve_)
                                    @Js
                                    def PyJsHoisted_deferReject_(v, this, arguments, var=var):
                                        var = Scope({'v':v, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['v'])
                                        var.get(u"this").get('promise').callprop('_rejectCallback', var.get('v'), Js(False))
                                    PyJsHoisted_deferReject_.func_name = 'deferReject'
                                    var.put('deferReject', PyJsHoisted_deferReject_)
                                    @Js
                                    def PyJsHoisted_fillTypes_(value, this, arguments, var=var):
                                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['p', 'value'])
                                        var.put('p', var.get('Promise').create(var.get('INTERNAL')))
                                        var.get('p').put('_fulfillmentHandler0', var.get('value'))
                                        var.get('p').put('_rejectionHandler0', var.get('value'))
                                        var.get('p').put('_promise0', var.get('value'))
                                        var.get('p').put('_receiver0', var.get('value'))
                                    PyJsHoisted_fillTypes_.func_name = 'fillTypes'
                                    var.put('fillTypes', PyJsHoisted_fillTypes_)
                                    @Js
                                    def PyJs_makeSelfResolutionError_325_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments, 'makeSelfResolutionError':PyJs_makeSelfResolutionError_325_}, var)
                                        var.registers([])
                                        return var.get('TypeError').create(Js('circular promise resolution chain\n\n    See http://goo.gl/MqrFmX\n'))
                                    PyJs_makeSelfResolutionError_325_._set_name('makeSelfResolutionError')
                                    var.put('makeSelfResolutionError', PyJs_makeSelfResolutionError_325_)
                                    @Js
                                    def PyJs_reflectHandler_326_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments, 'reflectHandler':PyJs_reflectHandler_326_}, var)
                                        var.registers([])
                                        return var.get('Promise').get('PromiseInspection').create(var.get(u"this").callprop('_target'))
                                    PyJs_reflectHandler_326_._set_name('reflectHandler')
                                    var.put('reflectHandler', PyJs_reflectHandler_326_)
                                    @Js
                                    def PyJs_apiRejection_327_(msg, this, arguments, var=var):
                                        var = Scope({'msg':msg, 'this':this, 'arguments':arguments, 'apiRejection':PyJs_apiRejection_327_}, var)
                                        var.registers(['msg'])
                                        return var.get('Promise').callprop('reject', var.get('TypeError').create(var.get('msg')))
                                    PyJs_apiRejection_327_._set_name('apiRejection')
                                    var.put('apiRejection', PyJs_apiRejection_327_)
                                    pass
                                    var.put('UNDEFINED_BINDING', Js({}))
                                    var.put('util', var.get('_dereq_')(Js('./util')))
                                    var.get('util').callprop('setReflectHandler', var.get('reflectHandler'))
                                    @Js
                                    def PyJs_getDomain_328_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments, 'getDomain':PyJs_getDomain_328_}, var)
                                        var.registers(['domain'])
                                        var.put('domain', var.get('process').get('domain'))
                                        if PyJsStrictEq(var.get('domain'),var.get('undefined')):
                                            return var.get(u"null")
                                        return var.get('domain')
                                    PyJs_getDomain_328_._set_name('getDomain')
                                    var.put('getDomain', PyJs_getDomain_328_)
                                    @Js
                                    def PyJs_getContextDefault_329_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments, 'getContextDefault':PyJs_getContextDefault_329_}, var)
                                        var.registers([])
                                        return var.get(u"null")
                                    PyJs_getContextDefault_329_._set_name('getContextDefault')
                                    var.put('getContextDefault', PyJs_getContextDefault_329_)
                                    @Js
                                    def PyJs_getContextDomain_330_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments, 'getContextDomain':PyJs_getContextDomain_330_}, var)
                                        var.registers([])
                                        return Js({'domain':var.get('getDomain')(),'async':var.get(u"null")})
                                    PyJs_getContextDomain_330_._set_name('getContextDomain')
                                    var.put('getContextDomain', PyJs_getContextDomain_330_)
                                    var.put('AsyncResource', (var.get('_dereq_')(Js('async_hooks')).get('AsyncResource') if (var.get('util').get('isNode') and var.get('util').get('nodeSupportsAsyncResource')) else var.get(u"null")))
                                    @Js
                                    def PyJs_getContextAsyncHooks_331_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments, 'getContextAsyncHooks':PyJs_getContextAsyncHooks_331_}, var)
                                        var.registers([])
                                        return Js({'domain':var.get('getDomain')(),'async':var.get('AsyncResource').create(Js('Bluebird::Promise'))})
                                    PyJs_getContextAsyncHooks_331_._set_name('getContextAsyncHooks')
                                    var.put('getContextAsyncHooks', PyJs_getContextAsyncHooks_331_)
                                    var.put('getContext', (var.get('getContextDomain') if var.get('util').get('isNode') else var.get('getContextDefault')))
                                    var.get('util').callprop('notEnumerableProp', var.get('Promise'), Js('_getContext'), var.get('getContext'))
                                    @Js
                                    def PyJs_enableAsyncHooks_332_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments, 'enableAsyncHooks':PyJs_enableAsyncHooks_332_}, var)
                                        var.registers([])
                                        var.put('getContext', var.get('getContextAsyncHooks'))
                                        var.get('util').callprop('notEnumerableProp', var.get('Promise'), Js('_getContext'), var.get('getContextAsyncHooks'))
                                    PyJs_enableAsyncHooks_332_._set_name('enableAsyncHooks')
                                    var.put('enableAsyncHooks', PyJs_enableAsyncHooks_332_)
                                    @Js
                                    def PyJs_disableAsyncHooks_333_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments, 'disableAsyncHooks':PyJs_disableAsyncHooks_333_}, var)
                                        var.registers([])
                                        var.put('getContext', var.get('getContextDomain'))
                                        var.get('util').callprop('notEnumerableProp', var.get('Promise'), Js('_getContext'), var.get('getContextDomain'))
                                    PyJs_disableAsyncHooks_333_._set_name('disableAsyncHooks')
                                    var.put('disableAsyncHooks', PyJs_disableAsyncHooks_333_)
                                    var.put('es5', var.get('_dereq_')(Js('./es5')))
                                    var.put('Async', var.get('_dereq_')(Js('./async')))
                                    var.put('async', var.get('Async').create())
                                    var.get('es5').callprop('defineProperty', var.get('Promise'), Js('_async'), Js({'value':var.get('async')}))
                                    var.put('errors', var.get('_dereq_')(Js('./errors')))
                                    var.put('TypeError', var.get('Promise').put('TypeError', var.get('errors').get('TypeError')))
                                    var.get('Promise').put('RangeError', var.get('errors').get('RangeError'))
                                    var.put('CancellationError', var.get('Promise').put('CancellationError', var.get('errors').get('CancellationError')))
                                    var.get('Promise').put('TimeoutError', var.get('errors').get('TimeoutError'))
                                    var.get('Promise').put('OperationalError', var.get('errors').get('OperationalError'))
                                    var.get('Promise').put('RejectionError', var.get('errors').get('OperationalError'))
                                    var.get('Promise').put('AggregateError', var.get('errors').get('AggregateError'))
                                    @Js
                                    def PyJs_INTERNAL_334_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments, 'INTERNAL':PyJs_INTERNAL_334_}, var)
                                        var.registers([])
                                        pass
                                    PyJs_INTERNAL_334_._set_name('INTERNAL')
                                    var.put('INTERNAL', PyJs_INTERNAL_334_)
                                    var.put('APPLY', Js({}))
                                    var.put('NEXT_FILTER', Js({}))
                                    var.put('tryConvertToPromise', var.get('_dereq_')(Js('./thenables'))(var.get('Promise'), var.get('INTERNAL')))
                                    var.put('PromiseArray', var.get('_dereq_')(Js('./promise_array'))(var.get('Promise'), var.get('INTERNAL'), var.get('tryConvertToPromise'), var.get('apiRejection'), var.get('Proxyable')))
                                    var.put('Context', var.get('_dereq_')(Js('./context'))(var.get('Promise')))
                                    var.put('createContext', var.get('Context').get('create'))
                                    var.put('debug', var.get('_dereq_')(Js('./debuggability'))(var.get('Promise'), var.get('Context'), var.get('enableAsyncHooks'), var.get('disableAsyncHooks')))
                                    var.put('CapturedTrace', var.get('debug').get('CapturedTrace'))
                                    var.put('PassThroughHandlerContext', var.get('_dereq_')(Js('./finally'))(var.get('Promise'), var.get('tryConvertToPromise'), var.get('NEXT_FILTER')))
                                    var.put('catchFilter', var.get('_dereq_')(Js('./catch_filter'))(var.get('NEXT_FILTER')))
                                    var.put('nodebackForPromise', var.get('_dereq_')(Js('./nodeback')))
                                    var.put('errorObj', var.get('util').get('errorObj'))
                                    var.put('tryCatch', var.get('util').get('tryCatch'))
                                    pass
                                    pass
                                    @Js
                                    def PyJs_anonymous_335_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return Js('[object Promise]')
                                    PyJs_anonymous_335_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('toString', PyJs_anonymous_335_)
                                    @Js
                                    def PyJs_anonymous_336_(fn, this, arguments, var=var):
                                        var = Scope({'fn':fn, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['len', 'i', 'catchInstances', 'item', 'fn', 'j'])
                                        var.put('len', var.get('arguments').get('length'))
                                        if (var.get('len')>Js(1.0)):
                                            var.put('catchInstances', var.get('Array').create((var.get('len')-Js(1.0))))
                                            var.put('j', Js(0.0))
                                            #for JS loop
                                            var.put('i', Js(0.0))
                                            while (var.get('i')<(var.get('len')-Js(1.0))):
                                                try:
                                                    var.put('item', var.get('arguments').get(var.get('i')))
                                                    if var.get('util').callprop('isObject', var.get('item')):
                                                        var.get('catchInstances').put((var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1)), var.get('item'))
                                                    else:
                                                        return var.get('apiRejection')(((Js('Catch statement predicate: ')+Js('expecting an object but got '))+var.get('util').callprop('classString', var.get('item'))))
                                                finally:
                                                        var.put('i',Js(var.get('i').to_number())+Js(1))
                                            var.get('catchInstances').put('length', var.get('j'))
                                            var.put('fn', var.get('arguments').get(var.get('i')))
                                            if PyJsStrictNeq(var.get('fn',throw=False).typeof(),Js('function')):
                                                PyJsTempException = JsToPyException(var.get('TypeError').create(((Js('The last argument to .catch() ')+Js('must be a function, got '))+var.get('util').callprop('toString', var.get('fn')))))
                                                raise PyJsTempException
                                            return var.get(u"this").callprop('then', var.get('undefined'), var.get('catchFilter')(var.get('catchInstances'), var.get('fn'), var.get(u"this")))
                                        return var.get(u"this").callprop('then', var.get('undefined'), var.get('fn'))
                                    PyJs_anonymous_336_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('caught', var.get('Promise').get('prototype').put('catch', PyJs_anonymous_336_))
                                    @Js
                                    def PyJs_anonymous_337_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return var.get(u"this").callprop('_then', var.get('reflectHandler'), var.get('reflectHandler'), var.get('undefined'), var.get(u"this"), var.get('undefined'))
                                    PyJs_anonymous_337_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('reflect', PyJs_anonymous_337_)
                                    @Js
                                    def PyJs_anonymous_338_(didFulfill, didReject, this, arguments, var=var):
                                        var = Scope({'didFulfill':didFulfill, 'didReject':didReject, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['didReject', 'didFulfill', 'msg'])
                                        if (((var.get('debug').callprop('warnings') and (var.get('arguments').get('length')>Js(0.0))) and PyJsStrictNeq(var.get('didFulfill',throw=False).typeof(),Js('function'))) and PyJsStrictNeq(var.get('didReject',throw=False).typeof(),Js('function'))):
                                            var.put('msg', (Js('.then() only accepts functions but was passed: ')+var.get('util').callprop('classString', var.get('didFulfill'))))
                                            if (var.get('arguments').get('length')>Js(1.0)):
                                                var.put('msg', (Js(', ')+var.get('util').callprop('classString', var.get('didReject'))), '+')
                                            var.get(u"this").callprop('_warn', var.get('msg'))
                                        return var.get(u"this").callprop('_then', var.get('didFulfill'), var.get('didReject'), var.get('undefined'), var.get('undefined'), var.get('undefined'))
                                    PyJs_anonymous_338_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('then', PyJs_anonymous_338_)
                                    @Js
                                    def PyJs_anonymous_339_(didFulfill, didReject, this, arguments, var=var):
                                        var = Scope({'didFulfill':didFulfill, 'didReject':didReject, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['didReject', 'didFulfill', 'promise'])
                                        var.put('promise', var.get(u"this").callprop('_then', var.get('didFulfill'), var.get('didReject'), var.get('undefined'), var.get('undefined'), var.get('undefined')))
                                        var.get('promise').callprop('_setIsFinal')
                                    PyJs_anonymous_339_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('done', PyJs_anonymous_339_)
                                    @Js
                                    def PyJs_anonymous_340_(fn, this, arguments, var=var):
                                        var = Scope({'fn':fn, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['fn'])
                                        if PyJsStrictNeq(var.get('fn',throw=False).typeof(),Js('function')):
                                            return var.get('apiRejection')((Js('expecting a function but got ')+var.get('util').callprop('classString', var.get('fn'))))
                                        return var.get(u"this").callprop('all').callprop('_then', var.get('fn'), var.get('undefined'), var.get('undefined'), var.get('APPLY'), var.get('undefined'))
                                    PyJs_anonymous_340_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('spread', PyJs_anonymous_340_)
                                    @Js
                                    def PyJs_anonymous_341_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers(['ret'])
                                        var.put('ret', Js({'isFulfilled':Js(False),'isRejected':Js(False),'fulfillmentValue':var.get('undefined'),'rejectionReason':var.get('undefined')}))
                                        if var.get(u"this").callprop('isFulfilled'):
                                            var.get('ret').put('fulfillmentValue', var.get(u"this").callprop('value'))
                                            var.get('ret').put('isFulfilled', Js(True))
                                        else:
                                            if var.get(u"this").callprop('isRejected'):
                                                var.get('ret').put('rejectionReason', var.get(u"this").callprop('reason'))
                                                var.get('ret').put('isRejected', Js(True))
                                        return var.get('ret')
                                    PyJs_anonymous_341_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('toJSON', PyJs_anonymous_341_)
                                    @Js
                                    def PyJs_anonymous_342_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        if (var.get('arguments').get('length')>Js(0.0)):
                                            var.get(u"this").callprop('_warn', Js('.all() was passed arguments but it does not take any'))
                                        return var.get('PromiseArray').create(var.get(u"this")).callprop('promise')
                                    PyJs_anonymous_342_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('all', PyJs_anonymous_342_)
                                    @Js
                                    def PyJs_anonymous_343_(fn, this, arguments, var=var):
                                        var = Scope({'fn':fn, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['fn'])
                                        return var.get(u"this").callprop('caught', var.get('util').get('originatesFromRejection'), var.get('fn'))
                                    PyJs_anonymous_343_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('error', PyJs_anonymous_343_)
                                    var.get('Promise').put('getNewLibraryCopy', var.get('module').get('exports'))
                                    @Js
                                    def PyJs_anonymous_344_(val, this, arguments, var=var):
                                        var = Scope({'val':val, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['val'])
                                        return var.get('val').instanceof(var.get('Promise'))
                                    PyJs_anonymous_344_._set_name('anonymous')
                                    var.get('Promise').put('is', PyJs_anonymous_344_)
                                    @Js
                                    def PyJs_anonymous_345_(fn, this, arguments, var=var):
                                        var = Scope({'fn':fn, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['multiArgs', 'result', 'fn', 'ret'])
                                        var.put('ret', var.get('Promise').create(var.get('INTERNAL')))
                                        var.get('ret').callprop('_captureStackTrace')
                                        var.put('multiArgs', (var.get('Object')(var.get('arguments').get('1')).get('multiArgs').neg().neg() if (var.get('arguments').get('length')>Js(1.0)) else Js(False)))
                                        var.put('result', var.get('tryCatch')(var.get('fn'))(var.get('nodebackForPromise')(var.get('ret'), var.get('multiArgs'))))
                                        if PyJsStrictEq(var.get('result'),var.get('errorObj')):
                                            var.get('ret').callprop('_rejectCallback', var.get('result').get('e'), Js(True))
                                        if var.get('ret').callprop('_isFateSealed').neg():
                                            var.get('ret').callprop('_setAsyncGuaranteed')
                                        return var.get('ret')
                                    PyJs_anonymous_345_._set_name('anonymous')
                                    var.get('Promise').put('fromNode', var.get('Promise').put('fromCallback', PyJs_anonymous_345_))
                                    @Js
                                    def PyJs_anonymous_346_(promises, this, arguments, var=var):
                                        var = Scope({'promises':promises, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['promises'])
                                        return var.get('PromiseArray').create(var.get('promises')).callprop('promise')
                                    PyJs_anonymous_346_._set_name('anonymous')
                                    var.get('Promise').put('all', PyJs_anonymous_346_)
                                    @Js
                                    def PyJs_anonymous_347_(obj, this, arguments, var=var):
                                        var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['obj', 'ret'])
                                        var.put('ret', var.get('tryConvertToPromise')(var.get('obj')))
                                        if var.get('ret').instanceof(var.get('Promise')).neg():
                                            var.put('ret', var.get('Promise').create(var.get('INTERNAL')))
                                            var.get('ret').callprop('_captureStackTrace')
                                            var.get('ret').callprop('_setFulfilled')
                                            var.get('ret').put('_rejectionHandler0', var.get('obj'))
                                        return var.get('ret')
                                    PyJs_anonymous_347_._set_name('anonymous')
                                    var.get('Promise').put('cast', PyJs_anonymous_347_)
                                    var.get('Promise').put('resolve', var.get('Promise').put('fulfilled', var.get('Promise').get('cast')))
                                    @Js
                                    def PyJs_anonymous_348_(reason, this, arguments, var=var):
                                        var = Scope({'reason':reason, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['reason', 'ret'])
                                        var.put('ret', var.get('Promise').create(var.get('INTERNAL')))
                                        var.get('ret').callprop('_captureStackTrace')
                                        var.get('ret').callprop('_rejectCallback', var.get('reason'), Js(True))
                                        return var.get('ret')
                                    PyJs_anonymous_348_._set_name('anonymous')
                                    var.get('Promise').put('reject', var.get('Promise').put('rejected', PyJs_anonymous_348_))
                                    @Js
                                    def PyJs_anonymous_349_(fn, this, arguments, var=var):
                                        var = Scope({'fn':fn, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['fn'])
                                        if PyJsStrictNeq(var.get('fn',throw=False).typeof(),Js('function')):
                                            PyJsTempException = JsToPyException(var.get('TypeError').create((Js('expecting a function but got ')+var.get('util').callprop('classString', var.get('fn')))))
                                            raise PyJsTempException
                                        return var.get('async').callprop('setScheduler', var.get('fn'))
                                    PyJs_anonymous_349_._set_name('anonymous')
                                    var.get('Promise').put('setScheduler', PyJs_anonymous_349_)
                                    @Js
                                    def PyJs_anonymous_350_(didFulfill, didReject, _, receiver, internalData, this, arguments, var=var):
                                        var = Scope({'didFulfill':didFulfill, 'didReject':didReject, '_':_, 'receiver':receiver, 'internalData':internalData, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['context', 'didFulfill', 'target', 'didReject', 'internalData', 'handler', 'promise', 'settler', '_', 'receiver', 'bitField', 'haveInternalData', 'value'])
                                        var.put('haveInternalData', PyJsStrictNeq(var.get('internalData'),var.get('undefined')))
                                        var.put('promise', (var.get('internalData') if var.get('haveInternalData') else var.get('Promise').create(var.get('INTERNAL'))))
                                        var.put('target', var.get(u"this").callprop('_target'))
                                        var.put('bitField', var.get('target').get('_bitField'))
                                        if var.get('haveInternalData').neg():
                                            var.get('promise').callprop('_propagateFrom', var.get(u"this"), Js(3.0))
                                            var.get('promise').callprop('_captureStackTrace')
                                            if (PyJsStrictEq(var.get('receiver'),var.get('undefined')) and PyJsStrictNeq((var.get(u"this").get('_bitField')&Js(2097152.0)),Js(0.0))):
                                                if PyJsStrictEq((var.get('bitField')&Js(50397184.0)),Js(0.0)).neg():
                                                    var.put('receiver', var.get(u"this").callprop('_boundValue'))
                                                else:
                                                    var.put('receiver', (var.get('undefined') if PyJsStrictEq(var.get('target'),var.get(u"this")) else var.get(u"this").get('_boundTo')))
                                            var.get(u"this").callprop('_fireEvent', Js('promiseChained'), var.get(u"this"), var.get('promise'))
                                        var.put('context', var.get('getContext')())
                                        if PyJsStrictEq((var.get('bitField')&Js(50397184.0)),Js(0.0)).neg():
                                            var.put('settler', var.get('target').get('_settlePromiseCtx'))
                                            if PyJsStrictNeq((var.get('bitField')&Js(33554432.0)),Js(0.0)):
                                                var.put('value', var.get('target').get('_rejectionHandler0'))
                                                var.put('handler', var.get('didFulfill'))
                                            else:
                                                if PyJsStrictNeq((var.get('bitField')&Js(16777216.0)),Js(0.0)):
                                                    var.put('value', var.get('target').get('_fulfillmentHandler0'))
                                                    var.put('handler', var.get('didReject'))
                                                    var.get('target').callprop('_unsetRejectionIsUnhandled')
                                                else:
                                                    var.put('settler', var.get('target').get('_settlePromiseLateCancellationObserver'))
                                                    var.put('value', var.get('CancellationError').create(Js('late cancellation observer')))
                                                    var.get('target').callprop('_attachExtraTrace', var.get('value'))
                                                    var.put('handler', var.get('didReject'))
                                            var.get('async').callprop('invoke', var.get('settler'), var.get('target'), Js({'handler':var.get('util').callprop('contextBind', var.get('context'), var.get('handler')),'promise':var.get('promise'),'receiver':var.get('receiver'),'value':var.get('value')}))
                                        else:
                                            var.get('target').callprop('_addCallbacks', var.get('didFulfill'), var.get('didReject'), var.get('promise'), var.get('receiver'), var.get('context'))
                                        return var.get('promise')
                                    PyJs_anonymous_350_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_then', PyJs_anonymous_350_)
                                    @Js
                                    def PyJs_anonymous_351_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return (var.get(u"this").get('_bitField')&Js(65535.0))
                                    PyJs_anonymous_351_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_length', PyJs_anonymous_351_)
                                    @Js
                                    def PyJs_anonymous_352_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return PyJsStrictNeq((var.get(u"this").get('_bitField')&Js(117506048.0)),Js(0.0))
                                    PyJs_anonymous_352_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_isFateSealed', PyJs_anonymous_352_)
                                    @Js
                                    def PyJs_anonymous_353_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return PyJsStrictEq((var.get(u"this").get('_bitField')&Js(67108864.0)),Js(67108864.0))
                                    PyJs_anonymous_353_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_isFollowing', PyJs_anonymous_353_)
                                    @Js
                                    def PyJs_anonymous_354_(len, this, arguments, var=var):
                                        var = Scope({'len':len, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['len'])
                                        var.get(u"this").put('_bitField', ((var.get(u"this").get('_bitField')&(-Js(65536.0)))|(var.get('len')&Js(65535.0))))
                                    PyJs_anonymous_354_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_setLength', PyJs_anonymous_354_)
                                    @Js
                                    def PyJs_anonymous_355_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        var.get(u"this").put('_bitField', (var.get(u"this").get('_bitField')|Js(33554432.0)))
                                        var.get(u"this").callprop('_fireEvent', Js('promiseFulfilled'), var.get(u"this"))
                                    PyJs_anonymous_355_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_setFulfilled', PyJs_anonymous_355_)
                                    @Js
                                    def PyJs_anonymous_356_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        var.get(u"this").put('_bitField', (var.get(u"this").get('_bitField')|Js(16777216.0)))
                                        var.get(u"this").callprop('_fireEvent', Js('promiseRejected'), var.get(u"this"))
                                    PyJs_anonymous_356_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_setRejected', PyJs_anonymous_356_)
                                    @Js
                                    def PyJs_anonymous_357_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        var.get(u"this").put('_bitField', (var.get(u"this").get('_bitField')|Js(67108864.0)))
                                        var.get(u"this").callprop('_fireEvent', Js('promiseResolved'), var.get(u"this"))
                                    PyJs_anonymous_357_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_setFollowing', PyJs_anonymous_357_)
                                    @Js
                                    def PyJs_anonymous_358_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        var.get(u"this").put('_bitField', (var.get(u"this").get('_bitField')|Js(4194304.0)))
                                    PyJs_anonymous_358_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_setIsFinal', PyJs_anonymous_358_)
                                    @Js
                                    def PyJs_anonymous_359_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return ((var.get(u"this").get('_bitField')&Js(4194304.0))>Js(0.0))
                                    PyJs_anonymous_359_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_isFinal', PyJs_anonymous_359_)
                                    @Js
                                    def PyJs_anonymous_360_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        var.get(u"this").put('_bitField', (var.get(u"this").get('_bitField')&(~Js(65536.0))))
                                    PyJs_anonymous_360_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_unsetCancelled', PyJs_anonymous_360_)
                                    @Js
                                    def PyJs_anonymous_361_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        var.get(u"this").put('_bitField', (var.get(u"this").get('_bitField')|Js(65536.0)))
                                        var.get(u"this").callprop('_fireEvent', Js('promiseCancelled'), var.get(u"this"))
                                    PyJs_anonymous_361_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_setCancelled', PyJs_anonymous_361_)
                                    @Js
                                    def PyJs_anonymous_362_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        var.get(u"this").put('_bitField', (var.get(u"this").get('_bitField')|Js(8388608.0)))
                                    PyJs_anonymous_362_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_setWillBeCancelled', PyJs_anonymous_362_)
                                    @Js
                                    def PyJs_anonymous_363_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers(['bitField'])
                                        if var.get('async').callprop('hasCustomScheduler'):
                                            return var.get('undefined')
                                        var.put('bitField', var.get(u"this").get('_bitField'))
                                        var.get(u"this").put('_bitField', (var.get('bitField')|(((var.get('bitField')&Js(536870912.0))>>Js(2.0))^Js(134217728.0))))
                                    PyJs_anonymous_363_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_setAsyncGuaranteed', PyJs_anonymous_363_)
                                    @Js
                                    def PyJs_anonymous_364_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        var.get(u"this").put('_bitField', ((var.get(u"this").get('_bitField')|Js(536870912.0))&(~Js(134217728.0))))
                                    PyJs_anonymous_364_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_setNoAsyncGuarantee', PyJs_anonymous_364_)
                                    @Js
                                    def PyJs_anonymous_365_(index, this, arguments, var=var):
                                        var = Scope({'index':index, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['index', 'ret'])
                                        var.put('ret', (var.get(u"this").get('_receiver0') if PyJsStrictEq(var.get('index'),Js(0.0)) else var.get(u"this").get((((var.get('index')*Js(4.0))-Js(4.0))+Js(3.0)))))
                                        if PyJsStrictEq(var.get('ret'),var.get('UNDEFINED_BINDING')):
                                            return var.get('undefined')
                                        else:
                                            if (PyJsStrictEq(var.get('ret'),var.get('undefined')) and var.get(u"this").callprop('_isBound')):
                                                return var.get(u"this").callprop('_boundValue')
                                        return var.get('ret')
                                    PyJs_anonymous_365_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_receiverAt', PyJs_anonymous_365_)
                                    @Js
                                    def PyJs_anonymous_366_(index, this, arguments, var=var):
                                        var = Scope({'index':index, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['index'])
                                        return var.get(u"this").get((((var.get('index')*Js(4.0))-Js(4.0))+Js(2.0)))
                                    PyJs_anonymous_366_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_promiseAt', PyJs_anonymous_366_)
                                    @Js
                                    def PyJs_anonymous_367_(index, this, arguments, var=var):
                                        var = Scope({'index':index, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['index'])
                                        return var.get(u"this").get((((var.get('index')*Js(4.0))-Js(4.0))+Js(0.0)))
                                    PyJs_anonymous_367_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_fulfillmentHandlerAt', PyJs_anonymous_367_)
                                    @Js
                                    def PyJs_anonymous_368_(index, this, arguments, var=var):
                                        var = Scope({'index':index, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['index'])
                                        return var.get(u"this").get((((var.get('index')*Js(4.0))-Js(4.0))+Js(1.0)))
                                    PyJs_anonymous_368_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_rejectionHandlerAt', PyJs_anonymous_368_)
                                    @Js
                                    def PyJs_anonymous_369_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        pass
                                    PyJs_anonymous_369_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_boundValue', PyJs_anonymous_369_)
                                    @Js
                                    def PyJs_anonymous_370_(follower, this, arguments, var=var):
                                        var = Scope({'follower':follower, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['promise', 'receiver', 'bitField', 'fulfill', 'reject', 'follower'])
                                        var.put('bitField', var.get('follower').get('_bitField'))
                                        var.put('fulfill', var.get('follower').get('_fulfillmentHandler0'))
                                        var.put('reject', var.get('follower').get('_rejectionHandler0'))
                                        var.put('promise', var.get('follower').get('_promise0'))
                                        var.put('receiver', var.get('follower').callprop('_receiverAt', Js(0.0)))
                                        if PyJsStrictEq(var.get('receiver'),var.get('undefined')):
                                            var.put('receiver', var.get('UNDEFINED_BINDING'))
                                        var.get(u"this").callprop('_addCallbacks', var.get('fulfill'), var.get('reject'), var.get('promise'), var.get('receiver'), var.get(u"null"))
                                    PyJs_anonymous_370_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_migrateCallback0', PyJs_anonymous_370_)
                                    @Js
                                    def PyJs_anonymous_371_(follower, index, this, arguments, var=var):
                                        var = Scope({'follower':follower, 'index':index, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['promise', 'receiver', 'fulfill', 'reject', 'index', 'follower'])
                                        var.put('fulfill', var.get('follower').callprop('_fulfillmentHandlerAt', var.get('index')))
                                        var.put('reject', var.get('follower').callprop('_rejectionHandlerAt', var.get('index')))
                                        var.put('promise', var.get('follower').callprop('_promiseAt', var.get('index')))
                                        var.put('receiver', var.get('follower').callprop('_receiverAt', var.get('index')))
                                        if PyJsStrictEq(var.get('receiver'),var.get('undefined')):
                                            var.put('receiver', var.get('UNDEFINED_BINDING'))
                                        var.get(u"this").callprop('_addCallbacks', var.get('fulfill'), var.get('reject'), var.get('promise'), var.get('receiver'), var.get(u"null"))
                                    PyJs_anonymous_371_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_migrateCallbackAt', PyJs_anonymous_371_)
                                    @Js
                                    def PyJs_anonymous_372_(fulfill, reject, promise, receiver, context, this, arguments, var=var):
                                        var = Scope({'fulfill':fulfill, 'reject':reject, 'promise':promise, 'receiver':receiver, 'context':context, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['context', 'promise', 'receiver', 'base', 'fulfill', 'reject', 'index'])
                                        var.put('index', var.get(u"this").callprop('_length'))
                                        if (var.get('index')>=(Js(65535.0)-Js(4.0))):
                                            var.put('index', Js(0.0))
                                            var.get(u"this").callprop('_setLength', Js(0.0))
                                        if PyJsStrictEq(var.get('index'),Js(0.0)):
                                            var.get(u"this").put('_promise0', var.get('promise'))
                                            var.get(u"this").put('_receiver0', var.get('receiver'))
                                            if PyJsStrictEq(var.get('fulfill',throw=False).typeof(),Js('function')):
                                                var.get(u"this").put('_fulfillmentHandler0', var.get('util').callprop('contextBind', var.get('context'), var.get('fulfill')))
                                            if PyJsStrictEq(var.get('reject',throw=False).typeof(),Js('function')):
                                                var.get(u"this").put('_rejectionHandler0', var.get('util').callprop('contextBind', var.get('context'), var.get('reject')))
                                        else:
                                            var.put('base', ((var.get('index')*Js(4.0))-Js(4.0)))
                                            var.get(u"this").put((var.get('base')+Js(2.0)), var.get('promise'))
                                            var.get(u"this").put((var.get('base')+Js(3.0)), var.get('receiver'))
                                            if PyJsStrictEq(var.get('fulfill',throw=False).typeof(),Js('function')):
                                                var.get(u"this").put((var.get('base')+Js(0.0)), var.get('util').callprop('contextBind', var.get('context'), var.get('fulfill')))
                                            if PyJsStrictEq(var.get('reject',throw=False).typeof(),Js('function')):
                                                var.get(u"this").put((var.get('base')+Js(1.0)), var.get('util').callprop('contextBind', var.get('context'), var.get('reject')))
                                        var.get(u"this").callprop('_setLength', (var.get('index')+Js(1.0)))
                                        return var.get('index')
                                    PyJs_anonymous_372_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_addCallbacks', PyJs_anonymous_372_)
                                    @Js
                                    def PyJs_anonymous_373_(proxyable, arg, this, arguments, var=var):
                                        var = Scope({'proxyable':proxyable, 'arg':arg, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['arg', 'proxyable'])
                                        var.get(u"this").callprop('_addCallbacks', var.get('undefined'), var.get('undefined'), var.get('arg'), var.get('proxyable'), var.get(u"null"))
                                    PyJs_anonymous_373_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_proxy', PyJs_anonymous_373_)
                                    @Js
                                    def PyJs_anonymous_374_(value, shouldBind, this, arguments, var=var):
                                        var = Scope({'value':value, 'shouldBind':shouldBind, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['len', 'i', 'reason', 'promise', 'bitField', 'shouldBind', 'maybePromise', 'value'])
                                        if PyJsStrictNeq((var.get(u"this").get('_bitField')&Js(117506048.0)),Js(0.0)):
                                            return var.get('undefined')
                                        if PyJsStrictEq(var.get('value'),var.get(u"this")):
                                            return var.get(u"this").callprop('_rejectCallback', var.get('makeSelfResolutionError')(), Js(False))
                                        var.put('maybePromise', var.get('tryConvertToPromise')(var.get('value'), var.get(u"this")))
                                        if var.get('maybePromise').instanceof(var.get('Promise')).neg():
                                            return var.get(u"this").callprop('_fulfill', var.get('value'))
                                        if var.get('shouldBind'):
                                            var.get(u"this").callprop('_propagateFrom', var.get('maybePromise'), Js(2.0))
                                        var.put('promise', var.get('maybePromise').callprop('_target'))
                                        if PyJsStrictEq(var.get('promise'),var.get(u"this")):
                                            var.get(u"this").callprop('_reject', var.get('makeSelfResolutionError')())
                                            return var.get('undefined')
                                        var.put('bitField', var.get('promise').get('_bitField'))
                                        if PyJsStrictEq((var.get('bitField')&Js(50397184.0)),Js(0.0)):
                                            var.put('len', var.get(u"this").callprop('_length'))
                                            if (var.get('len')>Js(0.0)):
                                                var.get('promise').callprop('_migrateCallback0', var.get(u"this"))
                                            #for JS loop
                                            var.put('i', Js(1.0))
                                            while (var.get('i')<var.get('len')):
                                                try:
                                                    var.get('promise').callprop('_migrateCallbackAt', var.get(u"this"), var.get('i'))
                                                finally:
                                                        var.put('i',Js(var.get('i').to_number())+Js(1))
                                            var.get(u"this").callprop('_setFollowing')
                                            var.get(u"this").callprop('_setLength', Js(0.0))
                                            var.get(u"this").callprop('_setFollowee', var.get('maybePromise'))
                                        else:
                                            if PyJsStrictNeq((var.get('bitField')&Js(33554432.0)),Js(0.0)):
                                                var.get(u"this").callprop('_fulfill', var.get('promise').callprop('_value'))
                                            else:
                                                if PyJsStrictNeq((var.get('bitField')&Js(16777216.0)),Js(0.0)):
                                                    var.get(u"this").callprop('_reject', var.get('promise').callprop('_reason'))
                                                else:
                                                    var.put('reason', var.get('CancellationError').create(Js('late cancellation observer')))
                                                    var.get('promise').callprop('_attachExtraTrace', var.get('reason'))
                                                    var.get(u"this").callprop('_reject', var.get('reason'))
                                    PyJs_anonymous_374_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_resolveCallback', PyJs_anonymous_374_)
                                    @Js
                                    def PyJs_anonymous_375_(reason, synchronous, ignoreNonErrorWarnings, this, arguments, var=var):
                                        var = Scope({'reason':reason, 'synchronous':synchronous, 'ignoreNonErrorWarnings':ignoreNonErrorWarnings, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['trace', 'ignoreNonErrorWarnings', 'reason', 'message', 'hasStack', 'synchronous'])
                                        var.put('trace', var.get('util').callprop('ensureErrorObject', var.get('reason')))
                                        var.put('hasStack', PyJsStrictEq(var.get('trace'),var.get('reason')))
                                        if ((var.get('hasStack').neg() and var.get('ignoreNonErrorWarnings').neg()) and var.get('debug').callprop('warnings')):
                                            var.put('message', (Js('a promise was rejected with a non-error: ')+var.get('util').callprop('classString', var.get('reason'))))
                                            var.get(u"this").callprop('_warn', var.get('message'), Js(True))
                                        var.get(u"this").callprop('_attachExtraTrace', var.get('trace'), (var.get('hasStack') if var.get('synchronous') else Js(False)))
                                        var.get(u"this").callprop('_reject', var.get('reason'))
                                    PyJs_anonymous_375_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_rejectCallback', PyJs_anonymous_375_)
                                    @Js
                                    def PyJs_anonymous_376_(executor, this, arguments, var=var):
                                        var = Scope({'executor':executor, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['executor', 'synchronous', 'r', 'promise'])
                                        if PyJsStrictEq(var.get('executor'),var.get('INTERNAL')):
                                            return var.get('undefined')
                                        var.put('promise', var.get(u"this"))
                                        var.get(u"this").callprop('_captureStackTrace')
                                        var.get(u"this").callprop('_pushContext')
                                        var.put('synchronous', Js(True))
                                        @Js
                                        def PyJs_anonymous_377_(value, this, arguments, var=var):
                                            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                                            var.registers(['value'])
                                            var.get('promise').callprop('_resolveCallback', var.get('value'))
                                        PyJs_anonymous_377_._set_name('anonymous')
                                        @Js
                                        def PyJs_anonymous_378_(reason, this, arguments, var=var):
                                            var = Scope({'reason':reason, 'this':this, 'arguments':arguments}, var)
                                            var.registers(['reason'])
                                            var.get('promise').callprop('_rejectCallback', var.get('reason'), var.get('synchronous'))
                                        PyJs_anonymous_378_._set_name('anonymous')
                                        var.put('r', var.get(u"this").callprop('_execute', var.get('executor'), PyJs_anonymous_377_, PyJs_anonymous_378_))
                                        var.put('synchronous', Js(False))
                                        var.get(u"this").callprop('_popContext')
                                        if PyJsStrictNeq(var.get('r'),var.get('undefined')):
                                            var.get('promise').callprop('_rejectCallback', var.get('r'), Js(True))
                                    PyJs_anonymous_376_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_resolveFromExecutor', PyJs_anonymous_376_)
                                    @Js
                                    def PyJs_anonymous_379_(handler, receiver, value, promise, this, arguments, var=var):
                                        var = Scope({'handler':handler, 'receiver':receiver, 'value':value, 'promise':promise, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['x', 'handler', 'promise', 'receiver', 'bitField', 'promiseCreated', 'value'])
                                        var.put('bitField', var.get('promise').get('_bitField'))
                                        if PyJsStrictNeq((var.get('bitField')&Js(65536.0)),Js(0.0)):
                                            return var.get('undefined')
                                        var.get('promise').callprop('_pushContext')
                                        pass
                                        if PyJsStrictEq(var.get('receiver'),var.get('APPLY')):
                                            if (var.get('value').neg() or PyJsStrictNeq(var.get('value').get('length').typeof(),Js('number'))):
                                                var.put('x', var.get('errorObj'))
                                                var.get('x').put('e', var.get('TypeError').create((Js('cannot .spread() a non-array: ')+var.get('util').callprop('classString', var.get('value')))))
                                            else:
                                                var.put('x', var.get('tryCatch')(var.get('handler')).callprop('apply', var.get(u"this").callprop('_boundValue'), var.get('value')))
                                        else:
                                            var.put('x', var.get('tryCatch')(var.get('handler')).callprop('call', var.get('receiver'), var.get('value')))
                                        var.put('promiseCreated', var.get('promise').callprop('_popContext'))
                                        var.put('bitField', var.get('promise').get('_bitField'))
                                        if PyJsStrictNeq((var.get('bitField')&Js(65536.0)),Js(0.0)):
                                            return var.get('undefined')
                                        if PyJsStrictEq(var.get('x'),var.get('NEXT_FILTER')):
                                            var.get('promise').callprop('_reject', var.get('value'))
                                        else:
                                            if PyJsStrictEq(var.get('x'),var.get('errorObj')):
                                                var.get('promise').callprop('_rejectCallback', var.get('x').get('e'), Js(False))
                                            else:
                                                var.get('debug').callprop('checkForgottenReturns', var.get('x'), var.get('promiseCreated'), Js(''), var.get('promise'), var.get(u"this"))
                                                var.get('promise').callprop('_resolveCallback', var.get('x'))
                                    PyJs_anonymous_379_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_settlePromiseFromHandler', PyJs_anonymous_379_)
                                    @Js
                                    def PyJs_anonymous_380_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers(['ret'])
                                        var.put('ret', var.get(u"this"))
                                        while var.get('ret').callprop('_isFollowing'):
                                            var.put('ret', var.get('ret').callprop('_followee'))
                                        return var.get('ret')
                                    PyJs_anonymous_380_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_target', PyJs_anonymous_380_)
                                    @Js
                                    def PyJs_anonymous_381_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return var.get(u"this").get('_rejectionHandler0')
                                    PyJs_anonymous_381_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_followee', PyJs_anonymous_381_)
                                    @Js
                                    def PyJs_anonymous_382_(promise, this, arguments, var=var):
                                        var = Scope({'promise':promise, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['promise'])
                                        var.get(u"this").put('_rejectionHandler0', var.get('promise'))
                                    PyJs_anonymous_382_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_setFollowee', PyJs_anonymous_382_)
                                    @Js
                                    def PyJs_anonymous_383_(promise, handler, receiver, value, this, arguments, var=var):
                                        var = Scope({'promise':promise, 'handler':handler, 'receiver':receiver, 'value':value, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['isPromise', 'handler', 'promise', 'receiver', 'asyncGuaranteed', 'bitField', 'value'])
                                        var.put('isPromise', var.get('promise').instanceof(var.get('Promise')))
                                        var.put('bitField', var.get(u"this").get('_bitField'))
                                        var.put('asyncGuaranteed', PyJsStrictNeq((var.get('bitField')&Js(134217728.0)),Js(0.0)))
                                        if PyJsStrictNeq((var.get('bitField')&Js(65536.0)),Js(0.0)):
                                            if var.get('isPromise'):
                                                var.get('promise').callprop('_invokeInternalOnCancel')
                                            if (var.get('receiver').instanceof(var.get('PassThroughHandlerContext')) and var.get('receiver').callprop('isFinallyHandler')):
                                                var.get('receiver').put('cancelPromise', var.get('promise'))
                                                if PyJsStrictEq(var.get('tryCatch')(var.get('handler')).callprop('call', var.get('receiver'), var.get('value')),var.get('errorObj')):
                                                    var.get('promise').callprop('_reject', var.get('errorObj').get('e'))
                                            else:
                                                if PyJsStrictEq(var.get('handler'),var.get('reflectHandler')):
                                                    var.get('promise').callprop('_fulfill', var.get('reflectHandler').callprop('call', var.get('receiver')))
                                                else:
                                                    if var.get('receiver').instanceof(var.get('Proxyable')):
                                                        var.get('receiver').callprop('_promiseCancelled', var.get('promise'))
                                                    else:
                                                        if (var.get('isPromise') or var.get('promise').instanceof(var.get('PromiseArray'))):
                                                            var.get('promise').callprop('_cancel')
                                                        else:
                                                            var.get('receiver').callprop('cancel')
                                        else:
                                            if PyJsStrictEq(var.get('handler',throw=False).typeof(),Js('function')):
                                                if var.get('isPromise').neg():
                                                    var.get('handler').callprop('call', var.get('receiver'), var.get('value'), var.get('promise'))
                                                else:
                                                    if var.get('asyncGuaranteed'):
                                                        var.get('promise').callprop('_setAsyncGuaranteed')
                                                    var.get(u"this").callprop('_settlePromiseFromHandler', var.get('handler'), var.get('receiver'), var.get('value'), var.get('promise'))
                                            else:
                                                if var.get('receiver').instanceof(var.get('Proxyable')):
                                                    if var.get('receiver').callprop('_isResolved').neg():
                                                        if PyJsStrictNeq((var.get('bitField')&Js(33554432.0)),Js(0.0)):
                                                            var.get('receiver').callprop('_promiseFulfilled', var.get('value'), var.get('promise'))
                                                        else:
                                                            var.get('receiver').callprop('_promiseRejected', var.get('value'), var.get('promise'))
                                                else:
                                                    if var.get('isPromise'):
                                                        if var.get('asyncGuaranteed'):
                                                            var.get('promise').callprop('_setAsyncGuaranteed')
                                                        if PyJsStrictNeq((var.get('bitField')&Js(33554432.0)),Js(0.0)):
                                                            var.get('promise').callprop('_fulfill', var.get('value'))
                                                        else:
                                                            var.get('promise').callprop('_reject', var.get('value'))
                                    PyJs_anonymous_383_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_settlePromise', PyJs_anonymous_383_)
                                    @Js
                                    def PyJs_anonymous_384_(ctx, this, arguments, var=var):
                                        var = Scope({'ctx':ctx, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['handler', 'promise', 'receiver', 'ctx', 'value'])
                                        var.put('handler', var.get('ctx').get('handler'))
                                        var.put('promise', var.get('ctx').get('promise'))
                                        var.put('receiver', var.get('ctx').get('receiver'))
                                        var.put('value', var.get('ctx').get('value'))
                                        if PyJsStrictEq(var.get('handler',throw=False).typeof(),Js('function')):
                                            if var.get('promise').instanceof(var.get('Promise')).neg():
                                                var.get('handler').callprop('call', var.get('receiver'), var.get('value'), var.get('promise'))
                                            else:
                                                var.get(u"this").callprop('_settlePromiseFromHandler', var.get('handler'), var.get('receiver'), var.get('value'), var.get('promise'))
                                        else:
                                            if var.get('promise').instanceof(var.get('Promise')):
                                                var.get('promise').callprop('_reject', var.get('value'))
                                    PyJs_anonymous_384_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_settlePromiseLateCancellationObserver', PyJs_anonymous_384_)
                                    @Js
                                    def PyJs_anonymous_385_(ctx, this, arguments, var=var):
                                        var = Scope({'ctx':ctx, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['ctx'])
                                        var.get(u"this").callprop('_settlePromise', var.get('ctx').get('promise'), var.get('ctx').get('handler'), var.get('ctx').get('receiver'), var.get('ctx').get('value'))
                                    PyJs_anonymous_385_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_settlePromiseCtx', PyJs_anonymous_385_)
                                    @Js
                                    def PyJs_anonymous_386_(handler, value, bitField, this, arguments, var=var):
                                        var = Scope({'handler':handler, 'value':value, 'bitField':bitField, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['handler', 'promise', 'receiver', 'bitField', 'value'])
                                        var.put('promise', var.get(u"this").get('_promise0'))
                                        var.put('receiver', var.get(u"this").callprop('_receiverAt', Js(0.0)))
                                        var.get(u"this").put('_promise0', var.get('undefined'))
                                        var.get(u"this").put('_receiver0', var.get('undefined'))
                                        var.get(u"this").callprop('_settlePromise', var.get('promise'), var.get('handler'), var.get('receiver'), var.get('value'))
                                    PyJs_anonymous_386_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_settlePromise0', PyJs_anonymous_386_)
                                    @Js
                                    def PyJs_anonymous_387_(index, this, arguments, var=var):
                                        var = Scope({'index':index, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['base', 'index'])
                                        var.put('base', ((var.get('index')*Js(4.0))-Js(4.0)))
                                        var.get(u"this").put((var.get('base')+Js(2.0)), var.get(u"this").put((var.get('base')+Js(3.0)), var.get(u"this").put((var.get('base')+Js(0.0)), var.get(u"this").put((var.get('base')+Js(1.0)), var.get('undefined')))))
                                    PyJs_anonymous_387_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_clearCallbackDataAtIndex', PyJs_anonymous_387_)
                                    @Js
                                    def PyJs_anonymous_388_(value, this, arguments, var=var):
                                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['err', 'bitField', 'value'])
                                        var.put('bitField', var.get(u"this").get('_bitField'))
                                        if PyJsBshift((var.get('bitField')&Js(117506048.0)),Js(16.0)):
                                            return var.get('undefined')
                                        if PyJsStrictEq(var.get('value'),var.get(u"this")):
                                            var.put('err', var.get('makeSelfResolutionError')())
                                            var.get(u"this").callprop('_attachExtraTrace', var.get('err'))
                                            return var.get(u"this").callprop('_reject', var.get('err'))
                                        var.get(u"this").callprop('_setFulfilled')
                                        var.get(u"this").put('_rejectionHandler0', var.get('value'))
                                        if ((var.get('bitField')&Js(65535.0))>Js(0.0)):
                                            if PyJsStrictNeq((var.get('bitField')&Js(134217728.0)),Js(0.0)):
                                                var.get(u"this").callprop('_settlePromises')
                                            else:
                                                var.get('async').callprop('settlePromises', var.get(u"this"))
                                            var.get(u"this").callprop('_dereferenceTrace')
                                    PyJs_anonymous_388_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_fulfill', PyJs_anonymous_388_)
                                    @Js
                                    def PyJs_anonymous_389_(reason, this, arguments, var=var):
                                        var = Scope({'reason':reason, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['reason', 'bitField'])
                                        var.put('bitField', var.get(u"this").get('_bitField'))
                                        if PyJsBshift((var.get('bitField')&Js(117506048.0)),Js(16.0)):
                                            return var.get('undefined')
                                        var.get(u"this").callprop('_setRejected')
                                        var.get(u"this").put('_fulfillmentHandler0', var.get('reason'))
                                        if var.get(u"this").callprop('_isFinal'):
                                            return var.get('async').callprop('fatalError', var.get('reason'), var.get('util').get('isNode'))
                                        if ((var.get('bitField')&Js(65535.0))>Js(0.0)):
                                            var.get('async').callprop('settlePromises', var.get(u"this"))
                                        else:
                                            var.get(u"this").callprop('_ensurePossibleRejectionHandled')
                                    PyJs_anonymous_389_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_reject', PyJs_anonymous_389_)
                                    @Js
                                    def PyJs_anonymous_390_(len, value, this, arguments, var=var):
                                        var = Scope({'len':len, 'value':value, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['len', 'i', 'handler', 'promise', 'receiver', 'value'])
                                        #for JS loop
                                        var.put('i', Js(1.0))
                                        while (var.get('i')<var.get('len')):
                                            try:
                                                var.put('handler', var.get(u"this").callprop('_fulfillmentHandlerAt', var.get('i')))
                                                var.put('promise', var.get(u"this").callprop('_promiseAt', var.get('i')))
                                                var.put('receiver', var.get(u"this").callprop('_receiverAt', var.get('i')))
                                                var.get(u"this").callprop('_clearCallbackDataAtIndex', var.get('i'))
                                                var.get(u"this").callprop('_settlePromise', var.get('promise'), var.get('handler'), var.get('receiver'), var.get('value'))
                                            finally:
                                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                                    PyJs_anonymous_390_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_fulfillPromises', PyJs_anonymous_390_)
                                    @Js
                                    def PyJs_anonymous_391_(len, reason, this, arguments, var=var):
                                        var = Scope({'len':len, 'reason':reason, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['len', 'i', 'reason', 'handler', 'promise', 'receiver'])
                                        #for JS loop
                                        var.put('i', Js(1.0))
                                        while (var.get('i')<var.get('len')):
                                            try:
                                                var.put('handler', var.get(u"this").callprop('_rejectionHandlerAt', var.get('i')))
                                                var.put('promise', var.get(u"this").callprop('_promiseAt', var.get('i')))
                                                var.put('receiver', var.get(u"this").callprop('_receiverAt', var.get('i')))
                                                var.get(u"this").callprop('_clearCallbackDataAtIndex', var.get('i'))
                                                var.get(u"this").callprop('_settlePromise', var.get('promise'), var.get('handler'), var.get('receiver'), var.get('reason'))
                                            finally:
                                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                                    PyJs_anonymous_391_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_rejectPromises', PyJs_anonymous_391_)
                                    @Js
                                    def PyJs_anonymous_392_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers(['len', 'reason', 'bitField', 'value'])
                                        var.put('bitField', var.get(u"this").get('_bitField'))
                                        var.put('len', (var.get('bitField')&Js(65535.0)))
                                        if (var.get('len')>Js(0.0)):
                                            if PyJsStrictNeq((var.get('bitField')&Js(16842752.0)),Js(0.0)):
                                                var.put('reason', var.get(u"this").get('_fulfillmentHandler0'))
                                                var.get(u"this").callprop('_settlePromise0', var.get(u"this").get('_rejectionHandler0'), var.get('reason'), var.get('bitField'))
                                                var.get(u"this").callprop('_rejectPromises', var.get('len'), var.get('reason'))
                                            else:
                                                var.put('value', var.get(u"this").get('_rejectionHandler0'))
                                                var.get(u"this").callprop('_settlePromise0', var.get(u"this").get('_fulfillmentHandler0'), var.get('value'), var.get('bitField'))
                                                var.get(u"this").callprop('_fulfillPromises', var.get('len'), var.get('value'))
                                            var.get(u"this").callprop('_setLength', Js(0.0))
                                        var.get(u"this").callprop('_clearCancellationData')
                                    PyJs_anonymous_392_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_settlePromises', PyJs_anonymous_392_)
                                    @Js
                                    def PyJs_anonymous_393_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers(['bitField'])
                                        var.put('bitField', var.get(u"this").get('_bitField'))
                                        if PyJsStrictNeq((var.get('bitField')&Js(33554432.0)),Js(0.0)):
                                            return var.get(u"this").get('_rejectionHandler0')
                                        else:
                                            if PyJsStrictNeq((var.get('bitField')&Js(16777216.0)),Js(0.0)):
                                                return var.get(u"this").get('_fulfillmentHandler0')
                                    PyJs_anonymous_393_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_settledValue', PyJs_anonymous_393_)
                                    if (PyJsStrictNeq(var.get('Symbol',throw=False).typeof(),Js('undefined')) and var.get('Symbol').get('toStringTag')):
                                        @Js
                                        def PyJs_get_394_(this, arguments, var=var):
                                            var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_394_}, var)
                                            var.registers([])
                                            return Js('Object')
                                        PyJs_get_394_._set_name('get')
                                        var.get('es5').callprop('defineProperty', var.get('Promise').get('prototype'), var.get('Symbol').get('toStringTag'), Js({'get':PyJs_get_394_}))
                                    pass
                                    pass
                                    @Js
                                    def PyJs_anonymous_395_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers(['promise'])
                                        var.get('debug').callprop('deprecated', Js('Promise.defer'), Js('new Promise'))
                                        var.put('promise', var.get('Promise').create(var.get('INTERNAL')))
                                        return Js({'promise':var.get('promise'),'resolve':var.get('deferResolve'),'reject':var.get('deferReject')})
                                    PyJs_anonymous_395_._set_name('anonymous')
                                    var.get('Promise').put('defer', var.get('Promise').put('pending', PyJs_anonymous_395_))
                                    var.get('util').callprop('notEnumerableProp', var.get('Promise'), Js('_makeSelfResolutionError'), var.get('makeSelfResolutionError'))
                                    var.get('_dereq_')(Js('./method'))(var.get('Promise'), var.get('INTERNAL'), var.get('tryConvertToPromise'), var.get('apiRejection'), var.get('debug'))
                                    var.get('_dereq_')(Js('./bind'))(var.get('Promise'), var.get('INTERNAL'), var.get('tryConvertToPromise'), var.get('debug'))
                                    var.get('_dereq_')(Js('./cancel'))(var.get('Promise'), var.get('PromiseArray'), var.get('apiRejection'), var.get('debug'))
                                    var.get('_dereq_')(Js('./direct_resolve'))(var.get('Promise'))
                                    var.get('_dereq_')(Js('./synchronous_inspection'))(var.get('Promise'))
                                    var.get('_dereq_')(Js('./join'))(var.get('Promise'), var.get('PromiseArray'), var.get('tryConvertToPromise'), var.get('INTERNAL'), var.get('async'))
                                    var.get('Promise').put('Promise', var.get('Promise'))
                                    var.get('Promise').put('version', Js('3.7.2'))
                                    var.get('_dereq_')(Js('./call_get.js'))(var.get('Promise'))
                                    var.get('_dereq_')(Js('./generators.js'))(var.get('Promise'), var.get('apiRejection'), var.get('INTERNAL'), var.get('tryConvertToPromise'), var.get('Proxyable'), var.get('debug'))
                                    var.get('_dereq_')(Js('./map.js'))(var.get('Promise'), var.get('PromiseArray'), var.get('apiRejection'), var.get('tryConvertToPromise'), var.get('INTERNAL'), var.get('debug'))
                                    var.get('_dereq_')(Js('./nodeify.js'))(var.get('Promise'))
                                    var.get('_dereq_')(Js('./promisify.js'))(var.get('Promise'), var.get('INTERNAL'))
                                    var.get('_dereq_')(Js('./props.js'))(var.get('Promise'), var.get('PromiseArray'), var.get('tryConvertToPromise'), var.get('apiRejection'))
                                    var.get('_dereq_')(Js('./race.js'))(var.get('Promise'), var.get('INTERNAL'), var.get('tryConvertToPromise'), var.get('apiRejection'))
                                    var.get('_dereq_')(Js('./reduce.js'))(var.get('Promise'), var.get('PromiseArray'), var.get('apiRejection'), var.get('tryConvertToPromise'), var.get('INTERNAL'), var.get('debug'))
                                    var.get('_dereq_')(Js('./settle.js'))(var.get('Promise'), var.get('PromiseArray'), var.get('debug'))
                                    var.get('_dereq_')(Js('./some.js'))(var.get('Promise'), var.get('PromiseArray'), var.get('apiRejection'))
                                    var.get('_dereq_')(Js('./timers.js'))(var.get('Promise'), var.get('INTERNAL'), var.get('debug'))
                                    var.get('_dereq_')(Js('./using.js'))(var.get('Promise'), var.get('apiRejection'), var.get('tryConvertToPromise'), var.get('createContext'), var.get('INTERNAL'), var.get('debug'))
                                    var.get('_dereq_')(Js('./any.js'))(var.get('Promise'))
                                    var.get('_dereq_')(Js('./each.js'))(var.get('Promise'), var.get('INTERNAL'))
                                    var.get('_dereq_')(Js('./filter.js'))(var.get('Promise'), var.get('INTERNAL'))
                                    var.get('util').callprop('toFastProperties', var.get('Promise'))
                                    var.get('util').callprop('toFastProperties', var.get('Promise').get('prototype'))
                                    pass
                                    var.get('fillTypes')(Js({'a':Js(1.0)}))
                                    var.get('fillTypes')(Js({'b':Js(2.0)}))
                                    var.get('fillTypes')(Js({'c':Js(3.0)}))
                                    var.get('fillTypes')(Js(1.0))
                                    @Js
                                    def PyJs_anonymous_396_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        pass
                                    PyJs_anonymous_396_._set_name('anonymous')
                                    var.get('fillTypes')(PyJs_anonymous_396_)
                                    var.get('fillTypes')(var.get('undefined'))
                                    var.get('fillTypes')(Js(False))
                                    var.get('fillTypes')(var.get('Promise').create(var.get('INTERNAL')))
                                    var.get('debug').callprop('setBounds', var.get('Async').get('firstLineError'), var.get('util').get('lastLineError'))
                                    return var.get('Promise')
                                PyJs_anonymous_324_._set_name('anonymous')
                                var.get('module').put('exports', PyJs_anonymous_324_)
                            PyJs_anonymous_323_._set_name('anonymous')
                            @Js
                            def PyJs_anonymous_397_(_dereq_, module, exports, this, arguments, var=var):
                                var = Scope({'_dereq_':_dereq_, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
                                var.registers(['exports', 'module', '_dereq_'])
                                Js('use strict')
                                @Js
                                def PyJs_anonymous_398_(Promise, INTERNAL, tryConvertToPromise, apiRejection, Proxyable, this, arguments, var=var):
                                    var = Scope({'Promise':Promise, 'INTERNAL':INTERNAL, 'tryConvertToPromise':tryConvertToPromise, 'apiRejection':apiRejection, 'Proxyable':Proxyable, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['apiRejection', 'PromiseArray', 'util', 'isArray', 'INTERNAL', 'tryConvertToPromise', 'Promise', 'toResolutionValue', 'Proxyable'])
                                    @Js
                                    def PyJsHoisted_toResolutionValue_(val, this, arguments, var=var):
                                        var = Scope({'val':val, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['val'])
                                        while 1:
                                            SWITCHED = False
                                            CONDITION = (var.get('val'))
                                            if SWITCHED or PyJsStrictEq(CONDITION, (-Js(2.0))):
                                                SWITCHED = True
                                                return Js([])
                                            if SWITCHED or PyJsStrictEq(CONDITION, (-Js(3.0))):
                                                SWITCHED = True
                                                return Js({})
                                            if SWITCHED or PyJsStrictEq(CONDITION, (-Js(6.0))):
                                                SWITCHED = True
                                                return var.get('Map').create()
                                            SWITCHED = True
                                            break
                                    PyJsHoisted_toResolutionValue_.func_name = 'toResolutionValue'
                                    var.put('toResolutionValue', PyJsHoisted_toResolutionValue_)
                                    @Js
                                    def PyJsHoisted_PromiseArray_(values, this, arguments, var=var):
                                        var = Scope({'values':values, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['values', 'promise'])
                                        var.put('promise', var.get(u"this").put('_promise', var.get('Promise').create(var.get('INTERNAL'))))
                                        if var.get('values').instanceof(var.get('Promise')):
                                            var.get('promise').callprop('_propagateFrom', var.get('values'), Js(3.0))
                                            var.get('values').callprop('suppressUnhandledRejections')
                                        var.get('promise').callprop('_setOnCancel', var.get(u"this"))
                                        var.get(u"this").put('_values', var.get('values'))
                                        var.get(u"this").put('_length', Js(0.0))
                                        var.get(u"this").put('_totalResolved', Js(0.0))
                                        var.get(u"this").callprop('_init', var.get('undefined'), (-Js(2.0)))
                                    PyJsHoisted_PromiseArray_.func_name = 'PromiseArray'
                                    var.put('PromiseArray', PyJsHoisted_PromiseArray_)
                                    var.put('util', var.get('_dereq_')(Js('./util')))
                                    var.put('isArray', var.get('util').get('isArray'))
                                    pass
                                    pass
                                    var.get('util').callprop('inherits', var.get('PromiseArray'), var.get('Proxyable'))
                                    @Js
                                    def PyJs_anonymous_399_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return var.get(u"this").get('_length')
                                    PyJs_anonymous_399_._set_name('anonymous')
                                    var.get('PromiseArray').get('prototype').put('length', PyJs_anonymous_399_)
                                    @Js
                                    def PyJs_anonymous_400_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return var.get(u"this").get('_promise')
                                    PyJs_anonymous_400_._set_name('anonymous')
                                    var.get('PromiseArray').get('prototype').put('promise', PyJs_anonymous_400_)
                                    @Js
                                    def PyJs_init_401_(_, resolveValueIfEmpty, this, arguments, var=var):
                                        var = Scope({'_':_, 'resolveValueIfEmpty':resolveValueIfEmpty, 'this':this, 'arguments':arguments, 'init':PyJs_init_401_}, var)
                                        var.registers(['err', '_', 'values', 'resolveValueIfEmpty', 'bitField'])
                                        var.put('values', var.get('tryConvertToPromise')(var.get(u"this").get('_values'), var.get(u"this").get('_promise')))
                                        if var.get('values').instanceof(var.get('Promise')):
                                            var.put('values', var.get('values').callprop('_target'))
                                            var.put('bitField', var.get('values').get('_bitField'))
                                            pass
                                            var.get(u"this").put('_values', var.get('values'))
                                            if PyJsStrictEq((var.get('bitField')&Js(50397184.0)),Js(0.0)):
                                                var.get(u"this").get('_promise').callprop('_setAsyncGuaranteed')
                                                return var.get('values').callprop('_then', var.get('init'), var.get(u"this").get('_reject'), var.get('undefined'), var.get(u"this"), var.get('resolveValueIfEmpty'))
                                            else:
                                                if PyJsStrictNeq((var.get('bitField')&Js(33554432.0)),Js(0.0)):
                                                    var.put('values', var.get('values').callprop('_value'))
                                                else:
                                                    if PyJsStrictNeq((var.get('bitField')&Js(16777216.0)),Js(0.0)):
                                                        return var.get(u"this").callprop('_reject', var.get('values').callprop('_reason'))
                                                    else:
                                                        return var.get(u"this").callprop('_cancel')
                                        var.put('values', var.get('util').callprop('asArray', var.get('values')))
                                        if PyJsStrictEq(var.get('values'),var.get(u"null")):
                                            var.put('err', var.get('apiRejection')((Js('expecting an array or an iterable object but got ')+var.get('util').callprop('classString', var.get('values')))).callprop('reason'))
                                            var.get(u"this").get('_promise').callprop('_rejectCallback', var.get('err'), Js(False))
                                            return var.get('undefined')
                                        if PyJsStrictEq(var.get('values').get('length'),Js(0.0)):
                                            if PyJsStrictEq(var.get('resolveValueIfEmpty'),(-Js(5.0))):
                                                var.get(u"this").callprop('_resolveEmptyArray')
                                            else:
                                                var.get(u"this").callprop('_resolve', var.get('toResolutionValue')(var.get('resolveValueIfEmpty')))
                                            return var.get('undefined')
                                        var.get(u"this").callprop('_iterate', var.get('values'))
                                    PyJs_init_401_._set_name('init')
                                    var.get('PromiseArray').get('prototype').put('_init', PyJs_init_401_)
                                    @Js
                                    def PyJs_anonymous_402_(values, this, arguments, var=var):
                                        var = Scope({'values':values, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['len', 'i', 'values', 'bitField', 'isResolved', 'result', 'maybePromise'])
                                        var.put('len', var.get(u"this").callprop('getActualLength', var.get('values').get('length')))
                                        var.get(u"this").put('_length', var.get('len'))
                                        var.get(u"this").put('_values', (var.get('Array').create(var.get('len')) if var.get(u"this").callprop('shouldCopyValues') else var.get(u"this").get('_values')))
                                        var.put('result', var.get(u"this").get('_promise'))
                                        var.put('isResolved', Js(False))
                                        var.put('bitField', var.get(u"null"))
                                        #for JS loop
                                        var.put('i', Js(0.0))
                                        while (var.get('i')<var.get('len')):
                                            try:
                                                var.put('maybePromise', var.get('tryConvertToPromise')(var.get('values').get(var.get('i')), var.get('result')))
                                                if var.get('maybePromise').instanceof(var.get('Promise')):
                                                    var.put('maybePromise', var.get('maybePromise').callprop('_target'))
                                                    var.put('bitField', var.get('maybePromise').get('_bitField'))
                                                else:
                                                    var.put('bitField', var.get(u"null"))
                                                if var.get('isResolved'):
                                                    if PyJsStrictNeq(var.get('bitField'),var.get(u"null")):
                                                        var.get('maybePromise').callprop('suppressUnhandledRejections')
                                                else:
                                                    if PyJsStrictNeq(var.get('bitField'),var.get(u"null")):
                                                        if PyJsStrictEq((var.get('bitField')&Js(50397184.0)),Js(0.0)):
                                                            var.get('maybePromise').callprop('_proxy', var.get(u"this"), var.get('i'))
                                                            var.get(u"this").get('_values').put(var.get('i'), var.get('maybePromise'))
                                                        else:
                                                            if PyJsStrictNeq((var.get('bitField')&Js(33554432.0)),Js(0.0)):
                                                                var.put('isResolved', var.get(u"this").callprop('_promiseFulfilled', var.get('maybePromise').callprop('_value'), var.get('i')))
                                                            else:
                                                                if PyJsStrictNeq((var.get('bitField')&Js(16777216.0)),Js(0.0)):
                                                                    var.put('isResolved', var.get(u"this").callprop('_promiseRejected', var.get('maybePromise').callprop('_reason'), var.get('i')))
                                                                else:
                                                                    var.put('isResolved', var.get(u"this").callprop('_promiseCancelled', var.get('i')))
                                                    else:
                                                        var.put('isResolved', var.get(u"this").callprop('_promiseFulfilled', var.get('maybePromise'), var.get('i')))
                                            finally:
                                                    var.put('i',Js(var.get('i').to_number())+Js(1))
                                        if var.get('isResolved').neg():
                                            var.get('result').callprop('_setAsyncGuaranteed')
                                    PyJs_anonymous_402_._set_name('anonymous')
                                    var.get('PromiseArray').get('prototype').put('_iterate', PyJs_anonymous_402_)
                                    @Js
                                    def PyJs_anonymous_403_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return PyJsStrictEq(var.get(u"this").get('_values'),var.get(u"null"))
                                    PyJs_anonymous_403_._set_name('anonymous')
                                    var.get('PromiseArray').get('prototype').put('_isResolved', PyJs_anonymous_403_)
                                    @Js
                                    def PyJs_anonymous_404_(value, this, arguments, var=var):
                                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['value'])
                                        var.get(u"this").put('_values', var.get(u"null"))
                                        var.get(u"this").get('_promise').callprop('_fulfill', var.get('value'))
                                    PyJs_anonymous_404_._set_name('anonymous')
                                    var.get('PromiseArray').get('prototype').put('_resolve', PyJs_anonymous_404_)
                                    @Js
                                    def PyJs_anonymous_405_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        if (var.get(u"this").callprop('_isResolved') or var.get(u"this").get('_promise').callprop('_isCancellable').neg()):
                                            return var.get('undefined')
                                        var.get(u"this").put('_values', var.get(u"null"))
                                        var.get(u"this").get('_promise').callprop('_cancel')
                                    PyJs_anonymous_405_._set_name('anonymous')
                                    var.get('PromiseArray').get('prototype').put('_cancel', PyJs_anonymous_405_)
                                    @Js
                                    def PyJs_anonymous_406_(reason, this, arguments, var=var):
                                        var = Scope({'reason':reason, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['reason'])
                                        var.get(u"this").put('_values', var.get(u"null"))
                                        var.get(u"this").get('_promise').callprop('_rejectCallback', var.get('reason'), Js(False))
                                    PyJs_anonymous_406_._set_name('anonymous')
                                    var.get('PromiseArray').get('prototype').put('_reject', PyJs_anonymous_406_)
                                    @Js
                                    def PyJs_anonymous_407_(value, index, this, arguments, var=var):
                                        var = Scope({'value':value, 'index':index, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['index', 'value', 'totalResolved'])
                                        var.get(u"this").get('_values').put(var.get('index'), var.get('value'))
                                        var.put('totalResolved', var.get(u"this").put('_totalResolved',Js(var.get(u"this").get('_totalResolved').to_number())+Js(1)))
                                        if (var.get('totalResolved')>=var.get(u"this").get('_length')):
                                            var.get(u"this").callprop('_resolve', var.get(u"this").get('_values'))
                                            return Js(True)
                                        return Js(False)
                                    PyJs_anonymous_407_._set_name('anonymous')
                                    var.get('PromiseArray').get('prototype').put('_promiseFulfilled', PyJs_anonymous_407_)
                                    @Js
                                    def PyJs_anonymous_408_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        var.get(u"this").callprop('_cancel')
                                        return Js(True)
                                    PyJs_anonymous_408_._set_name('anonymous')
                                    var.get('PromiseArray').get('prototype').put('_promiseCancelled', PyJs_anonymous_408_)
                                    @Js
                                    def PyJs_anonymous_409_(reason, this, arguments, var=var):
                                        var = Scope({'reason':reason, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['reason'])
                                        (var.get(u"this").put('_totalResolved',Js(var.get(u"this").get('_totalResolved').to_number())+Js(1))-Js(1))
                                        var.get(u"this").callprop('_reject', var.get('reason'))
                                        return Js(True)
                                    PyJs_anonymous_409_._set_name('anonymous')
                                    var.get('PromiseArray').get('prototype').put('_promiseRejected', PyJs_anonymous_409_)
                                    @Js
                                    def PyJs_anonymous_410_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers(['values', 'i'])
                                        if var.get(u"this").callprop('_isResolved'):
                                            return var.get('undefined')
                                        var.put('values', var.get(u"this").get('_values'))
                                        var.get(u"this").callprop('_cancel')
                                        if var.get('values').instanceof(var.get('Promise')):
                                            var.get('values').callprop('cancel')
                                        else:
                                            #for JS loop
                                            var.put('i', Js(0.0))
                                            while (var.get('i')<var.get('values').get('length')):
                                                try:
                                                    if var.get('values').get(var.get('i')).instanceof(var.get('Promise')):
                                                        var.get('values').get(var.get('i')).callprop('cancel')
                                                finally:
                                                        var.put('i',Js(var.get('i').to_number())+Js(1))
                                    PyJs_anonymous_410_._set_name('anonymous')
                                    var.get('PromiseArray').get('prototype').put('_resultCancelled', PyJs_anonymous_410_)
                                    @Js
                                    def PyJs_anonymous_411_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return Js(True)
                                    PyJs_anonymous_411_._set_name('anonymous')
                                    var.get('PromiseArray').get('prototype').put('shouldCopyValues', PyJs_anonymous_411_)
                                    @Js
                                    def PyJs_anonymous_412_(len, this, arguments, var=var):
                                        var = Scope({'len':len, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['len'])
                                        return var.get('len')
                                    PyJs_anonymous_412_._set_name('anonymous')
                                    var.get('PromiseArray').get('prototype').put('getActualLength', PyJs_anonymous_412_)
                                    return var.get('PromiseArray')
                                PyJs_anonymous_398_._set_name('anonymous')
                                var.get('module').put('exports', PyJs_anonymous_398_)
                            PyJs_anonymous_397_._set_name('anonymous')
                            @Js
                            def PyJs_anonymous_413_(_dereq_, module, exports, this, arguments, var=var):
                                var = Scope({'_dereq_':_dereq_, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
                                var.registers(['exports', 'module', '_dereq_'])
                                Js('use strict')
                                @Js
                                def PyJs_anonymous_414_(Promise, INTERNAL, this, arguments, var=var):
                                    var = Scope({'Promise':Promise, 'INTERNAL':INTERNAL, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['makeNodePromisified', 'hasPromisified', 'util', 'promisify', 'INTERNAL', 'escapeIdentRegex', 'parameterDeclaration', 'parameterCount', 'isPromisified', 'defaultPromisified', 'switchCaseArgumentOrder', 'promisifiableMethods', 'maybeWrapAsError', 'withAppended', 'nodebackForPromise', 'makeNodePromisifiedClosure', 'defaultSuffix', 'THIS', 'promisifyAll', 'noCopyProps', 'noCopyPropsPattern', 'argumentSequence', 'checkValid', 'TypeError', 'canEvaluate', 'makeNodePromisifiedEval', 'Promise', 'defaultFilter', 'propsFilter'])
                                    @Js
                                    def PyJsHoisted_propsFilter_(key, this, arguments, var=var):
                                        var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['key'])
                                        return var.get('noCopyPropsPattern').callprop('test', var.get('key')).neg()
                                    PyJsHoisted_propsFilter_.func_name = 'propsFilter'
                                    var.put('propsFilter', PyJsHoisted_propsFilter_)
                                    @Js
                                    def PyJsHoisted_isPromisified_(fn, this, arguments, var=var):
                                        var = Scope({'fn':fn, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['fn'])
                                        try:
                                            return PyJsStrictEq(var.get('fn').get('__isPromisified__'),Js(True))
                                        except PyJsException as PyJsTempException:
                                            PyJsHolder_65_92869142 = var.own.get('e')
                                            var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                                            try:
                                                return Js(False)
                                            finally:
                                                if PyJsHolder_65_92869142 is not None:
                                                    var.own['e'] = PyJsHolder_65_92869142
                                                else:
                                                    del var.own['e']
                                                del PyJsHolder_65_92869142
                                    PyJsHoisted_isPromisified_.func_name = 'isPromisified'
                                    var.put('isPromisified', PyJsHoisted_isPromisified_)
                                    @Js
                                    def PyJsHoisted_hasPromisified_(obj, key, suffix, this, arguments, var=var):
                                        var = Scope({'obj':obj, 'key':key, 'suffix':suffix, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['suffix', 'key', 'val', 'obj'])
                                        var.put('val', var.get('util').callprop('getDataPropertyOrDefault', var.get('obj'), (var.get('key')+var.get('suffix')), var.get('defaultPromisified')))
                                        return (var.get('isPromisified')(var.get('val')) if var.get('val') else Js(False))
                                    PyJsHoisted_hasPromisified_.func_name = 'hasPromisified'
                                    var.put('hasPromisified', PyJsHoisted_hasPromisified_)
                                    @Js
                                    def PyJsHoisted_checkValid_(ret, suffix, suffixRegexp, this, arguments, var=var):
                                        var = Scope({'ret':ret, 'suffix':suffix, 'suffixRegexp':suffixRegexp, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['suffix', 'i', 'ret', 'key', 'suffixRegexp', 'keyWithoutAsyncSuffix', 'j'])
                                        #for JS loop
                                        var.put('i', Js(0.0))
                                        while (var.get('i')<var.get('ret').get('length')):
                                            try:
                                                var.put('key', var.get('ret').get(var.get('i')))
                                                if var.get('suffixRegexp').callprop('test', var.get('key')):
                                                    var.put('keyWithoutAsyncSuffix', var.get('key').callprop('replace', var.get('suffixRegexp'), Js('')))
                                                    #for JS loop
                                                    var.put('j', Js(0.0))
                                                    while (var.get('j')<var.get('ret').get('length')):
                                                        try:
                                                            if PyJsStrictEq(var.get('ret').get(var.get('j')),var.get('keyWithoutAsyncSuffix')):
                                                                PyJsTempException = JsToPyException(var.get('TypeError').create(Js("Cannot promisify an API that has normal methods with '%s'-suffix\n\n    See http://goo.gl/MqrFmX\n").callprop('replace', Js('%s'), var.get('suffix'))))
                                                                raise PyJsTempException
                                                        finally:
                                                                var.put('j', Js(2.0), '+')
                                            finally:
                                                    var.put('i', Js(2.0), '+')
                                    PyJsHoisted_checkValid_.func_name = 'checkValid'
                                    var.put('checkValid', PyJsHoisted_checkValid_)
                                    @Js
                                    def PyJsHoisted_promisifiableMethods_(obj, suffix, suffixRegexp, filter, this, arguments, var=var):
                                        var = Scope({'obj':obj, 'suffix':suffix, 'suffixRegexp':suffixRegexp, 'filter':filter, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['suffix', 'i', 'ret', 'passesDefaultFilter', 'key', 'suffixRegexp', 'obj', 'filter', 'keys', 'value'])
                                        var.put('keys', var.get('util').callprop('inheritedDataKeys', var.get('obj')))
                                        var.put('ret', Js([]))
                                        #for JS loop
                                        var.put('i', Js(0.0))
                                        while (var.get('i')<var.get('keys').get('length')):
                                            try:
                                                var.put('key', var.get('keys').get(var.get('i')))
                                                var.put('value', var.get('obj').get(var.get('key')))
                                                var.put('passesDefaultFilter', (Js(True) if PyJsStrictEq(var.get('filter'),var.get('defaultFilter')) else var.get('defaultFilter')(var.get('key'), var.get('value'), var.get('obj'))))
                                                if (((PyJsStrictEq(var.get('value',throw=False).typeof(),Js('function')) and var.get('isPromisified')(var.get('value')).neg()) and var.get('hasPromisified')(var.get('obj'), var.get('key'), var.get('suffix')).neg()) and var.get('filter')(var.get('key'), var.get('value'), var.get('obj'), var.get('passesDefaultFilter'))):
                                                    var.get('ret').callprop('push', var.get('key'), var.get('value'))
                                            finally:
                                                    var.put('i',Js(var.get('i').to_number())+Js(1))
                                        var.get('checkValid')(var.get('ret'), var.get('suffix'), var.get('suffixRegexp'))
                                        return var.get('ret')
                                    PyJsHoisted_promisifiableMethods_.func_name = 'promisifiableMethods'
                                    var.put('promisifiableMethods', PyJsHoisted_promisifiableMethods_)
                                    @Js
                                    def PyJsHoisted_makeNodePromisifiedClosure_(callback, receiver, _, fn, __, multiArgs, this, arguments, var=var):
                                        var = Scope({'callback':callback, 'receiver':receiver, '_':_, 'fn':fn, '__':__, 'multiArgs':multiArgs, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['callback', '__', 'promisified', 'multiArgs', 'defaultThis', '_', 'receiver', 'fn', 'method'])
                                        @Js
                                        def PyJsHoisted_promisified_(this, arguments, var=var):
                                            var = Scope({'this':this, 'arguments':arguments}, var)
                                            var.registers(['cb', 'fn', '_receiver', 'promise'])
                                            var.put('_receiver', var.get('receiver'))
                                            if PyJsStrictEq(var.get('receiver'),var.get('THIS')):
                                                var.put('_receiver', var.get(u"this"))
                                            var.put('promise', var.get('Promise').create(var.get('INTERNAL')))
                                            var.get('promise').callprop('_captureStackTrace')
                                            var.put('cb', (var.get(u"this").get(var.get('method')) if (PyJsStrictEq(var.get('method',throw=False).typeof(),Js('string')) and PyJsStrictNeq(var.get(u"this"),var.get('defaultThis'))) else var.get('callback')))
                                            var.put('fn', var.get('nodebackForPromise')(var.get('promise'), var.get('multiArgs')))
                                            try:
                                                var.get('cb').callprop('apply', var.get('_receiver'), var.get('withAppended')(var.get('arguments'), var.get('fn')))
                                            except PyJsException as PyJsTempException:
                                                PyJsHolder_65_97620321 = var.own.get('e')
                                                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                                                try:
                                                    var.get('promise').callprop('_rejectCallback', var.get('maybeWrapAsError')(var.get('e')), Js(True), Js(True))
                                                finally:
                                                    if PyJsHolder_65_97620321 is not None:
                                                        var.own['e'] = PyJsHolder_65_97620321
                                                    else:
                                                        del var.own['e']
                                                    del PyJsHolder_65_97620321
                                            if var.get('promise').callprop('_isFateSealed').neg():
                                                var.get('promise').callprop('_setAsyncGuaranteed')
                                            return var.get('promise')
                                        PyJsHoisted_promisified_.func_name = 'promisified'
                                        var.put('promisified', PyJsHoisted_promisified_)
                                        @Js
                                        def PyJs_anonymous_426_(this, arguments, var=var):
                                            var = Scope({'this':this, 'arguments':arguments}, var)
                                            var.registers([])
                                            return var.get(u"this")
                                        PyJs_anonymous_426_._set_name('anonymous')
                                        var.put('defaultThis', PyJs_anonymous_426_())
                                        var.put('method', var.get('callback'))
                                        if PyJsStrictEq(var.get('method',throw=False).typeof(),Js('string')):
                                            var.put('callback', var.get('fn'))
                                        pass
                                        var.get('util').callprop('notEnumerableProp', var.get('promisified'), Js('__isPromisified__'), Js(True))
                                        return var.get('promisified')
                                    PyJsHoisted_makeNodePromisifiedClosure_.func_name = 'makeNodePromisifiedClosure'
                                    var.put('makeNodePromisifiedClosure', PyJsHoisted_makeNodePromisifiedClosure_)
                                    @Js
                                    def PyJsHoisted_promisifyAll_(obj, suffix, filter, promisifier, multiArgs, this, arguments, var=var):
                                        var = Scope({'obj':obj, 'suffix':suffix, 'filter':filter, 'promisifier':promisifier, 'multiArgs':multiArgs, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['promisifier', 'len', 'suffix', 'i', 'promisified', 'multiArgs', 'key', 'suffixRegexp', 'promisifiedKey', 'methods', 'filter', 'fn', 'obj'])
                                        var.put('suffixRegexp', var.get('RegExp').create((var.get('escapeIdentRegex')(var.get('suffix'))+Js('$'))))
                                        var.put('methods', var.get('promisifiableMethods')(var.get('obj'), var.get('suffix'), var.get('suffixRegexp'), var.get('filter')))
                                        #for JS loop
                                        var.put('i', Js(0.0))
                                        var.put('len', var.get('methods').get('length'))
                                        while (var.get('i')<var.get('len')):
                                            try:
                                                var.put('key', var.get('methods').get(var.get('i')))
                                                var.put('fn', var.get('methods').get((var.get('i')+Js(1.0))))
                                                var.put('promisifiedKey', (var.get('key')+var.get('suffix')))
                                                if PyJsStrictEq(var.get('promisifier'),var.get('makeNodePromisified')):
                                                    var.get('obj').put(var.get('promisifiedKey'), var.get('makeNodePromisified')(var.get('key'), var.get('THIS'), var.get('key'), var.get('fn'), var.get('suffix'), var.get('multiArgs')))
                                                else:
                                                    @Js
                                                    def PyJs_anonymous_427_(this, arguments, var=var):
                                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                                        var.registers([])
                                                        return var.get('makeNodePromisified')(var.get('key'), var.get('THIS'), var.get('key'), var.get('fn'), var.get('suffix'), var.get('multiArgs'))
                                                    PyJs_anonymous_427_._set_name('anonymous')
                                                    var.put('promisified', var.get('promisifier')(var.get('fn'), PyJs_anonymous_427_))
                                                    var.get('util').callprop('notEnumerableProp', var.get('promisified'), Js('__isPromisified__'), Js(True))
                                                    var.get('obj').put(var.get('promisifiedKey'), var.get('promisified'))
                                            finally:
                                                    var.put('i', Js(2.0), '+')
                                        var.get('util').callprop('toFastProperties', var.get('obj'))
                                        return var.get('obj')
                                    PyJsHoisted_promisifyAll_.func_name = 'promisifyAll'
                                    var.put('promisifyAll', PyJsHoisted_promisifyAll_)
                                    @Js
                                    def PyJsHoisted_promisify_(callback, receiver, multiArgs, this, arguments, var=var):
                                        var = Scope({'callback':callback, 'receiver':receiver, 'multiArgs':multiArgs, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['multiArgs', 'receiver', 'callback'])
                                        return var.get('makeNodePromisified')(var.get('callback'), var.get('receiver'), var.get('undefined'), var.get('callback'), var.get(u"null"), var.get('multiArgs'))
                                    PyJsHoisted_promisify_.func_name = 'promisify'
                                    var.put('promisify', PyJsHoisted_promisify_)
                                    var.put('THIS', Js({}))
                                    var.put('util', var.get('_dereq_')(Js('./util')))
                                    var.put('nodebackForPromise', var.get('_dereq_')(Js('./nodeback')))
                                    var.put('withAppended', var.get('util').get('withAppended'))
                                    var.put('maybeWrapAsError', var.get('util').get('maybeWrapAsError'))
                                    var.put('canEvaluate', var.get('util').get('canEvaluate'))
                                    var.put('TypeError', var.get('_dereq_')(Js('./errors')).get('TypeError'))
                                    var.put('defaultSuffix', Js('Async'))
                                    var.put('defaultPromisified', Js({'__isPromisified__':Js(True)}))
                                    var.put('noCopyProps', Js([Js('arity'), Js('length'), Js('name'), Js('arguments'), Js('caller'), Js('callee'), Js('prototype'), Js('__isPromisified__')]))
                                    var.put('noCopyPropsPattern', var.get('RegExp').create(((Js('^(?:')+var.get('noCopyProps').callprop('join', Js('|')))+Js(')$'))))
                                    @Js
                                    def PyJs_defaultFilter_415_(name, this, arguments, var=var):
                                        var = Scope({'name':name, 'this':this, 'arguments':arguments, 'defaultFilter':PyJs_defaultFilter_415_}, var)
                                        var.registers(['name'])
                                        return ((var.get('util').callprop('isIdentifier', var.get('name')) and PyJsStrictNeq(var.get('name').callprop('charAt', Js(0.0)),Js('_'))) and PyJsStrictNeq(var.get('name'),Js('constructor')))
                                    PyJs_defaultFilter_415_._set_name('defaultFilter')
                                    var.put('defaultFilter', PyJs_defaultFilter_415_)
                                    pass
                                    pass
                                    pass
                                    pass
                                    pass
                                    @Js
                                    def PyJs_escapeIdentRegex_416_(str, this, arguments, var=var):
                                        var = Scope({'str':str, 'this':this, 'arguments':arguments, 'escapeIdentRegex':PyJs_escapeIdentRegex_416_}, var)
                                        var.registers(['str'])
                                        return var.get('str').callprop('replace', JsRegExp('/([$])/'), Js('\\$'))
                                    PyJs_escapeIdentRegex_416_._set_name('escapeIdentRegex')
                                    var.put('escapeIdentRegex', PyJs_escapeIdentRegex_416_)
                                    pass
                                    if Js(True).neg():
                                        @Js
                                        def PyJs_switchCaseArgumentOrder_417_(likelyArgumentCount, this, arguments, var=var):
                                            var = Scope({'likelyArgumentCount':likelyArgumentCount, 'this':this, 'arguments':arguments, 'switchCaseArgumentOrder':PyJs_switchCaseArgumentOrder_417_}, var)
                                            var.registers(['min', 'i', 'likelyArgumentCount', 'ret'])
                                            var.put('ret', Js([var.get('likelyArgumentCount')]))
                                            var.put('min', var.get('Math').callprop('max', Js(0.0), ((var.get('likelyArgumentCount')-Js(1.0))-Js(3.0))))
                                            #for JS loop
                                            var.put('i', (var.get('likelyArgumentCount')-Js(1.0)))
                                            while (var.get('i')>=var.get('min')):
                                                try:
                                                    var.get('ret').callprop('push', var.get('i'))
                                                finally:
                                                        var.put('i',Js(var.get('i').to_number())-Js(1))
                                            #for JS loop
                                            var.put('i', (var.get('likelyArgumentCount')+Js(1.0)))
                                            while (var.get('i')<=Js(3.0)):
                                                try:
                                                    var.get('ret').callprop('push', var.get('i'))
                                                finally:
                                                        var.put('i',Js(var.get('i').to_number())+Js(1))
                                            return var.get('ret')
                                        PyJs_switchCaseArgumentOrder_417_._set_name('switchCaseArgumentOrder')
                                        var.put('switchCaseArgumentOrder', PyJs_switchCaseArgumentOrder_417_)
                                        @Js
                                        def PyJs_argumentSequence_418_(argumentCount, this, arguments, var=var):
                                            var = Scope({'argumentCount':argumentCount, 'this':this, 'arguments':arguments, 'argumentSequence':PyJs_argumentSequence_418_}, var)
                                            var.registers(['argumentCount'])
                                            return var.get('util').callprop('filledRange', var.get('argumentCount'), Js('_arg'), Js(''))
                                        PyJs_argumentSequence_418_._set_name('argumentSequence')
                                        var.put('argumentSequence', PyJs_argumentSequence_418_)
                                        @Js
                                        def PyJs_parameterDeclaration_419_(parameterCount, this, arguments, var=var):
                                            var = Scope({'parameterCount':parameterCount, 'this':this, 'arguments':arguments, 'parameterDeclaration':PyJs_parameterDeclaration_419_}, var)
                                            var.registers(['parameterCount'])
                                            return var.get('util').callprop('filledRange', var.get('Math').callprop('max', var.get('parameterCount'), Js(3.0)), Js('_arg'), Js(''))
                                        PyJs_parameterDeclaration_419_._set_name('parameterDeclaration')
                                        var.put('parameterDeclaration', PyJs_parameterDeclaration_419_)
                                        @Js
                                        def PyJs_parameterCount_420_(fn, this, arguments, var=var):
                                            var = Scope({'fn':fn, 'this':this, 'arguments':arguments, 'parameterCount':PyJs_parameterCount_420_}, var)
                                            var.registers(['fn'])
                                            if PyJsStrictEq(var.get('fn').get('length').typeof(),Js('number')):
                                                return var.get('Math').callprop('max', var.get('Math').callprop('min', var.get('fn').get('length'), (Js(1023.0)+Js(1.0))), Js(0.0))
                                            return Js(0.0)
                                        PyJs_parameterCount_420_._set_name('parameterCount')
                                        var.put('parameterCount', PyJs_parameterCount_420_)
                                        @Js
                                        def PyJs_makeNodePromisifiedEval_421_(callback, receiver, originalName, fn, _, multiArgs, this, arguments, var=var):
                                            var = Scope({'callback':callback, 'receiver':receiver, 'originalName':originalName, 'fn':fn, '_':_, 'multiArgs':multiArgs, 'this':this, 'arguments':arguments, 'makeNodePromisifiedEval':PyJs_makeNodePromisifiedEval_421_}, var)
                                            var.registers(['getFunctionCode', 'generateCallForArgumentCount', 'callback', 'multiArgs', 'body', 'argumentOrder', 'originalName', 'shouldProxyThis', 'newParameterCount', 'receiver', '_', 'fn', 'generateArgumentSwitchCase'])
                                            @Js
                                            def PyJsHoisted_generateCallForArgumentCount_(count, this, arguments, var=var):
                                                var = Scope({'count':count, 'this':this, 'arguments':arguments}, var)
                                                var.registers(['args', 'count', 'comma', 'ret'])
                                                var.put('args', var.get('argumentSequence')(var.get('count')).callprop('join', Js(', ')))
                                                var.put('comma', (Js(', ') if (var.get('count')>Js(0.0)) else Js('')))
                                                pass
                                                if var.get('shouldProxyThis'):
                                                    var.put('ret', Js('ret = callback.call(this, {{args}}, nodeback); break;\n'))
                                                else:
                                                    var.put('ret', (Js('ret = callback({{args}}, nodeback); break;\n') if PyJsStrictEq(var.get('receiver'),var.get('undefined')) else Js('ret = callback.call(receiver, {{args}}, nodeback); break;\n')))
                                                return var.get('ret').callprop('replace', Js('{{args}}'), var.get('args')).callprop('replace', Js(', '), var.get('comma'))
                                            PyJsHoisted_generateCallForArgumentCount_.func_name = 'generateCallForArgumentCount'
                                            var.put('generateCallForArgumentCount', PyJsHoisted_generateCallForArgumentCount_)
                                            @Js
                                            def PyJsHoisted_generateArgumentSwitchCase_(this, arguments, var=var):
                                                var = Scope({'this':this, 'arguments':arguments}, var)
                                                var.registers(['i', 'ret'])
                                                var.put('ret', Js(''))
                                                #for JS loop
                                                var.put('i', Js(0.0))
                                                while (var.get('i')<var.get('argumentOrder').get('length')):
                                                    try:
                                                        var.put('ret', (((Js('case ')+var.get('argumentOrder').get(var.get('i')))+Js(':'))+var.get('generateCallForArgumentCount')(var.get('argumentOrder').get(var.get('i')))), '+')
                                                    finally:
                                                            var.put('i',Js(var.get('i').to_number())+Js(1))
                                                def PyJs_LONG_422_(var=var):
                                                    return Js('                                                             \n        default:                                                             \n            var args = new Array(len + 1);                                   \n            var i = 0;                                                       \n            for (var i = 0; i < len; ++i) {                                  \n               args[i] = arguments[i];                                       \n            }                                                                \n            args[i] = nodeback;                                              \n            [CodeForCall]                                                    \n            break;                                                           \n        ').callprop('replace', Js('[CodeForCall]'), (Js('ret = callback.apply(this, args);\n') if var.get('shouldProxyThis') else Js('ret = callback.apply(receiver, args);\n')))
                                                var.put('ret', PyJs_LONG_422_(), '+')
                                                return var.get('ret')
                                            PyJsHoisted_generateArgumentSwitchCase_.func_name = 'generateArgumentSwitchCase'
                                            var.put('generateArgumentSwitchCase', PyJsHoisted_generateArgumentSwitchCase_)
                                            var.put('newParameterCount', var.get('Math').callprop('max', Js(0.0), (var.get('parameterCount')(var.get('fn'))-Js(1.0))))
                                            var.put('argumentOrder', var.get('switchCaseArgumentOrder')(var.get('newParameterCount')))
                                            var.put('shouldProxyThis', (PyJsStrictEq(var.get('callback',throw=False).typeof(),Js('string')) or PyJsStrictEq(var.get('receiver'),var.get('THIS'))))
                                            pass
                                            pass
                                            var.put('getFunctionCode', (((Js("this != null ? this['")+var.get('callback'))+Js("'] : fn")) if PyJsStrictEq(var.get('callback',throw=False).typeof(),Js('string')) else Js('fn')))
                                            def PyJs_LONG_423_(var=var):
                                                return (Js("'use strict';                                                \n        var ret = function (Parameters) {                                    \n            'use strict';                                                    \n            var len = arguments.length;                                      \n            var promise = new Promise(INTERNAL);                             \n            promise._captureStackTrace();                                    \n            var nodeback = nodebackForPromise(promise, ")+var.get('multiArgs'))
                                            def PyJs_LONG_424_(var=var):
                                                return Js(");   \n            var ret;                                                         \n            var callback = tryCatch([GetFunctionCode]);                      \n            switch(len) {                                                    \n                [CodeForSwitchCase]                                          \n            }                                                                \n            if (ret === errorObj) {                                          \n                promise._rejectCallback(maybeWrapAsError(ret.e), true, true);\n            }                                                                \n            if (!promise._isFateSealed()) promise._setAsyncGuaranteed();     \n            return promise;                                                  \n        };                                                                   \n        notEnumerableProp(ret, '__isPromisified__', true);                   \n        return ret;                                                          \n    ").callprop('replace', Js('[CodeForSwitchCase]'), var.get('generateArgumentSwitchCase')())
                                            var.put('body', (PyJs_LONG_423_()+PyJs_LONG_424_().callprop('replace', Js('[GetFunctionCode]'), var.get('getFunctionCode'))))
                                            var.put('body', var.get('body').callprop('replace', Js('Parameters'), var.get('parameterDeclaration')(var.get('newParameterCount'))))
                                            def PyJs_LONG_425_(var=var):
                                                return var.get('Function').create(Js('Promise'), Js('fn'), Js('receiver'), Js('withAppended'), Js('maybeWrapAsError'), Js('nodebackForPromise'), Js('tryCatch'), Js('errorObj'), Js('notEnumerableProp'), Js('INTERNAL'), var.get('body'))(var.get('Promise'), var.get('fn'), var.get('receiver'), var.get('withAppended'), var.get('maybeWrapAsError'), var.get('nodebackForPromise'), var.get('util').get('tryCatch'), var.get('util').get('errorObj'), var.get('util').get('notEnumerableProp'), var.get('INTERNAL'))
                                            return PyJs_LONG_425_()
                                        PyJs_makeNodePromisifiedEval_421_._set_name('makeNodePromisifiedEval')
                                        var.put('makeNodePromisifiedEval', PyJs_makeNodePromisifiedEval_421_)
                                    pass
                                    var.put('makeNodePromisified', (var.get('makeNodePromisifiedEval') if var.get('canEvaluate') else var.get('makeNodePromisifiedClosure')))
                                    pass
                                    pass
                                    @Js
                                    def PyJs_anonymous_428_(fn, options, this, arguments, var=var):
                                        var = Scope({'fn':fn, 'options':options, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['ret', 'multiArgs', 'options', 'receiver', 'fn'])
                                        if PyJsStrictNeq(var.get('fn',throw=False).typeof(),Js('function')):
                                            PyJsTempException = JsToPyException(var.get('TypeError').create((Js('expecting a function but got ')+var.get('util').callprop('classString', var.get('fn')))))
                                            raise PyJsTempException
                                        if var.get('isPromisified')(var.get('fn')):
                                            return var.get('fn')
                                        var.put('options', var.get('Object')(var.get('options')))
                                        var.put('receiver', (var.get('THIS') if PyJsStrictEq(var.get('options').get('context'),var.get('undefined')) else var.get('options').get('context')))
                                        var.put('multiArgs', var.get('options').get('multiArgs').neg().neg())
                                        var.put('ret', var.get('promisify')(var.get('fn'), var.get('receiver'), var.get('multiArgs')))
                                        var.get('util').callprop('copyDescriptors', var.get('fn'), var.get('ret'), var.get('propsFilter'))
                                        return var.get('ret')
                                    PyJs_anonymous_428_._set_name('anonymous')
                                    var.get('Promise').put('promisify', PyJs_anonymous_428_)
                                    @Js
                                    def PyJs_anonymous_429_(target, options, this, arguments, var=var):
                                        var = Scope({'target':target, 'options':options, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['promisifier', 'suffix', 'i', 'multiArgs', 'target', 'options', 'filter', 'keys', 'value'])
                                        if (PyJsStrictNeq(var.get('target',throw=False).typeof(),Js('function')) and PyJsStrictNeq((Js('undefined') if PyJsStrictEq(var.get('target',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('target'))),Js('object'))):
                                            PyJsTempException = JsToPyException(var.get('TypeError').create(Js('the target of promisifyAll must be an object or a function\n\n    See http://goo.gl/MqrFmX\n')))
                                            raise PyJsTempException
                                        var.put('options', var.get('Object')(var.get('options')))
                                        var.put('multiArgs', var.get('options').get('multiArgs').neg().neg())
                                        var.put('suffix', var.get('options').get('suffix'))
                                        if PyJsStrictNeq(var.get('suffix',throw=False).typeof(),Js('string')):
                                            var.put('suffix', var.get('defaultSuffix'))
                                        var.put('filter', var.get('options').get('filter'))
                                        if PyJsStrictNeq(var.get('filter',throw=False).typeof(),Js('function')):
                                            var.put('filter', var.get('defaultFilter'))
                                        var.put('promisifier', var.get('options').get('promisifier'))
                                        if PyJsStrictNeq(var.get('promisifier',throw=False).typeof(),Js('function')):
                                            var.put('promisifier', var.get('makeNodePromisified'))
                                        if var.get('util').callprop('isIdentifier', var.get('suffix')).neg():
                                            PyJsTempException = JsToPyException(var.get('RangeError').create(Js('suffix must be a valid identifier\n\n    See http://goo.gl/MqrFmX\n')))
                                            raise PyJsTempException
                                        var.put('keys', var.get('util').callprop('inheritedDataKeys', var.get('target')))
                                        #for JS loop
                                        var.put('i', Js(0.0))
                                        while (var.get('i')<var.get('keys').get('length')):
                                            try:
                                                var.put('value', var.get('target').get(var.get('keys').get(var.get('i'))))
                                                if (PyJsStrictNeq(var.get('keys').get(var.get('i')),Js('constructor')) and var.get('util').callprop('isClass', var.get('value'))):
                                                    var.get('promisifyAll')(var.get('value').get('prototype'), var.get('suffix'), var.get('filter'), var.get('promisifier'), var.get('multiArgs'))
                                                    var.get('promisifyAll')(var.get('value'), var.get('suffix'), var.get('filter'), var.get('promisifier'), var.get('multiArgs'))
                                            finally:
                                                    var.put('i',Js(var.get('i').to_number())+Js(1))
                                        return var.get('promisifyAll')(var.get('target'), var.get('suffix'), var.get('filter'), var.get('promisifier'), var.get('multiArgs'))
                                    PyJs_anonymous_429_._set_name('anonymous')
                                    var.get('Promise').put('promisifyAll', PyJs_anonymous_429_)
                                PyJs_anonymous_414_._set_name('anonymous')
                                var.get('module').put('exports', PyJs_anonymous_414_)
                            PyJs_anonymous_413_._set_name('anonymous')
                            @Js
                            def PyJs_anonymous_430_(_dereq_, module, exports, this, arguments, var=var):
                                var = Scope({'_dereq_':_dereq_, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
                                var.registers(['exports', 'module', '_dereq_'])
                                Js('use strict')
                                @Js
                                def PyJs_anonymous_431_(Promise, PromiseArray, tryConvertToPromise, apiRejection, this, arguments, var=var):
                                    var = Scope({'Promise':Promise, 'PromiseArray':PromiseArray, 'tryConvertToPromise':tryConvertToPromise, 'apiRejection':apiRejection, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['apiRejection', 'PromiseArray', 'util', 'Es6Map', 'tryConvertToPromise', 'mapToEntries', 'entriesToMap', 'PropertiesPromiseArray', 'es5', 'Promise', 'props', 'isObject'])
                                    @Js
                                    def PyJsHoisted_PropertiesPromiseArray_(obj, this, arguments, var=var):
                                        var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['len', 'i', 'key', 'entries', 'isMap', 'keys', 'obj'])
                                        var.put('isMap', Js(False))
                                        pass
                                        if (PyJsStrictNeq(var.get('Es6Map'),var.get('undefined')) and var.get('obj').instanceof(var.get('Es6Map'))):
                                            var.put('entries', var.get('mapToEntries')(var.get('obj')))
                                            var.put('isMap', Js(True))
                                        else:
                                            var.put('keys', var.get('es5').callprop('keys', var.get('obj')))
                                            var.put('len', var.get('keys').get('length'))
                                            var.put('entries', var.get('Array').create((var.get('len')*Js(2.0))))
                                            #for JS loop
                                            var.put('i', Js(0.0))
                                            while (var.get('i')<var.get('len')):
                                                try:
                                                    var.put('key', var.get('keys').get(var.get('i')))
                                                    var.get('entries').put(var.get('i'), var.get('obj').get(var.get('key')))
                                                    var.get('entries').put((var.get('i')+var.get('len')), var.get('key'))
                                                finally:
                                                        var.put('i',Js(var.get('i').to_number())+Js(1))
                                        var.get(u"this").callprop('constructor$', var.get('entries'))
                                        var.get(u"this").put('_isMap', var.get('isMap'))
                                        var.get(u"this").callprop('_init$', var.get('undefined'), ((-Js(6.0)) if var.get('isMap') else (-Js(3.0))))
                                    PyJsHoisted_PropertiesPromiseArray_.func_name = 'PropertiesPromiseArray'
                                    var.put('PropertiesPromiseArray', PyJsHoisted_PropertiesPromiseArray_)
                                    @Js
                                    def PyJsHoisted_props_(promises, this, arguments, var=var):
                                        var = Scope({'promises':promises, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['promises', 'castValue', 'ret'])
                                        pass
                                        var.put('castValue', var.get('tryConvertToPromise')(var.get('promises')))
                                        if var.get('isObject')(var.get('castValue')).neg():
                                            return var.get('apiRejection')(Js('cannot await properties of a non-object\n\n    See http://goo.gl/MqrFmX\n'))
                                        else:
                                            if var.get('castValue').instanceof(var.get('Promise')):
                                                var.put('ret', var.get('castValue').callprop('_then', var.get('Promise').get('props'), var.get('undefined'), var.get('undefined'), var.get('undefined'), var.get('undefined')))
                                            else:
                                                var.put('ret', var.get('PropertiesPromiseArray').create(var.get('castValue')).callprop('promise'))
                                        if var.get('castValue').instanceof(var.get('Promise')):
                                            var.get('ret').callprop('_propagateFrom', var.get('castValue'), Js(2.0))
                                        return var.get('ret')
                                    PyJsHoisted_props_.func_name = 'props'
                                    var.put('props', PyJsHoisted_props_)
                                    var.put('util', var.get('_dereq_')(Js('./util')))
                                    var.put('isObject', var.get('util').get('isObject'))
                                    var.put('es5', var.get('_dereq_')(Js('./es5')))
                                    pass
                                    if PyJsStrictEq(var.get('Map',throw=False).typeof(),Js('function')):
                                        var.put('Es6Map', var.get('Map'))
                                    @Js
                                    def PyJs_anonymous_432_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers(['extractEntry', 'index', 'size'])
                                        @Js
                                        def PyJsHoisted_extractEntry_(value, key, this, arguments, var=var):
                                            var = Scope({'value':value, 'key':key, 'this':this, 'arguments':arguments}, var)
                                            var.registers(['key', 'value'])
                                            var.get(u"this").put(var.get('index'), var.get('value'))
                                            var.get(u"this").put((var.get('index')+var.get('size')), var.get('key'))
                                            (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))
                                        PyJsHoisted_extractEntry_.func_name = 'extractEntry'
                                        var.put('extractEntry', PyJsHoisted_extractEntry_)
                                        var.put('index', Js(0.0))
                                        var.put('size', Js(0.0))
                                        pass
                                        @Js
                                        def PyJs_mapToEntries_433_(map, this, arguments, var=var):
                                            var = Scope({'map':map, 'this':this, 'arguments':arguments, 'mapToEntries':PyJs_mapToEntries_433_}, var)
                                            var.registers(['map', 'ret'])
                                            var.put('size', var.get('map').get('size'))
                                            var.put('index', Js(0.0))
                                            var.put('ret', var.get('Array').create((var.get('map').get('size')*Js(2.0))))
                                            var.get('map').callprop('forEach', var.get('extractEntry'), var.get('ret'))
                                            return var.get('ret')
                                        PyJs_mapToEntries_433_._set_name('mapToEntries')
                                        return PyJs_mapToEntries_433_
                                    PyJs_anonymous_432_._set_name('anonymous')
                                    var.put('mapToEntries', PyJs_anonymous_432_())
                                    @Js
                                    def PyJs_entriesToMap_434_(entries, this, arguments, var=var):
                                        var = Scope({'entries':entries, 'this':this, 'arguments':arguments, 'entriesToMap':PyJs_entriesToMap_434_}, var)
                                        var.registers(['i', 'ret', 'key', 'entries', 'length', 'value'])
                                        var.put('ret', var.get('Es6Map').create())
                                        var.put('length', ((var.get('entries').get('length')/Js(2.0))|Js(0.0)))
                                        #for JS loop
                                        var.put('i', Js(0.0))
                                        while (var.get('i')<var.get('length')):
                                            try:
                                                var.put('key', var.get('entries').get((var.get('length')+var.get('i'))))
                                                var.put('value', var.get('entries').get(var.get('i')))
                                                var.get('ret').callprop('set', var.get('key'), var.get('value'))
                                            finally:
                                                    var.put('i',Js(var.get('i').to_number())+Js(1))
                                        return var.get('ret')
                                    PyJs_entriesToMap_434_._set_name('entriesToMap')
                                    var.put('entriesToMap', PyJs_entriesToMap_434_)
                                    pass
                                    var.get('util').callprop('inherits', var.get('PropertiesPromiseArray'), var.get('PromiseArray'))
                                    @Js
                                    def PyJs_anonymous_435_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        pass
                                    PyJs_anonymous_435_._set_name('anonymous')
                                    var.get('PropertiesPromiseArray').get('prototype').put('_init', PyJs_anonymous_435_)
                                    @Js
                                    def PyJs_anonymous_436_(value, index, this, arguments, var=var):
                                        var = Scope({'value':value, 'index':index, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['len', 'val', 'i', 'keyOffset', 'totalResolved', 'index', 'value'])
                                        var.get(u"this").get('_values').put(var.get('index'), var.get('value'))
                                        var.put('totalResolved', var.get(u"this").put('_totalResolved',Js(var.get(u"this").get('_totalResolved').to_number())+Js(1)))
                                        if (var.get('totalResolved')>=var.get(u"this").get('_length')):
                                            pass
                                            if var.get(u"this").get('_isMap'):
                                                var.put('val', var.get('entriesToMap')(var.get(u"this").get('_values')))
                                            else:
                                                var.put('val', Js({}))
                                                var.put('keyOffset', var.get(u"this").callprop('length'))
                                                #for JS loop
                                                var.put('i', Js(0.0))
                                                var.put('len', var.get(u"this").callprop('length'))
                                                while (var.get('i')<var.get('len')):
                                                    try:
                                                        var.get('val').put(var.get(u"this").get('_values').get((var.get('i')+var.get('keyOffset'))), var.get(u"this").get('_values').get(var.get('i')))
                                                    finally:
                                                            var.put('i',Js(var.get('i').to_number())+Js(1))
                                            var.get(u"this").callprop('_resolve', var.get('val'))
                                            return Js(True)
                                        return Js(False)
                                    PyJs_anonymous_436_._set_name('anonymous')
                                    var.get('PropertiesPromiseArray').get('prototype').put('_promiseFulfilled', PyJs_anonymous_436_)
                                    @Js
                                    def PyJs_anonymous_437_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return Js(False)
                                    PyJs_anonymous_437_._set_name('anonymous')
                                    var.get('PropertiesPromiseArray').get('prototype').put('shouldCopyValues', PyJs_anonymous_437_)
                                    @Js
                                    def PyJs_anonymous_438_(len, this, arguments, var=var):
                                        var = Scope({'len':len, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['len'])
                                        return (var.get('len')>>Js(1.0))
                                    PyJs_anonymous_438_._set_name('anonymous')
                                    var.get('PropertiesPromiseArray').get('prototype').put('getActualLength', PyJs_anonymous_438_)
                                    pass
                                    @Js
                                    def PyJs_anonymous_439_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return var.get('props')(var.get(u"this"))
                                    PyJs_anonymous_439_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('props', PyJs_anonymous_439_)
                                    @Js
                                    def PyJs_anonymous_440_(promises, this, arguments, var=var):
                                        var = Scope({'promises':promises, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['promises'])
                                        return var.get('props')(var.get('promises'))
                                    PyJs_anonymous_440_._set_name('anonymous')
                                    var.get('Promise').put('props', PyJs_anonymous_440_)
                                PyJs_anonymous_431_._set_name('anonymous')
                                var.get('module').put('exports', PyJs_anonymous_431_)
                            PyJs_anonymous_430_._set_name('anonymous')
                            @Js
                            def PyJs_anonymous_441_(_dereq_, module, exports, this, arguments, var=var):
                                var = Scope({'_dereq_':_dereq_, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
                                var.registers(['arrayMove', 'module', '_dereq_', 'exports', 'Queue'])
                                @Js
                                def PyJsHoisted_arrayMove_(src, srcIndex, dst, dstIndex, len, this, arguments, var=var):
                                    var = Scope({'src':src, 'srcIndex':srcIndex, 'dst':dst, 'dstIndex':dstIndex, 'len':len, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['len', 'dst', 'dstIndex', 'j', 'srcIndex', 'src'])
                                    #for JS loop
                                    var.put('j', Js(0.0))
                                    while (var.get('j')<var.get('len')):
                                        try:
                                            var.get('dst').put((var.get('j')+var.get('dstIndex')), var.get('src').get((var.get('j')+var.get('srcIndex'))))
                                            var.get('src').put((var.get('j')+var.get('srcIndex')), PyJsComma(Js(0.0), Js(None)))
                                        finally:
                                                var.put('j',Js(var.get('j').to_number())+Js(1))
                                PyJsHoisted_arrayMove_.func_name = 'arrayMove'
                                var.put('arrayMove', PyJsHoisted_arrayMove_)
                                @Js
                                def PyJsHoisted_Queue_(capacity, this, arguments, var=var):
                                    var = Scope({'capacity':capacity, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['capacity'])
                                    var.get(u"this").put('_capacity', var.get('capacity'))
                                    var.get(u"this").put('_length', Js(0.0))
                                    var.get(u"this").put('_front', Js(0.0))
                                PyJsHoisted_Queue_.func_name = 'Queue'
                                var.put('Queue', PyJsHoisted_Queue_)
                                Js('use strict')
                                pass
                                pass
                                @Js
                                def PyJs_anonymous_442_(size, this, arguments, var=var):
                                    var = Scope({'size':size, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['size'])
                                    return (var.get(u"this").get('_capacity')<var.get('size'))
                                PyJs_anonymous_442_._set_name('anonymous')
                                var.get('Queue').get('prototype').put('_willBeOverCapacity', PyJs_anonymous_442_)
                                @Js
                                def PyJs_anonymous_443_(arg, this, arguments, var=var):
                                    var = Scope({'arg':arg, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['arg', 'length', 'i'])
                                    var.put('length', var.get(u"this").callprop('length'))
                                    var.get(u"this").callprop('_checkCapacity', (var.get('length')+Js(1.0)))
                                    var.put('i', ((var.get(u"this").get('_front')+var.get('length'))&(var.get(u"this").get('_capacity')-Js(1.0))))
                                    var.get(u"this").put(var.get('i'), var.get('arg'))
                                    var.get(u"this").put('_length', (var.get('length')+Js(1.0)))
                                PyJs_anonymous_443_._set_name('anonymous')
                                var.get('Queue').get('prototype').put('_pushOne', PyJs_anonymous_443_)
                                @Js
                                def PyJs_anonymous_444_(fn, receiver, arg, this, arguments, var=var):
                                    var = Scope({'fn':fn, 'receiver':receiver, 'arg':arg, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['arg', 'wrapMask', 'receiver', 'length', 'fn', 'j'])
                                    var.put('length', (var.get(u"this").callprop('length')+Js(3.0)))
                                    if var.get(u"this").callprop('_willBeOverCapacity', var.get('length')):
                                        var.get(u"this").callprop('_pushOne', var.get('fn'))
                                        var.get(u"this").callprop('_pushOne', var.get('receiver'))
                                        var.get(u"this").callprop('_pushOne', var.get('arg'))
                                        return var.get('undefined')
                                    var.put('j', ((var.get(u"this").get('_front')+var.get('length'))-Js(3.0)))
                                    var.get(u"this").callprop('_checkCapacity', var.get('length'))
                                    var.put('wrapMask', (var.get(u"this").get('_capacity')-Js(1.0)))
                                    var.get(u"this").put(((var.get('j')+Js(0.0))&var.get('wrapMask')), var.get('fn'))
                                    var.get(u"this").put(((var.get('j')+Js(1.0))&var.get('wrapMask')), var.get('receiver'))
                                    var.get(u"this").put(((var.get('j')+Js(2.0))&var.get('wrapMask')), var.get('arg'))
                                    var.get(u"this").put('_length', var.get('length'))
                                PyJs_anonymous_444_._set_name('anonymous')
                                var.get('Queue').get('prototype').put('push', PyJs_anonymous_444_)
                                @Js
                                def PyJs_anonymous_445_(this, arguments, var=var):
                                    var = Scope({'this':this, 'arguments':arguments}, var)
                                    var.registers(['front', 'ret'])
                                    var.put('front', var.get(u"this").get('_front'))
                                    var.put('ret', var.get(u"this").get(var.get('front')))
                                    var.get(u"this").put(var.get('front'), var.get('undefined'))
                                    var.get(u"this").put('_front', ((var.get('front')+Js(1.0))&(var.get(u"this").get('_capacity')-Js(1.0))))
                                    (var.get(u"this").put('_length',Js(var.get(u"this").get('_length').to_number())-Js(1))+Js(1))
                                    return var.get('ret')
                                PyJs_anonymous_445_._set_name('anonymous')
                                var.get('Queue').get('prototype').put('shift', PyJs_anonymous_445_)
                                @Js
                                def PyJs_anonymous_446_(this, arguments, var=var):
                                    var = Scope({'this':this, 'arguments':arguments}, var)
                                    var.registers([])
                                    return var.get(u"this").get('_length')
                                PyJs_anonymous_446_._set_name('anonymous')
                                var.get('Queue').get('prototype').put('length', PyJs_anonymous_446_)
                                @Js
                                def PyJs_anonymous_447_(size, this, arguments, var=var):
                                    var = Scope({'size':size, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['size'])
                                    if (var.get(u"this").get('_capacity')<var.get('size')):
                                        var.get(u"this").callprop('_resizeTo', (var.get(u"this").get('_capacity')<<Js(1.0)))
                                PyJs_anonymous_447_._set_name('anonymous')
                                var.get('Queue').get('prototype').put('_checkCapacity', PyJs_anonymous_447_)
                                @Js
                                def PyJs_anonymous_448_(capacity, this, arguments, var=var):
                                    var = Scope({'capacity':capacity, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['moveItemsCount', 'length', 'capacity', 'oldCapacity', 'front'])
                                    var.put('oldCapacity', var.get(u"this").get('_capacity'))
                                    var.get(u"this").put('_capacity', var.get('capacity'))
                                    var.put('front', var.get(u"this").get('_front'))
                                    var.put('length', var.get(u"this").get('_length'))
                                    var.put('moveItemsCount', ((var.get('front')+var.get('length'))&(var.get('oldCapacity')-Js(1.0))))
                                    var.get('arrayMove')(var.get(u"this"), Js(0.0), var.get(u"this"), var.get('oldCapacity'), var.get('moveItemsCount'))
                                PyJs_anonymous_448_._set_name('anonymous')
                                var.get('Queue').get('prototype').put('_resizeTo', PyJs_anonymous_448_)
                                var.get('module').put('exports', var.get('Queue'))
                            PyJs_anonymous_441_._set_name('anonymous')
                            @Js
                            def PyJs_anonymous_449_(_dereq_, module, exports, this, arguments, var=var):
                                var = Scope({'_dereq_':_dereq_, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
                                var.registers(['exports', 'module', '_dereq_'])
                                Js('use strict')
                                @Js
                                def PyJs_anonymous_450_(Promise, INTERNAL, tryConvertToPromise, apiRejection, this, arguments, var=var):
                                    var = Scope({'Promise':Promise, 'INTERNAL':INTERNAL, 'tryConvertToPromise':tryConvertToPromise, 'apiRejection':apiRejection, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['race', 'apiRejection', 'util', 'tryConvertToPromise', 'INTERNAL', 'Promise', 'raceLater'])
                                    @Js
                                    def PyJsHoisted_race_(promises, parent, this, arguments, var=var):
                                        var = Scope({'promises':promises, 'parent':parent, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['len', 'i', 'val', 'ret', 'parent', 'promises', 'fulfill', 'maybePromise', 'reject'])
                                        var.put('maybePromise', var.get('tryConvertToPromise')(var.get('promises')))
                                        if var.get('maybePromise').instanceof(var.get('Promise')):
                                            return var.get('raceLater')(var.get('maybePromise'))
                                        else:
                                            var.put('promises', var.get('util').callprop('asArray', var.get('promises')))
                                            if PyJsStrictEq(var.get('promises'),var.get(u"null")):
                                                return var.get('apiRejection')((Js('expecting an array or an iterable object but got ')+var.get('util').callprop('classString', var.get('promises'))))
                                        var.put('ret', var.get('Promise').create(var.get('INTERNAL')))
                                        if PyJsStrictNeq(var.get('parent'),var.get('undefined')):
                                            var.get('ret').callprop('_propagateFrom', var.get('parent'), Js(3.0))
                                        var.put('fulfill', var.get('ret').get('_fulfill'))
                                        var.put('reject', var.get('ret').get('_reject'))
                                        #for JS loop
                                        var.put('i', Js(0.0))
                                        var.put('len', var.get('promises').get('length'))
                                        while (var.get('i')<var.get('len')):
                                            try:
                                                var.put('val', var.get('promises').get(var.get('i')))
                                                if (PyJsStrictEq(var.get('val'),var.get('undefined')) and var.get('promises').contains(var.get('i')).neg()):
                                                    continue
                                                var.get('Promise').callprop('cast', var.get('val')).callprop('_then', var.get('fulfill'), var.get('reject'), var.get('undefined'), var.get('ret'), var.get(u"null"))
                                            finally:
                                                    var.put('i',Js(var.get('i').to_number())+Js(1))
                                        return var.get('ret')
                                    PyJsHoisted_race_.func_name = 'race'
                                    var.put('race', PyJsHoisted_race_)
                                    var.put('util', var.get('_dereq_')(Js('./util')))
                                    @Js
                                    def PyJs_raceLater_451_(promise, this, arguments, var=var):
                                        var = Scope({'promise':promise, 'this':this, 'arguments':arguments, 'raceLater':PyJs_raceLater_451_}, var)
                                        var.registers(['promise'])
                                        @Js
                                        def PyJs_anonymous_452_(array, this, arguments, var=var):
                                            var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
                                            var.registers(['array'])
                                            return var.get('race')(var.get('array'), var.get('promise'))
                                        PyJs_anonymous_452_._set_name('anonymous')
                                        return var.get('promise').callprop('then', PyJs_anonymous_452_)
                                    PyJs_raceLater_451_._set_name('raceLater')
                                    var.put('raceLater', PyJs_raceLater_451_)
                                    pass
                                    @Js
                                    def PyJs_anonymous_453_(promises, this, arguments, var=var):
                                        var = Scope({'promises':promises, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['promises'])
                                        return var.get('race')(var.get('promises'), var.get('undefined'))
                                    PyJs_anonymous_453_._set_name('anonymous')
                                    var.get('Promise').put('race', PyJs_anonymous_453_)
                                    @Js
                                    def PyJs_anonymous_454_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return var.get('race')(var.get(u"this"), var.get('undefined'))
                                    PyJs_anonymous_454_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('race', PyJs_anonymous_454_)
                                PyJs_anonymous_450_._set_name('anonymous')
                                var.get('module').put('exports', PyJs_anonymous_450_)
                            PyJs_anonymous_449_._set_name('anonymous')
                            @Js
                            def PyJs_anonymous_455_(_dereq_, module, exports, this, arguments, var=var):
                                var = Scope({'_dereq_':_dereq_, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
                                var.registers(['exports', 'module', '_dereq_'])
                                Js('use strict')
                                @Js
                                def PyJs_anonymous_456_(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug, this, arguments, var=var):
                                    var = Scope({'Promise':Promise, 'PromiseArray':PromiseArray, 'apiRejection':apiRejection, 'tryConvertToPromise':tryConvertToPromise, 'INTERNAL':INTERNAL, 'debug':debug, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['apiRejection', 'PromiseArray', 'util', 'gotValue', 'tryConvertToPromise', 'INTERNAL', 'debug', 'Promise', 'ReductionPromiseArray', 'tryCatch', 'reduce', 'completed', 'gotAccum'])
                                    @Js
                                    def PyJsHoisted_ReductionPromiseArray_(promises, fn, initialValue, _each, this, arguments, var=var):
                                        var = Scope({'promises':promises, 'fn':fn, 'initialValue':initialValue, '_each':_each, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['context', '_each', 'promises', 'initialValue', 'fn'])
                                        var.get(u"this").callprop('constructor$', var.get('promises'))
                                        var.put('context', var.get('Promise').callprop('_getContext'))
                                        var.get(u"this").put('_fn', var.get('util').callprop('contextBind', var.get('context'), var.get('fn')))
                                        if PyJsStrictNeq(var.get('initialValue'),var.get('undefined')):
                                            var.put('initialValue', var.get('Promise').callprop('resolve', var.get('initialValue')))
                                            var.get('initialValue').callprop('_attachCancellationCallback', var.get(u"this"))
                                        var.get(u"this").put('_initialValue', var.get('initialValue'))
                                        var.get(u"this").put('_currentCancellable', var.get(u"null"))
                                        if PyJsStrictEq(var.get('_each'),var.get('INTERNAL')):
                                            var.get(u"this").put('_eachValues', var.get('Array')(var.get(u"this").get('_length')))
                                        else:
                                            if PyJsStrictEq(var.get('_each'),Js(0.0)):
                                                var.get(u"this").put('_eachValues', var.get(u"null"))
                                            else:
                                                var.get(u"this").put('_eachValues', var.get('undefined'))
                                        var.get(u"this").get('_promise').callprop('_captureStackTrace')
                                        var.get(u"this").callprop('_init$', var.get('undefined'), (-Js(5.0)))
                                    PyJsHoisted_ReductionPromiseArray_.func_name = 'ReductionPromiseArray'
                                    var.put('ReductionPromiseArray', PyJsHoisted_ReductionPromiseArray_)
                                    @Js
                                    def PyJsHoisted_completed_(valueOrReason, array, this, arguments, var=var):
                                        var = Scope({'valueOrReason':valueOrReason, 'array':array, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['valueOrReason', 'array'])
                                        if var.get(u"this").callprop('isFulfilled'):
                                            var.get('array').callprop('_resolve', var.get('valueOrReason'))
                                        else:
                                            var.get('array').callprop('_reject', var.get('valueOrReason'))
                                    PyJsHoisted_completed_.func_name = 'completed'
                                    var.put('completed', PyJsHoisted_completed_)
                                    @Js
                                    def PyJsHoisted_reduce_(promises, fn, initialValue, _each, this, arguments, var=var):
                                        var = Scope({'promises':promises, 'fn':fn, 'initialValue':initialValue, '_each':_each, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['_each', 'promises', 'array', 'initialValue', 'fn'])
                                        if PyJsStrictNeq(var.get('fn',throw=False).typeof(),Js('function')):
                                            return var.get('apiRejection')((Js('expecting a function but got ')+var.get('util').callprop('classString', var.get('fn'))))
                                        var.put('array', var.get('ReductionPromiseArray').create(var.get('promises'), var.get('fn'), var.get('initialValue'), var.get('_each')))
                                        return var.get('array').callprop('promise')
                                    PyJsHoisted_reduce_.func_name = 'reduce'
                                    var.put('reduce', PyJsHoisted_reduce_)
                                    @Js
                                    def PyJsHoisted_gotAccum_(accum, this, arguments, var=var):
                                        var = Scope({'accum':accum, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['accum', 'value'])
                                        var.get(u"this").put('accum', var.get('accum'))
                                        var.get(u"this").get('array').callprop('_gotAccum', var.get('accum'))
                                        var.put('value', var.get('tryConvertToPromise')(var.get(u"this").get('value'), var.get(u"this").get('array').get('_promise')))
                                        if var.get('value').instanceof(var.get('Promise')):
                                            var.get(u"this").get('array').put('_currentCancellable', var.get('value'))
                                            return var.get('value').callprop('_then', var.get('gotValue'), var.get('undefined'), var.get('undefined'), var.get(u"this"), var.get('undefined'))
                                        else:
                                            return var.get('gotValue').callprop('call', var.get(u"this"), var.get('value'))
                                    PyJsHoisted_gotAccum_.func_name = 'gotAccum'
                                    var.put('gotAccum', PyJsHoisted_gotAccum_)
                                    @Js
                                    def PyJsHoisted_gotValue_(value, this, arguments, var=var):
                                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['ret', 'promise', 'promiseCreated', 'array', 'fn', 'value'])
                                        var.put('array', var.get(u"this").get('array'))
                                        var.put('promise', var.get('array').get('_promise'))
                                        var.put('fn', var.get('tryCatch')(var.get('array').get('_fn')))
                                        var.get('promise').callprop('_pushContext')
                                        pass
                                        if PyJsStrictNeq(var.get('array').get('_eachValues'),var.get('undefined')):
                                            var.put('ret', var.get('fn').callprop('call', var.get('promise').callprop('_boundValue'), var.get('value'), var.get(u"this").get('index'), var.get(u"this").get('length')))
                                        else:
                                            var.put('ret', var.get('fn').callprop('call', var.get('promise').callprop('_boundValue'), var.get(u"this").get('accum'), var.get('value'), var.get(u"this").get('index'), var.get(u"this").get('length')))
                                        if var.get('ret').instanceof(var.get('Promise')):
                                            var.get('array').put('_currentCancellable', var.get('ret'))
                                        var.put('promiseCreated', var.get('promise').callprop('_popContext'))
                                        var.get('debug').callprop('checkForgottenReturns', var.get('ret'), var.get('promiseCreated'), (Js('Promise.each') if PyJsStrictNeq(var.get('array').get('_eachValues'),var.get('undefined')) else Js('Promise.reduce')), var.get('promise'))
                                        return var.get('ret')
                                    PyJsHoisted_gotValue_.func_name = 'gotValue'
                                    var.put('gotValue', PyJsHoisted_gotValue_)
                                    var.put('util', var.get('_dereq_')(Js('./util')))
                                    var.put('tryCatch', var.get('util').get('tryCatch'))
                                    pass
                                    var.get('util').callprop('inherits', var.get('ReductionPromiseArray'), var.get('PromiseArray'))
                                    @Js
                                    def PyJs_anonymous_457_(accum, this, arguments, var=var):
                                        var = Scope({'accum':accum, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['accum'])
                                        if ((PyJsStrictNeq(var.get(u"this").get('_eachValues'),var.get('undefined')) and PyJsStrictNeq(var.get(u"this").get('_eachValues'),var.get(u"null"))) and PyJsStrictNeq(var.get('accum'),var.get('INTERNAL'))):
                                            var.get(u"this").get('_eachValues').callprop('push', var.get('accum'))
                                    PyJs_anonymous_457_._set_name('anonymous')
                                    var.get('ReductionPromiseArray').get('prototype').put('_gotAccum', PyJs_anonymous_457_)
                                    @Js
                                    def PyJs_anonymous_458_(value, this, arguments, var=var):
                                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['value'])
                                        if PyJsStrictNeq(var.get(u"this").get('_eachValues'),var.get(u"null")):
                                            var.get(u"this").get('_eachValues').callprop('push', var.get('value'))
                                        return var.get(u"this").get('_eachValues')
                                    PyJs_anonymous_458_._set_name('anonymous')
                                    var.get('ReductionPromiseArray').get('prototype').put('_eachComplete', PyJs_anonymous_458_)
                                    @Js
                                    def PyJs_anonymous_459_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        pass
                                    PyJs_anonymous_459_._set_name('anonymous')
                                    var.get('ReductionPromiseArray').get('prototype').put('_init', PyJs_anonymous_459_)
                                    @Js
                                    def PyJs_anonymous_460_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        var.get(u"this").callprop('_resolve', (var.get(u"this").get('_eachValues') if PyJsStrictNeq(var.get(u"this").get('_eachValues'),var.get('undefined')) else var.get(u"this").get('_initialValue')))
                                    PyJs_anonymous_460_._set_name('anonymous')
                                    var.get('ReductionPromiseArray').get('prototype').put('_resolveEmptyArray', PyJs_anonymous_460_)
                                    @Js
                                    def PyJs_anonymous_461_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return Js(False)
                                    PyJs_anonymous_461_._set_name('anonymous')
                                    var.get('ReductionPromiseArray').get('prototype').put('shouldCopyValues', PyJs_anonymous_461_)
                                    @Js
                                    def PyJs_anonymous_462_(value, this, arguments, var=var):
                                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['value'])
                                        var.get(u"this").get('_promise').callprop('_resolveCallback', var.get('value'))
                                        var.get(u"this").put('_values', var.get(u"null"))
                                    PyJs_anonymous_462_._set_name('anonymous')
                                    var.get('ReductionPromiseArray').get('prototype').put('_resolve', PyJs_anonymous_462_)
                                    @Js
                                    def PyJs_anonymous_463_(sender, this, arguments, var=var):
                                        var = Scope({'sender':sender, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['sender'])
                                        if PyJsStrictEq(var.get('sender'),var.get(u"this").get('_initialValue')):
                                            return var.get(u"this").callprop('_cancel')
                                        if var.get(u"this").callprop('_isResolved'):
                                            return var.get('undefined')
                                        var.get(u"this").callprop('_resultCancelled$')
                                        if var.get(u"this").get('_currentCancellable').instanceof(var.get('Promise')):
                                            var.get(u"this").get('_currentCancellable').callprop('cancel')
                                        if var.get(u"this").get('_initialValue').instanceof(var.get('Promise')):
                                            var.get(u"this").get('_initialValue').callprop('cancel')
                                    PyJs_anonymous_463_._set_name('anonymous')
                                    var.get('ReductionPromiseArray').get('prototype').put('_resultCancelled', PyJs_anonymous_463_)
                                    @Js
                                    def PyJs_anonymous_464_(values, this, arguments, var=var):
                                        var = Scope({'values':values, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['i', 'values', 'length', 'ctx', 'maybePromise', 'value', 'j'])
                                        var.get(u"this").put('_values', var.get('values'))
                                        pass
                                        pass
                                        var.put('length', var.get('values').get('length'))
                                        if PyJsStrictNeq(var.get(u"this").get('_initialValue'),var.get('undefined')):
                                            var.put('value', var.get(u"this").get('_initialValue'))
                                            var.put('i', Js(0.0))
                                        else:
                                            var.put('value', var.get('Promise').callprop('resolve', var.get('values').get('0')))
                                            var.put('i', Js(1.0))
                                        var.get(u"this").put('_currentCancellable', var.get('value'))
                                        #for JS loop
                                        var.put('j', var.get('i'))
                                        while (var.get('j')<var.get('length')):
                                            try:
                                                var.put('maybePromise', var.get('values').get(var.get('j')))
                                                if var.get('maybePromise').instanceof(var.get('Promise')):
                                                    var.get('maybePromise').callprop('suppressUnhandledRejections')
                                            finally:
                                                    var.put('j',Js(var.get('j').to_number())+Js(1))
                                        if var.get('value').callprop('isRejected').neg():
                                            #for JS loop
                                            
                                            while (var.get('i')<var.get('length')):
                                                try:
                                                    var.put('ctx', Js({'accum':var.get(u"null"),'value':var.get('values').get(var.get('i')),'index':var.get('i'),'length':var.get('length'),'array':var.get(u"this")}))
                                                    var.put('value', var.get('value').callprop('_then', var.get('gotAccum'), var.get('undefined'), var.get('undefined'), var.get('ctx'), var.get('undefined')))
                                                    if PyJsStrictEq((var.get('i')&Js(127.0)),Js(0.0)):
                                                        var.get('value').callprop('_setNoAsyncGuarantee')
                                                finally:
                                                        var.put('i',Js(var.get('i').to_number())+Js(1))
                                        if PyJsStrictNeq(var.get(u"this").get('_eachValues'),var.get('undefined')):
                                            var.put('value', var.get('value').callprop('_then', var.get(u"this").get('_eachComplete'), var.get('undefined'), var.get('undefined'), var.get(u"this"), var.get('undefined')))
                                        var.get('value').callprop('_then', var.get('completed'), var.get('completed'), var.get('undefined'), var.get('value'), var.get(u"this"))
                                    PyJs_anonymous_464_._set_name('anonymous')
                                    var.get('ReductionPromiseArray').get('prototype').put('_iterate', PyJs_anonymous_464_)
                                    @Js
                                    def PyJs_anonymous_465_(fn, initialValue, this, arguments, var=var):
                                        var = Scope({'fn':fn, 'initialValue':initialValue, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['fn', 'initialValue'])
                                        return var.get('reduce')(var.get(u"this"), var.get('fn'), var.get('initialValue'), var.get(u"null"))
                                    PyJs_anonymous_465_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('reduce', PyJs_anonymous_465_)
                                    @Js
                                    def PyJs_anonymous_466_(promises, fn, initialValue, _each, this, arguments, var=var):
                                        var = Scope({'promises':promises, 'fn':fn, 'initialValue':initialValue, '_each':_each, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['_each', 'promises', 'initialValue', 'fn'])
                                        return var.get('reduce')(var.get('promises'), var.get('fn'), var.get('initialValue'), var.get('_each'))
                                    PyJs_anonymous_466_._set_name('anonymous')
                                    var.get('Promise').put('reduce', PyJs_anonymous_466_)
                                    pass
                                    pass
                                    pass
                                    pass
                                PyJs_anonymous_456_._set_name('anonymous')
                                var.get('module').put('exports', PyJs_anonymous_456_)
                            PyJs_anonymous_455_._set_name('anonymous')
                            @Js
                            def PyJs_anonymous_467_(_dereq_, module, exports, this, arguments, var=var):
                                var = Scope({'_dereq_':_dereq_, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
                                var.registers(['noAsyncScheduler', 'module', 'schedule', 'nativePromise', '_dereq_', 'exports', 'NativePromise', 'util', 'GlobalSetImmediate', 'ProcessNextTick'])
                                Js('use strict')
                                var.put('util', var.get('_dereq_')(Js('./util')))
                                pass
                                @Js
                                def PyJs_noAsyncScheduler_468_(this, arguments, var=var):
                                    var = Scope({'this':this, 'arguments':arguments, 'noAsyncScheduler':PyJs_noAsyncScheduler_468_}, var)
                                    var.registers([])
                                    PyJsTempException = JsToPyException(var.get('Error').create(Js('No async scheduler available\n\n    See http://goo.gl/MqrFmX\n')))
                                    raise PyJsTempException
                                PyJs_noAsyncScheduler_468_._set_name('noAsyncScheduler')
                                var.put('noAsyncScheduler', PyJs_noAsyncScheduler_468_)
                                var.put('NativePromise', var.get('util').callprop('getNativePromise'))
                                if (var.get('util').get('isNode') and PyJsStrictEq(var.get('MutationObserver',throw=False).typeof(),Js('undefined'))):
                                    var.put('GlobalSetImmediate', var.get('global').get('setImmediate'))
                                    var.put('ProcessNextTick', var.get('process').get('nextTick'))
                                    @Js
                                    def PyJs_anonymous_469_(fn, this, arguments, var=var):
                                        var = Scope({'fn':fn, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['fn'])
                                        var.get('GlobalSetImmediate').callprop('call', var.get('global'), var.get('fn'))
                                    PyJs_anonymous_469_._set_name('anonymous')
                                    @Js
                                    def PyJs_anonymous_470_(fn, this, arguments, var=var):
                                        var = Scope({'fn':fn, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['fn'])
                                        var.get('ProcessNextTick').callprop('call', var.get('process'), var.get('fn'))
                                    PyJs_anonymous_470_._set_name('anonymous')
                                    var.put('schedule', (PyJs_anonymous_469_ if var.get('util').get('isRecentNode') else PyJs_anonymous_470_))
                                else:
                                    if (PyJsStrictEq(var.get('NativePromise',throw=False).typeof(),Js('function')) and PyJsStrictEq(var.get('NativePromise').get('resolve').typeof(),Js('function'))):
                                        var.put('nativePromise', var.get('NativePromise').callprop('resolve'))
                                        @Js
                                        def PyJs_schedule_471_(fn, this, arguments, var=var):
                                            var = Scope({'fn':fn, 'this':this, 'arguments':arguments, 'schedule':PyJs_schedule_471_}, var)
                                            var.registers(['fn'])
                                            var.get('nativePromise').callprop('then', var.get('fn'))
                                        PyJs_schedule_471_._set_name('schedule')
                                        var.put('schedule', PyJs_schedule_471_)
                                    else:
                                        if ((PyJsStrictNeq(var.get('MutationObserver',throw=False).typeof(),Js('undefined')) and ((PyJsStrictNeq(var.get('window',throw=False).typeof(),Js('undefined')) and var.get('window').get('navigator')) and (var.get('window').get('navigator').get('standalone') or var.get('window').get('cordova'))).neg()) and var.get('document').get('documentElement').contains(Js('classList'))):
                                            @Js
                                            def PyJs_anonymous_472_(this, arguments, var=var):
                                                var = Scope({'this':this, 'arguments':arguments}, var)
                                                var.registers(['div2', 'o2', 'scheduleToggle', 'div', 'opts', 'toggleScheduled'])
                                                var.put('div', var.get('document').callprop('createElement', Js('div')))
                                                var.put('opts', Js({'attributes':Js(True)}))
                                                var.put('toggleScheduled', Js(False))
                                                var.put('div2', var.get('document').callprop('createElement', Js('div')))
                                                @Js
                                                def PyJs_anonymous_473_(this, arguments, var=var):
                                                    var = Scope({'this':this, 'arguments':arguments}, var)
                                                    var.registers([])
                                                    var.get('div').get('classList').callprop('toggle', Js('foo'))
                                                    var.put('toggleScheduled', Js(False))
                                                PyJs_anonymous_473_._set_name('anonymous')
                                                var.put('o2', var.get('MutationObserver').create(PyJs_anonymous_473_))
                                                var.get('o2').callprop('observe', var.get('div2'), var.get('opts'))
                                                @Js
                                                def PyJs_scheduleToggle_474_(this, arguments, var=var):
                                                    var = Scope({'this':this, 'arguments':arguments, 'scheduleToggle':PyJs_scheduleToggle_474_}, var)
                                                    var.registers([])
                                                    if var.get('toggleScheduled'):
                                                        return var.get('undefined')
                                                    var.put('toggleScheduled', Js(True))
                                                    var.get('div2').get('classList').callprop('toggle', Js('foo'))
                                                PyJs_scheduleToggle_474_._set_name('scheduleToggle')
                                                var.put('scheduleToggle', PyJs_scheduleToggle_474_)
                                                @Js
                                                def PyJs_schedule_475_(fn, this, arguments, var=var):
                                                    var = Scope({'fn':fn, 'this':this, 'arguments':arguments, 'schedule':PyJs_schedule_475_}, var)
                                                    var.registers(['o', 'fn'])
                                                    @Js
                                                    def PyJs_anonymous_476_(this, arguments, var=var):
                                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                                        var.registers([])
                                                        var.get('o').callprop('disconnect')
                                                        var.get('fn')()
                                                    PyJs_anonymous_476_._set_name('anonymous')
                                                    var.put('o', var.get('MutationObserver').create(PyJs_anonymous_476_))
                                                    var.get('o').callprop('observe', var.get('div'), var.get('opts'))
                                                    var.get('scheduleToggle')()
                                                PyJs_schedule_475_._set_name('schedule')
                                                return PyJs_schedule_475_
                                            PyJs_anonymous_472_._set_name('anonymous')
                                            var.put('schedule', PyJs_anonymous_472_())
                                        else:
                                            if PyJsStrictNeq(var.get('setImmediate',throw=False).typeof(),Js('undefined')):
                                                @Js
                                                def PyJs_schedule_477_(fn, this, arguments, var=var):
                                                    var = Scope({'fn':fn, 'this':this, 'arguments':arguments, 'schedule':PyJs_schedule_477_}, var)
                                                    var.registers(['fn'])
                                                    var.get('setImmediate')(var.get('fn'))
                                                PyJs_schedule_477_._set_name('schedule')
                                                var.put('schedule', PyJs_schedule_477_)
                                            else:
                                                if PyJsStrictNeq(var.get('setTimeout',throw=False).typeof(),Js('undefined')):
                                                    @Js
                                                    def PyJs_schedule_478_(fn, this, arguments, var=var):
                                                        var = Scope({'fn':fn, 'this':this, 'arguments':arguments, 'schedule':PyJs_schedule_478_}, var)
                                                        var.registers(['fn'])
                                                        var.get('setTimeout')(var.get('fn'), Js(0.0))
                                                    PyJs_schedule_478_._set_name('schedule')
                                                    var.put('schedule', PyJs_schedule_478_)
                                                else:
                                                    var.put('schedule', var.get('noAsyncScheduler'))
                                var.get('module').put('exports', var.get('schedule'))
                            PyJs_anonymous_467_._set_name('anonymous')
                            @Js
                            def PyJs_anonymous_479_(_dereq_, module, exports, this, arguments, var=var):
                                var = Scope({'_dereq_':_dereq_, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
                                var.registers(['exports', 'module', '_dereq_'])
                                Js('use strict')
                                @Js
                                def PyJs_anonymous_480_(Promise, PromiseArray, debug, this, arguments, var=var):
                                    var = Scope({'Promise':Promise, 'PromiseArray':PromiseArray, 'debug':debug, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['SettledPromiseArray', 'PromiseArray', 'util', 'debug', 'PromiseInspection', 'Promise'])
                                    @Js
                                    def PyJsHoisted_SettledPromiseArray_(values, this, arguments, var=var):
                                        var = Scope({'values':values, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['values'])
                                        var.get(u"this").callprop('constructor$', var.get('values'))
                                    PyJsHoisted_SettledPromiseArray_.func_name = 'SettledPromiseArray'
                                    var.put('SettledPromiseArray', PyJsHoisted_SettledPromiseArray_)
                                    var.put('PromiseInspection', var.get('Promise').get('PromiseInspection'))
                                    var.put('util', var.get('_dereq_')(Js('./util')))
                                    pass
                                    var.get('util').callprop('inherits', var.get('SettledPromiseArray'), var.get('PromiseArray'))
                                    @Js
                                    def PyJs_anonymous_481_(index, inspection, this, arguments, var=var):
                                        var = Scope({'index':index, 'inspection':inspection, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['inspection', 'index', 'totalResolved'])
                                        var.get(u"this").get('_values').put(var.get('index'), var.get('inspection'))
                                        var.put('totalResolved', var.get(u"this").put('_totalResolved',Js(var.get(u"this").get('_totalResolved').to_number())+Js(1)))
                                        if (var.get('totalResolved')>=var.get(u"this").get('_length')):
                                            var.get(u"this").callprop('_resolve', var.get(u"this").get('_values'))
                                            return Js(True)
                                        return Js(False)
                                    PyJs_anonymous_481_._set_name('anonymous')
                                    var.get('SettledPromiseArray').get('prototype').put('_promiseResolved', PyJs_anonymous_481_)
                                    @Js
                                    def PyJs_anonymous_482_(value, index, this, arguments, var=var):
                                        var = Scope({'value':value, 'index':index, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['index', 'value', 'ret'])
                                        var.put('ret', var.get('PromiseInspection').create())
                                        var.get('ret').put('_bitField', Js(33554432.0))
                                        var.get('ret').put('_settledValueField', var.get('value'))
                                        return var.get(u"this").callprop('_promiseResolved', var.get('index'), var.get('ret'))
                                    PyJs_anonymous_482_._set_name('anonymous')
                                    var.get('SettledPromiseArray').get('prototype').put('_promiseFulfilled', PyJs_anonymous_482_)
                                    @Js
                                    def PyJs_anonymous_483_(reason, index, this, arguments, var=var):
                                        var = Scope({'reason':reason, 'index':index, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['reason', 'index', 'ret'])
                                        var.put('ret', var.get('PromiseInspection').create())
                                        var.get('ret').put('_bitField', Js(16777216.0))
                                        var.get('ret').put('_settledValueField', var.get('reason'))
                                        return var.get(u"this").callprop('_promiseResolved', var.get('index'), var.get('ret'))
                                    PyJs_anonymous_483_._set_name('anonymous')
                                    var.get('SettledPromiseArray').get('prototype').put('_promiseRejected', PyJs_anonymous_483_)
                                    @Js
                                    def PyJs_anonymous_484_(promises, this, arguments, var=var):
                                        var = Scope({'promises':promises, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['promises'])
                                        var.get('debug').callprop('deprecated', Js('.settle()'), Js('.reflect()'))
                                        return var.get('SettledPromiseArray').create(var.get('promises')).callprop('promise')
                                    PyJs_anonymous_484_._set_name('anonymous')
                                    var.get('Promise').put('settle', PyJs_anonymous_484_)
                                    @Js
                                    def PyJs_anonymous_485_(promises, this, arguments, var=var):
                                        var = Scope({'promises':promises, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['promises'])
                                        return var.get('SettledPromiseArray').create(var.get('promises')).callprop('promise')
                                    PyJs_anonymous_485_._set_name('anonymous')
                                    var.get('Promise').put('allSettled', PyJs_anonymous_485_)
                                    @Js
                                    def PyJs_anonymous_486_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return var.get('Promise').callprop('settle', var.get(u"this"))
                                    PyJs_anonymous_486_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('settle', PyJs_anonymous_486_)
                                PyJs_anonymous_480_._set_name('anonymous')
                                var.get('module').put('exports', PyJs_anonymous_480_)
                            PyJs_anonymous_479_._set_name('anonymous')
                            @Js
                            def PyJs_anonymous_487_(_dereq_, module, exports, this, arguments, var=var):
                                var = Scope({'_dereq_':_dereq_, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
                                var.registers(['exports', 'module', '_dereq_'])
                                Js('use strict')
                                @Js
                                def PyJs_anonymous_488_(Promise, PromiseArray, apiRejection, this, arguments, var=var):
                                    var = Scope({'Promise':Promise, 'PromiseArray':PromiseArray, 'apiRejection':apiRejection, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['some', 'apiRejection', 'PromiseArray', 'util', 'isArray', 'SomePromiseArray', 'Promise', 'RangeError', 'AggregateError', 'CANCELLATION'])
                                    @Js
                                    def PyJsHoisted_SomePromiseArray_(values, this, arguments, var=var):
                                        var = Scope({'values':values, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['values'])
                                        var.get(u"this").callprop('constructor$', var.get('values'))
                                        var.get(u"this").put('_howMany', Js(0.0))
                                        var.get(u"this").put('_unwrap', Js(False))
                                        var.get(u"this").put('_initialized', Js(False))
                                    PyJsHoisted_SomePromiseArray_.func_name = 'SomePromiseArray'
                                    var.put('SomePromiseArray', PyJsHoisted_SomePromiseArray_)
                                    @Js
                                    def PyJsHoisted_some_(promises, howMany, this, arguments, var=var):
                                        var = Scope({'promises':promises, 'howMany':howMany, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['promise', 'howMany', 'promises', 'ret'])
                                        if (PyJsStrictNeq((var.get('howMany')|Js(0.0)),var.get('howMany')) or (var.get('howMany')<Js(0.0))):
                                            return var.get('apiRejection')(Js('expecting a positive integer\n\n    See http://goo.gl/MqrFmX\n'))
                                        var.put('ret', var.get('SomePromiseArray').create(var.get('promises')))
                                        var.put('promise', var.get('ret').callprop('promise'))
                                        var.get('ret').callprop('setHowMany', var.get('howMany'))
                                        var.get('ret').callprop('init')
                                        return var.get('promise')
                                    PyJsHoisted_some_.func_name = 'some'
                                    var.put('some', PyJsHoisted_some_)
                                    var.put('util', var.get('_dereq_')(Js('./util')))
                                    var.put('RangeError', var.get('_dereq_')(Js('./errors')).get('RangeError'))
                                    var.put('AggregateError', var.get('_dereq_')(Js('./errors')).get('AggregateError'))
                                    var.put('isArray', var.get('util').get('isArray'))
                                    var.put('CANCELLATION', Js({}))
                                    pass
                                    var.get('util').callprop('inherits', var.get('SomePromiseArray'), var.get('PromiseArray'))
                                    @Js
                                    def PyJs_anonymous_489_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers(['isArrayResolved'])
                                        if var.get(u"this").get('_initialized').neg():
                                            return var.get('undefined')
                                        if PyJsStrictEq(var.get(u"this").get('_howMany'),Js(0.0)):
                                            var.get(u"this").callprop('_resolve', Js([]))
                                            return var.get('undefined')
                                        var.get(u"this").callprop('_init$', var.get('undefined'), (-Js(5.0)))
                                        var.put('isArrayResolved', var.get('isArray')(var.get(u"this").get('_values')))
                                        if ((var.get(u"this").callprop('_isResolved').neg() and var.get('isArrayResolved')) and (var.get(u"this").get('_howMany')>var.get(u"this").callprop('_canPossiblyFulfill'))):
                                            var.get(u"this").callprop('_reject', var.get(u"this").callprop('_getRangeError', var.get(u"this").callprop('length')))
                                    PyJs_anonymous_489_._set_name('anonymous')
                                    var.get('SomePromiseArray').get('prototype').put('_init', PyJs_anonymous_489_)
                                    @Js
                                    def PyJs_anonymous_490_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        var.get(u"this").put('_initialized', Js(True))
                                        var.get(u"this").callprop('_init')
                                    PyJs_anonymous_490_._set_name('anonymous')
                                    var.get('SomePromiseArray').get('prototype').put('init', PyJs_anonymous_490_)
                                    @Js
                                    def PyJs_anonymous_491_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        var.get(u"this").put('_unwrap', Js(True))
                                    PyJs_anonymous_491_._set_name('anonymous')
                                    var.get('SomePromiseArray').get('prototype').put('setUnwrap', PyJs_anonymous_491_)
                                    @Js
                                    def PyJs_anonymous_492_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return var.get(u"this").get('_howMany')
                                    PyJs_anonymous_492_._set_name('anonymous')
                                    var.get('SomePromiseArray').get('prototype').put('howMany', PyJs_anonymous_492_)
                                    @Js
                                    def PyJs_anonymous_493_(count, this, arguments, var=var):
                                        var = Scope({'count':count, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['count'])
                                        var.get(u"this").put('_howMany', var.get('count'))
                                    PyJs_anonymous_493_._set_name('anonymous')
                                    var.get('SomePromiseArray').get('prototype').put('setHowMany', PyJs_anonymous_493_)
                                    @Js
                                    def PyJs_anonymous_494_(value, this, arguments, var=var):
                                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['value'])
                                        var.get(u"this").callprop('_addFulfilled', var.get('value'))
                                        if PyJsStrictEq(var.get(u"this").callprop('_fulfilled'),var.get(u"this").callprop('howMany')):
                                            var.get(u"this").get('_values').put('length', var.get(u"this").callprop('howMany'))
                                            if (PyJsStrictEq(var.get(u"this").callprop('howMany'),Js(1.0)) and var.get(u"this").get('_unwrap')):
                                                var.get(u"this").callprop('_resolve', var.get(u"this").get('_values').get('0'))
                                            else:
                                                var.get(u"this").callprop('_resolve', var.get(u"this").get('_values'))
                                            return Js(True)
                                        return Js(False)
                                    PyJs_anonymous_494_._set_name('anonymous')
                                    var.get('SomePromiseArray').get('prototype').put('_promiseFulfilled', PyJs_anonymous_494_)
                                    @Js
                                    def PyJs_anonymous_495_(reason, this, arguments, var=var):
                                        var = Scope({'reason':reason, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['reason'])
                                        var.get(u"this").callprop('_addRejected', var.get('reason'))
                                        return var.get(u"this").callprop('_checkOutcome')
                                    PyJs_anonymous_495_._set_name('anonymous')
                                    var.get('SomePromiseArray').get('prototype').put('_promiseRejected', PyJs_anonymous_495_)
                                    @Js
                                    def PyJs_anonymous_496_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        if (var.get(u"this").get('_values').instanceof(var.get('Promise')) or (var.get(u"this").get('_values')==var.get(u"null"))):
                                            return var.get(u"this").callprop('_cancel')
                                        var.get(u"this").callprop('_addRejected', var.get('CANCELLATION'))
                                        return var.get(u"this").callprop('_checkOutcome')
                                    PyJs_anonymous_496_._set_name('anonymous')
                                    var.get('SomePromiseArray').get('prototype').put('_promiseCancelled', PyJs_anonymous_496_)
                                    @Js
                                    def PyJs_anonymous_497_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers(['i', 'e'])
                                        if (var.get(u"this").callprop('howMany')>var.get(u"this").callprop('_canPossiblyFulfill')):
                                            var.put('e', var.get('AggregateError').create())
                                            #for JS loop
                                            var.put('i', var.get(u"this").callprop('length'))
                                            while (var.get('i')<var.get(u"this").get('_values').get('length')):
                                                try:
                                                    if PyJsStrictNeq(var.get(u"this").get('_values').get(var.get('i')),var.get('CANCELLATION')):
                                                        var.get('e').callprop('push', var.get(u"this").get('_values').get(var.get('i')))
                                                finally:
                                                        var.put('i',Js(var.get('i').to_number())+Js(1))
                                            if (var.get('e').get('length')>Js(0.0)):
                                                var.get(u"this").callprop('_reject', var.get('e'))
                                            else:
                                                var.get(u"this").callprop('_cancel')
                                            return Js(True)
                                        return Js(False)
                                    PyJs_anonymous_497_._set_name('anonymous')
                                    var.get('SomePromiseArray').get('prototype').put('_checkOutcome', PyJs_anonymous_497_)
                                    @Js
                                    def PyJs_anonymous_498_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return var.get(u"this").get('_totalResolved')
                                    PyJs_anonymous_498_._set_name('anonymous')
                                    var.get('SomePromiseArray').get('prototype').put('_fulfilled', PyJs_anonymous_498_)
                                    @Js
                                    def PyJs_anonymous_499_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return (var.get(u"this").get('_values').get('length')-var.get(u"this").callprop('length'))
                                    PyJs_anonymous_499_._set_name('anonymous')
                                    var.get('SomePromiseArray').get('prototype').put('_rejected', PyJs_anonymous_499_)
                                    @Js
                                    def PyJs_anonymous_500_(reason, this, arguments, var=var):
                                        var = Scope({'reason':reason, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['reason'])
                                        var.get(u"this").get('_values').callprop('push', var.get('reason'))
                                    PyJs_anonymous_500_._set_name('anonymous')
                                    var.get('SomePromiseArray').get('prototype').put('_addRejected', PyJs_anonymous_500_)
                                    @Js
                                    def PyJs_anonymous_501_(value, this, arguments, var=var):
                                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['value'])
                                        var.get(u"this").get('_values').put((var.get(u"this").put('_totalResolved',Js(var.get(u"this").get('_totalResolved').to_number())+Js(1))-Js(1)), var.get('value'))
                                    PyJs_anonymous_501_._set_name('anonymous')
                                    var.get('SomePromiseArray').get('prototype').put('_addFulfilled', PyJs_anonymous_501_)
                                    @Js
                                    def PyJs_anonymous_502_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return (var.get(u"this").callprop('length')-var.get(u"this").callprop('_rejected'))
                                    PyJs_anonymous_502_._set_name('anonymous')
                                    var.get('SomePromiseArray').get('prototype').put('_canPossiblyFulfill', PyJs_anonymous_502_)
                                    @Js
                                    def PyJs_anonymous_503_(count, this, arguments, var=var):
                                        var = Scope({'count':count, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['count', 'message'])
                                        var.put('message', ((((Js('Input array must contain at least ')+var.get(u"this").get('_howMany'))+Js(' items but contains only '))+var.get('count'))+Js(' items')))
                                        return var.get('RangeError').create(var.get('message'))
                                    PyJs_anonymous_503_._set_name('anonymous')
                                    var.get('SomePromiseArray').get('prototype').put('_getRangeError', PyJs_anonymous_503_)
                                    @Js
                                    def PyJs_anonymous_504_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        var.get(u"this").callprop('_reject', var.get(u"this").callprop('_getRangeError', Js(0.0)))
                                    PyJs_anonymous_504_._set_name('anonymous')
                                    var.get('SomePromiseArray').get('prototype').put('_resolveEmptyArray', PyJs_anonymous_504_)
                                    pass
                                    @Js
                                    def PyJs_anonymous_505_(promises, howMany, this, arguments, var=var):
                                        var = Scope({'promises':promises, 'howMany':howMany, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['howMany', 'promises'])
                                        return var.get('some')(var.get('promises'), var.get('howMany'))
                                    PyJs_anonymous_505_._set_name('anonymous')
                                    var.get('Promise').put('some', PyJs_anonymous_505_)
                                    @Js
                                    def PyJs_anonymous_506_(howMany, this, arguments, var=var):
                                        var = Scope({'howMany':howMany, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['howMany'])
                                        return var.get('some')(var.get(u"this"), var.get('howMany'))
                                    PyJs_anonymous_506_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('some', PyJs_anonymous_506_)
                                    var.get('Promise').put('_SomePromiseArray', var.get('SomePromiseArray'))
                                PyJs_anonymous_488_._set_name('anonymous')
                                var.get('module').put('exports', PyJs_anonymous_488_)
                            PyJs_anonymous_487_._set_name('anonymous')
                            @Js
                            def PyJs_anonymous_507_(_dereq_, module, exports, this, arguments, var=var):
                                var = Scope({'_dereq_':_dereq_, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
                                var.registers(['exports', 'module', '_dereq_'])
                                Js('use strict')
                                @Js
                                def PyJs_anonymous_508_(Promise, this, arguments, var=var):
                                    var = Scope({'Promise':Promise, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['isRejected', 'isPending', 'reason', 'PromiseInspection', 'Promise', 'isResolved', 'isFulfilled', 'value'])
                                    @Js
                                    def PyJsHoisted_PromiseInspection_(promise, this, arguments, var=var):
                                        var = Scope({'promise':promise, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['promise'])
                                        if PyJsStrictNeq(var.get('promise'),var.get('undefined')):
                                            var.put('promise', var.get('promise').callprop('_target'))
                                            var.get(u"this").put('_bitField', var.get('promise').get('_bitField'))
                                            var.get(u"this").put('_settledValueField', (var.get('promise').callprop('_settledValue') if var.get('promise').callprop('_isFateSealed') else var.get('undefined')))
                                        else:
                                            var.get(u"this").put('_bitField', Js(0.0))
                                            var.get(u"this").put('_settledValueField', var.get('undefined'))
                                    PyJsHoisted_PromiseInspection_.func_name = 'PromiseInspection'
                                    var.put('PromiseInspection', PyJsHoisted_PromiseInspection_)
                                    pass
                                    @Js
                                    def PyJs_anonymous_509_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return var.get(u"this").get('_settledValueField')
                                    PyJs_anonymous_509_._set_name('anonymous')
                                    var.get('PromiseInspection').get('prototype').put('_settledValue', PyJs_anonymous_509_)
                                    @Js
                                    def PyJs_anonymous_510_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        if var.get(u"this").callprop('isFulfilled').neg():
                                            PyJsTempException = JsToPyException(var.get('TypeError').create(Js('cannot get fulfillment value of a non-fulfilled promise\n\n    See http://goo.gl/MqrFmX\n')))
                                            raise PyJsTempException
                                        return var.get(u"this").callprop('_settledValue')
                                    PyJs_anonymous_510_._set_name('anonymous')
                                    var.put('value', var.get('PromiseInspection').get('prototype').put('value', PyJs_anonymous_510_))
                                    @Js
                                    def PyJs_anonymous_511_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        if var.get(u"this").callprop('isRejected').neg():
                                            PyJsTempException = JsToPyException(var.get('TypeError').create(Js('cannot get rejection reason of a non-rejected promise\n\n    See http://goo.gl/MqrFmX\n')))
                                            raise PyJsTempException
                                        return var.get(u"this").callprop('_settledValue')
                                    PyJs_anonymous_511_._set_name('anonymous')
                                    var.put('reason', var.get('PromiseInspection').get('prototype').put('error', var.get('PromiseInspection').get('prototype').put('reason', PyJs_anonymous_511_)))
                                    @Js
                                    def PyJs_anonymous_512_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return PyJsStrictNeq((var.get(u"this").get('_bitField')&Js(33554432.0)),Js(0.0))
                                    PyJs_anonymous_512_._set_name('anonymous')
                                    var.put('isFulfilled', var.get('PromiseInspection').get('prototype').put('isFulfilled', PyJs_anonymous_512_))
                                    @Js
                                    def PyJs_anonymous_513_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return PyJsStrictNeq((var.get(u"this").get('_bitField')&Js(16777216.0)),Js(0.0))
                                    PyJs_anonymous_513_._set_name('anonymous')
                                    var.put('isRejected', var.get('PromiseInspection').get('prototype').put('isRejected', PyJs_anonymous_513_))
                                    @Js
                                    def PyJs_anonymous_514_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return PyJsStrictEq((var.get(u"this").get('_bitField')&Js(50397184.0)),Js(0.0))
                                    PyJs_anonymous_514_._set_name('anonymous')
                                    var.put('isPending', var.get('PromiseInspection').get('prototype').put('isPending', PyJs_anonymous_514_))
                                    @Js
                                    def PyJs_anonymous_515_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return PyJsStrictNeq((var.get(u"this").get('_bitField')&Js(50331648.0)),Js(0.0))
                                    PyJs_anonymous_515_._set_name('anonymous')
                                    var.put('isResolved', var.get('PromiseInspection').get('prototype').put('isResolved', PyJs_anonymous_515_))
                                    @Js
                                    def PyJs_anonymous_516_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return PyJsStrictNeq((var.get(u"this").get('_bitField')&Js(8454144.0)),Js(0.0))
                                    PyJs_anonymous_516_._set_name('anonymous')
                                    var.get('PromiseInspection').get('prototype').put('isCancelled', PyJs_anonymous_516_)
                                    @Js
                                    def PyJs_anonymous_517_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return PyJsStrictEq((var.get(u"this").get('_bitField')&Js(65536.0)),Js(65536.0))
                                    PyJs_anonymous_517_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('__isCancelled', PyJs_anonymous_517_)
                                    @Js
                                    def PyJs_anonymous_518_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return var.get(u"this").callprop('_target').callprop('__isCancelled')
                                    PyJs_anonymous_518_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_isCancelled', PyJs_anonymous_518_)
                                    @Js
                                    def PyJs_anonymous_519_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return PyJsStrictNeq((var.get(u"this").callprop('_target').get('_bitField')&Js(8454144.0)),Js(0.0))
                                    PyJs_anonymous_519_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('isCancelled', PyJs_anonymous_519_)
                                    @Js
                                    def PyJs_anonymous_520_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return var.get('isPending').callprop('call', var.get(u"this").callprop('_target'))
                                    PyJs_anonymous_520_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('isPending', PyJs_anonymous_520_)
                                    @Js
                                    def PyJs_anonymous_521_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return var.get('isRejected').callprop('call', var.get(u"this").callprop('_target'))
                                    PyJs_anonymous_521_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('isRejected', PyJs_anonymous_521_)
                                    @Js
                                    def PyJs_anonymous_522_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return var.get('isFulfilled').callprop('call', var.get(u"this").callprop('_target'))
                                    PyJs_anonymous_522_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('isFulfilled', PyJs_anonymous_522_)
                                    @Js
                                    def PyJs_anonymous_523_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return var.get('isResolved').callprop('call', var.get(u"this").callprop('_target'))
                                    PyJs_anonymous_523_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('isResolved', PyJs_anonymous_523_)
                                    @Js
                                    def PyJs_anonymous_524_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return var.get('value').callprop('call', var.get(u"this").callprop('_target'))
                                    PyJs_anonymous_524_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('value', PyJs_anonymous_524_)
                                    @Js
                                    def PyJs_anonymous_525_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers(['target'])
                                        var.put('target', var.get(u"this").callprop('_target'))
                                        var.get('target').callprop('_unsetRejectionIsUnhandled')
                                        return var.get('reason').callprop('call', var.get('target'))
                                    PyJs_anonymous_525_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('reason', PyJs_anonymous_525_)
                                    @Js
                                    def PyJs_anonymous_526_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return var.get(u"this").callprop('_settledValue')
                                    PyJs_anonymous_526_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_value', PyJs_anonymous_526_)
                                    @Js
                                    def PyJs_anonymous_527_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        var.get(u"this").callprop('_unsetRejectionIsUnhandled')
                                        return var.get(u"this").callprop('_settledValue')
                                    PyJs_anonymous_527_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_reason', PyJs_anonymous_527_)
                                    var.get('Promise').put('PromiseInspection', var.get('PromiseInspection'))
                                PyJs_anonymous_508_._set_name('anonymous')
                                var.get('module').put('exports', PyJs_anonymous_508_)
                            PyJs_anonymous_507_._set_name('anonymous')
                            @Js
                            def PyJs_anonymous_528_(_dereq_, module, exports, this, arguments, var=var):
                                var = Scope({'_dereq_':_dereq_, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
                                var.registers(['exports', 'module', '_dereq_'])
                                Js('use strict')
                                @Js
                                def PyJs_anonymous_529_(Promise, INTERNAL, this, arguments, var=var):
                                    var = Scope({'Promise':Promise, 'INTERNAL':INTERNAL, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['errorObj', 'hasProp', 'isAnyBluebirdPromise', 'doGetThen', 'util', 'tryConvertToPromise', 'doThenable', 'INTERNAL', 'Promise', 'getThen', 'isObject'])
                                    @Js
                                    def PyJsHoisted_tryConvertToPromise_(obj, context, this, arguments, var=var):
                                        var = Scope({'obj':obj, 'context':context, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['context', 'then', 'obj', 'ret'])
                                        if var.get('isObject')(var.get('obj')):
                                            if var.get('obj').instanceof(var.get('Promise')):
                                                return var.get('obj')
                                            var.put('then', var.get('getThen')(var.get('obj')))
                                            if PyJsStrictEq(var.get('then'),var.get('errorObj')):
                                                if var.get('context'):
                                                    var.get('context').callprop('_pushContext')
                                                var.put('ret', var.get('Promise').callprop('reject', var.get('then').get('e')))
                                                if var.get('context'):
                                                    var.get('context').callprop('_popContext')
                                                return var.get('ret')
                                            else:
                                                if PyJsStrictEq(var.get('then',throw=False).typeof(),Js('function')):
                                                    if var.get('isAnyBluebirdPromise')(var.get('obj')):
                                                        var.put('ret', var.get('Promise').create(var.get('INTERNAL')))
                                                        var.get('obj').callprop('_then', var.get('ret').get('_fulfill'), var.get('ret').get('_reject'), var.get('undefined'), var.get('ret'), var.get(u"null"))
                                                        return var.get('ret')
                                                    return var.get('doThenable')(var.get('obj'), var.get('then'), var.get('context'))
                                        return var.get('obj')
                                    PyJsHoisted_tryConvertToPromise_.func_name = 'tryConvertToPromise'
                                    var.put('tryConvertToPromise', PyJsHoisted_tryConvertToPromise_)
                                    @Js
                                    def PyJsHoisted_doGetThen_(obj, this, arguments, var=var):
                                        var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['obj'])
                                        return var.get('obj').get('then')
                                    PyJsHoisted_doGetThen_.func_name = 'doGetThen'
                                    var.put('doGetThen', PyJsHoisted_doGetThen_)
                                    @Js
                                    def PyJsHoisted_getThen_(obj, this, arguments, var=var):
                                        var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['obj'])
                                        try:
                                            return var.get('doGetThen')(var.get('obj'))
                                        except PyJsException as PyJsTempException:
                                            PyJsHolder_65_59641604 = var.own.get('e')
                                            var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                                            try:
                                                var.get('errorObj').put('e', var.get('e'))
                                                return var.get('errorObj')
                                            finally:
                                                if PyJsHolder_65_59641604 is not None:
                                                    var.own['e'] = PyJsHolder_65_59641604
                                                else:
                                                    del var.own['e']
                                                del PyJsHolder_65_59641604
                                    PyJsHoisted_getThen_.func_name = 'getThen'
                                    var.put('getThen', PyJsHoisted_getThen_)
                                    @Js
                                    def PyJsHoisted_isAnyBluebirdPromise_(obj, this, arguments, var=var):
                                        var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['obj'])
                                        try:
                                            return var.get('hasProp').callprop('call', var.get('obj'), Js('_promise0'))
                                        except PyJsException as PyJsTempException:
                                            PyJsHolder_65_58689195 = var.own.get('e')
                                            var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                                            try:
                                                return Js(False)
                                            finally:
                                                if PyJsHolder_65_58689195 is not None:
                                                    var.own['e'] = PyJsHolder_65_58689195
                                                else:
                                                    del var.own['e']
                                                del PyJsHolder_65_58689195
                                    PyJsHoisted_isAnyBluebirdPromise_.func_name = 'isAnyBluebirdPromise'
                                    var.put('isAnyBluebirdPromise', PyJsHoisted_isAnyBluebirdPromise_)
                                    @Js
                                    def PyJsHoisted_doThenable_(x, then, context, this, arguments, var=var):
                                        var = Scope({'x':x, 'then':then, 'context':context, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['context', 'x', 'ret', 'promise', 'then', 'resolve', 'result', 'reject', 'synchronous'])
                                        @Js
                                        def PyJsHoisted_resolve_(value, this, arguments, var=var):
                                            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                                            var.registers(['value'])
                                            if var.get('promise').neg():
                                                return var.get('undefined')
                                            var.get('promise').callprop('_resolveCallback', var.get('value'))
                                            var.put('promise', var.get(u"null"))
                                        PyJsHoisted_resolve_.func_name = 'resolve'
                                        var.put('resolve', PyJsHoisted_resolve_)
                                        @Js
                                        def PyJsHoisted_reject_(reason, this, arguments, var=var):
                                            var = Scope({'reason':reason, 'this':this, 'arguments':arguments}, var)
                                            var.registers(['reason'])
                                            if var.get('promise').neg():
                                                return var.get('undefined')
                                            var.get('promise').callprop('_rejectCallback', var.get('reason'), var.get('synchronous'), Js(True))
                                            var.put('promise', var.get(u"null"))
                                        PyJsHoisted_reject_.func_name = 'reject'
                                        var.put('reject', PyJsHoisted_reject_)
                                        var.put('promise', var.get('Promise').create(var.get('INTERNAL')))
                                        var.put('ret', var.get('promise'))
                                        if var.get('context'):
                                            var.get('context').callprop('_pushContext')
                                        var.get('promise').callprop('_captureStackTrace')
                                        if var.get('context'):
                                            var.get('context').callprop('_popContext')
                                        var.put('synchronous', Js(True))
                                        var.put('result', var.get('util').callprop('tryCatch', var.get('then')).callprop('call', var.get('x'), var.get('resolve'), var.get('reject')))
                                        var.put('synchronous', Js(False))
                                        if (var.get('promise') and PyJsStrictEq(var.get('result'),var.get('errorObj'))):
                                            var.get('promise').callprop('_rejectCallback', var.get('result').get('e'), Js(True), Js(True))
                                            var.put('promise', var.get(u"null"))
                                        pass
                                        pass
                                        return var.get('ret')
                                    PyJsHoisted_doThenable_.func_name = 'doThenable'
                                    var.put('doThenable', PyJsHoisted_doThenable_)
                                    var.put('util', var.get('_dereq_')(Js('./util')))
                                    var.put('errorObj', var.get('util').get('errorObj'))
                                    var.put('isObject', var.get('util').get('isObject'))
                                    pass
                                    pass
                                    pass
                                    var.put('hasProp', Js({}).get('hasOwnProperty'))
                                    pass
                                    pass
                                    return var.get('tryConvertToPromise')
                                PyJs_anonymous_529_._set_name('anonymous')
                                var.get('module').put('exports', PyJs_anonymous_529_)
                            PyJs_anonymous_528_._set_name('anonymous')
                            @Js
                            def PyJs_anonymous_530_(_dereq_, module, exports, this, arguments, var=var):
                                var = Scope({'_dereq_':_dereq_, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
                                var.registers(['exports', 'module', '_dereq_'])
                                Js('use strict')
                                @Js
                                def PyJs_anonymous_531_(Promise, INTERNAL, debug, this, arguments, var=var):
                                    var = Scope({'Promise':Promise, 'INTERNAL':INTERNAL, 'debug':debug, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['failureClear', 'HandleWrapper', 'util', 'INTERNAL', 'TimeoutError', 'Promise', 'afterTimeout', 'debug', 'delay', 'afterValue', 'successClear'])
                                    @Js
                                    def PyJsHoisted_HandleWrapper_(handle, this, arguments, var=var):
                                        var = Scope({'handle':handle, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['handle'])
                                        var.get(u"this").put('handle', var.get('handle'))
                                    PyJsHoisted_HandleWrapper_.func_name = 'HandleWrapper'
                                    var.put('HandleWrapper', PyJsHoisted_HandleWrapper_)
                                    @Js
                                    def PyJsHoisted_successClear_(value, this, arguments, var=var):
                                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['value'])
                                        var.get('clearTimeout')(var.get(u"this").get('handle'))
                                        return var.get('value')
                                    PyJsHoisted_successClear_.func_name = 'successClear'
                                    var.put('successClear', PyJsHoisted_successClear_)
                                    @Js
                                    def PyJsHoisted_failureClear_(reason, this, arguments, var=var):
                                        var = Scope({'reason':reason, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['reason'])
                                        var.get('clearTimeout')(var.get(u"this").get('handle'))
                                        PyJsTempException = JsToPyException(var.get('reason'))
                                        raise PyJsTempException
                                    PyJsHoisted_failureClear_.func_name = 'failureClear'
                                    var.put('failureClear', PyJsHoisted_failureClear_)
                                    var.put('util', var.get('_dereq_')(Js('./util')))
                                    var.put('TimeoutError', var.get('Promise').get('TimeoutError'))
                                    pass
                                    @Js
                                    def PyJs_anonymous_532_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        var.get('clearTimeout')(var.get(u"this").get('handle'))
                                    PyJs_anonymous_532_._set_name('anonymous')
                                    var.get('HandleWrapper').get('prototype').put('_resultCancelled', PyJs_anonymous_532_)
                                    @Js
                                    def PyJs_afterValue_533_(value, this, arguments, var=var):
                                        var = Scope({'value':value, 'this':this, 'arguments':arguments, 'afterValue':PyJs_afterValue_533_}, var)
                                        var.registers(['value'])
                                        return var.get('delay')((+var.get(u"this"))).callprop('thenReturn', var.get('value'))
                                    PyJs_afterValue_533_._set_name('afterValue')
                                    var.put('afterValue', PyJs_afterValue_533_)
                                    @Js
                                    def PyJs_anonymous_534_(ms, value, this, arguments, var=var):
                                        var = Scope({'ms':ms, 'value':value, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['value', 'handle', 'ms', 'ret'])
                                        pass
                                        pass
                                        if PyJsStrictNeq(var.get('value'),var.get('undefined')):
                                            var.put('ret', var.get('Promise').callprop('resolve', var.get('value')).callprop('_then', var.get('afterValue'), var.get(u"null"), var.get(u"null"), var.get('ms'), var.get('undefined')))
                                            if (var.get('debug').callprop('cancellation') and var.get('value').instanceof(var.get('Promise'))):
                                                var.get('ret').callprop('_setOnCancel', var.get('value'))
                                        else:
                                            var.put('ret', var.get('Promise').create(var.get('INTERNAL')))
                                            @Js
                                            def PyJs_anonymous_535_(this, arguments, var=var):
                                                var = Scope({'this':this, 'arguments':arguments}, var)
                                                var.registers([])
                                                var.get('ret').callprop('_fulfill')
                                            PyJs_anonymous_535_._set_name('anonymous')
                                            var.put('handle', var.get('setTimeout')(PyJs_anonymous_535_, (+var.get('ms'))))
                                            if var.get('debug').callprop('cancellation'):
                                                var.get('ret').callprop('_setOnCancel', var.get('HandleWrapper').create(var.get('handle')))
                                            var.get('ret').callprop('_captureStackTrace')
                                        var.get('ret').callprop('_setAsyncGuaranteed')
                                        return var.get('ret')
                                    PyJs_anonymous_534_._set_name('anonymous')
                                    var.put('delay', var.get('Promise').put('delay', PyJs_anonymous_534_))
                                    @Js
                                    def PyJs_anonymous_536_(ms, this, arguments, var=var):
                                        var = Scope({'ms':ms, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['ms'])
                                        return var.get('delay')(var.get('ms'), var.get(u"this"))
                                    PyJs_anonymous_536_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('delay', PyJs_anonymous_536_)
                                    @Js
                                    def PyJs_afterTimeout_537_(promise, message, parent, this, arguments, var=var):
                                        var = Scope({'promise':promise, 'message':message, 'parent':parent, 'this':this, 'arguments':arguments, 'afterTimeout':PyJs_afterTimeout_537_}, var)
                                        var.registers(['parent', 'err', 'message', 'promise'])
                                        pass
                                        if PyJsStrictNeq(var.get('message',throw=False).typeof(),Js('string')):
                                            if var.get('message').instanceof(var.get('Error')):
                                                var.put('err', var.get('message'))
                                            else:
                                                var.put('err', var.get('TimeoutError').create(Js('operation timed out')))
                                        else:
                                            var.put('err', var.get('TimeoutError').create(var.get('message')))
                                        var.get('util').callprop('markAsOriginatingFromRejection', var.get('err'))
                                        var.get('promise').callprop('_attachExtraTrace', var.get('err'))
                                        var.get('promise').callprop('_reject', var.get('err'))
                                        if (var.get('parent')!=var.get(u"null")):
                                            var.get('parent').callprop('cancel')
                                    PyJs_afterTimeout_537_._set_name('afterTimeout')
                                    var.put('afterTimeout', PyJs_afterTimeout_537_)
                                    pass
                                    pass
                                    @Js
                                    def PyJs_anonymous_538_(ms, message, this, arguments, var=var):
                                        var = Scope({'ms':ms, 'message':message, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['handleWrapper', 'ret', 'parent', 'message', 'ms'])
                                        var.put('ms', (+var.get('ms')))
                                        pass
                                        @Js
                                        def PyJs_timeoutTimeout_539_(this, arguments, var=var):
                                            var = Scope({'this':this, 'arguments':arguments, 'timeoutTimeout':PyJs_timeoutTimeout_539_}, var)
                                            var.registers([])
                                            if var.get('ret').callprop('isPending'):
                                                var.get('afterTimeout')(var.get('ret'), var.get('message'), var.get('parent'))
                                        PyJs_timeoutTimeout_539_._set_name('timeoutTimeout')
                                        var.put('handleWrapper', var.get('HandleWrapper').create(var.get('setTimeout')(PyJs_timeoutTimeout_539_, var.get('ms'))))
                                        if var.get('debug').callprop('cancellation'):
                                            var.put('parent', var.get(u"this").callprop('then'))
                                            var.put('ret', var.get('parent').callprop('_then', var.get('successClear'), var.get('failureClear'), var.get('undefined'), var.get('handleWrapper'), var.get('undefined')))
                                            var.get('ret').callprop('_setOnCancel', var.get('handleWrapper'))
                                        else:
                                            var.put('ret', var.get(u"this").callprop('_then', var.get('successClear'), var.get('failureClear'), var.get('undefined'), var.get('handleWrapper'), var.get('undefined')))
                                        return var.get('ret')
                                    PyJs_anonymous_538_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('timeout', PyJs_anonymous_538_)
                                PyJs_anonymous_531_._set_name('anonymous')
                                var.get('module').put('exports', PyJs_anonymous_531_)
                            PyJs_anonymous_530_._set_name('anonymous')
                            @Js
                            def PyJs_anonymous_540_(_dereq_, module, exports, this, arguments, var=var):
                                var = Scope({'_dereq_':_dereq_, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
                                var.registers(['exports', 'module', '_dereq_'])
                                Js('use strict')
                                @Js
                                def PyJs_anonymous_541_(Promise, apiRejection, tryConvertToPromise, createContext, INTERNAL, debug, this, arguments, var=var):
                                    var = Scope({'Promise':Promise, 'apiRejection':apiRejection, 'tryConvertToPromise':tryConvertToPromise, 'createContext':createContext, 'INTERNAL':INTERNAL, 'debug':debug, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['apiRejection', 'inherits', 'util', 'tryConvertToPromise', 'INTERNAL', 'maybeUnwrapDisposer', 'FunctionDisposer', 'Disposer', 'tryCatch', 'thrower', 'debug', 'NULL', 'dispose', 'TypeError', 'errorObj', 'createContext', 'ResourceList', 'Promise', 'castPreservingDisposable'])
                                    @Js
                                    def PyJsHoisted_thrower_(e, this, arguments, var=var):
                                        var = Scope({'e':e, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['e'])
                                        @Js
                                        def PyJs_anonymous_542_(this, arguments, var=var):
                                            var = Scope({'this':this, 'arguments':arguments}, var)
                                            var.registers([])
                                            PyJsTempException = JsToPyException(var.get('e'))
                                            raise PyJsTempException
                                        PyJs_anonymous_542_._set_name('anonymous')
                                        var.get('setTimeout')(PyJs_anonymous_542_, Js(0.0))
                                    PyJsHoisted_thrower_.func_name = 'thrower'
                                    var.put('thrower', PyJsHoisted_thrower_)
                                    @Js
                                    def PyJsHoisted_castPreservingDisposable_(thenable, this, arguments, var=var):
                                        var = Scope({'thenable':thenable, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['maybePromise', 'thenable'])
                                        var.put('maybePromise', var.get('tryConvertToPromise')(var.get('thenable')))
                                        if (((PyJsStrictNeq(var.get('maybePromise'),var.get('thenable')) and PyJsStrictEq(var.get('thenable').get('_isDisposable').typeof(),Js('function'))) and PyJsStrictEq(var.get('thenable').get('_getDisposer').typeof(),Js('function'))) and var.get('thenable').callprop('_isDisposable')):
                                            var.get('maybePromise').callprop('_setDisposable', var.get('thenable').callprop('_getDisposer'))
                                        return var.get('maybePromise')
                                    PyJsHoisted_castPreservingDisposable_.func_name = 'castPreservingDisposable'
                                    var.put('castPreservingDisposable', PyJsHoisted_castPreservingDisposable_)
                                    @Js
                                    def PyJsHoisted_dispose_(resources, inspection, this, arguments, var=var):
                                        var = Scope({'resources':resources, 'inspection':inspection, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['len', 'i', 'iterator', 'ret', 'inspection', 'resources'])
                                        @Js
                                        def PyJsHoisted_iterator_(this, arguments, var=var):
                                            var = Scope({'this':this, 'arguments':arguments}, var)
                                            var.registers(['maybePromise'])
                                            if (var.get('i')>=var.get('len')):
                                                return var.get('ret').callprop('_fulfill')
                                            var.put('maybePromise', var.get('castPreservingDisposable')(var.get('resources').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)))))
                                            if (var.get('maybePromise').instanceof(var.get('Promise')) and var.get('maybePromise').callprop('_isDisposable')):
                                                try:
                                                    var.put('maybePromise', var.get('tryConvertToPromise')(var.get('maybePromise').callprop('_getDisposer').callprop('tryDispose', var.get('inspection')), var.get('resources').get('promise')))
                                                except PyJsException as PyJsTempException:
                                                    PyJsHolder_65_21697614 = var.own.get('e')
                                                    var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                                                    try:
                                                        return var.get('thrower')(var.get('e'))
                                                    finally:
                                                        if PyJsHolder_65_21697614 is not None:
                                                            var.own['e'] = PyJsHolder_65_21697614
                                                        else:
                                                            del var.own['e']
                                                        del PyJsHolder_65_21697614
                                                if var.get('maybePromise').instanceof(var.get('Promise')):
                                                    return var.get('maybePromise').callprop('_then', var.get('iterator'), var.get('thrower'), var.get(u"null"), var.get(u"null"), var.get(u"null"))
                                            var.get('iterator')()
                                        PyJsHoisted_iterator_.func_name = 'iterator'
                                        var.put('iterator', PyJsHoisted_iterator_)
                                        var.put('i', Js(0.0))
                                        var.put('len', var.get('resources').get('length'))
                                        var.put('ret', var.get('Promise').create(var.get('INTERNAL')))
                                        pass
                                        var.get('iterator')()
                                        return var.get('ret')
                                    PyJsHoisted_dispose_.func_name = 'dispose'
                                    var.put('dispose', PyJsHoisted_dispose_)
                                    @Js
                                    def PyJsHoisted_Disposer_(data, promise, context, this, arguments, var=var):
                                        var = Scope({'data':data, 'promise':promise, 'context':context, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['context', 'data', 'promise'])
                                        var.get(u"this").put('_data', var.get('data'))
                                        var.get(u"this").put('_promise', var.get('promise'))
                                        var.get(u"this").put('_context', var.get('context'))
                                    PyJsHoisted_Disposer_.func_name = 'Disposer'
                                    var.put('Disposer', PyJsHoisted_Disposer_)
                                    @Js
                                    def PyJsHoisted_FunctionDisposer_(fn, promise, context, this, arguments, var=var):
                                        var = Scope({'fn':fn, 'promise':promise, 'context':context, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['context', 'fn', 'promise'])
                                        var.get(u"this").callprop('constructor$', var.get('fn'), var.get('promise'), var.get('context'))
                                    PyJsHoisted_FunctionDisposer_.func_name = 'FunctionDisposer'
                                    var.put('FunctionDisposer', PyJsHoisted_FunctionDisposer_)
                                    @Js
                                    def PyJsHoisted_maybeUnwrapDisposer_(value, this, arguments, var=var):
                                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['value'])
                                        if var.get('Disposer').callprop('isDisposer', var.get('value')):
                                            var.get(u"this").get('resources').get(var.get(u"this").get('index')).callprop('_setDisposable', var.get('value'))
                                            return var.get('value').callprop('promise')
                                        return var.get('value')
                                    PyJsHoisted_maybeUnwrapDisposer_.func_name = 'maybeUnwrapDisposer'
                                    var.put('maybeUnwrapDisposer', PyJsHoisted_maybeUnwrapDisposer_)
                                    @Js
                                    def PyJsHoisted_ResourceList_(length, this, arguments, var=var):
                                        var = Scope({'length':length, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['length'])
                                        var.get(u"this").put('length', var.get('length'))
                                        var.get(u"this").put('promise', var.get(u"null"))
                                        var.get(u"this").put((var.get('length')-Js(1.0)), var.get(u"null"))
                                    PyJsHoisted_ResourceList_.func_name = 'ResourceList'
                                    var.put('ResourceList', PyJsHoisted_ResourceList_)
                                    var.put('util', var.get('_dereq_')(Js('./util')))
                                    var.put('TypeError', var.get('_dereq_')(Js('./errors')).get('TypeError'))
                                    var.put('inherits', var.get('_dereq_')(Js('./util')).get('inherits'))
                                    var.put('errorObj', var.get('util').get('errorObj'))
                                    var.put('tryCatch', var.get('util').get('tryCatch'))
                                    var.put('NULL', Js({}))
                                    pass
                                    pass
                                    pass
                                    pass
                                    @Js
                                    def PyJs_anonymous_543_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return var.get(u"this").get('_data')
                                    PyJs_anonymous_543_._set_name('anonymous')
                                    var.get('Disposer').get('prototype').put('data', PyJs_anonymous_543_)
                                    @Js
                                    def PyJs_anonymous_544_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return var.get(u"this").get('_promise')
                                    PyJs_anonymous_544_._set_name('anonymous')
                                    var.get('Disposer').get('prototype').put('promise', PyJs_anonymous_544_)
                                    @Js
                                    def PyJs_anonymous_545_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        if var.get(u"this").callprop('promise').callprop('isFulfilled'):
                                            return var.get(u"this").callprop('promise').callprop('value')
                                        return var.get('NULL')
                                    PyJs_anonymous_545_._set_name('anonymous')
                                    var.get('Disposer').get('prototype').put('resource', PyJs_anonymous_545_)
                                    @Js
                                    def PyJs_anonymous_546_(inspection, this, arguments, var=var):
                                        var = Scope({'inspection':inspection, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['context', 'inspection', 'resource', 'ret'])
                                        var.put('resource', var.get(u"this").callprop('resource'))
                                        var.put('context', var.get(u"this").get('_context'))
                                        if PyJsStrictNeq(var.get('context'),var.get('undefined')):
                                            var.get('context').callprop('_pushContext')
                                        var.put('ret', (var.get(u"this").callprop('doDispose', var.get('resource'), var.get('inspection')) if PyJsStrictNeq(var.get('resource'),var.get('NULL')) else var.get(u"null")))
                                        if PyJsStrictNeq(var.get('context'),var.get('undefined')):
                                            var.get('context').callprop('_popContext')
                                        var.get(u"this").get('_promise').callprop('_unsetDisposable')
                                        var.get(u"this").put('_data', var.get(u"null"))
                                        return var.get('ret')
                                    PyJs_anonymous_546_._set_name('anonymous')
                                    var.get('Disposer').get('prototype').put('tryDispose', PyJs_anonymous_546_)
                                    @Js
                                    def PyJs_anonymous_547_(d, this, arguments, var=var):
                                        var = Scope({'d':d, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['d'])
                                        return (((var.get('d')!=var.get(u"null")) and PyJsStrictEq(var.get('d').get('resource').typeof(),Js('function'))) and PyJsStrictEq(var.get('d').get('tryDispose').typeof(),Js('function')))
                                    PyJs_anonymous_547_._set_name('anonymous')
                                    var.get('Disposer').put('isDisposer', PyJs_anonymous_547_)
                                    pass
                                    var.get('inherits')(var.get('FunctionDisposer'), var.get('Disposer'))
                                    @Js
                                    def PyJs_anonymous_548_(resource, inspection, this, arguments, var=var):
                                        var = Scope({'resource':resource, 'inspection':inspection, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['inspection', 'resource', 'fn'])
                                        var.put('fn', var.get(u"this").callprop('data'))
                                        return var.get('fn').callprop('call', var.get('resource'), var.get('resource'), var.get('inspection'))
                                    PyJs_anonymous_548_._set_name('anonymous')
                                    var.get('FunctionDisposer').get('prototype').put('doDispose', PyJs_anonymous_548_)
                                    pass
                                    pass
                                    @Js
                                    def PyJs_anonymous_549_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers(['item', 'len', 'i'])
                                        var.put('len', var.get(u"this").get('length'))
                                        #for JS loop
                                        var.put('i', Js(0.0))
                                        while (var.get('i')<var.get('len')):
                                            try:
                                                var.put('item', var.get(u"this").get(var.get('i')))
                                                if var.get('item').instanceof(var.get('Promise')):
                                                    var.get('item').callprop('cancel')
                                            finally:
                                                    var.put('i',Js(var.get('i').to_number())+Js(1))
                                    PyJs_anonymous_549_._set_name('anonymous')
                                    var.get('ResourceList').get('prototype').put('_resultCancelled', PyJs_anonymous_549_)
                                    @Js
                                    def PyJs_anonymous_550_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers(['len', 'i', 'maybePromise', 'input', 'disposer', 'promise', 'spreadArgs', 'resultPromise', 'resource', 'reflectedResources', 'resources', 'fn'])
                                        var.put('len', var.get('arguments').get('length'))
                                        if (var.get('len')<Js(2.0)):
                                            return var.get('apiRejection')(Js('you must pass at least 2 arguments to Promise.using'))
                                        var.put('fn', var.get('arguments').get((var.get('len')-Js(1.0))))
                                        if PyJsStrictNeq(var.get('fn',throw=False).typeof(),Js('function')):
                                            return var.get('apiRejection')((Js('expecting a function but got ')+var.get('util').callprop('classString', var.get('fn'))))
                                        pass
                                        var.put('spreadArgs', Js(True))
                                        if (PyJsStrictEq(var.get('len'),Js(2.0)) and var.get('Array').callprop('isArray', var.get('arguments').get('0'))):
                                            var.put('input', var.get('arguments').get('0'))
                                            var.put('len', var.get('input').get('length'))
                                            var.put('spreadArgs', Js(False))
                                        else:
                                            var.put('input', var.get('arguments'))
                                            (var.put('len',Js(var.get('len').to_number())-Js(1))+Js(1))
                                        var.put('resources', var.get('ResourceList').create(var.get('len')))
                                        #for JS loop
                                        var.put('i', Js(0.0))
                                        while (var.get('i')<var.get('len')):
                                            try:
                                                var.put('resource', var.get('input').get(var.get('i')))
                                                if var.get('Disposer').callprop('isDisposer', var.get('resource')):
                                                    var.put('disposer', var.get('resource'))
                                                    var.put('resource', var.get('resource').callprop('promise'))
                                                    var.get('resource').callprop('_setDisposable', var.get('disposer'))
                                                else:
                                                    var.put('maybePromise', var.get('tryConvertToPromise')(var.get('resource')))
                                                    if var.get('maybePromise').instanceof(var.get('Promise')):
                                                        var.put('resource', var.get('maybePromise').callprop('_then', var.get('maybeUnwrapDisposer'), var.get(u"null"), var.get(u"null"), Js({'resources':var.get('resources'),'index':var.get('i')}), var.get('undefined')))
                                                var.get('resources').put(var.get('i'), var.get('resource'))
                                            finally:
                                                    var.put('i',Js(var.get('i').to_number())+Js(1))
                                        var.put('reflectedResources', var.get('Array').create(var.get('resources').get('length')))
                                        #for JS loop
                                        var.put('i', Js(0.0))
                                        while (var.get('i')<var.get('reflectedResources').get('length')):
                                            try:
                                                var.get('reflectedResources').put(var.get('i'), var.get('Promise').callprop('resolve', var.get('resources').get(var.get('i'))).callprop('reflect'))
                                            finally:
                                                    var.put('i',Js(var.get('i').to_number())+Js(1))
                                        @Js
                                        def PyJs_anonymous_551_(inspections, this, arguments, var=var):
                                            var = Scope({'inspections':inspections, 'this':this, 'arguments':arguments}, var)
                                            var.registers(['i', 'ret', 'inspection', 'promiseCreated', 'inspections'])
                                            #for JS loop
                                            var.put('i', Js(0.0))
                                            while (var.get('i')<var.get('inspections').get('length')):
                                                try:
                                                    var.put('inspection', var.get('inspections').get(var.get('i')))
                                                    if var.get('inspection').callprop('isRejected'):
                                                        var.get('errorObj').put('e', var.get('inspection').callprop('error'))
                                                        return var.get('errorObj')
                                                    else:
                                                        if var.get('inspection').callprop('isFulfilled').neg():
                                                            var.get('resultPromise').callprop('cancel')
                                                            return var.get('undefined')
                                                    var.get('inspections').put(var.get('i'), var.get('inspection').callprop('value'))
                                                finally:
                                                        var.put('i',Js(var.get('i').to_number())+Js(1))
                                            var.get('promise').callprop('_pushContext')
                                            var.put('fn', var.get('tryCatch')(var.get('fn')))
                                            var.put('ret', (var.get('fn').callprop('apply', var.get('undefined'), var.get('inspections')) if var.get('spreadArgs') else var.get('fn')(var.get('inspections'))))
                                            var.put('promiseCreated', var.get('promise').callprop('_popContext'))
                                            var.get('debug').callprop('checkForgottenReturns', var.get('ret'), var.get('promiseCreated'), Js('Promise.using'), var.get('promise'))
                                            return var.get('ret')
                                        PyJs_anonymous_551_._set_name('anonymous')
                                        var.put('resultPromise', var.get('Promise').callprop('all', var.get('reflectedResources')).callprop('then', PyJs_anonymous_551_))
                                        @Js
                                        def PyJs_anonymous_552_(this, arguments, var=var):
                                            var = Scope({'this':this, 'arguments':arguments}, var)
                                            var.registers(['inspection'])
                                            var.put('inspection', var.get('Promise').get('PromiseInspection').create(var.get('resultPromise')))
                                            return var.get('dispose')(var.get('resources'), var.get('inspection'))
                                        PyJs_anonymous_552_._set_name('anonymous')
                                        var.put('promise', var.get('resultPromise').callprop('lastly', PyJs_anonymous_552_))
                                        var.get('resources').put('promise', var.get('promise'))
                                        var.get('promise').callprop('_setOnCancel', var.get('resources'))
                                        return var.get('promise')
                                    PyJs_anonymous_550_._set_name('anonymous')
                                    var.get('Promise').put('using', PyJs_anonymous_550_)
                                    @Js
                                    def PyJs_anonymous_553_(disposer, this, arguments, var=var):
                                        var = Scope({'disposer':disposer, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['disposer'])
                                        var.get(u"this").put('_bitField', (var.get(u"this").get('_bitField')|Js(131072.0)))
                                        var.get(u"this").put('_disposer', var.get('disposer'))
                                    PyJs_anonymous_553_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_setDisposable', PyJs_anonymous_553_)
                                    @Js
                                    def PyJs_anonymous_554_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return ((var.get(u"this").get('_bitField')&Js(131072.0))>Js(0.0))
                                    PyJs_anonymous_554_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_isDisposable', PyJs_anonymous_554_)
                                    @Js
                                    def PyJs_anonymous_555_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return var.get(u"this").get('_disposer')
                                    PyJs_anonymous_555_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_getDisposer', PyJs_anonymous_555_)
                                    @Js
                                    def PyJs_anonymous_556_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        var.get(u"this").put('_bitField', (var.get(u"this").get('_bitField')&(~Js(131072.0))))
                                        var.get(u"this").put('_disposer', var.get('undefined'))
                                    PyJs_anonymous_556_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('_unsetDisposable', PyJs_anonymous_556_)
                                    @Js
                                    def PyJs_anonymous_557_(fn, this, arguments, var=var):
                                        var = Scope({'fn':fn, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['fn'])
                                        if PyJsStrictEq(var.get('fn',throw=False).typeof(),Js('function')):
                                            return var.get('FunctionDisposer').create(var.get('fn'), var.get(u"this"), var.get('createContext')())
                                        PyJsTempException = JsToPyException(var.get('TypeError').create())
                                        raise PyJsTempException
                                    PyJs_anonymous_557_._set_name('anonymous')
                                    var.get('Promise').get('prototype').put('disposer', PyJs_anonymous_557_)
                                PyJs_anonymous_541_._set_name('anonymous')
                                var.get('module').put('exports', PyJs_anonymous_541_)
                            PyJs_anonymous_540_._set_name('anonymous')
                            @Js
                            def PyJs_anonymous_558_(_dereq_, module, exports, this, arguments, var=var):
                                var = Scope({'_dereq_':_dereq_, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
                                var.registers(['isError', 'copyDescriptors', 'filledRange', 'ret', 'inherits', 'safeToString', 'es5', 'getDataPropertyOrDefault', 'thisAssignmentPattern', 'env', 'ensureErrorObject', 'tryCatchTarget', 'classString', 'asArray', 'getNativePromise', '_dereq_', 'globalObject', 'isIdentifier', 'tryCatcher', 'maybeWrapAsError', 'tryCatch', 'withAppended', 'reflectHandler', 'isNode', 'isPrimitive', 'thrower', 'isClass', 'originatesFromRejection', 'canAttachTrace', 'isObject', 'errorObj', 'markAsOriginatingFromRejection', 'module', 'notEnumerableProp', 'toFastProperties', 'exports', 'canEvaluate', 'inheritedDataKeys', 'rident', 'ArrayFrom', 'contextBind', 'hasEnvVariables'])
                                @Js
                                def PyJsHoisted_tryCatcher_(this, arguments, var=var):
                                    var = Scope({'this':this, 'arguments':arguments}, var)
                                    var.registers(['target'])
                                    try:
                                        var.put('target', var.get('tryCatchTarget'))
                                        var.put('tryCatchTarget', var.get(u"null"))
                                        return var.get('target').callprop('apply', var.get(u"this"), var.get('arguments'))
                                    except PyJsException as PyJsTempException:
                                        PyJsHolder_65_39394946 = var.own.get('e')
                                        var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                                        try:
                                            var.get('errorObj').put('e', var.get('e'))
                                            return var.get('errorObj')
                                        finally:
                                            if PyJsHolder_65_39394946 is not None:
                                                var.own['e'] = PyJsHolder_65_39394946
                                            else:
                                                del var.own['e']
                                            del PyJsHolder_65_39394946
                                PyJsHoisted_tryCatcher_.func_name = 'tryCatcher'
                                var.put('tryCatcher', PyJsHoisted_tryCatcher_)
                                @Js
                                def PyJsHoisted_tryCatch_(fn, this, arguments, var=var):
                                    var = Scope({'fn':fn, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['fn'])
                                    var.put('tryCatchTarget', var.get('fn'))
                                    return var.get('tryCatcher')
                                PyJsHoisted_tryCatch_.func_name = 'tryCatch'
                                var.put('tryCatch', PyJsHoisted_tryCatch_)
                                @Js
                                def PyJsHoisted_isPrimitive_(val, this, arguments, var=var):
                                    var = Scope({'val':val, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['val'])
                                    return (((((var.get('val')==var.get(u"null")) or PyJsStrictEq(var.get('val'),Js(True))) or PyJsStrictEq(var.get('val'),Js(False))) or PyJsStrictEq(var.get('val',throw=False).typeof(),Js('string'))) or PyJsStrictEq(var.get('val',throw=False).typeof(),Js('number')))
                                PyJsHoisted_isPrimitive_.func_name = 'isPrimitive'
                                var.put('isPrimitive', PyJsHoisted_isPrimitive_)
                                @Js
                                def PyJsHoisted_isObject_(value, this, arguments, var=var):
                                    var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['value'])
                                    return (PyJsStrictEq(var.get('value',throw=False).typeof(),Js('function')) or (PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('value',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('value'))),Js('object')) and PyJsStrictNeq(var.get('value'),var.get(u"null"))))
                                PyJsHoisted_isObject_.func_name = 'isObject'
                                var.put('isObject', PyJsHoisted_isObject_)
                                @Js
                                def PyJsHoisted_maybeWrapAsError_(maybeError, this, arguments, var=var):
                                    var = Scope({'maybeError':maybeError, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['maybeError'])
                                    if var.get('isPrimitive')(var.get('maybeError')).neg():
                                        return var.get('maybeError')
                                    return var.get('Error').create(var.get('safeToString')(var.get('maybeError')))
                                PyJsHoisted_maybeWrapAsError_.func_name = 'maybeWrapAsError'
                                var.put('maybeWrapAsError', PyJsHoisted_maybeWrapAsError_)
                                @Js
                                def PyJsHoisted_withAppended_(target, appendee, this, arguments, var=var):
                                    var = Scope({'target':target, 'appendee':appendee, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['len', 'i', 'ret', 'target', 'appendee'])
                                    var.put('len', var.get('target').get('length'))
                                    var.put('ret', var.get('Array').create((var.get('len')+Js(1.0))))
                                    pass
                                    #for JS loop
                                    var.put('i', Js(0.0))
                                    while (var.get('i')<var.get('len')):
                                        try:
                                            var.get('ret').put(var.get('i'), var.get('target').get(var.get('i')))
                                        finally:
                                                var.put('i',Js(var.get('i').to_number())+Js(1))
                                    var.get('ret').put(var.get('i'), var.get('appendee'))
                                    return var.get('ret')
                                PyJsHoisted_withAppended_.func_name = 'withAppended'
                                var.put('withAppended', PyJsHoisted_withAppended_)
                                @Js
                                def PyJsHoisted_getDataPropertyOrDefault_(obj, key, defaultValue, this, arguments, var=var):
                                    var = Scope({'obj':obj, 'key':key, 'defaultValue':defaultValue, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['obj', 'key', 'desc', 'defaultValue'])
                                    if var.get('es5').get('isES5'):
                                        var.put('desc', var.get('Object').callprop('getOwnPropertyDescriptor', var.get('obj'), var.get('key')))
                                        if (var.get('desc')!=var.get(u"null")):
                                            return (var.get('desc').get('value') if ((var.get('desc').get('get')==var.get(u"null")) and (var.get('desc').get('set')==var.get(u"null"))) else var.get('defaultValue'))
                                    else:
                                        return (var.get('obj').get(var.get('key')) if Js({}).get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key')) else var.get('undefined'))
                                PyJsHoisted_getDataPropertyOrDefault_.func_name = 'getDataPropertyOrDefault'
                                var.put('getDataPropertyOrDefault', PyJsHoisted_getDataPropertyOrDefault_)
                                @Js
                                def PyJsHoisted_notEnumerableProp_(obj, name, value, this, arguments, var=var):
                                    var = Scope({'obj':obj, 'name':name, 'value':value, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['name', 'descriptor', 'obj', 'value'])
                                    if var.get('isPrimitive')(var.get('obj')):
                                        return var.get('obj')
                                    var.put('descriptor', Js({'value':var.get('value'),'configurable':Js(True),'enumerable':Js(False),'writable':Js(True)}))
                                    var.get('es5').callprop('defineProperty', var.get('obj'), var.get('name'), var.get('descriptor'))
                                    return var.get('obj')
                                PyJsHoisted_notEnumerableProp_.func_name = 'notEnumerableProp'
                                var.put('notEnumerableProp', PyJsHoisted_notEnumerableProp_)
                                @Js
                                def PyJsHoisted_thrower_(r, this, arguments, var=var):
                                    var = Scope({'r':r, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['r'])
                                    PyJsTempException = JsToPyException(var.get('r'))
                                    raise PyJsTempException
                                PyJsHoisted_thrower_.func_name = 'thrower'
                                var.put('thrower', PyJsHoisted_thrower_)
                                @Js
                                def PyJsHoisted_isClass_(fn, this, arguments, var=var):
                                    var = Scope({'fn':fn, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['hasMethods', 'fn', 'hasThisAssignmentAndStaticMethods', 'hasMethodsOtherThanConstructor', 'keys'])
                                    try:
                                        if PyJsStrictEq(var.get('fn',throw=False).typeof(),Js('function')):
                                            var.put('keys', var.get('es5').callprop('names', var.get('fn').get('prototype')))
                                            var.put('hasMethods', (var.get('es5').get('isES5') and (var.get('keys').get('length')>Js(1.0))))
                                            var.put('hasMethodsOtherThanConstructor', ((var.get('keys').get('length')>Js(0.0)) and (PyJsStrictEq(var.get('keys').get('length'),Js(1.0)) and PyJsStrictEq(var.get('keys').get('0'),Js('constructor'))).neg()))
                                            var.put('hasThisAssignmentAndStaticMethods', (var.get('thisAssignmentPattern').callprop('test', (var.get('fn')+Js(''))) and (var.get('es5').callprop('names', var.get('fn')).get('length')>Js(0.0))))
                                            if ((var.get('hasMethods') or var.get('hasMethodsOtherThanConstructor')) or var.get('hasThisAssignmentAndStaticMethods')):
                                                return Js(True)
                                        return Js(False)
                                    except PyJsException as PyJsTempException:
                                        PyJsHolder_65_39905344 = var.own.get('e')
                                        var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                                        try:
                                            return Js(False)
                                        finally:
                                            if PyJsHolder_65_39905344 is not None:
                                                var.own['e'] = PyJsHolder_65_39905344
                                            else:
                                                del var.own['e']
                                            del PyJsHolder_65_39905344
                                PyJsHoisted_isClass_.func_name = 'isClass'
                                var.put('isClass', PyJsHoisted_isClass_)
                                @Js
                                def PyJsHoisted_toFastProperties_(obj, this, arguments, var=var):
                                    var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['receiver', 'FakeConstructor', 'obj', 'ic'])
                                    @Js
                                    def PyJsHoisted_FakeConstructor_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        pass
                                    PyJsHoisted_FakeConstructor_.func_name = 'FakeConstructor'
                                    var.put('FakeConstructor', PyJsHoisted_FakeConstructor_)
                                    @Js
                                    def PyJsHoisted_ic_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return var.get('_typeof')(var.get('receiver').get('foo'))
                                    PyJsHoisted_ic_.func_name = 'ic'
                                    var.put('ic', PyJsHoisted_ic_)
                                    pass
                                    var.get('FakeConstructor').put('prototype', var.get('obj'))
                                    var.put('receiver', var.get('FakeConstructor').create())
                                    pass
                                    var.get('ic')()
                                    var.get('ic')()
                                    return var.get('obj')
                                    var.get('eval')(var.get('obj'))
                                PyJsHoisted_toFastProperties_.func_name = 'toFastProperties'
                                var.put('toFastProperties', PyJsHoisted_toFastProperties_)
                                @Js
                                def PyJsHoisted_isIdentifier_(str, this, arguments, var=var):
                                    var = Scope({'str':str, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['str'])
                                    return var.get('rident').callprop('test', var.get('str'))
                                PyJsHoisted_isIdentifier_.func_name = 'isIdentifier'
                                var.put('isIdentifier', PyJsHoisted_isIdentifier_)
                                @Js
                                def PyJsHoisted_filledRange_(count, prefix, suffix, this, arguments, var=var):
                                    var = Scope({'count':count, 'prefix':prefix, 'suffix':suffix, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['suffix', 'i', 'ret', 'count', 'prefix'])
                                    var.put('ret', var.get('Array').create(var.get('count')))
                                    #for JS loop
                                    var.put('i', Js(0.0))
                                    while (var.get('i')<var.get('count')):
                                        try:
                                            var.get('ret').put(var.get('i'), ((var.get('prefix')+var.get('i'))+var.get('suffix')))
                                        finally:
                                                var.put('i',Js(var.get('i').to_number())+Js(1))
                                    return var.get('ret')
                                PyJsHoisted_filledRange_.func_name = 'filledRange'
                                var.put('filledRange', PyJsHoisted_filledRange_)
                                @Js
                                def PyJsHoisted_safeToString_(obj, this, arguments, var=var):
                                    var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['obj'])
                                    try:
                                        return (var.get('obj')+Js(''))
                                    except PyJsException as PyJsTempException:
                                        PyJsHolder_65_34111514 = var.own.get('e')
                                        var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                                        try:
                                            return Js('[no string representation]')
                                        finally:
                                            if PyJsHolder_65_34111514 is not None:
                                                var.own['e'] = PyJsHolder_65_34111514
                                            else:
                                                del var.own['e']
                                            del PyJsHolder_65_34111514
                                PyJsHoisted_safeToString_.func_name = 'safeToString'
                                var.put('safeToString', PyJsHoisted_safeToString_)
                                @Js
                                def PyJsHoisted_isError_(obj, this, arguments, var=var):
                                    var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['obj'])
                                    return (var.get('obj').instanceof(var.get('Error')) or (((PyJsStrictNeq(var.get('obj'),var.get(u"null")) and PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('obj',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('obj'))),Js('object'))) and PyJsStrictEq(var.get('obj').get('message').typeof(),Js('string'))) and PyJsStrictEq(var.get('obj').get('name').typeof(),Js('string'))))
                                PyJsHoisted_isError_.func_name = 'isError'
                                var.put('isError', PyJsHoisted_isError_)
                                @Js
                                def PyJsHoisted_markAsOriginatingFromRejection_(e, this, arguments, var=var):
                                    var = Scope({'e':e, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['e'])
                                    try:
                                        var.get('notEnumerableProp')(var.get('e'), Js('isOperational'), Js(True))
                                    except PyJsException as PyJsTempException:
                                        PyJsHolder_69676e6f7265_50883558 = var.own.get('ignore')
                                        var.force_own_put('ignore', PyExceptionToJs(PyJsTempException))
                                        try:
                                            pass
                                        finally:
                                            if PyJsHolder_69676e6f7265_50883558 is not None:
                                                var.own['ignore'] = PyJsHolder_69676e6f7265_50883558
                                            else:
                                                del var.own['ignore']
                                            del PyJsHolder_69676e6f7265_50883558
                                PyJsHoisted_markAsOriginatingFromRejection_.func_name = 'markAsOriginatingFromRejection'
                                var.put('markAsOriginatingFromRejection', PyJsHoisted_markAsOriginatingFromRejection_)
                                @Js
                                def PyJsHoisted_originatesFromRejection_(e, this, arguments, var=var):
                                    var = Scope({'e':e, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['e'])
                                    if (var.get('e')==var.get(u"null")):
                                        return Js(False)
                                    return (var.get('e').instanceof(var.get('Error').get('__BluebirdErrorTypes__').get('OperationalError')) or PyJsStrictEq(var.get('e').get('isOperational'),Js(True)))
                                PyJsHoisted_originatesFromRejection_.func_name = 'originatesFromRejection'
                                var.put('originatesFromRejection', PyJsHoisted_originatesFromRejection_)
                                @Js
                                def PyJsHoisted_canAttachTrace_(obj, this, arguments, var=var):
                                    var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['obj'])
                                    return (var.get('isError')(var.get('obj')) and var.get('es5').callprop('propertyIsWritable', var.get('obj'), Js('stack')))
                                PyJsHoisted_canAttachTrace_.func_name = 'canAttachTrace'
                                var.put('canAttachTrace', PyJsHoisted_canAttachTrace_)
                                @Js
                                def PyJsHoisted_classString_(obj, this, arguments, var=var):
                                    var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['obj'])
                                    return Js({}).get('toString').callprop('call', var.get('obj'))
                                PyJsHoisted_classString_.func_name = 'classString'
                                var.put('classString', PyJsHoisted_classString_)
                                @Js
                                def PyJsHoisted_copyDescriptors_(PyJsArg_66726f6d_, to, filter, this, arguments, var=var):
                                    var = Scope({'from':PyJsArg_66726f6d_, 'to':to, 'filter':filter, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['i', 'key', 'to', 'from', 'filter', 'keys'])
                                    var.put('keys', var.get('es5').callprop('names', var.get('from')))
                                    #for JS loop
                                    var.put('i', Js(0.0))
                                    while (var.get('i')<var.get('keys').get('length')):
                                        try:
                                            var.put('key', var.get('keys').get(var.get('i')))
                                            if var.get('filter')(var.get('key')):
                                                try:
                                                    var.get('es5').callprop('defineProperty', var.get('to'), var.get('key'), var.get('es5').callprop('getDescriptor', var.get('from'), var.get('key')))
                                                except PyJsException as PyJsTempException:
                                                    PyJsHolder_69676e6f7265_64763890 = var.own.get('ignore')
                                                    var.force_own_put('ignore', PyExceptionToJs(PyJsTempException))
                                                    try:
                                                        pass
                                                    finally:
                                                        if PyJsHolder_69676e6f7265_64763890 is not None:
                                                            var.own['ignore'] = PyJsHolder_69676e6f7265_64763890
                                                        else:
                                                            del var.own['ignore']
                                                        del PyJsHolder_69676e6f7265_64763890
                                        finally:
                                                var.put('i',Js(var.get('i').to_number())+Js(1))
                                PyJsHoisted_copyDescriptors_.func_name = 'copyDescriptors'
                                var.put('copyDescriptors', PyJsHoisted_copyDescriptors_)
                                @Js
                                def PyJsHoisted_env_(key, this, arguments, var=var):
                                    var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['key'])
                                    return (var.get('process').get('env').get(var.get('key')) if var.get('hasEnvVariables') else var.get('undefined'))
                                PyJsHoisted_env_.func_name = 'env'
                                var.put('env', PyJsHoisted_env_)
                                @Js
                                def PyJsHoisted_getNativePromise_(this, arguments, var=var):
                                    var = Scope({'this':this, 'arguments':arguments}, var)
                                    var.registers(['promise'])
                                    if PyJsStrictEq(var.get('Promise',throw=False).typeof(),Js('function')):
                                        try:
                                            @Js
                                            def PyJs_anonymous_571_(this, arguments, var=var):
                                                var = Scope({'this':this, 'arguments':arguments}, var)
                                                var.registers([])
                                                pass
                                            PyJs_anonymous_571_._set_name('anonymous')
                                            var.put('promise', var.get('Promise').create(PyJs_anonymous_571_))
                                            if PyJsStrictEq(var.get('classString')(var.get('promise')),Js('[object Promise]')):
                                                return var.get('Promise')
                                        except PyJsException as PyJsTempException:
                                            PyJsHolder_65_84433222 = var.own.get('e')
                                            var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                                            try:
                                                pass
                                            finally:
                                                if PyJsHolder_65_84433222 is not None:
                                                    var.own['e'] = PyJsHolder_65_84433222
                                                else:
                                                    del var.own['e']
                                                del PyJsHolder_65_84433222
                                PyJsHoisted_getNativePromise_.func_name = 'getNativePromise'
                                var.put('getNativePromise', PyJsHoisted_getNativePromise_)
                                @Js
                                def PyJsHoisted_contextBind_(ctx, cb, this, arguments, var=var):
                                    var = Scope({'ctx':ctx, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['old', 'ctx', 'cb', 'async'])
                                    if ((PyJsStrictEq(var.get('ctx'),var.get(u"null")) or PyJsStrictNeq(var.get('cb',throw=False).typeof(),Js('function'))) or PyJsStrictEq(var.get('cb'),var.get('reflectHandler'))):
                                        return var.get('cb')
                                    if PyJsStrictNeq(var.get('ctx').get('domain'),var.get(u"null")):
                                        var.put('cb', var.get('ctx').get('domain').callprop('bind', var.get('cb')))
                                    var.put('async', var.get('ctx').get('async'))
                                    if PyJsStrictNeq(var.get('async'),var.get(u"null")):
                                        var.put('old', var.get('cb'))
                                        @Js
                                        def PyJs_cb_572_(this, arguments, var=var):
                                            var = Scope({'this':this, 'arguments':arguments, 'cb':PyJs_cb_572_}, var)
                                            var.registers(['args'])
                                            var.put('args', var.get('Array').create(Js(2.0)).callprop('concat', Js([]).get('slice').callprop('call', var.get('arguments'))))
                                            pass
                                            var.get('args').put('0', var.get('old'))
                                            var.get('args').put('1', var.get(u"this"))
                                            return var.get('async').get('runInAsyncScope').callprop('apply', var.get('async'), var.get('args'))
                                        PyJs_cb_572_._set_name('cb')
                                        var.put('cb', PyJs_cb_572_)
                                    return var.get('cb')
                                PyJsHoisted_contextBind_.func_name = 'contextBind'
                                var.put('contextBind', PyJsHoisted_contextBind_)
                                Js('use strict')
                                var.put('es5', var.get('_dereq_')(Js('./es5')))
                                var.put('canEvaluate', (var.get('navigator',throw=False).typeof()==Js('undefined')))
                                var.put('errorObj', Js({'e':Js({})}))
                                pass
                                var.put('globalObject', (var.get('self') if PyJsStrictNeq(var.get('self',throw=False).typeof(),Js('undefined')) else (var.get('window') if PyJsStrictNeq(var.get('window',throw=False).typeof(),Js('undefined')) else (var.get('global') if PyJsStrictNeq(var.get('global',throw=False).typeof(),Js('undefined')) else (var.get(u"this") if PyJsStrictNeq(var.get(u"this"),var.get('undefined')) else var.get(u"null"))))))
                                pass
                                pass
                                @Js
                                def PyJs_inherits_559_(Child, Parent, this, arguments, var=var):
                                    var = Scope({'Child':Child, 'Parent':Parent, 'this':this, 'arguments':arguments, 'inherits':PyJs_inherits_559_}, var)
                                    var.registers(['Parent', 'hasProp', 'T', 'Child'])
                                    @Js
                                    def PyJsHoisted_T_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers(['propertyName'])
                                        var.get(u"this").put('constructor', var.get('Child'))
                                        var.get(u"this").put('constructor$', var.get('Parent'))
                                        for PyJsTemp in var.get('Parent').get('prototype'):
                                            var.put('propertyName', PyJsTemp)
                                            if (var.get('hasProp').callprop('call', var.get('Parent').get('prototype'), var.get('propertyName')) and PyJsStrictNeq(var.get('propertyName').callprop('charAt', (var.get('propertyName').get('length')-Js(1.0))),Js('$'))):
                                                var.get(u"this").put((var.get('propertyName')+Js('$')), var.get('Parent').get('prototype').get(var.get('propertyName')))
                                    PyJsHoisted_T_.func_name = 'T'
                                    var.put('T', PyJsHoisted_T_)
                                    var.put('hasProp', Js({}).get('hasOwnProperty'))
                                    pass
                                    var.get('T').put('prototype', var.get('Parent').get('prototype'))
                                    var.get('Child').put('prototype', var.get('T').create())
                                    return var.get('Child').get('prototype')
                                PyJs_inherits_559_._set_name('inherits')
                                var.put('inherits', PyJs_inherits_559_)
                                pass
                                pass
                                pass
                                pass
                                pass
                                pass
                                pass
                                @Js
                                def PyJs_anonymous_560_(this, arguments, var=var):
                                    var = Scope({'this':this, 'arguments':arguments}, var)
                                    var.registers(['excludedPrototypes', 'isExcludedProto', 'getKeys', 'hasProp'])
                                    var.put('excludedPrototypes', Js([var.get('Array').get('prototype'), var.get('Object').get('prototype'), var.get('Function').get('prototype')]))
                                    @Js
                                    def PyJs_isExcludedProto_561_(val, this, arguments, var=var):
                                        var = Scope({'val':val, 'this':this, 'arguments':arguments, 'isExcludedProto':PyJs_isExcludedProto_561_}, var)
                                        var.registers(['val', 'i'])
                                        #for JS loop
                                        var.put('i', Js(0.0))
                                        while (var.get('i')<var.get('excludedPrototypes').get('length')):
                                            try:
                                                if PyJsStrictEq(var.get('excludedPrototypes').get(var.get('i')),var.get('val')):
                                                    return Js(True)
                                            finally:
                                                    var.put('i',Js(var.get('i').to_number())+Js(1))
                                        return Js(False)
                                    PyJs_isExcludedProto_561_._set_name('isExcludedProto')
                                    var.put('isExcludedProto', PyJs_isExcludedProto_561_)
                                    if var.get('es5').get('isES5'):
                                        var.put('getKeys', var.get('Object').get('getOwnPropertyNames'))
                                        @Js
                                        def PyJs_anonymous_562_(obj, this, arguments, var=var):
                                            var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
                                            var.registers(['i', 'ret', 'key', 'desc', 'visitedKeys', 'keys', 'obj'])
                                            var.put('ret', Js([]))
                                            var.put('visitedKeys', var.get('Object').callprop('create', var.get(u"null")))
                                            while ((var.get('obj')!=var.get(u"null")) and var.get('isExcludedProto')(var.get('obj')).neg()):
                                                pass
                                                try:
                                                    var.put('keys', var.get('getKeys')(var.get('obj')))
                                                except PyJsException as PyJsTempException:
                                                    PyJsHolder_65_96216630 = var.own.get('e')
                                                    var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                                                    try:
                                                        return var.get('ret')
                                                    finally:
                                                        if PyJsHolder_65_96216630 is not None:
                                                            var.own['e'] = PyJsHolder_65_96216630
                                                        else:
                                                            del var.own['e']
                                                        del PyJsHolder_65_96216630
                                                #for JS loop
                                                var.put('i', Js(0.0))
                                                while (var.get('i')<var.get('keys').get('length')):
                                                    try:
                                                        var.put('key', var.get('keys').get(var.get('i')))
                                                        if var.get('visitedKeys').get(var.get('key')):
                                                            continue
                                                        var.get('visitedKeys').put(var.get('key'), Js(True))
                                                        var.put('desc', var.get('Object').callprop('getOwnPropertyDescriptor', var.get('obj'), var.get('key')))
                                                        if (((var.get('desc')!=var.get(u"null")) and (var.get('desc').get('get')==var.get(u"null"))) and (var.get('desc').get('set')==var.get(u"null"))):
                                                            var.get('ret').callprop('push', var.get('key'))
                                                    finally:
                                                            var.put('i',Js(var.get('i').to_number())+Js(1))
                                                var.put('obj', var.get('es5').callprop('getPrototypeOf', var.get('obj')))
                                            return var.get('ret')
                                        PyJs_anonymous_562_._set_name('anonymous')
                                        return PyJs_anonymous_562_
                                    else:
                                        var.put('hasProp', Js({}).get('hasOwnProperty'))
                                        @Js
                                        def PyJs_anonymous_563_(obj, this, arguments, var=var):
                                            var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
                                            var.registers(['key', 'i', 'obj', 'ret'])
                                            if var.get('isExcludedProto')(var.get('obj')):
                                                return Js([])
                                            var.put('ret', Js([]))
                                            class JS_CONTINUE_LABEL_656e756d65726174696f6e(Exception): pass
                                            class JS_BREAK_LABEL_656e756d65726174696f6e(Exception): pass
                                            try:
                                                for PyJsTemp in var.get('obj'):
                                                    try:
                                                        var.put('key', PyJsTemp)
                                                        if var.get('hasProp').callprop('call', var.get('obj'), var.get('key')):
                                                            var.get('ret').callprop('push', var.get('key'))
                                                        else:
                                                            #for JS loop
                                                            var.put('i', Js(0.0))
                                                            while (var.get('i')<var.get('excludedPrototypes').get('length')):
                                                                try:
                                                                    if var.get('hasProp').callprop('call', var.get('excludedPrototypes').get(var.get('i')), var.get('key')):
                                                                        raise JS_CONTINUE_LABEL_656e756d65726174696f6e("Continued")
                                                                finally:
                                                                        var.put('i',Js(var.get('i').to_number())+Js(1))
                                                            var.get('ret').callprop('push', var.get('key'))
                                                    except JS_CONTINUE_LABEL_656e756d65726174696f6e:
                                                        pass
                                            except JS_BREAK_LABEL_656e756d65726174696f6e:
                                                pass
                                            return var.get('ret')
                                        PyJs_anonymous_563_._set_name('anonymous')
                                        return PyJs_anonymous_563_
                                PyJs_anonymous_560_._set_name('anonymous')
                                var.put('inheritedDataKeys', PyJs_anonymous_560_())
                                var.put('thisAssignmentPattern', JsRegExp('/this\\s*\\.\\s*\\S+\\s*=/'))
                                pass
                                pass
                                var.put('rident', JsRegExp('/^[a-z$_][a-z$_0-9]*$/i'))
                                pass
                                pass
                                pass
                                pass
                                pass
                                pass
                                pass
                                @Js
                                def PyJs_anonymous_564_(this, arguments, var=var):
                                    var = Scope({'this':this, 'arguments':arguments}, var)
                                    var.registers([])
                                    if var.get('Error').create().contains(Js('stack')).neg():
                                        @Js
                                        def PyJs_anonymous_565_(value, this, arguments, var=var):
                                            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                                            var.registers(['value'])
                                            if var.get('canAttachTrace')(var.get('value')):
                                                return var.get('value')
                                            try:
                                                PyJsTempException = JsToPyException(var.get('Error').create(var.get('safeToString')(var.get('value'))))
                                                raise PyJsTempException
                                            except PyJsException as PyJsTempException:
                                                PyJsHolder_657272_75814124 = var.own.get('err')
                                                var.force_own_put('err', PyExceptionToJs(PyJsTempException))
                                                try:
                                                    return var.get('err')
                                                finally:
                                                    if PyJsHolder_657272_75814124 is not None:
                                                        var.own['err'] = PyJsHolder_657272_75814124
                                                    else:
                                                        del var.own['err']
                                                    del PyJsHolder_657272_75814124
                                        PyJs_anonymous_565_._set_name('anonymous')
                                        return PyJs_anonymous_565_
                                    else:
                                        @Js
                                        def PyJs_anonymous_566_(value, this, arguments, var=var):
                                            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                                            var.registers(['value'])
                                            if var.get('canAttachTrace')(var.get('value')):
                                                return var.get('value')
                                            return var.get('Error').create(var.get('safeToString')(var.get('value')))
                                        PyJs_anonymous_566_._set_name('anonymous')
                                        return PyJs_anonymous_566_
                                PyJs_anonymous_564_._set_name('anonymous')
                                var.put('ensureErrorObject', PyJs_anonymous_564_())
                                pass
                                pass
                                @Js
                                def PyJs_asArray_567_(v, this, arguments, var=var):
                                    var = Scope({'v':v, 'this':this, 'arguments':arguments, 'asArray':PyJs_asArray_567_}, var)
                                    var.registers(['v'])
                                    if var.get('es5').callprop('isArray', var.get('v')):
                                        return var.get('v')
                                    return var.get(u"null")
                                PyJs_asArray_567_._set_name('asArray')
                                var.put('asArray', PyJs_asArray_567_)
                                if (PyJsStrictNeq(var.get('Symbol',throw=False).typeof(),Js('undefined')) and var.get('Symbol').get('iterator')):
                                    @Js
                                    def PyJs_anonymous_568_(v, this, arguments, var=var):
                                        var = Scope({'v':v, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['v'])
                                        return var.get('Array').callprop('from', var.get('v'))
                                    PyJs_anonymous_568_._set_name('anonymous')
                                    @Js
                                    def PyJs_anonymous_569_(v, this, arguments, var=var):
                                        var = Scope({'v':v, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['itResult', 'v', 'it', 'ret'])
                                        var.put('ret', Js([]))
                                        var.put('it', var.get('v').callprop(var.get('Symbol').get('iterator')))
                                        pass
                                        while var.put('itResult', var.get('it').callprop('next')).get('done').neg():
                                            var.get('ret').callprop('push', var.get('itResult').get('value'))
                                        return var.get('ret')
                                    PyJs_anonymous_569_._set_name('anonymous')
                                    var.put('ArrayFrom', (PyJs_anonymous_568_ if PyJsStrictEq(var.get('Array').get('from').typeof(),Js('function')) else PyJs_anonymous_569_))
                                    @Js
                                    def PyJs_asArray_570_(v, this, arguments, var=var):
                                        var = Scope({'v':v, 'this':this, 'arguments':arguments, 'asArray':PyJs_asArray_570_}, var)
                                        var.registers(['v'])
                                        if var.get('es5').callprop('isArray', var.get('v')):
                                            return var.get('v')
                                        else:
                                            if ((var.get('v')!=var.get(u"null")) and PyJsStrictEq(var.get('v').get(var.get('Symbol').get('iterator')).typeof(),Js('function'))):
                                                return var.get('ArrayFrom')(var.get('v'))
                                        return var.get(u"null")
                                    PyJs_asArray_570_._set_name('asArray')
                                    var.put('asArray', PyJs_asArray_570_)
                                var.put('isNode', (PyJsStrictNeq(var.get('process',throw=False).typeof(),Js('undefined')) and PyJsStrictEq(var.get('classString')(var.get('process')).callprop('toLowerCase'),Js('[object process]'))))
                                var.put('hasEnvVariables', (PyJsStrictNeq(var.get('process',throw=False).typeof(),Js('undefined')) and PyJsStrictNeq(var.get('process').get('env').typeof(),Js('undefined'))))
                                pass
                                pass
                                pass
                                pass
                                @Js
                                def PyJs_setReflectHandler_573_(fn, this, arguments, var=var):
                                    var = Scope({'fn':fn, 'this':this, 'arguments':arguments, 'setReflectHandler':PyJs_setReflectHandler_573_}, var)
                                    var.registers(['fn'])
                                    var.put('reflectHandler', var.get('fn'))
                                PyJs_setReflectHandler_573_._set_name('setReflectHandler')
                                var.put('ret', Js({'setReflectHandler':PyJs_setReflectHandler_573_,'isClass':var.get('isClass'),'isIdentifier':var.get('isIdentifier'),'inheritedDataKeys':var.get('inheritedDataKeys'),'getDataPropertyOrDefault':var.get('getDataPropertyOrDefault'),'thrower':var.get('thrower'),'isArray':var.get('es5').get('isArray'),'asArray':var.get('asArray'),'notEnumerableProp':var.get('notEnumerableProp'),'isPrimitive':var.get('isPrimitive'),'isObject':var.get('isObject'),'isError':var.get('isError'),'canEvaluate':var.get('canEvaluate'),'errorObj':var.get('errorObj'),'tryCatch':var.get('tryCatch'),'inherits':var.get('inherits'),'withAppended':var.get('withAppended'),'maybeWrapAsError':var.get('maybeWrapAsError'),'toFastProperties':var.get('toFastProperties'),'filledRange':var.get('filledRange'),'toString':var.get('safeToString'),'canAttachTrace':var.get('canAttachTrace'),'ensureErrorObject':var.get('ensureErrorObject'),'originatesFromRejection':var.get('originatesFromRejection'),'markAsOriginatingFromRejection':var.get('markAsOriginatingFromRejection'),'classString':var.get('classString'),'copyDescriptors':var.get('copyDescriptors'),'isNode':var.get('isNode'),'hasEnvVariables':var.get('hasEnvVariables'),'env':var.get('env'),'global':var.get('globalObject'),'getNativePromise':var.get('getNativePromise'),'contextBind':var.get('contextBind')}))
                                @Js
                                def PyJs_anonymous_574_(this, arguments, var=var):
                                    var = Scope({'this':this, 'arguments':arguments}, var)
                                    var.registers(['version'])
                                    pass
                                    if (var.get('process').get('versions') and var.get('process').get('versions').get('node')):
                                        var.put('version', var.get('process').get('versions').get('node').callprop('split', Js('.')).callprop('map', var.get('Number')))
                                    else:
                                        if var.get('process').get('version'):
                                            var.put('version', var.get('process').get('version').callprop('split', Js('.')).callprop('map', var.get('Number')))
                                    return ((PyJsStrictEq(var.get('version').get('0'),Js(0.0)) and (var.get('version').get('1')>Js(10.0))) or (var.get('version').get('0')>Js(0.0)))
                                PyJs_anonymous_574_._set_name('anonymous')
                                var.get('ret').put('isRecentNode', (var.get('ret').get('isNode') and PyJs_anonymous_574_()))
                                @Js
                                def PyJs_anonymous_575_(this, arguments, var=var):
                                    var = Scope({'this':this, 'arguments':arguments}, var)
                                    var.registers(['res', 'supportsAsync'])
                                    var.put('supportsAsync', Js(False))
                                    try:
                                        var.put('res', var.get('_dereq_')(Js('async_hooks')).get('AsyncResource'))
                                        var.put('supportsAsync', PyJsStrictEq(var.get('res').get('prototype').get('runInAsyncScope').typeof(),Js('function')))
                                    except PyJsException as PyJsTempException:
                                        PyJsHolder_65_27448132 = var.own.get('e')
                                        var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                                        try:
                                            var.put('supportsAsync', Js(False))
                                        finally:
                                            if PyJsHolder_65_27448132 is not None:
                                                var.own['e'] = PyJsHolder_65_27448132
                                            else:
                                                del var.own['e']
                                            del PyJsHolder_65_27448132
                                    return var.get('supportsAsync')
                                PyJs_anonymous_575_._set_name('anonymous')
                                var.get('ret').put('nodeSupportsAsyncResource', (var.get('ret').get('isNode') and PyJs_anonymous_575_()))
                                if var.get('ret').get('isNode'):
                                    var.get('ret').callprop('toFastProperties', var.get('process'))
                                try:
                                    PyJsTempException = JsToPyException(var.get('Error').create())
                                    raise PyJsTempException
                                except PyJsException as PyJsTempException:
                                    PyJsHolder_65_9308085 = var.own.get('e')
                                    var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                                    try:
                                        var.get('ret').put('lastLineError', var.get('e'))
                                    finally:
                                        if PyJsHolder_65_9308085 is not None:
                                            var.own['e'] = PyJsHolder_65_9308085
                                        else:
                                            del var.own['e']
                                        del PyJsHolder_65_9308085
                                var.get('module').put('exports', var.get('ret'))
                            PyJs_anonymous_558_._set_name('anonymous')
                            @Js
                            def PyJs_e_576_(t, n, r, this, arguments, var=var):
                                var = Scope({'t':t, 'n':n, 'r':r, 'this':this, 'arguments':arguments, 'e':PyJs_e_576_}, var)
                                var.registers(['n', 'r', 'i', 's', 'o', 't'])
                                @Js
                                def PyJsHoisted_s_(o, u, this, arguments, var=var):
                                    var = Scope({'o':o, 'u':u, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['a', 'l', 'o', 'u', 'f'])
                                    if var.get('n').get(var.get('o')).neg():
                                        if var.get('t').get(var.get('o')).neg():
                                            var.put('a', ((var.get('_dereq_',throw=False).typeof()==Js('function')) and var.get('_dereq_')))
                                            if (var.get('u').neg() and var.get('a')):
                                                return var.get('a')(var.get('o'), Js(0.0).neg())
                                            if var.get('i'):
                                                return var.get('i')(var.get('o'), Js(0.0).neg())
                                            var.put('f', var.get('Error').create(((Js("Cannot find module '")+var.get('o'))+Js("'"))))
                                            PyJsTempException = JsToPyException(PyJsComma(var.get('f').put('code', Js('MODULE_NOT_FOUND')),var.get('f')))
                                            raise PyJsTempException
                                        var.put('l', var.get('n').put(var.get('o'), Js({'exports':Js({})})))
                                        @Js
                                        def PyJs_anonymous_577_(e, this, arguments, var=var):
                                            var = Scope({'e':e, 'this':this, 'arguments':arguments}, var)
                                            var.registers(['n', 'e'])
                                            var.put('n', var.get('t').get(var.get('o')).get('1').get(var.get('e')))
                                            return var.get('s')((var.get('n') if var.get('n') else var.get('e')))
                                        PyJs_anonymous_577_._set_name('anonymous')
                                        var.get('t').get(var.get('o')).get('0').callprop('call', var.get('l').get('exports'), PyJs_anonymous_577_, var.get('l'), var.get('l').get('exports'), var.get('e'), var.get('t'), var.get('n'), var.get('r'))
                                    return var.get('n').get(var.get('o')).get('exports')
                                PyJsHoisted_s_.func_name = 's'
                                var.put('s', PyJsHoisted_s_)
                                pass
                                var.put('i', ((var.get('_dereq_',throw=False).typeof()==Js('function')) and var.get('_dereq_')))
                                #for JS loop
                                var.put('o', Js(0.0))
                                while (var.get('o')<var.get('r').get('length')):
                                    try:
                                        var.get('s')(var.get('r').get(var.get('o')))
                                    finally:
                                            (var.put('o',Js(var.get('o').to_number())+Js(1))-Js(1))
                                return var.get('s')
                            PyJs_e_576_._set_name('e')
                            return PyJs_e_576_(Js({'1':Js([PyJs_anonymous_95_, Js({})]),'2':Js([PyJs_anonymous_99_, Js({'./queue':Js(26.0),'./schedule':Js(29.0)})]),'3':Js([PyJs_anonymous_112_, Js({})]),'4':Js([PyJs_anonymous_122_, Js({'./promise':Js(22.0)})]),'5':Js([PyJs_anonymous_123_, Js({'./util':Js(36.0)})]),'6':Js([PyJs_anonymous_133_, Js({'./util':Js(36.0)})]),'7':Js([PyJs_anonymous_149_, Js({'./es5':Js(13.0),'./util':Js(36.0)})]),'8':Js([PyJs_anonymous_152_, Js({})]),'9':Js([PyJs_anonymous_164_, Js({'./errors':Js(12.0),'./es5':Js(13.0),'./util':Js(36.0)})]),'10':Js([PyJs_anonymous_237_, Js({})]),'11':Js([PyJs_anonymous_245_, Js({})]),'12':Js([PyJs_anonymous_250_, Js({'./es5':Js(13.0),'./util':Js(36.0)})]),'13':Js([PyJs_anonymous_253_, Js({})]),'14':Js([PyJs_anonymous_264_, Js({})]),'15':Js([PyJs_anonymous_268_, Js({'./catch_filter':Js(7.0),'./util':Js(36.0)})]),'16':Js([PyJs_anonymous_276_, Js({'./errors':Js(12.0),'./util':Js(36.0)})]),'17':Js([PyJs_anonymous_292_, Js({'./util':Js(36.0)})]),'18':Js([PyJs_anonymous_302_, Js({'./util':Js(36.0)})]),'19':Js([PyJs_anonymous_312_, Js({'./util':Js(36.0)})]),'20':Js([PyJs_anonymous_318_, Js({'./errors':Js(12.0),'./es5':Js(13.0),'./util':Js(36.0)})]),'21':Js([PyJs_anonymous_320_, Js({'./util':Js(36.0)})]),'22':Js([PyJs_anonymous_323_, Js({'./any.js':Js(1.0),'./async':Js(2.0),'./bind':Js(3.0),'./call_get.js':Js(5.0),'./cancel':Js(6.0),'./catch_filter':Js(7.0),'./context':Js(8.0),'./debuggability':Js(9.0),'./direct_resolve':Js(10.0),'./each.js':Js(11.0),'./errors':Js(12.0),'./es5':Js(13.0),'./filter.js':Js(14.0),'./finally':Js(15.0),'./generators.js':Js(16.0),'./join':Js(17.0),'./map.js':Js(18.0),'./method':Js(19.0),'./nodeback':Js(20.0),'./nodeify.js':Js(21.0),'./promise_array':Js(23.0),'./promisify.js':Js(24.0),'./props.js':Js(25.0),'./race.js':Js(27.0),'./reduce.js':Js(28.0),'./settle.js':Js(30.0),'./some.js':Js(31.0),'./synchronous_inspection':Js(32.0),'./thenables':Js(33.0),'./timers.js':Js(34.0),'./using.js':Js(35.0),'./util':Js(36.0),'async_hooks':var.get('undefined')})]),'23':Js([PyJs_anonymous_397_, Js({'./util':Js(36.0)})]),'24':Js([PyJs_anonymous_413_, Js({'./errors':Js(12.0),'./nodeback':Js(20.0),'./util':Js(36.0)})]),'25':Js([PyJs_anonymous_430_, Js({'./es5':Js(13.0),'./util':Js(36.0)})]),'26':Js([PyJs_anonymous_441_, Js({})]),'27':Js([PyJs_anonymous_449_, Js({'./util':Js(36.0)})]),'28':Js([PyJs_anonymous_455_, Js({'./util':Js(36.0)})]),'29':Js([PyJs_anonymous_467_, Js({'./util':Js(36.0)})]),'30':Js([PyJs_anonymous_479_, Js({'./util':Js(36.0)})]),'31':Js([PyJs_anonymous_487_, Js({'./errors':Js(12.0),'./util':Js(36.0)})]),'32':Js([PyJs_anonymous_507_, Js({})]),'33':Js([PyJs_anonymous_528_, Js({'./util':Js(36.0)})]),'34':Js([PyJs_anonymous_530_, Js({'./util':Js(36.0)})]),'35':Js([PyJs_anonymous_540_, Js({'./errors':Js(12.0),'./util':Js(36.0)})]),'36':Js([PyJs_anonymous_558_, Js({'./es5':Js(13.0),'async_hooks':var.get('undefined')})])}), Js({}), Js([Js(4.0)]))
                        return PyJs_LONG_578_()(Js(4.0))
                    PyJs_anonymous_94_._set_name('anonymous')
                    @Js
                    def PyJs_anonymous_579_(e, this, arguments, var=var):
                        var = Scope({'e':e, 'this':this, 'arguments':arguments}, var)
                        var.registers(['f', 'e'])
                        if ((Js('object')==(Js('undefined') if PyJsStrictEq(var.get('exports',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('exports')))) and (Js('undefined')!=var.get('module',throw=False).typeof())):
                            var.get('module').put('exports', var.get('e')())
                        else:
                            if ((Js('function')==var.get('define',throw=False).typeof()) and var.get('define').get('amd')):
                                var.get('define')(Js([]), var.get('e'))
                            else:
                                pass
                                PyJsComma((var.put('f', var.get('window')) if (Js('undefined')!=var.get('window',throw=False).typeof()) else (var.put('f', var.get('global')) if (Js('undefined')!=var.get('global',throw=False).typeof()) else ((Js('undefined')!=var.get('self',throw=False).typeof()) and var.put('f', var.get('self'))))),var.get('f').put('Promise', var.get('e')()))
                    PyJs_anonymous_579_._set_name('anonymous')
                    PyJs_anonymous_579_(PyJs_anonymous_94_).neg()
                    pass
                    if (PyJsStrictNeq(var.get('window',throw=False).typeof(),Js('undefined')) and PyJsStrictNeq(var.get('window'),var.get(u"null"))):
                        var.get('window').put('P', var.get('window').get('Promise'))
                    else:
                        if (PyJsStrictNeq(var.get('self',throw=False).typeof(),Js('undefined')) and PyJsStrictNeq(var.get('self'),var.get(u"null"))):
                            var.get('self').put('P', var.get('self').get('Promise'))
                PyJs_anonymous_93_._set_name('anonymous')
                PyJs_anonymous_93_.callprop('call', var.get(u"this"))
            PyJs_anonymous_92_._set_name('anonymous')
            return PyJs_anonymous_92_.callprop('call', var.get(u"this"), var.get('require')(Js('_process')), (var.get('global') if PyJsStrictNeq(var.get('global',throw=False).typeof(),Js('undefined')) else (var.get('self') if PyJsStrictNeq(var.get('self',throw=False).typeof(),Js('undefined')) else (var.get('window') if PyJsStrictNeq(var.get('window',throw=False).typeof(),Js('undefined')) else Js({})))), var.get('require')(Js('timers')).get('setImmediate'))
        PyJs_LONG_580_()
    PyJs_anonymous_91_._set_name('anonymous')
    @Js
    def PyJs_anonymous_581_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        pass
    PyJs_anonymous_581_._set_name('anonymous')
    @Js
    def PyJs_anonymous_582_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_583_(process, Buffer, this, arguments, var=var):
            var = Scope({'process':process, 'Buffer':Buffer, 'this':this, 'arguments':arguments}, var)
            var.registers(['Buffer', 'process'])
            @Js
            def PyJs_anonymous_584_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['GZIP_HEADER_ID2', 'key', 'assert', 'Zstream', 'constants', 'GZIP_HEADER_ID1', 'Zlib', 'zlib_deflate', 'zlib_inflate'])
                @Js
                def PyJsHoisted_Zlib_(mode, this, arguments, var=var):
                    var = Scope({'mode':mode, 'this':this, 'arguments':arguments}, var)
                    var.registers(['mode'])
                    if ((PyJsStrictNeq(var.get('mode',throw=False).typeof(),Js('number')) or (var.get('mode')<var.get('exports').get('DEFLATE'))) or (var.get('mode')>var.get('exports').get('UNZIP'))):
                        PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Bad argument')))
                        raise PyJsTempException
                    var.get(u"this").put('dictionary', var.get(u"null"))
                    var.get(u"this").put('err', Js(0.0))
                    var.get(u"this").put('flush', Js(0.0))
                    var.get(u"this").put('init_done', Js(False))
                    var.get(u"this").put('level', Js(0.0))
                    var.get(u"this").put('memLevel', Js(0.0))
                    var.get(u"this").put('mode', var.get('mode'))
                    var.get(u"this").put('strategy', Js(0.0))
                    var.get(u"this").put('windowBits', Js(0.0))
                    var.get(u"this").put('write_in_progress', Js(False))
                    var.get(u"this").put('pending_close', Js(False))
                    var.get(u"this").put('gzip_id_bytes_read', Js(0.0))
                PyJsHoisted_Zlib_.func_name = 'Zlib'
                var.put('Zlib', PyJsHoisted_Zlib_)
                Js('use strict')
                var.put('assert', var.get('require')(Js('assert')))
                var.put('Zstream', var.get('require')(Js('pako/lib/zlib/zstream')))
                var.put('zlib_deflate', var.get('require')(Js('pako/lib/zlib/deflate.js')))
                var.put('zlib_inflate', var.get('require')(Js('pako/lib/zlib/inflate.js')))
                var.put('constants', var.get('require')(Js('pako/lib/zlib/constants')))
                for PyJsTemp in var.get('constants'):
                    var.put('key', PyJsTemp)
                    var.get('exports').put(var.get('key'), var.get('constants').get(var.get('key')))
                var.get('exports').put('NONE', Js(0.0))
                var.get('exports').put('DEFLATE', Js(1.0))
                var.get('exports').put('INFLATE', Js(2.0))
                var.get('exports').put('GZIP', Js(3.0))
                var.get('exports').put('GUNZIP', Js(4.0))
                var.get('exports').put('DEFLATERAW', Js(5.0))
                var.get('exports').put('INFLATERAW', Js(6.0))
                var.get('exports').put('UNZIP', Js(7.0))
                var.put('GZIP_HEADER_ID1', Js(31))
                var.put('GZIP_HEADER_ID2', Js(139))
                pass
                @Js
                def PyJs_anonymous_585_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    if var.get(u"this").get('write_in_progress'):
                        var.get(u"this").put('pending_close', Js(True))
                        return var.get('undefined')
                    var.get(u"this").put('pending_close', Js(False))
                    var.get('assert')(var.get(u"this").get('init_done'), Js('close before init'))
                    var.get('assert')((var.get(u"this").get('mode')<=var.get('exports').get('UNZIP')))
                    if ((PyJsStrictEq(var.get(u"this").get('mode'),var.get('exports').get('DEFLATE')) or PyJsStrictEq(var.get(u"this").get('mode'),var.get('exports').get('GZIP'))) or PyJsStrictEq(var.get(u"this").get('mode'),var.get('exports').get('DEFLATERAW'))):
                        var.get('zlib_deflate').callprop('deflateEnd', var.get(u"this").get('strm'))
                    else:
                        if (((PyJsStrictEq(var.get(u"this").get('mode'),var.get('exports').get('INFLATE')) or PyJsStrictEq(var.get(u"this").get('mode'),var.get('exports').get('GUNZIP'))) or PyJsStrictEq(var.get(u"this").get('mode'),var.get('exports').get('INFLATERAW'))) or PyJsStrictEq(var.get(u"this").get('mode'),var.get('exports').get('UNZIP'))):
                            var.get('zlib_inflate').callprop('inflateEnd', var.get(u"this").get('strm'))
                    var.get(u"this").put('mode', var.get('exports').get('NONE'))
                    var.get(u"this").put('dictionary', var.get(u"null"))
                PyJs_anonymous_585_._set_name('anonymous')
                var.get('Zlib').get('prototype').put('close', PyJs_anonymous_585_)
                @Js
                def PyJs_anonymous_586_(flush, input, in_off, in_len, out, out_off, out_len, this, arguments, var=var):
                    var = Scope({'flush':flush, 'input':input, 'in_off':in_off, 'in_len':in_len, 'out':out, 'out_off':out_off, 'out_len':out_len, 'this':this, 'arguments':arguments}, var)
                    var.registers(['out', 'out_len', 'input', 'in_off', 'in_len', 'out_off', 'flush'])
                    return var.get(u"this").callprop('_write', Js(True), var.get('flush'), var.get('input'), var.get('in_off'), var.get('in_len'), var.get('out'), var.get('out_off'), var.get('out_len'))
                PyJs_anonymous_586_._set_name('anonymous')
                var.get('Zlib').get('prototype').put('write', PyJs_anonymous_586_)
                @Js
                def PyJs_anonymous_587_(flush, input, in_off, in_len, out, out_off, out_len, this, arguments, var=var):
                    var = Scope({'flush':flush, 'input':input, 'in_off':in_off, 'in_len':in_len, 'out':out, 'out_off':out_off, 'out_len':out_len, 'this':this, 'arguments':arguments}, var)
                    var.registers(['out', 'out_len', 'input', 'in_off', 'in_len', 'out_off', 'flush'])
                    return var.get(u"this").callprop('_write', Js(False), var.get('flush'), var.get('input'), var.get('in_off'), var.get('in_len'), var.get('out'), var.get('out_off'), var.get('out_len'))
                PyJs_anonymous_587_._set_name('anonymous')
                var.get('Zlib').get('prototype').put('writeSync', PyJs_anonymous_587_)
                @Js
                def PyJs_anonymous_588_(PyJsArg_6173796e63_, flush, input, in_off, in_len, out, out_off, out_len, this, arguments, var=var):
                    var = Scope({'async':PyJsArg_6173796e63_, 'flush':flush, 'input':input, 'in_off':in_off, 'in_len':in_len, 'out':out, 'out_off':out_off, 'out_len':out_len, 'this':this, 'arguments':arguments}, var)
                    var.registers(['self', 'out', 'out_len', 'input', 'in_off', 'in_len', 'async', 'flush', 'out_off'])
                    var.get('assert').callprop('equal', var.get('arguments').get('length'), Js(8.0))
                    var.get('assert')(var.get(u"this").get('init_done'), Js('write before init'))
                    var.get('assert')(PyJsStrictNeq(var.get(u"this").get('mode'),var.get('exports').get('NONE')), Js('already finalized'))
                    var.get('assert').callprop('equal', Js(False), var.get(u"this").get('write_in_progress'), Js('write already in progress'))
                    var.get('assert').callprop('equal', Js(False), var.get(u"this").get('pending_close'), Js('close is pending'))
                    var.get(u"this").put('write_in_progress', Js(True))
                    var.get('assert').callprop('equal', Js(False), PyJsStrictEq(var.get('flush'),var.get('undefined')), Js('must provide flush value'))
                    var.get(u"this").put('write_in_progress', Js(True))
                    def PyJs_LONG_589_(var=var):
                        return (((((PyJsStrictNeq(var.get('flush'),var.get('exports').get('Z_NO_FLUSH')) and PyJsStrictNeq(var.get('flush'),var.get('exports').get('Z_PARTIAL_FLUSH'))) and PyJsStrictNeq(var.get('flush'),var.get('exports').get('Z_SYNC_FLUSH'))) and PyJsStrictNeq(var.get('flush'),var.get('exports').get('Z_FULL_FLUSH'))) and PyJsStrictNeq(var.get('flush'),var.get('exports').get('Z_FINISH'))) and PyJsStrictNeq(var.get('flush'),var.get('exports').get('Z_BLOCK')))
                    if PyJs_LONG_589_():
                        PyJsTempException = JsToPyException(var.get('Error').create(Js('Invalid flush value')))
                        raise PyJsTempException
                    if (var.get('input')==var.get(u"null")):
                        var.put('input', var.get('Buffer').callprop('alloc', Js(0.0)))
                        var.put('in_len', Js(0.0))
                        var.put('in_off', Js(0.0))
                    var.get(u"this").get('strm').put('avail_in', var.get('in_len'))
                    var.get(u"this").get('strm').put('input', var.get('input'))
                    var.get(u"this").get('strm').put('next_in', var.get('in_off'))
                    var.get(u"this").get('strm').put('avail_out', var.get('out_len'))
                    var.get(u"this").get('strm').put('output', var.get('out'))
                    var.get(u"this").get('strm').put('next_out', var.get('out_off'))
                    var.get(u"this").put('flush', var.get('flush'))
                    if var.get('async').neg():
                        var.get(u"this").callprop('_process')
                        if var.get(u"this").callprop('_checkError'):
                            return var.get(u"this").callprop('_afterSync')
                        return var.get('undefined')
                    var.put('self', var.get(u"this"))
                    @Js
                    def PyJs_anonymous_590_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        var.get('self').callprop('_process')
                        var.get('self').callprop('_after')
                    PyJs_anonymous_590_._set_name('anonymous')
                    var.get('process').callprop('nextTick', PyJs_anonymous_590_)
                    return var.get(u"this")
                PyJs_anonymous_588_._set_name('anonymous')
                var.get('Zlib').get('prototype').put('_write', PyJs_anonymous_588_)
                @Js
                def PyJs_anonymous_591_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers(['avail_in', 'avail_out'])
                    var.put('avail_out', var.get(u"this").get('strm').get('avail_out'))
                    var.put('avail_in', var.get(u"this").get('strm').get('avail_in'))
                    var.get(u"this").put('write_in_progress', Js(False))
                    return Js([var.get('avail_in'), var.get('avail_out')])
                PyJs_anonymous_591_._set_name('anonymous')
                var.get('Zlib').get('prototype').put('_afterSync', PyJs_anonymous_591_)
                @Js
                def PyJs_anonymous_592_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers(['next_expected_header_byte'])
                    var.put('next_expected_header_byte', var.get(u"null"))
                    while 1:
                        SWITCHED = False
                        CONDITION = (var.get(u"this").get('mode'))
                        if SWITCHED or PyJsStrictEq(CONDITION, var.get('exports').get('DEFLATE')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, var.get('exports').get('GZIP')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, var.get('exports').get('DEFLATERAW')):
                            SWITCHED = True
                            var.get(u"this").put('err', var.get('zlib_deflate').callprop('deflate', var.get(u"this").get('strm'), var.get(u"this").get('flush')))
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, var.get('exports').get('UNZIP')):
                            SWITCHED = True
                            if (var.get(u"this").get('strm').get('avail_in')>Js(0.0)):
                                var.put('next_expected_header_byte', var.get(u"this").get('strm').get('next_in'))
                            while 1:
                                SWITCHED = False
                                CONDITION = (var.get(u"this").get('gzip_id_bytes_read'))
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(0.0)):
                                    SWITCHED = True
                                    if PyJsStrictEq(var.get('next_expected_header_byte'),var.get(u"null")):
                                        break
                                    if PyJsStrictEq(var.get(u"this").get('strm').get('input').get(var.get('next_expected_header_byte')),var.get('GZIP_HEADER_ID1')):
                                        var.get(u"this").put('gzip_id_bytes_read', Js(1.0))
                                        (var.put('next_expected_header_byte',Js(var.get('next_expected_header_byte').to_number())+Js(1))-Js(1))
                                        if PyJsStrictEq(var.get(u"this").get('strm').get('avail_in'),Js(1.0)):
                                            break
                                    else:
                                        var.get(u"this").put('mode', var.get('exports').get('INFLATE'))
                                        break
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(1.0)):
                                    SWITCHED = True
                                    if PyJsStrictEq(var.get('next_expected_header_byte'),var.get(u"null")):
                                        break
                                    if PyJsStrictEq(var.get(u"this").get('strm').get('input').get(var.get('next_expected_header_byte')),var.get('GZIP_HEADER_ID2')):
                                        var.get(u"this").put('gzip_id_bytes_read', Js(2.0))
                                        var.get(u"this").put('mode', var.get('exports').get('GUNZIP'))
                                    else:
                                        var.get(u"this").put('mode', var.get('exports').get('INFLATE'))
                                    break
                                if True:
                                    SWITCHED = True
                                    PyJsTempException = JsToPyException(var.get('Error').create(Js('invalid number of gzip magic number bytes read')))
                                    raise PyJsTempException
                                SWITCHED = True
                                break
                        if SWITCHED or PyJsStrictEq(CONDITION, var.get('exports').get('INFLATE')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, var.get('exports').get('GUNZIP')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, var.get('exports').get('INFLATERAW')):
                            SWITCHED = True
                            var.get(u"this").put('err', var.get('zlib_inflate').callprop('inflate', var.get(u"this").get('strm'), var.get(u"this").get('flush')))
                            if (PyJsStrictEq(var.get(u"this").get('err'),var.get('exports').get('Z_NEED_DICT')) and var.get(u"this").get('dictionary')):
                                var.get(u"this").put('err', var.get('zlib_inflate').callprop('inflateSetDictionary', var.get(u"this").get('strm'), var.get(u"this").get('dictionary')))
                                if PyJsStrictEq(var.get(u"this").get('err'),var.get('exports').get('Z_OK')):
                                    var.get(u"this").put('err', var.get('zlib_inflate').callprop('inflate', var.get(u"this").get('strm'), var.get(u"this").get('flush')))
                                else:
                                    if PyJsStrictEq(var.get(u"this").get('err'),var.get('exports').get('Z_DATA_ERROR')):
                                        var.get(u"this").put('err', var.get('exports').get('Z_NEED_DICT'))
                            while ((((var.get(u"this").get('strm').get('avail_in')>Js(0.0)) and PyJsStrictEq(var.get(u"this").get('mode'),var.get('exports').get('GUNZIP'))) and PyJsStrictEq(var.get(u"this").get('err'),var.get('exports').get('Z_STREAM_END'))) and PyJsStrictNeq(var.get(u"this").get('strm').get('next_in').get('0'),Js(0))):
                                var.get(u"this").callprop('reset')
                                var.get(u"this").put('err', var.get('zlib_inflate').callprop('inflate', var.get(u"this").get('strm'), var.get(u"this").get('flush')))
                            break
                        if True:
                            SWITCHED = True
                            PyJsTempException = JsToPyException(var.get('Error').create((Js('Unknown mode ')+var.get(u"this").get('mode'))))
                            raise PyJsTempException
                        SWITCHED = True
                        break
                PyJs_anonymous_592_._set_name('anonymous')
                var.get('Zlib').get('prototype').put('_process', PyJs_anonymous_592_)
                @Js
                def PyJs_anonymous_593_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    while 1:
                        SWITCHED = False
                        CONDITION = (var.get(u"this").get('err'))
                        if SWITCHED or PyJsStrictEq(CONDITION, var.get('exports').get('Z_OK')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, var.get('exports').get('Z_BUF_ERROR')):
                            SWITCHED = True
                            if (PyJsStrictNeq(var.get(u"this").get('strm').get('avail_out'),Js(0.0)) and PyJsStrictEq(var.get(u"this").get('flush'),var.get('exports').get('Z_FINISH'))):
                                var.get(u"this").callprop('_error', Js('unexpected end of file'))
                                return Js(False)
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, var.get('exports').get('Z_STREAM_END')):
                            SWITCHED = True
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, var.get('exports').get('Z_NEED_DICT')):
                            SWITCHED = True
                            if (var.get(u"this").get('dictionary')==var.get(u"null")):
                                var.get(u"this").callprop('_error', Js('Missing dictionary'))
                            else:
                                var.get(u"this").callprop('_error', Js('Bad dictionary'))
                            return Js(False)
                        if True:
                            SWITCHED = True
                            var.get(u"this").callprop('_error', Js('Zlib error'))
                            return Js(False)
                        SWITCHED = True
                        break
                    return Js(True)
                PyJs_anonymous_593_._set_name('anonymous')
                var.get('Zlib').get('prototype').put('_checkError', PyJs_anonymous_593_)
                @Js
                def PyJs_anonymous_594_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers(['avail_in', 'avail_out'])
                    if var.get(u"this").callprop('_checkError').neg():
                        return var.get('undefined')
                    var.put('avail_out', var.get(u"this").get('strm').get('avail_out'))
                    var.put('avail_in', var.get(u"this").get('strm').get('avail_in'))
                    var.get(u"this").put('write_in_progress', Js(False))
                    var.get(u"this").callprop('callback', var.get('avail_in'), var.get('avail_out'))
                    if var.get(u"this").get('pending_close'):
                        var.get(u"this").callprop('close')
                PyJs_anonymous_594_._set_name('anonymous')
                var.get('Zlib').get('prototype').put('_after', PyJs_anonymous_594_)
                @Js
                def PyJs_anonymous_595_(message, this, arguments, var=var):
                    var = Scope({'message':message, 'this':this, 'arguments':arguments}, var)
                    var.registers(['message'])
                    if var.get(u"this").get('strm').get('msg'):
                        var.put('message', var.get(u"this").get('strm').get('msg'))
                    var.get(u"this").callprop('onerror', var.get('message'), var.get(u"this").get('err'))
                    var.get(u"this").put('write_in_progress', Js(False))
                    if var.get(u"this").get('pending_close'):
                        var.get(u"this").callprop('close')
                PyJs_anonymous_595_._set_name('anonymous')
                var.get('Zlib').get('prototype').put('_error', PyJs_anonymous_595_)
                @Js
                def PyJs_anonymous_596_(windowBits, level, memLevel, strategy, dictionary, this, arguments, var=var):
                    var = Scope({'windowBits':windowBits, 'level':level, 'memLevel':memLevel, 'strategy':strategy, 'dictionary':dictionary, 'this':this, 'arguments':arguments}, var)
                    var.registers(['level', 'windowBits', 'strategy', 'dictionary', 'memLevel'])
                    var.get('assert')((PyJsStrictEq(var.get('arguments').get('length'),Js(4.0)) or PyJsStrictEq(var.get('arguments').get('length'),Js(5.0))), Js('init(windowBits, level, memLevel, strategy, [dictionary])'))
                    var.get('assert')(((var.get('windowBits')>=Js(8.0)) and (var.get('windowBits')<=Js(15.0))), Js('invalid windowBits'))
                    var.get('assert')(((var.get('level')>=(-Js(1.0))) and (var.get('level')<=Js(9.0))), Js('invalid compression level'))
                    var.get('assert')(((var.get('memLevel')>=Js(1.0)) and (var.get('memLevel')<=Js(9.0))), Js('invalid memlevel'))
                    def PyJs_LONG_597_(var=var):
                        return var.get('assert')(((((PyJsStrictEq(var.get('strategy'),var.get('exports').get('Z_FILTERED')) or PyJsStrictEq(var.get('strategy'),var.get('exports').get('Z_HUFFMAN_ONLY'))) or PyJsStrictEq(var.get('strategy'),var.get('exports').get('Z_RLE'))) or PyJsStrictEq(var.get('strategy'),var.get('exports').get('Z_FIXED'))) or PyJsStrictEq(var.get('strategy'),var.get('exports').get('Z_DEFAULT_STRATEGY'))), Js('invalid strategy'))
                    PyJs_LONG_597_()
                    var.get(u"this").callprop('_init', var.get('level'), var.get('windowBits'), var.get('memLevel'), var.get('strategy'), var.get('dictionary'))
                    var.get(u"this").callprop('_setDictionary')
                PyJs_anonymous_596_._set_name('anonymous')
                var.get('Zlib').get('prototype').put('init', PyJs_anonymous_596_)
                @Js
                def PyJs_anonymous_598_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    PyJsTempException = JsToPyException(var.get('Error').create(Js('deflateParams Not supported')))
                    raise PyJsTempException
                PyJs_anonymous_598_._set_name('anonymous')
                var.get('Zlib').get('prototype').put('params', PyJs_anonymous_598_)
                @Js
                def PyJs_anonymous_599_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.get(u"this").callprop('_reset')
                    var.get(u"this").callprop('_setDictionary')
                PyJs_anonymous_599_._set_name('anonymous')
                var.get('Zlib').get('prototype').put('reset', PyJs_anonymous_599_)
                @Js
                def PyJs_anonymous_600_(level, windowBits, memLevel, strategy, dictionary, this, arguments, var=var):
                    var = Scope({'level':level, 'windowBits':windowBits, 'memLevel':memLevel, 'strategy':strategy, 'dictionary':dictionary, 'this':this, 'arguments':arguments}, var)
                    var.registers(['level', 'windowBits', 'strategy', 'dictionary', 'memLevel'])
                    var.get(u"this").put('level', var.get('level'))
                    var.get(u"this").put('windowBits', var.get('windowBits'))
                    var.get(u"this").put('memLevel', var.get('memLevel'))
                    var.get(u"this").put('strategy', var.get('strategy'))
                    var.get(u"this").put('flush', var.get('exports').get('Z_NO_FLUSH'))
                    var.get(u"this").put('err', var.get('exports').get('Z_OK'))
                    if (PyJsStrictEq(var.get(u"this").get('mode'),var.get('exports').get('GZIP')) or PyJsStrictEq(var.get(u"this").get('mode'),var.get('exports').get('GUNZIP'))):
                        var.get(u"this").put('windowBits', Js(16.0), '+')
                    if PyJsStrictEq(var.get(u"this").get('mode'),var.get('exports').get('UNZIP')):
                        var.get(u"this").put('windowBits', Js(32.0), '+')
                    if (PyJsStrictEq(var.get(u"this").get('mode'),var.get('exports').get('DEFLATERAW')) or PyJsStrictEq(var.get(u"this").get('mode'),var.get('exports').get('INFLATERAW'))):
                        var.get(u"this").put('windowBits', ((-Js(1.0))*var.get(u"this").get('windowBits')))
                    var.get(u"this").put('strm', var.get('Zstream').create())
                    while 1:
                        SWITCHED = False
                        CONDITION = (var.get(u"this").get('mode'))
                        if SWITCHED or PyJsStrictEq(CONDITION, var.get('exports').get('DEFLATE')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, var.get('exports').get('GZIP')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, var.get('exports').get('DEFLATERAW')):
                            SWITCHED = True
                            var.get(u"this").put('err', var.get('zlib_deflate').callprop('deflateInit2', var.get(u"this").get('strm'), var.get(u"this").get('level'), var.get('exports').get('Z_DEFLATED'), var.get(u"this").get('windowBits'), var.get(u"this").get('memLevel'), var.get(u"this").get('strategy')))
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, var.get('exports').get('INFLATE')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, var.get('exports').get('GUNZIP')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, var.get('exports').get('INFLATERAW')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, var.get('exports').get('UNZIP')):
                            SWITCHED = True
                            var.get(u"this").put('err', var.get('zlib_inflate').callprop('inflateInit2', var.get(u"this").get('strm'), var.get(u"this").get('windowBits')))
                            break
                        if True:
                            SWITCHED = True
                            PyJsTempException = JsToPyException(var.get('Error').create((Js('Unknown mode ')+var.get(u"this").get('mode'))))
                            raise PyJsTempException
                        SWITCHED = True
                        break
                    if PyJsStrictNeq(var.get(u"this").get('err'),var.get('exports').get('Z_OK')):
                        var.get(u"this").callprop('_error', Js('Init error'))
                    var.get(u"this").put('dictionary', var.get('dictionary'))
                    var.get(u"this").put('write_in_progress', Js(False))
                    var.get(u"this").put('init_done', Js(True))
                PyJs_anonymous_600_._set_name('anonymous')
                var.get('Zlib').get('prototype').put('_init', PyJs_anonymous_600_)
                @Js
                def PyJs_anonymous_601_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    if (var.get(u"this").get('dictionary')==var.get(u"null")):
                        return var.get('undefined')
                    var.get(u"this").put('err', var.get('exports').get('Z_OK'))
                    while 1:
                        SWITCHED = False
                        CONDITION = (var.get(u"this").get('mode'))
                        if SWITCHED or PyJsStrictEq(CONDITION, var.get('exports').get('DEFLATE')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, var.get('exports').get('DEFLATERAW')):
                            SWITCHED = True
                            var.get(u"this").put('err', var.get('zlib_deflate').callprop('deflateSetDictionary', var.get(u"this").get('strm'), var.get(u"this").get('dictionary')))
                            break
                        if True:
                            SWITCHED = True
                            break
                        SWITCHED = True
                        break
                    if PyJsStrictNeq(var.get(u"this").get('err'),var.get('exports').get('Z_OK')):
                        var.get(u"this").callprop('_error', Js('Failed to set dictionary'))
                PyJs_anonymous_601_._set_name('anonymous')
                var.get('Zlib').get('prototype').put('_setDictionary', PyJs_anonymous_601_)
                @Js
                def PyJs_anonymous_602_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.get(u"this").put('err', var.get('exports').get('Z_OK'))
                    while 1:
                        SWITCHED = False
                        CONDITION = (var.get(u"this").get('mode'))
                        if SWITCHED or PyJsStrictEq(CONDITION, var.get('exports').get('DEFLATE')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, var.get('exports').get('DEFLATERAW')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, var.get('exports').get('GZIP')):
                            SWITCHED = True
                            var.get(u"this").put('err', var.get('zlib_deflate').callprop('deflateReset', var.get(u"this").get('strm')))
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, var.get('exports').get('INFLATE')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, var.get('exports').get('INFLATERAW')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, var.get('exports').get('GUNZIP')):
                            SWITCHED = True
                            var.get(u"this").put('err', var.get('zlib_inflate').callprop('inflateReset', var.get(u"this").get('strm')))
                            break
                        if True:
                            SWITCHED = True
                            break
                        SWITCHED = True
                        break
                    if PyJsStrictNeq(var.get(u"this").get('err'),var.get('exports').get('Z_OK')):
                        var.get(u"this").callprop('_error', Js('Failed to reset stream'))
                PyJs_anonymous_602_._set_name('anonymous')
                var.get('Zlib').get('prototype').put('_reset', PyJs_anonymous_602_)
                var.get('exports').put('Zlib', var.get('Zlib'))
            PyJs_anonymous_584_._set_name('anonymous')
            PyJs_anonymous_584_.callprop('call', var.get(u"this"))
        PyJs_anonymous_583_._set_name('anonymous')
        PyJs_anonymous_583_.callprop('call', var.get(u"this"), var.get('require')(Js('_process')), var.get('require')(Js('buffer')).get('Buffer'))
    PyJs_anonymous_582_._set_name('anonymous')
    @Js
    def PyJs_anonymous_603_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_604_(process, this, arguments, var=var):
            var = Scope({'process':process, 'this':this, 'arguments':arguments}, var)
            var.registers(['process'])
            @Js
            def PyJs_anonymous_605_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['zlibBuffer', 'DeflateRaw', 'util', 'assert', '_close', 'bkeys', 'Buffer', 'InflateRaw', 'Zlib', 'Deflate', 'kRangeErrorMessage', 'Transform', 'binding', 'Inflate', 'isValidFlushFlag', 'bk', 'zlibBufferSync', 'Gunzip', 'kMaxLength', 'ckey', 'bkey', 'ck', 'codes', 'ckeys', 'Unzip', 'emitCloseNT', 'Gzip'])
                @Js
                def PyJsHoisted_zlibBuffer_(engine, buffer, callback, this, arguments, var=var):
                    var = Scope({'engine':engine, 'buffer':buffer, 'callback':callback, 'this':this, 'arguments':arguments}, var)
                    var.registers(['nread', 'callback', 'buffer', 'buffers', 'flow', 'engine', 'onEnd', 'onError'])
                    @Js
                    def PyJsHoisted_flow_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['chunk'])
                        pass
                        while PyJsStrictNeq(var.get(u"null"),var.put('chunk', var.get('engine').callprop('read'))):
                            var.get('buffers').callprop('push', var.get('chunk'))
                            var.put('nread', var.get('chunk').get('length'), '+')
                        var.get('engine').callprop('once', Js('readable'), var.get('flow'))
                    PyJsHoisted_flow_.func_name = 'flow'
                    var.put('flow', PyJsHoisted_flow_)
                    @Js
                    def PyJsHoisted_onError_(err, this, arguments, var=var):
                        var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                        var.registers(['err'])
                        var.get('engine').callprop('removeListener', Js('end'), var.get('onEnd'))
                        var.get('engine').callprop('removeListener', Js('readable'), var.get('flow'))
                        var.get('callback')(var.get('err'))
                    PyJsHoisted_onError_.func_name = 'onError'
                    var.put('onError', PyJsHoisted_onError_)
                    @Js
                    def PyJsHoisted_onEnd_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['err', 'buf'])
                        pass
                        var.put('err', var.get(u"null"))
                        if (var.get('nread')>=var.get('kMaxLength')):
                            var.put('err', var.get('RangeError').create(var.get('kRangeErrorMessage')))
                        else:
                            var.put('buf', var.get('Buffer').callprop('concat', var.get('buffers'), var.get('nread')))
                        var.put('buffers', Js([]))
                        var.get('engine').callprop('close')
                        var.get('callback')(var.get('err'), var.get('buf'))
                    PyJsHoisted_onEnd_.func_name = 'onEnd'
                    var.put('onEnd', PyJsHoisted_onEnd_)
                    var.put('buffers', Js([]))
                    var.put('nread', Js(0.0))
                    var.get('engine').callprop('on', Js('error'), var.get('onError'))
                    var.get('engine').callprop('on', Js('end'), var.get('onEnd'))
                    var.get('engine').callprop('end', var.get('buffer'))
                    var.get('flow')()
                    pass
                    pass
                    pass
                PyJsHoisted_zlibBuffer_.func_name = 'zlibBuffer'
                var.put('zlibBuffer', PyJsHoisted_zlibBuffer_)
                @Js
                def PyJsHoisted_zlibBufferSync_(engine, buffer, this, arguments, var=var):
                    var = Scope({'engine':engine, 'buffer':buffer, 'this':this, 'arguments':arguments}, var)
                    var.registers(['buffer', 'flushFlag', 'engine'])
                    if PyJsStrictEq(var.get('buffer',throw=False).typeof(),Js('string')):
                        var.put('buffer', var.get('Buffer').callprop('from', var.get('buffer')))
                    if var.get('Buffer').callprop('isBuffer', var.get('buffer')).neg():
                        PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Not a string or buffer')))
                        raise PyJsTempException
                    var.put('flushFlag', var.get('engine').get('_finishFlushFlag'))
                    return var.get('engine').callprop('_processChunk', var.get('buffer'), var.get('flushFlag'))
                PyJsHoisted_zlibBufferSync_.func_name = 'zlibBufferSync'
                var.put('zlibBufferSync', PyJsHoisted_zlibBufferSync_)
                @Js
                def PyJsHoisted_Deflate_(opts, this, arguments, var=var):
                    var = Scope({'opts':opts, 'this':this, 'arguments':arguments}, var)
                    var.registers(['opts'])
                    if var.get(u"this").instanceof(var.get('Deflate')).neg():
                        return var.get('Deflate').create(var.get('opts'))
                    var.get('Zlib').callprop('call', var.get(u"this"), var.get('opts'), var.get('binding').get('DEFLATE'))
                PyJsHoisted_Deflate_.func_name = 'Deflate'
                var.put('Deflate', PyJsHoisted_Deflate_)
                @Js
                def PyJsHoisted_Inflate_(opts, this, arguments, var=var):
                    var = Scope({'opts':opts, 'this':this, 'arguments':arguments}, var)
                    var.registers(['opts'])
                    if var.get(u"this").instanceof(var.get('Inflate')).neg():
                        return var.get('Inflate').create(var.get('opts'))
                    var.get('Zlib').callprop('call', var.get(u"this"), var.get('opts'), var.get('binding').get('INFLATE'))
                PyJsHoisted_Inflate_.func_name = 'Inflate'
                var.put('Inflate', PyJsHoisted_Inflate_)
                @Js
                def PyJsHoisted_Gzip_(opts, this, arguments, var=var):
                    var = Scope({'opts':opts, 'this':this, 'arguments':arguments}, var)
                    var.registers(['opts'])
                    if var.get(u"this").instanceof(var.get('Gzip')).neg():
                        return var.get('Gzip').create(var.get('opts'))
                    var.get('Zlib').callprop('call', var.get(u"this"), var.get('opts'), var.get('binding').get('GZIP'))
                PyJsHoisted_Gzip_.func_name = 'Gzip'
                var.put('Gzip', PyJsHoisted_Gzip_)
                @Js
                def PyJsHoisted_Gunzip_(opts, this, arguments, var=var):
                    var = Scope({'opts':opts, 'this':this, 'arguments':arguments}, var)
                    var.registers(['opts'])
                    if var.get(u"this").instanceof(var.get('Gunzip')).neg():
                        return var.get('Gunzip').create(var.get('opts'))
                    var.get('Zlib').callprop('call', var.get(u"this"), var.get('opts'), var.get('binding').get('GUNZIP'))
                PyJsHoisted_Gunzip_.func_name = 'Gunzip'
                var.put('Gunzip', PyJsHoisted_Gunzip_)
                @Js
                def PyJsHoisted_DeflateRaw_(opts, this, arguments, var=var):
                    var = Scope({'opts':opts, 'this':this, 'arguments':arguments}, var)
                    var.registers(['opts'])
                    if var.get(u"this").instanceof(var.get('DeflateRaw')).neg():
                        return var.get('DeflateRaw').create(var.get('opts'))
                    var.get('Zlib').callprop('call', var.get(u"this"), var.get('opts'), var.get('binding').get('DEFLATERAW'))
                PyJsHoisted_DeflateRaw_.func_name = 'DeflateRaw'
                var.put('DeflateRaw', PyJsHoisted_DeflateRaw_)
                @Js
                def PyJsHoisted_InflateRaw_(opts, this, arguments, var=var):
                    var = Scope({'opts':opts, 'this':this, 'arguments':arguments}, var)
                    var.registers(['opts'])
                    if var.get(u"this").instanceof(var.get('InflateRaw')).neg():
                        return var.get('InflateRaw').create(var.get('opts'))
                    var.get('Zlib').callprop('call', var.get(u"this"), var.get('opts'), var.get('binding').get('INFLATERAW'))
                PyJsHoisted_InflateRaw_.func_name = 'InflateRaw'
                var.put('InflateRaw', PyJsHoisted_InflateRaw_)
                @Js
                def PyJsHoisted_Unzip_(opts, this, arguments, var=var):
                    var = Scope({'opts':opts, 'this':this, 'arguments':arguments}, var)
                    var.registers(['opts'])
                    if var.get(u"this").instanceof(var.get('Unzip')).neg():
                        return var.get('Unzip').create(var.get('opts'))
                    var.get('Zlib').callprop('call', var.get(u"this"), var.get('opts'), var.get('binding').get('UNZIP'))
                PyJsHoisted_Unzip_.func_name = 'Unzip'
                var.put('Unzip', PyJsHoisted_Unzip_)
                @Js
                def PyJsHoisted_isValidFlushFlag_(flag, this, arguments, var=var):
                    var = Scope({'flag':flag, 'this':this, 'arguments':arguments}, var)
                    var.registers(['flag'])
                    def PyJs_LONG_627_(var=var):
                        return (((((PyJsStrictEq(var.get('flag'),var.get('binding').get('Z_NO_FLUSH')) or PyJsStrictEq(var.get('flag'),var.get('binding').get('Z_PARTIAL_FLUSH'))) or PyJsStrictEq(var.get('flag'),var.get('binding').get('Z_SYNC_FLUSH'))) or PyJsStrictEq(var.get('flag'),var.get('binding').get('Z_FULL_FLUSH'))) or PyJsStrictEq(var.get('flag'),var.get('binding').get('Z_FINISH'))) or PyJsStrictEq(var.get('flag'),var.get('binding').get('Z_BLOCK')))
                    return PyJs_LONG_627_()
                PyJsHoisted_isValidFlushFlag_.func_name = 'isValidFlushFlag'
                var.put('isValidFlushFlag', PyJsHoisted_isValidFlushFlag_)
                @Js
                def PyJsHoisted_Zlib_(opts, mode, this, arguments, var=var):
                    var = Scope({'opts':opts, 'mode':mode, 'this':this, 'arguments':arguments}, var)
                    var.registers(['level', 'self', 'mode', 'strategy', 'opts', '_this'])
                    var.put('_this', var.get(u"this"))
                    var.get(u"this").put('_opts', var.put('opts', (var.get('opts') or Js({}))))
                    var.get(u"this").put('_chunkSize', (var.get('opts').get('chunkSize') or var.get('exports').get('Z_DEFAULT_CHUNK')))
                    var.get('Transform').callprop('call', var.get(u"this"), var.get('opts'))
                    if (var.get('opts').get('flush') and var.get('isValidFlushFlag')(var.get('opts').get('flush')).neg()):
                        PyJsTempException = JsToPyException(var.get('Error').create((Js('Invalid flush flag: ')+var.get('opts').get('flush'))))
                        raise PyJsTempException
                    if (var.get('opts').get('finishFlush') and var.get('isValidFlushFlag')(var.get('opts').get('finishFlush')).neg()):
                        PyJsTempException = JsToPyException(var.get('Error').create((Js('Invalid flush flag: ')+var.get('opts').get('finishFlush'))))
                        raise PyJsTempException
                    var.get(u"this").put('_flushFlag', (var.get('opts').get('flush') or var.get('binding').get('Z_NO_FLUSH')))
                    var.get(u"this").put('_finishFlushFlag', (var.get('opts').get('finishFlush') if PyJsStrictNeq(var.get('opts').get('finishFlush').typeof(),Js('undefined')) else var.get('binding').get('Z_FINISH')))
                    if var.get('opts').get('chunkSize'):
                        if ((var.get('opts').get('chunkSize')<var.get('exports').get('Z_MIN_CHUNK')) or (var.get('opts').get('chunkSize')>var.get('exports').get('Z_MAX_CHUNK'))):
                            PyJsTempException = JsToPyException(var.get('Error').create((Js('Invalid chunk size: ')+var.get('opts').get('chunkSize'))))
                            raise PyJsTempException
                    if var.get('opts').get('windowBits'):
                        if ((var.get('opts').get('windowBits')<var.get('exports').get('Z_MIN_WINDOWBITS')) or (var.get('opts').get('windowBits')>var.get('exports').get('Z_MAX_WINDOWBITS'))):
                            PyJsTempException = JsToPyException(var.get('Error').create((Js('Invalid windowBits: ')+var.get('opts').get('windowBits'))))
                            raise PyJsTempException
                    if var.get('opts').get('level'):
                        if ((var.get('opts').get('level')<var.get('exports').get('Z_MIN_LEVEL')) or (var.get('opts').get('level')>var.get('exports').get('Z_MAX_LEVEL'))):
                            PyJsTempException = JsToPyException(var.get('Error').create((Js('Invalid compression level: ')+var.get('opts').get('level'))))
                            raise PyJsTempException
                    if var.get('opts').get('memLevel'):
                        if ((var.get('opts').get('memLevel')<var.get('exports').get('Z_MIN_MEMLEVEL')) or (var.get('opts').get('memLevel')>var.get('exports').get('Z_MAX_MEMLEVEL'))):
                            PyJsTempException = JsToPyException(var.get('Error').create((Js('Invalid memLevel: ')+var.get('opts').get('memLevel'))))
                            raise PyJsTempException
                    if var.get('opts').get('strategy'):
                        if (((((var.get('opts').get('strategy')!=var.get('exports').get('Z_FILTERED')) and (var.get('opts').get('strategy')!=var.get('exports').get('Z_HUFFMAN_ONLY'))) and (var.get('opts').get('strategy')!=var.get('exports').get('Z_RLE'))) and (var.get('opts').get('strategy')!=var.get('exports').get('Z_FIXED'))) and (var.get('opts').get('strategy')!=var.get('exports').get('Z_DEFAULT_STRATEGY'))):
                            PyJsTempException = JsToPyException(var.get('Error').create((Js('Invalid strategy: ')+var.get('opts').get('strategy'))))
                            raise PyJsTempException
                    if var.get('opts').get('dictionary'):
                        if var.get('Buffer').callprop('isBuffer', var.get('opts').get('dictionary')).neg():
                            PyJsTempException = JsToPyException(var.get('Error').create(Js('Invalid dictionary: it should be a Buffer instance')))
                            raise PyJsTempException
                    var.get(u"this").put('_handle', var.get('binding').get('Zlib').create(var.get('mode')))
                    var.put('self', var.get(u"this"))
                    var.get(u"this").put('_hadError', Js(False))
                    @Js
                    def PyJs_anonymous_628_(message, errno, this, arguments, var=var):
                        var = Scope({'message':message, 'errno':errno, 'this':this, 'arguments':arguments}, var)
                        var.registers(['message', 'errno', 'error'])
                        var.get('_close')(var.get('self'))
                        var.get('self').put('_hadError', Js(True))
                        var.put('error', var.get('Error').create(var.get('message')))
                        var.get('error').put('errno', var.get('errno'))
                        var.get('error').put('code', var.get('exports').get('codes').get(var.get('errno')))
                        var.get('self').callprop('emit', Js('error'), var.get('error'))
                    PyJs_anonymous_628_._set_name('anonymous')
                    var.get(u"this").get('_handle').put('onerror', PyJs_anonymous_628_)
                    var.put('level', var.get('exports').get('Z_DEFAULT_COMPRESSION'))
                    if PyJsStrictEq(var.get('opts').get('level').typeof(),Js('number')):
                        var.put('level', var.get('opts').get('level'))
                    var.put('strategy', var.get('exports').get('Z_DEFAULT_STRATEGY'))
                    if PyJsStrictEq(var.get('opts').get('strategy').typeof(),Js('number')):
                        var.put('strategy', var.get('opts').get('strategy'))
                    var.get(u"this").get('_handle').callprop('init', (var.get('opts').get('windowBits') or var.get('exports').get('Z_DEFAULT_WINDOWBITS')), var.get('level'), (var.get('opts').get('memLevel') or var.get('exports').get('Z_DEFAULT_MEMLEVEL')), var.get('strategy'), var.get('opts').get('dictionary'))
                    var.get(u"this").put('_buffer', var.get('Buffer').callprop('allocUnsafe', var.get(u"this").get('_chunkSize')))
                    var.get(u"this").put('_offset', Js(0.0))
                    var.get(u"this").put('_level', var.get('level'))
                    var.get(u"this").put('_strategy', var.get('strategy'))
                    var.get(u"this").callprop('once', Js('end'), var.get(u"this").get('close'))
                    @Js
                    def PyJs_get_629_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_629_}, var)
                        var.registers([])
                        return var.get('_this').get('_handle').neg()
                    PyJs_get_629_._set_name('get')
                    var.get('Object').callprop('defineProperty', var.get(u"this"), Js('_closed'), Js({'get':PyJs_get_629_,'configurable':Js(True),'enumerable':Js(True)}))
                PyJsHoisted_Zlib_.func_name = 'Zlib'
                var.put('Zlib', PyJsHoisted_Zlib_)
                @Js
                def PyJsHoisted__close_(engine, callback, this, arguments, var=var):
                    var = Scope({'engine':engine, 'callback':callback, 'this':this, 'arguments':arguments}, var)
                    var.registers(['callback', 'engine'])
                    if var.get('callback'):
                        var.get('process').callprop('nextTick', var.get('callback'))
                    if var.get('engine').get('_handle').neg():
                        return var.get('undefined')
                    var.get('engine').get('_handle').callprop('close')
                    var.get('engine').put('_handle', var.get(u"null"))
                PyJsHoisted__close_.func_name = '_close'
                var.put('_close', PyJsHoisted__close_)
                @Js
                def PyJsHoisted_emitCloseNT_(self, this, arguments, var=var):
                    var = Scope({'self':self, 'this':this, 'arguments':arguments}, var)
                    var.registers(['self'])
                    var.get('self').callprop('emit', Js('close'))
                PyJsHoisted_emitCloseNT_.func_name = 'emitCloseNT'
                var.put('emitCloseNT', PyJsHoisted_emitCloseNT_)
                Js('use strict')
                var.put('Buffer', var.get('require')(Js('buffer')).get('Buffer'))
                var.put('Transform', var.get('require')(Js('stream')).get('Transform'))
                var.put('binding', var.get('require')(Js('./binding')))
                var.put('util', var.get('require')(Js('util')))
                var.put('assert', var.get('require')(Js('assert')).get('ok'))
                var.put('kMaxLength', var.get('require')(Js('buffer')).get('kMaxLength'))
                var.put('kRangeErrorMessage', (((Js('Cannot create final Buffer. It would be larger ')+Js('than 0x'))+var.get('kMaxLength').callprop('toString', Js(16.0)))+Js(' bytes')))
                var.get('binding').put('Z_MIN_WINDOWBITS', Js(8.0))
                var.get('binding').put('Z_MAX_WINDOWBITS', Js(15.0))
                var.get('binding').put('Z_DEFAULT_WINDOWBITS', Js(15.0))
                var.get('binding').put('Z_MIN_CHUNK', Js(64.0))
                var.get('binding').put('Z_MAX_CHUNK', var.get('Infinity'))
                var.get('binding').put('Z_DEFAULT_CHUNK', (Js(16.0)*Js(1024.0)))
                var.get('binding').put('Z_MIN_MEMLEVEL', Js(1.0))
                var.get('binding').put('Z_MAX_MEMLEVEL', Js(9.0))
                var.get('binding').put('Z_DEFAULT_MEMLEVEL', Js(8.0))
                var.get('binding').put('Z_MIN_LEVEL', (-Js(1.0)))
                var.get('binding').put('Z_MAX_LEVEL', Js(9.0))
                var.get('binding').put('Z_DEFAULT_LEVEL', var.get('binding').get('Z_DEFAULT_COMPRESSION'))
                var.put('bkeys', var.get('Object').callprop('keys', var.get('binding')))
                #for JS loop
                var.put('bk', Js(0.0))
                while (var.get('bk')<var.get('bkeys').get('length')):
                    try:
                        var.put('bkey', var.get('bkeys').get(var.get('bk')))
                        if var.get('bkey').callprop('match', JsRegExp('/^Z/')):
                            var.get('Object').callprop('defineProperty', var.get('exports'), var.get('bkey'), Js({'enumerable':Js(True),'value':var.get('binding').get(var.get('bkey')),'writable':Js(False)}))
                    finally:
                            (var.put('bk',Js(var.get('bk').to_number())+Js(1))-Js(1))
                var.put('codes', Js({'Z_OK':var.get('binding').get('Z_OK'),'Z_STREAM_END':var.get('binding').get('Z_STREAM_END'),'Z_NEED_DICT':var.get('binding').get('Z_NEED_DICT'),'Z_ERRNO':var.get('binding').get('Z_ERRNO'),'Z_STREAM_ERROR':var.get('binding').get('Z_STREAM_ERROR'),'Z_DATA_ERROR':var.get('binding').get('Z_DATA_ERROR'),'Z_MEM_ERROR':var.get('binding').get('Z_MEM_ERROR'),'Z_BUF_ERROR':var.get('binding').get('Z_BUF_ERROR'),'Z_VERSION_ERROR':var.get('binding').get('Z_VERSION_ERROR')}))
                var.put('ckeys', var.get('Object').callprop('keys', var.get('codes')))
                #for JS loop
                var.put('ck', Js(0.0))
                while (var.get('ck')<var.get('ckeys').get('length')):
                    try:
                        var.put('ckey', var.get('ckeys').get(var.get('ck')))
                        var.get('codes').put(var.get('codes').get(var.get('ckey')), var.get('ckey'))
                    finally:
                            (var.put('ck',Js(var.get('ck').to_number())+Js(1))-Js(1))
                var.get('Object').callprop('defineProperty', var.get('exports'), Js('codes'), Js({'enumerable':Js(True),'value':var.get('Object').callprop('freeze', var.get('codes')),'writable':Js(False)}))
                var.get('exports').put('Deflate', var.get('Deflate'))
                var.get('exports').put('Inflate', var.get('Inflate'))
                var.get('exports').put('Gzip', var.get('Gzip'))
                var.get('exports').put('Gunzip', var.get('Gunzip'))
                var.get('exports').put('DeflateRaw', var.get('DeflateRaw'))
                var.get('exports').put('InflateRaw', var.get('InflateRaw'))
                var.get('exports').put('Unzip', var.get('Unzip'))
                @Js
                def PyJs_anonymous_606_(o, this, arguments, var=var):
                    var = Scope({'o':o, 'this':this, 'arguments':arguments}, var)
                    var.registers(['o'])
                    return var.get('Deflate').create(var.get('o'))
                PyJs_anonymous_606_._set_name('anonymous')
                var.get('exports').put('createDeflate', PyJs_anonymous_606_)
                @Js
                def PyJs_anonymous_607_(o, this, arguments, var=var):
                    var = Scope({'o':o, 'this':this, 'arguments':arguments}, var)
                    var.registers(['o'])
                    return var.get('Inflate').create(var.get('o'))
                PyJs_anonymous_607_._set_name('anonymous')
                var.get('exports').put('createInflate', PyJs_anonymous_607_)
                @Js
                def PyJs_anonymous_608_(o, this, arguments, var=var):
                    var = Scope({'o':o, 'this':this, 'arguments':arguments}, var)
                    var.registers(['o'])
                    return var.get('DeflateRaw').create(var.get('o'))
                PyJs_anonymous_608_._set_name('anonymous')
                var.get('exports').put('createDeflateRaw', PyJs_anonymous_608_)
                @Js
                def PyJs_anonymous_609_(o, this, arguments, var=var):
                    var = Scope({'o':o, 'this':this, 'arguments':arguments}, var)
                    var.registers(['o'])
                    return var.get('InflateRaw').create(var.get('o'))
                PyJs_anonymous_609_._set_name('anonymous')
                var.get('exports').put('createInflateRaw', PyJs_anonymous_609_)
                @Js
                def PyJs_anonymous_610_(o, this, arguments, var=var):
                    var = Scope({'o':o, 'this':this, 'arguments':arguments}, var)
                    var.registers(['o'])
                    return var.get('Gzip').create(var.get('o'))
                PyJs_anonymous_610_._set_name('anonymous')
                var.get('exports').put('createGzip', PyJs_anonymous_610_)
                @Js
                def PyJs_anonymous_611_(o, this, arguments, var=var):
                    var = Scope({'o':o, 'this':this, 'arguments':arguments}, var)
                    var.registers(['o'])
                    return var.get('Gunzip').create(var.get('o'))
                PyJs_anonymous_611_._set_name('anonymous')
                var.get('exports').put('createGunzip', PyJs_anonymous_611_)
                @Js
                def PyJs_anonymous_612_(o, this, arguments, var=var):
                    var = Scope({'o':o, 'this':this, 'arguments':arguments}, var)
                    var.registers(['o'])
                    return var.get('Unzip').create(var.get('o'))
                PyJs_anonymous_612_._set_name('anonymous')
                var.get('exports').put('createUnzip', PyJs_anonymous_612_)
                @Js
                def PyJs_anonymous_613_(buffer, opts, callback, this, arguments, var=var):
                    var = Scope({'buffer':buffer, 'opts':opts, 'callback':callback, 'this':this, 'arguments':arguments}, var)
                    var.registers(['buffer', 'callback', 'opts'])
                    if PyJsStrictEq(var.get('opts',throw=False).typeof(),Js('function')):
                        var.put('callback', var.get('opts'))
                        var.put('opts', Js({}))
                    return var.get('zlibBuffer')(var.get('Deflate').create(var.get('opts')), var.get('buffer'), var.get('callback'))
                PyJs_anonymous_613_._set_name('anonymous')
                var.get('exports').put('deflate', PyJs_anonymous_613_)
                @Js
                def PyJs_anonymous_614_(buffer, opts, this, arguments, var=var):
                    var = Scope({'buffer':buffer, 'opts':opts, 'this':this, 'arguments':arguments}, var)
                    var.registers(['buffer', 'opts'])
                    return var.get('zlibBufferSync')(var.get('Deflate').create(var.get('opts')), var.get('buffer'))
                PyJs_anonymous_614_._set_name('anonymous')
                var.get('exports').put('deflateSync', PyJs_anonymous_614_)
                @Js
                def PyJs_anonymous_615_(buffer, opts, callback, this, arguments, var=var):
                    var = Scope({'buffer':buffer, 'opts':opts, 'callback':callback, 'this':this, 'arguments':arguments}, var)
                    var.registers(['buffer', 'callback', 'opts'])
                    if PyJsStrictEq(var.get('opts',throw=False).typeof(),Js('function')):
                        var.put('callback', var.get('opts'))
                        var.put('opts', Js({}))
                    return var.get('zlibBuffer')(var.get('Gzip').create(var.get('opts')), var.get('buffer'), var.get('callback'))
                PyJs_anonymous_615_._set_name('anonymous')
                var.get('exports').put('gzip', PyJs_anonymous_615_)
                @Js
                def PyJs_anonymous_616_(buffer, opts, this, arguments, var=var):
                    var = Scope({'buffer':buffer, 'opts':opts, 'this':this, 'arguments':arguments}, var)
                    var.registers(['buffer', 'opts'])
                    return var.get('zlibBufferSync')(var.get('Gzip').create(var.get('opts')), var.get('buffer'))
                PyJs_anonymous_616_._set_name('anonymous')
                var.get('exports').put('gzipSync', PyJs_anonymous_616_)
                @Js
                def PyJs_anonymous_617_(buffer, opts, callback, this, arguments, var=var):
                    var = Scope({'buffer':buffer, 'opts':opts, 'callback':callback, 'this':this, 'arguments':arguments}, var)
                    var.registers(['buffer', 'callback', 'opts'])
                    if PyJsStrictEq(var.get('opts',throw=False).typeof(),Js('function')):
                        var.put('callback', var.get('opts'))
                        var.put('opts', Js({}))
                    return var.get('zlibBuffer')(var.get('DeflateRaw').create(var.get('opts')), var.get('buffer'), var.get('callback'))
                PyJs_anonymous_617_._set_name('anonymous')
                var.get('exports').put('deflateRaw', PyJs_anonymous_617_)
                @Js
                def PyJs_anonymous_618_(buffer, opts, this, arguments, var=var):
                    var = Scope({'buffer':buffer, 'opts':opts, 'this':this, 'arguments':arguments}, var)
                    var.registers(['buffer', 'opts'])
                    return var.get('zlibBufferSync')(var.get('DeflateRaw').create(var.get('opts')), var.get('buffer'))
                PyJs_anonymous_618_._set_name('anonymous')
                var.get('exports').put('deflateRawSync', PyJs_anonymous_618_)
                @Js
                def PyJs_anonymous_619_(buffer, opts, callback, this, arguments, var=var):
                    var = Scope({'buffer':buffer, 'opts':opts, 'callback':callback, 'this':this, 'arguments':arguments}, var)
                    var.registers(['buffer', 'callback', 'opts'])
                    if PyJsStrictEq(var.get('opts',throw=False).typeof(),Js('function')):
                        var.put('callback', var.get('opts'))
                        var.put('opts', Js({}))
                    return var.get('zlibBuffer')(var.get('Unzip').create(var.get('opts')), var.get('buffer'), var.get('callback'))
                PyJs_anonymous_619_._set_name('anonymous')
                var.get('exports').put('unzip', PyJs_anonymous_619_)
                @Js
                def PyJs_anonymous_620_(buffer, opts, this, arguments, var=var):
                    var = Scope({'buffer':buffer, 'opts':opts, 'this':this, 'arguments':arguments}, var)
                    var.registers(['buffer', 'opts'])
                    return var.get('zlibBufferSync')(var.get('Unzip').create(var.get('opts')), var.get('buffer'))
                PyJs_anonymous_620_._set_name('anonymous')
                var.get('exports').put('unzipSync', PyJs_anonymous_620_)
                @Js
                def PyJs_anonymous_621_(buffer, opts, callback, this, arguments, var=var):
                    var = Scope({'buffer':buffer, 'opts':opts, 'callback':callback, 'this':this, 'arguments':arguments}, var)
                    var.registers(['buffer', 'callback', 'opts'])
                    if PyJsStrictEq(var.get('opts',throw=False).typeof(),Js('function')):
                        var.put('callback', var.get('opts'))
                        var.put('opts', Js({}))
                    return var.get('zlibBuffer')(var.get('Inflate').create(var.get('opts')), var.get('buffer'), var.get('callback'))
                PyJs_anonymous_621_._set_name('anonymous')
                var.get('exports').put('inflate', PyJs_anonymous_621_)
                @Js
                def PyJs_anonymous_622_(buffer, opts, this, arguments, var=var):
                    var = Scope({'buffer':buffer, 'opts':opts, 'this':this, 'arguments':arguments}, var)
                    var.registers(['buffer', 'opts'])
                    return var.get('zlibBufferSync')(var.get('Inflate').create(var.get('opts')), var.get('buffer'))
                PyJs_anonymous_622_._set_name('anonymous')
                var.get('exports').put('inflateSync', PyJs_anonymous_622_)
                @Js
                def PyJs_anonymous_623_(buffer, opts, callback, this, arguments, var=var):
                    var = Scope({'buffer':buffer, 'opts':opts, 'callback':callback, 'this':this, 'arguments':arguments}, var)
                    var.registers(['buffer', 'callback', 'opts'])
                    if PyJsStrictEq(var.get('opts',throw=False).typeof(),Js('function')):
                        var.put('callback', var.get('opts'))
                        var.put('opts', Js({}))
                    return var.get('zlibBuffer')(var.get('Gunzip').create(var.get('opts')), var.get('buffer'), var.get('callback'))
                PyJs_anonymous_623_._set_name('anonymous')
                var.get('exports').put('gunzip', PyJs_anonymous_623_)
                @Js
                def PyJs_anonymous_624_(buffer, opts, this, arguments, var=var):
                    var = Scope({'buffer':buffer, 'opts':opts, 'this':this, 'arguments':arguments}, var)
                    var.registers(['buffer', 'opts'])
                    return var.get('zlibBufferSync')(var.get('Gunzip').create(var.get('opts')), var.get('buffer'))
                PyJs_anonymous_624_._set_name('anonymous')
                var.get('exports').put('gunzipSync', PyJs_anonymous_624_)
                @Js
                def PyJs_anonymous_625_(buffer, opts, callback, this, arguments, var=var):
                    var = Scope({'buffer':buffer, 'opts':opts, 'callback':callback, 'this':this, 'arguments':arguments}, var)
                    var.registers(['buffer', 'callback', 'opts'])
                    if PyJsStrictEq(var.get('opts',throw=False).typeof(),Js('function')):
                        var.put('callback', var.get('opts'))
                        var.put('opts', Js({}))
                    return var.get('zlibBuffer')(var.get('InflateRaw').create(var.get('opts')), var.get('buffer'), var.get('callback'))
                PyJs_anonymous_625_._set_name('anonymous')
                var.get('exports').put('inflateRaw', PyJs_anonymous_625_)
                @Js
                def PyJs_anonymous_626_(buffer, opts, this, arguments, var=var):
                    var = Scope({'buffer':buffer, 'opts':opts, 'this':this, 'arguments':arguments}, var)
                    var.registers(['buffer', 'opts'])
                    return var.get('zlibBufferSync')(var.get('InflateRaw').create(var.get('opts')), var.get('buffer'))
                PyJs_anonymous_626_._set_name('anonymous')
                var.get('exports').put('inflateRawSync', PyJs_anonymous_626_)
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                var.get('util').callprop('inherits', var.get('Zlib'), var.get('Transform'))
                @Js
                def PyJs_anonymous_630_(level, strategy, callback, this, arguments, var=var):
                    var = Scope({'level':level, 'strategy':strategy, 'callback':callback, 'this':this, 'arguments':arguments}, var)
                    var.registers(['level', 'self', 'callback', 'strategy'])
                    if ((var.get('level')<var.get('exports').get('Z_MIN_LEVEL')) or (var.get('level')>var.get('exports').get('Z_MAX_LEVEL'))):
                        PyJsTempException = JsToPyException(var.get('RangeError').create((Js('Invalid compression level: ')+var.get('level'))))
                        raise PyJsTempException
                    if (((((var.get('strategy')!=var.get('exports').get('Z_FILTERED')) and (var.get('strategy')!=var.get('exports').get('Z_HUFFMAN_ONLY'))) and (var.get('strategy')!=var.get('exports').get('Z_RLE'))) and (var.get('strategy')!=var.get('exports').get('Z_FIXED'))) and (var.get('strategy')!=var.get('exports').get('Z_DEFAULT_STRATEGY'))):
                        PyJsTempException = JsToPyException(var.get('TypeError').create((Js('Invalid strategy: ')+var.get('strategy'))))
                        raise PyJsTempException
                    if (PyJsStrictNeq(var.get(u"this").get('_level'),var.get('level')) or PyJsStrictNeq(var.get(u"this").get('_strategy'),var.get('strategy'))):
                        var.put('self', var.get(u"this"))
                        @Js
                        def PyJs_anonymous_631_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers([])
                            var.get('assert')(var.get('self').get('_handle'), Js('zlib binding closed'))
                            var.get('self').get('_handle').callprop('params', var.get('level'), var.get('strategy'))
                            if var.get('self').get('_hadError').neg():
                                var.get('self').put('_level', var.get('level'))
                                var.get('self').put('_strategy', var.get('strategy'))
                                if var.get('callback'):
                                    var.get('callback')()
                        PyJs_anonymous_631_._set_name('anonymous')
                        var.get(u"this").callprop('flush', var.get('binding').get('Z_SYNC_FLUSH'), PyJs_anonymous_631_)
                    else:
                        var.get('process').callprop('nextTick', var.get('callback'))
                PyJs_anonymous_630_._set_name('anonymous')
                var.get('Zlib').get('prototype').put('params', PyJs_anonymous_630_)
                @Js
                def PyJs_anonymous_632_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.get('assert')(var.get(u"this").get('_handle'), Js('zlib binding closed'))
                    return var.get(u"this").get('_handle').callprop('reset')
                PyJs_anonymous_632_._set_name('anonymous')
                var.get('Zlib').get('prototype').put('reset', PyJs_anonymous_632_)
                @Js
                def PyJs_anonymous_633_(callback, this, arguments, var=var):
                    var = Scope({'callback':callback, 'this':this, 'arguments':arguments}, var)
                    var.registers(['callback'])
                    var.get(u"this").callprop('_transform', var.get('Buffer').callprop('alloc', Js(0.0)), Js(''), var.get('callback'))
                PyJs_anonymous_633_._set_name('anonymous')
                var.get('Zlib').get('prototype').put('_flush', PyJs_anonymous_633_)
                @Js
                def PyJs_anonymous_634_(kind, callback, this, arguments, var=var):
                    var = Scope({'kind':kind, 'callback':callback, 'this':this, 'arguments':arguments}, var)
                    var.registers(['ws', 'callback', '_this2', 'kind'])
                    var.put('_this2', var.get(u"this"))
                    var.put('ws', var.get(u"this").get('_writableState'))
                    if (PyJsStrictEq(var.get('kind',throw=False).typeof(),Js('function')) or (PyJsStrictEq(var.get('kind'),var.get('undefined')) and var.get('callback').neg())):
                        var.put('callback', var.get('kind'))
                        var.put('kind', var.get('binding').get('Z_FULL_FLUSH'))
                    if var.get('ws').get('ended'):
                        if var.get('callback'):
                            var.get('process').callprop('nextTick', var.get('callback'))
                    else:
                        if var.get('ws').get('ending'):
                            if var.get('callback'):
                                var.get(u"this").callprop('once', Js('end'), var.get('callback'))
                        else:
                            if var.get('ws').get('needDrain'):
                                if var.get('callback'):
                                    @Js
                                    def PyJs_anonymous_635_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        return var.get('_this2').callprop('flush', var.get('kind'), var.get('callback'))
                                    PyJs_anonymous_635_._set_name('anonymous')
                                    var.get(u"this").callprop('once', Js('drain'), PyJs_anonymous_635_)
                            else:
                                var.get(u"this").put('_flushFlag', var.get('kind'))
                                var.get(u"this").callprop('write', var.get('Buffer').callprop('alloc', Js(0.0)), Js(''), var.get('callback'))
                PyJs_anonymous_634_._set_name('anonymous')
                var.get('Zlib').get('prototype').put('flush', PyJs_anonymous_634_)
                @Js
                def PyJs_anonymous_636_(callback, this, arguments, var=var):
                    var = Scope({'callback':callback, 'this':this, 'arguments':arguments}, var)
                    var.registers(['callback'])
                    var.get('_close')(var.get(u"this"), var.get('callback'))
                    var.get('process').callprop('nextTick', var.get('emitCloseNT'), var.get(u"this"))
                PyJs_anonymous_636_._set_name('anonymous')
                var.get('Zlib').get('prototype').put('close', PyJs_anonymous_636_)
                pass
                pass
                @Js
                def PyJs_anonymous_637_(chunk, encoding, cb, this, arguments, var=var):
                    var = Scope({'chunk':chunk, 'encoding':encoding, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['last', 'flushFlag', 'encoding', 'cb', 'ending', 'ws', 'chunk'])
                    pass
                    var.put('ws', var.get(u"this").get('_writableState'))
                    var.put('ending', (var.get('ws').get('ending') or var.get('ws').get('ended')))
                    var.put('last', (var.get('ending') and (var.get('chunk').neg() or PyJsStrictEq(var.get('ws').get('length'),var.get('chunk').get('length')))))
                    if (PyJsStrictNeq(var.get('chunk'),var.get(u"null")) and var.get('Buffer').callprop('isBuffer', var.get('chunk')).neg()):
                        return var.get('cb')(var.get('Error').create(Js('invalid input')))
                    if var.get(u"this").get('_handle').neg():
                        return var.get('cb')(var.get('Error').create(Js('zlib binding closed')))
                    if var.get('last'):
                        var.put('flushFlag', var.get(u"this").get('_finishFlushFlag'))
                    else:
                        var.put('flushFlag', var.get(u"this").get('_flushFlag'))
                        if (var.get('chunk').get('length')>=var.get('ws').get('length')):
                            var.get(u"this").put('_flushFlag', (var.get(u"this").get('_opts').get('flush') or var.get('binding').get('Z_NO_FLUSH')))
                    var.get(u"this").callprop('_processChunk', var.get('chunk'), var.get('flushFlag'), var.get('cb'))
                PyJs_anonymous_637_._set_name('anonymous')
                var.get('Zlib').get('prototype').put('_transform', PyJs_anonymous_637_)
                @Js
                def PyJs_anonymous_638_(chunk, flushFlag, cb, this, arguments, var=var):
                    var = Scope({'chunk':chunk, 'flushFlag':flushFlag, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['nread', 'self', 'buf', 'callback', 'error', 'inOff', 'flushFlag', 'req', 'buffers', 'chunk', 'cb', 'availOutBefore', 'res', 'async', 'availInBefore'])
                    @Js
                    def PyJsHoisted_callback_(availInAfter, availOutAfter, this, arguments, var=var):
                        var = Scope({'availInAfter':availInAfter, 'availOutAfter':availOutAfter, 'this':this, 'arguments':arguments}, var)
                        var.registers(['out', 'have', 'availInAfter', 'availOutAfter', 'newReq'])
                        if var.get(u"this"):
                            var.get(u"this").put('buffer', var.get(u"null"))
                            var.get(u"this").put('callback', var.get(u"null"))
                        if var.get('self').get('_hadError'):
                            return var.get('undefined')
                        var.put('have', (var.get('availOutBefore')-var.get('availOutAfter')))
                        var.get('assert')((var.get('have')>=Js(0.0)), Js('have should not go down'))
                        if (var.get('have')>Js(0.0)):
                            var.put('out', var.get('self').get('_buffer').callprop('slice', var.get('self').get('_offset'), (var.get('self').get('_offset')+var.get('have'))))
                            var.get('self').put('_offset', var.get('have'), '+')
                            if var.get('async'):
                                var.get('self').callprop('push', var.get('out'))
                            else:
                                var.get('buffers').callprop('push', var.get('out'))
                                var.put('nread', var.get('out').get('length'), '+')
                        if (PyJsStrictEq(var.get('availOutAfter'),Js(0.0)) or (var.get('self').get('_offset')>=var.get('self').get('_chunkSize'))):
                            var.put('availOutBefore', var.get('self').get('_chunkSize'))
                            var.get('self').put('_offset', Js(0.0))
                            var.get('self').put('_buffer', var.get('Buffer').callprop('allocUnsafe', var.get('self').get('_chunkSize')))
                        if PyJsStrictEq(var.get('availOutAfter'),Js(0.0)):
                            var.put('inOff', (var.get('availInBefore')-var.get('availInAfter')), '+')
                            var.put('availInBefore', var.get('availInAfter'))
                            if var.get('async').neg():
                                return Js(True)
                            var.put('newReq', var.get('self').get('_handle').callprop('write', var.get('flushFlag'), var.get('chunk'), var.get('inOff'), var.get('availInBefore'), var.get('self').get('_buffer'), var.get('self').get('_offset'), var.get('self').get('_chunkSize')))
                            var.get('newReq').put('callback', var.get('callback'))
                            var.get('newReq').put('buffer', var.get('chunk'))
                            return var.get('undefined')
                        if var.get('async').neg():
                            return Js(False)
                        var.get('cb')()
                    PyJsHoisted_callback_.func_name = 'callback'
                    var.put('callback', PyJsHoisted_callback_)
                    var.put('availInBefore', (var.get('chunk') and var.get('chunk').get('length')))
                    var.put('availOutBefore', (var.get(u"this").get('_chunkSize')-var.get(u"this").get('_offset')))
                    var.put('inOff', Js(0.0))
                    var.put('self', var.get(u"this"))
                    var.put('async', PyJsStrictEq(var.get('cb',throw=False).typeof(),Js('function')))
                    if var.get('async').neg():
                        var.put('buffers', Js([]))
                        var.put('nread', Js(0.0))
                        pass
                        @Js
                        def PyJs_anonymous_639_(er, this, arguments, var=var):
                            var = Scope({'er':er, 'this':this, 'arguments':arguments}, var)
                            var.registers(['er'])
                            var.put('error', var.get('er'))
                        PyJs_anonymous_639_._set_name('anonymous')
                        var.get(u"this").callprop('on', Js('error'), PyJs_anonymous_639_)
                        var.get('assert')(var.get(u"this").get('_handle'), Js('zlib binding closed'))
                        while 1:
                            var.put('res', var.get(u"this").get('_handle').callprop('writeSync', var.get('flushFlag'), var.get('chunk'), var.get('inOff'), var.get('availInBefore'), var.get(u"this").get('_buffer'), var.get(u"this").get('_offset'), var.get('availOutBefore')))
                            if not (var.get(u"this").get('_hadError').neg() and var.get('callback')(var.get('res').get('0'), var.get('res').get('1'))):
                                break
                        if var.get(u"this").get('_hadError'):
                            PyJsTempException = JsToPyException(var.get('error'))
                            raise PyJsTempException
                        if (var.get('nread')>=var.get('kMaxLength')):
                            var.get('_close')(var.get(u"this"))
                            PyJsTempException = JsToPyException(var.get('RangeError').create(var.get('kRangeErrorMessage')))
                            raise PyJsTempException
                        var.put('buf', var.get('Buffer').callprop('concat', var.get('buffers'), var.get('nread')))
                        var.get('_close')(var.get(u"this"))
                        return var.get('buf')
                    var.get('assert')(var.get(u"this").get('_handle'), Js('zlib binding closed'))
                    var.put('req', var.get(u"this").get('_handle').callprop('write', var.get('flushFlag'), var.get('chunk'), var.get('inOff'), var.get('availInBefore'), var.get(u"this").get('_buffer'), var.get(u"this").get('_offset'), var.get('availOutBefore')))
                    var.get('req').put('buffer', var.get('chunk'))
                    var.get('req').put('callback', var.get('callback'))
                    pass
                PyJs_anonymous_638_._set_name('anonymous')
                var.get('Zlib').get('prototype').put('_processChunk', PyJs_anonymous_638_)
                var.get('util').callprop('inherits', var.get('Deflate'), var.get('Zlib'))
                var.get('util').callprop('inherits', var.get('Inflate'), var.get('Zlib'))
                var.get('util').callprop('inherits', var.get('Gzip'), var.get('Zlib'))
                var.get('util').callprop('inherits', var.get('Gunzip'), var.get('Zlib'))
                var.get('util').callprop('inherits', var.get('DeflateRaw'), var.get('Zlib'))
                var.get('util').callprop('inherits', var.get('InflateRaw'), var.get('Zlib'))
                var.get('util').callprop('inherits', var.get('Unzip'), var.get('Zlib'))
            PyJs_anonymous_605_._set_name('anonymous')
            PyJs_anonymous_605_.callprop('call', var.get(u"this"))
        PyJs_anonymous_604_._set_name('anonymous')
        PyJs_anonymous_604_.callprop('call', var.get(u"this"), var.get('require')(Js('_process')))
    PyJs_anonymous_603_._set_name('anonymous')
    @Js
    def PyJs_anonymous_640_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('arguments').get('4').get('11').get('0').callprop('apply', var.get('exports'), var.get('arguments'))
    PyJs_anonymous_640_._set_name('anonymous')
    @Js
    def PyJs_anonymous_641_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_642_(Buffer, this, arguments, var=var):
            var = Scope({'Buffer':Buffer, 'this':this, 'arguments':arguments}, var)
            var.registers(['Buffer'])
            @Js
            def PyJs_anonymous_643_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['fromString', 'arrayIndexOf', 'SlowBuffer', 'allocUnsafe', 'blitBuffer', 'base64ToBytes', 'fromArrayBuffer', 'asciiToBytes', 'bidirectionalIndexOf', 'latin1Slice', 'Buffer', 'isInstance', 'hexSlice', 'writeDouble', 'utf16leSlice', 'latin1Write', 'checkOffset', 'alloc', 'utf8Write', 'base64clean', 'decodeCodePointsArray', 'asciiWrite', 'fromObject', 'checked', 'checkIEEE754', 'utf16leToBytes', 'hexWrite', 'asciiSlice', 'createBuffer', 'assertSize', 'base64Slice', 'checkInt', 'fromArrayLike', 'base64', 'utf8ToBytes', 'byteLength', 'base64Write', 'ucs2Write', 'ieee754', 'slowToString', 'swap', 'typedArraySupport', 'numberIsNaN', 'MAX_ARGUMENTS_LENGTH', 'K_MAX_LENGTH', 'writeFloat', 'utf8Slice', 'from', 'INVALID_BASE64_RE', 'toHex'])
                @Js
                def PyJsHoisted_typedArraySupport_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers(['arr'])
                    try:
                        var.put('arr', var.get('Uint8Array').create(Js(1.0)))
                        @Js
                        def PyJs_foo_644_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments, 'foo':PyJs_foo_644_}, var)
                            var.registers([])
                            return Js(42.0)
                        PyJs_foo_644_._set_name('foo')
                        var.get('arr').put('__proto__', Js({'__proto__':var.get('Uint8Array').get('prototype'),'foo':PyJs_foo_644_}))
                        return PyJsStrictEq(var.get('arr').callprop('foo'),Js(42.0))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_65_6222974 = var.own.get('e')
                        var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                        try:
                            return Js(False)
                        finally:
                            if PyJsHolder_65_6222974 is not None:
                                var.own['e'] = PyJsHolder_65_6222974
                            else:
                                del var.own['e']
                            del PyJsHolder_65_6222974
                PyJsHoisted_typedArraySupport_.func_name = 'typedArraySupport'
                var.put('typedArraySupport', PyJsHoisted_typedArraySupport_)
                @Js
                def PyJsHoisted_createBuffer_(length, this, arguments, var=var):
                    var = Scope({'length':length, 'this':this, 'arguments':arguments}, var)
                    var.registers(['length', 'buf'])
                    if (var.get('length')>var.get('K_MAX_LENGTH')):
                        PyJsTempException = JsToPyException(var.get('RangeError').create(((Js('The value "')+var.get('length'))+Js('" is invalid for option "size"'))))
                        raise PyJsTempException
                    var.put('buf', var.get('Uint8Array').create(var.get('length')))
                    var.get('buf').put('__proto__', var.get('Buffer').get('prototype'))
                    return var.get('buf')
                PyJsHoisted_createBuffer_.func_name = 'createBuffer'
                var.put('createBuffer', PyJsHoisted_createBuffer_)
                @Js
                def PyJsHoisted_Buffer_(arg, encodingOrOffset, length, this, arguments, var=var):
                    var = Scope({'arg':arg, 'encodingOrOffset':encodingOrOffset, 'length':length, 'this':this, 'arguments':arguments}, var)
                    var.registers(['arg', 'length', 'encodingOrOffset'])
                    if PyJsStrictEq(var.get('arg',throw=False).typeof(),Js('number')):
                        if PyJsStrictEq(var.get('encodingOrOffset',throw=False).typeof(),Js('string')):
                            PyJsTempException = JsToPyException(var.get('TypeError').create(Js('The "string" argument must be of type string. Received type number')))
                            raise PyJsTempException
                        return var.get('allocUnsafe')(var.get('arg'))
                    return var.get('from')(var.get('arg'), var.get('encodingOrOffset'), var.get('length'))
                PyJsHoisted_Buffer_.func_name = 'Buffer'
                var.put('Buffer', PyJsHoisted_Buffer_)
                @Js
                def PyJsHoisted_from_(value, encodingOrOffset, length, this, arguments, var=var):
                    var = Scope({'value':value, 'encodingOrOffset':encodingOrOffset, 'length':length, 'this':this, 'arguments':arguments}, var)
                    var.registers(['valueOf', 'b', 'encodingOrOffset', 'length', 'value'])
                    if PyJsStrictEq(var.get('value',throw=False).typeof(),Js('string')):
                        return var.get('fromString')(var.get('value'), var.get('encodingOrOffset'))
                    if var.get('ArrayBuffer').callprop('isView', var.get('value')):
                        return var.get('fromArrayLike')(var.get('value'))
                    if (var.get('value')==var.get(u"null")):
                        PyJsTempException = JsToPyException(var.get('TypeError')(((Js('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ')+Js('or Array-like Object. Received type '))+(Js('undefined') if PyJsStrictEq(var.get('value',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('value'))))))
                        raise PyJsTempException
                    if (var.get('isInstance')(var.get('value'), var.get('ArrayBuffer')) or (var.get('value') and var.get('isInstance')(var.get('value').get('buffer'), var.get('ArrayBuffer')))):
                        return var.get('fromArrayBuffer')(var.get('value'), var.get('encodingOrOffset'), var.get('length'))
                    if PyJsStrictEq(var.get('value',throw=False).typeof(),Js('number')):
                        PyJsTempException = JsToPyException(var.get('TypeError').create(Js('The "value" argument must not be of type number. Received type number')))
                        raise PyJsTempException
                    var.put('valueOf', (var.get('value').get('valueOf') and var.get('value').callprop('valueOf')))
                    if ((var.get('valueOf')!=var.get(u"null")) and PyJsStrictNeq(var.get('valueOf'),var.get('value'))):
                        return var.get('Buffer').callprop('from', var.get('valueOf'), var.get('encodingOrOffset'), var.get('length'))
                    var.put('b', var.get('fromObject')(var.get('value')))
                    if var.get('b'):
                        return var.get('b')
                    if ((PyJsStrictNeq(var.get('Symbol',throw=False).typeof(),Js('undefined')) and (var.get('Symbol').get('toPrimitive')!=var.get(u"null"))) and PyJsStrictEq(var.get('value').get(var.get('Symbol').get('toPrimitive')).typeof(),Js('function'))):
                        return var.get('Buffer').callprop('from', var.get('value').callprop(var.get('Symbol').get('toPrimitive'), Js('string')), var.get('encodingOrOffset'), var.get('length'))
                    PyJsTempException = JsToPyException(var.get('TypeError').create(((Js('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ')+Js('or Array-like Object. Received type '))+(Js('undefined') if PyJsStrictEq(var.get('value',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('value'))))))
                    raise PyJsTempException
                PyJsHoisted_from_.func_name = 'from'
                var.put('from', PyJsHoisted_from_)
                @Js
                def PyJsHoisted_assertSize_(size, this, arguments, var=var):
                    var = Scope({'size':size, 'this':this, 'arguments':arguments}, var)
                    var.registers(['size'])
                    if PyJsStrictNeq(var.get('size',throw=False).typeof(),Js('number')):
                        PyJsTempException = JsToPyException(var.get('TypeError').create(Js('"size" argument must be of type number')))
                        raise PyJsTempException
                    else:
                        if (var.get('size')<Js(0.0)):
                            PyJsTempException = JsToPyException(var.get('RangeError').create(((Js('The value "')+var.get('size'))+Js('" is invalid for option "size"'))))
                            raise PyJsTempException
                PyJsHoisted_assertSize_.func_name = 'assertSize'
                var.put('assertSize', PyJsHoisted_assertSize_)
                @Js
                def PyJsHoisted_alloc_(size, fill, encoding, this, arguments, var=var):
                    var = Scope({'size':size, 'fill':fill, 'encoding':encoding, 'this':this, 'arguments':arguments}, var)
                    var.registers(['encoding', 'size', 'fill'])
                    var.get('assertSize')(var.get('size'))
                    if (var.get('size')<=Js(0.0)):
                        return var.get('createBuffer')(var.get('size'))
                    if PyJsStrictNeq(var.get('fill'),var.get('undefined')):
                        return (var.get('createBuffer')(var.get('size')).callprop('fill', var.get('fill'), var.get('encoding')) if PyJsStrictEq(var.get('encoding',throw=False).typeof(),Js('string')) else var.get('createBuffer')(var.get('size')).callprop('fill', var.get('fill')))
                    return var.get('createBuffer')(var.get('size'))
                PyJsHoisted_alloc_.func_name = 'alloc'
                var.put('alloc', PyJsHoisted_alloc_)
                @Js
                def PyJsHoisted_allocUnsafe_(size, this, arguments, var=var):
                    var = Scope({'size':size, 'this':this, 'arguments':arguments}, var)
                    var.registers(['size'])
                    var.get('assertSize')(var.get('size'))
                    return var.get('createBuffer')((Js(0.0) if (var.get('size')<Js(0.0)) else (var.get('checked')(var.get('size'))|Js(0.0))))
                PyJsHoisted_allocUnsafe_.func_name = 'allocUnsafe'
                var.put('allocUnsafe', PyJsHoisted_allocUnsafe_)
                @Js
                def PyJsHoisted_fromString_(string, encoding, this, arguments, var=var):
                    var = Scope({'string':string, 'encoding':encoding, 'this':this, 'arguments':arguments}, var)
                    var.registers(['buf', 'encoding', 'length', 'string', 'actual'])
                    if (PyJsStrictNeq(var.get('encoding',throw=False).typeof(),Js('string')) or PyJsStrictEq(var.get('encoding'),Js(''))):
                        var.put('encoding', Js('utf8'))
                    if var.get('Buffer').callprop('isEncoding', var.get('encoding')).neg():
                        PyJsTempException = JsToPyException(var.get('TypeError').create((Js('Unknown encoding: ')+var.get('encoding'))))
                        raise PyJsTempException
                    var.put('length', (var.get('byteLength')(var.get('string'), var.get('encoding'))|Js(0.0)))
                    var.put('buf', var.get('createBuffer')(var.get('length')))
                    var.put('actual', var.get('buf').callprop('write', var.get('string'), var.get('encoding')))
                    if PyJsStrictNeq(var.get('actual'),var.get('length')):
                        var.put('buf', var.get('buf').callprop('slice', Js(0.0), var.get('actual')))
                    return var.get('buf')
                PyJsHoisted_fromString_.func_name = 'fromString'
                var.put('fromString', PyJsHoisted_fromString_)
                @Js
                def PyJsHoisted_fromArrayLike_(array, this, arguments, var=var):
                    var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
                    var.registers(['array', 'length', 'buf', 'i'])
                    var.put('length', (Js(0.0) if (var.get('array').get('length')<Js(0.0)) else (var.get('checked')(var.get('array').get('length'))|Js(0.0))))
                    var.put('buf', var.get('createBuffer')(var.get('length')))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('length')):
                        try:
                            var.get('buf').put(var.get('i'), (var.get('array').get(var.get('i'))&Js(255.0)))
                        finally:
                                var.put('i', Js(1.0), '+')
                    return var.get('buf')
                PyJsHoisted_fromArrayLike_.func_name = 'fromArrayLike'
                var.put('fromArrayLike', PyJsHoisted_fromArrayLike_)
                @Js
                def PyJsHoisted_fromArrayBuffer_(array, byteOffset, length, this, arguments, var=var):
                    var = Scope({'array':array, 'byteOffset':byteOffset, 'length':length, 'this':this, 'arguments':arguments}, var)
                    var.registers(['length', 'buf', 'array', 'byteOffset'])
                    if ((var.get('byteOffset')<Js(0.0)) or (var.get('array').get('byteLength')<var.get('byteOffset'))):
                        PyJsTempException = JsToPyException(var.get('RangeError').create(Js('"offset" is outside of buffer bounds')))
                        raise PyJsTempException
                    if (var.get('array').get('byteLength')<(var.get('byteOffset')+(var.get('length') or Js(0.0)))):
                        PyJsTempException = JsToPyException(var.get('RangeError').create(Js('"length" is outside of buffer bounds')))
                        raise PyJsTempException
                    pass
                    if (PyJsStrictEq(var.get('byteOffset'),var.get('undefined')) and PyJsStrictEq(var.get('length'),var.get('undefined'))):
                        var.put('buf', var.get('Uint8Array').create(var.get('array')))
                    else:
                        if PyJsStrictEq(var.get('length'),var.get('undefined')):
                            var.put('buf', var.get('Uint8Array').create(var.get('array'), var.get('byteOffset')))
                        else:
                            var.put('buf', var.get('Uint8Array').create(var.get('array'), var.get('byteOffset'), var.get('length')))
                    var.get('buf').put('__proto__', var.get('Buffer').get('prototype'))
                    return var.get('buf')
                PyJsHoisted_fromArrayBuffer_.func_name = 'fromArrayBuffer'
                var.put('fromArrayBuffer', PyJsHoisted_fromArrayBuffer_)
                @Js
                def PyJsHoisted_fromObject_(obj, this, arguments, var=var):
                    var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
                    var.registers(['len', 'buf', 'obj'])
                    if var.get('Buffer').callprop('isBuffer', var.get('obj')):
                        var.put('len', (var.get('checked')(var.get('obj').get('length'))|Js(0.0)))
                        var.put('buf', var.get('createBuffer')(var.get('len')))
                        if PyJsStrictEq(var.get('buf').get('length'),Js(0.0)):
                            return var.get('buf')
                        var.get('obj').callprop('copy', var.get('buf'), Js(0.0), Js(0.0), var.get('len'))
                        return var.get('buf')
                    if PyJsStrictNeq(var.get('obj').get('length'),var.get('undefined')):
                        if (PyJsStrictNeq(var.get('obj').get('length').typeof(),Js('number')) or var.get('numberIsNaN')(var.get('obj').get('length'))):
                            return var.get('createBuffer')(Js(0.0))
                        return var.get('fromArrayLike')(var.get('obj'))
                    if (PyJsStrictEq(var.get('obj').get('type'),Js('Buffer')) and var.get('Array').callprop('isArray', var.get('obj').get('data'))):
                        return var.get('fromArrayLike')(var.get('obj').get('data'))
                PyJsHoisted_fromObject_.func_name = 'fromObject'
                var.put('fromObject', PyJsHoisted_fromObject_)
                @Js
                def PyJsHoisted_checked_(length, this, arguments, var=var):
                    var = Scope({'length':length, 'this':this, 'arguments':arguments}, var)
                    var.registers(['length'])
                    if (var.get('length')>=var.get('K_MAX_LENGTH')):
                        PyJsTempException = JsToPyException(var.get('RangeError').create((((Js('Attempt to allocate Buffer larger than maximum ')+Js('size: 0x'))+var.get('K_MAX_LENGTH').callprop('toString', Js(16.0)))+Js(' bytes'))))
                        raise PyJsTempException
                    return (var.get('length')|Js(0.0))
                PyJsHoisted_checked_.func_name = 'checked'
                var.put('checked', PyJsHoisted_checked_)
                @Js
                def PyJsHoisted_SlowBuffer_(length, this, arguments, var=var):
                    var = Scope({'length':length, 'this':this, 'arguments':arguments}, var)
                    var.registers(['length'])
                    if ((+var.get('length'))!=var.get('length')):
                        var.put('length', Js(0.0))
                    return var.get('Buffer').callprop('alloc', (+var.get('length')))
                PyJsHoisted_SlowBuffer_.func_name = 'SlowBuffer'
                var.put('SlowBuffer', PyJsHoisted_SlowBuffer_)
                @Js
                def PyJsHoisted_byteLength_(string, encoding, this, arguments, var=var):
                    var = Scope({'string':string, 'encoding':encoding, 'this':this, 'arguments':arguments}, var)
                    var.registers(['len', 'mustMatch', 'encoding', 'string', 'loweredCase'])
                    if var.get('Buffer').callprop('isBuffer', var.get('string')):
                        return var.get('string').get('length')
                    if (var.get('ArrayBuffer').callprop('isView', var.get('string')) or var.get('isInstance')(var.get('string'), var.get('ArrayBuffer'))):
                        return var.get('string').get('byteLength')
                    if PyJsStrictNeq(var.get('string',throw=False).typeof(),Js('string')):
                        PyJsTempException = JsToPyException(var.get('TypeError').create(((Js('The "string" argument must be one of type string, Buffer, or ArrayBuffer. ')+Js('Received type '))+(Js('undefined') if PyJsStrictEq(var.get('string',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('string'))))))
                        raise PyJsTempException
                    var.put('len', var.get('string').get('length'))
                    var.put('mustMatch', ((var.get('arguments').get('length')>Js(2.0)) and PyJsStrictEq(var.get('arguments').get('2'),Js(True))))
                    if (var.get('mustMatch').neg() and PyJsStrictEq(var.get('len'),Js(0.0))):
                        return Js(0.0)
                    var.put('loweredCase', Js(False))
                    #for JS loop
                    
                    while 1:
                        while 1:
                            SWITCHED = False
                            CONDITION = (var.get('encoding'))
                            if SWITCHED or PyJsStrictEq(CONDITION, Js('ascii')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, Js('latin1')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, Js('binary')):
                                SWITCHED = True
                                return var.get('len')
                            if SWITCHED or PyJsStrictEq(CONDITION, Js('utf8')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, Js('utf-8')):
                                SWITCHED = True
                                return var.get('utf8ToBytes')(var.get('string')).get('length')
                            if SWITCHED or PyJsStrictEq(CONDITION, Js('ucs2')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, Js('ucs-2')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, Js('utf16le')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, Js('utf-16le')):
                                SWITCHED = True
                                return (var.get('len')*Js(2.0))
                            if SWITCHED or PyJsStrictEq(CONDITION, Js('hex')):
                                SWITCHED = True
                                return PyJsBshift(var.get('len'),Js(1.0))
                            if SWITCHED or PyJsStrictEq(CONDITION, Js('base64')):
                                SWITCHED = True
                                return var.get('base64ToBytes')(var.get('string')).get('length')
                            if True:
                                SWITCHED = True
                                if var.get('loweredCase'):
                                    return ((-Js(1.0)) if var.get('mustMatch') else var.get('utf8ToBytes')(var.get('string')).get('length'))
                                var.put('encoding', (Js('')+var.get('encoding')).callprop('toLowerCase'))
                                var.put('loweredCase', Js(True))
                            SWITCHED = True
                            break
                    
                PyJsHoisted_byteLength_.func_name = 'byteLength'
                var.put('byteLength', PyJsHoisted_byteLength_)
                @Js
                def PyJsHoisted_slowToString_(encoding, start, end, this, arguments, var=var):
                    var = Scope({'encoding':encoding, 'start':start, 'end':end, 'this':this, 'arguments':arguments}, var)
                    var.registers(['end', 'loweredCase', 'encoding', 'start'])
                    var.put('loweredCase', Js(False))
                    if (PyJsStrictEq(var.get('start'),var.get('undefined')) or (var.get('start')<Js(0.0))):
                        var.put('start', Js(0.0))
                    if (var.get('start')>var.get(u"this").get('length')):
                        return Js('')
                    if (PyJsStrictEq(var.get('end'),var.get('undefined')) or (var.get('end')>var.get(u"this").get('length'))):
                        var.put('end', var.get(u"this").get('length'))
                    if (var.get('end')<=Js(0.0)):
                        return Js('')
                    var.put('end', Js(0.0), '>>>')
                    var.put('start', Js(0.0), '>>>')
                    if (var.get('end')<=var.get('start')):
                        return Js('')
                    if var.get('encoding').neg():
                        var.put('encoding', Js('utf8'))
                    while Js(True):
                        while 1:
                            SWITCHED = False
                            CONDITION = (var.get('encoding'))
                            if SWITCHED or PyJsStrictEq(CONDITION, Js('hex')):
                                SWITCHED = True
                                return var.get('hexSlice')(var.get(u"this"), var.get('start'), var.get('end'))
                            if SWITCHED or PyJsStrictEq(CONDITION, Js('utf8')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, Js('utf-8')):
                                SWITCHED = True
                                return var.get('utf8Slice')(var.get(u"this"), var.get('start'), var.get('end'))
                            if SWITCHED or PyJsStrictEq(CONDITION, Js('ascii')):
                                SWITCHED = True
                                return var.get('asciiSlice')(var.get(u"this"), var.get('start'), var.get('end'))
                            if SWITCHED or PyJsStrictEq(CONDITION, Js('latin1')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, Js('binary')):
                                SWITCHED = True
                                return var.get('latin1Slice')(var.get(u"this"), var.get('start'), var.get('end'))
                            if SWITCHED or PyJsStrictEq(CONDITION, Js('base64')):
                                SWITCHED = True
                                return var.get('base64Slice')(var.get(u"this"), var.get('start'), var.get('end'))
                            if SWITCHED or PyJsStrictEq(CONDITION, Js('ucs2')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, Js('ucs-2')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, Js('utf16le')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, Js('utf-16le')):
                                SWITCHED = True
                                return var.get('utf16leSlice')(var.get(u"this"), var.get('start'), var.get('end'))
                            if True:
                                SWITCHED = True
                                if var.get('loweredCase'):
                                    PyJsTempException = JsToPyException(var.get('TypeError').create((Js('Unknown encoding: ')+var.get('encoding'))))
                                    raise PyJsTempException
                                var.put('encoding', (var.get('encoding')+Js('')).callprop('toLowerCase'))
                                var.put('loweredCase', Js(True))
                            SWITCHED = True
                            break
                PyJsHoisted_slowToString_.func_name = 'slowToString'
                var.put('slowToString', PyJsHoisted_slowToString_)
                @Js
                def PyJsHoisted_swap_(b, n, m, this, arguments, var=var):
                    var = Scope({'b':b, 'n':n, 'm':m, 'this':this, 'arguments':arguments}, var)
                    var.registers(['n', 'i', 'b', 'm'])
                    var.put('i', var.get('b').get(var.get('n')))
                    var.get('b').put(var.get('n'), var.get('b').get(var.get('m')))
                    var.get('b').put(var.get('m'), var.get('i'))
                PyJsHoisted_swap_.func_name = 'swap'
                var.put('swap', PyJsHoisted_swap_)
                @Js
                def PyJsHoisted_bidirectionalIndexOf_(buffer, val, byteOffset, encoding, dir, this, arguments, var=var):
                    var = Scope({'buffer':buffer, 'val':val, 'byteOffset':byteOffset, 'encoding':encoding, 'dir':dir, 'this':this, 'arguments':arguments}, var)
                    var.registers(['byteOffset', 'val', 'buffer', 'dir', 'encoding'])
                    if PyJsStrictEq(var.get('buffer').get('length'),Js(0.0)):
                        return (-Js(1.0))
                    if PyJsStrictEq(var.get('byteOffset',throw=False).typeof(),Js('string')):
                        var.put('encoding', var.get('byteOffset'))
                        var.put('byteOffset', Js(0.0))
                    else:
                        if (var.get('byteOffset')>Js(2147483647)):
                            var.put('byteOffset', Js(2147483647))
                        else:
                            if (var.get('byteOffset')<(-Js(2147483648))):
                                var.put('byteOffset', (-Js(2147483648)))
                    var.put('byteOffset', (+var.get('byteOffset')))
                    if var.get('numberIsNaN')(var.get('byteOffset')):
                        var.put('byteOffset', (Js(0.0) if var.get('dir') else (var.get('buffer').get('length')-Js(1.0))))
                    if (var.get('byteOffset')<Js(0.0)):
                        var.put('byteOffset', (var.get('buffer').get('length')+var.get('byteOffset')))
                    if (var.get('byteOffset')>=var.get('buffer').get('length')):
                        if var.get('dir'):
                            return (-Js(1.0))
                        else:
                            var.put('byteOffset', (var.get('buffer').get('length')-Js(1.0)))
                    else:
                        if (var.get('byteOffset')<Js(0.0)):
                            if var.get('dir'):
                                var.put('byteOffset', Js(0.0))
                            else:
                                return (-Js(1.0))
                    if PyJsStrictEq(var.get('val',throw=False).typeof(),Js('string')):
                        var.put('val', var.get('Buffer').callprop('from', var.get('val'), var.get('encoding')))
                    if var.get('Buffer').callprop('isBuffer', var.get('val')):
                        if PyJsStrictEq(var.get('val').get('length'),Js(0.0)):
                            return (-Js(1.0))
                        return var.get('arrayIndexOf')(var.get('buffer'), var.get('val'), var.get('byteOffset'), var.get('encoding'), var.get('dir'))
                    else:
                        if PyJsStrictEq(var.get('val',throw=False).typeof(),Js('number')):
                            var.put('val', (var.get('val')&Js(255)))
                            if PyJsStrictEq(var.get('Uint8Array').get('prototype').get('indexOf').typeof(),Js('function')):
                                if var.get('dir'):
                                    return var.get('Uint8Array').get('prototype').get('indexOf').callprop('call', var.get('buffer'), var.get('val'), var.get('byteOffset'))
                                else:
                                    return var.get('Uint8Array').get('prototype').get('lastIndexOf').callprop('call', var.get('buffer'), var.get('val'), var.get('byteOffset'))
                            return var.get('arrayIndexOf')(var.get('buffer'), Js([var.get('val')]), var.get('byteOffset'), var.get('encoding'), var.get('dir'))
                    PyJsTempException = JsToPyException(var.get('TypeError').create(Js('val must be string, number or Buffer')))
                    raise PyJsTempException
                PyJsHoisted_bidirectionalIndexOf_.func_name = 'bidirectionalIndexOf'
                var.put('bidirectionalIndexOf', PyJsHoisted_bidirectionalIndexOf_)
                @Js
                def PyJsHoisted_arrayIndexOf_(arr, val, byteOffset, encoding, dir, this, arguments, var=var):
                    var = Scope({'arr':arr, 'val':val, 'byteOffset':byteOffset, 'encoding':encoding, 'dir':dir, 'this':this, 'arguments':arguments}, var)
                    var.registers(['found', 'arr', 'indexSize', 'byteOffset', 'i', 'val', 'dir', 'arrLength', 'encoding', 'valLength', 'foundIndex', 'read', 'j'])
                    @Js
                    def PyJsHoisted_read_(buf, i, this, arguments, var=var):
                        var = Scope({'buf':buf, 'i':i, 'this':this, 'arguments':arguments}, var)
                        var.registers(['buf', 'i'])
                        if PyJsStrictEq(var.get('indexSize'),Js(1.0)):
                            return var.get('buf').get(var.get('i'))
                        else:
                            return var.get('buf').callprop('readUInt16BE', (var.get('i')*var.get('indexSize')))
                    PyJsHoisted_read_.func_name = 'read'
                    var.put('read', PyJsHoisted_read_)
                    var.put('indexSize', Js(1.0))
                    var.put('arrLength', var.get('arr').get('length'))
                    var.put('valLength', var.get('val').get('length'))
                    if PyJsStrictNeq(var.get('encoding'),var.get('undefined')):
                        var.put('encoding', var.get('String')(var.get('encoding')).callprop('toLowerCase'))
                        if (((PyJsStrictEq(var.get('encoding'),Js('ucs2')) or PyJsStrictEq(var.get('encoding'),Js('ucs-2'))) or PyJsStrictEq(var.get('encoding'),Js('utf16le'))) or PyJsStrictEq(var.get('encoding'),Js('utf-16le'))):
                            if ((var.get('arr').get('length')<Js(2.0)) or (var.get('val').get('length')<Js(2.0))):
                                return (-Js(1.0))
                            var.put('indexSize', Js(2.0))
                            var.put('arrLength', Js(2.0), '/')
                            var.put('valLength', Js(2.0), '/')
                            var.put('byteOffset', Js(2.0), '/')
                    pass
                    pass
                    if var.get('dir'):
                        var.put('foundIndex', (-Js(1.0)))
                        #for JS loop
                        var.put('i', var.get('byteOffset'))
                        while (var.get('i')<var.get('arrLength')):
                            try:
                                if PyJsStrictEq(var.get('read')(var.get('arr'), var.get('i')),var.get('read')(var.get('val'), (Js(0.0) if PyJsStrictEq(var.get('foundIndex'),(-Js(1.0))) else (var.get('i')-var.get('foundIndex'))))):
                                    if PyJsStrictEq(var.get('foundIndex'),(-Js(1.0))):
                                        var.put('foundIndex', var.get('i'))
                                    if PyJsStrictEq(((var.get('i')-var.get('foundIndex'))+Js(1.0)),var.get('valLength')):
                                        return (var.get('foundIndex')*var.get('indexSize'))
                                else:
                                    if PyJsStrictNeq(var.get('foundIndex'),(-Js(1.0))):
                                        var.put('i', (var.get('i')-var.get('foundIndex')), '-')
                                    var.put('foundIndex', (-Js(1.0)))
                            finally:
                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    else:
                        if ((var.get('byteOffset')+var.get('valLength'))>var.get('arrLength')):
                            var.put('byteOffset', (var.get('arrLength')-var.get('valLength')))
                        #for JS loop
                        var.put('i', var.get('byteOffset'))
                        while (var.get('i')>=Js(0.0)):
                            try:
                                var.put('found', Js(True))
                                #for JS loop
                                var.put('j', Js(0.0))
                                while (var.get('j')<var.get('valLength')):
                                    try:
                                        if PyJsStrictNeq(var.get('read')(var.get('arr'), (var.get('i')+var.get('j'))),var.get('read')(var.get('val'), var.get('j'))):
                                            var.put('found', Js(False))
                                            break
                                    finally:
                                            (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                                if var.get('found'):
                                    return var.get('i')
                            finally:
                                    (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
                    return (-Js(1.0))
                PyJsHoisted_arrayIndexOf_.func_name = 'arrayIndexOf'
                var.put('arrayIndexOf', PyJsHoisted_arrayIndexOf_)
                @Js
                def PyJsHoisted_hexWrite_(buf, string, offset, length, this, arguments, var=var):
                    var = Scope({'buf':buf, 'string':string, 'offset':offset, 'length':length, 'this':this, 'arguments':arguments}, var)
                    var.registers(['buf', 'i', 'parsed', 'strLen', 'string', 'length', 'remaining', 'offset'])
                    var.put('offset', (var.get('Number')(var.get('offset')) or Js(0.0)))
                    var.put('remaining', (var.get('buf').get('length')-var.get('offset')))
                    if var.get('length').neg():
                        var.put('length', var.get('remaining'))
                    else:
                        var.put('length', var.get('Number')(var.get('length')))
                        if (var.get('length')>var.get('remaining')):
                            var.put('length', var.get('remaining'))
                    var.put('strLen', var.get('string').get('length'))
                    if (var.get('length')>(var.get('strLen')/Js(2.0))):
                        var.put('length', (var.get('strLen')/Js(2.0)))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('length')):
                        try:
                            var.put('parsed', var.get('parseInt')(var.get('string').callprop('substr', (var.get('i')*Js(2.0)), Js(2.0)), Js(16.0)))
                            if var.get('numberIsNaN')(var.get('parsed')):
                                return var.get('i')
                            var.get('buf').put((var.get('offset')+var.get('i')), var.get('parsed'))
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    return var.get('i')
                PyJsHoisted_hexWrite_.func_name = 'hexWrite'
                var.put('hexWrite', PyJsHoisted_hexWrite_)
                @Js
                def PyJsHoisted_utf8Write_(buf, string, offset, length, this, arguments, var=var):
                    var = Scope({'buf':buf, 'string':string, 'offset':offset, 'length':length, 'this':this, 'arguments':arguments}, var)
                    var.registers(['length', 'buf', 'string', 'offset'])
                    return var.get('blitBuffer')(var.get('utf8ToBytes')(var.get('string'), (var.get('buf').get('length')-var.get('offset'))), var.get('buf'), var.get('offset'), var.get('length'))
                PyJsHoisted_utf8Write_.func_name = 'utf8Write'
                var.put('utf8Write', PyJsHoisted_utf8Write_)
                @Js
                def PyJsHoisted_asciiWrite_(buf, string, offset, length, this, arguments, var=var):
                    var = Scope({'buf':buf, 'string':string, 'offset':offset, 'length':length, 'this':this, 'arguments':arguments}, var)
                    var.registers(['length', 'buf', 'string', 'offset'])
                    return var.get('blitBuffer')(var.get('asciiToBytes')(var.get('string')), var.get('buf'), var.get('offset'), var.get('length'))
                PyJsHoisted_asciiWrite_.func_name = 'asciiWrite'
                var.put('asciiWrite', PyJsHoisted_asciiWrite_)
                @Js
                def PyJsHoisted_latin1Write_(buf, string, offset, length, this, arguments, var=var):
                    var = Scope({'buf':buf, 'string':string, 'offset':offset, 'length':length, 'this':this, 'arguments':arguments}, var)
                    var.registers(['length', 'buf', 'string', 'offset'])
                    return var.get('asciiWrite')(var.get('buf'), var.get('string'), var.get('offset'), var.get('length'))
                PyJsHoisted_latin1Write_.func_name = 'latin1Write'
                var.put('latin1Write', PyJsHoisted_latin1Write_)
                @Js
                def PyJsHoisted_base64Write_(buf, string, offset, length, this, arguments, var=var):
                    var = Scope({'buf':buf, 'string':string, 'offset':offset, 'length':length, 'this':this, 'arguments':arguments}, var)
                    var.registers(['length', 'buf', 'string', 'offset'])
                    return var.get('blitBuffer')(var.get('base64ToBytes')(var.get('string')), var.get('buf'), var.get('offset'), var.get('length'))
                PyJsHoisted_base64Write_.func_name = 'base64Write'
                var.put('base64Write', PyJsHoisted_base64Write_)
                @Js
                def PyJsHoisted_ucs2Write_(buf, string, offset, length, this, arguments, var=var):
                    var = Scope({'buf':buf, 'string':string, 'offset':offset, 'length':length, 'this':this, 'arguments':arguments}, var)
                    var.registers(['length', 'buf', 'string', 'offset'])
                    return var.get('blitBuffer')(var.get('utf16leToBytes')(var.get('string'), (var.get('buf').get('length')-var.get('offset'))), var.get('buf'), var.get('offset'), var.get('length'))
                PyJsHoisted_ucs2Write_.func_name = 'ucs2Write'
                var.put('ucs2Write', PyJsHoisted_ucs2Write_)
                @Js
                def PyJsHoisted_base64Slice_(buf, start, end, this, arguments, var=var):
                    var = Scope({'buf':buf, 'start':start, 'end':end, 'this':this, 'arguments':arguments}, var)
                    var.registers(['end', 'buf', 'start'])
                    if (PyJsStrictEq(var.get('start'),Js(0.0)) and PyJsStrictEq(var.get('end'),var.get('buf').get('length'))):
                        return var.get('base64').callprop('fromByteArray', var.get('buf'))
                    else:
                        return var.get('base64').callprop('fromByteArray', var.get('buf').callprop('slice', var.get('start'), var.get('end')))
                PyJsHoisted_base64Slice_.func_name = 'base64Slice'
                var.put('base64Slice', PyJsHoisted_base64Slice_)
                @Js
                def PyJsHoisted_utf8Slice_(buf, start, end, this, arguments, var=var):
                    var = Scope({'buf':buf, 'start':start, 'end':end, 'this':this, 'arguments':arguments}, var)
                    var.registers(['buf', 'i', 'start', 'tempCodePoint', 'end', 'codePoint', 'thirdByte', 'bytesPerSequence', 'fourthByte', 'res', 'firstByte', 'secondByte'])
                    var.put('end', var.get('Math').callprop('min', var.get('buf').get('length'), var.get('end')))
                    var.put('res', Js([]))
                    var.put('i', var.get('start'))
                    while (var.get('i')<var.get('end')):
                        var.put('firstByte', var.get('buf').get(var.get('i')))
                        var.put('codePoint', var.get(u"null"))
                        var.put('bytesPerSequence', (Js(4.0) if (var.get('firstByte')>Js(239)) else (Js(3.0) if (var.get('firstByte')>Js(223)) else (Js(2.0) if (var.get('firstByte')>Js(191)) else Js(1.0)))))
                        if ((var.get('i')+var.get('bytesPerSequence'))<=var.get('end')):
                            pass
                            while 1:
                                SWITCHED = False
                                CONDITION = (var.get('bytesPerSequence'))
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(1.0)):
                                    SWITCHED = True
                                    if (var.get('firstByte')<Js(128)):
                                        var.put('codePoint', var.get('firstByte'))
                                    break
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(2.0)):
                                    SWITCHED = True
                                    var.put('secondByte', var.get('buf').get((var.get('i')+Js(1.0))))
                                    if PyJsStrictEq((var.get('secondByte')&Js(192)),Js(128)):
                                        var.put('tempCodePoint', (((var.get('firstByte')&Js(31))<<Js(6))|(var.get('secondByte')&Js(63))))
                                        if (var.get('tempCodePoint')>Js(127)):
                                            var.put('codePoint', var.get('tempCodePoint'))
                                    break
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(3.0)):
                                    SWITCHED = True
                                    var.put('secondByte', var.get('buf').get((var.get('i')+Js(1.0))))
                                    var.put('thirdByte', var.get('buf').get((var.get('i')+Js(2.0))))
                                    if (PyJsStrictEq((var.get('secondByte')&Js(192)),Js(128)) and PyJsStrictEq((var.get('thirdByte')&Js(192)),Js(128))):
                                        var.put('tempCodePoint', ((((var.get('firstByte')&Js(15))<<Js(12))|((var.get('secondByte')&Js(63))<<Js(6)))|(var.get('thirdByte')&Js(63))))
                                        if ((var.get('tempCodePoint')>Js(2047)) and ((var.get('tempCodePoint')<Js(55296)) or (var.get('tempCodePoint')>Js(57343)))):
                                            var.put('codePoint', var.get('tempCodePoint'))
                                    break
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(4.0)):
                                    SWITCHED = True
                                    var.put('secondByte', var.get('buf').get((var.get('i')+Js(1.0))))
                                    var.put('thirdByte', var.get('buf').get((var.get('i')+Js(2.0))))
                                    var.put('fourthByte', var.get('buf').get((var.get('i')+Js(3.0))))
                                    if ((PyJsStrictEq((var.get('secondByte')&Js(192)),Js(128)) and PyJsStrictEq((var.get('thirdByte')&Js(192)),Js(128))) and PyJsStrictEq((var.get('fourthByte')&Js(192)),Js(128))):
                                        var.put('tempCodePoint', (((((var.get('firstByte')&Js(15))<<Js(18))|((var.get('secondByte')&Js(63))<<Js(12)))|((var.get('thirdByte')&Js(63))<<Js(6)))|(var.get('fourthByte')&Js(63))))
                                        if ((var.get('tempCodePoint')>Js(65535)) and (var.get('tempCodePoint')<Js(1114112))):
                                            var.put('codePoint', var.get('tempCodePoint'))
                                SWITCHED = True
                                break
                        if PyJsStrictEq(var.get('codePoint'),var.get(u"null")):
                            var.put('codePoint', Js(65533))
                            var.put('bytesPerSequence', Js(1.0))
                        else:
                            if (var.get('codePoint')>Js(65535)):
                                var.put('codePoint', Js(65536), '-')
                                var.get('res').callprop('push', ((PyJsBshift(var.get('codePoint'),Js(10.0))&Js(1023))|Js(55296)))
                                var.put('codePoint', (Js(56320)|(var.get('codePoint')&Js(1023))))
                        var.get('res').callprop('push', var.get('codePoint'))
                        var.put('i', var.get('bytesPerSequence'), '+')
                    return var.get('decodeCodePointsArray')(var.get('res'))
                PyJsHoisted_utf8Slice_.func_name = 'utf8Slice'
                var.put('utf8Slice', PyJsHoisted_utf8Slice_)
                @Js
                def PyJsHoisted_decodeCodePointsArray_(codePoints, this, arguments, var=var):
                    var = Scope({'codePoints':codePoints, 'this':this, 'arguments':arguments}, var)
                    var.registers(['len', 'codePoints', 'res', 'i'])
                    var.put('len', var.get('codePoints').get('length'))
                    if (var.get('len')<=var.get('MAX_ARGUMENTS_LENGTH')):
                        return var.get('String').get('fromCharCode').callprop('apply', var.get('String'), var.get('codePoints'))
                    var.put('res', Js(''))
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('len')):
                        var.put('res', var.get('String').get('fromCharCode').callprop('apply', var.get('String'), var.get('codePoints').callprop('slice', var.get('i'), var.put('i', var.get('MAX_ARGUMENTS_LENGTH'), '+'))), '+')
                    return var.get('res')
                PyJsHoisted_decodeCodePointsArray_.func_name = 'decodeCodePointsArray'
                var.put('decodeCodePointsArray', PyJsHoisted_decodeCodePointsArray_)
                @Js
                def PyJsHoisted_asciiSlice_(buf, start, end, this, arguments, var=var):
                    var = Scope({'buf':buf, 'start':start, 'end':end, 'this':this, 'arguments':arguments}, var)
                    var.registers(['buf', 'i', 'start', 'end', 'ret'])
                    var.put('ret', Js(''))
                    var.put('end', var.get('Math').callprop('min', var.get('buf').get('length'), var.get('end')))
                    #for JS loop
                    var.put('i', var.get('start'))
                    while (var.get('i')<var.get('end')):
                        try:
                            var.put('ret', var.get('String').callprop('fromCharCode', (var.get('buf').get(var.get('i'))&Js(127))), '+')
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    return var.get('ret')
                PyJsHoisted_asciiSlice_.func_name = 'asciiSlice'
                var.put('asciiSlice', PyJsHoisted_asciiSlice_)
                @Js
                def PyJsHoisted_latin1Slice_(buf, start, end, this, arguments, var=var):
                    var = Scope({'buf':buf, 'start':start, 'end':end, 'this':this, 'arguments':arguments}, var)
                    var.registers(['buf', 'i', 'start', 'end', 'ret'])
                    var.put('ret', Js(''))
                    var.put('end', var.get('Math').callprop('min', var.get('buf').get('length'), var.get('end')))
                    #for JS loop
                    var.put('i', var.get('start'))
                    while (var.get('i')<var.get('end')):
                        try:
                            var.put('ret', var.get('String').callprop('fromCharCode', var.get('buf').get(var.get('i'))), '+')
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    return var.get('ret')
                PyJsHoisted_latin1Slice_.func_name = 'latin1Slice'
                var.put('latin1Slice', PyJsHoisted_latin1Slice_)
                @Js
                def PyJsHoisted_hexSlice_(buf, start, end, this, arguments, var=var):
                    var = Scope({'buf':buf, 'start':start, 'end':end, 'this':this, 'arguments':arguments}, var)
                    var.registers(['len', 'buf', 'out', 'i', 'start', 'end'])
                    var.put('len', var.get('buf').get('length'))
                    if (var.get('start').neg() or (var.get('start')<Js(0.0))):
                        var.put('start', Js(0.0))
                    if ((var.get('end').neg() or (var.get('end')<Js(0.0))) or (var.get('end')>var.get('len'))):
                        var.put('end', var.get('len'))
                    var.put('out', Js(''))
                    #for JS loop
                    var.put('i', var.get('start'))
                    while (var.get('i')<var.get('end')):
                        try:
                            var.put('out', var.get('toHex')(var.get('buf').get(var.get('i'))), '+')
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    return var.get('out')
                PyJsHoisted_hexSlice_.func_name = 'hexSlice'
                var.put('hexSlice', PyJsHoisted_hexSlice_)
                @Js
                def PyJsHoisted_utf16leSlice_(buf, start, end, this, arguments, var=var):
                    var = Scope({'buf':buf, 'start':start, 'end':end, 'this':this, 'arguments':arguments}, var)
                    var.registers(['buf', 'i', 'start', 'bytes', 'end', 'res'])
                    var.put('bytes', var.get('buf').callprop('slice', var.get('start'), var.get('end')))
                    var.put('res', Js(''))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('bytes').get('length')):
                        try:
                            var.put('res', var.get('String').callprop('fromCharCode', (var.get('bytes').get(var.get('i'))+(var.get('bytes').get((var.get('i')+Js(1.0)))*Js(256.0)))), '+')
                        finally:
                                var.put('i', Js(2.0), '+')
                    return var.get('res')
                PyJsHoisted_utf16leSlice_.func_name = 'utf16leSlice'
                var.put('utf16leSlice', PyJsHoisted_utf16leSlice_)
                @Js
                def PyJsHoisted_checkOffset_(offset, ext, length, this, arguments, var=var):
                    var = Scope({'offset':offset, 'ext':ext, 'length':length, 'this':this, 'arguments':arguments}, var)
                    var.registers(['ext', 'length', 'offset'])
                    if (PyJsStrictNeq((var.get('offset')%Js(1.0)),Js(0.0)) or (var.get('offset')<Js(0.0))):
                        PyJsTempException = JsToPyException(var.get('RangeError').create(Js('offset is not uint')))
                        raise PyJsTempException
                    if ((var.get('offset')+var.get('ext'))>var.get('length')):
                        PyJsTempException = JsToPyException(var.get('RangeError').create(Js('Trying to access beyond buffer length')))
                        raise PyJsTempException
                PyJsHoisted_checkOffset_.func_name = 'checkOffset'
                var.put('checkOffset', PyJsHoisted_checkOffset_)
                @Js
                def PyJsHoisted_checkInt_(buf, value, offset, ext, max, min, this, arguments, var=var):
                    var = Scope({'buf':buf, 'value':value, 'offset':offset, 'ext':ext, 'max':max, 'min':min, 'this':this, 'arguments':arguments}, var)
                    var.registers(['ext', 'buf', 'max', 'min', 'offset', 'value'])
                    if var.get('Buffer').callprop('isBuffer', var.get('buf')).neg():
                        PyJsTempException = JsToPyException(var.get('TypeError').create(Js('"buffer" argument must be a Buffer instance')))
                        raise PyJsTempException
                    if ((var.get('value')>var.get('max')) or (var.get('value')<var.get('min'))):
                        PyJsTempException = JsToPyException(var.get('RangeError').create(Js('"value" argument is out of bounds')))
                        raise PyJsTempException
                    if ((var.get('offset')+var.get('ext'))>var.get('buf').get('length')):
                        PyJsTempException = JsToPyException(var.get('RangeError').create(Js('Index out of range')))
                        raise PyJsTempException
                PyJsHoisted_checkInt_.func_name = 'checkInt'
                var.put('checkInt', PyJsHoisted_checkInt_)
                @Js
                def PyJsHoisted_checkIEEE754_(buf, value, offset, ext, max, min, this, arguments, var=var):
                    var = Scope({'buf':buf, 'value':value, 'offset':offset, 'ext':ext, 'max':max, 'min':min, 'this':this, 'arguments':arguments}, var)
                    var.registers(['ext', 'buf', 'max', 'min', 'offset', 'value'])
                    if ((var.get('offset')+var.get('ext'))>var.get('buf').get('length')):
                        PyJsTempException = JsToPyException(var.get('RangeError').create(Js('Index out of range')))
                        raise PyJsTempException
                    if (var.get('offset')<Js(0.0)):
                        PyJsTempException = JsToPyException(var.get('RangeError').create(Js('Index out of range')))
                        raise PyJsTempException
                PyJsHoisted_checkIEEE754_.func_name = 'checkIEEE754'
                var.put('checkIEEE754', PyJsHoisted_checkIEEE754_)
                @Js
                def PyJsHoisted_writeFloat_(buf, value, offset, littleEndian, noAssert, this, arguments, var=var):
                    var = Scope({'buf':buf, 'value':value, 'offset':offset, 'littleEndian':littleEndian, 'noAssert':noAssert, 'this':this, 'arguments':arguments}, var)
                    var.registers(['buf', 'littleEndian', 'noAssert', 'offset', 'value'])
                    var.put('value', (+var.get('value')))
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkIEEE754')(var.get('buf'), var.get('value'), var.get('offset'), Js(4.0), Js(3.4028234663852886e+38), (-Js(3.4028234663852886e+38)))
                    var.get('ieee754').callprop('write', var.get('buf'), var.get('value'), var.get('offset'), var.get('littleEndian'), Js(23.0), Js(4.0))
                    return (var.get('offset')+Js(4.0))
                PyJsHoisted_writeFloat_.func_name = 'writeFloat'
                var.put('writeFloat', PyJsHoisted_writeFloat_)
                @Js
                def PyJsHoisted_writeDouble_(buf, value, offset, littleEndian, noAssert, this, arguments, var=var):
                    var = Scope({'buf':buf, 'value':value, 'offset':offset, 'littleEndian':littleEndian, 'noAssert':noAssert, 'this':this, 'arguments':arguments}, var)
                    var.registers(['buf', 'littleEndian', 'noAssert', 'offset', 'value'])
                    var.put('value', (+var.get('value')))
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkIEEE754')(var.get('buf'), var.get('value'), var.get('offset'), Js(8.0), Js(1.7976931348623157e+308), (-Js(1.7976931348623157e+308)))
                    var.get('ieee754').callprop('write', var.get('buf'), var.get('value'), var.get('offset'), var.get('littleEndian'), Js(52.0), Js(8.0))
                    return (var.get('offset')+Js(8.0))
                PyJsHoisted_writeDouble_.func_name = 'writeDouble'
                var.put('writeDouble', PyJsHoisted_writeDouble_)
                @Js
                def PyJsHoisted_base64clean_(str, this, arguments, var=var):
                    var = Scope({'str':str, 'this':this, 'arguments':arguments}, var)
                    var.registers(['str'])
                    var.put('str', var.get('str').callprop('split', Js('=')).get('0'))
                    var.put('str', var.get('str').callprop('trim').callprop('replace', var.get('INVALID_BASE64_RE'), Js('')))
                    if (var.get('str').get('length')<Js(2.0)):
                        return Js('')
                    while PyJsStrictNeq((var.get('str').get('length')%Js(4.0)),Js(0.0)):
                        var.put('str', (var.get('str')+Js('=')))
                    return var.get('str')
                PyJsHoisted_base64clean_.func_name = 'base64clean'
                var.put('base64clean', PyJsHoisted_base64clean_)
                @Js
                def PyJsHoisted_toHex_(n, this, arguments, var=var):
                    var = Scope({'n':n, 'this':this, 'arguments':arguments}, var)
                    var.registers(['n'])
                    if (var.get('n')<Js(16.0)):
                        return (Js('0')+var.get('n').callprop('toString', Js(16.0)))
                    return var.get('n').callprop('toString', Js(16.0))
                PyJsHoisted_toHex_.func_name = 'toHex'
                var.put('toHex', PyJsHoisted_toHex_)
                @Js
                def PyJsHoisted_utf8ToBytes_(string, units, this, arguments, var=var):
                    var = Scope({'string':string, 'units':units, 'this':this, 'arguments':arguments}, var)
                    var.registers(['i', 'bytes', 'codePoint', 'length', 'string', 'units', 'leadSurrogate'])
                    var.put('units', (var.get('units') or var.get('Infinity')))
                    pass
                    var.put('length', var.get('string').get('length'))
                    var.put('leadSurrogate', var.get(u"null"))
                    var.put('bytes', Js([]))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('length')):
                        try:
                            var.put('codePoint', var.get('string').callprop('charCodeAt', var.get('i')))
                            if ((var.get('codePoint')>Js(55295)) and (var.get('codePoint')<Js(57344))):
                                if var.get('leadSurrogate').neg():
                                    if (var.get('codePoint')>Js(56319)):
                                        if (var.put('units', Js(3.0), '-')>(-Js(1.0))):
                                            var.get('bytes').callprop('push', Js(239), Js(191), Js(189))
                                        continue
                                    else:
                                        if PyJsStrictEq((var.get('i')+Js(1.0)),var.get('length')):
                                            if (var.put('units', Js(3.0), '-')>(-Js(1.0))):
                                                var.get('bytes').callprop('push', Js(239), Js(191), Js(189))
                                            continue
                                    var.put('leadSurrogate', var.get('codePoint'))
                                    continue
                                if (var.get('codePoint')<Js(56320)):
                                    if (var.put('units', Js(3.0), '-')>(-Js(1.0))):
                                        var.get('bytes').callprop('push', Js(239), Js(191), Js(189))
                                    var.put('leadSurrogate', var.get('codePoint'))
                                    continue
                                var.put('codePoint', ((((var.get('leadSurrogate')-Js(55296))<<Js(10.0))|(var.get('codePoint')-Js(56320)))+Js(65536)))
                            else:
                                if var.get('leadSurrogate'):
                                    if (var.put('units', Js(3.0), '-')>(-Js(1.0))):
                                        var.get('bytes').callprop('push', Js(239), Js(191), Js(189))
                            var.put('leadSurrogate', var.get(u"null"))
                            if (var.get('codePoint')<Js(128)):
                                if (var.put('units', Js(1.0), '-')<Js(0.0)):
                                    break
                                var.get('bytes').callprop('push', var.get('codePoint'))
                            else:
                                if (var.get('codePoint')<Js(2048)):
                                    if (var.put('units', Js(2.0), '-')<Js(0.0)):
                                        break
                                    var.get('bytes').callprop('push', ((var.get('codePoint')>>Js(6))|Js(192)), ((var.get('codePoint')&Js(63))|Js(128)))
                                else:
                                    if (var.get('codePoint')<Js(65536)):
                                        if (var.put('units', Js(3.0), '-')<Js(0.0)):
                                            break
                                        var.get('bytes').callprop('push', ((var.get('codePoint')>>Js(12))|Js(224)), (((var.get('codePoint')>>Js(6))&Js(63))|Js(128)), ((var.get('codePoint')&Js(63))|Js(128)))
                                    else:
                                        if (var.get('codePoint')<Js(1114112)):
                                            if (var.put('units', Js(4.0), '-')<Js(0.0)):
                                                break
                                            var.get('bytes').callprop('push', ((var.get('codePoint')>>Js(18))|Js(240)), (((var.get('codePoint')>>Js(12))&Js(63))|Js(128)), (((var.get('codePoint')>>Js(6))&Js(63))|Js(128)), ((var.get('codePoint')&Js(63))|Js(128)))
                                        else:
                                            PyJsTempException = JsToPyException(var.get('Error').create(Js('Invalid code point')))
                                            raise PyJsTempException
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    return var.get('bytes')
                PyJsHoisted_utf8ToBytes_.func_name = 'utf8ToBytes'
                var.put('utf8ToBytes', PyJsHoisted_utf8ToBytes_)
                @Js
                def PyJsHoisted_asciiToBytes_(str, this, arguments, var=var):
                    var = Scope({'str':str, 'this':this, 'arguments':arguments}, var)
                    var.registers(['str', 'i', 'byteArray'])
                    var.put('byteArray', Js([]))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('str').get('length')):
                        try:
                            var.get('byteArray').callprop('push', (var.get('str').callprop('charCodeAt', var.get('i'))&Js(255)))
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    return var.get('byteArray')
                PyJsHoisted_asciiToBytes_.func_name = 'asciiToBytes'
                var.put('asciiToBytes', PyJsHoisted_asciiToBytes_)
                @Js
                def PyJsHoisted_utf16leToBytes_(str, units, this, arguments, var=var):
                    var = Scope({'str':str, 'units':units, 'this':this, 'arguments':arguments}, var)
                    var.registers(['hi', 'i', 'byteArray', 'str', 'lo', 'units', 'c'])
                    pass
                    var.put('byteArray', Js([]))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('str').get('length')):
                        try:
                            if (var.put('units', Js(2.0), '-')<Js(0.0)):
                                break
                            var.put('c', var.get('str').callprop('charCodeAt', var.get('i')))
                            var.put('hi', (var.get('c')>>Js(8.0)))
                            var.put('lo', (var.get('c')%Js(256.0)))
                            var.get('byteArray').callprop('push', var.get('lo'))
                            var.get('byteArray').callprop('push', var.get('hi'))
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    return var.get('byteArray')
                PyJsHoisted_utf16leToBytes_.func_name = 'utf16leToBytes'
                var.put('utf16leToBytes', PyJsHoisted_utf16leToBytes_)
                @Js
                def PyJsHoisted_base64ToBytes_(str, this, arguments, var=var):
                    var = Scope({'str':str, 'this':this, 'arguments':arguments}, var)
                    var.registers(['str'])
                    return var.get('base64').callprop('toByteArray', var.get('base64clean')(var.get('str')))
                PyJsHoisted_base64ToBytes_.func_name = 'base64ToBytes'
                var.put('base64ToBytes', PyJsHoisted_base64ToBytes_)
                @Js
                def PyJsHoisted_blitBuffer_(src, dst, offset, length, this, arguments, var=var):
                    var = Scope({'src':src, 'dst':dst, 'offset':offset, 'length':length, 'this':this, 'arguments':arguments}, var)
                    var.registers(['dst', 'i', 'length', 'offset', 'src'])
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('length')):
                        try:
                            if (((var.get('i')+var.get('offset'))>=var.get('dst').get('length')) or (var.get('i')>=var.get('src').get('length'))):
                                break
                            var.get('dst').put((var.get('i')+var.get('offset')), var.get('src').get(var.get('i')))
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    return var.get('i')
                PyJsHoisted_blitBuffer_.func_name = 'blitBuffer'
                var.put('blitBuffer', PyJsHoisted_blitBuffer_)
                @Js
                def PyJsHoisted_isInstance_(obj, type, this, arguments, var=var):
                    var = Scope({'obj':obj, 'type':type, 'this':this, 'arguments':arguments}, var)
                    var.registers(['type', 'obj'])
                    return (var.get('obj').instanceof(var.get('type')) or ((((var.get('obj')!=var.get(u"null")) and (var.get('obj').get('constructor')!=var.get(u"null"))) and (var.get('obj').get('constructor').get('name')!=var.get(u"null"))) and PyJsStrictEq(var.get('obj').get('constructor').get('name'),var.get('type').get('name'))))
                PyJsHoisted_isInstance_.func_name = 'isInstance'
                var.put('isInstance', PyJsHoisted_isInstance_)
                @Js
                def PyJsHoisted_numberIsNaN_(obj, this, arguments, var=var):
                    var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
                    var.registers(['obj'])
                    return PyJsStrictNeq(var.get('obj'),var.get('obj'))
                PyJsHoisted_numberIsNaN_.func_name = 'numberIsNaN'
                var.put('numberIsNaN', PyJsHoisted_numberIsNaN_)
                Js('use strict')
                var.put('base64', var.get('require')(Js('base64-js')))
                var.put('ieee754', var.get('require')(Js('ieee754')))
                var.get('exports').put('Buffer', var.get('Buffer'))
                var.get('exports').put('SlowBuffer', var.get('SlowBuffer'))
                var.get('exports').put('INSPECT_MAX_BYTES', Js(50.0))
                var.put('K_MAX_LENGTH', Js(2147483647))
                var.get('exports').put('kMaxLength', var.get('K_MAX_LENGTH'))
                var.get('Buffer').put('TYPED_ARRAY_SUPPORT', var.get('typedArraySupport')())
                if ((var.get('Buffer').get('TYPED_ARRAY_SUPPORT').neg() and PyJsStrictNeq(var.get('console',throw=False).typeof(),Js('undefined'))) and PyJsStrictEq(var.get('console').get('error').typeof(),Js('function'))):
                    var.get('console').callprop('error', (Js('This browser lacks typed array (Uint8Array) support which is required by ')+Js('`buffer` v5.x. Use `buffer` v4.x if you require old browser support.')))
                pass
                @Js
                def PyJs_get_645_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_645_}, var)
                    var.registers([])
                    if var.get('Buffer').callprop('isBuffer', var.get(u"this")).neg():
                        return var.get('undefined')
                    return var.get(u"this").get('buffer')
                PyJs_get_645_._set_name('get')
                var.get('Object').callprop('defineProperty', var.get('Buffer').get('prototype'), Js('parent'), Js({'enumerable':Js(True),'get':PyJs_get_645_}))
                @Js
                def PyJs_get_646_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_646_}, var)
                    var.registers([])
                    if var.get('Buffer').callprop('isBuffer', var.get(u"this")).neg():
                        return var.get('undefined')
                    return var.get(u"this").get('byteOffset')
                PyJs_get_646_._set_name('get')
                var.get('Object').callprop('defineProperty', var.get('Buffer').get('prototype'), Js('offset'), Js({'enumerable':Js(True),'get':PyJs_get_646_}))
                pass
                pass
                if ((PyJsStrictNeq(var.get('Symbol',throw=False).typeof(),Js('undefined')) and (var.get('Symbol').get('species')!=var.get(u"null"))) and PyJsStrictEq(var.get('Buffer').get(var.get('Symbol').get('species')),var.get('Buffer'))):
                    var.get('Object').callprop('defineProperty', var.get('Buffer'), var.get('Symbol').get('species'), Js({'value':var.get(u"null"),'configurable':Js(True),'enumerable':Js(False),'writable':Js(False)}))
                var.get('Buffer').put('poolSize', Js(8192.0))
                pass
                @Js
                def PyJs_anonymous_647_(value, encodingOrOffset, length, this, arguments, var=var):
                    var = Scope({'value':value, 'encodingOrOffset':encodingOrOffset, 'length':length, 'this':this, 'arguments':arguments}, var)
                    var.registers(['length', 'value', 'encodingOrOffset'])
                    return var.get('from')(var.get('value'), var.get('encodingOrOffset'), var.get('length'))
                PyJs_anonymous_647_._set_name('anonymous')
                var.get('Buffer').put('from', PyJs_anonymous_647_)
                var.get('Buffer').get('prototype').put('__proto__', var.get('Uint8Array').get('prototype'))
                var.get('Buffer').put('__proto__', var.get('Uint8Array'))
                pass
                pass
                @Js
                def PyJs_anonymous_648_(size, fill, encoding, this, arguments, var=var):
                    var = Scope({'size':size, 'fill':fill, 'encoding':encoding, 'this':this, 'arguments':arguments}, var)
                    var.registers(['encoding', 'size', 'fill'])
                    return var.get('alloc')(var.get('size'), var.get('fill'), var.get('encoding'))
                PyJs_anonymous_648_._set_name('anonymous')
                var.get('Buffer').put('alloc', PyJs_anonymous_648_)
                pass
                @Js
                def PyJs_anonymous_649_(size, this, arguments, var=var):
                    var = Scope({'size':size, 'this':this, 'arguments':arguments}, var)
                    var.registers(['size'])
                    return var.get('allocUnsafe')(var.get('size'))
                PyJs_anonymous_649_._set_name('anonymous')
                var.get('Buffer').put('allocUnsafe', PyJs_anonymous_649_)
                @Js
                def PyJs_anonymous_650_(size, this, arguments, var=var):
                    var = Scope({'size':size, 'this':this, 'arguments':arguments}, var)
                    var.registers(['size'])
                    return var.get('allocUnsafe')(var.get('size'))
                PyJs_anonymous_650_._set_name('anonymous')
                var.get('Buffer').put('allocUnsafeSlow', PyJs_anonymous_650_)
                pass
                pass
                pass
                pass
                pass
                pass
                @Js
                def PyJs_isBuffer_651_(b, this, arguments, var=var):
                    var = Scope({'b':b, 'this':this, 'arguments':arguments, 'isBuffer':PyJs_isBuffer_651_}, var)
                    var.registers(['b'])
                    return (((var.get('b')!=var.get(u"null")) and PyJsStrictEq(var.get('b').get('_isBuffer'),Js(True))) and PyJsStrictNeq(var.get('b'),var.get('Buffer').get('prototype')))
                PyJs_isBuffer_651_._set_name('isBuffer')
                var.get('Buffer').put('isBuffer', PyJs_isBuffer_651_)
                @Js
                def PyJs_compare_652_(a, b, this, arguments, var=var):
                    var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments, 'compare':PyJs_compare_652_}, var)
                    var.registers(['y', 'len', 'x', 'i', 'b', 'a'])
                    if var.get('isInstance')(var.get('a'), var.get('Uint8Array')):
                        var.put('a', var.get('Buffer').callprop('from', var.get('a'), var.get('a').get('offset'), var.get('a').get('byteLength')))
                    if var.get('isInstance')(var.get('b'), var.get('Uint8Array')):
                        var.put('b', var.get('Buffer').callprop('from', var.get('b'), var.get('b').get('offset'), var.get('b').get('byteLength')))
                    if (var.get('Buffer').callprop('isBuffer', var.get('a')).neg() or var.get('Buffer').callprop('isBuffer', var.get('b')).neg()):
                        PyJsTempException = JsToPyException(var.get('TypeError').create(Js('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array')))
                        raise PyJsTempException
                    if PyJsStrictEq(var.get('a'),var.get('b')):
                        return Js(0.0)
                    var.put('x', var.get('a').get('length'))
                    var.put('y', var.get('b').get('length'))
                    #for JS loop
                    var.put('i', Js(0.0))
                    var.put('len', var.get('Math').callprop('min', var.get('x'), var.get('y')))
                    while (var.get('i')<var.get('len')):
                        try:
                            if PyJsStrictNeq(var.get('a').get(var.get('i')),var.get('b').get(var.get('i'))):
                                var.put('x', var.get('a').get(var.get('i')))
                                var.put('y', var.get('b').get(var.get('i')))
                                break
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    if (var.get('x')<var.get('y')):
                        return (-Js(1.0))
                    if (var.get('y')<var.get('x')):
                        return Js(1.0)
                    return Js(0.0)
                PyJs_compare_652_._set_name('compare')
                var.get('Buffer').put('compare', PyJs_compare_652_)
                @Js
                def PyJs_isEncoding_653_(encoding, this, arguments, var=var):
                    var = Scope({'encoding':encoding, 'this':this, 'arguments':arguments, 'isEncoding':PyJs_isEncoding_653_}, var)
                    var.registers(['encoding'])
                    while 1:
                        SWITCHED = False
                        CONDITION = (var.get('String')(var.get('encoding')).callprop('toLowerCase'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('hex')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('utf8')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('utf-8')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('ascii')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('latin1')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('binary')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('base64')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('ucs2')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('ucs-2')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('utf16le')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('utf-16le')):
                            SWITCHED = True
                            return Js(True)
                        if True:
                            SWITCHED = True
                            return Js(False)
                        SWITCHED = True
                        break
                PyJs_isEncoding_653_._set_name('isEncoding')
                var.get('Buffer').put('isEncoding', PyJs_isEncoding_653_)
                @Js
                def PyJs_concat_654_(list, length, this, arguments, var=var):
                    var = Scope({'list':list, 'length':length, 'this':this, 'arguments':arguments, 'concat':PyJs_concat_654_}, var)
                    var.registers(['pos', 'buf', 'i', 'list', 'buffer', 'length'])
                    if var.get('Array').callprop('isArray', var.get('list')).neg():
                        PyJsTempException = JsToPyException(var.get('TypeError').create(Js('"list" argument must be an Array of Buffers')))
                        raise PyJsTempException
                    if PyJsStrictEq(var.get('list').get('length'),Js(0.0)):
                        return var.get('Buffer').callprop('alloc', Js(0.0))
                    pass
                    if PyJsStrictEq(var.get('length'),var.get('undefined')):
                        var.put('length', Js(0.0))
                        #for JS loop
                        var.put('i', Js(0.0))
                        while (var.get('i')<var.get('list').get('length')):
                            try:
                                var.put('length', var.get('list').get(var.get('i')).get('length'), '+')
                            finally:
                                    var.put('i',Js(var.get('i').to_number())+Js(1))
                    var.put('buffer', var.get('Buffer').callprop('allocUnsafe', var.get('length')))
                    var.put('pos', Js(0.0))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('list').get('length')):
                        try:
                            var.put('buf', var.get('list').get(var.get('i')))
                            if var.get('isInstance')(var.get('buf'), var.get('Uint8Array')):
                                var.put('buf', var.get('Buffer').callprop('from', var.get('buf')))
                            if var.get('Buffer').callprop('isBuffer', var.get('buf')).neg():
                                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('"list" argument must be an Array of Buffers')))
                                raise PyJsTempException
                            var.get('buf').callprop('copy', var.get('buffer'), var.get('pos'))
                            var.put('pos', var.get('buf').get('length'), '+')
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    return var.get('buffer')
                PyJs_concat_654_._set_name('concat')
                var.get('Buffer').put('concat', PyJs_concat_654_)
                pass
                var.get('Buffer').put('byteLength', var.get('byteLength'))
                pass
                var.get('Buffer').get('prototype').put('_isBuffer', Js(True))
                pass
                @Js
                def PyJs_swap16_655_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'swap16':PyJs_swap16_655_}, var)
                    var.registers(['len', 'i'])
                    var.put('len', var.get(u"this").get('length'))
                    if PyJsStrictNeq((var.get('len')%Js(2.0)),Js(0.0)):
                        PyJsTempException = JsToPyException(var.get('RangeError').create(Js('Buffer size must be a multiple of 16-bits')))
                        raise PyJsTempException
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('len')):
                        try:
                            var.get('swap')(var.get(u"this"), var.get('i'), (var.get('i')+Js(1.0)))
                        finally:
                                var.put('i', Js(2.0), '+')
                    return var.get(u"this")
                PyJs_swap16_655_._set_name('swap16')
                var.get('Buffer').get('prototype').put('swap16', PyJs_swap16_655_)
                @Js
                def PyJs_swap32_656_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'swap32':PyJs_swap32_656_}, var)
                    var.registers(['len', 'i'])
                    var.put('len', var.get(u"this").get('length'))
                    if PyJsStrictNeq((var.get('len')%Js(4.0)),Js(0.0)):
                        PyJsTempException = JsToPyException(var.get('RangeError').create(Js('Buffer size must be a multiple of 32-bits')))
                        raise PyJsTempException
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('len')):
                        try:
                            var.get('swap')(var.get(u"this"), var.get('i'), (var.get('i')+Js(3.0)))
                            var.get('swap')(var.get(u"this"), (var.get('i')+Js(1.0)), (var.get('i')+Js(2.0)))
                        finally:
                                var.put('i', Js(4.0), '+')
                    return var.get(u"this")
                PyJs_swap32_656_._set_name('swap32')
                var.get('Buffer').get('prototype').put('swap32', PyJs_swap32_656_)
                @Js
                def PyJs_swap64_657_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'swap64':PyJs_swap64_657_}, var)
                    var.registers(['len', 'i'])
                    var.put('len', var.get(u"this").get('length'))
                    if PyJsStrictNeq((var.get('len')%Js(8.0)),Js(0.0)):
                        PyJsTempException = JsToPyException(var.get('RangeError').create(Js('Buffer size must be a multiple of 64-bits')))
                        raise PyJsTempException
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('len')):
                        try:
                            var.get('swap')(var.get(u"this"), var.get('i'), (var.get('i')+Js(7.0)))
                            var.get('swap')(var.get(u"this"), (var.get('i')+Js(1.0)), (var.get('i')+Js(6.0)))
                            var.get('swap')(var.get(u"this"), (var.get('i')+Js(2.0)), (var.get('i')+Js(5.0)))
                            var.get('swap')(var.get(u"this"), (var.get('i')+Js(3.0)), (var.get('i')+Js(4.0)))
                        finally:
                                var.put('i', Js(8.0), '+')
                    return var.get(u"this")
                PyJs_swap64_657_._set_name('swap64')
                var.get('Buffer').get('prototype').put('swap64', PyJs_swap64_657_)
                @Js
                def PyJs_toString_658_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'toString':PyJs_toString_658_}, var)
                    var.registers(['length'])
                    var.put('length', var.get(u"this").get('length'))
                    if PyJsStrictEq(var.get('length'),Js(0.0)):
                        return Js('')
                    if PyJsStrictEq(var.get('arguments').get('length'),Js(0.0)):
                        return var.get('utf8Slice')(var.get(u"this"), Js(0.0), var.get('length'))
                    return var.get('slowToString').callprop('apply', var.get(u"this"), var.get('arguments'))
                PyJs_toString_658_._set_name('toString')
                var.get('Buffer').get('prototype').put('toString', PyJs_toString_658_)
                var.get('Buffer').get('prototype').put('toLocaleString', var.get('Buffer').get('prototype').get('toString'))
                @Js
                def PyJs_equals_659_(b, this, arguments, var=var):
                    var = Scope({'b':b, 'this':this, 'arguments':arguments, 'equals':PyJs_equals_659_}, var)
                    var.registers(['b'])
                    if var.get('Buffer').callprop('isBuffer', var.get('b')).neg():
                        PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Argument must be a Buffer')))
                        raise PyJsTempException
                    if PyJsStrictEq(var.get(u"this"),var.get('b')):
                        return Js(True)
                    return PyJsStrictEq(var.get('Buffer').callprop('compare', var.get(u"this"), var.get('b')),Js(0.0))
                PyJs_equals_659_._set_name('equals')
                var.get('Buffer').get('prototype').put('equals', PyJs_equals_659_)
                @Js
                def PyJs_inspect_660_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'inspect':PyJs_inspect_660_}, var)
                    var.registers(['str', 'max'])
                    var.put('str', Js(''))
                    var.put('max', var.get('exports').get('INSPECT_MAX_BYTES'))
                    var.put('str', var.get(u"this").callprop('toString', Js('hex'), Js(0.0), var.get('max')).callprop('replace', JsRegExp('/(.{2})/g'), Js('$1 ')).callprop('trim'))
                    if (var.get(u"this").get('length')>var.get('max')):
                        var.put('str', Js(' ... '), '+')
                    return ((Js('<Buffer ')+var.get('str'))+Js('>'))
                PyJs_inspect_660_._set_name('inspect')
                var.get('Buffer').get('prototype').put('inspect', PyJs_inspect_660_)
                @Js
                def PyJs_compare_661_(target, start, end, thisStart, thisEnd, this, arguments, var=var):
                    var = Scope({'target':target, 'start':start, 'end':end, 'thisStart':thisStart, 'thisEnd':thisEnd, 'this':this, 'arguments':arguments, 'compare':PyJs_compare_661_}, var)
                    var.registers(['y', 'len', 'targetCopy', 'x', 'i', 'thisStart', 'start', 'end', 'thisEnd', 'target', 'thisCopy'])
                    if var.get('isInstance')(var.get('target'), var.get('Uint8Array')):
                        var.put('target', var.get('Buffer').callprop('from', var.get('target'), var.get('target').get('offset'), var.get('target').get('byteLength')))
                    if var.get('Buffer').callprop('isBuffer', var.get('target')).neg():
                        PyJsTempException = JsToPyException(var.get('TypeError').create(((Js('The "target" argument must be one of type Buffer or Uint8Array. ')+Js('Received type '))+(Js('undefined') if PyJsStrictEq(var.get('target',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('target'))))))
                        raise PyJsTempException
                    if PyJsStrictEq(var.get('start'),var.get('undefined')):
                        var.put('start', Js(0.0))
                    if PyJsStrictEq(var.get('end'),var.get('undefined')):
                        var.put('end', (var.get('target').get('length') if var.get('target') else Js(0.0)))
                    if PyJsStrictEq(var.get('thisStart'),var.get('undefined')):
                        var.put('thisStart', Js(0.0))
                    if PyJsStrictEq(var.get('thisEnd'),var.get('undefined')):
                        var.put('thisEnd', var.get(u"this").get('length'))
                    if ((((var.get('start')<Js(0.0)) or (var.get('end')>var.get('target').get('length'))) or (var.get('thisStart')<Js(0.0))) or (var.get('thisEnd')>var.get(u"this").get('length'))):
                        PyJsTempException = JsToPyException(var.get('RangeError').create(Js('out of range index')))
                        raise PyJsTempException
                    if ((var.get('thisStart')>=var.get('thisEnd')) and (var.get('start')>=var.get('end'))):
                        return Js(0.0)
                    if (var.get('thisStart')>=var.get('thisEnd')):
                        return (-Js(1.0))
                    if (var.get('start')>=var.get('end')):
                        return Js(1.0)
                    var.put('start', Js(0.0), '>>>')
                    var.put('end', Js(0.0), '>>>')
                    var.put('thisStart', Js(0.0), '>>>')
                    var.put('thisEnd', Js(0.0), '>>>')
                    if PyJsStrictEq(var.get(u"this"),var.get('target')):
                        return Js(0.0)
                    var.put('x', (var.get('thisEnd')-var.get('thisStart')))
                    var.put('y', (var.get('end')-var.get('start')))
                    var.put('len', var.get('Math').callprop('min', var.get('x'), var.get('y')))
                    var.put('thisCopy', var.get(u"this").callprop('slice', var.get('thisStart'), var.get('thisEnd')))
                    var.put('targetCopy', var.get('target').callprop('slice', var.get('start'), var.get('end')))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('len')):
                        try:
                            if PyJsStrictNeq(var.get('thisCopy').get(var.get('i')),var.get('targetCopy').get(var.get('i'))):
                                var.put('x', var.get('thisCopy').get(var.get('i')))
                                var.put('y', var.get('targetCopy').get(var.get('i')))
                                break
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    if (var.get('x')<var.get('y')):
                        return (-Js(1.0))
                    if (var.get('y')<var.get('x')):
                        return Js(1.0)
                    return Js(0.0)
                PyJs_compare_661_._set_name('compare')
                var.get('Buffer').get('prototype').put('compare', PyJs_compare_661_)
                pass
                pass
                @Js
                def PyJs_includes_662_(val, byteOffset, encoding, this, arguments, var=var):
                    var = Scope({'val':val, 'byteOffset':byteOffset, 'encoding':encoding, 'this':this, 'arguments':arguments, 'includes':PyJs_includes_662_}, var)
                    var.registers(['byteOffset', 'val', 'encoding'])
                    return PyJsStrictNeq(var.get(u"this").callprop('indexOf', var.get('val'), var.get('byteOffset'), var.get('encoding')),(-Js(1.0)))
                PyJs_includes_662_._set_name('includes')
                var.get('Buffer').get('prototype').put('includes', PyJs_includes_662_)
                @Js
                def PyJs_indexOf_663_(val, byteOffset, encoding, this, arguments, var=var):
                    var = Scope({'val':val, 'byteOffset':byteOffset, 'encoding':encoding, 'this':this, 'arguments':arguments, 'indexOf':PyJs_indexOf_663_}, var)
                    var.registers(['byteOffset', 'val', 'encoding'])
                    return var.get('bidirectionalIndexOf')(var.get(u"this"), var.get('val'), var.get('byteOffset'), var.get('encoding'), Js(True))
                PyJs_indexOf_663_._set_name('indexOf')
                var.get('Buffer').get('prototype').put('indexOf', PyJs_indexOf_663_)
                @Js
                def PyJs_lastIndexOf_664_(val, byteOffset, encoding, this, arguments, var=var):
                    var = Scope({'val':val, 'byteOffset':byteOffset, 'encoding':encoding, 'this':this, 'arguments':arguments, 'lastIndexOf':PyJs_lastIndexOf_664_}, var)
                    var.registers(['byteOffset', 'val', 'encoding'])
                    return var.get('bidirectionalIndexOf')(var.get(u"this"), var.get('val'), var.get('byteOffset'), var.get('encoding'), Js(False))
                PyJs_lastIndexOf_664_._set_name('lastIndexOf')
                var.get('Buffer').get('prototype').put('lastIndexOf', PyJs_lastIndexOf_664_)
                pass
                pass
                pass
                pass
                pass
                pass
                @Js
                def PyJs_write_665_(string, offset, length, encoding, this, arguments, var=var):
                    var = Scope({'string':string, 'offset':offset, 'length':length, 'encoding':encoding, 'this':this, 'arguments':arguments, 'write':PyJs_write_665_}, var)
                    var.registers(['encoding', 'length', 'string', 'remaining', 'offset', 'loweredCase'])
                    if PyJsStrictEq(var.get('offset'),var.get('undefined')):
                        var.put('encoding', Js('utf8'))
                        var.put('length', var.get(u"this").get('length'))
                        var.put('offset', Js(0.0))
                    else:
                        if (PyJsStrictEq(var.get('length'),var.get('undefined')) and PyJsStrictEq(var.get('offset',throw=False).typeof(),Js('string'))):
                            var.put('encoding', var.get('offset'))
                            var.put('length', var.get(u"this").get('length'))
                            var.put('offset', Js(0.0))
                        else:
                            if var.get('isFinite')(var.get('offset')):
                                var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                                if var.get('isFinite')(var.get('length')):
                                    var.put('length', PyJsBshift(var.get('length'),Js(0.0)))
                                    if PyJsStrictEq(var.get('encoding'),var.get('undefined')):
                                        var.put('encoding', Js('utf8'))
                                else:
                                    var.put('encoding', var.get('length'))
                                    var.put('length', var.get('undefined'))
                            else:
                                PyJsTempException = JsToPyException(var.get('Error').create(Js('Buffer.write(string, encoding, offset[, length]) is no longer supported')))
                                raise PyJsTempException
                    var.put('remaining', (var.get(u"this").get('length')-var.get('offset')))
                    if (PyJsStrictEq(var.get('length'),var.get('undefined')) or (var.get('length')>var.get('remaining'))):
                        var.put('length', var.get('remaining'))
                    if (((var.get('string').get('length')>Js(0.0)) and ((var.get('length')<Js(0.0)) or (var.get('offset')<Js(0.0)))) or (var.get('offset')>var.get(u"this").get('length'))):
                        PyJsTempException = JsToPyException(var.get('RangeError').create(Js('Attempt to write outside buffer bounds')))
                        raise PyJsTempException
                    if var.get('encoding').neg():
                        var.put('encoding', Js('utf8'))
                    var.put('loweredCase', Js(False))
                    #for JS loop
                    
                    while 1:
                        while 1:
                            SWITCHED = False
                            CONDITION = (var.get('encoding'))
                            if SWITCHED or PyJsStrictEq(CONDITION, Js('hex')):
                                SWITCHED = True
                                return var.get('hexWrite')(var.get(u"this"), var.get('string'), var.get('offset'), var.get('length'))
                            if SWITCHED or PyJsStrictEq(CONDITION, Js('utf8')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, Js('utf-8')):
                                SWITCHED = True
                                return var.get('utf8Write')(var.get(u"this"), var.get('string'), var.get('offset'), var.get('length'))
                            if SWITCHED or PyJsStrictEq(CONDITION, Js('ascii')):
                                SWITCHED = True
                                return var.get('asciiWrite')(var.get(u"this"), var.get('string'), var.get('offset'), var.get('length'))
                            if SWITCHED or PyJsStrictEq(CONDITION, Js('latin1')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, Js('binary')):
                                SWITCHED = True
                                return var.get('latin1Write')(var.get(u"this"), var.get('string'), var.get('offset'), var.get('length'))
                            if SWITCHED or PyJsStrictEq(CONDITION, Js('base64')):
                                SWITCHED = True
                                return var.get('base64Write')(var.get(u"this"), var.get('string'), var.get('offset'), var.get('length'))
                            if SWITCHED or PyJsStrictEq(CONDITION, Js('ucs2')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, Js('ucs-2')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, Js('utf16le')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, Js('utf-16le')):
                                SWITCHED = True
                                return var.get('ucs2Write')(var.get(u"this"), var.get('string'), var.get('offset'), var.get('length'))
                            if True:
                                SWITCHED = True
                                if var.get('loweredCase'):
                                    PyJsTempException = JsToPyException(var.get('TypeError').create((Js('Unknown encoding: ')+var.get('encoding'))))
                                    raise PyJsTempException
                                var.put('encoding', (Js('')+var.get('encoding')).callprop('toLowerCase'))
                                var.put('loweredCase', Js(True))
                            SWITCHED = True
                            break
                    
                PyJs_write_665_._set_name('write')
                var.get('Buffer').get('prototype').put('write', PyJs_write_665_)
                @Js
                def PyJs_toJSON_666_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'toJSON':PyJs_toJSON_666_}, var)
                    var.registers([])
                    return Js({'type':Js('Buffer'),'data':var.get('Array').get('prototype').get('slice').callprop('call', (var.get(u"this").get('_arr') or var.get(u"this")), Js(0.0))})
                PyJs_toJSON_666_._set_name('toJSON')
                var.get('Buffer').get('prototype').put('toJSON', PyJs_toJSON_666_)
                pass
                pass
                var.put('MAX_ARGUMENTS_LENGTH', Js(4096))
                pass
                pass
                pass
                pass
                pass
                @Js
                def PyJs_slice_667_(start, end, this, arguments, var=var):
                    var = Scope({'start':start, 'end':end, 'this':this, 'arguments':arguments, 'slice':PyJs_slice_667_}, var)
                    var.registers(['end', 'newBuf', 'len', 'start'])
                    var.put('len', var.get(u"this").get('length'))
                    var.put('start', (~(~var.get('start'))))
                    var.put('end', (var.get('len') if PyJsStrictEq(var.get('end'),var.get('undefined')) else (~(~var.get('end')))))
                    if (var.get('start')<Js(0.0)):
                        var.put('start', var.get('len'), '+')
                        if (var.get('start')<Js(0.0)):
                            var.put('start', Js(0.0))
                    else:
                        if (var.get('start')>var.get('len')):
                            var.put('start', var.get('len'))
                    if (var.get('end')<Js(0.0)):
                        var.put('end', var.get('len'), '+')
                        if (var.get('end')<Js(0.0)):
                            var.put('end', Js(0.0))
                    else:
                        if (var.get('end')>var.get('len')):
                            var.put('end', var.get('len'))
                    if (var.get('end')<var.get('start')):
                        var.put('end', var.get('start'))
                    var.put('newBuf', var.get(u"this").callprop('subarray', var.get('start'), var.get('end')))
                    var.get('newBuf').put('__proto__', var.get('Buffer').get('prototype'))
                    return var.get('newBuf')
                PyJs_slice_667_._set_name('slice')
                var.get('Buffer').get('prototype').put('slice', PyJs_slice_667_)
                pass
                @Js
                def PyJs_readUIntLE_668_(offset, byteLength, noAssert, this, arguments, var=var):
                    var = Scope({'offset':offset, 'byteLength':byteLength, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readUIntLE':PyJs_readUIntLE_668_}, var)
                    var.registers(['byteLength', 'i', 'val', 'noAssert', 'mul', 'offset'])
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    var.put('byteLength', PyJsBshift(var.get('byteLength'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkOffset')(var.get('offset'), var.get('byteLength'), var.get(u"this").get('length'))
                    var.put('val', var.get(u"this").get(var.get('offset')))
                    var.put('mul', Js(1.0))
                    var.put('i', Js(0.0))
                    while ((var.put('i',Js(var.get('i').to_number())+Js(1))<var.get('byteLength')) and var.put('mul', Js(256), '*')):
                        var.put('val', (var.get(u"this").get((var.get('offset')+var.get('i')))*var.get('mul')), '+')
                    return var.get('val')
                PyJs_readUIntLE_668_._set_name('readUIntLE')
                var.get('Buffer').get('prototype').put('readUIntLE', PyJs_readUIntLE_668_)
                @Js
                def PyJs_readUIntBE_669_(offset, byteLength, noAssert, this, arguments, var=var):
                    var = Scope({'offset':offset, 'byteLength':byteLength, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readUIntBE':PyJs_readUIntBE_669_}, var)
                    var.registers(['byteLength', 'val', 'noAssert', 'mul', 'offset'])
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    var.put('byteLength', PyJsBshift(var.get('byteLength'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkOffset')(var.get('offset'), var.get('byteLength'), var.get(u"this").get('length'))
                    var.put('val', var.get(u"this").get((var.get('offset')+var.put('byteLength',Js(var.get('byteLength').to_number())-Js(1)))))
                    var.put('mul', Js(1.0))
                    while ((var.get('byteLength')>Js(0.0)) and var.put('mul', Js(256), '*')):
                        var.put('val', (var.get(u"this").get((var.get('offset')+var.put('byteLength',Js(var.get('byteLength').to_number())-Js(1))))*var.get('mul')), '+')
                    return var.get('val')
                PyJs_readUIntBE_669_._set_name('readUIntBE')
                var.get('Buffer').get('prototype').put('readUIntBE', PyJs_readUIntBE_669_)
                @Js
                def PyJs_readUInt8_670_(offset, noAssert, this, arguments, var=var):
                    var = Scope({'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readUInt8':PyJs_readUInt8_670_}, var)
                    var.registers(['noAssert', 'offset'])
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkOffset')(var.get('offset'), Js(1.0), var.get(u"this").get('length'))
                    return var.get(u"this").get(var.get('offset'))
                PyJs_readUInt8_670_._set_name('readUInt8')
                var.get('Buffer').get('prototype').put('readUInt8', PyJs_readUInt8_670_)
                @Js
                def PyJs_readUInt16LE_671_(offset, noAssert, this, arguments, var=var):
                    var = Scope({'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readUInt16LE':PyJs_readUInt16LE_671_}, var)
                    var.registers(['noAssert', 'offset'])
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkOffset')(var.get('offset'), Js(2.0), var.get(u"this").get('length'))
                    return (var.get(u"this").get(var.get('offset'))|(var.get(u"this").get((var.get('offset')+Js(1.0)))<<Js(8.0)))
                PyJs_readUInt16LE_671_._set_name('readUInt16LE')
                var.get('Buffer').get('prototype').put('readUInt16LE', PyJs_readUInt16LE_671_)
                @Js
                def PyJs_readUInt16BE_672_(offset, noAssert, this, arguments, var=var):
                    var = Scope({'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readUInt16BE':PyJs_readUInt16BE_672_}, var)
                    var.registers(['noAssert', 'offset'])
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkOffset')(var.get('offset'), Js(2.0), var.get(u"this").get('length'))
                    return ((var.get(u"this").get(var.get('offset'))<<Js(8.0))|var.get(u"this").get((var.get('offset')+Js(1.0))))
                PyJs_readUInt16BE_672_._set_name('readUInt16BE')
                var.get('Buffer').get('prototype').put('readUInt16BE', PyJs_readUInt16BE_672_)
                @Js
                def PyJs_readUInt32LE_673_(offset, noAssert, this, arguments, var=var):
                    var = Scope({'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readUInt32LE':PyJs_readUInt32LE_673_}, var)
                    var.registers(['noAssert', 'offset'])
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkOffset')(var.get('offset'), Js(4.0), var.get(u"this").get('length'))
                    return (((var.get(u"this").get(var.get('offset'))|(var.get(u"this").get((var.get('offset')+Js(1.0)))<<Js(8.0)))|(var.get(u"this").get((var.get('offset')+Js(2.0)))<<Js(16.0)))+(var.get(u"this").get((var.get('offset')+Js(3.0)))*Js(16777216)))
                PyJs_readUInt32LE_673_._set_name('readUInt32LE')
                var.get('Buffer').get('prototype').put('readUInt32LE', PyJs_readUInt32LE_673_)
                @Js
                def PyJs_readUInt32BE_674_(offset, noAssert, this, arguments, var=var):
                    var = Scope({'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readUInt32BE':PyJs_readUInt32BE_674_}, var)
                    var.registers(['noAssert', 'offset'])
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkOffset')(var.get('offset'), Js(4.0), var.get(u"this").get('length'))
                    return ((var.get(u"this").get(var.get('offset'))*Js(16777216))+(((var.get(u"this").get((var.get('offset')+Js(1.0)))<<Js(16.0))|(var.get(u"this").get((var.get('offset')+Js(2.0)))<<Js(8.0)))|var.get(u"this").get((var.get('offset')+Js(3.0)))))
                PyJs_readUInt32BE_674_._set_name('readUInt32BE')
                var.get('Buffer').get('prototype').put('readUInt32BE', PyJs_readUInt32BE_674_)
                @Js
                def PyJs_readIntLE_675_(offset, byteLength, noAssert, this, arguments, var=var):
                    var = Scope({'offset':offset, 'byteLength':byteLength, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readIntLE':PyJs_readIntLE_675_}, var)
                    var.registers(['byteLength', 'i', 'val', 'noAssert', 'mul', 'offset'])
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    var.put('byteLength', PyJsBshift(var.get('byteLength'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkOffset')(var.get('offset'), var.get('byteLength'), var.get(u"this").get('length'))
                    var.put('val', var.get(u"this").get(var.get('offset')))
                    var.put('mul', Js(1.0))
                    var.put('i', Js(0.0))
                    while ((var.put('i',Js(var.get('i').to_number())+Js(1))<var.get('byteLength')) and var.put('mul', Js(256), '*')):
                        var.put('val', (var.get(u"this").get((var.get('offset')+var.get('i')))*var.get('mul')), '+')
                    var.put('mul', Js(128), '*')
                    if (var.get('val')>=var.get('mul')):
                        var.put('val', var.get('Math').callprop('pow', Js(2.0), (Js(8.0)*var.get('byteLength'))), '-')
                    return var.get('val')
                PyJs_readIntLE_675_._set_name('readIntLE')
                var.get('Buffer').get('prototype').put('readIntLE', PyJs_readIntLE_675_)
                @Js
                def PyJs_readIntBE_676_(offset, byteLength, noAssert, this, arguments, var=var):
                    var = Scope({'offset':offset, 'byteLength':byteLength, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readIntBE':PyJs_readIntBE_676_}, var)
                    var.registers(['byteLength', 'val', 'i', 'noAssert', 'mul', 'offset'])
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    var.put('byteLength', PyJsBshift(var.get('byteLength'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkOffset')(var.get('offset'), var.get('byteLength'), var.get(u"this").get('length'))
                    var.put('i', var.get('byteLength'))
                    var.put('mul', Js(1.0))
                    var.put('val', var.get(u"this").get((var.get('offset')+var.put('i',Js(var.get('i').to_number())-Js(1)))))
                    while ((var.get('i')>Js(0.0)) and var.put('mul', Js(256), '*')):
                        var.put('val', (var.get(u"this").get((var.get('offset')+var.put('i',Js(var.get('i').to_number())-Js(1))))*var.get('mul')), '+')
                    var.put('mul', Js(128), '*')
                    if (var.get('val')>=var.get('mul')):
                        var.put('val', var.get('Math').callprop('pow', Js(2.0), (Js(8.0)*var.get('byteLength'))), '-')
                    return var.get('val')
                PyJs_readIntBE_676_._set_name('readIntBE')
                var.get('Buffer').get('prototype').put('readIntBE', PyJs_readIntBE_676_)
                @Js
                def PyJs_readInt8_677_(offset, noAssert, this, arguments, var=var):
                    var = Scope({'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readInt8':PyJs_readInt8_677_}, var)
                    var.registers(['noAssert', 'offset'])
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkOffset')(var.get('offset'), Js(1.0), var.get(u"this").get('length'))
                    if (var.get(u"this").get(var.get('offset'))&Js(128)).neg():
                        return var.get(u"this").get(var.get('offset'))
                    return (((Js(255)-var.get(u"this").get(var.get('offset')))+Js(1.0))*(-Js(1.0)))
                PyJs_readInt8_677_._set_name('readInt8')
                var.get('Buffer').get('prototype').put('readInt8', PyJs_readInt8_677_)
                @Js
                def PyJs_readInt16LE_678_(offset, noAssert, this, arguments, var=var):
                    var = Scope({'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readInt16LE':PyJs_readInt16LE_678_}, var)
                    var.registers(['noAssert', 'val', 'offset'])
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkOffset')(var.get('offset'), Js(2.0), var.get(u"this").get('length'))
                    var.put('val', (var.get(u"this").get(var.get('offset'))|(var.get(u"this").get((var.get('offset')+Js(1.0)))<<Js(8.0))))
                    return ((var.get('val')|Js(4294901760)) if (var.get('val')&Js(32768)) else var.get('val'))
                PyJs_readInt16LE_678_._set_name('readInt16LE')
                var.get('Buffer').get('prototype').put('readInt16LE', PyJs_readInt16LE_678_)
                @Js
                def PyJs_readInt16BE_679_(offset, noAssert, this, arguments, var=var):
                    var = Scope({'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readInt16BE':PyJs_readInt16BE_679_}, var)
                    var.registers(['noAssert', 'val', 'offset'])
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkOffset')(var.get('offset'), Js(2.0), var.get(u"this").get('length'))
                    var.put('val', (var.get(u"this").get((var.get('offset')+Js(1.0)))|(var.get(u"this").get(var.get('offset'))<<Js(8.0))))
                    return ((var.get('val')|Js(4294901760)) if (var.get('val')&Js(32768)) else var.get('val'))
                PyJs_readInt16BE_679_._set_name('readInt16BE')
                var.get('Buffer').get('prototype').put('readInt16BE', PyJs_readInt16BE_679_)
                @Js
                def PyJs_readInt32LE_680_(offset, noAssert, this, arguments, var=var):
                    var = Scope({'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readInt32LE':PyJs_readInt32LE_680_}, var)
                    var.registers(['noAssert', 'offset'])
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkOffset')(var.get('offset'), Js(4.0), var.get(u"this").get('length'))
                    return (((var.get(u"this").get(var.get('offset'))|(var.get(u"this").get((var.get('offset')+Js(1.0)))<<Js(8.0)))|(var.get(u"this").get((var.get('offset')+Js(2.0)))<<Js(16.0)))|(var.get(u"this").get((var.get('offset')+Js(3.0)))<<Js(24.0)))
                PyJs_readInt32LE_680_._set_name('readInt32LE')
                var.get('Buffer').get('prototype').put('readInt32LE', PyJs_readInt32LE_680_)
                @Js
                def PyJs_readInt32BE_681_(offset, noAssert, this, arguments, var=var):
                    var = Scope({'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readInt32BE':PyJs_readInt32BE_681_}, var)
                    var.registers(['noAssert', 'offset'])
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkOffset')(var.get('offset'), Js(4.0), var.get(u"this").get('length'))
                    return ((((var.get(u"this").get(var.get('offset'))<<Js(24.0))|(var.get(u"this").get((var.get('offset')+Js(1.0)))<<Js(16.0)))|(var.get(u"this").get((var.get('offset')+Js(2.0)))<<Js(8.0)))|var.get(u"this").get((var.get('offset')+Js(3.0))))
                PyJs_readInt32BE_681_._set_name('readInt32BE')
                var.get('Buffer').get('prototype').put('readInt32BE', PyJs_readInt32BE_681_)
                @Js
                def PyJs_readFloatLE_682_(offset, noAssert, this, arguments, var=var):
                    var = Scope({'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readFloatLE':PyJs_readFloatLE_682_}, var)
                    var.registers(['noAssert', 'offset'])
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkOffset')(var.get('offset'), Js(4.0), var.get(u"this").get('length'))
                    return var.get('ieee754').callprop('read', var.get(u"this"), var.get('offset'), Js(True), Js(23.0), Js(4.0))
                PyJs_readFloatLE_682_._set_name('readFloatLE')
                var.get('Buffer').get('prototype').put('readFloatLE', PyJs_readFloatLE_682_)
                @Js
                def PyJs_readFloatBE_683_(offset, noAssert, this, arguments, var=var):
                    var = Scope({'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readFloatBE':PyJs_readFloatBE_683_}, var)
                    var.registers(['noAssert', 'offset'])
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkOffset')(var.get('offset'), Js(4.0), var.get(u"this").get('length'))
                    return var.get('ieee754').callprop('read', var.get(u"this"), var.get('offset'), Js(False), Js(23.0), Js(4.0))
                PyJs_readFloatBE_683_._set_name('readFloatBE')
                var.get('Buffer').get('prototype').put('readFloatBE', PyJs_readFloatBE_683_)
                @Js
                def PyJs_readDoubleLE_684_(offset, noAssert, this, arguments, var=var):
                    var = Scope({'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readDoubleLE':PyJs_readDoubleLE_684_}, var)
                    var.registers(['noAssert', 'offset'])
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkOffset')(var.get('offset'), Js(8.0), var.get(u"this").get('length'))
                    return var.get('ieee754').callprop('read', var.get(u"this"), var.get('offset'), Js(True), Js(52.0), Js(8.0))
                PyJs_readDoubleLE_684_._set_name('readDoubleLE')
                var.get('Buffer').get('prototype').put('readDoubleLE', PyJs_readDoubleLE_684_)
                @Js
                def PyJs_readDoubleBE_685_(offset, noAssert, this, arguments, var=var):
                    var = Scope({'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readDoubleBE':PyJs_readDoubleBE_685_}, var)
                    var.registers(['noAssert', 'offset'])
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkOffset')(var.get('offset'), Js(8.0), var.get(u"this").get('length'))
                    return var.get('ieee754').callprop('read', var.get(u"this"), var.get('offset'), Js(False), Js(52.0), Js(8.0))
                PyJs_readDoubleBE_685_._set_name('readDoubleBE')
                var.get('Buffer').get('prototype').put('readDoubleBE', PyJs_readDoubleBE_685_)
                pass
                @Js
                def PyJs_writeUIntLE_686_(value, offset, byteLength, noAssert, this, arguments, var=var):
                    var = Scope({'value':value, 'offset':offset, 'byteLength':byteLength, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeUIntLE':PyJs_writeUIntLE_686_}, var)
                    var.registers(['byteLength', 'maxBytes', 'i', 'noAssert', 'offset', 'mul', 'value'])
                    var.put('value', (+var.get('value')))
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    var.put('byteLength', PyJsBshift(var.get('byteLength'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.put('maxBytes', (var.get('Math').callprop('pow', Js(2.0), (Js(8.0)*var.get('byteLength')))-Js(1.0)))
                        var.get('checkInt')(var.get(u"this"), var.get('value'), var.get('offset'), var.get('byteLength'), var.get('maxBytes'), Js(0.0))
                    var.put('mul', Js(1.0))
                    var.put('i', Js(0.0))
                    var.get(u"this").put(var.get('offset'), (var.get('value')&Js(255)))
                    while ((var.put('i',Js(var.get('i').to_number())+Js(1))<var.get('byteLength')) and var.put('mul', Js(256), '*')):
                        var.get(u"this").put((var.get('offset')+var.get('i')), ((var.get('value')/var.get('mul'))&Js(255)))
                    return (var.get('offset')+var.get('byteLength'))
                PyJs_writeUIntLE_686_._set_name('writeUIntLE')
                var.get('Buffer').get('prototype').put('writeUIntLE', PyJs_writeUIntLE_686_)
                @Js
                def PyJs_writeUIntBE_687_(value, offset, byteLength, noAssert, this, arguments, var=var):
                    var = Scope({'value':value, 'offset':offset, 'byteLength':byteLength, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeUIntBE':PyJs_writeUIntBE_687_}, var)
                    var.registers(['byteLength', 'maxBytes', 'i', 'noAssert', 'offset', 'mul', 'value'])
                    var.put('value', (+var.get('value')))
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    var.put('byteLength', PyJsBshift(var.get('byteLength'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.put('maxBytes', (var.get('Math').callprop('pow', Js(2.0), (Js(8.0)*var.get('byteLength')))-Js(1.0)))
                        var.get('checkInt')(var.get(u"this"), var.get('value'), var.get('offset'), var.get('byteLength'), var.get('maxBytes'), Js(0.0))
                    var.put('i', (var.get('byteLength')-Js(1.0)))
                    var.put('mul', Js(1.0))
                    var.get(u"this").put((var.get('offset')+var.get('i')), (var.get('value')&Js(255)))
                    while ((var.put('i',Js(var.get('i').to_number())-Js(1))>=Js(0.0)) and var.put('mul', Js(256), '*')):
                        var.get(u"this").put((var.get('offset')+var.get('i')), ((var.get('value')/var.get('mul'))&Js(255)))
                    return (var.get('offset')+var.get('byteLength'))
                PyJs_writeUIntBE_687_._set_name('writeUIntBE')
                var.get('Buffer').get('prototype').put('writeUIntBE', PyJs_writeUIntBE_687_)
                @Js
                def PyJs_writeUInt8_688_(value, offset, noAssert, this, arguments, var=var):
                    var = Scope({'value':value, 'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeUInt8':PyJs_writeUInt8_688_}, var)
                    var.registers(['noAssert', 'value', 'offset'])
                    var.put('value', (+var.get('value')))
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkInt')(var.get(u"this"), var.get('value'), var.get('offset'), Js(1.0), Js(255), Js(0.0))
                    var.get(u"this").put(var.get('offset'), (var.get('value')&Js(255)))
                    return (var.get('offset')+Js(1.0))
                PyJs_writeUInt8_688_._set_name('writeUInt8')
                var.get('Buffer').get('prototype').put('writeUInt8', PyJs_writeUInt8_688_)
                @Js
                def PyJs_writeUInt16LE_689_(value, offset, noAssert, this, arguments, var=var):
                    var = Scope({'value':value, 'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeUInt16LE':PyJs_writeUInt16LE_689_}, var)
                    var.registers(['noAssert', 'value', 'offset'])
                    var.put('value', (+var.get('value')))
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkInt')(var.get(u"this"), var.get('value'), var.get('offset'), Js(2.0), Js(65535), Js(0.0))
                    var.get(u"this").put(var.get('offset'), (var.get('value')&Js(255)))
                    var.get(u"this").put((var.get('offset')+Js(1.0)), PyJsBshift(var.get('value'),Js(8.0)))
                    return (var.get('offset')+Js(2.0))
                PyJs_writeUInt16LE_689_._set_name('writeUInt16LE')
                var.get('Buffer').get('prototype').put('writeUInt16LE', PyJs_writeUInt16LE_689_)
                @Js
                def PyJs_writeUInt16BE_690_(value, offset, noAssert, this, arguments, var=var):
                    var = Scope({'value':value, 'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeUInt16BE':PyJs_writeUInt16BE_690_}, var)
                    var.registers(['noAssert', 'value', 'offset'])
                    var.put('value', (+var.get('value')))
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkInt')(var.get(u"this"), var.get('value'), var.get('offset'), Js(2.0), Js(65535), Js(0.0))
                    var.get(u"this").put(var.get('offset'), PyJsBshift(var.get('value'),Js(8.0)))
                    var.get(u"this").put((var.get('offset')+Js(1.0)), (var.get('value')&Js(255)))
                    return (var.get('offset')+Js(2.0))
                PyJs_writeUInt16BE_690_._set_name('writeUInt16BE')
                var.get('Buffer').get('prototype').put('writeUInt16BE', PyJs_writeUInt16BE_690_)
                @Js
                def PyJs_writeUInt32LE_691_(value, offset, noAssert, this, arguments, var=var):
                    var = Scope({'value':value, 'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeUInt32LE':PyJs_writeUInt32LE_691_}, var)
                    var.registers(['noAssert', 'value', 'offset'])
                    var.put('value', (+var.get('value')))
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkInt')(var.get(u"this"), var.get('value'), var.get('offset'), Js(4.0), Js(4294967295), Js(0.0))
                    var.get(u"this").put((var.get('offset')+Js(3.0)), PyJsBshift(var.get('value'),Js(24.0)))
                    var.get(u"this").put((var.get('offset')+Js(2.0)), PyJsBshift(var.get('value'),Js(16.0)))
                    var.get(u"this").put((var.get('offset')+Js(1.0)), PyJsBshift(var.get('value'),Js(8.0)))
                    var.get(u"this").put(var.get('offset'), (var.get('value')&Js(255)))
                    return (var.get('offset')+Js(4.0))
                PyJs_writeUInt32LE_691_._set_name('writeUInt32LE')
                var.get('Buffer').get('prototype').put('writeUInt32LE', PyJs_writeUInt32LE_691_)
                @Js
                def PyJs_writeUInt32BE_692_(value, offset, noAssert, this, arguments, var=var):
                    var = Scope({'value':value, 'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeUInt32BE':PyJs_writeUInt32BE_692_}, var)
                    var.registers(['noAssert', 'value', 'offset'])
                    var.put('value', (+var.get('value')))
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkInt')(var.get(u"this"), var.get('value'), var.get('offset'), Js(4.0), Js(4294967295), Js(0.0))
                    var.get(u"this").put(var.get('offset'), PyJsBshift(var.get('value'),Js(24.0)))
                    var.get(u"this").put((var.get('offset')+Js(1.0)), PyJsBshift(var.get('value'),Js(16.0)))
                    var.get(u"this").put((var.get('offset')+Js(2.0)), PyJsBshift(var.get('value'),Js(8.0)))
                    var.get(u"this").put((var.get('offset')+Js(3.0)), (var.get('value')&Js(255)))
                    return (var.get('offset')+Js(4.0))
                PyJs_writeUInt32BE_692_._set_name('writeUInt32BE')
                var.get('Buffer').get('prototype').put('writeUInt32BE', PyJs_writeUInt32BE_692_)
                @Js
                def PyJs_writeIntLE_693_(value, offset, byteLength, noAssert, this, arguments, var=var):
                    var = Scope({'value':value, 'offset':offset, 'byteLength':byteLength, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeIntLE':PyJs_writeIntLE_693_}, var)
                    var.registers(['byteLength', 'i', 'noAssert', 'mul', 'sub', 'offset', 'limit', 'value'])
                    var.put('value', (+var.get('value')))
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.put('limit', var.get('Math').callprop('pow', Js(2.0), ((Js(8.0)*var.get('byteLength'))-Js(1.0))))
                        var.get('checkInt')(var.get(u"this"), var.get('value'), var.get('offset'), var.get('byteLength'), (var.get('limit')-Js(1.0)), (-var.get('limit')))
                    var.put('i', Js(0.0))
                    var.put('mul', Js(1.0))
                    var.put('sub', Js(0.0))
                    var.get(u"this").put(var.get('offset'), (var.get('value')&Js(255)))
                    while ((var.put('i',Js(var.get('i').to_number())+Js(1))<var.get('byteLength')) and var.put('mul', Js(256), '*')):
                        if (((var.get('value')<Js(0.0)) and PyJsStrictEq(var.get('sub'),Js(0.0))) and PyJsStrictNeq(var.get(u"this").get(((var.get('offset')+var.get('i'))-Js(1.0))),Js(0.0))):
                            var.put('sub', Js(1.0))
                        var.get(u"this").put((var.get('offset')+var.get('i')), ((((var.get('value')/var.get('mul'))>>Js(0.0))-var.get('sub'))&Js(255)))
                    return (var.get('offset')+var.get('byteLength'))
                PyJs_writeIntLE_693_._set_name('writeIntLE')
                var.get('Buffer').get('prototype').put('writeIntLE', PyJs_writeIntLE_693_)
                @Js
                def PyJs_writeIntBE_694_(value, offset, byteLength, noAssert, this, arguments, var=var):
                    var = Scope({'value':value, 'offset':offset, 'byteLength':byteLength, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeIntBE':PyJs_writeIntBE_694_}, var)
                    var.registers(['byteLength', 'i', 'noAssert', 'mul', 'sub', 'offset', 'limit', 'value'])
                    var.put('value', (+var.get('value')))
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.put('limit', var.get('Math').callprop('pow', Js(2.0), ((Js(8.0)*var.get('byteLength'))-Js(1.0))))
                        var.get('checkInt')(var.get(u"this"), var.get('value'), var.get('offset'), var.get('byteLength'), (var.get('limit')-Js(1.0)), (-var.get('limit')))
                    var.put('i', (var.get('byteLength')-Js(1.0)))
                    var.put('mul', Js(1.0))
                    var.put('sub', Js(0.0))
                    var.get(u"this").put((var.get('offset')+var.get('i')), (var.get('value')&Js(255)))
                    while ((var.put('i',Js(var.get('i').to_number())-Js(1))>=Js(0.0)) and var.put('mul', Js(256), '*')):
                        if (((var.get('value')<Js(0.0)) and PyJsStrictEq(var.get('sub'),Js(0.0))) and PyJsStrictNeq(var.get(u"this").get(((var.get('offset')+var.get('i'))+Js(1.0))),Js(0.0))):
                            var.put('sub', Js(1.0))
                        var.get(u"this").put((var.get('offset')+var.get('i')), ((((var.get('value')/var.get('mul'))>>Js(0.0))-var.get('sub'))&Js(255)))
                    return (var.get('offset')+var.get('byteLength'))
                PyJs_writeIntBE_694_._set_name('writeIntBE')
                var.get('Buffer').get('prototype').put('writeIntBE', PyJs_writeIntBE_694_)
                @Js
                def PyJs_writeInt8_695_(value, offset, noAssert, this, arguments, var=var):
                    var = Scope({'value':value, 'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeInt8':PyJs_writeInt8_695_}, var)
                    var.registers(['noAssert', 'value', 'offset'])
                    var.put('value', (+var.get('value')))
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkInt')(var.get(u"this"), var.get('value'), var.get('offset'), Js(1.0), Js(127), (-Js(128)))
                    if (var.get('value')<Js(0.0)):
                        var.put('value', ((Js(255)+var.get('value'))+Js(1.0)))
                    var.get(u"this").put(var.get('offset'), (var.get('value')&Js(255)))
                    return (var.get('offset')+Js(1.0))
                PyJs_writeInt8_695_._set_name('writeInt8')
                var.get('Buffer').get('prototype').put('writeInt8', PyJs_writeInt8_695_)
                @Js
                def PyJs_writeInt16LE_696_(value, offset, noAssert, this, arguments, var=var):
                    var = Scope({'value':value, 'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeInt16LE':PyJs_writeInt16LE_696_}, var)
                    var.registers(['noAssert', 'value', 'offset'])
                    var.put('value', (+var.get('value')))
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkInt')(var.get(u"this"), var.get('value'), var.get('offset'), Js(2.0), Js(32767), (-Js(32768)))
                    var.get(u"this").put(var.get('offset'), (var.get('value')&Js(255)))
                    var.get(u"this").put((var.get('offset')+Js(1.0)), PyJsBshift(var.get('value'),Js(8.0)))
                    return (var.get('offset')+Js(2.0))
                PyJs_writeInt16LE_696_._set_name('writeInt16LE')
                var.get('Buffer').get('prototype').put('writeInt16LE', PyJs_writeInt16LE_696_)
                @Js
                def PyJs_writeInt16BE_697_(value, offset, noAssert, this, arguments, var=var):
                    var = Scope({'value':value, 'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeInt16BE':PyJs_writeInt16BE_697_}, var)
                    var.registers(['noAssert', 'value', 'offset'])
                    var.put('value', (+var.get('value')))
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkInt')(var.get(u"this"), var.get('value'), var.get('offset'), Js(2.0), Js(32767), (-Js(32768)))
                    var.get(u"this").put(var.get('offset'), PyJsBshift(var.get('value'),Js(8.0)))
                    var.get(u"this").put((var.get('offset')+Js(1.0)), (var.get('value')&Js(255)))
                    return (var.get('offset')+Js(2.0))
                PyJs_writeInt16BE_697_._set_name('writeInt16BE')
                var.get('Buffer').get('prototype').put('writeInt16BE', PyJs_writeInt16BE_697_)
                @Js
                def PyJs_writeInt32LE_698_(value, offset, noAssert, this, arguments, var=var):
                    var = Scope({'value':value, 'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeInt32LE':PyJs_writeInt32LE_698_}, var)
                    var.registers(['noAssert', 'value', 'offset'])
                    var.put('value', (+var.get('value')))
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkInt')(var.get(u"this"), var.get('value'), var.get('offset'), Js(4.0), Js(2147483647), (-Js(2147483648)))
                    var.get(u"this").put(var.get('offset'), (var.get('value')&Js(255)))
                    var.get(u"this").put((var.get('offset')+Js(1.0)), PyJsBshift(var.get('value'),Js(8.0)))
                    var.get(u"this").put((var.get('offset')+Js(2.0)), PyJsBshift(var.get('value'),Js(16.0)))
                    var.get(u"this").put((var.get('offset')+Js(3.0)), PyJsBshift(var.get('value'),Js(24.0)))
                    return (var.get('offset')+Js(4.0))
                PyJs_writeInt32LE_698_._set_name('writeInt32LE')
                var.get('Buffer').get('prototype').put('writeInt32LE', PyJs_writeInt32LE_698_)
                @Js
                def PyJs_writeInt32BE_699_(value, offset, noAssert, this, arguments, var=var):
                    var = Scope({'value':value, 'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeInt32BE':PyJs_writeInt32BE_699_}, var)
                    var.registers(['noAssert', 'value', 'offset'])
                    var.put('value', (+var.get('value')))
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkInt')(var.get(u"this"), var.get('value'), var.get('offset'), Js(4.0), Js(2147483647), (-Js(2147483648)))
                    if (var.get('value')<Js(0.0)):
                        var.put('value', ((Js(4294967295)+var.get('value'))+Js(1.0)))
                    var.get(u"this").put(var.get('offset'), PyJsBshift(var.get('value'),Js(24.0)))
                    var.get(u"this").put((var.get('offset')+Js(1.0)), PyJsBshift(var.get('value'),Js(16.0)))
                    var.get(u"this").put((var.get('offset')+Js(2.0)), PyJsBshift(var.get('value'),Js(8.0)))
                    var.get(u"this").put((var.get('offset')+Js(3.0)), (var.get('value')&Js(255)))
                    return (var.get('offset')+Js(4.0))
                PyJs_writeInt32BE_699_._set_name('writeInt32BE')
                var.get('Buffer').get('prototype').put('writeInt32BE', PyJs_writeInt32BE_699_)
                pass
                pass
                @Js
                def PyJs_writeFloatLE_700_(value, offset, noAssert, this, arguments, var=var):
                    var = Scope({'value':value, 'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeFloatLE':PyJs_writeFloatLE_700_}, var)
                    var.registers(['noAssert', 'value', 'offset'])
                    return var.get('writeFloat')(var.get(u"this"), var.get('value'), var.get('offset'), Js(True), var.get('noAssert'))
                PyJs_writeFloatLE_700_._set_name('writeFloatLE')
                var.get('Buffer').get('prototype').put('writeFloatLE', PyJs_writeFloatLE_700_)
                @Js
                def PyJs_writeFloatBE_701_(value, offset, noAssert, this, arguments, var=var):
                    var = Scope({'value':value, 'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeFloatBE':PyJs_writeFloatBE_701_}, var)
                    var.registers(['noAssert', 'value', 'offset'])
                    return var.get('writeFloat')(var.get(u"this"), var.get('value'), var.get('offset'), Js(False), var.get('noAssert'))
                PyJs_writeFloatBE_701_._set_name('writeFloatBE')
                var.get('Buffer').get('prototype').put('writeFloatBE', PyJs_writeFloatBE_701_)
                pass
                @Js
                def PyJs_writeDoubleLE_702_(value, offset, noAssert, this, arguments, var=var):
                    var = Scope({'value':value, 'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeDoubleLE':PyJs_writeDoubleLE_702_}, var)
                    var.registers(['noAssert', 'value', 'offset'])
                    return var.get('writeDouble')(var.get(u"this"), var.get('value'), var.get('offset'), Js(True), var.get('noAssert'))
                PyJs_writeDoubleLE_702_._set_name('writeDoubleLE')
                var.get('Buffer').get('prototype').put('writeDoubleLE', PyJs_writeDoubleLE_702_)
                @Js
                def PyJs_writeDoubleBE_703_(value, offset, noAssert, this, arguments, var=var):
                    var = Scope({'value':value, 'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeDoubleBE':PyJs_writeDoubleBE_703_}, var)
                    var.registers(['noAssert', 'value', 'offset'])
                    return var.get('writeDouble')(var.get(u"this"), var.get('value'), var.get('offset'), Js(False), var.get('noAssert'))
                PyJs_writeDoubleBE_703_._set_name('writeDoubleBE')
                var.get('Buffer').get('prototype').put('writeDoubleBE', PyJs_writeDoubleBE_703_)
                @Js
                def PyJs_copy_704_(target, targetStart, start, end, this, arguments, var=var):
                    var = Scope({'target':target, 'targetStart':targetStart, 'start':start, 'end':end, 'this':this, 'arguments':arguments, 'copy':PyJs_copy_704_}, var)
                    var.registers(['len', 'i', 'start', 'end', 'target', 'targetStart'])
                    if var.get('Buffer').callprop('isBuffer', var.get('target')).neg():
                        PyJsTempException = JsToPyException(var.get('TypeError').create(Js('argument should be a Buffer')))
                        raise PyJsTempException
                    if var.get('start').neg():
                        var.put('start', Js(0.0))
                    if (var.get('end').neg() and PyJsStrictNeq(var.get('end'),Js(0.0))):
                        var.put('end', var.get(u"this").get('length'))
                    if (var.get('targetStart')>=var.get('target').get('length')):
                        var.put('targetStart', var.get('target').get('length'))
                    if var.get('targetStart').neg():
                        var.put('targetStart', Js(0.0))
                    if ((var.get('end')>Js(0.0)) and (var.get('end')<var.get('start'))):
                        var.put('end', var.get('start'))
                    if PyJsStrictEq(var.get('end'),var.get('start')):
                        return Js(0.0)
                    if (PyJsStrictEq(var.get('target').get('length'),Js(0.0)) or PyJsStrictEq(var.get(u"this").get('length'),Js(0.0))):
                        return Js(0.0)
                    if (var.get('targetStart')<Js(0.0)):
                        PyJsTempException = JsToPyException(var.get('RangeError').create(Js('targetStart out of bounds')))
                        raise PyJsTempException
                    if ((var.get('start')<Js(0.0)) or (var.get('start')>=var.get(u"this").get('length'))):
                        PyJsTempException = JsToPyException(var.get('RangeError').create(Js('Index out of range')))
                        raise PyJsTempException
                    if (var.get('end')<Js(0.0)):
                        PyJsTempException = JsToPyException(var.get('RangeError').create(Js('sourceEnd out of bounds')))
                        raise PyJsTempException
                    if (var.get('end')>var.get(u"this").get('length')):
                        var.put('end', var.get(u"this").get('length'))
                    if ((var.get('target').get('length')-var.get('targetStart'))<(var.get('end')-var.get('start'))):
                        var.put('end', ((var.get('target').get('length')-var.get('targetStart'))+var.get('start')))
                    var.put('len', (var.get('end')-var.get('start')))
                    if (PyJsStrictEq(var.get(u"this"),var.get('target')) and PyJsStrictEq(var.get('Uint8Array').get('prototype').get('copyWithin').typeof(),Js('function'))):
                        var.get(u"this").callprop('copyWithin', var.get('targetStart'), var.get('start'), var.get('end'))
                    else:
                        if ((PyJsStrictEq(var.get(u"this"),var.get('target')) and (var.get('start')<var.get('targetStart'))) and (var.get('targetStart')<var.get('end'))):
                            #for JS loop
                            var.put('i', (var.get('len')-Js(1.0)))
                            while (var.get('i')>=Js(0.0)):
                                try:
                                    var.get('target').put((var.get('i')+var.get('targetStart')), var.get(u"this").get((var.get('i')+var.get('start'))))
                                finally:
                                        var.put('i',Js(var.get('i').to_number())-Js(1))
                        else:
                            var.get('Uint8Array').get('prototype').get('set').callprop('call', var.get('target'), var.get(u"this").callprop('subarray', var.get('start'), var.get('end')), var.get('targetStart'))
                    return var.get('len')
                PyJs_copy_704_._set_name('copy')
                var.get('Buffer').get('prototype').put('copy', PyJs_copy_704_)
                @Js
                def PyJs_fill_705_(val, start, end, encoding, this, arguments, var=var):
                    var = Scope({'val':val, 'start':start, 'end':end, 'encoding':encoding, 'this':this, 'arguments':arguments, 'fill':PyJs_fill_705_}, var)
                    var.registers(['len', 'val', 'i', 'start', 'bytes', 'end', 'code', 'encoding'])
                    if PyJsStrictEq(var.get('val',throw=False).typeof(),Js('string')):
                        if PyJsStrictEq(var.get('start',throw=False).typeof(),Js('string')):
                            var.put('encoding', var.get('start'))
                            var.put('start', Js(0.0))
                            var.put('end', var.get(u"this").get('length'))
                        else:
                            if PyJsStrictEq(var.get('end',throw=False).typeof(),Js('string')):
                                var.put('encoding', var.get('end'))
                                var.put('end', var.get(u"this").get('length'))
                        if (PyJsStrictNeq(var.get('encoding'),var.get('undefined')) and PyJsStrictNeq(var.get('encoding',throw=False).typeof(),Js('string'))):
                            PyJsTempException = JsToPyException(var.get('TypeError').create(Js('encoding must be a string')))
                            raise PyJsTempException
                        if (PyJsStrictEq(var.get('encoding',throw=False).typeof(),Js('string')) and var.get('Buffer').callprop('isEncoding', var.get('encoding')).neg()):
                            PyJsTempException = JsToPyException(var.get('TypeError').create((Js('Unknown encoding: ')+var.get('encoding'))))
                            raise PyJsTempException
                        if PyJsStrictEq(var.get('val').get('length'),Js(1.0)):
                            var.put('code', var.get('val').callprop('charCodeAt', Js(0.0)))
                            if ((PyJsStrictEq(var.get('encoding'),Js('utf8')) and (var.get('code')<Js(128.0))) or PyJsStrictEq(var.get('encoding'),Js('latin1'))):
                                var.put('val', var.get('code'))
                    else:
                        if PyJsStrictEq(var.get('val',throw=False).typeof(),Js('number')):
                            var.put('val', (var.get('val')&Js(255.0)))
                    if (((var.get('start')<Js(0.0)) or (var.get(u"this").get('length')<var.get('start'))) or (var.get(u"this").get('length')<var.get('end'))):
                        PyJsTempException = JsToPyException(var.get('RangeError').create(Js('Out of range index')))
                        raise PyJsTempException
                    if (var.get('end')<=var.get('start')):
                        return var.get(u"this")
                    var.put('start', PyJsBshift(var.get('start'),Js(0.0)))
                    var.put('end', (var.get(u"this").get('length') if PyJsStrictEq(var.get('end'),var.get('undefined')) else PyJsBshift(var.get('end'),Js(0.0))))
                    if var.get('val').neg():
                        var.put('val', Js(0.0))
                    pass
                    if PyJsStrictEq(var.get('val',throw=False).typeof(),Js('number')):
                        #for JS loop
                        var.put('i', var.get('start'))
                        while (var.get('i')<var.get('end')):
                            try:
                                var.get(u"this").put(var.get('i'), var.get('val'))
                            finally:
                                    var.put('i',Js(var.get('i').to_number())+Js(1))
                    else:
                        var.put('bytes', (var.get('val') if var.get('Buffer').callprop('isBuffer', var.get('val')) else var.get('Buffer').callprop('from', var.get('val'), var.get('encoding'))))
                        var.put('len', var.get('bytes').get('length'))
                        if PyJsStrictEq(var.get('len'),Js(0.0)):
                            PyJsTempException = JsToPyException(var.get('TypeError').create(((Js('The value "')+var.get('val'))+Js('" is invalid for argument "value"'))))
                            raise PyJsTempException
                        #for JS loop
                        var.put('i', Js(0.0))
                        while (var.get('i')<(var.get('end')-var.get('start'))):
                            try:
                                var.get(u"this").put((var.get('i')+var.get('start')), var.get('bytes').get((var.get('i')%var.get('len'))))
                            finally:
                                    var.put('i',Js(var.get('i').to_number())+Js(1))
                    return var.get(u"this")
                PyJs_fill_705_._set_name('fill')
                var.get('Buffer').get('prototype').put('fill', PyJs_fill_705_)
                var.put('INVALID_BASE64_RE', JsRegExp('/[^+/0-9A-Za-z-_]/g'))
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
            PyJs_anonymous_643_._set_name('anonymous')
            PyJs_anonymous_643_.callprop('call', var.get(u"this"))
        PyJs_anonymous_642_._set_name('anonymous')
        PyJs_anonymous_642_.callprop('call', var.get(u"this"), var.get('require')(Js('buffer')).get('Buffer'))
    PyJs_anonymous_641_._set_name('anonymous')
    @Js
    def PyJs_anonymous_706_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_707_(process, __dirname, this, arguments, var=var):
            var = Scope({'process':process, '__dirname':__dirname, 'this':this, 'arguments':arguments}, var)
            var.registers(['__dirname', 'process'])
            @Js
            def PyJs_anonymous_708_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['path'])
                Js('use strict')
                var.put('path', var.get('require')(Js('path')))
                if PyJsStrictEq(var.get('process').get('env').get('NODE_ENV'),Js('production')):
                    var.get('module').put('exports', var.get('require')(var.get('path').callprop('join', var.get('__dirname'), Js('Build/Cesium/Cesium'))))
                    return var.get('undefined')
                var.get('module').put('exports', var.get('require')(var.get('path').callprop('join', var.get('__dirname'), Js('Build/CesiumUnminified/Cesium'))))
            PyJs_anonymous_708_._set_name('anonymous')
            PyJs_anonymous_708_.callprop('call', var.get(u"this"))
        PyJs_anonymous_707_._set_name('anonymous')
        PyJs_anonymous_707_.callprop('call', var.get(u"this"), var.get('require')(Js('_process')), Js('/node_modules/cesium'))
    PyJs_anonymous_706_._set_name('anonymous')
    @Js
    def PyJs_anonymous_709_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        def PyJs_LONG_710_(var=var):
            return var.get('module').put('exports', Js({'O_RDONLY':Js(0.0),'O_WRONLY':Js(1.0),'O_RDWR':Js(2.0),'S_IFMT':Js(61440.0),'S_IFREG':Js(32768.0),'S_IFDIR':Js(16384.0),'S_IFCHR':Js(8192.0),'S_IFBLK':Js(24576.0),'S_IFIFO':Js(4096.0),'S_IFLNK':Js(40960.0),'S_IFSOCK':Js(49152.0),'O_CREAT':Js(512.0),'O_EXCL':Js(2048.0),'O_NOCTTY':Js(131072.0),'O_TRUNC':Js(1024.0),'O_APPEND':Js(8.0),'O_DIRECTORY':Js(1048576.0),'O_NOFOLLOW':Js(256.0),'O_SYNC':Js(128.0),'O_SYMLINK':Js(2097152.0),'O_NONBLOCK':Js(4.0),'S_IRWXU':Js(448.0),'S_IRUSR':Js(256.0),'S_IWUSR':Js(128.0),'S_IXUSR':Js(64.0),'S_IRWXG':Js(56.0),'S_IRGRP':Js(32.0),'S_IWGRP':Js(16.0),'S_IXGRP':Js(8.0),'S_IRWXO':Js(7.0),'S_IROTH':Js(4.0),'S_IWOTH':Js(2.0),'S_IXOTH':Js(1.0),'E2BIG':Js(7.0),'EACCES':Js(13.0),'EADDRINUSE':Js(48.0),'EADDRNOTAVAIL':Js(49.0),'EAFNOSUPPORT':Js(47.0),'EAGAIN':Js(35.0),'EALREADY':Js(37.0),'EBADF':Js(9.0),'EBADMSG':Js(94.0),'EBUSY':Js(16.0),'ECANCELED':Js(89.0),'ECHILD':Js(10.0),'ECONNABORTED':Js(53.0),'ECONNREFUSED':Js(61.0),'ECONNRESET':Js(54.0),'EDEADLK':Js(11.0),'EDESTADDRREQ':Js(39.0),'EDOM':Js(33.0),'EDQUOT':Js(69.0),'EEXIST':Js(17.0),'EFAULT':Js(14.0),'EFBIG':Js(27.0),'EHOSTUNREACH':Js(65.0),'EIDRM':Js(90.0),'EILSEQ':Js(92.0),'EINPROGRESS':Js(36.0),'EINTR':Js(4.0),'EINVAL':Js(22.0),'EIO':Js(5.0),'EISCONN':Js(56.0),'EISDIR':Js(21.0),'ELOOP':Js(62.0),'EMFILE':Js(24.0),'EMLINK':Js(31.0),'EMSGSIZE':Js(40.0),'EMULTIHOP':Js(95.0),'ENAMETOOLONG':Js(63.0),'ENETDOWN':Js(50.0),'ENETRESET':Js(52.0),'ENETUNREACH':Js(51.0),'ENFILE':Js(23.0),'ENOBUFS':Js(55.0),'ENODATA':Js(96.0),'ENODEV':Js(19.0),'ENOENT':Js(2.0),'ENOEXEC':Js(8.0),'ENOLCK':Js(77.0),'ENOLINK':Js(97.0),'ENOMEM':Js(12.0),'ENOMSG':Js(91.0),'ENOPROTOOPT':Js(42.0),'ENOSPC':Js(28.0),'ENOSR':Js(98.0),'ENOSTR':Js(99.0),'ENOSYS':Js(78.0),'ENOTCONN':Js(57.0),'ENOTDIR':Js(20.0),'ENOTEMPTY':Js(66.0),'ENOTSOCK':Js(38.0),'ENOTSUP':Js(45.0),'ENOTTY':Js(25.0),'ENXIO':Js(6.0),'EOPNOTSUPP':Js(102.0),'EOVERFLOW':Js(84.0),'EPERM':Js(1.0),'EPIPE':Js(32.0),'EPROTO':Js(100.0),'EPROTONOSUPPORT':Js(43.0),'EPROTOTYPE':Js(41.0),'ERANGE':Js(34.0),'EROFS':Js(30.0),'ESPIPE':Js(29.0),'ESRCH':Js(3.0),'ESTALE':Js(70.0),'ETIME':Js(101.0),'ETIMEDOUT':Js(60.0),'ETXTBSY':Js(26.0),'EWOULDBLOCK':Js(35.0),'EXDEV':Js(18.0),'SIGHUP':Js(1.0),'SIGINT':Js(2.0),'SIGQUIT':Js(3.0),'SIGILL':Js(4.0),'SIGTRAP':Js(5.0),'SIGABRT':Js(6.0),'SIGIOT':Js(6.0),'SIGBUS':Js(10.0),'SIGFPE':Js(8.0),'SIGKILL':Js(9.0),'SIGUSR1':Js(30.0),'SIGSEGV':Js(11.0),'SIGUSR2':Js(31.0),'SIGPIPE':Js(13.0),'SIGALRM':Js(14.0),'SIGTERM':Js(15.0),'SIGCHLD':Js(20.0),'SIGCONT':Js(19.0),'SIGSTOP':Js(17.0),'SIGTSTP':Js(18.0),'SIGTTIN':Js(21.0),'SIGTTOU':Js(22.0),'SIGURG':Js(16.0),'SIGXCPU':Js(24.0),'SIGXFSZ':Js(25.0),'SIGVTALRM':Js(26.0),'SIGPROF':Js(27.0),'SIGWINCH':Js(28.0),'SIGIO':Js(23.0),'SIGSYS':Js(12.0),'SSL_OP_ALL':Js(2147486719.0),'SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION':Js(262144.0),'SSL_OP_CIPHER_SERVER_PREFERENCE':Js(4194304.0),'SSL_OP_CISCO_ANYCONNECT':Js(32768.0),'SSL_OP_COOKIE_EXCHANGE':Js(8192.0),'SSL_OP_CRYPTOPRO_TLSEXT_BUG':Js(2147483648.0),'SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS':Js(2048.0),'SSL_OP_EPHEMERAL_RSA':Js(0.0),'SSL_OP_LEGACY_SERVER_CONNECT':Js(4.0),'SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER':Js(32.0),'SSL_OP_MICROSOFT_SESS_ID_BUG':Js(1.0),'SSL_OP_MSIE_SSLV2_RSA_PADDING':Js(0.0),'SSL_OP_NETSCAPE_CA_DN_BUG':Js(536870912.0),'SSL_OP_NETSCAPE_CHALLENGE_BUG':Js(2.0),'SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG':Js(1073741824.0),'SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG':Js(8.0),'SSL_OP_NO_COMPRESSION':Js(131072.0),'SSL_OP_NO_QUERY_MTU':Js(4096.0),'SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION':Js(65536.0),'SSL_OP_NO_SSLv2':Js(16777216.0),'SSL_OP_NO_SSLv3':Js(33554432.0),'SSL_OP_NO_TICKET':Js(16384.0),'SSL_OP_NO_TLSv1':Js(67108864.0),'SSL_OP_NO_TLSv1_1':Js(268435456.0),'SSL_OP_NO_TLSv1_2':Js(134217728.0),'SSL_OP_PKCS1_CHECK_1':Js(0.0),'SSL_OP_PKCS1_CHECK_2':Js(0.0),'SSL_OP_SINGLE_DH_USE':Js(1048576.0),'SSL_OP_SINGLE_ECDH_USE':Js(524288.0),'SSL_OP_SSLEAY_080_CLIENT_DH_BUG':Js(128.0),'SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG':Js(0.0),'SSL_OP_TLS_BLOCK_PADDING_BUG':Js(512.0),'SSL_OP_TLS_D5_BUG':Js(256.0),'SSL_OP_TLS_ROLLBACK_BUG':Js(8388608.0),'ENGINE_METHOD_DSA':Js(2.0),'ENGINE_METHOD_DH':Js(4.0),'ENGINE_METHOD_RAND':Js(8.0),'ENGINE_METHOD_ECDH':Js(16.0),'ENGINE_METHOD_ECDSA':Js(32.0),'ENGINE_METHOD_CIPHERS':Js(64.0),'ENGINE_METHOD_DIGESTS':Js(128.0),'ENGINE_METHOD_STORE':Js(256.0),'ENGINE_METHOD_PKEY_METHS':Js(512.0),'ENGINE_METHOD_PKEY_ASN1_METHS':Js(1024.0),'ENGINE_METHOD_ALL':Js(65535.0),'ENGINE_METHOD_NONE':Js(0.0),'DH_CHECK_P_NOT_SAFE_PRIME':Js(2.0),'DH_CHECK_P_NOT_PRIME':Js(1.0),'DH_UNABLE_TO_CHECK_GENERATOR':Js(4.0),'DH_NOT_SUITABLE_GENERATOR':Js(8.0),'NPN_ENABLED':Js(1.0),'RSA_PKCS1_PADDING':Js(1.0),'RSA_SSLV23_PADDING':Js(2.0),'RSA_NO_PADDING':Js(3.0),'RSA_PKCS1_OAEP_PADDING':Js(4.0),'RSA_X931_PADDING':Js(5.0),'RSA_PKCS1_PSS_PADDING':Js(6.0),'POINT_CONVERSION_COMPRESSED':Js(2.0),'POINT_CONVERSION_UNCOMPRESSED':Js(4.0),'POINT_CONVERSION_HYBRID':Js(6.0),'F_OK':Js(0.0),'R_OK':Js(4.0),'W_OK':Js(2.0),'X_OK':Js(1.0),'UV_UDP_REUSEADDR':Js(4.0)}))
        PyJs_LONG_710_()
    PyJs_anonymous_709_._set_name('anonymous')
    @Js
    def PyJs_anonymous_711_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('require')(Js('../../modules/core.regexp.escape'))
        var.get('module').put('exports', var.get('require')(Js('../../modules/_core')).get('RegExp').get('escape'))
    PyJs_anonymous_711_._set_name('anonymous')
    @Js
    def PyJs_anonymous_712_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_713_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            if (var.get('it',throw=False).typeof()!=Js('function')):
                PyJsTempException = JsToPyException(var.get('TypeError')((var.get('it')+Js(' is not a function!'))))
                raise PyJsTempException
            return var.get('it')
        PyJs_anonymous_713_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_713_)
    PyJs_anonymous_712_._set_name('anonymous')
    @Js
    def PyJs_anonymous_714_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['cof', 'require', 'module', 'exports'])
        var.put('cof', var.get('require')(Js('./_cof')))
        @Js
        def PyJs_anonymous_715_(it, msg, this, arguments, var=var):
            var = Scope({'it':it, 'msg':msg, 'this':this, 'arguments':arguments}, var)
            var.registers(['msg', 'it'])
            if ((var.get('it',throw=False).typeof()!=Js('number')) and (var.get('cof')(var.get('it'))!=Js('Number'))):
                PyJsTempException = JsToPyException(var.get('TypeError')(var.get('msg')))
                raise PyJsTempException
            return (+var.get('it'))
        PyJs_anonymous_715_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_715_)
    PyJs_anonymous_714_._set_name('anonymous')
    @Js
    def PyJs_anonymous_716_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'UNSCOPABLES', 'ArrayProto', 'exports', 'require'])
        var.put('UNSCOPABLES', var.get('require')(Js('./_wks'))(Js('unscopables')))
        var.put('ArrayProto', var.get('Array').get('prototype'))
        if (var.get('ArrayProto').get(var.get('UNSCOPABLES'))==var.get('undefined')):
            var.get('require')(Js('./_hide'))(var.get('ArrayProto'), var.get('UNSCOPABLES'), Js({}))
        @Js
        def PyJs_anonymous_717_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
            var.registers(['key'])
            var.get('ArrayProto').get(var.get('UNSCOPABLES')).put(var.get('key'), Js(True))
        PyJs_anonymous_717_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_717_)
    PyJs_anonymous_716_._set_name('anonymous')
    @Js
    def PyJs_anonymous_718_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'at', 'module', 'exports'])
        Js('use strict')
        var.put('at', var.get('require')(Js('./_string-at'))(Js(True)))
        @Js
        def PyJs_anonymous_719_(S, index, unicode, this, arguments, var=var):
            var = Scope({'S':S, 'index':index, 'unicode':unicode, 'this':this, 'arguments':arguments}, var)
            var.registers(['unicode', 'S', 'index'])
            return (var.get('index')+(var.get('at')(var.get('S'), var.get('index')).get('length') if var.get('unicode') else Js(1.0)))
        PyJs_anonymous_719_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_719_)
    PyJs_anonymous_718_._set_name('anonymous')
    @Js
    def PyJs_anonymous_720_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_721_(it, Constructor, name, forbiddenField, this, arguments, var=var):
            var = Scope({'it':it, 'Constructor':Constructor, 'name':name, 'forbiddenField':forbiddenField, 'this':this, 'arguments':arguments}, var)
            var.registers(['Constructor', 'forbiddenField', 'it', 'name'])
            if (var.get('it').instanceof(var.get('Constructor')).neg() or (PyJsStrictNeq(var.get('forbiddenField'),var.get('undefined')) and var.get('it').contains(var.get('forbiddenField')))):
                PyJsTempException = JsToPyException(var.get('TypeError')((var.get('name')+Js(': incorrect invocation!'))))
                raise PyJsTempException
            return var.get('it')
        PyJs_anonymous_721_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_721_)
    PyJs_anonymous_720_._set_name('anonymous')
    @Js
    def PyJs_anonymous_722_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'isObject', 'module', 'exports'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        @Js
        def PyJs_anonymous_723_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            if var.get('isObject')(var.get('it')).neg():
                PyJsTempException = JsToPyException(var.get('TypeError')((var.get('it')+Js(' is not an object!'))))
                raise PyJsTempException
            return var.get('it')
        PyJs_anonymous_723_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_723_)
    PyJs_anonymous_722_._set_name('anonymous')
    @Js
    def PyJs_anonymous_724_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['toObject', 'module', 'exports', 'toAbsoluteIndex', 'require', 'toLength'])
        Js('use strict')
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('toAbsoluteIndex', var.get('require')(Js('./_to-absolute-index')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        @Js
        def PyJs_copyWithin_725_(target, start, this, arguments, var=var):
            var = Scope({'target':target, 'start':start, 'this':this, 'arguments':arguments, 'copyWithin':PyJs_copyWithin_725_}, var)
            var.registers(['len', 'inc', 'start', 'O', 'end', 'count', 'target', 'to', 'from'])
            var.put('O', var.get('toObject')(var.get(u"this")))
            var.put('len', var.get('toLength')(var.get('O').get('length')))
            var.put('to', var.get('toAbsoluteIndex')(var.get('target'), var.get('len')))
            var.put('from', var.get('toAbsoluteIndex')(var.get('start'), var.get('len')))
            var.put('end', (var.get('arguments').get('2') if (var.get('arguments').get('length')>Js(2.0)) else var.get('undefined')))
            var.put('count', var.get('Math').callprop('min', ((var.get('len') if PyJsStrictEq(var.get('end'),var.get('undefined')) else var.get('toAbsoluteIndex')(var.get('end'), var.get('len')))-var.get('from')), (var.get('len')-var.get('to'))))
            var.put('inc', Js(1.0))
            if ((var.get('from')<var.get('to')) and (var.get('to')<(var.get('from')+var.get('count')))):
                var.put('inc', (-Js(1.0)))
                var.put('from', (var.get('count')-Js(1.0)), '+')
                var.put('to', (var.get('count')-Js(1.0)), '+')
            while ((var.put('count',Js(var.get('count').to_number())-Js(1))+Js(1))>Js(0.0)):
                if var.get('O').contains(var.get('from')):
                    var.get('O').put(var.get('to'), var.get('O').get(var.get('from')))
                else:
                    var.get('O').delete(var.get('to'))
                var.put('to', var.get('inc'), '+')
                var.put('from', var.get('inc'), '+')
            return var.get('O')
        PyJs_copyWithin_725_._set_name('copyWithin')
        var.get('module').put('exports', (Js([]).get('copyWithin') or PyJs_copyWithin_725_))
    PyJs_anonymous_724_._set_name('anonymous')
    @Js
    def PyJs_anonymous_726_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['toObject', 'module', 'exports', 'toAbsoluteIndex', 'require', 'toLength'])
        Js('use strict')
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('toAbsoluteIndex', var.get('require')(Js('./_to-absolute-index')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        @Js
        def PyJs_fill_727_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments, 'fill':PyJs_fill_727_}, var)
            var.registers(['O', 'end', 'aLen', 'length', 'endPos', 'index', 'value'])
            var.put('O', var.get('toObject')(var.get(u"this")))
            var.put('length', var.get('toLength')(var.get('O').get('length')))
            var.put('aLen', var.get('arguments').get('length'))
            var.put('index', var.get('toAbsoluteIndex')((var.get('arguments').get('1') if (var.get('aLen')>Js(1.0)) else var.get('undefined')), var.get('length')))
            var.put('end', (var.get('arguments').get('2') if (var.get('aLen')>Js(2.0)) else var.get('undefined')))
            var.put('endPos', (var.get('length') if PyJsStrictEq(var.get('end'),var.get('undefined')) else var.get('toAbsoluteIndex')(var.get('end'), var.get('length'))))
            while (var.get('endPos')>var.get('index')):
                var.get('O').put((var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1)), var.get('value'))
            return var.get('O')
        PyJs_fill_727_._set_name('fill')
        var.get('module').put('exports', PyJs_fill_727_)
    PyJs_anonymous_726_._set_name('anonymous')
    @Js
    def PyJs_anonymous_728_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['forOf', 'module', 'require', 'exports'])
        var.put('forOf', var.get('require')(Js('./_for-of')))
        @Js
        def PyJs_anonymous_729_(iter, ITERATOR, this, arguments, var=var):
            var = Scope({'iter':iter, 'ITERATOR':ITERATOR, 'this':this, 'arguments':arguments}, var)
            var.registers(['ITERATOR', 'result', 'iter'])
            var.put('result', Js([]))
            var.get('forOf')(var.get('iter'), Js(False), var.get('result').get('push'), var.get('result'), var.get('ITERATOR'))
            return var.get('result')
        PyJs_anonymous_729_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_729_)
    PyJs_anonymous_728_._set_name('anonymous')
    @Js
    def PyJs_anonymous_730_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'toAbsoluteIndex', 'toIObject', 'require', 'toLength'])
        var.put('toIObject', var.get('require')(Js('./_to-iobject')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('toAbsoluteIndex', var.get('require')(Js('./_to-absolute-index')))
        @Js
        def PyJs_anonymous_731_(IS_INCLUDES, this, arguments, var=var):
            var = Scope({'IS_INCLUDES':IS_INCLUDES, 'this':this, 'arguments':arguments}, var)
            var.registers(['IS_INCLUDES'])
            @Js
            def PyJs_anonymous_732_(PyJsArg_2474686973_, el, fromIndex, this, arguments, var=var):
                var = Scope({'$this':PyJsArg_2474686973_, 'el':el, 'fromIndex':fromIndex, 'this':this, 'arguments':arguments}, var)
                var.registers(['O', '$this', 'length', 'fromIndex', 'el', 'index', 'value'])
                var.put('O', var.get('toIObject')(var.get('$this')))
                var.put('length', var.get('toLength')(var.get('O').get('length')))
                var.put('index', var.get('toAbsoluteIndex')(var.get('fromIndex'), var.get('length')))
                pass
                if (var.get('IS_INCLUDES') and (var.get('el')!=var.get('el'))):
                    while (var.get('length')>var.get('index')):
                        var.put('value', var.get('O').get((var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))))
                        if (var.get('value')!=var.get('value')):
                            return Js(True)
                else:
                    #for JS loop
                    
                    while (var.get('length')>var.get('index')):
                        try:
                            if (var.get('IS_INCLUDES') or var.get('O').contains(var.get('index'))):
                                if PyJsStrictEq(var.get('O').get(var.get('index')),var.get('el')):
                                    return ((var.get('IS_INCLUDES') or var.get('index')) or Js(0.0))
                        finally:
                                (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))
                return (var.get('IS_INCLUDES').neg() and (-Js(1.0)))
            PyJs_anonymous_732_._set_name('anonymous')
            return PyJs_anonymous_732_
        PyJs_anonymous_731_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_731_)
    PyJs_anonymous_730_._set_name('anonymous')
    @Js
    def PyJs_anonymous_733_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['toObject', 'module', 'IObject', 'exports', 'require', 'ctx', 'toLength', 'asc'])
        var.put('ctx', var.get('require')(Js('./_ctx')))
        var.put('IObject', var.get('require')(Js('./_iobject')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('asc', var.get('require')(Js('./_array-species-create')))
        @Js
        def PyJs_anonymous_734_(TYPE, PyJsArg_24637265617465_, this, arguments, var=var):
            var = Scope({'TYPE':TYPE, '$create':PyJsArg_24637265617465_, 'this':this, 'arguments':arguments}, var)
            var.registers(['NO_HOLES', 'create', 'IS_MAP', '$create', 'IS_SOME', 'TYPE', 'IS_FIND_INDEX', 'IS_FILTER', 'IS_EVERY'])
            var.put('IS_MAP', (var.get('TYPE')==Js(1.0)))
            var.put('IS_FILTER', (var.get('TYPE')==Js(2.0)))
            var.put('IS_SOME', (var.get('TYPE')==Js(3.0)))
            var.put('IS_EVERY', (var.get('TYPE')==Js(4.0)))
            var.put('IS_FIND_INDEX', (var.get('TYPE')==Js(6.0)))
            var.put('NO_HOLES', ((var.get('TYPE')==Js(5.0)) or var.get('IS_FIND_INDEX')))
            var.put('create', (var.get('$create') or var.get('asc')))
            @Js
            def PyJs_anonymous_735_(PyJsArg_2474686973_, callbackfn, that, this, arguments, var=var):
                var = Scope({'$this':PyJsArg_2474686973_, 'callbackfn':callbackfn, 'that':that, 'this':this, 'arguments':arguments}, var)
                var.registers(['callbackfn', 'self', 'result', 'val', 'that', 'O', '$this', 'length', 'res', 'f', 'index'])
                var.put('O', var.get('toObject')(var.get('$this')))
                var.put('self', var.get('IObject')(var.get('O')))
                var.put('f', var.get('ctx')(var.get('callbackfn'), var.get('that'), Js(3.0)))
                var.put('length', var.get('toLength')(var.get('self').get('length')))
                var.put('index', Js(0.0))
                var.put('result', (var.get('create')(var.get('$this'), var.get('length')) if var.get('IS_MAP') else (var.get('create')(var.get('$this'), Js(0.0)) if var.get('IS_FILTER') else var.get('undefined'))))
                pass
                #for JS loop
                
                while (var.get('length')>var.get('index')):
                    try:
                        if (var.get('NO_HOLES') or var.get('self').contains(var.get('index'))):
                            var.put('val', var.get('self').get(var.get('index')))
                            var.put('res', var.get('f')(var.get('val'), var.get('index'), var.get('O')))
                            if var.get('TYPE'):
                                if var.get('IS_MAP'):
                                    var.get('result').put(var.get('index'), var.get('res'))
                                else:
                                    if var.get('res'):
                                        while 1:
                                            SWITCHED = False
                                            CONDITION = (var.get('TYPE'))
                                            if SWITCHED or PyJsStrictEq(CONDITION, Js(3.0)):
                                                SWITCHED = True
                                                return Js(True)
                                            if SWITCHED or PyJsStrictEq(CONDITION, Js(5.0)):
                                                SWITCHED = True
                                                return var.get('val')
                                            if SWITCHED or PyJsStrictEq(CONDITION, Js(6.0)):
                                                SWITCHED = True
                                                return var.get('index')
                                            if SWITCHED or PyJsStrictEq(CONDITION, Js(2.0)):
                                                SWITCHED = True
                                                var.get('result').callprop('push', var.get('val'))
                                            SWITCHED = True
                                            break
                                    else:
                                        if var.get('IS_EVERY'):
                                            return Js(False)
                    finally:
                            (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))
                return ((-Js(1.0)) if var.get('IS_FIND_INDEX') else (var.get('IS_EVERY') if (var.get('IS_SOME') or var.get('IS_EVERY')) else var.get('result')))
            PyJs_anonymous_735_._set_name('anonymous')
            return PyJs_anonymous_735_
        PyJs_anonymous_734_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_734_)
    PyJs_anonymous_733_._set_name('anonymous')
    @Js
    def PyJs_anonymous_736_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['toObject', 'module', 'IObject', 'exports', 'aFunction', 'require', 'toLength'])
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('IObject', var.get('require')(Js('./_iobject')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        @Js
        def PyJs_anonymous_737_(that, callbackfn, aLen, memo, isRight, this, arguments, var=var):
            var = Scope({'that':that, 'callbackfn':callbackfn, 'aLen':aLen, 'memo':memo, 'isRight':isRight, 'this':this, 'arguments':arguments}, var)
            var.registers(['callbackfn', 'self', 'memo', 'i', 'that', 'O', 'aLen', 'isRight', 'length', 'index'])
            var.get('aFunction')(var.get('callbackfn'))
            var.put('O', var.get('toObject')(var.get('that')))
            var.put('self', var.get('IObject')(var.get('O')))
            var.put('length', var.get('toLength')(var.get('O').get('length')))
            var.put('index', ((var.get('length')-Js(1.0)) if var.get('isRight') else Js(0.0)))
            var.put('i', ((-Js(1.0)) if var.get('isRight') else Js(1.0)))
            if (var.get('aLen')<Js(2.0)):
                #for JS loop
                
                while 1:
                    if var.get('self').contains(var.get('index')):
                        var.put('memo', var.get('self').get(var.get('index')))
                        var.put('index', var.get('i'), '+')
                        break
                    var.put('index', var.get('i'), '+')
                    if ((var.get('index')<Js(0.0)) if var.get('isRight') else (var.get('length')<=var.get('index'))):
                        PyJsTempException = JsToPyException(var.get('TypeError')(Js('Reduce of empty array with no initial value')))
                        raise PyJsTempException
                
            #for JS loop
            
            while ((var.get('index')>=Js(0.0)) if var.get('isRight') else (var.get('length')>var.get('index'))):
                try:
                    if var.get('self').contains(var.get('index')):
                        var.put('memo', var.get('callbackfn')(var.get('memo'), var.get('self').get(var.get('index')), var.get('index'), var.get('O')))
                finally:
                        var.put('index', var.get('i'), '+')
            return var.get('memo')
        PyJs_anonymous_737_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_737_)
    PyJs_anonymous_736_._set_name('anonymous')
    @Js
    def PyJs_anonymous_738_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'isArray', 'SPECIES', 'require', 'isObject'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('isArray', var.get('require')(Js('./_is-array')))
        var.put('SPECIES', var.get('require')(Js('./_wks'))(Js('species')))
        @Js
        def PyJs_anonymous_739_(original, this, arguments, var=var):
            var = Scope({'original':original, 'this':this, 'arguments':arguments}, var)
            var.registers(['original', 'C'])
            pass
            if var.get('isArray')(var.get('original')):
                var.put('C', var.get('original').get('constructor'))
                if ((var.get('C',throw=False).typeof()==Js('function')) and (PyJsStrictEq(var.get('C'),var.get('Array')) or var.get('isArray')(var.get('C').get('prototype')))):
                    var.put('C', var.get('undefined'))
                if var.get('isObject')(var.get('C')):
                    var.put('C', var.get('C').get(var.get('SPECIES')))
                    if PyJsStrictEq(var.get('C'),var.get(u"null")):
                        var.put('C', var.get('undefined'))
            return (var.get('Array') if PyJsStrictEq(var.get('C'),var.get('undefined')) else var.get('C'))
        PyJs_anonymous_739_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_739_)
    PyJs_anonymous_738_._set_name('anonymous')
    @Js
    def PyJs_anonymous_740_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['speciesConstructor', 'module', 'require', 'exports'])
        var.put('speciesConstructor', var.get('require')(Js('./_array-species-constructor')))
        @Js
        def PyJs_anonymous_741_(original, length, this, arguments, var=var):
            var = Scope({'original':original, 'length':length, 'this':this, 'arguments':arguments}, var)
            var.registers(['length', 'original'])
            return var.get('speciesConstructor')(var.get('original')).create(var.get('length'))
        PyJs_anonymous_741_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_741_)
    PyJs_anonymous_740_._set_name('anonymous')
    @Js
    def PyJs_anonymous_742_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'invoke', 'arraySlice', 'aFunction', 'construct', 'require', 'isObject', 'factories'])
        Js('use strict')
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('invoke', var.get('require')(Js('./_invoke')))
        var.put('arraySlice', Js([]).get('slice'))
        var.put('factories', Js({}))
        @Js
        def PyJs_construct_743_(F, len, args, this, arguments, var=var):
            var = Scope({'F':F, 'len':len, 'args':args, 'this':this, 'arguments':arguments, 'construct':PyJs_construct_743_}, var)
            var.registers(['n', 'len', 'i', 'args', 'F'])
            if var.get('factories').contains(var.get('len')).neg():
                #for JS loop
                var.put('n', Js([]))
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('len')):
                    try:
                        var.get('n').put(var.get('i'), ((Js('a[')+var.get('i'))+Js(']')))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                var.get('factories').put(var.get('len'), var.get('Function')(Js('F,a'), ((Js('return new F(')+var.get('n').callprop('join', Js(',')))+Js(')'))))
            return var.get('factories').callprop(var.get('len'), var.get('F'), var.get('args'))
        PyJs_construct_743_._set_name('construct')
        var.put('construct', PyJs_construct_743_)
        @Js
        def PyJs_bind_744_(that, this, arguments, var=var):
            var = Scope({'that':that, 'this':this, 'arguments':arguments, 'bind':PyJs_bind_744_}, var)
            var.registers(['bound', 'fn', 'partArgs', 'that'])
            var.put('fn', var.get('aFunction')(var.get(u"this")))
            var.put('partArgs', var.get('arraySlice').callprop('call', var.get('arguments'), Js(1.0)))
            @Js
            def PyJs_bound_745_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'bound':PyJs_bound_745_}, var)
                var.registers(['args'])
                var.put('args', var.get('partArgs').callprop('concat', var.get('arraySlice').callprop('call', var.get('arguments'))))
                return (var.get('construct')(var.get('fn'), var.get('args').get('length'), var.get('args')) if var.get(u"this").instanceof(var.get('bound')) else var.get('invoke')(var.get('fn'), var.get('args'), var.get('that')))
            PyJs_bound_745_._set_name('bound')
            var.put('bound', PyJs_bound_745_)
            if var.get('isObject')(var.get('fn').get('prototype')):
                var.get('bound').put('prototype', var.get('fn').get('prototype'))
            return var.get('bound')
        PyJs_bind_744_._set_name('bind')
        var.get('module').put('exports', (var.get('Function').get('bind') or PyJs_bind_744_))
    PyJs_anonymous_742_._set_name('anonymous')
    @Js
    def PyJs_anonymous_746_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['TAG', 'module', 'tryGet', 'exports', 'cof', 'require', 'ARG'])
        var.put('cof', var.get('require')(Js('./_cof')))
        var.put('TAG', var.get('require')(Js('./_wks'))(Js('toStringTag')))
        @Js
        def PyJs_anonymous_747_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get('arguments')
        PyJs_anonymous_747_._set_name('anonymous')
        var.put('ARG', (var.get('cof')(PyJs_anonymous_747_())==Js('Arguments')))
        @Js
        def PyJs_tryGet_748_(it, key, this, arguments, var=var):
            var = Scope({'it':it, 'key':key, 'this':this, 'arguments':arguments, 'tryGet':PyJs_tryGet_748_}, var)
            var.registers(['key', 'it'])
            try:
                return var.get('it').get(var.get('key'))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_88655925 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    pass
                finally:
                    if PyJsHolder_65_88655925 is not None:
                        var.own['e'] = PyJsHolder_65_88655925
                    else:
                        del var.own['e']
                    del PyJsHolder_65_88655925
        PyJs_tryGet_748_._set_name('tryGet')
        var.put('tryGet', PyJs_tryGet_748_)
        @Js
        def PyJs_anonymous_749_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['O', 'T', 'B', 'it'])
            pass
            def PyJs_LONG_750_(var=var):
                return (Js('Null') if PyJsStrictEq(var.get('it'),var.get(u"null")) else (var.get('T') if (var.put('T', var.get('tryGet')(var.put('O', var.get('Object')(var.get('it'))), var.get('TAG'))).typeof()==Js('string')) else (var.get('cof')(var.get('O')) if var.get('ARG') else (Js('Arguments') if ((var.put('B', var.get('cof')(var.get('O')))==Js('Object')) and (var.get('O').get('callee').typeof()==Js('function'))) else var.get('B')))))
            return (Js('Undefined') if PyJsStrictEq(var.get('it'),var.get('undefined')) else PyJs_LONG_750_())
        PyJs_anonymous_749_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_749_)
    PyJs_anonymous_746_._set_name('anonymous')
    @Js
    def PyJs_anonymous_751_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['toString', 'require', 'module', 'exports'])
        var.put('toString', Js({}).get('toString'))
        @Js
        def PyJs_anonymous_752_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return var.get('toString').callprop('call', var.get('it')).callprop('slice', Js(8.0), (-Js(1.0)))
        PyJs_anonymous_752_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_752_)
    PyJs_anonymous_751_._set_name('anonymous')
    @Js
    def PyJs_anonymous_753_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['create', 'module', '$iterDefine', 'fastKey', 'forOf', 'exports', 'setSpecies', 'getEntry', 'redefineAll', 'SIZE', 'DESCRIPTORS', 'validate', 'anInstance', 'require', 'ctx', 'dP', 'step'])
        Js('use strict')
        var.put('dP', var.get('require')(Js('./_object-dp')).get('f'))
        var.put('create', var.get('require')(Js('./_object-create')))
        var.put('redefineAll', var.get('require')(Js('./_redefine-all')))
        var.put('ctx', var.get('require')(Js('./_ctx')))
        var.put('anInstance', var.get('require')(Js('./_an-instance')))
        var.put('forOf', var.get('require')(Js('./_for-of')))
        var.put('$iterDefine', var.get('require')(Js('./_iter-define')))
        var.put('step', var.get('require')(Js('./_iter-step')))
        var.put('setSpecies', var.get('require')(Js('./_set-species')))
        var.put('DESCRIPTORS', var.get('require')(Js('./_descriptors')))
        var.put('fastKey', var.get('require')(Js('./_meta')).get('fastKey'))
        var.put('validate', var.get('require')(Js('./_validate-collection')))
        var.put('SIZE', (Js('_s') if var.get('DESCRIPTORS') else Js('size')))
        @Js
        def PyJs_getEntry_754_(that, key, this, arguments, var=var):
            var = Scope({'that':that, 'key':key, 'this':this, 'arguments':arguments, 'getEntry':PyJs_getEntry_754_}, var)
            var.registers(['entry', 'key', 'index', 'that'])
            var.put('index', var.get('fastKey')(var.get('key')))
            pass
            if PyJsStrictNeq(var.get('index'),Js('F')):
                return var.get('that').get('_i').get(var.get('index'))
            #for JS loop
            var.put('entry', var.get('that').get('_f'))
            while var.get('entry'):
                try:
                    if (var.get('entry').get('k')==var.get('key')):
                        return var.get('entry')
                finally:
                        var.put('entry', var.get('entry').get('n'))
        PyJs_getEntry_754_._set_name('getEntry')
        var.put('getEntry', PyJs_getEntry_754_)
        @Js
        def PyJs_getConstructor_755_(wrapper, NAME, IS_MAP, ADDER, this, arguments, var=var):
            var = Scope({'wrapper':wrapper, 'NAME':NAME, 'IS_MAP':IS_MAP, 'ADDER':ADDER, 'this':this, 'arguments':arguments, 'getConstructor':PyJs_getConstructor_755_}, var)
            var.registers(['IS_MAP', 'wrapper', 'NAME', 'C', 'ADDER'])
            @Js
            def PyJs_anonymous_756_(that, iterable, this, arguments, var=var):
                var = Scope({'that':that, 'iterable':iterable, 'this':this, 'arguments':arguments}, var)
                var.registers(['iterable', 'that'])
                var.get('anInstance')(var.get('that'), var.get('C'), var.get('NAME'), Js('_i'))
                var.get('that').put('_t', var.get('NAME'))
                var.get('that').put('_i', var.get('create')(var.get(u"null")))
                var.get('that').put('_f', var.get('undefined'))
                var.get('that').put('_l', var.get('undefined'))
                var.get('that').put(var.get('SIZE'), Js(0.0))
                if (var.get('iterable')!=var.get('undefined')):
                    var.get('forOf')(var.get('iterable'), var.get('IS_MAP'), var.get('that').get(var.get('ADDER')), var.get('that'))
            PyJs_anonymous_756_._set_name('anonymous')
            var.put('C', var.get('wrapper')(PyJs_anonymous_756_))
            @Js
            def PyJs_clear_757_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'clear':PyJs_clear_757_}, var)
                var.registers(['entry', 'data', 'that'])
                #for JS loop
                var.put('that', var.get('validate')(var.get(u"this"), var.get('NAME')))
                var.put('data', var.get('that').get('_i'))
                var.put('entry', var.get('that').get('_f'))
                while var.get('entry'):
                    try:
                        var.get('entry').put('r', Js(True))
                        if var.get('entry').get('p'):
                            var.get('entry').put('p', var.get('entry').get('p').put('n', var.get('undefined')))
                        var.get('data').delete(var.get('entry').get('i'))
                    finally:
                            var.put('entry', var.get('entry').get('n'))
                var.get('that').put('_f', var.get('that').put('_l', var.get('undefined')))
                var.get('that').put(var.get('SIZE'), Js(0.0))
            PyJs_clear_757_._set_name('clear')
            @Js
            def PyJs__delete_758_(key, this, arguments, var=var):
                var = Scope({'key':key, 'this':this, 'arguments':arguments, '_delete':PyJs__delete_758_}, var)
                var.registers(['entry', 'prev', 'that', 'key', 'next'])
                var.put('that', var.get('validate')(var.get(u"this"), var.get('NAME')))
                var.put('entry', var.get('getEntry')(var.get('that'), var.get('key')))
                if var.get('entry'):
                    var.put('next', var.get('entry').get('n'))
                    var.put('prev', var.get('entry').get('p'))
                    var.get('that').get('_i').delete(var.get('entry').get('i'))
                    var.get('entry').put('r', Js(True))
                    if var.get('prev'):
                        var.get('prev').put('n', var.get('next'))
                    if var.get('next'):
                        var.get('next').put('p', var.get('prev'))
                    if (var.get('that').get('_f')==var.get('entry')):
                        var.get('that').put('_f', var.get('next'))
                    if (var.get('that').get('_l')==var.get('entry')):
                        var.get('that').put('_l', var.get('prev'))
                    (var.get('that').put(var.get('SIZE'),Js(var.get('that').get(var.get('SIZE')).to_number())-Js(1))+Js(1))
                return var.get('entry').neg().neg()
            PyJs__delete_758_._set_name('_delete')
            @Js
            def PyJs_forEach_759_(callbackfn, this, arguments, var=var):
                var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'forEach':PyJs_forEach_759_}, var)
                var.registers(['entry', 'callbackfn', 'f'])
                var.get('validate')(var.get(u"this"), var.get('NAME'))
                var.put('f', var.get('ctx')(var.get('callbackfn'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')), Js(3.0)))
                pass
                while var.put('entry', (var.get('entry').get('n') if var.get('entry') else var.get(u"this").get('_f'))):
                    var.get('f')(var.get('entry').get('v'), var.get('entry').get('k'), var.get(u"this"))
                    while (var.get('entry') and var.get('entry').get('r')):
                        var.put('entry', var.get('entry').get('p'))
            PyJs_forEach_759_._set_name('forEach')
            @Js
            def PyJs_has_760_(key, this, arguments, var=var):
                var = Scope({'key':key, 'this':this, 'arguments':arguments, 'has':PyJs_has_760_}, var)
                var.registers(['key'])
                return var.get('getEntry')(var.get('validate')(var.get(u"this"), var.get('NAME')), var.get('key')).neg().neg()
            PyJs_has_760_._set_name('has')
            var.get('redefineAll')(var.get('C').get('prototype'), Js({'clear':PyJs_clear_757_,'delete':PyJs__delete_758_,'forEach':PyJs_forEach_759_,'has':PyJs_has_760_}))
            if var.get('DESCRIPTORS'):
                @Js
                def PyJs_get_761_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_761_}, var)
                    var.registers([])
                    return var.get('validate')(var.get(u"this"), var.get('NAME')).get(var.get('SIZE'))
                PyJs_get_761_._set_name('get')
                var.get('dP')(var.get('C').get('prototype'), Js('size'), Js({'get':PyJs_get_761_}))
            return var.get('C')
        PyJs_getConstructor_755_._set_name('getConstructor')
        @Js
        def PyJs_InlineNonPyName_762_(that, key, value, this, arguments, var=var):
            var = Scope({'that':that, 'key':key, 'value':value, 'this':this, 'arguments':arguments, 'def':PyJs_InlineNonPyName_762_}, var)
            var.registers(['entry', 'prev', 'that', 'key', 'index', 'value'])
            var.put('entry', var.get('getEntry')(var.get('that'), var.get('key')))
            pass
            if var.get('entry'):
                var.get('entry').put('v', var.get('value'))
            else:
                var.get('that').put('_l', var.put('entry', Js({'i':var.put('index', var.get('fastKey')(var.get('key'), Js(True))),'k':var.get('key'),'v':var.get('value'),'p':var.put('prev', var.get('that').get('_l')),'n':var.get('undefined'),'r':Js(False)})))
                if var.get('that').get('_f').neg():
                    var.get('that').put('_f', var.get('entry'))
                if var.get('prev'):
                    var.get('prev').put('n', var.get('entry'))
                (var.get('that').put(var.get('SIZE'),Js(var.get('that').get(var.get('SIZE')).to_number())+Js(1))-Js(1))
                if PyJsStrictNeq(var.get('index'),Js('F')):
                    var.get('that').get('_i').put(var.get('index'), var.get('entry'))
            return var.get('that')
        PyJs_InlineNonPyName_762_._set_name('def')
        @Js
        def PyJs_setStrong_763_(C, NAME, IS_MAP, this, arguments, var=var):
            var = Scope({'C':C, 'NAME':NAME, 'IS_MAP':IS_MAP, 'this':this, 'arguments':arguments, 'setStrong':PyJs_setStrong_763_}, var)
            var.registers(['NAME', 'IS_MAP', 'C'])
            @Js
            def PyJs_anonymous_764_(iterated, kind, this, arguments, var=var):
                var = Scope({'iterated':iterated, 'kind':kind, 'this':this, 'arguments':arguments}, var)
                var.registers(['kind', 'iterated'])
                var.get(u"this").put('_t', var.get('validate')(var.get('iterated'), var.get('NAME')))
                var.get(u"this").put('_k', var.get('kind'))
                var.get(u"this").put('_l', var.get('undefined'))
            PyJs_anonymous_764_._set_name('anonymous')
            @Js
            def PyJs_anonymous_765_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['entry', 'kind', 'that'])
                var.put('that', var.get(u"this"))
                var.put('kind', var.get('that').get('_k'))
                var.put('entry', var.get('that').get('_l'))
                while (var.get('entry') and var.get('entry').get('r')):
                    var.put('entry', var.get('entry').get('p'))
                if (var.get('that').get('_t').neg() or var.get('that').put('_l', var.put('entry', (var.get('entry').get('n') if var.get('entry') else var.get('that').get('_t').get('_f')))).neg()):
                    var.get('that').put('_t', var.get('undefined'))
                    return var.get('step')(Js(1.0))
                if (var.get('kind')==Js('keys')):
                    return var.get('step')(Js(0.0), var.get('entry').get('k'))
                if (var.get('kind')==Js('values')):
                    return var.get('step')(Js(0.0), var.get('entry').get('v'))
                return var.get('step')(Js(0.0), Js([var.get('entry').get('k'), var.get('entry').get('v')]))
            PyJs_anonymous_765_._set_name('anonymous')
            var.get('$iterDefine')(var.get('C'), var.get('NAME'), PyJs_anonymous_764_, PyJs_anonymous_765_, (Js('entries') if var.get('IS_MAP') else Js('values')), var.get('IS_MAP').neg(), Js(True))
            var.get('setSpecies')(var.get('NAME'))
        PyJs_setStrong_763_._set_name('setStrong')
        var.get('module').put('exports', Js({'getConstructor':PyJs_getConstructor_755_,'def':PyJs_InlineNonPyName_762_,'getEntry':var.get('getEntry'),'setStrong':PyJs_setStrong_763_}))
    PyJs_anonymous_753_._set_name('anonymous')
    @Js
    def PyJs_anonymous_766_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'classof', 'exports', 'from', 'require'])
        var.put('classof', var.get('require')(Js('./_classof')))
        var.put('from', var.get('require')(Js('./_array-from-iterable')))
        @Js
        def PyJs_anonymous_767_(NAME, this, arguments, var=var):
            var = Scope({'NAME':NAME, 'this':this, 'arguments':arguments}, var)
            var.registers(['NAME'])
            @Js
            def PyJs_toJSON_768_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'toJSON':PyJs_toJSON_768_}, var)
                var.registers([])
                if (var.get('classof')(var.get(u"this"))!=var.get('NAME')):
                    PyJsTempException = JsToPyException(var.get('TypeError')((var.get('NAME')+Js("#toJSON isn't generic"))))
                    raise PyJsTempException
                return var.get('from')(var.get(u"this"))
            PyJs_toJSON_768_._set_name('toJSON')
            return PyJs_toJSON_768_
        PyJs_anonymous_767_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_767_)
    PyJs_anonymous_766_._set_name('anonymous')
    @Js
    def PyJs_anonymous_769_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['createArrayMethod', 'uncaughtFrozenStore', 'module', 'findUncaughtFrozen', 'forOf', 'id', 'exports', 'getWeak', 'redefineAll', 'UncaughtFrozenStore', 'arrayFindIndex', 'anObject', 'validate', 'anInstance', '$has', 'require', 'isObject', 'arrayFind'])
        Js('use strict')
        var.put('redefineAll', var.get('require')(Js('./_redefine-all')))
        var.put('getWeak', var.get('require')(Js('./_meta')).get('getWeak'))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('anInstance', var.get('require')(Js('./_an-instance')))
        var.put('forOf', var.get('require')(Js('./_for-of')))
        var.put('createArrayMethod', var.get('require')(Js('./_array-methods')))
        var.put('$has', var.get('require')(Js('./_has')))
        var.put('validate', var.get('require')(Js('./_validate-collection')))
        var.put('arrayFind', var.get('createArrayMethod')(Js(5.0)))
        var.put('arrayFindIndex', var.get('createArrayMethod')(Js(6.0)))
        var.put('id', Js(0.0))
        @Js
        def PyJs_uncaughtFrozenStore_770_(that, this, arguments, var=var):
            var = Scope({'that':that, 'this':this, 'arguments':arguments, 'uncaughtFrozenStore':PyJs_uncaughtFrozenStore_770_}, var)
            var.registers(['that'])
            return (var.get('that').get('_l') or var.get('that').put('_l', var.get('UncaughtFrozenStore').create()))
        PyJs_uncaughtFrozenStore_770_._set_name('uncaughtFrozenStore')
        var.put('uncaughtFrozenStore', PyJs_uncaughtFrozenStore_770_)
        @Js
        def PyJs_UncaughtFrozenStore_771_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'UncaughtFrozenStore':PyJs_UncaughtFrozenStore_771_}, var)
            var.registers([])
            var.get(u"this").put('a', Js([]))
        PyJs_UncaughtFrozenStore_771_._set_name('UncaughtFrozenStore')
        var.put('UncaughtFrozenStore', PyJs_UncaughtFrozenStore_771_)
        @Js
        def PyJs_findUncaughtFrozen_772_(store, key, this, arguments, var=var):
            var = Scope({'store':store, 'key':key, 'this':this, 'arguments':arguments, 'findUncaughtFrozen':PyJs_findUncaughtFrozen_772_}, var)
            var.registers(['key', 'store'])
            @Js
            def PyJs_anonymous_773_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
                var.registers(['it'])
                return PyJsStrictEq(var.get('it').get('0'),var.get('key'))
            PyJs_anonymous_773_._set_name('anonymous')
            return var.get('arrayFind')(var.get('store').get('a'), PyJs_anonymous_773_)
        PyJs_findUncaughtFrozen_772_._set_name('findUncaughtFrozen')
        var.put('findUncaughtFrozen', PyJs_findUncaughtFrozen_772_)
        @Js
        def PyJs_get_774_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments, 'get':PyJs_get_774_}, var)
            var.registers(['entry', 'key'])
            var.put('entry', var.get('findUncaughtFrozen')(var.get(u"this"), var.get('key')))
            if var.get('entry'):
                return var.get('entry').get('1')
        PyJs_get_774_._set_name('get')
        @Js
        def PyJs_has_775_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments, 'has':PyJs_has_775_}, var)
            var.registers(['key'])
            return var.get('findUncaughtFrozen')(var.get(u"this"), var.get('key')).neg().neg()
        PyJs_has_775_._set_name('has')
        @Js
        def PyJs_set_776_(key, value, this, arguments, var=var):
            var = Scope({'key':key, 'value':value, 'this':this, 'arguments':arguments, 'set':PyJs_set_776_}, var)
            var.registers(['entry', 'key', 'value'])
            var.put('entry', var.get('findUncaughtFrozen')(var.get(u"this"), var.get('key')))
            if var.get('entry'):
                var.get('entry').put('1', var.get('value'))
            else:
                var.get(u"this").get('a').callprop('push', Js([var.get('key'), var.get('value')]))
        PyJs_set_776_._set_name('set')
        @Js
        def PyJs__delete_777_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments, '_delete':PyJs__delete_777_}, var)
            var.registers(['key', 'index'])
            @Js
            def PyJs_anonymous_778_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
                var.registers(['it'])
                return PyJsStrictEq(var.get('it').get('0'),var.get('key'))
            PyJs_anonymous_778_._set_name('anonymous')
            var.put('index', var.get('arrayFindIndex')(var.get(u"this").get('a'), PyJs_anonymous_778_))
            if (~var.get('index')):
                var.get(u"this").get('a').callprop('splice', var.get('index'), Js(1.0))
            return (~var.get('index')).neg().neg()
        PyJs__delete_777_._set_name('_delete')
        var.get('UncaughtFrozenStore').put('prototype', Js({'get':PyJs_get_774_,'has':PyJs_has_775_,'set':PyJs_set_776_,'delete':PyJs__delete_777_}))
        @Js
        def PyJs_getConstructor_779_(wrapper, NAME, IS_MAP, ADDER, this, arguments, var=var):
            var = Scope({'wrapper':wrapper, 'NAME':NAME, 'IS_MAP':IS_MAP, 'ADDER':ADDER, 'this':this, 'arguments':arguments, 'getConstructor':PyJs_getConstructor_779_}, var)
            var.registers(['IS_MAP', 'wrapper', 'NAME', 'C', 'ADDER'])
            @Js
            def PyJs_anonymous_780_(that, iterable, this, arguments, var=var):
                var = Scope({'that':that, 'iterable':iterable, 'this':this, 'arguments':arguments}, var)
                var.registers(['iterable', 'that'])
                var.get('anInstance')(var.get('that'), var.get('C'), var.get('NAME'), Js('_i'))
                var.get('that').put('_t', var.get('NAME'))
                var.get('that').put('_i', (var.put('id',Js(var.get('id').to_number())+Js(1))-Js(1)))
                var.get('that').put('_l', var.get('undefined'))
                if (var.get('iterable')!=var.get('undefined')):
                    var.get('forOf')(var.get('iterable'), var.get('IS_MAP'), var.get('that').get(var.get('ADDER')), var.get('that'))
            PyJs_anonymous_780_._set_name('anonymous')
            var.put('C', var.get('wrapper')(PyJs_anonymous_780_))
            @Js
            def PyJs__delete_781_(key, this, arguments, var=var):
                var = Scope({'key':key, 'this':this, 'arguments':arguments, '_delete':PyJs__delete_781_}, var)
                var.registers(['key', 'data'])
                if var.get('isObject')(var.get('key')).neg():
                    return Js(False)
                var.put('data', var.get('getWeak')(var.get('key')))
                if PyJsStrictEq(var.get('data'),Js(True)):
                    return var.get('uncaughtFrozenStore')(var.get('validate')(var.get(u"this"), var.get('NAME'))).callprop('delete', var.get('key'))
                return ((var.get('data') and var.get('$has')(var.get('data'), var.get(u"this").get('_i'))) and var.get('data').delete(var.get(u"this").get('_i')))
            PyJs__delete_781_._set_name('_delete')
            @Js
            def PyJs_has_782_(key, this, arguments, var=var):
                var = Scope({'key':key, 'this':this, 'arguments':arguments, 'has':PyJs_has_782_}, var)
                var.registers(['key', 'data'])
                if var.get('isObject')(var.get('key')).neg():
                    return Js(False)
                var.put('data', var.get('getWeak')(var.get('key')))
                if PyJsStrictEq(var.get('data'),Js(True)):
                    return var.get('uncaughtFrozenStore')(var.get('validate')(var.get(u"this"), var.get('NAME'))).callprop('has', var.get('key'))
                return (var.get('data') and var.get('$has')(var.get('data'), var.get(u"this").get('_i')))
            PyJs_has_782_._set_name('has')
            var.get('redefineAll')(var.get('C').get('prototype'), Js({'delete':PyJs__delete_781_,'has':PyJs_has_782_}))
            return var.get('C')
        PyJs_getConstructor_779_._set_name('getConstructor')
        @Js
        def PyJs_InlineNonPyName_783_(that, key, value, this, arguments, var=var):
            var = Scope({'that':that, 'key':key, 'value':value, 'this':this, 'arguments':arguments, 'def':PyJs_InlineNonPyName_783_}, var)
            var.registers(['key', 'data', 'value', 'that'])
            var.put('data', var.get('getWeak')(var.get('anObject')(var.get('key')), Js(True)))
            if PyJsStrictEq(var.get('data'),Js(True)):
                var.get('uncaughtFrozenStore')(var.get('that')).callprop('set', var.get('key'), var.get('value'))
            else:
                var.get('data').put(var.get('that').get('_i'), var.get('value'))
            return var.get('that')
        PyJs_InlineNonPyName_783_._set_name('def')
        var.get('module').put('exports', Js({'getConstructor':PyJs_getConstructor_779_,'def':PyJs_InlineNonPyName_783_,'ufstore':var.get('uncaughtFrozenStore')}))
    PyJs_anonymous_769_._set_name('anonymous')
    @Js
    def PyJs_anonymous_784_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'global', '$export', 'fails', 'forOf', 'exports', 'meta', 'redefineAll', 'redefine', 'anInstance', '$iterDetect', 'setToStringTag', 'inheritIfRequired', 'require', 'isObject'])
        Js('use strict')
        var.put('global', var.get('require')(Js('./_global')))
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('redefine', var.get('require')(Js('./_redefine')))
        var.put('redefineAll', var.get('require')(Js('./_redefine-all')))
        var.put('meta', var.get('require')(Js('./_meta')))
        var.put('forOf', var.get('require')(Js('./_for-of')))
        var.put('anInstance', var.get('require')(Js('./_an-instance')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('fails', var.get('require')(Js('./_fails')))
        var.put('$iterDetect', var.get('require')(Js('./_iter-detect')))
        var.put('setToStringTag', var.get('require')(Js('./_set-to-string-tag')))
        var.put('inheritIfRequired', var.get('require')(Js('./_inherit-if-required')))
        @Js
        def PyJs_anonymous_785_(NAME, wrapper, methods, common, IS_MAP, IS_WEAK, this, arguments, var=var):
            var = Scope({'NAME':NAME, 'wrapper':wrapper, 'methods':methods, 'common':common, 'IS_MAP':IS_MAP, 'IS_WEAK':IS_WEAK, 'this':this, 'arguments':arguments}, var)
            var.registers(['IS_WEAK', 'Base', 'common', 'instance', 'IS_MAP', 'O', 'fixMethod', 'wrapper', 'NAME', 'proto', 'HASNT_CHAINING', 'ACCEPT_ITERABLES', 'C', 'methods', 'BUGGY_ZERO', 'ADDER', 'THROWS_ON_PRIMITIVES'])
            var.put('Base', var.get('global').get(var.get('NAME')))
            var.put('C', var.get('Base'))
            var.put('ADDER', (Js('set') if var.get('IS_MAP') else Js('add')))
            var.put('proto', (var.get('C') and var.get('C').get('prototype')))
            var.put('O', Js({}))
            @Js
            def PyJs_fixMethod_786_(KEY, this, arguments, var=var):
                var = Scope({'KEY':KEY, 'this':this, 'arguments':arguments, 'fixMethod':PyJs_fixMethod_786_}, var)
                var.registers(['KEY', 'fn'])
                var.put('fn', var.get('proto').get(var.get('KEY')))
                @Js
                def PyJs_anonymous_787_(a, this, arguments, var=var):
                    var = Scope({'a':a, 'this':this, 'arguments':arguments}, var)
                    var.registers(['a'])
                    return (Js(False) if (var.get('IS_WEAK') and var.get('isObject')(var.get('a')).neg()) else var.get('fn').callprop('call', var.get(u"this"), (Js(0.0) if PyJsStrictEq(var.get('a'),Js(0.0)) else var.get('a'))))
                PyJs_anonymous_787_._set_name('anonymous')
                @Js
                def PyJs_has_788_(a, this, arguments, var=var):
                    var = Scope({'a':a, 'this':this, 'arguments':arguments, 'has':PyJs_has_788_}, var)
                    var.registers(['a'])
                    return (Js(False) if (var.get('IS_WEAK') and var.get('isObject')(var.get('a')).neg()) else var.get('fn').callprop('call', var.get(u"this"), (Js(0.0) if PyJsStrictEq(var.get('a'),Js(0.0)) else var.get('a'))))
                PyJs_has_788_._set_name('has')
                @Js
                def PyJs_get_789_(a, this, arguments, var=var):
                    var = Scope({'a':a, 'this':this, 'arguments':arguments, 'get':PyJs_get_789_}, var)
                    var.registers(['a'])
                    return (var.get('undefined') if (var.get('IS_WEAK') and var.get('isObject')(var.get('a')).neg()) else var.get('fn').callprop('call', var.get(u"this"), (Js(0.0) if PyJsStrictEq(var.get('a'),Js(0.0)) else var.get('a'))))
                PyJs_get_789_._set_name('get')
                @Js
                def PyJs_add_790_(a, this, arguments, var=var):
                    var = Scope({'a':a, 'this':this, 'arguments':arguments, 'add':PyJs_add_790_}, var)
                    var.registers(['a'])
                    var.get('fn').callprop('call', var.get(u"this"), (Js(0.0) if PyJsStrictEq(var.get('a'),Js(0.0)) else var.get('a')))
                    return var.get(u"this")
                PyJs_add_790_._set_name('add')
                @Js
                def PyJs_set_791_(a, b, this, arguments, var=var):
                    var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments, 'set':PyJs_set_791_}, var)
                    var.registers(['a', 'b'])
                    var.get('fn').callprop('call', var.get(u"this"), (Js(0.0) if PyJsStrictEq(var.get('a'),Js(0.0)) else var.get('a')), var.get('b'))
                    return var.get(u"this")
                PyJs_set_791_._set_name('set')
                var.get('redefine')(var.get('proto'), var.get('KEY'), (PyJs_anonymous_787_ if (var.get('KEY')==Js('delete')) else (PyJs_has_788_ if (var.get('KEY')==Js('has')) else (PyJs_get_789_ if (var.get('KEY')==Js('get')) else (PyJs_add_790_ if (var.get('KEY')==Js('add')) else PyJs_set_791_)))))
            PyJs_fixMethod_786_._set_name('fixMethod')
            var.put('fixMethod', PyJs_fixMethod_786_)
            @Js
            def PyJs_anonymous_792_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('C').create().callprop('entries').callprop('next')
            PyJs_anonymous_792_._set_name('anonymous')
            if ((var.get('C',throw=False).typeof()!=Js('function')) or (var.get('IS_WEAK') or (var.get('proto').get('forEach') and var.get('fails')(PyJs_anonymous_792_).neg())).neg()):
                var.put('C', var.get('common').callprop('getConstructor', var.get('wrapper'), var.get('NAME'), var.get('IS_MAP'), var.get('ADDER')))
                var.get('redefineAll')(var.get('C').get('prototype'), var.get('methods'))
                var.get('meta').put('NEED', Js(True))
            else:
                var.put('instance', var.get('C').create())
                var.put('HASNT_CHAINING', (var.get('instance').callprop(var.get('ADDER'), (Js({}) if var.get('IS_WEAK') else (-Js(0.0))), Js(1.0))!=var.get('instance')))
                @Js
                def PyJs_anonymous_793_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.get('instance').callprop('has', Js(1.0))
                PyJs_anonymous_793_._set_name('anonymous')
                var.put('THROWS_ON_PRIMITIVES', var.get('fails')(PyJs_anonymous_793_))
                @Js
                def PyJs_anonymous_794_(iter, this, arguments, var=var):
                    var = Scope({'iter':iter, 'this':this, 'arguments':arguments}, var)
                    var.registers(['iter'])
                    var.get('C').create(var.get('iter'))
                PyJs_anonymous_794_._set_name('anonymous')
                var.put('ACCEPT_ITERABLES', var.get('$iterDetect')(PyJs_anonymous_794_))
                @Js
                def PyJs_anonymous_795_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers(['$instance', 'index'])
                    var.put('$instance', var.get('C').create())
                    var.put('index', Js(5.0))
                    while (var.put('index',Js(var.get('index').to_number())-Js(1))+Js(1)):
                        var.get('$instance').callprop(var.get('ADDER'), var.get('index'), var.get('index'))
                    return var.get('$instance').callprop('has', (-Js(0.0))).neg()
                PyJs_anonymous_795_._set_name('anonymous')
                var.put('BUGGY_ZERO', (var.get('IS_WEAK').neg() and var.get('fails')(PyJs_anonymous_795_)))
                if var.get('ACCEPT_ITERABLES').neg():
                    @Js
                    def PyJs_anonymous_796_(target, iterable, this, arguments, var=var):
                        var = Scope({'target':target, 'iterable':iterable, 'this':this, 'arguments':arguments}, var)
                        var.registers(['target', 'iterable', 'that'])
                        var.get('anInstance')(var.get('target'), var.get('C'), var.get('NAME'))
                        var.put('that', var.get('inheritIfRequired')(var.get('Base').create(), var.get('target'), var.get('C')))
                        if (var.get('iterable')!=var.get('undefined')):
                            var.get('forOf')(var.get('iterable'), var.get('IS_MAP'), var.get('that').get(var.get('ADDER')), var.get('that'))
                        return var.get('that')
                    PyJs_anonymous_796_._set_name('anonymous')
                    var.put('C', var.get('wrapper')(PyJs_anonymous_796_))
                    var.get('C').put('prototype', var.get('proto'))
                    var.get('proto').put('constructor', var.get('C'))
                if (var.get('THROWS_ON_PRIMITIVES') or var.get('BUGGY_ZERO')):
                    var.get('fixMethod')(Js('delete'))
                    var.get('fixMethod')(Js('has'))
                    (var.get('IS_MAP') and var.get('fixMethod')(Js('get')))
                if (var.get('BUGGY_ZERO') or var.get('HASNT_CHAINING')):
                    var.get('fixMethod')(var.get('ADDER'))
                if (var.get('IS_WEAK') and var.get('proto').get('clear')):
                    var.get('proto').delete('clear')
            var.get('setToStringTag')(var.get('C'), var.get('NAME'))
            var.get('O').put(var.get('NAME'), var.get('C'))
            var.get('$export')(((var.get('$export').get('G')+var.get('$export').get('W'))+(var.get('$export').get('F')*(var.get('C')!=var.get('Base')))), var.get('O'))
            if var.get('IS_WEAK').neg():
                var.get('common').callprop('setStrong', var.get('C'), var.get('NAME'), var.get('IS_MAP'))
            return var.get('C')
        PyJs_anonymous_785_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_785_)
    PyJs_anonymous_784_._set_name('anonymous')
    @Js
    def PyJs_anonymous_797_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports', 'core'])
        var.put('core', var.get('module').put('exports', Js({'version':Js('2.6.11')})))
        if (var.get('__e',throw=False).typeof()==Js('number')):
            var.put('__e', var.get('core'))
    PyJs_anonymous_797_._set_name('anonymous')
    @Js
    def PyJs_anonymous_798_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$defineProperty', 'exports', 'createDesc', 'require'])
        Js('use strict')
        var.put('$defineProperty', var.get('require')(Js('./_object-dp')))
        var.put('createDesc', var.get('require')(Js('./_property-desc')))
        @Js
        def PyJs_anonymous_799_(object, index, value, this, arguments, var=var):
            var = Scope({'object':object, 'index':index, 'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['object', 'index', 'value'])
            if var.get('object').contains(var.get('index')):
                var.get('$defineProperty').callprop('f', var.get('object'), var.get('index'), var.get('createDesc')(Js(0.0), var.get('value')))
            else:
                var.get('object').put(var.get('index'), var.get('value'))
        PyJs_anonymous_799_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_799_)
    PyJs_anonymous_798_._set_name('anonymous')
    @Js
    def PyJs_anonymous_800_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'aFunction', 'exports'])
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        @Js
        def PyJs_anonymous_801_(fn, that, length, this, arguments, var=var):
            var = Scope({'fn':fn, 'that':that, 'length':length, 'this':this, 'arguments':arguments}, var)
            var.registers(['length', 'fn', 'that'])
            var.get('aFunction')(var.get('fn'))
            if PyJsStrictEq(var.get('that'),var.get('undefined')):
                return var.get('fn')
            while 1:
                SWITCHED = False
                CONDITION = (var.get('length'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(1.0)):
                    SWITCHED = True
                    @Js
                    def PyJs_anonymous_802_(a, this, arguments, var=var):
                        var = Scope({'a':a, 'this':this, 'arguments':arguments}, var)
                        var.registers(['a'])
                        return var.get('fn').callprop('call', var.get('that'), var.get('a'))
                    PyJs_anonymous_802_._set_name('anonymous')
                    return PyJs_anonymous_802_
                if SWITCHED or PyJsStrictEq(CONDITION, Js(2.0)):
                    SWITCHED = True
                    @Js
                    def PyJs_anonymous_803_(a, b, this, arguments, var=var):
                        var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments}, var)
                        var.registers(['a', 'b'])
                        return var.get('fn').callprop('call', var.get('that'), var.get('a'), var.get('b'))
                    PyJs_anonymous_803_._set_name('anonymous')
                    return PyJs_anonymous_803_
                if SWITCHED or PyJsStrictEq(CONDITION, Js(3.0)):
                    SWITCHED = True
                    @Js
                    def PyJs_anonymous_804_(a, b, c, this, arguments, var=var):
                        var = Scope({'a':a, 'b':b, 'c':c, 'this':this, 'arguments':arguments}, var)
                        var.registers(['c', 'a', 'b'])
                        return var.get('fn').callprop('call', var.get('that'), var.get('a'), var.get('b'), var.get('c'))
                    PyJs_anonymous_804_._set_name('anonymous')
                    return PyJs_anonymous_804_
                SWITCHED = True
                break
            @Js
            def PyJs_anonymous_805_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return var.get('fn').callprop('apply', var.get('that'), var.get('arguments'))
            PyJs_anonymous_805_._set_name('anonymous')
            return PyJs_anonymous_805_
        PyJs_anonymous_801_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_801_)
    PyJs_anonymous_800_._set_name('anonymous')
    @Js
    def PyJs_anonymous_806_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'fails', 'exports', 'getTime', 'lz', 'require', '$toISOString'])
        Js('use strict')
        var.put('fails', var.get('require')(Js('./_fails')))
        var.put('getTime', var.get('Date').get('prototype').get('getTime'))
        var.put('$toISOString', var.get('Date').get('prototype').get('toISOString'))
        @Js
        def PyJs_lz_807_(num, this, arguments, var=var):
            var = Scope({'num':num, 'this':this, 'arguments':arguments, 'lz':PyJs_lz_807_}, var)
            var.registers(['num'])
            return (var.get('num') if (var.get('num')>Js(9.0)) else (Js('0')+var.get('num')))
        PyJs_lz_807_._set_name('lz')
        var.put('lz', PyJs_lz_807_)
        @Js
        def PyJs_toISOString_808_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'toISOString':PyJs_toISOString_808_}, var)
            var.registers(['d', 'y', 's', 'm'])
            if var.get('isFinite')(var.get('getTime').callprop('call', var.get(u"this"))).neg():
                PyJsTempException = JsToPyException(var.get('RangeError')(Js('Invalid time value')))
                raise PyJsTempException
            var.put('d', var.get(u"this"))
            var.put('y', var.get('d').callprop('getUTCFullYear'))
            var.put('m', var.get('d').callprop('getUTCMilliseconds'))
            var.put('s', (Js('-') if (var.get('y')<Js(0.0)) else (Js('+') if (var.get('y')>Js(9999.0)) else Js(''))))
            def PyJs_LONG_809_(var=var):
                return (((((((((var.get('s')+(Js('00000')+var.get('Math').callprop('abs', var.get('y'))).callprop('slice', ((-Js(6.0)) if var.get('s') else (-Js(4.0)))))+Js('-'))+var.get('lz')((var.get('d').callprop('getUTCMonth')+Js(1.0))))+Js('-'))+var.get('lz')(var.get('d').callprop('getUTCDate')))+Js('T'))+var.get('lz')(var.get('d').callprop('getUTCHours')))+Js(':'))+var.get('lz')(var.get('d').callprop('getUTCMinutes')))
            return (((((PyJs_LONG_809_()+Js(':'))+var.get('lz')(var.get('d').callprop('getUTCSeconds')))+Js('.'))+(var.get('m') if (var.get('m')>Js(99.0)) else (Js('0')+var.get('lz')(var.get('m')))))+Js('Z'))
        PyJs_toISOString_808_._set_name('toISOString')
        @Js
        def PyJs_anonymous_810_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return (var.get('$toISOString').callprop('call', var.get('Date').create(((-Js(50000000000000.0))-Js(1.0))))!=Js('0385-07-25T07:06:39.999Z'))
        PyJs_anonymous_810_._set_name('anonymous')
        @Js
        def PyJs_anonymous_811_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('$toISOString').callprop('call', var.get('Date').create(var.get('NaN')))
        PyJs_anonymous_811_._set_name('anonymous')
        var.get('module').put('exports', (PyJs_toISOString_808_ if (var.get('fails')(PyJs_anonymous_810_) or var.get('fails')(PyJs_anonymous_811_).neg()) else var.get('$toISOString')))
    PyJs_anonymous_806_._set_name('anonymous')
    @Js
    def PyJs_anonymous_812_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'toPrimitive', 'exports', 'anObject', 'NUMBER', 'require'])
        Js('use strict')
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('toPrimitive', var.get('require')(Js('./_to-primitive')))
        var.put('NUMBER', Js('number'))
        @Js
        def PyJs_anonymous_813_(hint, this, arguments, var=var):
            var = Scope({'hint':hint, 'this':this, 'arguments':arguments}, var)
            var.registers(['hint'])
            if ((PyJsStrictNeq(var.get('hint'),Js('string')) and PyJsStrictNeq(var.get('hint'),var.get('NUMBER'))) and PyJsStrictNeq(var.get('hint'),Js('default'))):
                PyJsTempException = JsToPyException(var.get('TypeError')(Js('Incorrect hint')))
                raise PyJsTempException
            return var.get('toPrimitive')(var.get('anObject')(var.get(u"this")), (var.get('hint')!=var.get('NUMBER')))
        PyJs_anonymous_813_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_813_)
    PyJs_anonymous_812_._set_name('anonymous')
    @Js
    def PyJs_anonymous_814_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_815_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            if (var.get('it')==var.get('undefined')):
                PyJsTempException = JsToPyException(var.get('TypeError')((Js("Can't call method on  ")+var.get('it'))))
                raise PyJsTempException
            return var.get('it')
        PyJs_anonymous_815_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_815_)
    PyJs_anonymous_814_._set_name('anonymous')
    @Js
    def PyJs_anonymous_816_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_817_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_get_818_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_818_}, var)
                var.registers([])
                return Js(7.0)
            PyJs_get_818_._set_name('get')
            return (var.get('Object').callprop('defineProperty', Js({}), Js('a'), Js({'get':PyJs_get_818_})).get('a')!=Js(7.0))
        PyJs_anonymous_817_._set_name('anonymous')
        var.get('module').put('exports', var.get('require')(Js('./_fails'))(PyJs_anonymous_817_).neg())
    PyJs_anonymous_816_._set_name('anonymous')
    @Js
    def PyJs_anonymous_819_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'document', 'is', 'require', 'isObject'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('document', var.get('require')(Js('./_global')).get('document'))
        var.put('is', (var.get('isObject')(var.get('document')) and var.get('isObject')(var.get('document').get('createElement'))))
        @Js
        def PyJs_anonymous_820_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return (var.get('document').callprop('createElement', var.get('it')) if var.get('is') else Js({}))
        PyJs_anonymous_820_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_820_)
    PyJs_anonymous_819_._set_name('anonymous')
    @Js
    def PyJs_anonymous_821_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('module').put('exports', Js('constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf').callprop('split', Js(',')))
    PyJs_anonymous_821_._set_name('anonymous')
    @Js
    def PyJs_anonymous_822_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'pIE', 'exports', 'gOPS', 'require', 'getKeys'])
        var.put('getKeys', var.get('require')(Js('./_object-keys')))
        var.put('gOPS', var.get('require')(Js('./_object-gops')))
        var.put('pIE', var.get('require')(Js('./_object-pie')))
        @Js
        def PyJs_anonymous_823_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'isEnum', 'key', 'symbols', 'it', 'getSymbols', 'result'])
            var.put('result', var.get('getKeys')(var.get('it')))
            var.put('getSymbols', var.get('gOPS').get('f'))
            if var.get('getSymbols'):
                var.put('symbols', var.get('getSymbols')(var.get('it')))
                var.put('isEnum', var.get('pIE').get('f'))
                var.put('i', Js(0.0))
                pass
                while (var.get('symbols').get('length')>var.get('i')):
                    if var.get('isEnum').callprop('call', var.get('it'), var.put('key', var.get('symbols').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))):
                        var.get('result').callprop('push', var.get('key'))
            return var.get('result')
        PyJs_anonymous_823_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_823_)
    PyJs_anonymous_822_._set_name('anonymous')
    @Js
    def PyJs_anonymous_824_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'global', '$export', 'exports', 'redefine', 'core', 'PROTOTYPE', 'ctx', 'hide', 'require'])
        var.put('global', var.get('require')(Js('./_global')))
        var.put('core', var.get('require')(Js('./_core')))
        var.put('hide', var.get('require')(Js('./_hide')))
        var.put('redefine', var.get('require')(Js('./_redefine')))
        var.put('ctx', var.get('require')(Js('./_ctx')))
        var.put('PROTOTYPE', Js('prototype'))
        @Js
        def PyJs_InlineNonPyName_825_(type, name, source, this, arguments, var=var):
            var = Scope({'type':type, 'name':name, 'source':source, 'this':this, 'arguments':arguments, '$export':PyJs_InlineNonPyName_825_}, var)
            var.registers(['IS_PROTO', 'IS_FORCED', 'out', 'source', 'IS_STATIC', 'exports', 'target', 'expProto', 'key', 'own', 'IS_BIND', 'IS_GLOBAL', 'exp', 'name', 'type'])
            var.put('IS_FORCED', (var.get('type')&var.get('$export').get('F')))
            var.put('IS_GLOBAL', (var.get('type')&var.get('$export').get('G')))
            var.put('IS_STATIC', (var.get('type')&var.get('$export').get('S')))
            var.put('IS_PROTO', (var.get('type')&var.get('$export').get('P')))
            var.put('IS_BIND', (var.get('type')&var.get('$export').get('B')))
            var.put('target', (var.get('global') if var.get('IS_GLOBAL') else ((var.get('global').get(var.get('name')) or var.get('global').put(var.get('name'), Js({}))) if var.get('IS_STATIC') else (var.get('global').get(var.get('name')) or Js({})).get(var.get('PROTOTYPE')))))
            var.put('exports', (var.get('core') if var.get('IS_GLOBAL') else (var.get('core').get(var.get('name')) or var.get('core').put(var.get('name'), Js({})))))
            var.put('expProto', (var.get('exports').get(var.get('PROTOTYPE')) or var.get('exports').put(var.get('PROTOTYPE'), Js({}))))
            pass
            if var.get('IS_GLOBAL'):
                var.put('source', var.get('name'))
            for PyJsTemp in var.get('source'):
                var.put('key', PyJsTemp)
                var.put('own', ((var.get('IS_FORCED').neg() and var.get('target')) and PyJsStrictNeq(var.get('target').get(var.get('key')),var.get('undefined'))))
                var.put('out', (var.get('target') if var.get('own') else var.get('source')).get(var.get('key')))
                var.put('exp', (var.get('ctx')(var.get('out'), var.get('global')) if (var.get('IS_BIND') and var.get('own')) else (var.get('ctx')(var.get('Function').get('call'), var.get('out')) if (var.get('IS_PROTO') and (var.get('out',throw=False).typeof()==Js('function'))) else var.get('out'))))
                if var.get('target'):
                    var.get('redefine')(var.get('target'), var.get('key'), var.get('out'), (var.get('type')&var.get('$export').get('U')))
                if (var.get('exports').get(var.get('key'))!=var.get('out')):
                    var.get('hide')(var.get('exports'), var.get('key'), var.get('exp'))
                if (var.get('IS_PROTO') and (var.get('expProto').get(var.get('key'))!=var.get('out'))):
                    var.get('expProto').put(var.get('key'), var.get('out'))
        PyJs_InlineNonPyName_825_._set_name('$export')
        var.put('$export', PyJs_InlineNonPyName_825_)
        var.get('global').put('core', var.get('core'))
        var.get('$export').put('F', Js(1.0))
        var.get('$export').put('G', Js(2.0))
        var.get('$export').put('S', Js(4.0))
        var.get('$export').put('P', Js(8.0))
        var.get('$export').put('B', Js(16.0))
        var.get('$export').put('W', Js(32.0))
        var.get('$export').put('U', Js(64.0))
        var.get('$export').put('R', Js(128.0))
        var.get('module').put('exports', var.get('$export'))
    PyJs_anonymous_824_._set_name('anonymous')
    @Js
    def PyJs_anonymous_826_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'MATCH'])
        var.put('MATCH', var.get('require')(Js('./_wks'))(Js('match')))
        @Js
        def PyJs_anonymous_827_(KEY, this, arguments, var=var):
            var = Scope({'KEY':KEY, 'this':this, 'arguments':arguments}, var)
            var.registers(['re', 'KEY'])
            var.put('re', JsRegExp('/./'))
            try:
                Js('/./').callprop(var.get('KEY'), var.get('re'))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_8736843 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    try:
                        var.get('re').put(var.get('MATCH'), Js(False))
                        return Js('/./').callprop(var.get('KEY'), var.get('re')).neg()
                    except PyJsException as PyJsTempException:
                        PyJsHolder_66_41052480 = var.own.get('f')
                        var.force_own_put('f', PyExceptionToJs(PyJsTempException))
                        try:
                            pass
                        finally:
                            if PyJsHolder_66_41052480 is not None:
                                var.own['f'] = PyJsHolder_66_41052480
                            else:
                                del var.own['f']
                            del PyJsHolder_66_41052480
                finally:
                    if PyJsHolder_65_8736843 is not None:
                        var.own['e'] = PyJsHolder_65_8736843
                    else:
                        del var.own['e']
                    del PyJsHolder_65_8736843
            return Js(True)
        PyJs_anonymous_827_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_827_)
    PyJs_anonymous_826_._set_name('anonymous')
    @Js
    def PyJs_anonymous_828_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_829_(exec, this, arguments, var=var):
            var = Scope({'exec':exec, 'this':this, 'arguments':arguments}, var)
            var.registers(['exec'])
            try:
                return var.get('exec')().neg().neg()
            except PyJsException as PyJsTempException:
                PyJsHolder_65_35990106 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    return Js(True)
                finally:
                    if PyJsHolder_65_35990106 is not None:
                        var.own['e'] = PyJsHolder_65_35990106
                    else:
                        del var.own['e']
                    del PyJsHolder_65_35990106
        PyJs_anonymous_829_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_829_)
    PyJs_anonymous_828_._set_name('anonymous')
    @Js
    def PyJs_anonymous_830_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'fails', 'wks', 'exports', 'SPECIES', 'redefine', 'defined', 'REPLACE_SUPPORTS_NAMED_GROUPS', 'require', 'regexpExec', 'hide', 'SPLIT_WORKS_WITH_OVERWRITTEN_EXEC'])
        Js('use strict')
        var.get('require')(Js('./es6.regexp.exec'))
        var.put('redefine', var.get('require')(Js('./_redefine')))
        var.put('hide', var.get('require')(Js('./_hide')))
        var.put('fails', var.get('require')(Js('./_fails')))
        var.put('defined', var.get('require')(Js('./_defined')))
        var.put('wks', var.get('require')(Js('./_wks')))
        var.put('regexpExec', var.get('require')(Js('./_regexp-exec')))
        var.put('SPECIES', var.get('wks')(Js('species')))
        @Js
        def PyJs_anonymous_831_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['re'])
            var.put('re', JsRegExp('/./'))
            @Js
            def PyJs_anonymous_832_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['result'])
                var.put('result', Js([]))
                var.get('result').put('groups', Js({'a':Js('7')}))
                return var.get('result')
            PyJs_anonymous_832_._set_name('anonymous')
            var.get('re').put('exec', PyJs_anonymous_832_)
            return PyJsStrictNeq(Js('').callprop('replace', var.get('re'), Js('$<a>')),Js('7'))
        PyJs_anonymous_831_._set_name('anonymous')
        var.put('REPLACE_SUPPORTS_NAMED_GROUPS', var.get('fails')(PyJs_anonymous_831_).neg())
        @Js
        def PyJs_anonymous_833_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['re', 'result', 'originalExec'])
            var.put('re', JsRegExp('/(?:)/'))
            var.put('originalExec', var.get('re').get('exec'))
            @Js
            def PyJs_anonymous_834_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return var.get('originalExec').callprop('apply', var.get(u"this"), var.get('arguments'))
            PyJs_anonymous_834_._set_name('anonymous')
            var.get('re').put('exec', PyJs_anonymous_834_)
            var.put('result', Js('ab').callprop('split', var.get('re')))
            return ((PyJsStrictEq(var.get('result').get('length'),Js(2.0)) and PyJsStrictEq(var.get('result').get('0'),Js('a'))) and PyJsStrictEq(var.get('result').get('1'),Js('b')))
        PyJs_anonymous_833_._set_name('anonymous')
        var.put('SPLIT_WORKS_WITH_OVERWRITTEN_EXEC', PyJs_anonymous_833_())
        @Js
        def PyJs_anonymous_835_(KEY, length, exec, this, arguments, var=var):
            var = Scope({'KEY':KEY, 'length':length, 'exec':exec, 'this':this, 'arguments':arguments}, var)
            var.registers(['DELEGATES_TO_EXEC', 'rxfn', 'DELEGATES_TO_SYMBOL', 'SYMBOL', 'fns', 'length', 'nativeRegExpMethod', 'KEY', 'exec', 'strfn'])
            var.put('SYMBOL', var.get('wks')(var.get('KEY')))
            @Js
            def PyJs_anonymous_836_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['O'])
                var.put('O', Js({}))
                @Js
                def PyJs_anonymous_837_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    return Js(7.0)
                PyJs_anonymous_837_._set_name('anonymous')
                var.get('O').put(var.get('SYMBOL'), PyJs_anonymous_837_)
                return (Js('').callprop(var.get('KEY'), var.get('O'))!=Js(7.0))
            PyJs_anonymous_836_._set_name('anonymous')
            var.put('DELEGATES_TO_SYMBOL', var.get('fails')(PyJs_anonymous_836_).neg())
            @Js
            def PyJs_anonymous_838_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['re', 'execCalled'])
                var.put('execCalled', Js(False))
                var.put('re', JsRegExp('/a/'))
                @Js
                def PyJs_anonymous_839_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.put('execCalled', Js(True))
                    return var.get(u"null")
                PyJs_anonymous_839_._set_name('anonymous')
                var.get('re').put('exec', PyJs_anonymous_839_)
                if PyJsStrictEq(var.get('KEY'),Js('split')):
                    var.get('re').put('constructor', Js({}))
                    @Js
                    def PyJs_anonymous_840_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return var.get('re')
                    PyJs_anonymous_840_._set_name('anonymous')
                    var.get('re').get('constructor').put(var.get('SPECIES'), PyJs_anonymous_840_)
                var.get('re').callprop(var.get('SYMBOL'), Js(''))
                return var.get('execCalled').neg()
            PyJs_anonymous_838_._set_name('anonymous')
            var.put('DELEGATES_TO_EXEC', (var.get('fails')(PyJs_anonymous_838_).neg() if var.get('DELEGATES_TO_SYMBOL') else var.get('undefined')))
            if (((var.get('DELEGATES_TO_SYMBOL').neg() or var.get('DELEGATES_TO_EXEC').neg()) or (PyJsStrictEq(var.get('KEY'),Js('replace')) and var.get('REPLACE_SUPPORTS_NAMED_GROUPS').neg())) or (PyJsStrictEq(var.get('KEY'),Js('split')) and var.get('SPLIT_WORKS_WITH_OVERWRITTEN_EXEC').neg())):
                var.put('nativeRegExpMethod', JsRegExp('/./').get(var.get('SYMBOL')))
                @Js
                def PyJs_maybeCallNative_841_(nativeMethod, regexp, str, arg2, forceStringMethod, this, arguments, var=var):
                    var = Scope({'nativeMethod':nativeMethod, 'regexp':regexp, 'str':str, 'arg2':arg2, 'forceStringMethod':forceStringMethod, 'this':this, 'arguments':arguments, 'maybeCallNative':PyJs_maybeCallNative_841_}, var)
                    var.registers(['str', 'regexp', 'forceStringMethod', 'arg2', 'nativeMethod'])
                    if PyJsStrictEq(var.get('regexp').get('exec'),var.get('regexpExec')):
                        if (var.get('DELEGATES_TO_SYMBOL') and var.get('forceStringMethod').neg()):
                            return Js({'done':Js(True),'value':var.get('nativeRegExpMethod').callprop('call', var.get('regexp'), var.get('str'), var.get('arg2'))})
                        return Js({'done':Js(True),'value':var.get('nativeMethod').callprop('call', var.get('str'), var.get('regexp'), var.get('arg2'))})
                    return Js({'done':Js(False)})
                PyJs_maybeCallNative_841_._set_name('maybeCallNative')
                var.put('fns', var.get('exec')(var.get('defined'), var.get('SYMBOL'), Js('').get(var.get('KEY')), PyJs_maybeCallNative_841_))
                var.put('strfn', var.get('fns').get('0'))
                var.put('rxfn', var.get('fns').get('1'))
                var.get('redefine')(var.get('String').get('prototype'), var.get('KEY'), var.get('strfn'))
                @Js
                def PyJs_anonymous_842_(string, arg, this, arguments, var=var):
                    var = Scope({'string':string, 'arg':arg, 'this':this, 'arguments':arguments}, var)
                    var.registers(['arg', 'string'])
                    return var.get('rxfn').callprop('call', var.get('string'), var.get(u"this"), var.get('arg'))
                PyJs_anonymous_842_._set_name('anonymous')
                @Js
                def PyJs_anonymous_843_(string, this, arguments, var=var):
                    var = Scope({'string':string, 'this':this, 'arguments':arguments}, var)
                    var.registers(['string'])
                    return var.get('rxfn').callprop('call', var.get('string'), var.get(u"this"))
                PyJs_anonymous_843_._set_name('anonymous')
                var.get('hide')(var.get('RegExp').get('prototype'), var.get('SYMBOL'), (PyJs_anonymous_842_ if (var.get('length')==Js(2.0)) else PyJs_anonymous_843_))
        PyJs_anonymous_835_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_835_)
    PyJs_anonymous_830_._set_name('anonymous')
    @Js
    def PyJs_anonymous_844_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'anObject', 'module', 'exports'])
        Js('use strict')
        var.put('anObject', var.get('require')(Js('./_an-object')))
        @Js
        def PyJs_anonymous_845_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['result', 'that'])
            var.put('that', var.get('anObject')(var.get(u"this")))
            var.put('result', Js(''))
            if var.get('that').get('global'):
                var.put('result', Js('g'), '+')
            if var.get('that').get('ignoreCase'):
                var.put('result', Js('i'), '+')
            if var.get('that').get('multiline'):
                var.put('result', Js('m'), '+')
            if var.get('that').get('unicode'):
                var.put('result', Js('u'), '+')
            if var.get('that').get('sticky'):
                var.put('result', Js('y'), '+')
            return var.get('result')
        PyJs_anonymous_845_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_845_)
    PyJs_anonymous_844_._set_name('anonymous')
    @Js
    def PyJs_anonymous_846_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['IS_CONCAT_SPREADABLE', 'ctx', 'module', 'exports', 'isArray', 'flattenIntoArray', 'isObject', 'require', 'toLength'])
        @Js
        def PyJsHoisted_flattenIntoArray_(target, original, source, sourceLen, start, depth, mapper, thisArg, this, arguments, var=var):
            var = Scope({'target':target, 'original':original, 'source':source, 'sourceLen':sourceLen, 'start':start, 'depth':depth, 'mapper':mapper, 'thisArg':thisArg, 'this':this, 'arguments':arguments}, var)
            var.registers(['depth', 'source', 'sourceLen', 'original', 'start', 'target', 'element', 'spreadable', 'thisArg', 'targetIndex', 'mapFn', 'sourceIndex', 'mapper'])
            var.put('targetIndex', var.get('start'))
            var.put('sourceIndex', Js(0.0))
            var.put('mapFn', (var.get('ctx')(var.get('mapper'), var.get('thisArg'), Js(3.0)) if var.get('mapper') else Js(False)))
            pass
            while (var.get('sourceIndex')<var.get('sourceLen')):
                if var.get('source').contains(var.get('sourceIndex')):
                    var.put('element', (var.get('mapFn')(var.get('source').get(var.get('sourceIndex')), var.get('sourceIndex'), var.get('original')) if var.get('mapFn') else var.get('source').get(var.get('sourceIndex'))))
                    var.put('spreadable', Js(False))
                    if var.get('isObject')(var.get('element')):
                        var.put('spreadable', var.get('element').get(var.get('IS_CONCAT_SPREADABLE')))
                        var.put('spreadable', (var.get('spreadable').neg().neg() if PyJsStrictNeq(var.get('spreadable'),var.get('undefined')) else var.get('isArray')(var.get('element'))))
                    if (var.get('spreadable') and (var.get('depth')>Js(0.0))):
                        var.put('targetIndex', (var.get('flattenIntoArray')(var.get('target'), var.get('original'), var.get('element'), var.get('toLength')(var.get('element').get('length')), var.get('targetIndex'), (var.get('depth')-Js(1.0)))-Js(1.0)))
                    else:
                        if (var.get('targetIndex')>=Js(9007199254740991)):
                            PyJsTempException = JsToPyException(var.get('TypeError')())
                            raise PyJsTempException
                        var.get('target').put(var.get('targetIndex'), var.get('element'))
                    (var.put('targetIndex',Js(var.get('targetIndex').to_number())+Js(1))-Js(1))
                (var.put('sourceIndex',Js(var.get('sourceIndex').to_number())+Js(1))-Js(1))
            return var.get('targetIndex')
        PyJsHoisted_flattenIntoArray_.func_name = 'flattenIntoArray'
        var.put('flattenIntoArray', PyJsHoisted_flattenIntoArray_)
        Js('use strict')
        var.put('isArray', var.get('require')(Js('./_is-array')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('ctx', var.get('require')(Js('./_ctx')))
        var.put('IS_CONCAT_SPREADABLE', var.get('require')(Js('./_wks'))(Js('isConcatSpreadable')))
        pass
        var.get('module').put('exports', var.get('flattenIntoArray'))
    PyJs_anonymous_846_._set_name('anonymous')
    @Js
    def PyJs_anonymous_847_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['RETURN', 'module', 'exports', 'call', 'anObject', 'isArrayIter', 'getIterFn', 'BREAK', 'require', 'ctx', 'toLength'])
        var.put('ctx', var.get('require')(Js('./_ctx')))
        var.put('call', var.get('require')(Js('./_iter-call')))
        var.put('isArrayIter', var.get('require')(Js('./_is-array-iter')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('getIterFn', var.get('require')(Js('./core.get-iterator-method')))
        var.put('BREAK', Js({}))
        var.put('RETURN', Js({}))
        @Js
        def PyJs_anonymous_848_(iterable, entries, fn, that, ITERATOR, this, arguments, var=var):
            var = Scope({'iterable':iterable, 'entries':entries, 'fn':fn, 'that':that, 'ITERATOR':ITERATOR, 'this':this, 'arguments':arguments}, var)
            var.registers(['ITERATOR', 'result', 'iterable', 'iterator', 'that', 'step', 'entries', 'fn', 'length', 'f', 'iterFn', 'index'])
            @Js
            def PyJs_anonymous_849_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return var.get('iterable')
            PyJs_anonymous_849_._set_name('anonymous')
            var.put('iterFn', (PyJs_anonymous_849_ if var.get('ITERATOR') else var.get('getIterFn')(var.get('iterable'))))
            var.put('f', var.get('ctx')(var.get('fn'), var.get('that'), (Js(2.0) if var.get('entries') else Js(1.0))))
            var.put('index', Js(0.0))
            pass
            if (var.get('iterFn',throw=False).typeof()!=Js('function')):
                PyJsTempException = JsToPyException(var.get('TypeError')((var.get('iterable')+Js(' is not iterable!'))))
                raise PyJsTempException
            if var.get('isArrayIter')(var.get('iterFn')):
                #for JS loop
                var.put('length', var.get('toLength')(var.get('iterable').get('length')))
                while (var.get('length')>var.get('index')):
                    try:
                        var.put('result', (var.get('f')(var.get('anObject')(var.put('step', var.get('iterable').get(var.get('index')))).get('0'), var.get('step').get('1')) if var.get('entries') else var.get('f')(var.get('iterable').get(var.get('index')))))
                        if (PyJsStrictEq(var.get('result'),var.get('BREAK')) or PyJsStrictEq(var.get('result'),var.get('RETURN'))):
                            return var.get('result')
                    finally:
                            (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))
            else:
                #for JS loop
                var.put('iterator', var.get('iterFn').callprop('call', var.get('iterable')))
                while var.put('step', var.get('iterator').callprop('next')).get('done').neg():
                    var.put('result', var.get('call')(var.get('iterator'), var.get('f'), var.get('step').get('value'), var.get('entries')))
                    if (PyJsStrictEq(var.get('result'),var.get('BREAK')) or PyJsStrictEq(var.get('result'),var.get('RETURN'))):
                        return var.get('result')
                
        PyJs_anonymous_848_._set_name('anonymous')
        var.put('exports', var.get('module').put('exports', PyJs_anonymous_848_))
        var.get('exports').put('BREAK', var.get('BREAK'))
        var.get('exports').put('RETURN', var.get('RETURN'))
    PyJs_anonymous_847_._set_name('anonymous')
    @Js
    def PyJs_anonymous_850_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('module').put('exports', var.get('require')(Js('./_shared'))(Js('native-function-to-string'), var.get('Function').get('toString')))
    PyJs_anonymous_850_._set_name('anonymous')
    @Js
    def PyJs_anonymous_851_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'global', 'exports'])
        var.put('global', var.get('module').put('exports', (var.get('window') if ((var.get('window',throw=False).typeof()!=Js('undefined')) and (var.get('window').get('Math')==var.get('Math'))) else (var.get('self') if ((var.get('self',throw=False).typeof()!=Js('undefined')) and (var.get('self').get('Math')==var.get('Math'))) else var.get('Function')(Js('return this'))()))))
        if (var.get('__g',throw=False).typeof()==Js('number')):
            var.put('__g', var.get('global'))
    PyJs_anonymous_851_._set_name('anonymous')
    @Js
    def PyJs_anonymous_852_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['hasOwnProperty', 'module', 'require', 'exports'])
        var.put('hasOwnProperty', Js({}).get('hasOwnProperty'))
        @Js
        def PyJs_anonymous_853_(it, key, this, arguments, var=var):
            var = Scope({'it':it, 'key':key, 'this':this, 'arguments':arguments}, var)
            var.registers(['key', 'it'])
            return var.get('hasOwnProperty').callprop('call', var.get('it'), var.get('key'))
        PyJs_anonymous_853_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_853_)
    PyJs_anonymous_852_._set_name('anonymous')
    @Js
    def PyJs_anonymous_854_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'createDesc', 'require', 'dP'])
        var.put('dP', var.get('require')(Js('./_object-dp')))
        var.put('createDesc', var.get('require')(Js('./_property-desc')))
        @Js
        def PyJs_anonymous_855_(object, key, value, this, arguments, var=var):
            var = Scope({'object':object, 'key':key, 'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['object', 'key', 'value'])
            return var.get('dP').callprop('f', var.get('object'), var.get('key'), var.get('createDesc')(Js(1.0), var.get('value')))
        PyJs_anonymous_855_._set_name('anonymous')
        @Js
        def PyJs_anonymous_856_(object, key, value, this, arguments, var=var):
            var = Scope({'object':object, 'key':key, 'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['object', 'key', 'value'])
            var.get('object').put(var.get('key'), var.get('value'))
            return var.get('object')
        PyJs_anonymous_856_._set_name('anonymous')
        var.get('module').put('exports', (PyJs_anonymous_855_ if var.get('require')(Js('./_descriptors')) else PyJs_anonymous_856_))
    PyJs_anonymous_854_._set_name('anonymous')
    @Js
    def PyJs_anonymous_857_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'document', 'module', 'exports'])
        var.put('document', var.get('require')(Js('./_global')).get('document'))
        var.get('module').put('exports', (var.get('document') and var.get('document').get('documentElement')))
    PyJs_anonymous_857_._set_name('anonymous')
    @Js
    def PyJs_anonymous_858_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_859_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_get_860_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_860_}, var)
                var.registers([])
                return Js(7.0)
            PyJs_get_860_._set_name('get')
            return (var.get('Object').callprop('defineProperty', var.get('require')(Js('./_dom-create'))(Js('div')), Js('a'), Js({'get':PyJs_get_860_})).get('a')!=Js(7.0))
        PyJs_anonymous_859_._set_name('anonymous')
        var.get('module').put('exports', (var.get('require')(Js('./_descriptors')).neg() and var.get('require')(Js('./_fails'))(PyJs_anonymous_859_).neg()))
    PyJs_anonymous_858_._set_name('anonymous')
    @Js
    def PyJs_anonymous_861_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'setPrototypeOf', 'require', 'isObject'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('setPrototypeOf', var.get('require')(Js('./_set-proto')).get('set'))
        @Js
        def PyJs_anonymous_862_(that, target, C, this, arguments, var=var):
            var = Scope({'that':that, 'target':target, 'C':C, 'this':this, 'arguments':arguments}, var)
            var.registers(['that', 'S', 'target', 'C', 'P'])
            var.put('S', var.get('target').get('constructor'))
            pass
            if ((((PyJsStrictNeq(var.get('S'),var.get('C')) and (var.get('S',throw=False).typeof()==Js('function'))) and PyJsStrictNeq(var.put('P', var.get('S').get('prototype')),var.get('C').get('prototype'))) and var.get('isObject')(var.get('P'))) and var.get('setPrototypeOf')):
                var.get('setPrototypeOf')(var.get('that'), var.get('P'))
            return var.get('that')
        PyJs_anonymous_862_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_862_)
    PyJs_anonymous_861_._set_name('anonymous')
    @Js
    def PyJs_anonymous_863_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_864_(fn, args, that, this, arguments, var=var):
            var = Scope({'fn':fn, 'args':args, 'that':that, 'this':this, 'arguments':arguments}, var)
            var.registers(['args', 'un', 'fn', 'that'])
            var.put('un', PyJsStrictEq(var.get('that'),var.get('undefined')))
            while 1:
                SWITCHED = False
                CONDITION = (var.get('args').get('length'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(0.0)):
                    SWITCHED = True
                    return (var.get('fn')() if var.get('un') else var.get('fn').callprop('call', var.get('that')))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(1.0)):
                    SWITCHED = True
                    return (var.get('fn')(var.get('args').get('0')) if var.get('un') else var.get('fn').callprop('call', var.get('that'), var.get('args').get('0')))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(2.0)):
                    SWITCHED = True
                    return (var.get('fn')(var.get('args').get('0'), var.get('args').get('1')) if var.get('un') else var.get('fn').callprop('call', var.get('that'), var.get('args').get('0'), var.get('args').get('1')))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(3.0)):
                    SWITCHED = True
                    return (var.get('fn')(var.get('args').get('0'), var.get('args').get('1'), var.get('args').get('2')) if var.get('un') else var.get('fn').callprop('call', var.get('that'), var.get('args').get('0'), var.get('args').get('1'), var.get('args').get('2')))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(4.0)):
                    SWITCHED = True
                    return (var.get('fn')(var.get('args').get('0'), var.get('args').get('1'), var.get('args').get('2'), var.get('args').get('3')) if var.get('un') else var.get('fn').callprop('call', var.get('that'), var.get('args').get('0'), var.get('args').get('1'), var.get('args').get('2'), var.get('args').get('3')))
                SWITCHED = True
                break
            return var.get('fn').callprop('apply', var.get('that'), var.get('args'))
        PyJs_anonymous_864_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_864_)
    PyJs_anonymous_863_._set_name('anonymous')
    @Js
    def PyJs_anonymous_865_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['cof', 'require', 'module', 'exports'])
        var.put('cof', var.get('require')(Js('./_cof')))
        @Js
        def PyJs_anonymous_866_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return (var.get('it').callprop('split', Js('')) if (var.get('cof')(var.get('it'))==Js('String')) else var.get('Object')(var.get('it')))
        PyJs_anonymous_866_._set_name('anonymous')
        var.get('module').put('exports', (var.get('Object') if var.get('Object')(Js('z')).callprop('propertyIsEnumerable', Js(0.0)) else PyJs_anonymous_866_))
    PyJs_anonymous_865_._set_name('anonymous')
    @Js
    def PyJs_anonymous_867_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['ITERATOR', 'module', 'ArrayProto', 'exports', 'require', 'Iterators'])
        var.put('Iterators', var.get('require')(Js('./_iterators')))
        var.put('ITERATOR', var.get('require')(Js('./_wks'))(Js('iterator')))
        var.put('ArrayProto', var.get('Array').get('prototype'))
        @Js
        def PyJs_anonymous_868_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return (PyJsStrictNeq(var.get('it'),var.get('undefined')) and (PyJsStrictEq(var.get('Iterators').get('Array'),var.get('it')) or PyJsStrictEq(var.get('ArrayProto').get(var.get('ITERATOR')),var.get('it'))))
        PyJs_anonymous_868_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_868_)
    PyJs_anonymous_867_._set_name('anonymous')
    @Js
    def PyJs_anonymous_869_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['cof', 'require', 'module', 'exports'])
        var.put('cof', var.get('require')(Js('./_cof')))
        @Js
        def PyJs_isArray_870_(arg, this, arguments, var=var):
            var = Scope({'arg':arg, 'this':this, 'arguments':arguments, 'isArray':PyJs_isArray_870_}, var)
            var.registers(['arg'])
            return (var.get('cof')(var.get('arg'))==Js('Array'))
        PyJs_isArray_870_._set_name('isArray')
        var.get('module').put('exports', (var.get('Array').get('isArray') or PyJs_isArray_870_))
    PyJs_anonymous_869_._set_name('anonymous')
    @Js
    def PyJs_anonymous_871_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'isObject', 'require', 'floor'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('floor', var.get('Math').get('floor'))
        @Js
        def PyJs_isInteger_872_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'isInteger':PyJs_isInteger_872_}, var)
            var.registers(['it'])
            return ((var.get('isObject')(var.get('it')).neg() and var.get('isFinite')(var.get('it'))) and PyJsStrictEq(var.get('floor')(var.get('it')),var.get('it')))
        PyJs_isInteger_872_._set_name('isInteger')
        var.get('module').put('exports', PyJs_isInteger_872_)
    PyJs_anonymous_871_._set_name('anonymous')
    @Js
    def PyJs_anonymous_873_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_874_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return (PyJsStrictNeq(var.get('it'),var.get(u"null")) if PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('it',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('it'))),Js('object')) else PyJsStrictEq(var.get('it',throw=False).typeof(),Js('function')))
        PyJs_anonymous_874_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_874_)
    PyJs_anonymous_873_._set_name('anonymous')
    @Js
    def PyJs_anonymous_875_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'cof', 'require', 'isObject', 'MATCH'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('cof', var.get('require')(Js('./_cof')))
        var.put('MATCH', var.get('require')(Js('./_wks'))(Js('match')))
        @Js
        def PyJs_anonymous_876_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it', 'isRegExp'])
            pass
            return (var.get('isObject')(var.get('it')) and (var.get('isRegExp').neg().neg() if PyJsStrictNeq(var.put('isRegExp', var.get('it').get(var.get('MATCH'))),var.get('undefined')) else (var.get('cof')(var.get('it'))==Js('RegExp'))))
        PyJs_anonymous_876_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_876_)
    PyJs_anonymous_875_._set_name('anonymous')
    @Js
    def PyJs_anonymous_877_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'anObject', 'module', 'exports'])
        var.put('anObject', var.get('require')(Js('./_an-object')))
        @Js
        def PyJs_anonymous_878_(iterator, fn, value, entries, this, arguments, var=var):
            var = Scope({'iterator':iterator, 'fn':fn, 'value':value, 'entries':entries, 'this':this, 'arguments':arguments}, var)
            var.registers(['iterator', 'ret', 'entries', 'fn', 'value'])
            try:
                return (var.get('fn')(var.get('anObject')(var.get('value')).get('0'), var.get('value').get('1')) if var.get('entries') else var.get('fn')(var.get('value')))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_16109233 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    var.put('ret', var.get('iterator').get('return'))
                    if PyJsStrictNeq(var.get('ret'),var.get('undefined')):
                        var.get('anObject')(var.get('ret').callprop('call', var.get('iterator')))
                    PyJsTempException = JsToPyException(var.get('e'))
                    raise PyJsTempException
                finally:
                    if PyJsHolder_65_16109233 is not None:
                        var.own['e'] = PyJsHolder_65_16109233
                    else:
                        del var.own['e']
                    del PyJsHolder_65_16109233
        PyJs_anonymous_878_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_878_)
    PyJs_anonymous_877_._set_name('anonymous')
    @Js
    def PyJs_anonymous_879_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['create', 'module', 'exports', 'IteratorPrototype', 'descriptor', 'setToStringTag', 'require'])
        Js('use strict')
        var.put('create', var.get('require')(Js('./_object-create')))
        var.put('descriptor', var.get('require')(Js('./_property-desc')))
        var.put('setToStringTag', var.get('require')(Js('./_set-to-string-tag')))
        var.put('IteratorPrototype', Js({}))
        @Js
        def PyJs_anonymous_880_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get(u"this")
        PyJs_anonymous_880_._set_name('anonymous')
        var.get('require')(Js('./_hide'))(var.get('IteratorPrototype'), var.get('require')(Js('./_wks'))(Js('iterator')), PyJs_anonymous_880_)
        @Js
        def PyJs_anonymous_881_(Constructor, NAME, next, this, arguments, var=var):
            var = Scope({'Constructor':Constructor, 'NAME':NAME, 'next':next, 'this':this, 'arguments':arguments}, var)
            var.registers(['next', 'Constructor', 'NAME'])
            var.get('Constructor').put('prototype', var.get('create')(var.get('IteratorPrototype'), Js({'next':var.get('descriptor')(Js(1.0), var.get('next'))})))
            var.get('setToStringTag')(var.get('Constructor'), (var.get('NAME')+Js(' Iterator')))
        PyJs_anonymous_881_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_881_)
    PyJs_anonymous_879_._set_name('anonymous')
    @Js
    def PyJs_anonymous_882_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['ITERATOR', 'module', '$export', 'LIBRARY', 'getPrototypeOf', 'KEYS', 'VALUES', 'returnThis', 'exports', 'FF_ITERATOR', 'redefine', 'setToStringTag', 'BUGGY', 'require', 'hide', 'Iterators', '$iterCreate'])
        Js('use strict')
        var.put('LIBRARY', var.get('require')(Js('./_library')))
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('redefine', var.get('require')(Js('./_redefine')))
        var.put('hide', var.get('require')(Js('./_hide')))
        var.put('Iterators', var.get('require')(Js('./_iterators')))
        var.put('$iterCreate', var.get('require')(Js('./_iter-create')))
        var.put('setToStringTag', var.get('require')(Js('./_set-to-string-tag')))
        var.put('getPrototypeOf', var.get('require')(Js('./_object-gpo')))
        var.put('ITERATOR', var.get('require')(Js('./_wks'))(Js('iterator')))
        var.put('BUGGY', (Js([]).get('keys') and Js([]).callprop('keys').contains(Js('next'))).neg())
        var.put('FF_ITERATOR', Js('@@iterator'))
        var.put('KEYS', Js('keys'))
        var.put('VALUES', Js('values'))
        @Js
        def PyJs_returnThis_883_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'returnThis':PyJs_returnThis_883_}, var)
            var.registers([])
            return var.get(u"this")
        PyJs_returnThis_883_._set_name('returnThis')
        var.put('returnThis', PyJs_returnThis_883_)
        @Js
        def PyJs_anonymous_884_(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED, this, arguments, var=var):
            var = Scope({'Base':Base, 'NAME':NAME, 'Constructor':Constructor, 'next':next, 'DEFAULT':DEFAULT, 'IS_SET':IS_SET, 'FORCED':FORCED, 'this':this, 'arguments':arguments}, var)
            var.registers(['TAG', 'IteratorPrototype', '$anyNative', '$native', 'DEFAULT', '$default', 'VALUES_BUG', 'proto', 'FORCED', 'methods', 'getMethod', 'Base', 'key', 'NAME', 'DEF_VALUES', 'IS_SET', 'Constructor', '$entries', 'next'])
            var.get('$iterCreate')(var.get('Constructor'), var.get('NAME'), var.get('next'))
            @Js
            def PyJs_getMethod_885_(kind, this, arguments, var=var):
                var = Scope({'kind':kind, 'this':this, 'arguments':arguments, 'getMethod':PyJs_getMethod_885_}, var)
                var.registers(['kind'])
                if (var.get('BUGGY').neg() and var.get('proto').contains(var.get('kind'))):
                    return var.get('proto').get(var.get('kind'))
                while 1:
                    SWITCHED = False
                    CONDITION = (var.get('kind'))
                    if SWITCHED or PyJsStrictEq(CONDITION, var.get('KEYS')):
                        SWITCHED = True
                        @Js
                        def PyJs_keys_886_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments, 'keys':PyJs_keys_886_}, var)
                            var.registers([])
                            return var.get('Constructor').create(var.get(u"this"), var.get('kind'))
                        PyJs_keys_886_._set_name('keys')
                        return PyJs_keys_886_
                    if SWITCHED or PyJsStrictEq(CONDITION, var.get('VALUES')):
                        SWITCHED = True
                        @Js
                        def PyJs_values_887_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments, 'values':PyJs_values_887_}, var)
                            var.registers([])
                            return var.get('Constructor').create(var.get(u"this"), var.get('kind'))
                        PyJs_values_887_._set_name('values')
                        return PyJs_values_887_
                    SWITCHED = True
                    break
                @Js
                def PyJs_entries_888_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'entries':PyJs_entries_888_}, var)
                    var.registers([])
                    return var.get('Constructor').create(var.get(u"this"), var.get('kind'))
                PyJs_entries_888_._set_name('entries')
                return PyJs_entries_888_
            PyJs_getMethod_885_._set_name('getMethod')
            var.put('getMethod', PyJs_getMethod_885_)
            var.put('TAG', (var.get('NAME')+Js(' Iterator')))
            var.put('DEF_VALUES', (var.get('DEFAULT')==var.get('VALUES')))
            var.put('VALUES_BUG', Js(False))
            var.put('proto', var.get('Base').get('prototype'))
            var.put('$native', ((var.get('proto').get(var.get('ITERATOR')) or var.get('proto').get(var.get('FF_ITERATOR'))) or (var.get('DEFAULT') and var.get('proto').get(var.get('DEFAULT')))))
            var.put('$default', (var.get('$native') or var.get('getMethod')(var.get('DEFAULT'))))
            var.put('$entries', ((var.get('$default') if var.get('DEF_VALUES').neg() else var.get('getMethod')(Js('entries'))) if var.get('DEFAULT') else var.get('undefined')))
            var.put('$anyNative', ((var.get('proto').get('entries') or var.get('$native')) if (var.get('NAME')==Js('Array')) else var.get('$native')))
            pass
            if var.get('$anyNative'):
                var.put('IteratorPrototype', var.get('getPrototypeOf')(var.get('$anyNative').callprop('call', var.get('Base').create())))
                if (PyJsStrictNeq(var.get('IteratorPrototype'),var.get('Object').get('prototype')) and var.get('IteratorPrototype').get('next')):
                    var.get('setToStringTag')(var.get('IteratorPrototype'), var.get('TAG'), Js(True))
                    if (var.get('LIBRARY').neg() and (var.get('IteratorPrototype').get(var.get('ITERATOR')).typeof()!=Js('function'))):
                        var.get('hide')(var.get('IteratorPrototype'), var.get('ITERATOR'), var.get('returnThis'))
            if ((var.get('DEF_VALUES') and var.get('$native')) and PyJsStrictNeq(var.get('$native').get('name'),var.get('VALUES'))):
                var.put('VALUES_BUG', Js(True))
                @Js
                def PyJs_values_889_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'values':PyJs_values_889_}, var)
                    var.registers([])
                    return var.get('$native').callprop('call', var.get(u"this"))
                PyJs_values_889_._set_name('values')
                var.put('$default', PyJs_values_889_)
            if ((var.get('LIBRARY').neg() or var.get('FORCED')) and ((var.get('BUGGY') or var.get('VALUES_BUG')) or var.get('proto').get(var.get('ITERATOR')).neg())):
                var.get('hide')(var.get('proto'), var.get('ITERATOR'), var.get('$default'))
            var.get('Iterators').put(var.get('NAME'), var.get('$default'))
            var.get('Iterators').put(var.get('TAG'), var.get('returnThis'))
            if var.get('DEFAULT'):
                var.put('methods', Js({'values':(var.get('$default') if var.get('DEF_VALUES') else var.get('getMethod')(var.get('VALUES'))),'keys':(var.get('$default') if var.get('IS_SET') else var.get('getMethod')(var.get('KEYS'))),'entries':var.get('$entries')}))
                if var.get('FORCED'):
                    for PyJsTemp in var.get('methods'):
                        var.put('key', PyJsTemp)
                        if var.get('proto').contains(var.get('key')).neg():
                            var.get('redefine')(var.get('proto'), var.get('key'), var.get('methods').get(var.get('key')))
                else:
                    var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*(var.get('BUGGY') or var.get('VALUES_BUG')))), var.get('NAME'), var.get('methods'))
            return var.get('methods')
        PyJs_anonymous_884_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_884_)
    PyJs_anonymous_882_._set_name('anonymous')
    @Js
    def PyJs_anonymous_890_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['ITERATOR', 'module', 'exports', 'SAFE_CLOSING', 'require', 'riter'])
        var.put('ITERATOR', var.get('require')(Js('./_wks'))(Js('iterator')))
        var.put('SAFE_CLOSING', Js(False))
        try:
            var.put('riter', Js([Js(7.0)]).callprop(var.get('ITERATOR')))
            @Js
            def PyJs_anonymous_891_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.put('SAFE_CLOSING', Js(True))
            PyJs_anonymous_891_._set_name('anonymous')
            var.get('riter').put('return', PyJs_anonymous_891_)
            @Js
            def PyJs_anonymous_892_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                PyJsTempException = JsToPyException(Js(2.0))
                raise PyJsTempException
            PyJs_anonymous_892_._set_name('anonymous')
            var.get('Array').callprop('from', var.get('riter'), PyJs_anonymous_892_)
        except PyJsException as PyJsTempException:
            PyJsHolder_65_79889170 = var.own.get('e')
            var.force_own_put('e', PyExceptionToJs(PyJsTempException))
            try:
                pass
            finally:
                if PyJsHolder_65_79889170 is not None:
                    var.own['e'] = PyJsHolder_65_79889170
                else:
                    del var.own['e']
                del PyJsHolder_65_79889170
        @Js
        def PyJs_anonymous_893_(exec, skipClosing, this, arguments, var=var):
            var = Scope({'exec':exec, 'skipClosing':skipClosing, 'this':this, 'arguments':arguments}, var)
            var.registers(['arr', 'safe', 'exec', 'skipClosing', 'iter'])
            if (var.get('skipClosing').neg() and var.get('SAFE_CLOSING').neg()):
                return Js(False)
            var.put('safe', Js(False))
            try:
                var.put('arr', Js([Js(7.0)]))
                var.put('iter', var.get('arr').callprop(var.get('ITERATOR')))
                @Js
                def PyJs_anonymous_894_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    return Js({'done':var.put('safe', Js(True))})
                PyJs_anonymous_894_._set_name('anonymous')
                var.get('iter').put('next', PyJs_anonymous_894_)
                @Js
                def PyJs_anonymous_895_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    return var.get('iter')
                PyJs_anonymous_895_._set_name('anonymous')
                var.get('arr').put(var.get('ITERATOR'), PyJs_anonymous_895_)
                var.get('exec')(var.get('arr'))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_3092713 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    pass
                finally:
                    if PyJsHolder_65_3092713 is not None:
                        var.own['e'] = PyJsHolder_65_3092713
                    else:
                        del var.own['e']
                    del PyJsHolder_65_3092713
            return var.get('safe')
        PyJs_anonymous_893_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_893_)
    PyJs_anonymous_890_._set_name('anonymous')
    @Js
    def PyJs_anonymous_896_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_897_(done, value, this, arguments, var=var):
            var = Scope({'done':done, 'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['done', 'value'])
            return Js({'value':var.get('value'),'done':var.get('done').neg().neg()})
        PyJs_anonymous_897_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_897_)
    PyJs_anonymous_896_._set_name('anonymous')
    @Js
    def PyJs_anonymous_898_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('module').put('exports', Js({}))
    PyJs_anonymous_898_._set_name('anonymous')
    @Js
    def PyJs_anonymous_899_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('module').put('exports', Js(False))
    PyJs_anonymous_899_._set_name('anonymous')
    @Js
    def PyJs_anonymous_900_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$expm1', 'exports'])
        var.put('$expm1', var.get('Math').get('expm1'))
        @Js
        def PyJs_expm1_901_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'expm1':PyJs_expm1_901_}, var)
            var.registers(['x'])
            return (var.get('x') if (var.put('x', (+var.get('x')))==Js(0.0)) else ((var.get('x')+((var.get('x')*var.get('x'))/Js(2.0))) if ((var.get('x')>(-Js(1e-06))) and (var.get('x')<Js(1e-06))) else (var.get('Math').callprop('exp', var.get('x'))-Js(1.0))))
        PyJs_expm1_901_._set_name('expm1')
        var.get('module').put('exports', (PyJs_expm1_901_ if (((var.get('$expm1').neg() or (var.get('$expm1')(Js(10.0))>Js(22025.465794806718))) or (var.get('$expm1')(Js(10.0))<Js(22025.465794806718))) or (var.get('$expm1')((-Js(2e-17)))!=(-Js(2e-17)))) else var.get('$expm1')))
    PyJs_anonymous_900_._set_name('anonymous')
    @Js
    def PyJs_anonymous_902_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'pow', 'MIN32', 'exports', 'EPSILON32', 'MAX32', 'roundTiesToEven', 'require', 'EPSILON', 'sign'])
        var.put('sign', var.get('require')(Js('./_math-sign')))
        var.put('pow', var.get('Math').get('pow'))
        var.put('EPSILON', var.get('pow')(Js(2.0), (-Js(52.0))))
        var.put('EPSILON32', var.get('pow')(Js(2.0), (-Js(23.0))))
        var.put('MAX32', (var.get('pow')(Js(2.0), Js(127.0))*(Js(2.0)-var.get('EPSILON32'))))
        var.put('MIN32', var.get('pow')(Js(2.0), (-Js(126.0))))
        @Js
        def PyJs_roundTiesToEven_903_(n, this, arguments, var=var):
            var = Scope({'n':n, 'this':this, 'arguments':arguments, 'roundTiesToEven':PyJs_roundTiesToEven_903_}, var)
            var.registers(['n'])
            return ((var.get('n')+(Js(1.0)/var.get('EPSILON')))-(Js(1.0)/var.get('EPSILON')))
        PyJs_roundTiesToEven_903_._set_name('roundTiesToEven')
        var.put('roundTiesToEven', PyJs_roundTiesToEven_903_)
        @Js
        def PyJs_fround_904_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'fround':PyJs_fround_904_}, var)
            var.registers(['x', 'a', '$sign', 'result', '$abs'])
            var.put('$abs', var.get('Math').callprop('abs', var.get('x')))
            var.put('$sign', var.get('sign')(var.get('x')))
            pass
            if (var.get('$abs')<var.get('MIN32')):
                return (((var.get('$sign')*var.get('roundTiesToEven')(((var.get('$abs')/var.get('MIN32'))/var.get('EPSILON32'))))*var.get('MIN32'))*var.get('EPSILON32'))
            var.put('a', ((Js(1.0)+(var.get('EPSILON32')/var.get('EPSILON')))*var.get('$abs')))
            var.put('result', (var.get('a')-(var.get('a')-var.get('$abs'))))
            if ((var.get('result')>var.get('MAX32')) or (var.get('result')!=var.get('result'))):
                return (var.get('$sign')*var.get('Infinity'))
            return (var.get('$sign')*var.get('result'))
        PyJs_fround_904_._set_name('fround')
        var.get('module').put('exports', (var.get('Math').get('fround') or PyJs_fround_904_))
    PyJs_anonymous_902_._set_name('anonymous')
    @Js
    def PyJs_anonymous_905_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_log1p_906_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'log1p':PyJs_log1p_906_}, var)
            var.registers(['x'])
            return ((var.get('x')-((var.get('x')*var.get('x'))/Js(2.0))) if ((var.put('x', (+var.get('x')))>(-Js(1e-08))) and (var.get('x')<Js(1e-08))) else var.get('Math').callprop('log', (Js(1.0)+var.get('x'))))
        PyJs_log1p_906_._set_name('log1p')
        var.get('module').put('exports', (var.get('Math').get('log1p') or PyJs_log1p_906_))
    PyJs_anonymous_905_._set_name('anonymous')
    @Js
    def PyJs_anonymous_907_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_scale_908_(x, inLow, inHigh, outLow, outHigh, this, arguments, var=var):
            var = Scope({'x':x, 'inLow':inLow, 'inHigh':inHigh, 'outLow':outLow, 'outHigh':outHigh, 'this':this, 'arguments':arguments, 'scale':PyJs_scale_908_}, var)
            var.registers(['inHigh', 'x', 'outHigh', 'outLow', 'inLow'])
            if (((((PyJsStrictEq(var.get('arguments').get('length'),Js(0.0)) or (var.get('x')!=var.get('x'))) or (var.get('inLow')!=var.get('inLow'))) or (var.get('inHigh')!=var.get('inHigh'))) or (var.get('outLow')!=var.get('outLow'))) or (var.get('outHigh')!=var.get('outHigh'))):
                return var.get('NaN')
            if (PyJsStrictEq(var.get('x'),var.get('Infinity')) or PyJsStrictEq(var.get('x'),(-var.get('Infinity')))):
                return var.get('x')
            return ((((var.get('x')-var.get('inLow'))*(var.get('outHigh')-var.get('outLow')))/(var.get('inHigh')-var.get('inLow')))+var.get('outLow'))
        PyJs_scale_908_._set_name('scale')
        var.get('module').put('exports', (var.get('Math').get('scale') or PyJs_scale_908_))
    PyJs_anonymous_907_._set_name('anonymous')
    @Js
    def PyJs_anonymous_909_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_sign_910_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'sign':PyJs_sign_910_}, var)
            var.registers(['x'])
            return (var.get('x') if ((var.put('x', (+var.get('x')))==Js(0.0)) or (var.get('x')!=var.get('x'))) else ((-Js(1.0)) if (var.get('x')<Js(0.0)) else Js(1.0)))
        PyJs_sign_910_._set_name('sign')
        var.get('module').put('exports', (var.get('Math').get('sign') or PyJs_sign_910_))
    PyJs_anonymous_909_._set_name('anonymous')
    @Js
    def PyJs_anonymous_911_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['has', 'module', 'isExtensible', 'fastKey', 'id', 'exports', 'meta', 'onFreeze', 'getWeak', 'FREEZE', 'setMeta', 'META', 'require', 'isObject', 'setDesc'])
        var.put('META', var.get('require')(Js('./_uid'))(Js('meta')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('has', var.get('require')(Js('./_has')))
        var.put('setDesc', var.get('require')(Js('./_object-dp')).get('f'))
        var.put('id', Js(0.0))
        @Js
        def PyJs_anonymous_912_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return Js(True)
        PyJs_anonymous_912_._set_name('anonymous')
        var.put('isExtensible', (var.get('Object').get('isExtensible') or PyJs_anonymous_912_))
        @Js
        def PyJs_anonymous_913_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get('isExtensible')(var.get('Object').callprop('preventExtensions', Js({})))
        PyJs_anonymous_913_._set_name('anonymous')
        var.put('FREEZE', var.get('require')(Js('./_fails'))(PyJs_anonymous_913_).neg())
        @Js
        def PyJs_setMeta_914_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'setMeta':PyJs_setMeta_914_}, var)
            var.registers(['it'])
            var.get('setDesc')(var.get('it'), var.get('META'), Js({'value':Js({'i':(Js('O')+var.put('id',Js(var.get('id').to_number())+Js(1))),'w':Js({})})}))
        PyJs_setMeta_914_._set_name('setMeta')
        var.put('setMeta', PyJs_setMeta_914_)
        @Js
        def PyJs_fastKey_915_(it, create, this, arguments, var=var):
            var = Scope({'it':it, 'create':create, 'this':this, 'arguments':arguments, 'fastKey':PyJs_fastKey_915_}, var)
            var.registers(['create', 'it'])
            if var.get('isObject')(var.get('it')).neg():
                return (var.get('it') if ((Js('undefined') if PyJsStrictEq(var.get('it',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('it')))==Js('symbol')) else ((Js('S') if (var.get('it',throw=False).typeof()==Js('string')) else Js('P'))+var.get('it')))
            if var.get('has')(var.get('it'), var.get('META')).neg():
                if var.get('isExtensible')(var.get('it')).neg():
                    return Js('F')
                if var.get('create').neg():
                    return Js('E')
                var.get('setMeta')(var.get('it'))
            return var.get('it').get(var.get('META')).get('i')
        PyJs_fastKey_915_._set_name('fastKey')
        var.put('fastKey', PyJs_fastKey_915_)
        @Js
        def PyJs_getWeak_916_(it, create, this, arguments, var=var):
            var = Scope({'it':it, 'create':create, 'this':this, 'arguments':arguments, 'getWeak':PyJs_getWeak_916_}, var)
            var.registers(['create', 'it'])
            if var.get('has')(var.get('it'), var.get('META')).neg():
                if var.get('isExtensible')(var.get('it')).neg():
                    return Js(True)
                if var.get('create').neg():
                    return Js(False)
                var.get('setMeta')(var.get('it'))
            return var.get('it').get(var.get('META')).get('w')
        PyJs_getWeak_916_._set_name('getWeak')
        var.put('getWeak', PyJs_getWeak_916_)
        @Js
        def PyJs_onFreeze_917_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'onFreeze':PyJs_onFreeze_917_}, var)
            var.registers(['it'])
            if (((var.get('FREEZE') and var.get('meta').get('NEED')) and var.get('isExtensible')(var.get('it'))) and var.get('has')(var.get('it'), var.get('META')).neg()):
                var.get('setMeta')(var.get('it'))
            return var.get('it')
        PyJs_onFreeze_917_._set_name('onFreeze')
        var.put('onFreeze', PyJs_onFreeze_917_)
        var.put('meta', var.get('module').put('exports', Js({'KEY':var.get('META'),'NEED':Js(False),'fastKey':var.get('fastKey'),'getWeak':var.get('getWeak'),'onFreeze':var.get('onFreeze')})))
    PyJs_anonymous_911_._set_name('anonymous')
    @Js
    def PyJs_anonymous_918_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['store', 'ordinaryHasOwnMetadata', '$export', 'ordinaryDefineOwnMetadata', 'module', 'exports', 'exp', 'getOrCreateMetadataMap', 'ordinaryOwnMetadataKeys', 'toMetaKey', 'require', 'ordinaryGetOwnMetadata', 'Map', 'shared'])
        var.put('Map', var.get('require')(Js('./es6.map')))
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('shared', var.get('require')(Js('./_shared'))(Js('metadata')))
        var.put('store', (var.get('shared').get('store') or var.get('shared').put('store', var.get('require')(Js('./es6.weak-map')).create())))
        @Js
        def PyJs_getOrCreateMetadataMap_919_(target, targetKey, create, this, arguments, var=var):
            var = Scope({'target':target, 'targetKey':targetKey, 'create':create, 'this':this, 'arguments':arguments, 'getOrCreateMetadataMap':PyJs_getOrCreateMetadataMap_919_}, var)
            var.registers(['create', 'keyMetadata', 'target', 'targetMetadata', 'targetKey'])
            var.put('targetMetadata', var.get('store').callprop('get', var.get('target')))
            if var.get('targetMetadata').neg():
                if var.get('create').neg():
                    return var.get('undefined')
                var.get('store').callprop('set', var.get('target'), var.put('targetMetadata', var.get('Map').create()))
            var.put('keyMetadata', var.get('targetMetadata').callprop('get', var.get('targetKey')))
            if var.get('keyMetadata').neg():
                if var.get('create').neg():
                    return var.get('undefined')
                var.get('targetMetadata').callprop('set', var.get('targetKey'), var.put('keyMetadata', var.get('Map').create()))
            return var.get('keyMetadata')
        PyJs_getOrCreateMetadataMap_919_._set_name('getOrCreateMetadataMap')
        var.put('getOrCreateMetadataMap', PyJs_getOrCreateMetadataMap_919_)
        @Js
        def PyJs_ordinaryHasOwnMetadata_920_(MetadataKey, O, P, this, arguments, var=var):
            var = Scope({'MetadataKey':MetadataKey, 'O':O, 'P':P, 'this':this, 'arguments':arguments, 'ordinaryHasOwnMetadata':PyJs_ordinaryHasOwnMetadata_920_}, var)
            var.registers(['O', 'P', 'metadataMap', 'MetadataKey'])
            var.put('metadataMap', var.get('getOrCreateMetadataMap')(var.get('O'), var.get('P'), Js(False)))
            return (Js(False) if PyJsStrictEq(var.get('metadataMap'),var.get('undefined')) else var.get('metadataMap').callprop('has', var.get('MetadataKey')))
        PyJs_ordinaryHasOwnMetadata_920_._set_name('ordinaryHasOwnMetadata')
        var.put('ordinaryHasOwnMetadata', PyJs_ordinaryHasOwnMetadata_920_)
        @Js
        def PyJs_ordinaryGetOwnMetadata_921_(MetadataKey, O, P, this, arguments, var=var):
            var = Scope({'MetadataKey':MetadataKey, 'O':O, 'P':P, 'this':this, 'arguments':arguments, 'ordinaryGetOwnMetadata':PyJs_ordinaryGetOwnMetadata_921_}, var)
            var.registers(['O', 'P', 'metadataMap', 'MetadataKey'])
            var.put('metadataMap', var.get('getOrCreateMetadataMap')(var.get('O'), var.get('P'), Js(False)))
            return (var.get('undefined') if PyJsStrictEq(var.get('metadataMap'),var.get('undefined')) else var.get('metadataMap').callprop('get', var.get('MetadataKey')))
        PyJs_ordinaryGetOwnMetadata_921_._set_name('ordinaryGetOwnMetadata')
        var.put('ordinaryGetOwnMetadata', PyJs_ordinaryGetOwnMetadata_921_)
        @Js
        def PyJs_ordinaryDefineOwnMetadata_922_(MetadataKey, MetadataValue, O, P, this, arguments, var=var):
            var = Scope({'MetadataKey':MetadataKey, 'MetadataValue':MetadataValue, 'O':O, 'P':P, 'this':this, 'arguments':arguments, 'ordinaryDefineOwnMetadata':PyJs_ordinaryDefineOwnMetadata_922_}, var)
            var.registers(['MetadataValue', 'P', 'MetadataKey', 'O'])
            var.get('getOrCreateMetadataMap')(var.get('O'), var.get('P'), Js(True)).callprop('set', var.get('MetadataKey'), var.get('MetadataValue'))
        PyJs_ordinaryDefineOwnMetadata_922_._set_name('ordinaryDefineOwnMetadata')
        var.put('ordinaryDefineOwnMetadata', PyJs_ordinaryDefineOwnMetadata_922_)
        @Js
        def PyJs_ordinaryOwnMetadataKeys_923_(target, targetKey, this, arguments, var=var):
            var = Scope({'target':target, 'targetKey':targetKey, 'this':this, 'arguments':arguments, 'ordinaryOwnMetadataKeys':PyJs_ordinaryOwnMetadataKeys_923_}, var)
            var.registers(['target', 'keys', 'metadataMap', 'targetKey'])
            var.put('metadataMap', var.get('getOrCreateMetadataMap')(var.get('target'), var.get('targetKey'), Js(False)))
            var.put('keys', Js([]))
            if var.get('metadataMap'):
                @Js
                def PyJs_anonymous_924_(_, key, this, arguments, var=var):
                    var = Scope({'_':_, 'key':key, 'this':this, 'arguments':arguments}, var)
                    var.registers(['_', 'key'])
                    var.get('keys').callprop('push', var.get('key'))
                PyJs_anonymous_924_._set_name('anonymous')
                var.get('metadataMap').callprop('forEach', PyJs_anonymous_924_)
            return var.get('keys')
        PyJs_ordinaryOwnMetadataKeys_923_._set_name('ordinaryOwnMetadataKeys')
        var.put('ordinaryOwnMetadataKeys', PyJs_ordinaryOwnMetadataKeys_923_)
        @Js
        def PyJs_toMetaKey_925_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'toMetaKey':PyJs_toMetaKey_925_}, var)
            var.registers(['it'])
            return (var.get('it') if (PyJsStrictEq(var.get('it'),var.get('undefined')) or ((Js('undefined') if PyJsStrictEq(var.get('it',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('it')))==Js('symbol'))) else var.get('String')(var.get('it')))
        PyJs_toMetaKey_925_._set_name('toMetaKey')
        var.put('toMetaKey', PyJs_toMetaKey_925_)
        @Js
        def PyJs_exp_926_(O, this, arguments, var=var):
            var = Scope({'O':O, 'this':this, 'arguments':arguments, 'exp':PyJs_exp_926_}, var)
            var.registers(['O'])
            var.get('$export')(var.get('$export').get('S'), Js('Reflect'), var.get('O'))
        PyJs_exp_926_._set_name('exp')
        var.put('exp', PyJs_exp_926_)
        var.get('module').put('exports', Js({'store':var.get('store'),'map':var.get('getOrCreateMetadataMap'),'has':var.get('ordinaryHasOwnMetadata'),'get':var.get('ordinaryGetOwnMetadata'),'set':var.get('ordinaryDefineOwnMetadata'),'keys':var.get('ordinaryOwnMetadataKeys'),'key':var.get('toMetaKey'),'exp':var.get('exp')}))
    PyJs_anonymous_918_._set_name('anonymous')
    @Js
    def PyJs_anonymous_927_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'global', 'isNode', 'exports', 'process', 'Promise', 'macrotask', 'require', 'Observer'])
        var.put('global', var.get('require')(Js('./_global')))
        var.put('macrotask', var.get('require')(Js('./_task')).get('set'))
        var.put('Observer', (var.get('global').get('MutationObserver') or var.get('global').get('WebKitMutationObserver')))
        var.put('process', var.get('global').get('process'))
        var.put('Promise', var.get('global').get('Promise'))
        var.put('isNode', (var.get('require')(Js('./_cof'))(var.get('process'))==Js('process')))
        @Js
        def PyJs_anonymous_928_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['last', 'notify', 'promise', 'toggle', 'head', 'flush', 'node'])
            pass
            @Js
            def PyJs_flush_929_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'flush':PyJs_flush_929_}, var)
                var.registers(['parent', 'fn'])
                pass
                if (var.get('isNode') and var.put('parent', var.get('process').get('domain'))):
                    var.get('parent').callprop('exit')
                while var.get('head'):
                    var.put('fn', var.get('head').get('fn'))
                    var.put('head', var.get('head').get('next'))
                    try:
                        var.get('fn')()
                    except PyJsException as PyJsTempException:
                        PyJsHolder_65_54386974 = var.own.get('e')
                        var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                        try:
                            if var.get('head'):
                                var.get('notify')()
                            else:
                                var.put('last', var.get('undefined'))
                            PyJsTempException = JsToPyException(var.get('e'))
                            raise PyJsTempException
                        finally:
                            if PyJsHolder_65_54386974 is not None:
                                var.own['e'] = PyJsHolder_65_54386974
                            else:
                                del var.own['e']
                            del PyJsHolder_65_54386974
                var.put('last', var.get('undefined'))
                if var.get('parent'):
                    var.get('parent').callprop('enter')
            PyJs_flush_929_._set_name('flush')
            var.put('flush', PyJs_flush_929_)
            if var.get('isNode'):
                @Js
                def PyJs_notify_930_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'notify':PyJs_notify_930_}, var)
                    var.registers([])
                    var.get('process').callprop('nextTick', var.get('flush'))
                PyJs_notify_930_._set_name('notify')
                var.put('notify', PyJs_notify_930_)
            else:
                if (var.get('Observer') and (var.get('global').get('navigator') and var.get('global').get('navigator').get('standalone')).neg()):
                    var.put('toggle', Js(True))
                    var.put('node', var.get('document').callprop('createTextNode', Js('')))
                    var.get('Observer').create(var.get('flush')).callprop('observe', var.get('node'), Js({'characterData':Js(True)}))
                    @Js
                    def PyJs_notify_931_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments, 'notify':PyJs_notify_931_}, var)
                        var.registers([])
                        var.get('node').put('data', var.put('toggle', var.get('toggle').neg()))
                    PyJs_notify_931_._set_name('notify')
                    var.put('notify', PyJs_notify_931_)
                else:
                    if (var.get('Promise') and var.get('Promise').get('resolve')):
                        var.put('promise', var.get('Promise').callprop('resolve', var.get('undefined')))
                        @Js
                        def PyJs_notify_932_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments, 'notify':PyJs_notify_932_}, var)
                            var.registers([])
                            var.get('promise').callprop('then', var.get('flush'))
                        PyJs_notify_932_._set_name('notify')
                        var.put('notify', PyJs_notify_932_)
                    else:
                        @Js
                        def PyJs_notify_933_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments, 'notify':PyJs_notify_933_}, var)
                            var.registers([])
                            var.get('macrotask').callprop('call', var.get('global'), var.get('flush'))
                        PyJs_notify_933_._set_name('notify')
                        var.put('notify', PyJs_notify_933_)
            @Js
            def PyJs_anonymous_934_(fn, this, arguments, var=var):
                var = Scope({'fn':fn, 'this':this, 'arguments':arguments}, var)
                var.registers(['fn', 'task'])
                var.put('task', Js({'fn':var.get('fn'),'next':var.get('undefined')}))
                if var.get('last'):
                    var.get('last').put('next', var.get('task'))
                if var.get('head').neg():
                    var.put('head', var.get('task'))
                    var.get('notify')()
                var.put('last', var.get('task'))
            PyJs_anonymous_934_._set_name('anonymous')
            return PyJs_anonymous_934_
        PyJs_anonymous_928_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_928_)
    PyJs_anonymous_927_._set_name('anonymous')
    @Js
    def PyJs_anonymous_935_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['PromiseCapability', 'module', 'exports', 'aFunction', 'require'])
        @Js
        def PyJsHoisted_PromiseCapability_(C, this, arguments, var=var):
            var = Scope({'C':C, 'this':this, 'arguments':arguments}, var)
            var.registers(['resolve', 'reject', 'C'])
            pass
            @Js
            def PyJs_anonymous_936_(PyJsArg_24247265736f6c7665_, PyJsArg_242472656a656374_, this, arguments, var=var):
                var = Scope({'$$resolve':PyJsArg_24247265736f6c7665_, '$$reject':PyJsArg_242472656a656374_, 'this':this, 'arguments':arguments}, var)
                var.registers(['$$reject', '$$resolve'])
                if (PyJsStrictNeq(var.get('resolve'),var.get('undefined')) or PyJsStrictNeq(var.get('reject'),var.get('undefined'))):
                    PyJsTempException = JsToPyException(var.get('TypeError')(Js('Bad Promise constructor')))
                    raise PyJsTempException
                var.put('resolve', var.get('$$resolve'))
                var.put('reject', var.get('$$reject'))
            PyJs_anonymous_936_._set_name('anonymous')
            var.get(u"this").put('promise', var.get('C').create(PyJs_anonymous_936_))
            var.get(u"this").put('resolve', var.get('aFunction')(var.get('resolve')))
            var.get(u"this").put('reject', var.get('aFunction')(var.get('reject')))
        PyJsHoisted_PromiseCapability_.func_name = 'PromiseCapability'
        var.put('PromiseCapability', PyJsHoisted_PromiseCapability_)
        Js('use strict')
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        pass
        @Js
        def PyJs_anonymous_937_(C, this, arguments, var=var):
            var = Scope({'C':C, 'this':this, 'arguments':arguments}, var)
            var.registers(['C'])
            return var.get('PromiseCapability').create(var.get('C'))
        PyJs_anonymous_937_._set_name('anonymous')
        var.get('module').get('exports').put('f', PyJs_anonymous_937_)
    PyJs_anonymous_935_._set_name('anonymous')
    @Js
    def PyJs_anonymous_938_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['toObject', 'module', 'IObject', 'pIE', 'exports', '$assign', 'gOPS', 'DESCRIPTORS', 'require', 'getKeys'])
        Js('use strict')
        var.put('DESCRIPTORS', var.get('require')(Js('./_descriptors')))
        var.put('getKeys', var.get('require')(Js('./_object-keys')))
        var.put('gOPS', var.get('require')(Js('./_object-gops')))
        var.put('pIE', var.get('require')(Js('./_object-pie')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('IObject', var.get('require')(Js('./_iobject')))
        var.put('$assign', var.get('Object').get('assign'))
        @Js
        def PyJs_assign_939_(target, source, this, arguments, var=var):
            var = Scope({'target':target, 'source':source, 'this':this, 'arguments':arguments, 'assign':PyJs_assign_939_}, var)
            var.registers(['source', 'isEnum', 'S', 'aLen', 'key', 'target', 'keys', 'length', 'getSymbols', 'T', 'index', 'j'])
            var.put('T', var.get('toObject')(var.get('target')))
            var.put('aLen', var.get('arguments').get('length'))
            var.put('index', Js(1.0))
            var.put('getSymbols', var.get('gOPS').get('f'))
            var.put('isEnum', var.get('pIE').get('f'))
            while (var.get('aLen')>var.get('index')):
                var.put('S', var.get('IObject')(var.get('arguments').get((var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1)))))
                var.put('keys', (var.get('getKeys')(var.get('S')).callprop('concat', var.get('getSymbols')(var.get('S'))) if var.get('getSymbols') else var.get('getKeys')(var.get('S'))))
                var.put('length', var.get('keys').get('length'))
                var.put('j', Js(0.0))
                pass
                while (var.get('length')>var.get('j')):
                    var.put('key', var.get('keys').get((var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))))
                    if (var.get('DESCRIPTORS').neg() or var.get('isEnum').callprop('call', var.get('S'), var.get('key'))):
                        var.get('T').put(var.get('key'), var.get('S').get(var.get('key')))
            return var.get('T')
        PyJs_assign_939_._set_name('assign')
        @Js
        def PyJs_anonymous_940_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['S', 'K', 'A', 'B'])
            var.put('A', Js({}))
            var.put('B', Js({}))
            var.put('S', var.get('Symbol')())
            var.put('K', Js('abcdefghijklmnopqrst'))
            var.get('A').put(var.get('S'), Js(7.0))
            @Js
            def PyJs_anonymous_941_(k, this, arguments, var=var):
                var = Scope({'k':k, 'this':this, 'arguments':arguments}, var)
                var.registers(['k'])
                var.get('B').put(var.get('k'), var.get('k'))
            PyJs_anonymous_941_._set_name('anonymous')
            var.get('K').callprop('split', Js('')).callprop('forEach', PyJs_anonymous_941_)
            return ((var.get('$assign')(Js({}), var.get('A')).get(var.get('S'))!=Js(7.0)) or (var.get('Object').callprop('keys', var.get('$assign')(Js({}), var.get('B'))).callprop('join', Js(''))!=var.get('K')))
        PyJs_anonymous_940_._set_name('anonymous')
        var.get('module').put('exports', (PyJs_assign_939_ if (var.get('$assign').neg() or var.get('require')(Js('./_fails'))(PyJs_anonymous_940_)) else var.get('$assign')))
    PyJs_anonymous_938_._set_name('anonymous')
    @Js
    def PyJs_anonymous_942_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'enumBugKeys', 'dPs', '_createDict', 'Empty', 'anObject', 'require', 'PROTOTYPE', 'IE_PROTO'])
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('dPs', var.get('require')(Js('./_object-dps')))
        var.put('enumBugKeys', var.get('require')(Js('./_enum-bug-keys')))
        var.put('IE_PROTO', var.get('require')(Js('./_shared-key'))(Js('IE_PROTO')))
        @Js
        def PyJs_Empty_943_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'Empty':PyJs_Empty_943_}, var)
            var.registers([])
            pass
        PyJs_Empty_943_._set_name('Empty')
        var.put('Empty', PyJs_Empty_943_)
        var.put('PROTOTYPE', Js('prototype'))
        @Js
        def PyJs_createDict_944_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'createDict':PyJs_createDict_944_}, var)
            var.registers(['iframe', 'iframeDocument', 'i', 'gt', 'lt'])
            var.put('iframe', var.get('require')(Js('./_dom-create'))(Js('iframe')))
            var.put('i', var.get('enumBugKeys').get('length'))
            var.put('lt', Js('<'))
            var.put('gt', Js('>'))
            pass
            var.get('iframe').get('style').put('display', Js('none'))
            var.get('require')(Js('./_html')).callprop('appendChild', var.get('iframe'))
            var.get('iframe').put('src', Js('javascript:'))
            var.put('iframeDocument', var.get('iframe').get('contentWindow').get('document'))
            var.get('iframeDocument').callprop('open')
            var.get('iframeDocument').callprop('write', ((((((var.get('lt')+Js('script'))+var.get('gt'))+Js('document.F=Object'))+var.get('lt'))+Js('/script'))+var.get('gt')))
            var.get('iframeDocument').callprop('close')
            var.put('_createDict', var.get('iframeDocument').get('F'))
            while (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1)):
                var.get('_createDict').get(var.get('PROTOTYPE')).delete(var.get('enumBugKeys').get(var.get('i')))
            return var.get('_createDict')()
        PyJs_createDict_944_._set_name('createDict')
        var.put('_createDict', PyJs_createDict_944_)
        @Js
        def PyJs_create_945_(O, Properties, this, arguments, var=var):
            var = Scope({'O':O, 'Properties':Properties, 'this':this, 'arguments':arguments, 'create':PyJs_create_945_}, var)
            var.registers(['O', 'result', 'Properties'])
            pass
            if PyJsStrictNeq(var.get('O'),var.get(u"null")):
                var.get('Empty').put(var.get('PROTOTYPE'), var.get('anObject')(var.get('O')))
                var.put('result', var.get('Empty').create())
                var.get('Empty').put(var.get('PROTOTYPE'), var.get(u"null"))
                var.get('result').put(var.get('IE_PROTO'), var.get('O'))
            else:
                var.put('result', var.get('_createDict')())
            return (var.get('result') if PyJsStrictEq(var.get('Properties'),var.get('undefined')) else var.get('dPs')(var.get('result'), var.get('Properties')))
        PyJs_create_945_._set_name('create')
        var.get('module').put('exports', (var.get('Object').get('create') or PyJs_create_945_))
    PyJs_anonymous_942_._set_name('anonymous')
    @Js
    def PyJs_anonymous_946_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'toPrimitive', 'exports', 'anObject', 'require', 'dP', 'IE8_DOM_DEFINE'])
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('IE8_DOM_DEFINE', var.get('require')(Js('./_ie8-dom-define')))
        var.put('toPrimitive', var.get('require')(Js('./_to-primitive')))
        var.put('dP', var.get('Object').get('defineProperty'))
        @Js
        def PyJs_defineProperty_947_(O, P, Attributes, this, arguments, var=var):
            var = Scope({'O':O, 'P':P, 'Attributes':Attributes, 'this':this, 'arguments':arguments, 'defineProperty':PyJs_defineProperty_947_}, var)
            var.registers(['O', 'Attributes', 'P'])
            var.get('anObject')(var.get('O'))
            var.put('P', var.get('toPrimitive')(var.get('P'), Js(True)))
            var.get('anObject')(var.get('Attributes'))
            if var.get('IE8_DOM_DEFINE'):
                try:
                    return var.get('dP')(var.get('O'), var.get('P'), var.get('Attributes'))
                except PyJsException as PyJsTempException:
                    PyJsHolder_65_4956338 = var.own.get('e')
                    var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                    try:
                        pass
                    finally:
                        if PyJsHolder_65_4956338 is not None:
                            var.own['e'] = PyJsHolder_65_4956338
                        else:
                            del var.own['e']
                        del PyJsHolder_65_4956338
            if (var.get('Attributes').contains(Js('get')) or var.get('Attributes').contains(Js('set'))):
                PyJsTempException = JsToPyException(var.get('TypeError')(Js('Accessors not supported!')))
                raise PyJsTempException
            if var.get('Attributes').contains(Js('value')):
                var.get('O').put(var.get('P'), var.get('Attributes').get('value'))
            return var.get('O')
        PyJs_defineProperty_947_._set_name('defineProperty')
        var.get('exports').put('f', (var.get('Object').get('defineProperty') if var.get('require')(Js('./_descriptors')) else PyJs_defineProperty_947_))
    PyJs_anonymous_946_._set_name('anonymous')
    @Js
    def PyJs_anonymous_948_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'anObject', 'require', 'dP', 'getKeys'])
        var.put('dP', var.get('require')(Js('./_object-dp')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('getKeys', var.get('require')(Js('./_object-keys')))
        @Js
        def PyJs_defineProperties_949_(O, Properties, this, arguments, var=var):
            var = Scope({'O':O, 'Properties':Properties, 'this':this, 'arguments':arguments, 'defineProperties':PyJs_defineProperties_949_}, var)
            var.registers(['Properties', 'i', 'O', 'length', 'P', 'keys'])
            var.get('anObject')(var.get('O'))
            var.put('keys', var.get('getKeys')(var.get('Properties')))
            var.put('length', var.get('keys').get('length'))
            var.put('i', Js(0.0))
            pass
            while (var.get('length')>var.get('i')):
                var.get('dP').callprop('f', var.get('O'), var.put('P', var.get('keys').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)))), var.get('Properties').get(var.get('P')))
            return var.get('O')
        PyJs_defineProperties_949_._set_name('defineProperties')
        var.get('module').put('exports', (var.get('Object').get('defineProperties') if var.get('require')(Js('./_descriptors')) else PyJs_defineProperties_949_))
    PyJs_anonymous_948_._set_name('anonymous')
    @Js
    def PyJs_anonymous_950_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        Js('use strict')
        @Js
        def PyJs_anonymous_951_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['K'])
            var.put('K', var.get('Math').callprop('random'))
            @Js
            def PyJs_anonymous_952_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                pass
            PyJs_anonymous_952_._set_name('anonymous')
            var.get('__defineSetter__').callprop('call', var.get(u"null"), var.get('K'), PyJs_anonymous_952_)
            var.get('require')(Js('./_global')).delete(var.get('K'))
        PyJs_anonymous_951_._set_name('anonymous')
        var.get('module').put('exports', (var.get('require')(Js('./_library')) or var.get('require')(Js('./_fails'))(PyJs_anonymous_951_).neg()))
    PyJs_anonymous_950_._set_name('anonymous')
    @Js
    def PyJs_anonymous_953_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['has', 'module', 'toPrimitive', 'pIE', 'exports', 'gOPD', 'createDesc', 'toIObject', 'require', 'IE8_DOM_DEFINE'])
        var.put('pIE', var.get('require')(Js('./_object-pie')))
        var.put('createDesc', var.get('require')(Js('./_property-desc')))
        var.put('toIObject', var.get('require')(Js('./_to-iobject')))
        var.put('toPrimitive', var.get('require')(Js('./_to-primitive')))
        var.put('has', var.get('require')(Js('./_has')))
        var.put('IE8_DOM_DEFINE', var.get('require')(Js('./_ie8-dom-define')))
        var.put('gOPD', var.get('Object').get('getOwnPropertyDescriptor'))
        @Js
        def PyJs_getOwnPropertyDescriptor_954_(O, P, this, arguments, var=var):
            var = Scope({'O':O, 'P':P, 'this':this, 'arguments':arguments, 'getOwnPropertyDescriptor':PyJs_getOwnPropertyDescriptor_954_}, var)
            var.registers(['O', 'P'])
            var.put('O', var.get('toIObject')(var.get('O')))
            var.put('P', var.get('toPrimitive')(var.get('P'), Js(True)))
            if var.get('IE8_DOM_DEFINE'):
                try:
                    return var.get('gOPD')(var.get('O'), var.get('P'))
                except PyJsException as PyJsTempException:
                    PyJsHolder_65_20398325 = var.own.get('e')
                    var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                    try:
                        pass
                    finally:
                        if PyJsHolder_65_20398325 is not None:
                            var.own['e'] = PyJsHolder_65_20398325
                        else:
                            del var.own['e']
                        del PyJsHolder_65_20398325
            if var.get('has')(var.get('O'), var.get('P')):
                return var.get('createDesc')(var.get('pIE').get('f').callprop('call', var.get('O'), var.get('P')).neg(), var.get('O').get(var.get('P')))
        PyJs_getOwnPropertyDescriptor_954_._set_name('getOwnPropertyDescriptor')
        var.get('exports').put('f', (var.get('gOPD') if var.get('require')(Js('./_descriptors')) else PyJs_getOwnPropertyDescriptor_954_))
    PyJs_anonymous_953_._set_name('anonymous')
    @Js
    def PyJs_anonymous_955_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'toString', 'exports', 'gOPN', 'getWindowNames', 'windowNames', 'toIObject', 'require'])
        var.put('toIObject', var.get('require')(Js('./_to-iobject')))
        var.put('gOPN', var.get('require')(Js('./_object-gopn')).get('f'))
        var.put('toString', Js({}).get('toString'))
        var.put('windowNames', (var.get('Object').callprop('getOwnPropertyNames', var.get('window')) if ((((Js('undefined') if PyJsStrictEq(var.get('window',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('window')))==Js('object')) and var.get('window')) and var.get('Object').get('getOwnPropertyNames')) else Js([])))
        @Js
        def PyJs_getWindowNames_956_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'getWindowNames':PyJs_getWindowNames_956_}, var)
            var.registers(['it'])
            try:
                return var.get('gOPN')(var.get('it'))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_47949655 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    return var.get('windowNames').callprop('slice')
                finally:
                    if PyJsHolder_65_47949655 is not None:
                        var.own['e'] = PyJsHolder_65_47949655
                    else:
                        del var.own['e']
                    del PyJsHolder_65_47949655
        PyJs_getWindowNames_956_._set_name('getWindowNames')
        var.put('getWindowNames', PyJs_getWindowNames_956_)
        @Js
        def PyJs_getOwnPropertyNames_957_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'getOwnPropertyNames':PyJs_getOwnPropertyNames_957_}, var)
            var.registers(['it'])
            return (var.get('getWindowNames')(var.get('it')) if (var.get('windowNames') and (var.get('toString').callprop('call', var.get('it'))==Js('[object Window]'))) else var.get('gOPN')(var.get('toIObject')(var.get('it'))))
        PyJs_getOwnPropertyNames_957_._set_name('getOwnPropertyNames')
        var.get('module').get('exports').put('f', PyJs_getOwnPropertyNames_957_)
    PyJs_anonymous_955_._set_name('anonymous')
    @Js
    def PyJs_anonymous_958_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', '$keys', 'hiddenKeys', 'require'])
        var.put('$keys', var.get('require')(Js('./_object-keys-internal')))
        var.put('hiddenKeys', var.get('require')(Js('./_enum-bug-keys')).callprop('concat', Js('length'), Js('prototype')))
        @Js
        def PyJs_getOwnPropertyNames_959_(O, this, arguments, var=var):
            var = Scope({'O':O, 'this':this, 'arguments':arguments, 'getOwnPropertyNames':PyJs_getOwnPropertyNames_959_}, var)
            var.registers(['O'])
            return var.get('$keys')(var.get('O'), var.get('hiddenKeys'))
        PyJs_getOwnPropertyNames_959_._set_name('getOwnPropertyNames')
        var.get('exports').put('f', (var.get('Object').get('getOwnPropertyNames') or PyJs_getOwnPropertyNames_959_))
    PyJs_anonymous_958_._set_name('anonymous')
    @Js
    def PyJs_anonymous_960_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('exports').put('f', var.get('Object').get('getOwnPropertySymbols'))
    PyJs_anonymous_960_._set_name('anonymous')
    @Js
    def PyJs_anonymous_961_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['has', 'toObject', 'module', 'exports', 'ObjectProto', 'require', 'IE_PROTO'])
        var.put('has', var.get('require')(Js('./_has')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('IE_PROTO', var.get('require')(Js('./_shared-key'))(Js('IE_PROTO')))
        var.put('ObjectProto', var.get('Object').get('prototype'))
        @Js
        def PyJs_anonymous_962_(O, this, arguments, var=var):
            var = Scope({'O':O, 'this':this, 'arguments':arguments}, var)
            var.registers(['O'])
            var.put('O', var.get('toObject')(var.get('O')))
            if var.get('has')(var.get('O'), var.get('IE_PROTO')):
                return var.get('O').get(var.get('IE_PROTO'))
            if ((var.get('O').get('constructor').typeof()==Js('function')) and var.get('O').instanceof(var.get('O').get('constructor'))):
                return var.get('O').get('constructor').get('prototype')
            return (var.get('ObjectProto') if var.get('O').instanceof(var.get('Object')) else var.get(u"null"))
        PyJs_anonymous_962_._set_name('anonymous')
        var.get('module').put('exports', (var.get('Object').get('getPrototypeOf') or PyJs_anonymous_962_))
    PyJs_anonymous_961_._set_name('anonymous')
    @Js
    def PyJs_anonymous_963_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['has', 'module', 'arrayIndexOf', 'exports', 'toIObject', 'require', 'IE_PROTO'])
        var.put('has', var.get('require')(Js('./_has')))
        var.put('toIObject', var.get('require')(Js('./_to-iobject')))
        var.put('arrayIndexOf', var.get('require')(Js('./_array-includes'))(Js(False)))
        var.put('IE_PROTO', var.get('require')(Js('./_shared-key'))(Js('IE_PROTO')))
        @Js
        def PyJs_anonymous_964_(object, names, this, arguments, var=var):
            var = Scope({'object':object, 'names':names, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'O', 'key', 'names', 'object', 'result'])
            var.put('O', var.get('toIObject')(var.get('object')))
            var.put('i', Js(0.0))
            var.put('result', Js([]))
            pass
            for PyJsTemp in var.get('O'):
                var.put('key', PyJsTemp)
                if (var.get('key')!=var.get('IE_PROTO')):
                    (var.get('has')(var.get('O'), var.get('key')) and var.get('result').callprop('push', var.get('key')))
            while (var.get('names').get('length')>var.get('i')):
                if var.get('has')(var.get('O'), var.put('key', var.get('names').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))):
                    ((~var.get('arrayIndexOf')(var.get('result'), var.get('key'))) or var.get('result').callprop('push', var.get('key')))
            return var.get('result')
        PyJs_anonymous_964_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_964_)
    PyJs_anonymous_963_._set_name('anonymous')
    @Js
    def PyJs_anonymous_965_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', '$keys', 'enumBugKeys', 'require'])
        var.put('$keys', var.get('require')(Js('./_object-keys-internal')))
        var.put('enumBugKeys', var.get('require')(Js('./_enum-bug-keys')))
        @Js
        def PyJs_keys_966_(O, this, arguments, var=var):
            var = Scope({'O':O, 'this':this, 'arguments':arguments, 'keys':PyJs_keys_966_}, var)
            var.registers(['O'])
            return var.get('$keys')(var.get('O'), var.get('enumBugKeys'))
        PyJs_keys_966_._set_name('keys')
        var.get('module').put('exports', (var.get('Object').get('keys') or PyJs_keys_966_))
    PyJs_anonymous_965_._set_name('anonymous')
    @Js
    def PyJs_anonymous_967_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('exports').put('f', Js({}).get('propertyIsEnumerable'))
    PyJs_anonymous_967_._set_name('anonymous')
    @Js
    def PyJs_anonymous_968_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'fails', '$export', 'exports', 'core', 'require'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('core', var.get('require')(Js('./_core')))
        var.put('fails', var.get('require')(Js('./_fails')))
        @Js
        def PyJs_anonymous_969_(KEY, exec, this, arguments, var=var):
            var = Scope({'KEY':KEY, 'exec':exec, 'this':this, 'arguments':arguments}, var)
            var.registers(['KEY', 'fn', 'exec', 'exp'])
            var.put('fn', ((var.get('core').get('Object') or Js({})).get(var.get('KEY')) or var.get('Object').get(var.get('KEY'))))
            var.put('exp', Js({}))
            var.get('exp').put(var.get('KEY'), var.get('exec')(var.get('fn')))
            @Js
            def PyJs_anonymous_970_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('fn')(Js(1.0))
            PyJs_anonymous_970_._set_name('anonymous')
            var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('fails')(PyJs_anonymous_970_))), Js('Object'), var.get('exp'))
        PyJs_anonymous_969_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_969_)
    PyJs_anonymous_968_._set_name('anonymous')
    @Js
    def PyJs_anonymous_971_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'isEnum', 'exports', 'DESCRIPTORS', 'toIObject', 'require', 'getKeys'])
        var.put('DESCRIPTORS', var.get('require')(Js('./_descriptors')))
        var.put('getKeys', var.get('require')(Js('./_object-keys')))
        var.put('toIObject', var.get('require')(Js('./_to-iobject')))
        var.put('isEnum', var.get('require')(Js('./_object-pie')).get('f'))
        @Js
        def PyJs_anonymous_972_(isEntries, this, arguments, var=var):
            var = Scope({'isEntries':isEntries, 'this':this, 'arguments':arguments}, var)
            var.registers(['isEntries'])
            @Js
            def PyJs_anonymous_973_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
                var.registers(['i', 'O', 'key', 'length', 'it', 'result', 'keys'])
                var.put('O', var.get('toIObject')(var.get('it')))
                var.put('keys', var.get('getKeys')(var.get('O')))
                var.put('length', var.get('keys').get('length'))
                var.put('i', Js(0.0))
                var.put('result', Js([]))
                pass
                while (var.get('length')>var.get('i')):
                    var.put('key', var.get('keys').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))
                    if (var.get('DESCRIPTORS').neg() or var.get('isEnum').callprop('call', var.get('O'), var.get('key'))):
                        var.get('result').callprop('push', (Js([var.get('key'), var.get('O').get(var.get('key'))]) if var.get('isEntries') else var.get('O').get(var.get('key'))))
                return var.get('result')
            PyJs_anonymous_973_._set_name('anonymous')
            return PyJs_anonymous_973_
        PyJs_anonymous_972_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_972_)
    PyJs_anonymous_971_._set_name('anonymous')
    @Js
    def PyJs_anonymous_974_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'Reflect', 'exports', 'gOPN', 'gOPS', 'anObject', 'require'])
        var.put('gOPN', var.get('require')(Js('./_object-gopn')))
        var.put('gOPS', var.get('require')(Js('./_object-gops')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('Reflect', var.get('require')(Js('./_global')).get('Reflect'))
        @Js
        def PyJs_ownKeys_975_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'ownKeys':PyJs_ownKeys_975_}, var)
            var.registers(['getSymbols', 'keys', 'it'])
            var.put('keys', var.get('gOPN').callprop('f', var.get('anObject')(var.get('it'))))
            var.put('getSymbols', var.get('gOPS').get('f'))
            return (var.get('keys').callprop('concat', var.get('getSymbols')(var.get('it'))) if var.get('getSymbols') else var.get('keys'))
        PyJs_ownKeys_975_._set_name('ownKeys')
        var.get('module').put('exports', ((var.get('Reflect') and var.get('Reflect').get('ownKeys')) or PyJs_ownKeys_975_))
    PyJs_anonymous_974_._set_name('anonymous')
    @Js
    def PyJs_anonymous_976_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$trim', 'exports', 'require', '$parseFloat'])
        var.put('$parseFloat', var.get('require')(Js('./_global')).get('parseFloat'))
        var.put('$trim', var.get('require')(Js('./_string-trim')).get('trim'))
        @Js
        def PyJs_parseFloat_977_(str, this, arguments, var=var):
            var = Scope({'str':str, 'this':this, 'arguments':arguments, 'parseFloat':PyJs_parseFloat_977_}, var)
            var.registers(['str', 'result', 'string'])
            var.put('string', var.get('$trim')(var.get('String')(var.get('str')), Js(3.0)))
            var.put('result', var.get('$parseFloat')(var.get('string')))
            return ((-Js(0.0)) if (PyJsStrictEq(var.get('result'),Js(0.0)) and (var.get('string').callprop('charAt', Js(0.0))==Js('-'))) else var.get('result'))
        PyJs_parseFloat_977_._set_name('parseFloat')
        var.get('module').put('exports', (PyJs_parseFloat_977_ if PyJsStrictNeq((Js(1.0)/var.get('$parseFloat')((var.get('require')(Js('./_string-ws'))+Js('-0')))),(-var.get('Infinity'))) else var.get('$parseFloat')))
    PyJs_anonymous_976_._set_name('anonymous')
    @Js
    def PyJs_anonymous_978_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['hex', 'module', '$trim', '$parseInt', 'exports', 'ws', 'require'])
        var.put('$parseInt', var.get('require')(Js('./_global')).get('parseInt'))
        var.put('$trim', var.get('require')(Js('./_string-trim')).get('trim'))
        var.put('ws', var.get('require')(Js('./_string-ws')))
        var.put('hex', JsRegExp('/^[-+]?0[xX]/'))
        @Js
        def PyJs_parseInt_979_(str, radix, this, arguments, var=var):
            var = Scope({'str':str, 'radix':radix, 'this':this, 'arguments':arguments, 'parseInt':PyJs_parseInt_979_}, var)
            var.registers(['str', 'string', 'radix'])
            var.put('string', var.get('$trim')(var.get('String')(var.get('str')), Js(3.0)))
            return var.get('$parseInt')(var.get('string'), (PyJsBshift(var.get('radix'),Js(0.0)) or (Js(16.0) if var.get('hex').callprop('test', var.get('string')) else Js(10.0))))
        PyJs_parseInt_979_._set_name('parseInt')
        var.get('module').put('exports', (PyJs_parseInt_979_ if (PyJsStrictNeq(var.get('$parseInt')((var.get('ws')+Js('08'))),Js(8.0)) or PyJsStrictNeq(var.get('$parseInt')((var.get('ws')+Js('0x16'))),Js(22.0))) else var.get('$parseInt')))
    PyJs_anonymous_978_._set_name('anonymous')
    @Js
    def PyJs_anonymous_980_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_981_(exec, this, arguments, var=var):
            var = Scope({'exec':exec, 'this':this, 'arguments':arguments}, var)
            var.registers(['exec'])
            try:
                return Js({'e':Js(False),'v':var.get('exec')()})
            except PyJsException as PyJsTempException:
                PyJsHolder_65_39962859 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    return Js({'e':Js(True),'v':var.get('e')})
                finally:
                    if PyJsHolder_65_39962859 is not None:
                        var.own['e'] = PyJsHolder_65_39962859
                    else:
                        del var.own['e']
                    del PyJsHolder_65_39962859
        PyJs_anonymous_981_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_981_)
    PyJs_anonymous_980_._set_name('anonymous')
    @Js
    def PyJs_anonymous_982_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'newPromiseCapability', 'exports', 'anObject', 'require', 'isObject'])
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('newPromiseCapability', var.get('require')(Js('./_new-promise-capability')))
        @Js
        def PyJs_anonymous_983_(C, x, this, arguments, var=var):
            var = Scope({'C':C, 'x':x, 'this':this, 'arguments':arguments}, var)
            var.registers(['x', 'resolve', 'promiseCapability', 'C'])
            var.get('anObject')(var.get('C'))
            if (var.get('isObject')(var.get('x')) and PyJsStrictEq(var.get('x').get('constructor'),var.get('C'))):
                return var.get('x')
            var.put('promiseCapability', var.get('newPromiseCapability').callprop('f', var.get('C')))
            var.put('resolve', var.get('promiseCapability').get('resolve'))
            var.get('resolve')(var.get('x'))
            return var.get('promiseCapability').get('promise')
        PyJs_anonymous_983_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_983_)
    PyJs_anonymous_982_._set_name('anonymous')
    @Js
    def PyJs_anonymous_984_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_985_(bitmap, value, this, arguments, var=var):
            var = Scope({'bitmap':bitmap, 'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['bitmap', 'value'])
            return Js({'enumerable':(var.get('bitmap')&Js(1.0)).neg(),'configurable':(var.get('bitmap')&Js(2.0)).neg(),'writable':(var.get('bitmap')&Js(4.0)).neg(),'value':var.get('value')})
        PyJs_anonymous_985_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_985_)
    PyJs_anonymous_984_._set_name('anonymous')
    @Js
    def PyJs_anonymous_986_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'redefine', 'module', 'exports'])
        var.put('redefine', var.get('require')(Js('./_redefine')))
        @Js
        def PyJs_anonymous_987_(target, src, safe, this, arguments, var=var):
            var = Scope({'target':target, 'src':src, 'safe':safe, 'this':this, 'arguments':arguments}, var)
            var.registers(['key', 'target', 'safe', 'src'])
            for PyJsTemp in var.get('src'):
                var.put('key', PyJsTemp)
                var.get('redefine')(var.get('target'), var.get('key'), var.get('src').get(var.get('key')), var.get('safe'))
            return var.get('target')
        PyJs_anonymous_987_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_987_)
    PyJs_anonymous_986_._set_name('anonymous')
    @Js
    def PyJs_anonymous_988_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['has', 'SRC', 'module', 'global', 'TO_STRING', 'TPL', 'exports', '$toString', 'require', 'hide'])
        var.put('global', var.get('require')(Js('./_global')))
        var.put('hide', var.get('require')(Js('./_hide')))
        var.put('has', var.get('require')(Js('./_has')))
        var.put('SRC', var.get('require')(Js('./_uid'))(Js('src')))
        var.put('$toString', var.get('require')(Js('./_function-to-string')))
        var.put('TO_STRING', Js('toString'))
        var.put('TPL', (Js('')+var.get('$toString')).callprop('split', var.get('TO_STRING')))
        @Js
        def PyJs_anonymous_989_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return var.get('$toString').callprop('call', var.get('it'))
        PyJs_anonymous_989_._set_name('anonymous')
        var.get('require')(Js('./_core')).put('inspectSource', PyJs_anonymous_989_)
        @Js
        def PyJs_toString_990_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'toString':PyJs_toString_990_}, var)
            var.registers([])
            return (((var.get(u"this",throw=False).typeof()==Js('function')) and var.get(u"this").get(var.get('SRC'))) or var.get('$toString').callprop('call', var.get(u"this")))
        PyJs_toString_990_._set_name('toString')
        @Js
        def PyJs_anonymous_991_(O, key, val, safe, this, arguments, var=var):
            var = Scope({'O':O, 'key':key, 'val':val, 'safe':safe, 'this':this, 'arguments':arguments}, var)
            var.registers(['isFunction', 'safe', 'val', 'O', 'key'])
            var.put('isFunction', (var.get('val',throw=False).typeof()==Js('function')))
            if var.get('isFunction'):
                (var.get('has')(var.get('val'), Js('name')) or var.get('hide')(var.get('val'), Js('name'), var.get('key')))
            if PyJsStrictEq(var.get('O').get(var.get('key')),var.get('val')):
                return var.get('undefined')
            if var.get('isFunction'):
                (var.get('has')(var.get('val'), var.get('SRC')) or var.get('hide')(var.get('val'), var.get('SRC'), ((Js('')+var.get('O').get(var.get('key'))) if var.get('O').get(var.get('key')) else var.get('TPL').callprop('join', var.get('String')(var.get('key'))))))
            if PyJsStrictEq(var.get('O'),var.get('global')):
                var.get('O').put(var.get('key'), var.get('val'))
            else:
                if var.get('safe').neg():
                    var.get('O').delete(var.get('key'))
                    var.get('hide')(var.get('O'), var.get('key'), var.get('val'))
                else:
                    if var.get('O').get(var.get('key')):
                        var.get('O').put(var.get('key'), var.get('val'))
                    else:
                        var.get('hide')(var.get('O'), var.get('key'), var.get('val'))
        PyJs_anonymous_991_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_991_)(var.get('Function').get('prototype'), var.get('TO_STRING'), PyJs_toString_990_)
    PyJs_anonymous_988_._set_name('anonymous')
    @Js
    def PyJs_anonymous_992_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'classof', 'exports', 'builtinExec', 'require'])
        Js('use strict')
        var.put('classof', var.get('require')(Js('./_classof')))
        var.put('builtinExec', var.get('RegExp').get('prototype').get('exec'))
        @Js
        def PyJs_anonymous_993_(R, S, this, arguments, var=var):
            var = Scope({'R':R, 'S':S, 'this':this, 'arguments':arguments}, var)
            var.registers(['S', 'result', 'R', 'exec'])
            var.put('exec', var.get('R').get('exec'))
            if PyJsStrictEq(var.get('exec',throw=False).typeof(),Js('function')):
                var.put('result', var.get('exec').callprop('call', var.get('R'), var.get('S')))
                if PyJsStrictNeq((Js('undefined') if PyJsStrictEq(var.get('result',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('result'))),Js('object')):
                    PyJsTempException = JsToPyException(var.get('TypeError').create(Js('RegExp exec method returned something other than an Object or null')))
                    raise PyJsTempException
                return var.get('result')
            if PyJsStrictNeq(var.get('classof')(var.get('R')),Js('RegExp')):
                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('RegExp#exec called on incompatible receiver')))
                raise PyJsTempException
            return var.get('builtinExec').callprop('call', var.get('R'), var.get('S'))
        PyJs_anonymous_993_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_993_)
    PyJs_anonymous_992_._set_name('anonymous')
    @Js
    def PyJs_anonymous_994_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['LAST_INDEX', 'module', 'regexpFlags', 'exports', 'nativeExec', 'PATCH', 'NPCG_INCLUDED', 'require', 'nativeReplace', 'patchedExec', 'UPDATES_LAST_INDEX_WRONG'])
        Js('use strict')
        var.put('regexpFlags', var.get('require')(Js('./_flags')))
        var.put('nativeExec', var.get('RegExp').get('prototype').get('exec'))
        var.put('nativeReplace', var.get('String').get('prototype').get('replace'))
        var.put('patchedExec', var.get('nativeExec'))
        var.put('LAST_INDEX', Js('lastIndex'))
        @Js
        def PyJs_anonymous_995_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['re1', 're2'])
            var.put('re1', JsRegExp('/a/'))
            var.put('re2', JsRegExp('/b*/g'))
            var.get('nativeExec').callprop('call', var.get('re1'), Js('a'))
            var.get('nativeExec').callprop('call', var.get('re2'), Js('a'))
            return (PyJsStrictNeq(var.get('re1').get(var.get('LAST_INDEX')),Js(0.0)) or PyJsStrictNeq(var.get('re2').get(var.get('LAST_INDEX')),Js(0.0)))
        PyJs_anonymous_995_._set_name('anonymous')
        var.put('UPDATES_LAST_INDEX_WRONG', PyJs_anonymous_995_())
        var.put('NPCG_INCLUDED', PyJsStrictNeq(JsRegExp('/()??/').callprop('exec', Js('')).get('1'),var.get('undefined')))
        var.put('PATCH', (var.get('UPDATES_LAST_INDEX_WRONG') or var.get('NPCG_INCLUDED')))
        if var.get('PATCH'):
            @Js
            def PyJs_exec_996_(str, this, arguments, var=var):
                var = Scope({'str':str, 'this':this, 'arguments':arguments, 'exec':PyJs_exec_996_}, var)
                var.registers(['i', 'match', 'str', 're', 'lastIndex', 'reCopy'])
                var.put('re', var.get(u"this"))
                pass
                if var.get('NPCG_INCLUDED'):
                    var.put('reCopy', var.get('RegExp').create(((Js('^')+var.get('re').get('source'))+Js('$(?!\\s)')), var.get('regexpFlags').callprop('call', var.get('re'))))
                if var.get('UPDATES_LAST_INDEX_WRONG'):
                    var.put('lastIndex', var.get('re').get(var.get('LAST_INDEX')))
                var.put('match', var.get('nativeExec').callprop('call', var.get('re'), var.get('str')))
                if (var.get('UPDATES_LAST_INDEX_WRONG') and var.get('match')):
                    var.get('re').put(var.get('LAST_INDEX'), ((var.get('match').get('index')+var.get('match').get('0').get('length')) if var.get('re').get('global') else var.get('lastIndex')))
                if ((var.get('NPCG_INCLUDED') and var.get('match')) and (var.get('match').get('length')>Js(1.0))):
                    @Js
                    def PyJs_anonymous_997_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        #for JS loop
                        var.put('i', Js(1.0))
                        while (var.get('i')<(var.get('arguments').get('length')-Js(2.0))):
                            try:
                                if PyJsStrictEq(var.get('arguments').get(var.get('i')),var.get('undefined')):
                                    var.get('match').put(var.get('i'), var.get('undefined'))
                            finally:
                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    PyJs_anonymous_997_._set_name('anonymous')
                    var.get('nativeReplace').callprop('call', var.get('match').get('0'), var.get('reCopy'), PyJs_anonymous_997_)
                return var.get('match')
            PyJs_exec_996_._set_name('exec')
            var.put('patchedExec', PyJs_exec_996_)
        var.get('module').put('exports', var.get('patchedExec'))
    PyJs_anonymous_994_._set_name('anonymous')
    @Js
    def PyJs_anonymous_998_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_999_(regExp, replace, this, arguments, var=var):
            var = Scope({'regExp':regExp, 'replace':replace, 'this':this, 'arguments':arguments}, var)
            var.registers(['regExp', 'replace', 'replacer'])
            @Js
            def PyJs_anonymous_1000_(part, this, arguments, var=var):
                var = Scope({'part':part, 'this':this, 'arguments':arguments}, var)
                var.registers(['part'])
                return var.get('replace').get(var.get('part'))
            PyJs_anonymous_1000_._set_name('anonymous')
            var.put('replacer', (PyJs_anonymous_1000_ if PyJsStrictEq(var.get('replace'),var.get('Object')(var.get('replace'))) else var.get('replace')))
            @Js
            def PyJs_anonymous_1001_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
                var.registers(['it'])
                return var.get('String')(var.get('it')).callprop('replace', var.get('regExp'), var.get('replacer'))
            PyJs_anonymous_1001_._set_name('anonymous')
            return PyJs_anonymous_1001_
        PyJs_anonymous_999_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_999_)
    PyJs_anonymous_998_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1002_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_InlineNonPyName_1003_(x, y, this, arguments, var=var):
            var = Scope({'x':x, 'y':y, 'this':this, 'arguments':arguments, 'is':PyJs_InlineNonPyName_1003_}, var)
            var.registers(['y', 'x'])
            return ((PyJsStrictNeq(var.get('x'),Js(0.0)) or PyJsStrictEq((Js(1.0)/var.get('x')),(Js(1.0)/var.get('y')))) if PyJsStrictEq(var.get('x'),var.get('y')) else ((var.get('x')!=var.get('x')) and (var.get('y')!=var.get('y'))))
        PyJs_InlineNonPyName_1003_._set_name('is')
        var.get('module').put('exports', (var.get('Object').get('is') or PyJs_InlineNonPyName_1003_))
    PyJs_anonymous_1002_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1004_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'forOf', 'exports', 'aFunction', 'require', 'ctx'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        var.put('ctx', var.get('require')(Js('./_ctx')))
        var.put('forOf', var.get('require')(Js('./_for-of')))
        @Js
        def PyJs_anonymous_1005_(COLLECTION, this, arguments, var=var):
            var = Scope({'COLLECTION':COLLECTION, 'this':this, 'arguments':arguments}, var)
            var.registers(['COLLECTION'])
            @Js
            def PyJs_InlineNonPyName_1006_(source, this, arguments, var=var):
                var = Scope({'source':source, 'this':this, 'arguments':arguments, 'from':PyJs_InlineNonPyName_1006_}, var)
                var.registers(['n', 'source', 'mapping', 'cb', 'A', 'mapFn'])
                var.put('mapFn', var.get('arguments').get('1'))
                pass
                var.get('aFunction')(var.get(u"this"))
                var.put('mapping', PyJsStrictNeq(var.get('mapFn'),var.get('undefined')))
                if var.get('mapping'):
                    var.get('aFunction')(var.get('mapFn'))
                if (var.get('source')==var.get('undefined')):
                    return var.get(u"this").create()
                var.put('A', Js([]))
                if var.get('mapping'):
                    var.put('n', Js(0.0))
                    var.put('cb', var.get('ctx')(var.get('mapFn'), var.get('arguments').get('2'), Js(2.0)))
                    @Js
                    def PyJs_anonymous_1007_(nextItem, this, arguments, var=var):
                        var = Scope({'nextItem':nextItem, 'this':this, 'arguments':arguments}, var)
                        var.registers(['nextItem'])
                        var.get('A').callprop('push', var.get('cb')(var.get('nextItem'), (var.put('n',Js(var.get('n').to_number())+Js(1))-Js(1))))
                    PyJs_anonymous_1007_._set_name('anonymous')
                    var.get('forOf')(var.get('source'), Js(False), PyJs_anonymous_1007_)
                else:
                    var.get('forOf')(var.get('source'), Js(False), var.get('A').get('push'), var.get('A'))
                return var.get(u"this").create(var.get('A'))
            PyJs_InlineNonPyName_1006_._set_name('from')
            var.get('$export')(var.get('$export').get('S'), var.get('COLLECTION'), Js({'from':PyJs_InlineNonPyName_1006_}))
        PyJs_anonymous_1005_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1005_)
    PyJs_anonymous_1004_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1008_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        @Js
        def PyJs_anonymous_1009_(COLLECTION, this, arguments, var=var):
            var = Scope({'COLLECTION':COLLECTION, 'this':this, 'arguments':arguments}, var)
            var.registers(['COLLECTION'])
            @Js
            def PyJs_of_1010_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'of':PyJs_of_1010_}, var)
                var.registers(['length', 'A'])
                var.put('length', var.get('arguments').get('length'))
                var.put('A', var.get('Array').create(var.get('length')))
                while (var.put('length',Js(var.get('length').to_number())-Js(1))+Js(1)):
                    var.get('A').put(var.get('length'), var.get('arguments').get(var.get('length')))
                return var.get(u"this").create(var.get('A'))
            PyJs_of_1010_._set_name('of')
            var.get('$export')(var.get('$export').get('S'), var.get('COLLECTION'), Js({'of':PyJs_of_1010_}))
        PyJs_anonymous_1009_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1009_)
    PyJs_anonymous_1008_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1011_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'anObject', 'require', 'isObject', 'check'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        @Js
        def PyJs_check_1012_(O, proto, this, arguments, var=var):
            var = Scope({'O':O, 'proto':proto, 'this':this, 'arguments':arguments, 'check':PyJs_check_1012_}, var)
            var.registers(['O', 'proto'])
            var.get('anObject')(var.get('O'))
            if (var.get('isObject')(var.get('proto')).neg() and PyJsStrictNeq(var.get('proto'),var.get(u"null"))):
                PyJsTempException = JsToPyException(var.get('TypeError')((var.get('proto')+Js(": can't set as prototype!"))))
                raise PyJsTempException
        PyJs_check_1012_._set_name('check')
        var.put('check', PyJs_check_1012_)
        @Js
        def PyJs_anonymous_1013_(test, buggy, set, this, arguments, var=var):
            var = Scope({'test':test, 'buggy':buggy, 'set':set, 'this':this, 'arguments':arguments}, var)
            var.registers(['test', 'buggy', 'set'])
            try:
                var.put('set', var.get('require')(Js('./_ctx'))(var.get('Function').get('call'), var.get('require')(Js('./_object-gopd')).callprop('f', var.get('Object').get('prototype'), Js('__proto__')).get('set'), Js(2.0)))
                var.get('set')(var.get('test'), Js([]))
                var.put('buggy', var.get('test').instanceof(var.get('Array')).neg())
            except PyJsException as PyJsTempException:
                PyJsHolder_65_977847 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    var.put('buggy', Js(True))
                finally:
                    if PyJsHolder_65_977847 is not None:
                        var.own['e'] = PyJsHolder_65_977847
                    else:
                        del var.own['e']
                    del PyJsHolder_65_977847
            @Js
            def PyJs_setPrototypeOf_1014_(O, proto, this, arguments, var=var):
                var = Scope({'O':O, 'proto':proto, 'this':this, 'arguments':arguments, 'setPrototypeOf':PyJs_setPrototypeOf_1014_}, var)
                var.registers(['O', 'proto'])
                var.get('check')(var.get('O'), var.get('proto'))
                if var.get('buggy'):
                    var.get('O').put('__proto__', var.get('proto'))
                else:
                    var.get('set')(var.get('O'), var.get('proto'))
                return var.get('O')
            PyJs_setPrototypeOf_1014_._set_name('setPrototypeOf')
            return PyJs_setPrototypeOf_1014_
        PyJs_anonymous_1013_._set_name('anonymous')
        var.get('module').put('exports', Js({'set':(var.get('Object').get('setPrototypeOf') or (PyJs_anonymous_1013_(Js({}), Js(False)) if Js({}).contains(Js('__proto__')) else var.get('undefined'))),'check':var.get('check')}))
    PyJs_anonymous_1011_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1015_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'global', 'exports', 'SPECIES', 'DESCRIPTORS', 'require', 'dP'])
        Js('use strict')
        var.put('global', var.get('require')(Js('./_global')))
        var.put('dP', var.get('require')(Js('./_object-dp')))
        var.put('DESCRIPTORS', var.get('require')(Js('./_descriptors')))
        var.put('SPECIES', var.get('require')(Js('./_wks'))(Js('species')))
        @Js
        def PyJs_anonymous_1016_(KEY, this, arguments, var=var):
            var = Scope({'KEY':KEY, 'this':this, 'arguments':arguments}, var)
            var.registers(['KEY', 'C'])
            var.put('C', var.get('global').get(var.get('KEY')))
            if ((var.get('DESCRIPTORS') and var.get('C')) and var.get('C').get(var.get('SPECIES')).neg()):
                @Js
                def PyJs_get_1017_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_1017_}, var)
                    var.registers([])
                    return var.get(u"this")
                PyJs_get_1017_._set_name('get')
                var.get('dP').callprop('f', var.get('C'), var.get('SPECIES'), Js({'configurable':Js(True),'get':PyJs_get_1017_}))
        PyJs_anonymous_1016_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1016_)
    PyJs_anonymous_1015_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1018_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['has', 'module', 'TAG', 'exports', 'def', 'require'])
        var.put('def', var.get('require')(Js('./_object-dp')).get('f'))
        var.put('has', var.get('require')(Js('./_has')))
        var.put('TAG', var.get('require')(Js('./_wks'))(Js('toStringTag')))
        @Js
        def PyJs_anonymous_1019_(it, tag, stat, this, arguments, var=var):
            var = Scope({'it':it, 'tag':tag, 'stat':stat, 'this':this, 'arguments':arguments}, var)
            var.registers(['tag', 'stat', 'it'])
            if (var.get('it') and var.get('has')(var.put('it', (var.get('it') if var.get('stat') else var.get('it').get('prototype'))), var.get('TAG')).neg()):
                var.get('def')(var.get('it'), var.get('TAG'), Js({'configurable':Js(True),'value':var.get('tag')}))
        PyJs_anonymous_1019_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1019_)
    PyJs_anonymous_1018_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1020_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'shared', 'require', 'uid'])
        var.put('shared', var.get('require')(Js('./_shared'))(Js('keys')))
        var.put('uid', var.get('require')(Js('./_uid')))
        @Js
        def PyJs_anonymous_1021_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
            var.registers(['key'])
            return (var.get('shared').get(var.get('key')) or var.get('shared').put(var.get('key'), var.get('uid')(var.get('key'))))
        PyJs_anonymous_1021_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1021_)
    PyJs_anonymous_1020_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1022_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['store', 'global', 'module', 'SHARED', 'exports', 'core', 'require'])
        var.put('core', var.get('require')(Js('./_core')))
        var.put('global', var.get('require')(Js('./_global')))
        var.put('SHARED', Js('__core-js_shared__'))
        var.put('store', (var.get('global').get(var.get('SHARED')) or var.get('global').put(var.get('SHARED'), Js({}))))
        @Js
        def PyJs_anonymous_1023_(key, value, this, arguments, var=var):
            var = Scope({'key':key, 'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['key', 'value'])
            return (var.get('store').get(var.get('key')) or var.get('store').put(var.get('key'), (var.get('value') if PyJsStrictNeq(var.get('value'),var.get('undefined')) else Js({}))))
        PyJs_anonymous_1023_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1023_)(Js('versions'), Js([])).callprop('push', Js({'version':var.get('core').get('version'),'mode':(Js('pure') if var.get('require')(Js('./_library')) else Js('global')),'copyright':Js('© 2019 Denis Pushkarev (zloirock.ru)')}))
    PyJs_anonymous_1022_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1024_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'SPECIES', 'anObject', 'aFunction', 'require'])
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        var.put('SPECIES', var.get('require')(Js('./_wks'))(Js('species')))
        @Js
        def PyJs_anonymous_1025_(O, D, this, arguments, var=var):
            var = Scope({'O':O, 'D':D, 'this':this, 'arguments':arguments}, var)
            var.registers(['O', 'S', 'D', 'C'])
            var.put('C', var.get('anObject')(var.get('O')).get('constructor'))
            pass
            return (var.get('D') if (PyJsStrictEq(var.get('C'),var.get('undefined')) or (var.put('S', var.get('anObject')(var.get('C')).get(var.get('SPECIES')))==var.get('undefined'))) else var.get('aFunction')(var.get('S')))
        PyJs_anonymous_1025_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1025_)
    PyJs_anonymous_1024_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1026_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'fails', 'exports'])
        Js('use strict')
        var.put('fails', var.get('require')(Js('./_fails')))
        @Js
        def PyJs_anonymous_1027_(method, arg, this, arguments, var=var):
            var = Scope({'method':method, 'arg':arg, 'this':this, 'arguments':arguments}, var)
            var.registers(['arg', 'method'])
            @Js
            def PyJs_anonymous_1028_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                @Js
                def PyJs_anonymous_1029_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    pass
                PyJs_anonymous_1029_._set_name('anonymous')
                (var.get('method').callprop('call', var.get(u"null"), PyJs_anonymous_1029_, Js(1.0)) if var.get('arg') else var.get('method').callprop('call', var.get(u"null")))
            PyJs_anonymous_1028_._set_name('anonymous')
            return (var.get('method').neg().neg() and var.get('fails')(PyJs_anonymous_1028_))
        PyJs_anonymous_1027_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1027_)
    PyJs_anonymous_1026_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1030_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'toInteger', 'defined', 'require'])
        var.put('toInteger', var.get('require')(Js('./_to-integer')))
        var.put('defined', var.get('require')(Js('./_defined')))
        @Js
        def PyJs_anonymous_1031_(TO_STRING, this, arguments, var=var):
            var = Scope({'TO_STRING':TO_STRING, 'this':this, 'arguments':arguments}, var)
            var.registers(['TO_STRING'])
            @Js
            def PyJs_anonymous_1032_(that, pos, this, arguments, var=var):
                var = Scope({'that':that, 'pos':pos, 'this':this, 'arguments':arguments}, var)
                var.registers(['pos', 'b', 'i', 's', 'that', 'a', 'l'])
                var.put('s', var.get('String')(var.get('defined')(var.get('that'))))
                var.put('i', var.get('toInteger')(var.get('pos')))
                var.put('l', var.get('s').get('length'))
                pass
                if ((var.get('i')<Js(0.0)) or (var.get('i')>=var.get('l'))):
                    return (Js('') if var.get('TO_STRING') else var.get('undefined'))
                var.put('a', var.get('s').callprop('charCodeAt', var.get('i')))
                def PyJs_LONG_1033_(var=var):
                    return ((var.get('s').callprop('charAt', var.get('i')) if var.get('TO_STRING') else var.get('a')) if (((((var.get('a')<Js(55296)) or (var.get('a')>Js(56319))) or PyJsStrictEq((var.get('i')+Js(1.0)),var.get('l'))) or (var.put('b', var.get('s').callprop('charCodeAt', (var.get('i')+Js(1.0))))<Js(56320))) or (var.get('b')>Js(57343))) else (var.get('s').callprop('slice', var.get('i'), (var.get('i')+Js(2.0))) if var.get('TO_STRING') else ((((var.get('a')-Js(55296))<<Js(10.0))+(var.get('b')-Js(56320)))+Js(65536))))
                return PyJs_LONG_1033_()
            PyJs_anonymous_1032_._set_name('anonymous')
            return PyJs_anonymous_1032_
        PyJs_anonymous_1031_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1031_)
    PyJs_anonymous_1030_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1034_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'defined', 'require', 'isRegExp'])
        var.put('isRegExp', var.get('require')(Js('./_is-regexp')))
        var.put('defined', var.get('require')(Js('./_defined')))
        @Js
        def PyJs_anonymous_1035_(that, searchString, NAME, this, arguments, var=var):
            var = Scope({'that':that, 'searchString':searchString, 'NAME':NAME, 'this':this, 'arguments':arguments}, var)
            var.registers(['NAME', 'searchString', 'that'])
            if var.get('isRegExp')(var.get('searchString')):
                PyJsTempException = JsToPyException(var.get('TypeError')(((Js('String#')+var.get('NAME'))+Js(" doesn't accept regex!"))))
                raise PyJsTempException
            return var.get('String')(var.get('defined')(var.get('that')))
        PyJs_anonymous_1035_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1035_)
    PyJs_anonymous_1034_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1036_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['createHTML', 'module', 'fails', '$export', 'exports', 'defined', 'quot', 'require'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('fails', var.get('require')(Js('./_fails')))
        var.put('defined', var.get('require')(Js('./_defined')))
        var.put('quot', JsRegExp('/"/g'))
        @Js
        def PyJs_createHTML_1037_(string, tag, attribute, value, this, arguments, var=var):
            var = Scope({'string':string, 'tag':tag, 'attribute':attribute, 'value':value, 'this':this, 'arguments':arguments, 'createHTML':PyJs_createHTML_1037_}, var)
            var.registers(['p1', 'tag', 'S', 'attribute', 'string', 'value'])
            var.put('S', var.get('String')(var.get('defined')(var.get('string'))))
            var.put('p1', (Js('<')+var.get('tag')))
            if PyJsStrictNeq(var.get('attribute'),Js('')):
                var.put('p1', ((((Js(' ')+var.get('attribute'))+Js('="'))+var.get('String')(var.get('value')).callprop('replace', var.get('quot'), Js('&quot;')))+Js('"')), '+')
            return (((((var.get('p1')+Js('>'))+var.get('S'))+Js('</'))+var.get('tag'))+Js('>'))
        PyJs_createHTML_1037_._set_name('createHTML')
        var.put('createHTML', PyJs_createHTML_1037_)
        @Js
        def PyJs_anonymous_1038_(NAME, exec, this, arguments, var=var):
            var = Scope({'NAME':NAME, 'exec':exec, 'this':this, 'arguments':arguments}, var)
            var.registers(['O', 'NAME', 'exec'])
            var.put('O', Js({}))
            var.get('O').put(var.get('NAME'), var.get('exec')(var.get('createHTML')))
            @Js
            def PyJs_anonymous_1039_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['test'])
                var.put('test', Js('').callprop(var.get('NAME'), Js('"')))
                return (PyJsStrictNeq(var.get('test'),var.get('test').callprop('toLowerCase')) or (var.get('test').callprop('split', Js('"')).get('length')>Js(3.0)))
            PyJs_anonymous_1039_._set_name('anonymous')
            var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('fails')(PyJs_anonymous_1039_))), Js('String'), var.get('O'))
        PyJs_anonymous_1038_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1038_)
    PyJs_anonymous_1036_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1040_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'defined', 'repeat', 'require', 'toLength'])
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('repeat', var.get('require')(Js('./_string-repeat')))
        var.put('defined', var.get('require')(Js('./_defined')))
        @Js
        def PyJs_anonymous_1041_(that, maxLength, fillString, left, this, arguments, var=var):
            var = Scope({'that':that, 'maxLength':maxLength, 'fillString':fillString, 'left':left, 'this':this, 'arguments':arguments}, var)
            var.registers(['stringFiller', 'fillLen', 'that', 'stringLength', 'S', 'intMaxLength', 'maxLength', 'fillString', 'fillStr', 'left'])
            var.put('S', var.get('String')(var.get('defined')(var.get('that'))))
            var.put('stringLength', var.get('S').get('length'))
            var.put('fillStr', (Js(' ') if PyJsStrictEq(var.get('fillString'),var.get('undefined')) else var.get('String')(var.get('fillString'))))
            var.put('intMaxLength', var.get('toLength')(var.get('maxLength')))
            if ((var.get('intMaxLength')<=var.get('stringLength')) or (var.get('fillStr')==Js(''))):
                return var.get('S')
            var.put('fillLen', (var.get('intMaxLength')-var.get('stringLength')))
            var.put('stringFiller', var.get('repeat').callprop('call', var.get('fillStr'), var.get('Math').callprop('ceil', (var.get('fillLen')/var.get('fillStr').get('length')))))
            if (var.get('stringFiller').get('length')>var.get('fillLen')):
                var.put('stringFiller', var.get('stringFiller').callprop('slice', Js(0.0), var.get('fillLen')))
            return ((var.get('stringFiller')+var.get('S')) if var.get('left') else (var.get('S')+var.get('stringFiller')))
        PyJs_anonymous_1041_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1041_)
    PyJs_anonymous_1040_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1042_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'toInteger', 'defined', 'require'])
        Js('use strict')
        var.put('toInteger', var.get('require')(Js('./_to-integer')))
        var.put('defined', var.get('require')(Js('./_defined')))
        @Js
        def PyJs_repeat_1043_(count, this, arguments, var=var):
            var = Scope({'count':count, 'this':this, 'arguments':arguments, 'repeat':PyJs_repeat_1043_}, var)
            var.registers(['str', 'n', 'count', 'res'])
            var.put('str', var.get('String')(var.get('defined')(var.get(u"this"))))
            var.put('res', Js(''))
            var.put('n', var.get('toInteger')(var.get('count')))
            if ((var.get('n')<Js(0.0)) or (var.get('n')==var.get('Infinity'))):
                PyJsTempException = JsToPyException(var.get('RangeError')(Js("Count can't be negative")))
                raise PyJsTempException
            #for JS loop
            
            while (var.get('n')>Js(0.0)):
                try:
                    if (var.get('n')&Js(1.0)):
                        var.put('res', var.get('str'), '+')
                finally:
                        (var.put('n', Js(1.0), '>>>') and var.put('str', var.get('str'), '+'))
            return var.get('res')
        PyJs_repeat_1043_._set_name('repeat')
        var.get('module').put('exports', PyJs_repeat_1043_)
    PyJs_anonymous_1042_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1044_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['spaces', 'space', 'fails', '$export', 'trim', 'rtrim', 'module', 'exports', 'exporter', 'ltrim', 'defined', 'require', 'non'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('defined', var.get('require')(Js('./_defined')))
        var.put('fails', var.get('require')(Js('./_fails')))
        var.put('spaces', var.get('require')(Js('./_string-ws')))
        var.put('space', ((Js('[')+var.get('spaces'))+Js(']')))
        var.put('non', Js('\u200b\x85'))
        var.put('ltrim', var.get('RegExp')((((Js('^')+var.get('space'))+var.get('space'))+Js('*'))))
        var.put('rtrim', var.get('RegExp')(((var.get('space')+var.get('space'))+Js('*$'))))
        @Js
        def PyJs_exporter_1045_(KEY, exec, ALIAS, this, arguments, var=var):
            var = Scope({'KEY':KEY, 'exec':exec, 'ALIAS':ALIAS, 'this':this, 'arguments':arguments, 'exporter':PyJs_exporter_1045_}, var)
            var.registers(['FORCE', 'fn', 'exp', 'ALIAS', 'KEY', 'exec'])
            var.put('exp', Js({}))
            @Js
            def PyJs_anonymous_1046_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return (var.get('spaces').callprop(var.get('KEY')).neg().neg() or (var.get('non').callprop(var.get('KEY'))!=var.get('non')))
            PyJs_anonymous_1046_._set_name('anonymous')
            var.put('FORCE', var.get('fails')(PyJs_anonymous_1046_))
            var.put('fn', var.get('exp').put(var.get('KEY'), (var.get('exec')(var.get('trim')) if var.get('FORCE') else var.get('spaces').get(var.get('KEY')))))
            if var.get('ALIAS'):
                var.get('exp').put(var.get('ALIAS'), var.get('fn'))
            var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('FORCE'))), Js('String'), var.get('exp'))
        PyJs_exporter_1045_._set_name('exporter')
        var.put('exporter', PyJs_exporter_1045_)
        @Js
        def PyJs_anonymous_1047_(string, TYPE, this, arguments, var=var):
            var = Scope({'string':string, 'TYPE':TYPE, 'this':this, 'arguments':arguments}, var)
            var.registers(['TYPE', 'string'])
            var.put('string', var.get('String')(var.get('defined')(var.get('string'))))
            if (var.get('TYPE')&Js(1.0)):
                var.put('string', var.get('string').callprop('replace', var.get('ltrim'), Js('')))
            if (var.get('TYPE')&Js(2.0)):
                var.put('string', var.get('string').callprop('replace', var.get('rtrim'), Js('')))
            return var.get('string')
        PyJs_anonymous_1047_._set_name('anonymous')
        var.put('trim', var.get('exporter').put('trim', PyJs_anonymous_1047_))
        var.get('module').put('exports', var.get('exporter'))
    PyJs_anonymous_1044_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1048_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('module').put('exports', (Js('\t\n\x0b\x0c\r \xa0\u1680\u180e\u2000\u2001\u2002\u2003')+Js('\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029\ufeff')))
    PyJs_anonymous_1048_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1049_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['global', 'run', 'listener', 'defer', 'counter', 'ONREADYSTATECHANGE', 'clearTask', 'port', 'setTask', 'html', 'cel', 'queue', 'MessageChannel', 'require', 'module', 'exports', 'invoke', 'process', 'Dispatch', 'ctx', 'channel'])
        var.put('ctx', var.get('require')(Js('./_ctx')))
        var.put('invoke', var.get('require')(Js('./_invoke')))
        var.put('html', var.get('require')(Js('./_html')))
        var.put('cel', var.get('require')(Js('./_dom-create')))
        var.put('global', var.get('require')(Js('./_global')))
        var.put('process', var.get('global').get('process'))
        var.put('setTask', var.get('global').get('setImmediate'))
        var.put('clearTask', var.get('global').get('clearImmediate'))
        var.put('MessageChannel', var.get('global').get('MessageChannel'))
        var.put('Dispatch', var.get('global').get('Dispatch'))
        var.put('counter', Js(0.0))
        var.put('queue', Js({}))
        var.put('ONREADYSTATECHANGE', Js('onreadystatechange'))
        pass
        @Js
        def PyJs_run_1050_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'run':PyJs_run_1050_}, var)
            var.registers(['id', 'fn'])
            var.put('id', (+var.get(u"this")))
            if var.get('queue').callprop('hasOwnProperty', var.get('id')):
                var.put('fn', var.get('queue').get(var.get('id')))
                var.get('queue').delete(var.get('id'))
                var.get('fn')()
        PyJs_run_1050_._set_name('run')
        var.put('run', PyJs_run_1050_)
        @Js
        def PyJs_listener_1051_(event, this, arguments, var=var):
            var = Scope({'event':event, 'this':this, 'arguments':arguments, 'listener':PyJs_listener_1051_}, var)
            var.registers(['event'])
            var.get('run').callprop('call', var.get('event').get('data'))
        PyJs_listener_1051_._set_name('listener')
        var.put('listener', PyJs_listener_1051_)
        if (var.get('setTask').neg() or var.get('clearTask').neg()):
            @Js
            def PyJs_setImmediate_1052_(fn, this, arguments, var=var):
                var = Scope({'fn':fn, 'this':this, 'arguments':arguments, 'setImmediate':PyJs_setImmediate_1052_}, var)
                var.registers(['args', 'fn', 'i'])
                var.put('args', Js([]))
                var.put('i', Js(1.0))
                while (var.get('arguments').get('length')>var.get('i')):
                    var.get('args').callprop('push', var.get('arguments').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))
                @Js
                def PyJs_anonymous_1053_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.get('invoke')((var.get('fn') if (var.get('fn',throw=False).typeof()==Js('function')) else var.get('Function')(var.get('fn'))), var.get('args'))
                PyJs_anonymous_1053_._set_name('anonymous')
                var.get('queue').put(var.put('counter',Js(var.get('counter').to_number())+Js(1)), PyJs_anonymous_1053_)
                var.get('defer')(var.get('counter'))
                return var.get('counter')
            PyJs_setImmediate_1052_._set_name('setImmediate')
            var.put('setTask', PyJs_setImmediate_1052_)
            @Js
            def PyJs_clearImmediate_1054_(id, this, arguments, var=var):
                var = Scope({'id':id, 'this':this, 'arguments':arguments, 'clearImmediate':PyJs_clearImmediate_1054_}, var)
                var.registers(['id'])
                var.get('queue').delete(var.get('id'))
            PyJs_clearImmediate_1054_._set_name('clearImmediate')
            var.put('clearTask', PyJs_clearImmediate_1054_)
            if (var.get('require')(Js('./_cof'))(var.get('process'))==Js('process')):
                @Js
                def PyJs_defer_1055_(id, this, arguments, var=var):
                    var = Scope({'id':id, 'this':this, 'arguments':arguments, 'defer':PyJs_defer_1055_}, var)
                    var.registers(['id'])
                    var.get('process').callprop('nextTick', var.get('ctx')(var.get('run'), var.get('id'), Js(1.0)))
                PyJs_defer_1055_._set_name('defer')
                var.put('defer', PyJs_defer_1055_)
            else:
                if (var.get('Dispatch') and var.get('Dispatch').get('now')):
                    @Js
                    def PyJs_defer_1056_(id, this, arguments, var=var):
                        var = Scope({'id':id, 'this':this, 'arguments':arguments, 'defer':PyJs_defer_1056_}, var)
                        var.registers(['id'])
                        var.get('Dispatch').callprop('now', var.get('ctx')(var.get('run'), var.get('id'), Js(1.0)))
                    PyJs_defer_1056_._set_name('defer')
                    var.put('defer', PyJs_defer_1056_)
                else:
                    if var.get('MessageChannel'):
                        var.put('channel', var.get('MessageChannel').create())
                        var.put('port', var.get('channel').get('port2'))
                        var.get('channel').get('port1').put('onmessage', var.get('listener'))
                        var.put('defer', var.get('ctx')(var.get('port').get('postMessage'), var.get('port'), Js(1.0)))
                    else:
                        if ((var.get('global').get('addEventListener') and (var.get('postMessage',throw=False).typeof()==Js('function'))) and var.get('global').get('importScripts').neg()):
                            @Js
                            def PyJs_defer_1057_(id, this, arguments, var=var):
                                var = Scope({'id':id, 'this':this, 'arguments':arguments, 'defer':PyJs_defer_1057_}, var)
                                var.registers(['id'])
                                var.get('global').callprop('postMessage', (var.get('id')+Js('')), Js('*'))
                            PyJs_defer_1057_._set_name('defer')
                            var.put('defer', PyJs_defer_1057_)
                            var.get('global').callprop('addEventListener', Js('message'), var.get('listener'), Js(False))
                        else:
                            if var.get('cel')(Js('script')).contains(var.get('ONREADYSTATECHANGE')):
                                @Js
                                def PyJs_defer_1058_(id, this, arguments, var=var):
                                    var = Scope({'id':id, 'this':this, 'arguments':arguments, 'defer':PyJs_defer_1058_}, var)
                                    var.registers(['id'])
                                    @Js
                                    def PyJs_anonymous_1059_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        var.get('html').callprop('removeChild', var.get(u"this"))
                                        var.get('run').callprop('call', var.get('id'))
                                    PyJs_anonymous_1059_._set_name('anonymous')
                                    var.get('html').callprop('appendChild', var.get('cel')(Js('script'))).put(var.get('ONREADYSTATECHANGE'), PyJs_anonymous_1059_)
                                PyJs_defer_1058_._set_name('defer')
                                var.put('defer', PyJs_defer_1058_)
                            else:
                                @Js
                                def PyJs_defer_1060_(id, this, arguments, var=var):
                                    var = Scope({'id':id, 'this':this, 'arguments':arguments, 'defer':PyJs_defer_1060_}, var)
                                    var.registers(['id'])
                                    var.get('setTimeout')(var.get('ctx')(var.get('run'), var.get('id'), Js(1.0)), Js(0.0))
                                PyJs_defer_1060_._set_name('defer')
                                var.put('defer', PyJs_defer_1060_)
        var.get('module').put('exports', Js({'set':var.get('setTask'),'clear':var.get('clearTask')}))
    PyJs_anonymous_1049_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1061_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'toInteger', 'max', 'min', 'require'])
        var.put('toInteger', var.get('require')(Js('./_to-integer')))
        var.put('max', var.get('Math').get('max'))
        var.put('min', var.get('Math').get('min'))
        @Js
        def PyJs_anonymous_1062_(index, length, this, arguments, var=var):
            var = Scope({'index':index, 'length':length, 'this':this, 'arguments':arguments}, var)
            var.registers(['length', 'index'])
            var.put('index', var.get('toInteger')(var.get('index')))
            return (var.get('max')((var.get('index')+var.get('length')), Js(0.0)) if (var.get('index')<Js(0.0)) else var.get('min')(var.get('index'), var.get('length')))
        PyJs_anonymous_1062_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1062_)
    PyJs_anonymous_1061_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1063_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'toInteger', 'require', 'toLength'])
        var.put('toInteger', var.get('require')(Js('./_to-integer')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        @Js
        def PyJs_anonymous_1064_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it', 'length', 'number'])
            if PyJsStrictEq(var.get('it'),var.get('undefined')):
                return Js(0.0)
            var.put('number', var.get('toInteger')(var.get('it')))
            var.put('length', var.get('toLength')(var.get('number')))
            if PyJsStrictNeq(var.get('number'),var.get('length')):
                PyJsTempException = JsToPyException(var.get('RangeError')(Js('Wrong length!')))
                raise PyJsTempException
            return var.get('length')
        PyJs_anonymous_1064_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1064_)
    PyJs_anonymous_1063_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1065_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'ceil', 'require', 'floor'])
        var.put('ceil', var.get('Math').get('ceil'))
        var.put('floor', var.get('Math').get('floor'))
        @Js
        def PyJs_anonymous_1066_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return (Js(0.0) if var.get('isNaN')(var.put('it', (+var.get('it')))) else (var.get('floor') if (var.get('it')>Js(0.0)) else var.get('ceil'))(var.get('it')))
        PyJs_anonymous_1066_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1066_)
    PyJs_anonymous_1065_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1067_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'IObject', 'exports', 'defined', 'require'])
        var.put('IObject', var.get('require')(Js('./_iobject')))
        var.put('defined', var.get('require')(Js('./_defined')))
        @Js
        def PyJs_anonymous_1068_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return var.get('IObject')(var.get('defined')(var.get('it')))
        PyJs_anonymous_1068_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1068_)
    PyJs_anonymous_1067_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1069_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'toInteger', 'min', 'require'])
        var.put('toInteger', var.get('require')(Js('./_to-integer')))
        var.put('min', var.get('Math').get('min'))
        @Js
        def PyJs_anonymous_1070_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return (var.get('min')(var.get('toInteger')(var.get('it')), Js(9007199254740991)) if (var.get('it')>Js(0.0)) else Js(0.0))
        PyJs_anonymous_1070_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1070_)
    PyJs_anonymous_1069_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1071_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'defined', 'module', 'exports'])
        var.put('defined', var.get('require')(Js('./_defined')))
        @Js
        def PyJs_anonymous_1072_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return var.get('Object')(var.get('defined')(var.get('it')))
        PyJs_anonymous_1072_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1072_)
    PyJs_anonymous_1071_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1073_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'isObject', 'module', 'exports'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        @Js
        def PyJs_anonymous_1074_(it, S, this, arguments, var=var):
            var = Scope({'it':it, 'S':S, 'this':this, 'arguments':arguments}, var)
            var.registers(['it', 'S', 'fn', 'val'])
            if var.get('isObject')(var.get('it')).neg():
                return var.get('it')
            pass
            if ((var.get('S') and (var.put('fn', var.get('it').get('toString')).typeof()==Js('function'))) and var.get('isObject')(var.put('val', var.get('fn').callprop('call', var.get('it')))).neg()):
                return var.get('val')
            if ((var.put('fn', var.get('it').get('valueOf')).typeof()==Js('function')) and var.get('isObject')(var.put('val', var.get('fn').callprop('call', var.get('it')))).neg()):
                return var.get('val')
            if ((var.get('S').neg() and (var.put('fn', var.get('it').get('toString')).typeof()==Js('function'))) and var.get('isObject')(var.put('val', var.get('fn').callprop('call', var.get('it')))).neg()):
                return var.get('val')
            PyJsTempException = JsToPyException(var.get('TypeError')(Js("Can't convert object to primitive value")))
            raise PyJsTempException
        PyJs_anonymous_1074_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1074_)
    PyJs_anonymous_1073_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1075_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['createArrayMethod', 'arrayIndexOf', 'validate', 'anInstance', 'RangeError', 'dP', 'arrayFill', 'classof', 'arraySome', 'arrayToString', 'ALL_CONSTRUCTORS', 'getIterFn', 'WRONG_LENGTH', '$iterators', 'arrayFilter', 'create', 'speciesConstructor', '$from', 'toInteger', '$map', 'arrayFind', 'ArrayProto', 'DEF_CONSTRUCTOR', 'createArrayIncludes', 'isArrayIter', 'ArrayIterators', 'TAG', 'LIBRARY', 'addGetter', 'arrayEvery', 'toIndex', 'wks', 'arrayEntries', 'arrayReduce', 'arrayToLocaleString', 'BYTES_PER_ELEMENT', 'fails', 'arrayJoin', 'PROTOTYPE', 'has', 'toPrimitive', 'propertyDesc', 'arrayForEach', 'arrayIncludes', '$setDesc', 'arrayReduceRight', 'VIEW', 'ITERATOR', '$toLocaleString', '$set', 'getPrototypeOf', 'gOPN', 'LITTLE_ENDIAN', 'TYPED_ARRAY', '$typed', 'Iterators', 'uid', 'arraySlice', '$GOPD', 'toLength', 'arrayValues', 'TO_LOCALE_BUG', 'isTAIndex', 'isObject', 'arraySort', 'toOffset', 'exports', 'allocate', '$of', '$slice', '$buffer', 'global', '$DP', 'arrayCopyWithin', 'fromList', 'arrayKeys', '$ArrayBuffer', 'speciesFromList', 'arrayLastIndexOf', 'proto', '$iterDetect', 'Uint8Array', '$getDesc', 'toObject', 'TYPED_CONSTRUCTOR', 'redefineAll', 'gOPD', '$TypedArrayPrototype$', 'require', 'arrayFindIndex', 'hide', '$DataView', 'TypeError', 'SHARED_BUFFER', 'module', '$export', 'setSpecies', 'toAbsoluteIndex', 'FORCED_SET', 'ctx', 'ARRAY_BUFFER'])
        Js('use strict')
        if var.get('require')(Js('./_descriptors')):
            var.put('LIBRARY', var.get('require')(Js('./_library')))
            var.put('global', var.get('require')(Js('./_global')))
            var.put('fails', var.get('require')(Js('./_fails')))
            var.put('$export', var.get('require')(Js('./_export')))
            var.put('$typed', var.get('require')(Js('./_typed')))
            var.put('$buffer', var.get('require')(Js('./_typed-buffer')))
            var.put('ctx', var.get('require')(Js('./_ctx')))
            var.put('anInstance', var.get('require')(Js('./_an-instance')))
            var.put('propertyDesc', var.get('require')(Js('./_property-desc')))
            var.put('hide', var.get('require')(Js('./_hide')))
            var.put('redefineAll', var.get('require')(Js('./_redefine-all')))
            var.put('toInteger', var.get('require')(Js('./_to-integer')))
            var.put('toLength', var.get('require')(Js('./_to-length')))
            var.put('toIndex', var.get('require')(Js('./_to-index')))
            var.put('toAbsoluteIndex', var.get('require')(Js('./_to-absolute-index')))
            var.put('toPrimitive', var.get('require')(Js('./_to-primitive')))
            var.put('has', var.get('require')(Js('./_has')))
            var.put('classof', var.get('require')(Js('./_classof')))
            var.put('isObject', var.get('require')(Js('./_is-object')))
            var.put('toObject', var.get('require')(Js('./_to-object')))
            var.put('isArrayIter', var.get('require')(Js('./_is-array-iter')))
            var.put('create', var.get('require')(Js('./_object-create')))
            var.put('getPrototypeOf', var.get('require')(Js('./_object-gpo')))
            var.put('gOPN', var.get('require')(Js('./_object-gopn')).get('f'))
            var.put('getIterFn', var.get('require')(Js('./core.get-iterator-method')))
            var.put('uid', var.get('require')(Js('./_uid')))
            var.put('wks', var.get('require')(Js('./_wks')))
            var.put('createArrayMethod', var.get('require')(Js('./_array-methods')))
            var.put('createArrayIncludes', var.get('require')(Js('./_array-includes')))
            var.put('speciesConstructor', var.get('require')(Js('./_species-constructor')))
            var.put('ArrayIterators', var.get('require')(Js('./es6.array.iterator')))
            var.put('Iterators', var.get('require')(Js('./_iterators')))
            var.put('$iterDetect', var.get('require')(Js('./_iter-detect')))
            var.put('setSpecies', var.get('require')(Js('./_set-species')))
            var.put('arrayFill', var.get('require')(Js('./_array-fill')))
            var.put('arrayCopyWithin', var.get('require')(Js('./_array-copy-within')))
            var.put('$DP', var.get('require')(Js('./_object-dp')))
            var.put('$GOPD', var.get('require')(Js('./_object-gopd')))
            var.put('dP', var.get('$DP').get('f'))
            var.put('gOPD', var.get('$GOPD').get('f'))
            var.put('RangeError', var.get('global').get('RangeError'))
            var.put('TypeError', var.get('global').get('TypeError'))
            var.put('Uint8Array', var.get('global').get('Uint8Array'))
            var.put('ARRAY_BUFFER', Js('ArrayBuffer'))
            var.put('SHARED_BUFFER', (Js('Shared')+var.get('ARRAY_BUFFER')))
            var.put('BYTES_PER_ELEMENT', Js('BYTES_PER_ELEMENT'))
            var.put('PROTOTYPE', Js('prototype'))
            var.put('ArrayProto', var.get('Array').get(var.get('PROTOTYPE')))
            var.put('$ArrayBuffer', var.get('$buffer').get('ArrayBuffer'))
            var.put('$DataView', var.get('$buffer').get('DataView'))
            var.put('arrayForEach', var.get('createArrayMethod')(Js(0.0)))
            var.put('arrayFilter', var.get('createArrayMethod')(Js(2.0)))
            var.put('arraySome', var.get('createArrayMethod')(Js(3.0)))
            var.put('arrayEvery', var.get('createArrayMethod')(Js(4.0)))
            var.put('arrayFind', var.get('createArrayMethod')(Js(5.0)))
            var.put('arrayFindIndex', var.get('createArrayMethod')(Js(6.0)))
            var.put('arrayIncludes', var.get('createArrayIncludes')(Js(True)))
            var.put('arrayIndexOf', var.get('createArrayIncludes')(Js(False)))
            var.put('arrayValues', var.get('ArrayIterators').get('values'))
            var.put('arrayKeys', var.get('ArrayIterators').get('keys'))
            var.put('arrayEntries', var.get('ArrayIterators').get('entries'))
            var.put('arrayLastIndexOf', var.get('ArrayProto').get('lastIndexOf'))
            var.put('arrayReduce', var.get('ArrayProto').get('reduce'))
            var.put('arrayReduceRight', var.get('ArrayProto').get('reduceRight'))
            var.put('arrayJoin', var.get('ArrayProto').get('join'))
            var.put('arraySort', var.get('ArrayProto').get('sort'))
            var.put('arraySlice', var.get('ArrayProto').get('slice'))
            var.put('arrayToString', var.get('ArrayProto').get('toString'))
            var.put('arrayToLocaleString', var.get('ArrayProto').get('toLocaleString'))
            var.put('ITERATOR', var.get('wks')(Js('iterator')))
            var.put('TAG', var.get('wks')(Js('toStringTag')))
            var.put('TYPED_CONSTRUCTOR', var.get('uid')(Js('typed_constructor')))
            var.put('DEF_CONSTRUCTOR', var.get('uid')(Js('def_constructor')))
            var.put('ALL_CONSTRUCTORS', var.get('$typed').get('CONSTR'))
            var.put('TYPED_ARRAY', var.get('$typed').get('TYPED'))
            var.put('VIEW', var.get('$typed').get('VIEW'))
            var.put('WRONG_LENGTH', Js('Wrong length!'))
            @Js
            def PyJs_anonymous_1076_(O, length, this, arguments, var=var):
                var = Scope({'O':O, 'length':length, 'this':this, 'arguments':arguments}, var)
                var.registers(['O', 'length'])
                return var.get('allocate')(var.get('speciesConstructor')(var.get('O'), var.get('O').get(var.get('DEF_CONSTRUCTOR'))), var.get('length'))
            PyJs_anonymous_1076_._set_name('anonymous')
            var.put('$map', var.get('createArrayMethod')(Js(1.0), PyJs_anonymous_1076_))
            @Js
            def PyJs_anonymous_1077_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return PyJsStrictEq(var.get('Uint8Array').create(var.get('Uint16Array').create(Js([Js(1.0)])).get('buffer')).get('0'),Js(1.0))
            PyJs_anonymous_1077_._set_name('anonymous')
            var.put('LITTLE_ENDIAN', var.get('fails')(PyJs_anonymous_1077_))
            @Js
            def PyJs_anonymous_1078_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('Uint8Array').create(Js(1.0)).callprop('set', Js({}))
            PyJs_anonymous_1078_._set_name('anonymous')
            var.put('FORCED_SET', ((var.get('Uint8Array').neg().neg() and var.get('Uint8Array').get(var.get('PROTOTYPE')).get('set').neg().neg()) and var.get('fails')(PyJs_anonymous_1078_)))
            @Js
            def PyJs_toOffset_1079_(it, BYTES, this, arguments, var=var):
                var = Scope({'it':it, 'BYTES':BYTES, 'this':this, 'arguments':arguments, 'toOffset':PyJs_toOffset_1079_}, var)
                var.registers(['BYTES', 'it', 'offset'])
                var.put('offset', var.get('toInteger')(var.get('it')))
                if ((var.get('offset')<Js(0.0)) or (var.get('offset')%var.get('BYTES'))):
                    PyJsTempException = JsToPyException(var.get('RangeError')(Js('Wrong offset!')))
                    raise PyJsTempException
                return var.get('offset')
            PyJs_toOffset_1079_._set_name('toOffset')
            var.put('toOffset', PyJs_toOffset_1079_)
            @Js
            def PyJs_validate_1080_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments, 'validate':PyJs_validate_1080_}, var)
                var.registers(['it'])
                if (var.get('isObject')(var.get('it')) and var.get('it').contains(var.get('TYPED_ARRAY'))):
                    return var.get('it')
                PyJsTempException = JsToPyException(var.get('TypeError')((var.get('it')+Js(' is not a typed array!'))))
                raise PyJsTempException
            PyJs_validate_1080_._set_name('validate')
            var.put('validate', PyJs_validate_1080_)
            @Js
            def PyJs_allocate_1081_(C, length, this, arguments, var=var):
                var = Scope({'C':C, 'length':length, 'this':this, 'arguments':arguments, 'allocate':PyJs_allocate_1081_}, var)
                var.registers(['length', 'C'])
                if (var.get('isObject')(var.get('C')) and var.get('C').contains(var.get('TYPED_CONSTRUCTOR'))).neg():
                    PyJsTempException = JsToPyException(var.get('TypeError')(Js('It is not a typed array constructor!')))
                    raise PyJsTempException
                return var.get('C').create(var.get('length'))
            PyJs_allocate_1081_._set_name('allocate')
            var.put('allocate', PyJs_allocate_1081_)
            @Js
            def PyJs_speciesFromList_1082_(O, list, this, arguments, var=var):
                var = Scope({'O':O, 'list':list, 'this':this, 'arguments':arguments, 'speciesFromList':PyJs_speciesFromList_1082_}, var)
                var.registers(['O', 'list'])
                return var.get('fromList')(var.get('speciesConstructor')(var.get('O'), var.get('O').get(var.get('DEF_CONSTRUCTOR'))), var.get('list'))
            PyJs_speciesFromList_1082_._set_name('speciesFromList')
            var.put('speciesFromList', PyJs_speciesFromList_1082_)
            @Js
            def PyJs_fromList_1083_(C, list, this, arguments, var=var):
                var = Scope({'C':C, 'list':list, 'this':this, 'arguments':arguments, 'fromList':PyJs_fromList_1083_}, var)
                var.registers(['list', 'length', 'C', 'result', 'index'])
                var.put('index', Js(0.0))
                var.put('length', var.get('list').get('length'))
                var.put('result', var.get('allocate')(var.get('C'), var.get('length')))
                while (var.get('length')>var.get('index')):
                    var.get('result').put(var.get('index'), var.get('list').get((var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))))
                return var.get('result')
            PyJs_fromList_1083_._set_name('fromList')
            var.put('fromList', PyJs_fromList_1083_)
            @Js
            def PyJs_addGetter_1084_(it, key, internal, this, arguments, var=var):
                var = Scope({'it':it, 'key':key, 'internal':internal, 'this':this, 'arguments':arguments, 'addGetter':PyJs_addGetter_1084_}, var)
                var.registers(['internal', 'key', 'it'])
                @Js
                def PyJs_get_1085_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_1085_}, var)
                    var.registers([])
                    return var.get(u"this").get('_d').get(var.get('internal'))
                PyJs_get_1085_._set_name('get')
                var.get('dP')(var.get('it'), var.get('key'), Js({'get':PyJs_get_1085_}))
            PyJs_addGetter_1084_._set_name('addGetter')
            var.put('addGetter', PyJs_addGetter_1084_)
            @Js
            def PyJs_InlineNonPyName_1086_(source, this, arguments, var=var):
                var = Scope({'source':source, 'this':this, 'arguments':arguments, 'from':PyJs_InlineNonPyName_1086_}, var)
                var.registers(['i', 'source', 'iterator', 'O', 'mapping', 'aLen', 'values', 'length', 'result', 'mapfn', 'step', 'iterFn'])
                var.put('O', var.get('toObject')(var.get('source')))
                var.put('aLen', var.get('arguments').get('length'))
                var.put('mapfn', (var.get('arguments').get('1') if (var.get('aLen')>Js(1.0)) else var.get('undefined')))
                var.put('mapping', PyJsStrictNeq(var.get('mapfn'),var.get('undefined')))
                var.put('iterFn', var.get('getIterFn')(var.get('O')))
                pass
                if ((var.get('iterFn')!=var.get('undefined')) and var.get('isArrayIter')(var.get('iterFn')).neg()):
                    #for JS loop
                    PyJsComma(PyJsComma(var.put('iterator', var.get('iterFn').callprop('call', var.get('O'))),var.put('values', Js([]))),var.put('i', Js(0.0)))
                    while var.put('step', var.get('iterator').callprop('next')).get('done').neg():
                        try:
                            var.get('values').callprop('push', var.get('step').get('value'))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    var.put('O', var.get('values'))
                if (var.get('mapping') and (var.get('aLen')>Js(2.0))):
                    var.put('mapfn', var.get('ctx')(var.get('mapfn'), var.get('arguments').get('2'), Js(2.0)))
                #for JS loop
                PyJsComma(PyJsComma(var.put('i', Js(0.0)),var.put('length', var.get('toLength')(var.get('O').get('length')))),var.put('result', var.get('allocate')(var.get(u"this"), var.get('length'))))
                while (var.get('length')>var.get('i')):
                    try:
                        var.get('result').put(var.get('i'), (var.get('mapfn')(var.get('O').get(var.get('i')), var.get('i')) if var.get('mapping') else var.get('O').get(var.get('i'))))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                return var.get('result')
            PyJs_InlineNonPyName_1086_._set_name('from')
            var.put('$from', PyJs_InlineNonPyName_1086_)
            @Js
            def PyJs_of_1087_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'of':PyJs_of_1087_}, var)
                var.registers(['result', 'length', 'index'])
                var.put('index', Js(0.0))
                var.put('length', var.get('arguments').get('length'))
                var.put('result', var.get('allocate')(var.get(u"this"), var.get('length')))
                while (var.get('length')>var.get('index')):
                    var.get('result').put(var.get('index'), var.get('arguments').get((var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))))
                return var.get('result')
            PyJs_of_1087_._set_name('of')
            var.put('$of', PyJs_of_1087_)
            @Js
            def PyJs_anonymous_1088_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('arrayToLocaleString').callprop('call', var.get('Uint8Array').create(Js(1.0)))
            PyJs_anonymous_1088_._set_name('anonymous')
            var.put('TO_LOCALE_BUG', (var.get('Uint8Array').neg().neg() and var.get('fails')(PyJs_anonymous_1088_)))
            @Js
            def PyJs_toLocaleString_1089_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'toLocaleString':PyJs_toLocaleString_1089_}, var)
                var.registers([])
                return var.get('arrayToLocaleString').callprop('apply', (var.get('arraySlice').callprop('call', var.get('validate')(var.get(u"this"))) if var.get('TO_LOCALE_BUG') else var.get('validate')(var.get(u"this"))), var.get('arguments'))
            PyJs_toLocaleString_1089_._set_name('toLocaleString')
            var.put('$toLocaleString', PyJs_toLocaleString_1089_)
            @Js
            def PyJs_copyWithin_1090_(target, start, this, arguments, var=var):
                var = Scope({'target':target, 'start':start, 'this':this, 'arguments':arguments, 'copyWithin':PyJs_copyWithin_1090_}, var)
                var.registers(['target', 'start'])
                return var.get('arrayCopyWithin').callprop('call', var.get('validate')(var.get(u"this")), var.get('target'), var.get('start'), (var.get('arguments').get('2') if (var.get('arguments').get('length')>Js(2.0)) else var.get('undefined')))
            PyJs_copyWithin_1090_._set_name('copyWithin')
            @Js
            def PyJs_every_1091_(callbackfn, this, arguments, var=var):
                var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'every':PyJs_every_1091_}, var)
                var.registers(['callbackfn'])
                return var.get('arrayEvery')(var.get('validate')(var.get(u"this")), var.get('callbackfn'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
            PyJs_every_1091_._set_name('every')
            @Js
            def PyJs_fill_1092_(value, this, arguments, var=var):
                var = Scope({'value':value, 'this':this, 'arguments':arguments, 'fill':PyJs_fill_1092_}, var)
                var.registers(['value'])
                return var.get('arrayFill').callprop('apply', var.get('validate')(var.get(u"this")), var.get('arguments'))
            PyJs_fill_1092_._set_name('fill')
            @Js
            def PyJs_filter_1093_(callbackfn, this, arguments, var=var):
                var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'filter':PyJs_filter_1093_}, var)
                var.registers(['callbackfn'])
                return var.get('speciesFromList')(var.get(u"this"), var.get('arrayFilter')(var.get('validate')(var.get(u"this")), var.get('callbackfn'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined'))))
            PyJs_filter_1093_._set_name('filter')
            @Js
            def PyJs_find_1094_(predicate, this, arguments, var=var):
                var = Scope({'predicate':predicate, 'this':this, 'arguments':arguments, 'find':PyJs_find_1094_}, var)
                var.registers(['predicate'])
                return var.get('arrayFind')(var.get('validate')(var.get(u"this")), var.get('predicate'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
            PyJs_find_1094_._set_name('find')
            @Js
            def PyJs_findIndex_1095_(predicate, this, arguments, var=var):
                var = Scope({'predicate':predicate, 'this':this, 'arguments':arguments, 'findIndex':PyJs_findIndex_1095_}, var)
                var.registers(['predicate'])
                return var.get('arrayFindIndex')(var.get('validate')(var.get(u"this")), var.get('predicate'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
            PyJs_findIndex_1095_._set_name('findIndex')
            @Js
            def PyJs_forEach_1096_(callbackfn, this, arguments, var=var):
                var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'forEach':PyJs_forEach_1096_}, var)
                var.registers(['callbackfn'])
                var.get('arrayForEach')(var.get('validate')(var.get(u"this")), var.get('callbackfn'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
            PyJs_forEach_1096_._set_name('forEach')
            @Js
            def PyJs_indexOf_1097_(searchElement, this, arguments, var=var):
                var = Scope({'searchElement':searchElement, 'this':this, 'arguments':arguments, 'indexOf':PyJs_indexOf_1097_}, var)
                var.registers(['searchElement'])
                return var.get('arrayIndexOf')(var.get('validate')(var.get(u"this")), var.get('searchElement'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
            PyJs_indexOf_1097_._set_name('indexOf')
            @Js
            def PyJs_includes_1098_(searchElement, this, arguments, var=var):
                var = Scope({'searchElement':searchElement, 'this':this, 'arguments':arguments, 'includes':PyJs_includes_1098_}, var)
                var.registers(['searchElement'])
                return var.get('arrayIncludes')(var.get('validate')(var.get(u"this")), var.get('searchElement'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
            PyJs_includes_1098_._set_name('includes')
            @Js
            def PyJs_join_1099_(separator, this, arguments, var=var):
                var = Scope({'separator':separator, 'this':this, 'arguments':arguments, 'join':PyJs_join_1099_}, var)
                var.registers(['separator'])
                return var.get('arrayJoin').callprop('apply', var.get('validate')(var.get(u"this")), var.get('arguments'))
            PyJs_join_1099_._set_name('join')
            @Js
            def PyJs_lastIndexOf_1100_(searchElement, this, arguments, var=var):
                var = Scope({'searchElement':searchElement, 'this':this, 'arguments':arguments, 'lastIndexOf':PyJs_lastIndexOf_1100_}, var)
                var.registers(['searchElement'])
                return var.get('arrayLastIndexOf').callprop('apply', var.get('validate')(var.get(u"this")), var.get('arguments'))
            PyJs_lastIndexOf_1100_._set_name('lastIndexOf')
            @Js
            def PyJs_map_1101_(mapfn, this, arguments, var=var):
                var = Scope({'mapfn':mapfn, 'this':this, 'arguments':arguments, 'map':PyJs_map_1101_}, var)
                var.registers(['mapfn'])
                return var.get('$map')(var.get('validate')(var.get(u"this")), var.get('mapfn'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
            PyJs_map_1101_._set_name('map')
            @Js
            def PyJs_reduce_1102_(callbackfn, this, arguments, var=var):
                var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'reduce':PyJs_reduce_1102_}, var)
                var.registers(['callbackfn'])
                return var.get('arrayReduce').callprop('apply', var.get('validate')(var.get(u"this")), var.get('arguments'))
            PyJs_reduce_1102_._set_name('reduce')
            @Js
            def PyJs_reduceRight_1103_(callbackfn, this, arguments, var=var):
                var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'reduceRight':PyJs_reduceRight_1103_}, var)
                var.registers(['callbackfn'])
                return var.get('arrayReduceRight').callprop('apply', var.get('validate')(var.get(u"this")), var.get('arguments'))
            PyJs_reduceRight_1103_._set_name('reduceRight')
            @Js
            def PyJs_reverse_1104_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'reverse':PyJs_reverse_1104_}, var)
                var.registers(['that', 'middle', 'length', 'index', 'value'])
                var.put('that', var.get(u"this"))
                var.put('length', var.get('validate')(var.get('that')).get('length'))
                var.put('middle', var.get('Math').callprop('floor', (var.get('length')/Js(2.0))))
                var.put('index', Js(0.0))
                pass
                while (var.get('index')<var.get('middle')):
                    var.put('value', var.get('that').get(var.get('index')))
                    var.get('that').put((var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1)), var.get('that').get(var.put('length',Js(var.get('length').to_number())-Js(1))))
                    var.get('that').put(var.get('length'), var.get('value'))
                return var.get('that')
            PyJs_reverse_1104_._set_name('reverse')
            @Js
            def PyJs_some_1105_(callbackfn, this, arguments, var=var):
                var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'some':PyJs_some_1105_}, var)
                var.registers(['callbackfn'])
                return var.get('arraySome')(var.get('validate')(var.get(u"this")), var.get('callbackfn'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
            PyJs_some_1105_._set_name('some')
            @Js
            def PyJs_sort_1106_(comparefn, this, arguments, var=var):
                var = Scope({'comparefn':comparefn, 'this':this, 'arguments':arguments, 'sort':PyJs_sort_1106_}, var)
                var.registers(['comparefn'])
                return var.get('arraySort').callprop('call', var.get('validate')(var.get(u"this")), var.get('comparefn'))
            PyJs_sort_1106_._set_name('sort')
            @Js
            def PyJs_subarray_1107_(begin, end, this, arguments, var=var):
                var = Scope({'begin':begin, 'end':end, 'this':this, 'arguments':arguments, 'subarray':PyJs_subarray_1107_}, var)
                var.registers(['O', 'end', 'length', 'begin', '$begin'])
                var.put('O', var.get('validate')(var.get(u"this")))
                var.put('length', var.get('O').get('length'))
                var.put('$begin', var.get('toAbsoluteIndex')(var.get('begin'), var.get('length')))
                return var.get('speciesConstructor')(var.get('O'), var.get('O').get(var.get('DEF_CONSTRUCTOR'))).create(var.get('O').get('buffer'), (var.get('O').get('byteOffset')+(var.get('$begin')*var.get('O').get('BYTES_PER_ELEMENT'))), var.get('toLength')(((var.get('length') if PyJsStrictEq(var.get('end'),var.get('undefined')) else var.get('toAbsoluteIndex')(var.get('end'), var.get('length')))-var.get('$begin'))))
            PyJs_subarray_1107_._set_name('subarray')
            var.put('proto', Js({'copyWithin':PyJs_copyWithin_1090_,'every':PyJs_every_1091_,'fill':PyJs_fill_1092_,'filter':PyJs_filter_1093_,'find':PyJs_find_1094_,'findIndex':PyJs_findIndex_1095_,'forEach':PyJs_forEach_1096_,'indexOf':PyJs_indexOf_1097_,'includes':PyJs_includes_1098_,'join':PyJs_join_1099_,'lastIndexOf':PyJs_lastIndexOf_1100_,'map':PyJs_map_1101_,'reduce':PyJs_reduce_1102_,'reduceRight':PyJs_reduceRight_1103_,'reverse':PyJs_reverse_1104_,'some':PyJs_some_1105_,'sort':PyJs_sort_1106_,'subarray':PyJs_subarray_1107_}))
            @Js
            def PyJs_slice_1108_(start, end, this, arguments, var=var):
                var = Scope({'start':start, 'end':end, 'this':this, 'arguments':arguments, 'slice':PyJs_slice_1108_}, var)
                var.registers(['end', 'start'])
                return var.get('speciesFromList')(var.get(u"this"), var.get('arraySlice').callprop('call', var.get('validate')(var.get(u"this")), var.get('start'), var.get('end')))
            PyJs_slice_1108_._set_name('slice')
            var.put('$slice', PyJs_slice_1108_)
            @Js
            def PyJs_set_1109_(arrayLike, this, arguments, var=var):
                var = Scope({'arrayLike':arrayLike, 'this':this, 'arguments':arguments, 'set':PyJs_set_1109_}, var)
                var.registers(['len', 'length', 'arrayLike', 'offset', 'index', 'src'])
                var.get('validate')(var.get(u"this"))
                var.put('offset', var.get('toOffset')(var.get('arguments').get('1'), Js(1.0)))
                var.put('length', var.get(u"this").get('length'))
                var.put('src', var.get('toObject')(var.get('arrayLike')))
                var.put('len', var.get('toLength')(var.get('src').get('length')))
                var.put('index', Js(0.0))
                if ((var.get('len')+var.get('offset'))>var.get('length')):
                    PyJsTempException = JsToPyException(var.get('RangeError')(var.get('WRONG_LENGTH')))
                    raise PyJsTempException
                while (var.get('index')<var.get('len')):
                    var.get(u"this").put((var.get('offset')+var.get('index')), var.get('src').get((var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))))
            PyJs_set_1109_._set_name('set')
            var.put('$set', PyJs_set_1109_)
            @Js
            def PyJs_entries_1110_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'entries':PyJs_entries_1110_}, var)
                var.registers([])
                return var.get('arrayEntries').callprop('call', var.get('validate')(var.get(u"this")))
            PyJs_entries_1110_._set_name('entries')
            @Js
            def PyJs_keys_1111_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'keys':PyJs_keys_1111_}, var)
                var.registers([])
                return var.get('arrayKeys').callprop('call', var.get('validate')(var.get(u"this")))
            PyJs_keys_1111_._set_name('keys')
            @Js
            def PyJs_values_1112_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'values':PyJs_values_1112_}, var)
                var.registers([])
                return var.get('arrayValues').callprop('call', var.get('validate')(var.get(u"this")))
            PyJs_values_1112_._set_name('values')
            var.put('$iterators', Js({'entries':PyJs_entries_1110_,'keys':PyJs_keys_1111_,'values':PyJs_values_1112_}))
            @Js
            def PyJs_isTAIndex_1113_(target, key, this, arguments, var=var):
                var = Scope({'target':target, 'key':key, 'this':this, 'arguments':arguments, 'isTAIndex':PyJs_isTAIndex_1113_}, var)
                var.registers(['target', 'key'])
                return ((((var.get('isObject')(var.get('target')) and var.get('target').get(var.get('TYPED_ARRAY'))) and ((Js('undefined') if PyJsStrictEq(var.get('key',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('key')))!=Js('symbol'))) and var.get('target').contains(var.get('key'))) and (var.get('String')((+var.get('key')))==var.get('String')(var.get('key'))))
            PyJs_isTAIndex_1113_._set_name('isTAIndex')
            var.put('isTAIndex', PyJs_isTAIndex_1113_)
            @Js
            def PyJs_getOwnPropertyDescriptor_1114_(target, key, this, arguments, var=var):
                var = Scope({'target':target, 'key':key, 'this':this, 'arguments':arguments, 'getOwnPropertyDescriptor':PyJs_getOwnPropertyDescriptor_1114_}, var)
                var.registers(['target', 'key'])
                return (var.get('propertyDesc')(Js(2.0), var.get('target').get(var.get('key'))) if var.get('isTAIndex')(var.get('target'), var.put('key', var.get('toPrimitive')(var.get('key'), Js(True)))) else var.get('gOPD')(var.get('target'), var.get('key')))
            PyJs_getOwnPropertyDescriptor_1114_._set_name('getOwnPropertyDescriptor')
            var.put('$getDesc', PyJs_getOwnPropertyDescriptor_1114_)
            @Js
            def PyJs_defineProperty_1115_(target, key, desc, this, arguments, var=var):
                var = Scope({'target':target, 'key':key, 'desc':desc, 'this':this, 'arguments':arguments, 'defineProperty':PyJs_defineProperty_1115_}, var)
                var.registers(['target', 'key', 'desc'])
                def PyJs_LONG_1116_(var=var):
                    return ((((((var.get('isTAIndex')(var.get('target'), var.put('key', var.get('toPrimitive')(var.get('key'), Js(True)))) and var.get('isObject')(var.get('desc'))) and var.get('has')(var.get('desc'), Js('value'))) and var.get('has')(var.get('desc'), Js('get')).neg()) and var.get('has')(var.get('desc'), Js('set')).neg()) and var.get('desc').get('configurable').neg()) and (var.get('has')(var.get('desc'), Js('writable')).neg() or var.get('desc').get('writable')))
                if (PyJs_LONG_1116_() and (var.get('has')(var.get('desc'), Js('enumerable')).neg() or var.get('desc').get('enumerable'))):
                    var.get('target').put(var.get('key'), var.get('desc').get('value'))
                    return var.get('target')
                return var.get('dP')(var.get('target'), var.get('key'), var.get('desc'))
            PyJs_defineProperty_1115_._set_name('defineProperty')
            var.put('$setDesc', PyJs_defineProperty_1115_)
            if var.get('ALL_CONSTRUCTORS').neg():
                var.get('$GOPD').put('f', var.get('$getDesc'))
                var.get('$DP').put('f', var.get('$setDesc'))
            var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('ALL_CONSTRUCTORS').neg())), Js('Object'), Js({'getOwnPropertyDescriptor':var.get('$getDesc'),'defineProperty':var.get('$setDesc')}))
            @Js
            def PyJs_anonymous_1117_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('arrayToString').callprop('call', Js({}))
            PyJs_anonymous_1117_._set_name('anonymous')
            if var.get('fails')(PyJs_anonymous_1117_):
                @Js
                def PyJs_toString_1118_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'toString':PyJs_toString_1118_}, var)
                    var.registers([])
                    return var.get('arrayJoin').callprop('call', var.get(u"this"))
                PyJs_toString_1118_._set_name('toString')
                var.put('arrayToString', var.put('arrayToLocaleString', PyJs_toString_1118_))
            var.put('$TypedArrayPrototype$', var.get('redefineAll')(Js({}), var.get('proto')))
            var.get('redefineAll')(var.get('$TypedArrayPrototype$'), var.get('$iterators'))
            var.get('hide')(var.get('$TypedArrayPrototype$'), var.get('ITERATOR'), var.get('$iterators').get('values'))
            @Js
            def PyJs_constructor_1119_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'constructor':PyJs_constructor_1119_}, var)
                var.registers([])
                pass
            PyJs_constructor_1119_._set_name('constructor')
            var.get('redefineAll')(var.get('$TypedArrayPrototype$'), Js({'slice':var.get('$slice'),'set':var.get('$set'),'constructor':PyJs_constructor_1119_,'toString':var.get('arrayToString'),'toLocaleString':var.get('$toLocaleString')}))
            var.get('addGetter')(var.get('$TypedArrayPrototype$'), Js('buffer'), Js('b'))
            var.get('addGetter')(var.get('$TypedArrayPrototype$'), Js('byteOffset'), Js('o'))
            var.get('addGetter')(var.get('$TypedArrayPrototype$'), Js('byteLength'), Js('l'))
            var.get('addGetter')(var.get('$TypedArrayPrototype$'), Js('length'), Js('e'))
            @Js
            def PyJs_get_1120_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_1120_}, var)
                var.registers([])
                return var.get(u"this").get(var.get('TYPED_ARRAY'))
            PyJs_get_1120_._set_name('get')
            var.get('dP')(var.get('$TypedArrayPrototype$'), var.get('TAG'), Js({'get':PyJs_get_1120_}))
            @Js
            def PyJs_anonymous_1121_(KEY, BYTES, wrapper, CLAMPED, this, arguments, var=var):
                var = Scope({'KEY':KEY, 'BYTES':BYTES, 'wrapper':wrapper, 'CLAMPED':CLAMPED, 'this':this, 'arguments':arguments}, var)
                var.registers(['TypedArrayPrototype', 'setter', 'KEY', 'SETTER', 'FORCED', 'Base', 'CLAMPED', 'O', 'wrapper', 'NAME', 'TypedArray', 'BYTES', 'GETTER', '$nativeIterator', 'TAC', 'addElement', 'CORRECT_ITER_NAME', 'getter', '$iterator'])
                var.put('CLAMPED', var.get('CLAMPED').neg().neg())
                var.put('NAME', ((var.get('KEY')+(Js('Clamped') if var.get('CLAMPED') else Js('')))+Js('Array')))
                var.put('GETTER', (Js('get')+var.get('KEY')))
                var.put('SETTER', (Js('set')+var.get('KEY')))
                var.put('TypedArray', var.get('global').get(var.get('NAME')))
                var.put('Base', (var.get('TypedArray') or Js({})))
                var.put('TAC', (var.get('TypedArray') and var.get('getPrototypeOf')(var.get('TypedArray'))))
                var.put('FORCED', (var.get('TypedArray').neg() or var.get('$typed').get('ABV').neg()))
                var.put('O', Js({}))
                var.put('TypedArrayPrototype', (var.get('TypedArray') and var.get('TypedArray').get(var.get('PROTOTYPE'))))
                @Js
                def PyJs_getter_1122_(that, index, this, arguments, var=var):
                    var = Scope({'that':that, 'index':index, 'this':this, 'arguments':arguments, 'getter':PyJs_getter_1122_}, var)
                    var.registers(['data', 'index', 'that'])
                    var.put('data', var.get('that').get('_d'))
                    return var.get('data').get('v').callprop(var.get('GETTER'), ((var.get('index')*var.get('BYTES'))+var.get('data').get('o')), var.get('LITTLE_ENDIAN'))
                PyJs_getter_1122_._set_name('getter')
                var.put('getter', PyJs_getter_1122_)
                @Js
                def PyJs_setter_1123_(that, index, value, this, arguments, var=var):
                    var = Scope({'that':that, 'index':index, 'value':value, 'this':this, 'arguments':arguments, 'setter':PyJs_setter_1123_}, var)
                    var.registers(['data', 'index', 'value', 'that'])
                    var.put('data', var.get('that').get('_d'))
                    if var.get('CLAMPED'):
                        var.put('value', (Js(0.0) if (var.put('value', var.get('Math').callprop('round', var.get('value')))<Js(0.0)) else (Js(255) if (var.get('value')>Js(255)) else (var.get('value')&Js(255)))))
                    var.get('data').get('v').callprop(var.get('SETTER'), ((var.get('index')*var.get('BYTES'))+var.get('data').get('o')), var.get('value'), var.get('LITTLE_ENDIAN'))
                PyJs_setter_1123_._set_name('setter')
                var.put('setter', PyJs_setter_1123_)
                @Js
                def PyJs_addElement_1124_(that, index, this, arguments, var=var):
                    var = Scope({'that':that, 'index':index, 'this':this, 'arguments':arguments, 'addElement':PyJs_addElement_1124_}, var)
                    var.registers(['index', 'that'])
                    @Js
                    def PyJs_get_1125_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_1125_}, var)
                        var.registers([])
                        return var.get('getter')(var.get(u"this"), var.get('index'))
                    PyJs_get_1125_._set_name('get')
                    @Js
                    def PyJs_set_1126_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments, 'set':PyJs_set_1126_}, var)
                        var.registers(['value'])
                        return var.get('setter')(var.get(u"this"), var.get('index'), var.get('value'))
                    PyJs_set_1126_._set_name('set')
                    var.get('dP')(var.get('that'), var.get('index'), Js({'get':PyJs_get_1125_,'set':PyJs_set_1126_,'enumerable':Js(True)}))
                PyJs_addElement_1124_._set_name('addElement')
                var.put('addElement', PyJs_addElement_1124_)
                if var.get('FORCED'):
                    @Js
                    def PyJs_anonymous_1127_(that, data, PyJsArg_246f6666736574_, PyJsArg_246c656e677468_, this, arguments, var=var):
                        var = Scope({'that':that, 'data':data, '$offset':PyJsArg_246f6666736574_, '$length':PyJsArg_246c656e677468_, 'this':this, 'arguments':arguments}, var)
                        var.registers(['byteLength', 'that', 'buffer', '$length', 'klass', 'length', 'data', 'offset', '$offset', '$len', 'index'])
                        var.get('anInstance')(var.get('that'), var.get('TypedArray'), var.get('NAME'), Js('_d'))
                        var.put('index', Js(0.0))
                        var.put('offset', Js(0.0))
                        pass
                        if var.get('isObject')(var.get('data')).neg():
                            var.put('length', var.get('toIndex')(var.get('data')))
                            var.put('byteLength', (var.get('length')*var.get('BYTES')))
                            var.put('buffer', var.get('$ArrayBuffer').create(var.get('byteLength')))
                        else:
                            if ((var.get('data').instanceof(var.get('$ArrayBuffer')) or (var.put('klass', var.get('classof')(var.get('data')))==var.get('ARRAY_BUFFER'))) or (var.get('klass')==var.get('SHARED_BUFFER'))):
                                var.put('buffer', var.get('data'))
                                var.put('offset', var.get('toOffset')(var.get('$offset'), var.get('BYTES')))
                                var.put('$len', var.get('data').get('byteLength'))
                                if PyJsStrictEq(var.get('$length'),var.get('undefined')):
                                    if (var.get('$len')%var.get('BYTES')):
                                        PyJsTempException = JsToPyException(var.get('RangeError')(var.get('WRONG_LENGTH')))
                                        raise PyJsTempException
                                    var.put('byteLength', (var.get('$len')-var.get('offset')))
                                    if (var.get('byteLength')<Js(0.0)):
                                        PyJsTempException = JsToPyException(var.get('RangeError')(var.get('WRONG_LENGTH')))
                                        raise PyJsTempException
                                else:
                                    var.put('byteLength', (var.get('toLength')(var.get('$length'))*var.get('BYTES')))
                                    if ((var.get('byteLength')+var.get('offset'))>var.get('$len')):
                                        PyJsTempException = JsToPyException(var.get('RangeError')(var.get('WRONG_LENGTH')))
                                        raise PyJsTempException
                                var.put('length', (var.get('byteLength')/var.get('BYTES')))
                            else:
                                if var.get('data').contains(var.get('TYPED_ARRAY')):
                                    return var.get('fromList')(var.get('TypedArray'), var.get('data'))
                                else:
                                    return var.get('$from').callprop('call', var.get('TypedArray'), var.get('data'))
                        var.get('hide')(var.get('that'), Js('_d'), Js({'b':var.get('buffer'),'o':var.get('offset'),'l':var.get('byteLength'),'e':var.get('length'),'v':var.get('$DataView').create(var.get('buffer'))}))
                        while (var.get('index')<var.get('length')):
                            var.get('addElement')(var.get('that'), (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1)))
                    PyJs_anonymous_1127_._set_name('anonymous')
                    var.put('TypedArray', var.get('wrapper')(PyJs_anonymous_1127_))
                    var.put('TypedArrayPrototype', var.get('TypedArray').put(var.get('PROTOTYPE'), var.get('create')(var.get('$TypedArrayPrototype$'))))
                    var.get('hide')(var.get('TypedArrayPrototype'), Js('constructor'), var.get('TypedArray'))
                else:
                    @Js
                    def PyJs_anonymous_1128_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        var.get('TypedArray')(Js(1.0))
                    PyJs_anonymous_1128_._set_name('anonymous')
                    @Js
                    def PyJs_anonymous_1129_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        var.get('TypedArray').create((-Js(1.0)))
                    PyJs_anonymous_1129_._set_name('anonymous')
                    @Js
                    def PyJs_anonymous_1130_(iter, this, arguments, var=var):
                        var = Scope({'iter':iter, 'this':this, 'arguments':arguments}, var)
                        var.registers(['iter'])
                        var.get('TypedArray').create()
                        var.get('TypedArray').create(var.get(u"null"))
                        var.get('TypedArray').create(Js(1.5))
                        var.get('TypedArray').create(var.get('iter'))
                    PyJs_anonymous_1130_._set_name('anonymous')
                    if ((var.get('fails')(PyJs_anonymous_1128_).neg() or var.get('fails')(PyJs_anonymous_1129_).neg()) or var.get('$iterDetect')(PyJs_anonymous_1130_, Js(True)).neg()):
                        @Js
                        def PyJs_anonymous_1131_(that, data, PyJsArg_246f6666736574_, PyJsArg_246c656e677468_, this, arguments, var=var):
                            var = Scope({'that':that, 'data':data, '$offset':PyJsArg_246f6666736574_, '$length':PyJsArg_246c656e677468_, 'this':this, 'arguments':arguments}, var)
                            var.registers(['that', '$length', 'klass', 'data', '$offset'])
                            var.get('anInstance')(var.get('that'), var.get('TypedArray'), var.get('NAME'))
                            pass
                            if var.get('isObject')(var.get('data')).neg():
                                return var.get('Base').create(var.get('toIndex')(var.get('data')))
                            if ((var.get('data').instanceof(var.get('$ArrayBuffer')) or (var.put('klass', var.get('classof')(var.get('data')))==var.get('ARRAY_BUFFER'))) or (var.get('klass')==var.get('SHARED_BUFFER'))):
                                return (var.get('Base').create(var.get('data'), var.get('toOffset')(var.get('$offset'), var.get('BYTES')), var.get('$length')) if PyJsStrictNeq(var.get('$length'),var.get('undefined')) else (var.get('Base').create(var.get('data'), var.get('toOffset')(var.get('$offset'), var.get('BYTES'))) if PyJsStrictNeq(var.get('$offset'),var.get('undefined')) else var.get('Base').create(var.get('data'))))
                            if var.get('data').contains(var.get('TYPED_ARRAY')):
                                return var.get('fromList')(var.get('TypedArray'), var.get('data'))
                            return var.get('$from').callprop('call', var.get('TypedArray'), var.get('data'))
                        PyJs_anonymous_1131_._set_name('anonymous')
                        var.put('TypedArray', var.get('wrapper')(PyJs_anonymous_1131_))
                        @Js
                        def PyJs_anonymous_1132_(key, this, arguments, var=var):
                            var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                            var.registers(['key'])
                            if var.get('TypedArray').contains(var.get('key')).neg():
                                var.get('hide')(var.get('TypedArray'), var.get('key'), var.get('Base').get(var.get('key')))
                        PyJs_anonymous_1132_._set_name('anonymous')
                        var.get('arrayForEach')((var.get('gOPN')(var.get('Base')).callprop('concat', var.get('gOPN')(var.get('TAC'))) if PyJsStrictNeq(var.get('TAC'),var.get('Function').get('prototype')) else var.get('gOPN')(var.get('Base'))), PyJs_anonymous_1132_)
                        var.get('TypedArray').put(var.get('PROTOTYPE'), var.get('TypedArrayPrototype'))
                        if var.get('LIBRARY').neg():
                            var.get('TypedArrayPrototype').put('constructor', var.get('TypedArray'))
                var.put('$nativeIterator', var.get('TypedArrayPrototype').get(var.get('ITERATOR')))
                var.put('CORRECT_ITER_NAME', (var.get('$nativeIterator').neg().neg() and ((var.get('$nativeIterator').get('name')==Js('values')) or (var.get('$nativeIterator').get('name')==var.get('undefined')))))
                var.put('$iterator', var.get('$iterators').get('values'))
                var.get('hide')(var.get('TypedArray'), var.get('TYPED_CONSTRUCTOR'), Js(True))
                var.get('hide')(var.get('TypedArrayPrototype'), var.get('TYPED_ARRAY'), var.get('NAME'))
                var.get('hide')(var.get('TypedArrayPrototype'), var.get('VIEW'), Js(True))
                var.get('hide')(var.get('TypedArrayPrototype'), var.get('DEF_CONSTRUCTOR'), var.get('TypedArray'))
                if ((var.get('TypedArray').create(Js(1.0)).get(var.get('TAG'))!=var.get('NAME')) if var.get('CLAMPED') else var.get('TypedArrayPrototype').contains(var.get('TAG')).neg()):
                    @Js
                    def PyJs_get_1133_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_1133_}, var)
                        var.registers([])
                        return var.get('NAME')
                    PyJs_get_1133_._set_name('get')
                    var.get('dP')(var.get('TypedArrayPrototype'), var.get('TAG'), Js({'get':PyJs_get_1133_}))
                var.get('O').put(var.get('NAME'), var.get('TypedArray'))
                var.get('$export')(((var.get('$export').get('G')+var.get('$export').get('W'))+(var.get('$export').get('F')*(var.get('TypedArray')!=var.get('Base')))), var.get('O'))
                var.get('$export')(var.get('$export').get('S'), var.get('NAME'), Js({'BYTES_PER_ELEMENT':var.get('BYTES')}))
                @Js
                def PyJs_anonymous_1134_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.get('Base').get('of').callprop('call', var.get('TypedArray'), Js(1.0))
                PyJs_anonymous_1134_._set_name('anonymous')
                var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('fails')(PyJs_anonymous_1134_))), var.get('NAME'), Js({'from':var.get('$from'),'of':var.get('$of')}))
                if var.get('TypedArrayPrototype').contains(var.get('BYTES_PER_ELEMENT')).neg():
                    var.get('hide')(var.get('TypedArrayPrototype'), var.get('BYTES_PER_ELEMENT'), var.get('BYTES'))
                var.get('$export')(var.get('$export').get('P'), var.get('NAME'), var.get('proto'))
                var.get('setSpecies')(var.get('NAME'))
                var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('FORCED_SET'))), var.get('NAME'), Js({'set':var.get('$set')}))
                var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('CORRECT_ITER_NAME').neg())), var.get('NAME'), var.get('$iterators'))
                if (var.get('LIBRARY').neg() and (var.get('TypedArrayPrototype').get('toString')!=var.get('arrayToString'))):
                    var.get('TypedArrayPrototype').put('toString', var.get('arrayToString'))
                @Js
                def PyJs_anonymous_1135_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.get('TypedArray').create(Js(1.0)).callprop('slice')
                PyJs_anonymous_1135_._set_name('anonymous')
                var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('fails')(PyJs_anonymous_1135_))), var.get('NAME'), Js({'slice':var.get('$slice')}))
                @Js
                def PyJs_anonymous_1136_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    return (Js([Js(1.0), Js(2.0)]).callprop('toLocaleString')!=var.get('TypedArray').create(Js([Js(1.0), Js(2.0)])).callprop('toLocaleString'))
                PyJs_anonymous_1136_._set_name('anonymous')
                @Js
                def PyJs_anonymous_1137_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.get('TypedArrayPrototype').get('toLocaleString').callprop('call', Js([Js(1.0), Js(2.0)]))
                PyJs_anonymous_1137_._set_name('anonymous')
                var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*(var.get('fails')(PyJs_anonymous_1136_) or var.get('fails')(PyJs_anonymous_1137_).neg()))), var.get('NAME'), Js({'toLocaleString':var.get('$toLocaleString')}))
                var.get('Iterators').put(var.get('NAME'), (var.get('$nativeIterator') if var.get('CORRECT_ITER_NAME') else var.get('$iterator')))
                if (var.get('LIBRARY').neg() and var.get('CORRECT_ITER_NAME').neg()):
                    var.get('hide')(var.get('TypedArrayPrototype'), var.get('ITERATOR'), var.get('$iterator'))
            PyJs_anonymous_1121_._set_name('anonymous')
            var.get('module').put('exports', PyJs_anonymous_1121_)
        else:
            @Js
            def PyJs_anonymous_1138_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                pass
            PyJs_anonymous_1138_._set_name('anonymous')
            var.get('module').put('exports', PyJs_anonymous_1138_)
    PyJs_anonymous_1075_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1139_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['Math', 'global', 'LIBRARY', 'ArrayBufferProto', 'addGetter', 'gOPN', 'BYTE_OFFSET', 'packI32', 'DESCRIPTORS', 'anInstance', 'RangeError', 'dP', '$typed', 'Infinity', 'BaseBuffer', 'toIndex', 'j', 'view', 'arrayFill', 'packI8', '$ArrayBuffer', 'pow', '$LENGTH', 'log', 'WRONG_LENGTH', '$OFFSET', 'floor', 'toLength', 'WRONG_INDEX', 'fails', 'unpackI32', 'key', 'toInteger', 'packI16', 'redefineAll', 'packF64', 'packF32', 'setToStringTag', 'DATA_VIEW', 'require', 'PROTOTYPE', 'hide', 'keys', '$DataView', 'packIEEE754', 'set', '$setInt8', 'LN2', 'module', 'abs', 'exports', '$BUFFER', 'BUFFER', 'get', 'ARRAY_BUFFER', 'BYTE_LENGTH', 'unpackIEEE754'])
        @Js
        def PyJsHoisted_packIEEE754_(value, mLen, nBytes, this, arguments, var=var):
            var = Scope({'value':value, 'mLen':mLen, 'nBytes':nBytes, 'this':this, 'arguments':arguments}, var)
            var.registers(['eMax', 'i', 's', 'nBytes', 'buffer', 'mLen', 'e', 'm', 'eLen', 'eBias', 'rt', 'c', 'value'])
            var.put('buffer', var.get('Array').create(var.get('nBytes')))
            var.put('eLen', (((var.get('nBytes')*Js(8.0))-var.get('mLen'))-Js(1.0)))
            var.put('eMax', ((Js(1.0)<<var.get('eLen'))-Js(1.0)))
            var.put('eBias', (var.get('eMax')>>Js(1.0)))
            var.put('rt', ((var.get('pow')(Js(2.0), (-Js(24.0)))-var.get('pow')(Js(2.0), (-Js(77.0)))) if PyJsStrictEq(var.get('mLen'),Js(23.0)) else Js(0.0)))
            var.put('i', Js(0.0))
            var.put('s', (Js(1.0) if ((var.get('value')<Js(0.0)) or (PyJsStrictEq(var.get('value'),Js(0.0)) and ((Js(1.0)/var.get('value'))<Js(0.0)))) else Js(0.0)))
            pass
            var.put('value', var.get('abs')(var.get('value')))
            if ((var.get('value')!=var.get('value')) or PyJsStrictEq(var.get('value'),var.get('Infinity'))):
                var.put('m', (Js(1.0) if (var.get('value')!=var.get('value')) else Js(0.0)))
                var.put('e', var.get('eMax'))
            else:
                var.put('e', var.get('floor')((var.get('log')(var.get('value'))/var.get('LN2'))))
                if ((var.get('value')*var.put('c', var.get('pow')(Js(2.0), (-var.get('e')))))<Js(1.0)):
                    (var.put('e',Js(var.get('e').to_number())-Js(1))+Js(1))
                    var.put('c', Js(2.0), '*')
                if ((var.get('e')+var.get('eBias'))>=Js(1.0)):
                    var.put('value', (var.get('rt')/var.get('c')), '+')
                else:
                    var.put('value', (var.get('rt')*var.get('pow')(Js(2.0), (Js(1.0)-var.get('eBias')))), '+')
                if ((var.get('value')*var.get('c'))>=Js(2.0)):
                    (var.put('e',Js(var.get('e').to_number())+Js(1))-Js(1))
                    var.put('c', Js(2.0), '/')
                if ((var.get('e')+var.get('eBias'))>=var.get('eMax')):
                    var.put('m', Js(0.0))
                    var.put('e', var.get('eMax'))
                else:
                    if ((var.get('e')+var.get('eBias'))>=Js(1.0)):
                        var.put('m', (((var.get('value')*var.get('c'))-Js(1.0))*var.get('pow')(Js(2.0), var.get('mLen'))))
                        var.put('e', (var.get('e')+var.get('eBias')))
                    else:
                        var.put('m', ((var.get('value')*var.get('pow')(Js(2.0), (var.get('eBias')-Js(1.0))))*var.get('pow')(Js(2.0), var.get('mLen'))))
                        var.put('e', Js(0.0))
            #for JS loop
            
            while (var.get('mLen')>=Js(8.0)):
                try:
                    pass
                finally:
                        PyJsComma(PyJsComma(var.get('buffer').put((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)), (var.get('m')&Js(255.0))),var.put('m', Js(256.0), '/')),var.put('mLen', Js(8.0), '-'))
            var.put('e', ((var.get('e')<<var.get('mLen'))|var.get('m')))
            var.put('eLen', var.get('mLen'), '+')
            #for JS loop
            
            while (var.get('eLen')>Js(0.0)):
                try:
                    pass
                finally:
                        PyJsComma(PyJsComma(var.get('buffer').put((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)), (var.get('e')&Js(255.0))),var.put('e', Js(256.0), '/')),var.put('eLen', Js(8.0), '-'))
            var.get('buffer').put(var.put('i',Js(var.get('i').to_number())-Js(1)), (var.get('s')*Js(128.0)), '|')
            return var.get('buffer')
        PyJsHoisted_packIEEE754_.func_name = 'packIEEE754'
        var.put('packIEEE754', PyJsHoisted_packIEEE754_)
        @Js
        def PyJsHoisted_unpackIEEE754_(buffer, mLen, nBytes, this, arguments, var=var):
            var = Scope({'buffer':buffer, 'mLen':mLen, 'nBytes':nBytes, 'this':this, 'arguments':arguments}, var)
            var.registers(['eMax', 'i', 's', 'nBytes', 'buffer', 'mLen', 'e', 'm', 'eLen', 'eBias', 'nBits'])
            var.put('eLen', (((var.get('nBytes')*Js(8.0))-var.get('mLen'))-Js(1.0)))
            var.put('eMax', ((Js(1.0)<<var.get('eLen'))-Js(1.0)))
            var.put('eBias', (var.get('eMax')>>Js(1.0)))
            var.put('nBits', (var.get('eLen')-Js(7.0)))
            var.put('i', (var.get('nBytes')-Js(1.0)))
            var.put('s', var.get('buffer').get((var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))))
            var.put('e', (var.get('s')&Js(127.0)))
            pass
            var.put('s', Js(7.0), '>>')
            #for JS loop
            
            while (var.get('nBits')>Js(0.0)):
                try:
                    pass
                finally:
                        PyJsComma(PyJsComma(var.put('e', ((var.get('e')*Js(256.0))+var.get('buffer').get(var.get('i')))),(var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))),var.put('nBits', Js(8.0), '-'))
            var.put('m', (var.get('e')&((Js(1.0)<<(-var.get('nBits')))-Js(1.0))))
            var.put('e', (-var.get('nBits')), '>>')
            var.put('nBits', var.get('mLen'), '+')
            #for JS loop
            
            while (var.get('nBits')>Js(0.0)):
                try:
                    pass
                finally:
                        PyJsComma(PyJsComma(var.put('m', ((var.get('m')*Js(256.0))+var.get('buffer').get(var.get('i')))),(var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))),var.put('nBits', Js(8.0), '-'))
            if PyJsStrictEq(var.get('e'),Js(0.0)):
                var.put('e', (Js(1.0)-var.get('eBias')))
            else:
                if PyJsStrictEq(var.get('e'),var.get('eMax')):
                    return (var.get('NaN') if var.get('m') else ((-var.get('Infinity')) if var.get('s') else var.get('Infinity')))
                else:
                    var.put('m', (var.get('m')+var.get('pow')(Js(2.0), var.get('mLen'))))
                    var.put('e', (var.get('e')-var.get('eBias')))
            return ((((-Js(1.0)) if var.get('s') else Js(1.0))*var.get('m'))*var.get('pow')(Js(2.0), (var.get('e')-var.get('mLen'))))
        PyJsHoisted_unpackIEEE754_.func_name = 'unpackIEEE754'
        var.put('unpackIEEE754', PyJsHoisted_unpackIEEE754_)
        @Js
        def PyJsHoisted_unpackI32_(bytes, this, arguments, var=var):
            var = Scope({'bytes':bytes, 'this':this, 'arguments':arguments}, var)
            var.registers(['bytes'])
            return ((((var.get('bytes').get('3')<<Js(24.0))|(var.get('bytes').get('2')<<Js(16.0)))|(var.get('bytes').get('1')<<Js(8.0)))|var.get('bytes').get('0'))
        PyJsHoisted_unpackI32_.func_name = 'unpackI32'
        var.put('unpackI32', PyJsHoisted_unpackI32_)
        @Js
        def PyJsHoisted_packI8_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return Js([(var.get('it')&Js(255))])
        PyJsHoisted_packI8_.func_name = 'packI8'
        var.put('packI8', PyJsHoisted_packI8_)
        @Js
        def PyJsHoisted_packI16_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return Js([(var.get('it')&Js(255)), ((var.get('it')>>Js(8.0))&Js(255))])
        PyJsHoisted_packI16_.func_name = 'packI16'
        var.put('packI16', PyJsHoisted_packI16_)
        @Js
        def PyJsHoisted_packI32_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return Js([(var.get('it')&Js(255)), ((var.get('it')>>Js(8.0))&Js(255)), ((var.get('it')>>Js(16.0))&Js(255)), ((var.get('it')>>Js(24.0))&Js(255))])
        PyJsHoisted_packI32_.func_name = 'packI32'
        var.put('packI32', PyJsHoisted_packI32_)
        @Js
        def PyJsHoisted_packF64_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return var.get('packIEEE754')(var.get('it'), Js(52.0), Js(8.0))
        PyJsHoisted_packF64_.func_name = 'packF64'
        var.put('packF64', PyJsHoisted_packF64_)
        @Js
        def PyJsHoisted_packF32_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return var.get('packIEEE754')(var.get('it'), Js(23.0), Js(4.0))
        PyJsHoisted_packF32_.func_name = 'packF32'
        var.put('packF32', PyJsHoisted_packF32_)
        @Js
        def PyJsHoisted_addGetter_(C, key, internal, this, arguments, var=var):
            var = Scope({'C':C, 'key':key, 'internal':internal, 'this':this, 'arguments':arguments}, var)
            var.registers(['internal', 'key', 'C'])
            @Js
            def PyJs_get_1140_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_1140_}, var)
                var.registers([])
                return var.get(u"this").get(var.get('internal'))
            PyJs_get_1140_._set_name('get')
            var.get('dP')(var.get('C').get(var.get('PROTOTYPE')), var.get('key'), Js({'get':PyJs_get_1140_}))
        PyJsHoisted_addGetter_.func_name = 'addGetter'
        var.put('addGetter', PyJsHoisted_addGetter_)
        @Js
        def PyJsHoisted_get_(view, bytes, index, isLittleEndian, this, arguments, var=var):
            var = Scope({'view':view, 'bytes':bytes, 'index':index, 'isLittleEndian':isLittleEndian, 'this':this, 'arguments':arguments}, var)
            var.registers(['view', 'pack', 'isLittleEndian', 'store', 'start', 'bytes', 'intIndex', 'numIndex', 'index'])
            var.put('numIndex', (+var.get('index')))
            var.put('intIndex', var.get('toIndex')(var.get('numIndex')))
            if ((var.get('intIndex')+var.get('bytes'))>var.get('view').get(var.get('$LENGTH'))):
                PyJsTempException = JsToPyException(var.get('RangeError')(var.get('WRONG_INDEX')))
                raise PyJsTempException
            var.put('store', var.get('view').get(var.get('$BUFFER')).get('_b'))
            var.put('start', (var.get('intIndex')+var.get('view').get(var.get('$OFFSET'))))
            var.put('pack', var.get('store').callprop('slice', var.get('start'), (var.get('start')+var.get('bytes'))))
            return (var.get('pack') if var.get('isLittleEndian') else var.get('pack').callprop('reverse'))
        PyJsHoisted_get_.func_name = 'get'
        var.put('get', PyJsHoisted_get_)
        @Js
        def PyJsHoisted_set_(view, bytes, index, conversion, value, isLittleEndian, this, arguments, var=var):
            var = Scope({'view':view, 'bytes':bytes, 'index':index, 'conversion':conversion, 'value':value, 'isLittleEndian':isLittleEndian, 'this':this, 'arguments':arguments}, var)
            var.registers(['view', 'pack', 'isLittleEndian', 'store', 'i', 'start', 'bytes', 'intIndex', 'numIndex', 'conversion', 'index', 'value'])
            var.put('numIndex', (+var.get('index')))
            var.put('intIndex', var.get('toIndex')(var.get('numIndex')))
            if ((var.get('intIndex')+var.get('bytes'))>var.get('view').get(var.get('$LENGTH'))):
                PyJsTempException = JsToPyException(var.get('RangeError')(var.get('WRONG_INDEX')))
                raise PyJsTempException
            var.put('store', var.get('view').get(var.get('$BUFFER')).get('_b'))
            var.put('start', (var.get('intIndex')+var.get('view').get(var.get('$OFFSET'))))
            var.put('pack', var.get('conversion')((+var.get('value'))))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('bytes')):
                try:
                    var.get('store').put((var.get('start')+var.get('i')), var.get('pack').get((var.get('i') if var.get('isLittleEndian') else ((var.get('bytes')-var.get('i'))-Js(1.0)))))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        PyJsHoisted_set_.func_name = 'set'
        var.put('set', PyJsHoisted_set_)
        Js('use strict')
        var.put('global', var.get('require')(Js('./_global')))
        var.put('DESCRIPTORS', var.get('require')(Js('./_descriptors')))
        var.put('LIBRARY', var.get('require')(Js('./_library')))
        var.put('$typed', var.get('require')(Js('./_typed')))
        var.put('hide', var.get('require')(Js('./_hide')))
        var.put('redefineAll', var.get('require')(Js('./_redefine-all')))
        var.put('fails', var.get('require')(Js('./_fails')))
        var.put('anInstance', var.get('require')(Js('./_an-instance')))
        var.put('toInteger', var.get('require')(Js('./_to-integer')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('toIndex', var.get('require')(Js('./_to-index')))
        var.put('gOPN', var.get('require')(Js('./_object-gopn')).get('f'))
        var.put('dP', var.get('require')(Js('./_object-dp')).get('f'))
        var.put('arrayFill', var.get('require')(Js('./_array-fill')))
        var.put('setToStringTag', var.get('require')(Js('./_set-to-string-tag')))
        var.put('ARRAY_BUFFER', Js('ArrayBuffer'))
        var.put('DATA_VIEW', Js('DataView'))
        var.put('PROTOTYPE', Js('prototype'))
        var.put('WRONG_LENGTH', Js('Wrong length!'))
        var.put('WRONG_INDEX', Js('Wrong index!'))
        var.put('$ArrayBuffer', var.get('global').get(var.get('ARRAY_BUFFER')))
        var.put('$DataView', var.get('global').get(var.get('DATA_VIEW')))
        var.put('Math', var.get('global').get('Math'))
        var.put('RangeError', var.get('global').get('RangeError'))
        var.put('Infinity', var.get('global').get('Infinity'))
        var.put('BaseBuffer', var.get('$ArrayBuffer'))
        var.put('abs', var.get('Math').get('abs'))
        var.put('pow', var.get('Math').get('pow'))
        var.put('floor', var.get('Math').get('floor'))
        var.put('log', var.get('Math').get('log'))
        var.put('LN2', var.get('Math').get('LN2'))
        var.put('BUFFER', Js('buffer'))
        var.put('BYTE_LENGTH', Js('byteLength'))
        var.put('BYTE_OFFSET', Js('byteOffset'))
        var.put('$BUFFER', (Js('_b') if var.get('DESCRIPTORS') else var.get('BUFFER')))
        var.put('$LENGTH', (Js('_l') if var.get('DESCRIPTORS') else var.get('BYTE_LENGTH')))
        var.put('$OFFSET', (Js('_o') if var.get('DESCRIPTORS') else var.get('BYTE_OFFSET')))
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        if var.get('$typed').get('ABV').neg():
            @Js
            def PyJs_ArrayBuffer_1141_(length, this, arguments, var=var):
                var = Scope({'length':length, 'this':this, 'arguments':arguments, 'ArrayBuffer':PyJs_ArrayBuffer_1141_}, var)
                var.registers(['byteLength', 'length'])
                var.get('anInstance')(var.get(u"this"), var.get('$ArrayBuffer'), var.get('ARRAY_BUFFER'))
                var.put('byteLength', var.get('toIndex')(var.get('length')))
                var.get(u"this").put('_b', var.get('arrayFill').callprop('call', var.get('Array').create(var.get('byteLength')), Js(0.0)))
                var.get(u"this").put(var.get('$LENGTH'), var.get('byteLength'))
            PyJs_ArrayBuffer_1141_._set_name('ArrayBuffer')
            var.put('$ArrayBuffer', PyJs_ArrayBuffer_1141_)
            @Js
            def PyJs_DataView_1142_(buffer, byteOffset, byteLength, this, arguments, var=var):
                var = Scope({'buffer':buffer, 'byteOffset':byteOffset, 'byteLength':byteLength, 'this':this, 'arguments':arguments, 'DataView':PyJs_DataView_1142_}, var)
                var.registers(['byteLength', 'byteOffset', 'buffer', 'offset', 'bufferLength'])
                var.get('anInstance')(var.get(u"this"), var.get('$DataView'), var.get('DATA_VIEW'))
                var.get('anInstance')(var.get('buffer'), var.get('$ArrayBuffer'), var.get('DATA_VIEW'))
                var.put('bufferLength', var.get('buffer').get(var.get('$LENGTH')))
                var.put('offset', var.get('toInteger')(var.get('byteOffset')))
                if ((var.get('offset')<Js(0.0)) or (var.get('offset')>var.get('bufferLength'))):
                    PyJsTempException = JsToPyException(var.get('RangeError')(Js('Wrong offset!')))
                    raise PyJsTempException
                var.put('byteLength', ((var.get('bufferLength')-var.get('offset')) if PyJsStrictEq(var.get('byteLength'),var.get('undefined')) else var.get('toLength')(var.get('byteLength'))))
                if ((var.get('offset')+var.get('byteLength'))>var.get('bufferLength')):
                    PyJsTempException = JsToPyException(var.get('RangeError')(var.get('WRONG_LENGTH')))
                    raise PyJsTempException
                var.get(u"this").put(var.get('$BUFFER'), var.get('buffer'))
                var.get(u"this").put(var.get('$OFFSET'), var.get('offset'))
                var.get(u"this").put(var.get('$LENGTH'), var.get('byteLength'))
            PyJs_DataView_1142_._set_name('DataView')
            var.put('$DataView', PyJs_DataView_1142_)
            if var.get('DESCRIPTORS'):
                var.get('addGetter')(var.get('$ArrayBuffer'), var.get('BYTE_LENGTH'), Js('_l'))
                var.get('addGetter')(var.get('$DataView'), var.get('BUFFER'), Js('_b'))
                var.get('addGetter')(var.get('$DataView'), var.get('BYTE_LENGTH'), Js('_l'))
                var.get('addGetter')(var.get('$DataView'), var.get('BYTE_OFFSET'), Js('_o'))
            def PyJs_LONG_1159_(var=var):
                @Js
                def PyJs_getInt8_1143_(byteOffset, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'this':this, 'arguments':arguments, 'getInt8':PyJs_getInt8_1143_}, var)
                    var.registers(['byteOffset'])
                    return ((var.get('get')(var.get(u"this"), Js(1.0), var.get('byteOffset')).get('0')<<Js(24.0))>>Js(24.0))
                PyJs_getInt8_1143_._set_name('getInt8')
                @Js
                def PyJs_getUint8_1144_(byteOffset, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'this':this, 'arguments':arguments, 'getUint8':PyJs_getUint8_1144_}, var)
                    var.registers(['byteOffset'])
                    return var.get('get')(var.get(u"this"), Js(1.0), var.get('byteOffset')).get('0')
                PyJs_getUint8_1144_._set_name('getUint8')
                @Js
                def PyJs_getInt16_1145_(byteOffset, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'this':this, 'arguments':arguments, 'getInt16':PyJs_getInt16_1145_}, var)
                    var.registers(['bytes', 'byteOffset'])
                    var.put('bytes', var.get('get')(var.get(u"this"), Js(2.0), var.get('byteOffset'), var.get('arguments').get('1')))
                    return ((((var.get('bytes').get('1')<<Js(8.0))|var.get('bytes').get('0'))<<Js(16.0))>>Js(16.0))
                PyJs_getInt16_1145_._set_name('getInt16')
                @Js
                def PyJs_getUint16_1146_(byteOffset, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'this':this, 'arguments':arguments, 'getUint16':PyJs_getUint16_1146_}, var)
                    var.registers(['bytes', 'byteOffset'])
                    var.put('bytes', var.get('get')(var.get(u"this"), Js(2.0), var.get('byteOffset'), var.get('arguments').get('1')))
                    return ((var.get('bytes').get('1')<<Js(8.0))|var.get('bytes').get('0'))
                PyJs_getUint16_1146_._set_name('getUint16')
                @Js
                def PyJs_getInt32_1147_(byteOffset, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'this':this, 'arguments':arguments, 'getInt32':PyJs_getInt32_1147_}, var)
                    var.registers(['byteOffset'])
                    return var.get('unpackI32')(var.get('get')(var.get(u"this"), Js(4.0), var.get('byteOffset'), var.get('arguments').get('1')))
                PyJs_getInt32_1147_._set_name('getInt32')
                @Js
                def PyJs_getUint32_1148_(byteOffset, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'this':this, 'arguments':arguments, 'getUint32':PyJs_getUint32_1148_}, var)
                    var.registers(['byteOffset'])
                    return PyJsBshift(var.get('unpackI32')(var.get('get')(var.get(u"this"), Js(4.0), var.get('byteOffset'), var.get('arguments').get('1'))),Js(0.0))
                PyJs_getUint32_1148_._set_name('getUint32')
                @Js
                def PyJs_getFloat32_1149_(byteOffset, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'this':this, 'arguments':arguments, 'getFloat32':PyJs_getFloat32_1149_}, var)
                    var.registers(['byteOffset'])
                    return var.get('unpackIEEE754')(var.get('get')(var.get(u"this"), Js(4.0), var.get('byteOffset'), var.get('arguments').get('1')), Js(23.0), Js(4.0))
                PyJs_getFloat32_1149_._set_name('getFloat32')
                @Js
                def PyJs_getFloat64_1150_(byteOffset, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'this':this, 'arguments':arguments, 'getFloat64':PyJs_getFloat64_1150_}, var)
                    var.registers(['byteOffset'])
                    return var.get('unpackIEEE754')(var.get('get')(var.get(u"this"), Js(8.0), var.get('byteOffset'), var.get('arguments').get('1')), Js(52.0), Js(8.0))
                PyJs_getFloat64_1150_._set_name('getFloat64')
                @Js
                def PyJs_setInt8_1151_(byteOffset, value, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'value':value, 'this':this, 'arguments':arguments, 'setInt8':PyJs_setInt8_1151_}, var)
                    var.registers(['byteOffset', 'value'])
                    var.get('set')(var.get(u"this"), Js(1.0), var.get('byteOffset'), var.get('packI8'), var.get('value'))
                PyJs_setInt8_1151_._set_name('setInt8')
                @Js
                def PyJs_setUint8_1152_(byteOffset, value, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'value':value, 'this':this, 'arguments':arguments, 'setUint8':PyJs_setUint8_1152_}, var)
                    var.registers(['byteOffset', 'value'])
                    var.get('set')(var.get(u"this"), Js(1.0), var.get('byteOffset'), var.get('packI8'), var.get('value'))
                PyJs_setUint8_1152_._set_name('setUint8')
                @Js
                def PyJs_setInt16_1153_(byteOffset, value, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'value':value, 'this':this, 'arguments':arguments, 'setInt16':PyJs_setInt16_1153_}, var)
                    var.registers(['byteOffset', 'value'])
                    var.get('set')(var.get(u"this"), Js(2.0), var.get('byteOffset'), var.get('packI16'), var.get('value'), var.get('arguments').get('2'))
                PyJs_setInt16_1153_._set_name('setInt16')
                @Js
                def PyJs_setUint16_1154_(byteOffset, value, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'value':value, 'this':this, 'arguments':arguments, 'setUint16':PyJs_setUint16_1154_}, var)
                    var.registers(['byteOffset', 'value'])
                    var.get('set')(var.get(u"this"), Js(2.0), var.get('byteOffset'), var.get('packI16'), var.get('value'), var.get('arguments').get('2'))
                PyJs_setUint16_1154_._set_name('setUint16')
                @Js
                def PyJs_setInt32_1155_(byteOffset, value, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'value':value, 'this':this, 'arguments':arguments, 'setInt32':PyJs_setInt32_1155_}, var)
                    var.registers(['byteOffset', 'value'])
                    var.get('set')(var.get(u"this"), Js(4.0), var.get('byteOffset'), var.get('packI32'), var.get('value'), var.get('arguments').get('2'))
                PyJs_setInt32_1155_._set_name('setInt32')
                @Js
                def PyJs_setUint32_1156_(byteOffset, value, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'value':value, 'this':this, 'arguments':arguments, 'setUint32':PyJs_setUint32_1156_}, var)
                    var.registers(['byteOffset', 'value'])
                    var.get('set')(var.get(u"this"), Js(4.0), var.get('byteOffset'), var.get('packI32'), var.get('value'), var.get('arguments').get('2'))
                PyJs_setUint32_1156_._set_name('setUint32')
                @Js
                def PyJs_setFloat32_1157_(byteOffset, value, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'value':value, 'this':this, 'arguments':arguments, 'setFloat32':PyJs_setFloat32_1157_}, var)
                    var.registers(['byteOffset', 'value'])
                    var.get('set')(var.get(u"this"), Js(4.0), var.get('byteOffset'), var.get('packF32'), var.get('value'), var.get('arguments').get('2'))
                PyJs_setFloat32_1157_._set_name('setFloat32')
                @Js
                def PyJs_setFloat64_1158_(byteOffset, value, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'value':value, 'this':this, 'arguments':arguments, 'setFloat64':PyJs_setFloat64_1158_}, var)
                    var.registers(['byteOffset', 'value'])
                    var.get('set')(var.get(u"this"), Js(8.0), var.get('byteOffset'), var.get('packF64'), var.get('value'), var.get('arguments').get('2'))
                PyJs_setFloat64_1158_._set_name('setFloat64')
                return var.get('redefineAll')(var.get('$DataView').get(var.get('PROTOTYPE')), Js({'getInt8':PyJs_getInt8_1143_,'getUint8':PyJs_getUint8_1144_,'getInt16':PyJs_getInt16_1145_,'getUint16':PyJs_getUint16_1146_,'getInt32':PyJs_getInt32_1147_,'getUint32':PyJs_getUint32_1148_,'getFloat32':PyJs_getFloat32_1149_,'getFloat64':PyJs_getFloat64_1150_,'setInt8':PyJs_setInt8_1151_,'setUint8':PyJs_setUint8_1152_,'setInt16':PyJs_setInt16_1153_,'setUint16':PyJs_setUint16_1154_,'setInt32':PyJs_setInt32_1155_,'setUint32':PyJs_setUint32_1156_,'setFloat32':PyJs_setFloat32_1157_,'setFloat64':PyJs_setFloat64_1158_}))
            PyJs_LONG_1159_()
        else:
            @Js
            def PyJs_anonymous_1160_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('$ArrayBuffer')(Js(1.0))
            PyJs_anonymous_1160_._set_name('anonymous')
            @Js
            def PyJs_anonymous_1161_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('$ArrayBuffer').create((-Js(1.0)))
            PyJs_anonymous_1161_._set_name('anonymous')
            @Js
            def PyJs_anonymous_1162_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('$ArrayBuffer').create()
                var.get('$ArrayBuffer').create(Js(1.5))
                var.get('$ArrayBuffer').create(var.get('NaN'))
                return (var.get('$ArrayBuffer').get('name')!=var.get('ARRAY_BUFFER'))
            PyJs_anonymous_1162_._set_name('anonymous')
            if ((var.get('fails')(PyJs_anonymous_1160_).neg() or var.get('fails')(PyJs_anonymous_1161_).neg()) or var.get('fails')(PyJs_anonymous_1162_)):
                @Js
                def PyJs_ArrayBuffer_1163_(length, this, arguments, var=var):
                    var = Scope({'length':length, 'this':this, 'arguments':arguments, 'ArrayBuffer':PyJs_ArrayBuffer_1163_}, var)
                    var.registers(['length'])
                    var.get('anInstance')(var.get(u"this"), var.get('$ArrayBuffer'))
                    return var.get('BaseBuffer').create(var.get('toIndex')(var.get('length')))
                PyJs_ArrayBuffer_1163_._set_name('ArrayBuffer')
                var.put('$ArrayBuffer', PyJs_ArrayBuffer_1163_)
                var.put('ArrayBufferProto', var.get('$ArrayBuffer').put(var.get('PROTOTYPE'), var.get('BaseBuffer').get(var.get('PROTOTYPE'))))
                #for JS loop
                var.put('keys', var.get('gOPN')(var.get('BaseBuffer')))
                var.put('j', Js(0.0))
                while (var.get('keys').get('length')>var.get('j')):
                    if var.get('$ArrayBuffer').contains(var.put('key', var.get('keys').get((var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))))).neg():
                        var.get('hide')(var.get('$ArrayBuffer'), var.get('key'), var.get('BaseBuffer').get(var.get('key')))
                
                if var.get('LIBRARY').neg():
                    var.get('ArrayBufferProto').put('constructor', var.get('$ArrayBuffer'))
            var.put('view', var.get('$DataView').create(var.get('$ArrayBuffer').create(Js(2.0))))
            var.put('$setInt8', var.get('$DataView').get(var.get('PROTOTYPE')).get('setInt8'))
            var.get('view').callprop('setInt8', Js(0.0), Js(2147483648.0))
            var.get('view').callprop('setInt8', Js(1.0), Js(2147483649.0))
            if (var.get('view').callprop('getInt8', Js(0.0)) or var.get('view').callprop('getInt8', Js(1.0)).neg()):
                @Js
                def PyJs_setInt8_1164_(byteOffset, value, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'value':value, 'this':this, 'arguments':arguments, 'setInt8':PyJs_setInt8_1164_}, var)
                    var.registers(['byteOffset', 'value'])
                    var.get('$setInt8').callprop('call', var.get(u"this"), var.get('byteOffset'), ((var.get('value')<<Js(24.0))>>Js(24.0)))
                PyJs_setInt8_1164_._set_name('setInt8')
                @Js
                def PyJs_setUint8_1165_(byteOffset, value, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'value':value, 'this':this, 'arguments':arguments, 'setUint8':PyJs_setUint8_1165_}, var)
                    var.registers(['byteOffset', 'value'])
                    var.get('$setInt8').callprop('call', var.get(u"this"), var.get('byteOffset'), ((var.get('value')<<Js(24.0))>>Js(24.0)))
                PyJs_setUint8_1165_._set_name('setUint8')
                var.get('redefineAll')(var.get('$DataView').get(var.get('PROTOTYPE')), Js({'setInt8':PyJs_setInt8_1164_,'setUint8':PyJs_setUint8_1165_}), Js(True))
        var.get('setToStringTag')(var.get('$ArrayBuffer'), var.get('ARRAY_BUFFER'))
        var.get('setToStringTag')(var.get('$DataView'), var.get('DATA_VIEW'))
        var.get('hide')(var.get('$DataView').get(var.get('PROTOTYPE')), var.get('$typed').get('VIEW'), Js(True))
        var.get('exports').put(var.get('ARRAY_BUFFER'), var.get('$ArrayBuffer'))
        var.get('exports').put(var.get('DATA_VIEW'), var.get('$DataView'))
    PyJs_anonymous_1139_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1166_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['VIEW', 'TypedArrayConstructors', 'TYPED', 'Typed', 'module', 'global', 'i', 'exports', 'ABV', 'CONSTR', 'l', 'require', 'hide', 'uid'])
        var.put('global', var.get('require')(Js('./_global')))
        var.put('hide', var.get('require')(Js('./_hide')))
        var.put('uid', var.get('require')(Js('./_uid')))
        var.put('TYPED', var.get('uid')(Js('typed_array')))
        var.put('VIEW', var.get('uid')(Js('view')))
        var.put('ABV', (var.get('global').get('ArrayBuffer') and var.get('global').get('DataView')).neg().neg())
        var.put('CONSTR', var.get('ABV'))
        var.put('i', Js(0.0))
        var.put('l', Js(9.0))
        pass
        var.put('TypedArrayConstructors', Js('Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array').callprop('split', Js(',')))
        while (var.get('i')<var.get('l')):
            if var.put('Typed', var.get('global').get(var.get('TypedArrayConstructors').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))):
                var.get('hide')(var.get('Typed').get('prototype'), var.get('TYPED'), Js(True))
                var.get('hide')(var.get('Typed').get('prototype'), var.get('VIEW'), Js(True))
            else:
                var.put('CONSTR', Js(False))
        var.get('module').put('exports', Js({'ABV':var.get('ABV'),'CONSTR':var.get('CONSTR'),'TYPED':var.get('TYPED'),'VIEW':var.get('VIEW')}))
    PyJs_anonymous_1166_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1167_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'px', 'exports', 'id', 'require'])
        var.put('id', Js(0.0))
        var.put('px', var.get('Math').callprop('random'))
        @Js
        def PyJs_anonymous_1168_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
            var.registers(['key'])
            return Js('Symbol(').callprop('concat', (Js('') if PyJsStrictEq(var.get('key'),var.get('undefined')) else var.get('key')), Js(')_'), (var.put('id',Js(var.get('id').to_number())+Js(1))+var.get('px')).callprop('toString', Js(36.0)))
        PyJs_anonymous_1168_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1168_)
    PyJs_anonymous_1167_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1169_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'global', 'exports', 'navigator', 'require'])
        var.put('global', var.get('require')(Js('./_global')))
        var.put('navigator', var.get('global').get('navigator'))
        var.get('module').put('exports', ((var.get('navigator') and var.get('navigator').get('userAgent')) or Js('')))
    PyJs_anonymous_1169_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1170_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'isObject', 'module', 'exports'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        @Js
        def PyJs_anonymous_1171_(it, TYPE, this, arguments, var=var):
            var = Scope({'it':it, 'TYPE':TYPE, 'this':this, 'arguments':arguments}, var)
            var.registers(['TYPE', 'it'])
            if (var.get('isObject')(var.get('it')).neg() or PyJsStrictNeq(var.get('it').get('_t'),var.get('TYPE'))):
                PyJsTempException = JsToPyException(var.get('TypeError')(((Js('Incompatible receiver, ')+var.get('TYPE'))+Js(' required!'))))
                raise PyJsTempException
            return var.get('it')
        PyJs_anonymous_1171_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1171_)
    PyJs_anonymous_1170_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1172_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'global', 'LIBRARY', 'wksExt', 'exports', 'core', 'require', 'defineProperty'])
        var.put('global', var.get('require')(Js('./_global')))
        var.put('core', var.get('require')(Js('./_core')))
        var.put('LIBRARY', var.get('require')(Js('./_library')))
        var.put('wksExt', var.get('require')(Js('./_wks-ext')))
        var.put('defineProperty', var.get('require')(Js('./_object-dp')).get('f'))
        @Js
        def PyJs_anonymous_1173_(name, this, arguments, var=var):
            var = Scope({'name':name, 'this':this, 'arguments':arguments}, var)
            var.registers(['$Symbol', 'name'])
            var.put('$Symbol', (var.get('core').get('Symbol') or var.get('core').put('Symbol', (Js({}) if var.get('LIBRARY') else (var.get('global').get('Symbol') or Js({}))))))
            if ((var.get('name').callprop('charAt', Js(0.0))!=Js('_')) and var.get('$Symbol').contains(var.get('name')).neg()):
                var.get('defineProperty')(var.get('$Symbol'), var.get('name'), Js({'value':var.get('wksExt').callprop('f', var.get('name'))}))
        PyJs_anonymous_1173_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1173_)
    PyJs_anonymous_1172_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1174_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('exports').put('f', var.get('require')(Js('./_wks')))
    PyJs_anonymous_1174_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1175_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['store', 'module', '$exports', 'exports', 'USE_SYMBOL', 'require', '_Symbol', 'uid'])
        var.put('store', var.get('require')(Js('./_shared'))(Js('wks')))
        var.put('uid', var.get('require')(Js('./_uid')))
        var.put('_Symbol', var.get('require')(Js('./_global')).get('Symbol'))
        var.put('USE_SYMBOL', (var.get('_Symbol',throw=False).typeof()==Js('function')))
        @Js
        def PyJs_anonymous_1176_(name, this, arguments, var=var):
            var = Scope({'name':name, 'this':this, 'arguments':arguments}, var)
            var.registers(['name'])
            return (var.get('store').get(var.get('name')) or var.get('store').put(var.get('name'), ((var.get('USE_SYMBOL') and var.get('_Symbol').get(var.get('name'))) or (var.get('_Symbol') if var.get('USE_SYMBOL') else var.get('uid'))((Js('Symbol.')+var.get('name'))))))
        PyJs_anonymous_1176_._set_name('anonymous')
        var.put('$exports', var.get('module').put('exports', PyJs_anonymous_1176_))
        var.get('$exports').put('store', var.get('store'))
    PyJs_anonymous_1175_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1177_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['ITERATOR', 'module', 'classof', 'exports', 'require', 'Iterators'])
        var.put('classof', var.get('require')(Js('./_classof')))
        var.put('ITERATOR', var.get('require')(Js('./_wks'))(Js('iterator')))
        var.put('Iterators', var.get('require')(Js('./_iterators')))
        @Js
        def PyJs_anonymous_1178_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            if (var.get('it')!=var.get('undefined')):
                return ((var.get('it').get(var.get('ITERATOR')) or var.get('it').get('@@iterator')) or var.get('Iterators').get(var.get('classof')(var.get('it'))))
        PyJs_anonymous_1178_._set_name('anonymous')
        var.get('module').put('exports', var.get('require')(Js('./_core')).put('getIteratorMethod', PyJs_anonymous_1178_))
    PyJs_anonymous_1177_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1179_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$re', '$export', 'exports', 'require'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$re', var.get('require')(Js('./_replacer'))(JsRegExp('/[\\\\^$*+?.()|[\\]{}]/g'), Js('\\$&')))
        @Js
        def PyJs_escape_1180_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'escape':PyJs_escape_1180_}, var)
            var.registers(['it'])
            return var.get('$re')(var.get('it'))
        PyJs_escape_1180_._set_name('escape')
        var.get('$export')(var.get('$export').get('S'), Js('RegExp'), Js({'escape':PyJs_escape_1180_}))
    PyJs_anonymous_1179_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1181_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('P'), Js('Array'), Js({'copyWithin':var.get('require')(Js('./_array-copy-within'))}))
        var.get('require')(Js('./_add-to-unscopables'))(Js('copyWithin'))
    PyJs_anonymous_1181_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1182_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', '$every', 'require'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$every', var.get('require')(Js('./_array-methods'))(Js(4.0)))
        @Js
        def PyJs_every_1183_(callbackfn, this, arguments, var=var):
            var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'every':PyJs_every_1183_}, var)
            var.registers(['callbackfn'])
            return var.get('$every')(var.get(u"this"), var.get('callbackfn'), var.get('arguments').get('1'))
        PyJs_every_1183_._set_name('every')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('require')(Js('./_strict-method'))(Js([]).get('every'), Js(True)).neg())), Js('Array'), Js({'every':PyJs_every_1183_}))
    PyJs_anonymous_1182_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1184_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('P'), Js('Array'), Js({'fill':var.get('require')(Js('./_array-fill'))}))
        var.get('require')(Js('./_add-to-unscopables'))(Js('fill'))
    PyJs_anonymous_1184_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1185_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', '$filter', 'require'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$filter', var.get('require')(Js('./_array-methods'))(Js(2.0)))
        @Js
        def PyJs_filter_1186_(callbackfn, this, arguments, var=var):
            var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'filter':PyJs_filter_1186_}, var)
            var.registers(['callbackfn'])
            return var.get('$filter')(var.get(u"this"), var.get('callbackfn'), var.get('arguments').get('1'))
        PyJs_filter_1186_._set_name('filter')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('require')(Js('./_strict-method'))(Js([]).get('filter'), Js(True)).neg())), Js('Array'), Js({'filter':PyJs_filter_1186_}))
    PyJs_anonymous_1185_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1187_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', 'forced', '$find', 'require', 'KEY'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$find', var.get('require')(Js('./_array-methods'))(Js(6.0)))
        var.put('KEY', Js('findIndex'))
        var.put('forced', Js(True))
        if Js([]).contains(var.get('KEY')):
            @Js
            def PyJs_anonymous_1188_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.put('forced', Js(False))
            PyJs_anonymous_1188_._set_name('anonymous')
            var.get('Array')(Js(1.0)).callprop(var.get('KEY'), PyJs_anonymous_1188_)
        @Js
        def PyJs_findIndex_1189_(callbackfn, this, arguments, var=var):
            var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'findIndex':PyJs_findIndex_1189_}, var)
            var.registers(['callbackfn'])
            return var.get('$find')(var.get(u"this"), var.get('callbackfn'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
        PyJs_findIndex_1189_._set_name('findIndex')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('forced'))), Js('Array'), Js({'findIndex':PyJs_findIndex_1189_}))
        var.get('require')(Js('./_add-to-unscopables'))(var.get('KEY'))
    PyJs_anonymous_1187_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1190_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', 'forced', '$find', 'require', 'KEY'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$find', var.get('require')(Js('./_array-methods'))(Js(5.0)))
        var.put('KEY', Js('find'))
        var.put('forced', Js(True))
        if Js([]).contains(var.get('KEY')):
            @Js
            def PyJs_anonymous_1191_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.put('forced', Js(False))
            PyJs_anonymous_1191_._set_name('anonymous')
            var.get('Array')(Js(1.0)).callprop(var.get('KEY'), PyJs_anonymous_1191_)
        @Js
        def PyJs_find_1192_(callbackfn, this, arguments, var=var):
            var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'find':PyJs_find_1192_}, var)
            var.registers(['callbackfn'])
            return var.get('$find')(var.get(u"this"), var.get('callbackfn'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
        PyJs_find_1192_._set_name('find')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('forced'))), Js('Array'), Js({'find':PyJs_find_1192_}))
        var.get('require')(Js('./_add-to-unscopables'))(var.get('KEY'))
    PyJs_anonymous_1190_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1193_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', '$forEach', 'require', 'STRICT'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$forEach', var.get('require')(Js('./_array-methods'))(Js(0.0)))
        var.put('STRICT', var.get('require')(Js('./_strict-method'))(Js([]).get('forEach'), Js(True)))
        @Js
        def PyJs_forEach_1194_(callbackfn, this, arguments, var=var):
            var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'forEach':PyJs_forEach_1194_}, var)
            var.registers(['callbackfn'])
            return var.get('$forEach')(var.get(u"this"), var.get('callbackfn'), var.get('arguments').get('1'))
        PyJs_forEach_1194_._set_name('forEach')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('STRICT').neg())), Js('Array'), Js({'forEach':PyJs_forEach_1194_}))
    PyJs_anonymous_1193_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1195_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['toObject', 'module', '$export', 'exports', 'call', 'createProperty', 'isArrayIter', 'getIterFn', 'require', 'ctx', 'toLength'])
        Js('use strict')
        var.put('ctx', var.get('require')(Js('./_ctx')))
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('call', var.get('require')(Js('./_iter-call')))
        var.put('isArrayIter', var.get('require')(Js('./_is-array-iter')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('createProperty', var.get('require')(Js('./_create-property')))
        var.put('getIterFn', var.get('require')(Js('./core.get-iterator-method')))
        @Js
        def PyJs_anonymous_1196_(iter, this, arguments, var=var):
            var = Scope({'iter':iter, 'this':this, 'arguments':arguments}, var)
            var.registers(['iter'])
            var.get('Array').callprop('from', var.get('iter'))
        PyJs_anonymous_1196_._set_name('anonymous')
        @Js
        def PyJs_InlineNonPyName_1197_(arrayLike, this, arguments, var=var):
            var = Scope({'arrayLike':arrayLike, 'this':this, 'arguments':arguments, 'from':PyJs_InlineNonPyName_1197_}, var)
            var.registers(['iterator', 'O', 'mapping', 'step', 'aLen', 'length', 'arrayLike', 'C', 'result', 'mapfn', 'iterFn', 'index'])
            var.put('O', var.get('toObject')(var.get('arrayLike')))
            var.put('C', (var.get(u"this") if (var.get(u"this",throw=False).typeof()==Js('function')) else var.get('Array')))
            var.put('aLen', var.get('arguments').get('length'))
            var.put('mapfn', (var.get('arguments').get('1') if (var.get('aLen')>Js(1.0)) else var.get('undefined')))
            var.put('mapping', PyJsStrictNeq(var.get('mapfn'),var.get('undefined')))
            var.put('index', Js(0.0))
            var.put('iterFn', var.get('getIterFn')(var.get('O')))
            pass
            if var.get('mapping'):
                var.put('mapfn', var.get('ctx')(var.get('mapfn'), (var.get('arguments').get('2') if (var.get('aLen')>Js(2.0)) else var.get('undefined')), Js(2.0)))
            if ((var.get('iterFn')!=var.get('undefined')) and ((var.get('C')==var.get('Array')) and var.get('isArrayIter')(var.get('iterFn'))).neg()):
                #for JS loop
                PyJsComma(var.put('iterator', var.get('iterFn').callprop('call', var.get('O'))),var.put('result', var.get('C').create()))
                while var.put('step', var.get('iterator').callprop('next')).get('done').neg():
                    try:
                        var.get('createProperty')(var.get('result'), var.get('index'), (var.get('call')(var.get('iterator'), var.get('mapfn'), Js([var.get('step').get('value'), var.get('index')]), Js(True)) if var.get('mapping') else var.get('step').get('value')))
                    finally:
                            (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))
            else:
                var.put('length', var.get('toLength')(var.get('O').get('length')))
                #for JS loop
                var.put('result', var.get('C').create(var.get('length')))
                while (var.get('length')>var.get('index')):
                    try:
                        var.get('createProperty')(var.get('result'), var.get('index'), (var.get('mapfn')(var.get('O').get(var.get('index')), var.get('index')) if var.get('mapping') else var.get('O').get(var.get('index'))))
                    finally:
                            (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))
            var.get('result').put('length', var.get('index'))
            return var.get('result')
        PyJs_InlineNonPyName_1197_._set_name('from')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('require')(Js('./_iter-detect'))(PyJs_anonymous_1196_).neg())), Js('Array'), Js({'from':PyJs_InlineNonPyName_1197_}))
    PyJs_anonymous_1195_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1198_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', 'NEGATIVE_ZERO', 'require', '$indexOf', '$native'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$indexOf', var.get('require')(Js('./_array-includes'))(Js(False)))
        var.put('$native', Js([]).get('indexOf'))
        var.put('NEGATIVE_ZERO', (var.get('$native').neg().neg() and ((Js(1.0)/Js([Js(1.0)]).callprop('indexOf', Js(1.0), (-Js(0.0))))<Js(0.0))))
        @Js
        def PyJs_indexOf_1199_(searchElement, this, arguments, var=var):
            var = Scope({'searchElement':searchElement, 'this':this, 'arguments':arguments, 'indexOf':PyJs_indexOf_1199_}, var)
            var.registers(['searchElement'])
            return ((var.get('$native').callprop('apply', var.get(u"this"), var.get('arguments')) or Js(0.0)) if var.get('NEGATIVE_ZERO') else var.get('$indexOf')(var.get(u"this"), var.get('searchElement'), var.get('arguments').get('1')))
        PyJs_indexOf_1199_._set_name('indexOf')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*(var.get('NEGATIVE_ZERO') or var.get('require')(Js('./_strict-method'))(var.get('$native')).neg()))), Js('Array'), Js({'indexOf':PyJs_indexOf_1199_}))
    PyJs_anonymous_1198_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1200_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Array'), Js({'isArray':var.get('require')(Js('./_is-array'))}))
    PyJs_anonymous_1200_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1201_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'addToUnscopables', 'toIObject', 'require', 'step', 'Iterators'])
        Js('use strict')
        var.put('addToUnscopables', var.get('require')(Js('./_add-to-unscopables')))
        var.put('step', var.get('require')(Js('./_iter-step')))
        var.put('Iterators', var.get('require')(Js('./_iterators')))
        var.put('toIObject', var.get('require')(Js('./_to-iobject')))
        @Js
        def PyJs_anonymous_1202_(iterated, kind, this, arguments, var=var):
            var = Scope({'iterated':iterated, 'kind':kind, 'this':this, 'arguments':arguments}, var)
            var.registers(['kind', 'iterated'])
            var.get(u"this").put('_t', var.get('toIObject')(var.get('iterated')))
            var.get(u"this").put('_i', Js(0.0))
            var.get(u"this").put('_k', var.get('kind'))
        PyJs_anonymous_1202_._set_name('anonymous')
        @Js
        def PyJs_anonymous_1203_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['O', 'index', 'kind'])
            var.put('O', var.get(u"this").get('_t'))
            var.put('kind', var.get(u"this").get('_k'))
            var.put('index', (var.get(u"this").put('_i',Js(var.get(u"this").get('_i').to_number())+Js(1))-Js(1)))
            if (var.get('O').neg() or (var.get('index')>=var.get('O').get('length'))):
                var.get(u"this").put('_t', var.get('undefined'))
                return var.get('step')(Js(1.0))
            if (var.get('kind')==Js('keys')):
                return var.get('step')(Js(0.0), var.get('index'))
            if (var.get('kind')==Js('values')):
                return var.get('step')(Js(0.0), var.get('O').get(var.get('index')))
            return var.get('step')(Js(0.0), Js([var.get('index'), var.get('O').get(var.get('index'))]))
        PyJs_anonymous_1203_._set_name('anonymous')
        var.get('module').put('exports', var.get('require')(Js('./_iter-define'))(var.get('Array'), Js('Array'), PyJs_anonymous_1202_, PyJs_anonymous_1203_, Js('values')))
        var.get('Iterators').put('Arguments', var.get('Iterators').get('Array'))
        var.get('addToUnscopables')(Js('keys'))
        var.get('addToUnscopables')(Js('values'))
        var.get('addToUnscopables')(Js('entries'))
    PyJs_anonymous_1201_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1204_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', 'arrayJoin', 'toIObject', 'require'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('toIObject', var.get('require')(Js('./_to-iobject')))
        var.put('arrayJoin', Js([]).get('join'))
        @Js
        def PyJs_join_1205_(separator, this, arguments, var=var):
            var = Scope({'separator':separator, 'this':this, 'arguments':arguments, 'join':PyJs_join_1205_}, var)
            var.registers(['separator'])
            return var.get('arrayJoin').callprop('call', var.get('toIObject')(var.get(u"this")), (Js(',') if PyJsStrictEq(var.get('separator'),var.get('undefined')) else var.get('separator')))
        PyJs_join_1205_._set_name('join')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*((var.get('require')(Js('./_iobject'))!=var.get('Object')) or var.get('require')(Js('./_strict-method'))(var.get('arrayJoin')).neg()))), Js('Array'), Js({'join':PyJs_join_1205_}))
    PyJs_anonymous_1204_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1206_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', 'toInteger', 'NEGATIVE_ZERO', 'toIObject', 'require', 'toLength', '$native'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('toIObject', var.get('require')(Js('./_to-iobject')))
        var.put('toInteger', var.get('require')(Js('./_to-integer')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('$native', Js([]).get('lastIndexOf'))
        var.put('NEGATIVE_ZERO', (var.get('$native').neg().neg() and ((Js(1.0)/Js([Js(1.0)]).callprop('lastIndexOf', Js(1.0), (-Js(0.0))))<Js(0.0))))
        @Js
        def PyJs_lastIndexOf_1207_(searchElement, this, arguments, var=var):
            var = Scope({'searchElement':searchElement, 'this':this, 'arguments':arguments, 'lastIndexOf':PyJs_lastIndexOf_1207_}, var)
            var.registers(['O', 'searchElement', 'length', 'index'])
            if var.get('NEGATIVE_ZERO'):
                return (var.get('$native').callprop('apply', var.get(u"this"), var.get('arguments')) or Js(0.0))
            var.put('O', var.get('toIObject')(var.get(u"this")))
            var.put('length', var.get('toLength')(var.get('O').get('length')))
            var.put('index', (var.get('length')-Js(1.0)))
            if (var.get('arguments').get('length')>Js(1.0)):
                var.put('index', var.get('Math').callprop('min', var.get('index'), var.get('toInteger')(var.get('arguments').get('1'))))
            if (var.get('index')<Js(0.0)):
                var.put('index', (var.get('length')+var.get('index')))
            #for JS loop
            
            while (var.get('index')>=Js(0.0)):
                try:
                    if var.get('O').contains(var.get('index')):
                        if PyJsStrictEq(var.get('O').get(var.get('index')),var.get('searchElement')):
                            return (var.get('index') or Js(0.0))
                finally:
                        (var.put('index',Js(var.get('index').to_number())-Js(1))+Js(1))
            return (-Js(1.0))
        PyJs_lastIndexOf_1207_._set_name('lastIndexOf')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*(var.get('NEGATIVE_ZERO') or var.get('require')(Js('./_strict-method'))(var.get('$native')).neg()))), Js('Array'), Js({'lastIndexOf':PyJs_lastIndexOf_1207_}))
    PyJs_anonymous_1206_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1208_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', '$map', 'require'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$map', var.get('require')(Js('./_array-methods'))(Js(1.0)))
        @Js
        def PyJs_map_1209_(callbackfn, this, arguments, var=var):
            var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'map':PyJs_map_1209_}, var)
            var.registers(['callbackfn'])
            return var.get('$map')(var.get(u"this"), var.get('callbackfn'), var.get('arguments').get('1'))
        PyJs_map_1209_._set_name('map')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('require')(Js('./_strict-method'))(Js([]).get('map'), Js(True)).neg())), Js('Array'), Js({'map':PyJs_map_1209_}))
    PyJs_anonymous_1208_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1210_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', 'createProperty', 'require'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('createProperty', var.get('require')(Js('./_create-property')))
        @Js
        def PyJs_anonymous_1211_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['F'])
            @Js
            def PyJsHoisted_F_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                pass
            PyJsHoisted_F_.func_name = 'F'
            var.put('F', PyJsHoisted_F_)
            pass
            return var.get('Array').get('of').callprop('call', var.get('F')).instanceof(var.get('F')).neg()
        PyJs_anonymous_1211_._set_name('anonymous')
        @Js
        def PyJs_of_1212_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'of':PyJs_of_1212_}, var)
            var.registers(['result', 'aLen', 'index'])
            var.put('index', Js(0.0))
            var.put('aLen', var.get('arguments').get('length'))
            var.put('result', (var.get(u"this") if (var.get(u"this",throw=False).typeof()==Js('function')) else var.get('Array')).create(var.get('aLen')))
            while (var.get('aLen')>var.get('index')):
                var.get('createProperty')(var.get('result'), var.get('index'), var.get('arguments').get((var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))))
            var.get('result').put('length', var.get('aLen'))
            return var.get('result')
        PyJs_of_1212_._set_name('of')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('require')(Js('./_fails'))(PyJs_anonymous_1211_))), Js('Array'), Js({'of':PyJs_of_1212_}))
    PyJs_anonymous_1210_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1213_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', '$reduce', 'require'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$reduce', var.get('require')(Js('./_array-reduce')))
        @Js
        def PyJs_reduceRight_1214_(callbackfn, this, arguments, var=var):
            var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'reduceRight':PyJs_reduceRight_1214_}, var)
            var.registers(['callbackfn'])
            return var.get('$reduce')(var.get(u"this"), var.get('callbackfn'), var.get('arguments').get('length'), var.get('arguments').get('1'), Js(True))
        PyJs_reduceRight_1214_._set_name('reduceRight')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('require')(Js('./_strict-method'))(Js([]).get('reduceRight'), Js(True)).neg())), Js('Array'), Js({'reduceRight':PyJs_reduceRight_1214_}))
    PyJs_anonymous_1213_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1215_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', '$reduce', 'require'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$reduce', var.get('require')(Js('./_array-reduce')))
        @Js
        def PyJs_reduce_1216_(callbackfn, this, arguments, var=var):
            var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'reduce':PyJs_reduce_1216_}, var)
            var.registers(['callbackfn'])
            return var.get('$reduce')(var.get(u"this"), var.get('callbackfn'), var.get('arguments').get('length'), var.get('arguments').get('1'), Js(False))
        PyJs_reduce_1216_._set_name('reduce')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('require')(Js('./_strict-method'))(Js([]).get('reduce'), Js(True)).neg())), Js('Array'), Js({'reduce':PyJs_reduce_1216_}))
    PyJs_anonymous_1215_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1217_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', 'html', 'cof', 'toAbsoluteIndex', 'arraySlice', 'require', 'toLength'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('html', var.get('require')(Js('./_html')))
        var.put('cof', var.get('require')(Js('./_cof')))
        var.put('toAbsoluteIndex', var.get('require')(Js('./_to-absolute-index')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('arraySlice', Js([]).get('slice'))
        @Js
        def PyJs_anonymous_1218_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            if var.get('html'):
                var.get('arraySlice').callprop('call', var.get('html'))
        PyJs_anonymous_1218_._set_name('anonymous')
        @Js
        def PyJs_slice_1219_(begin, end, this, arguments, var=var):
            var = Scope({'begin':begin, 'end':end, 'this':this, 'arguments':arguments, 'slice':PyJs_slice_1219_}, var)
            var.registers(['len', 'cloned', 'i', 'size', 'start', 'end', 'klass', 'begin', 'upTo'])
            var.put('len', var.get('toLength')(var.get(u"this").get('length')))
            var.put('klass', var.get('cof')(var.get(u"this")))
            var.put('end', (var.get('len') if PyJsStrictEq(var.get('end'),var.get('undefined')) else var.get('end')))
            if (var.get('klass')==Js('Array')):
                return var.get('arraySlice').callprop('call', var.get(u"this"), var.get('begin'), var.get('end'))
            var.put('start', var.get('toAbsoluteIndex')(var.get('begin'), var.get('len')))
            var.put('upTo', var.get('toAbsoluteIndex')(var.get('end'), var.get('len')))
            var.put('size', var.get('toLength')((var.get('upTo')-var.get('start'))))
            var.put('cloned', var.get('Array').create(var.get('size')))
            var.put('i', Js(0.0))
            #for JS loop
            
            while (var.get('i')<var.get('size')):
                try:
                    var.get('cloned').put(var.get('i'), (var.get(u"this").callprop('charAt', (var.get('start')+var.get('i'))) if (var.get('klass')==Js('String')) else var.get(u"this").get((var.get('start')+var.get('i')))))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('cloned')
        PyJs_slice_1219_._set_name('slice')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('require')(Js('./_fails'))(PyJs_anonymous_1218_))), Js('Array'), Js({'slice':PyJs_slice_1219_}))
    PyJs_anonymous_1217_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1220_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', '$some', 'require'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$some', var.get('require')(Js('./_array-methods'))(Js(3.0)))
        @Js
        def PyJs_some_1221_(callbackfn, this, arguments, var=var):
            var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'some':PyJs_some_1221_}, var)
            var.registers(['callbackfn'])
            return var.get('$some')(var.get(u"this"), var.get('callbackfn'), var.get('arguments').get('1'))
        PyJs_some_1221_._set_name('some')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('require')(Js('./_strict-method'))(Js([]).get('some'), Js(True)).neg())), Js('Array'), Js({'some':PyJs_some_1221_}))
    PyJs_anonymous_1220_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1222_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['toObject', 'module', 'fails', '$export', 'exports', 'aFunction', '$sort', 'test', 'require'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('fails', var.get('require')(Js('./_fails')))
        var.put('$sort', Js([]).get('sort'))
        var.put('test', Js([Js(1.0), Js(2.0), Js(3.0)]))
        @Js
        def PyJs_anonymous_1223_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('test').callprop('sort', var.get('undefined'))
        PyJs_anonymous_1223_._set_name('anonymous')
        @Js
        def PyJs_anonymous_1224_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('test').callprop('sort', var.get(u"null"))
        PyJs_anonymous_1224_._set_name('anonymous')
        @Js
        def PyJs_sort_1225_(comparefn, this, arguments, var=var):
            var = Scope({'comparefn':comparefn, 'this':this, 'arguments':arguments, 'sort':PyJs_sort_1225_}, var)
            var.registers(['comparefn'])
            return (var.get('$sort').callprop('call', var.get('toObject')(var.get(u"this"))) if PyJsStrictEq(var.get('comparefn'),var.get('undefined')) else var.get('$sort').callprop('call', var.get('toObject')(var.get(u"this")), var.get('aFunction')(var.get('comparefn'))))
        PyJs_sort_1225_._set_name('sort')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*((var.get('fails')(PyJs_anonymous_1223_) or var.get('fails')(PyJs_anonymous_1224_).neg()) or var.get('require')(Js('./_strict-method'))(var.get('$sort')).neg()))), Js('Array'), Js({'sort':PyJs_sort_1225_}))
    PyJs_anonymous_1222_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1226_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('require')(Js('./_set-species'))(Js('Array'))
    PyJs_anonymous_1226_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1227_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        @Js
        def PyJs_now_1228_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'now':PyJs_now_1228_}, var)
            var.registers([])
            return var.get('Date').create().callprop('getTime')
        PyJs_now_1228_._set_name('now')
        var.get('$export')(var.get('$export').get('S'), Js('Date'), Js({'now':PyJs_now_1228_}))
    PyJs_anonymous_1227_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1229_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', 'toISOString', 'require'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('toISOString', var.get('require')(Js('./_date-to-iso-string')))
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*PyJsStrictNeq(var.get('Date').get('prototype').get('toISOString'),var.get('toISOString')))), Js('Date'), Js({'toISOString':var.get('toISOString')}))
    PyJs_anonymous_1229_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1230_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['toObject', 'module', '$export', 'toPrimitive', 'exports', 'require'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('toPrimitive', var.get('require')(Js('./_to-primitive')))
        @Js
        def PyJs_anonymous_1231_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_toISOString_1232_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'toISOString':PyJs_toISOString_1232_}, var)
                var.registers([])
                return Js(1.0)
            PyJs_toISOString_1232_._set_name('toISOString')
            return (PyJsStrictNeq(var.get('Date').create(var.get('NaN')).callprop('toJSON'),var.get(u"null")) or PyJsStrictNeq(var.get('Date').get('prototype').get('toJSON').callprop('call', Js({'toISOString':PyJs_toISOString_1232_})),Js(1.0)))
        PyJs_anonymous_1231_._set_name('anonymous')
        @Js
        def PyJs_toJSON_1233_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments, 'toJSON':PyJs_toJSON_1233_}, var)
            var.registers(['O', 'key', 'pv'])
            var.put('O', var.get('toObject')(var.get(u"this")))
            var.put('pv', var.get('toPrimitive')(var.get('O')))
            return (var.get(u"null") if ((var.get('pv',throw=False).typeof()==Js('number')) and var.get('isFinite')(var.get('pv')).neg()) else var.get('O').callprop('toISOString'))
        PyJs_toJSON_1233_._set_name('toJSON')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('require')(Js('./_fails'))(PyJs_anonymous_1231_))), Js('Date'), Js({'toJSON':PyJs_toJSON_1233_}))
    PyJs_anonymous_1230_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1234_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'TO_PRIMITIVE', 'exports', 'proto', 'require'])
        var.put('TO_PRIMITIVE', var.get('require')(Js('./_wks'))(Js('toPrimitive')))
        var.put('proto', var.get('Date').get('prototype'))
        if var.get('proto').contains(var.get('TO_PRIMITIVE')).neg():
            var.get('require')(Js('./_hide'))(var.get('proto'), var.get('TO_PRIMITIVE'), var.get('require')(Js('./_date-to-primitive')))
    PyJs_anonymous_1234_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1235_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'TO_STRING', 'exports', 'getTime', '$toString', 'DateProto', 'require', 'INVALID_DATE'])
        var.put('DateProto', var.get('Date').get('prototype'))
        var.put('INVALID_DATE', Js('Invalid Date'))
        var.put('TO_STRING', Js('toString'))
        var.put('$toString', var.get('DateProto').get(var.get('TO_STRING')))
        var.put('getTime', var.get('DateProto').get('getTime'))
        if ((var.get('Date').create(var.get('NaN'))+Js(''))!=var.get('INVALID_DATE')):
            @Js
            def PyJs_toString_1236_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'toString':PyJs_toString_1236_}, var)
                var.registers(['value'])
                var.put('value', var.get('getTime').callprop('call', var.get(u"this")))
                return (var.get('$toString').callprop('call', var.get(u"this")) if PyJsStrictEq(var.get('value'),var.get('value')) else var.get('INVALID_DATE'))
            PyJs_toString_1236_._set_name('toString')
            var.get('require')(Js('./_redefine'))(var.get('DateProto'), var.get('TO_STRING'), PyJs_toString_1236_)
    PyJs_anonymous_1235_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1237_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('P'), Js('Function'), Js({'bind':var.get('require')(Js('./_bind'))}))
    PyJs_anonymous_1237_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1238_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'FunctionProto', 'getPrototypeOf', 'HAS_INSTANCE', 'exports', 'require', 'isObject'])
        Js('use strict')
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('getPrototypeOf', var.get('require')(Js('./_object-gpo')))
        var.put('HAS_INSTANCE', var.get('require')(Js('./_wks'))(Js('hasInstance')))
        var.put('FunctionProto', var.get('Function').get('prototype'))
        if var.get('FunctionProto').contains(var.get('HAS_INSTANCE')).neg():
            @Js
            def PyJs_value_1239_(O, this, arguments, var=var):
                var = Scope({'O':O, 'this':this, 'arguments':arguments, 'value':PyJs_value_1239_}, var)
                var.registers(['O'])
                if ((var.get(u"this",throw=False).typeof()!=Js('function')) or var.get('isObject')(var.get('O')).neg()):
                    return Js(False)
                if var.get('isObject')(var.get(u"this").get('prototype')).neg():
                    return var.get('O').instanceof(var.get(u"this"))
                while var.put('O', var.get('getPrototypeOf')(var.get('O'))):
                    if PyJsStrictEq(var.get(u"this").get('prototype'),var.get('O')):
                        return Js(True)
                return Js(False)
            PyJs_value_1239_._set_name('value')
            var.get('require')(Js('./_object-dp')).callprop('f', var.get('FunctionProto'), var.get('HAS_INSTANCE'), Js({'value':PyJs_value_1239_}))
    PyJs_anonymous_1238_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1240_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'FProto', 'exports', 'NAME', 'nameRE', 'require', 'dP'])
        var.put('dP', var.get('require')(Js('./_object-dp')).get('f'))
        var.put('FProto', var.get('Function').get('prototype'))
        var.put('nameRE', JsRegExp('/^\\s*function ([^ (]*)/'))
        var.put('NAME', Js('name'))
        @Js
        def PyJs_get_1241_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_1241_}, var)
            var.registers([])
            try:
                return (Js('')+var.get(u"this")).callprop('match', var.get('nameRE')).get('1')
            except PyJsException as PyJsTempException:
                PyJsHolder_65_68365608 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    return Js('')
                finally:
                    if PyJsHolder_65_68365608 is not None:
                        var.own['e'] = PyJsHolder_65_68365608
                    else:
                        del var.own['e']
                    del PyJsHolder_65_68365608
        PyJs_get_1241_._set_name('get')
        (var.get('FProto').contains(var.get('NAME')) or (var.get('require')(Js('./_descriptors')) and var.get('dP')(var.get('FProto'), var.get('NAME'), Js({'configurable':Js(True),'get':PyJs_get_1241_}))))
    PyJs_anonymous_1240_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1242_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'validate', 'MAP', 'require', 'strong'])
        Js('use strict')
        var.put('strong', var.get('require')(Js('./_collection-strong')))
        var.put('validate', var.get('require')(Js('./_validate-collection')))
        var.put('MAP', Js('Map'))
        @Js
        def PyJs_anonymous_1243_(get, this, arguments, var=var):
            var = Scope({'get':get, 'this':this, 'arguments':arguments}, var)
            var.registers(['get'])
            @Js
            def PyJs_Map_1244_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'Map':PyJs_Map_1244_}, var)
                var.registers([])
                return var.get('get')(var.get(u"this"), (var.get('arguments').get('0') if (var.get('arguments').get('length')>Js(0.0)) else var.get('undefined')))
            PyJs_Map_1244_._set_name('Map')
            return PyJs_Map_1244_
        PyJs_anonymous_1243_._set_name('anonymous')
        @Js
        def PyJs_get_1245_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments, 'get':PyJs_get_1245_}, var)
            var.registers(['entry', 'key'])
            var.put('entry', var.get('strong').callprop('getEntry', var.get('validate')(var.get(u"this"), var.get('MAP')), var.get('key')))
            return (var.get('entry') and var.get('entry').get('v'))
        PyJs_get_1245_._set_name('get')
        @Js
        def PyJs_set_1246_(key, value, this, arguments, var=var):
            var = Scope({'key':key, 'value':value, 'this':this, 'arguments':arguments, 'set':PyJs_set_1246_}, var)
            var.registers(['key', 'value'])
            return var.get('strong').callprop('def', var.get('validate')(var.get(u"this"), var.get('MAP')), (Js(0.0) if PyJsStrictEq(var.get('key'),Js(0.0)) else var.get('key')), var.get('value'))
        PyJs_set_1246_._set_name('set')
        var.get('module').put('exports', var.get('require')(Js('./_collection'))(var.get('MAP'), PyJs_anonymous_1243_, Js({'get':PyJs_get_1245_,'set':PyJs_set_1246_}), var.get('strong'), Js(True)))
    PyJs_anonymous_1242_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1247_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'log1p', '$export', 'sqrt', '$acosh', 'exports', 'require'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('log1p', var.get('require')(Js('./_math-log1p')))
        var.put('sqrt', var.get('Math').get('sqrt'))
        var.put('$acosh', var.get('Math').get('acosh'))
        @Js
        def PyJs_acosh_1248_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'acosh':PyJs_acosh_1248_}, var)
            var.registers(['x'])
            return (var.get('NaN') if (var.put('x', (+var.get('x')))<Js(1.0)) else ((var.get('Math').callprop('log', var.get('x'))+var.get('Math').get('LN2')) if (var.get('x')>Js(94906265.62425156)) else var.get('log1p')(((var.get('x')-Js(1.0))+(var.get('sqrt')((var.get('x')-Js(1.0)))*var.get('sqrt')((var.get('x')+Js(1.0))))))))
        PyJs_acosh_1248_._set_name('acosh')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*((var.get('$acosh') and (var.get('Math').callprop('floor', var.get('$acosh')(var.get('Number').get('MAX_VALUE')))==Js(710.0))) and (var.get('$acosh')(var.get('Infinity'))==var.get('Infinity'))).neg())), Js('Math'), Js({'acosh':PyJs_acosh_1248_}))
    PyJs_anonymous_1247_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1249_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', '$asinh', 'asinh', 'require'])
        @Js
        def PyJsHoisted_asinh_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments}, var)
            var.registers(['x'])
            return (var.get('x') if (var.get('isFinite')(var.put('x', (+var.get('x')))).neg() or (var.get('x')==Js(0.0))) else ((-var.get('asinh')((-var.get('x')))) if (var.get('x')<Js(0.0)) else var.get('Math').callprop('log', (var.get('x')+var.get('Math').callprop('sqrt', ((var.get('x')*var.get('x'))+Js(1.0)))))))
        PyJsHoisted_asinh_.func_name = 'asinh'
        var.put('asinh', PyJsHoisted_asinh_)
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$asinh', var.get('Math').get('asinh'))
        pass
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*(var.get('$asinh') and ((Js(1.0)/var.get('$asinh')(Js(0.0)))>Js(0.0))).neg())), Js('Math'), Js({'asinh':var.get('asinh')}))
    PyJs_anonymous_1249_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1250_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', '$atanh', 'require'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$atanh', var.get('Math').get('atanh'))
        @Js
        def PyJs_atanh_1251_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'atanh':PyJs_atanh_1251_}, var)
            var.registers(['x'])
            return (var.get('x') if (var.put('x', (+var.get('x')))==Js(0.0)) else (var.get('Math').callprop('log', ((Js(1.0)+var.get('x'))/(Js(1.0)-var.get('x'))))/Js(2.0)))
        PyJs_atanh_1251_._set_name('atanh')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*(var.get('$atanh') and ((Js(1.0)/var.get('$atanh')((-Js(0.0))))<Js(0.0))).neg())), Js('Math'), Js({'atanh':PyJs_atanh_1251_}))
    PyJs_anonymous_1250_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1252_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', 'require', 'sign'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('sign', var.get('require')(Js('./_math-sign')))
        @Js
        def PyJs_cbrt_1253_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'cbrt':PyJs_cbrt_1253_}, var)
            var.registers(['x'])
            return (var.get('sign')(var.put('x', (+var.get('x'))))*var.get('Math').callprop('pow', var.get('Math').callprop('abs', var.get('x')), (Js(1.0)/Js(3.0))))
        PyJs_cbrt_1253_._set_name('cbrt')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'cbrt':PyJs_cbrt_1253_}))
    PyJs_anonymous_1252_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1254_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        @Js
        def PyJs_clz32_1255_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'clz32':PyJs_clz32_1255_}, var)
            var.registers(['x'])
            return ((Js(31.0)-var.get('Math').callprop('floor', (var.get('Math').callprop('log', (var.get('x')+Js(0.5)))*var.get('Math').get('LOG2E')))) if var.put('x', Js(0.0), '>>>') else Js(32.0))
        PyJs_clz32_1255_._set_name('clz32')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'clz32':PyJs_clz32_1255_}))
    PyJs_anonymous_1254_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1256_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', 'exp', 'require'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('exp', var.get('Math').get('exp'))
        @Js
        def PyJs_cosh_1257_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'cosh':PyJs_cosh_1257_}, var)
            var.registers(['x'])
            return ((var.get('exp')(var.put('x', (+var.get('x'))))+var.get('exp')((-var.get('x'))))/Js(2.0))
        PyJs_cosh_1257_._set_name('cosh')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'cosh':PyJs_cosh_1257_}))
    PyJs_anonymous_1256_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1258_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$expm1', '$export', 'exports', 'require'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$expm1', var.get('require')(Js('./_math-expm1')))
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*(var.get('$expm1')!=var.get('Math').get('expm1')))), Js('Math'), Js({'expm1':var.get('$expm1')}))
    PyJs_anonymous_1258_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1259_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'fround':var.get('require')(Js('./_math-fround'))}))
    PyJs_anonymous_1259_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1260_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', 'abs', 'require'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('abs', var.get('Math').get('abs'))
        @Js
        def PyJs_hypot_1261_(value1, value2, this, arguments, var=var):
            var = Scope({'value1':value1, 'value2':value2, 'this':this, 'arguments':arguments, 'hypot':PyJs_hypot_1261_}, var)
            var.registers(['value1', 'arg', 'i', 'aLen', 'sum', 'div', 'larg', 'value2'])
            var.put('sum', Js(0.0))
            var.put('i', Js(0.0))
            var.put('aLen', var.get('arguments').get('length'))
            var.put('larg', Js(0.0))
            pass
            while (var.get('i')<var.get('aLen')):
                var.put('arg', var.get('abs')(var.get('arguments').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)))))
                if (var.get('larg')<var.get('arg')):
                    var.put('div', (var.get('larg')/var.get('arg')))
                    var.put('sum', (((var.get('sum')*var.get('div'))*var.get('div'))+Js(1.0)))
                    var.put('larg', var.get('arg'))
                else:
                    if (var.get('arg')>Js(0.0)):
                        var.put('div', (var.get('arg')/var.get('larg')))
                        var.put('sum', (var.get('div')*var.get('div')), '+')
                    else:
                        var.put('sum', var.get('arg'), '+')
            return (var.get('Infinity') if PyJsStrictEq(var.get('larg'),var.get('Infinity')) else (var.get('larg')*var.get('Math').callprop('sqrt', var.get('sum'))))
        PyJs_hypot_1261_._set_name('hypot')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'hypot':PyJs_hypot_1261_}))
    PyJs_anonymous_1260_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1262_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', '$imul', 'require'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$imul', var.get('Math').get('imul'))
        @Js
        def PyJs_anonymous_1263_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return ((var.get('$imul')(Js(4294967295), Js(5.0))!=(-Js(5.0))) or (var.get('$imul').get('length')!=Js(2.0)))
        PyJs_anonymous_1263_._set_name('anonymous')
        @Js
        def PyJs_imul_1264_(x, y, this, arguments, var=var):
            var = Scope({'x':x, 'y':y, 'this':this, 'arguments':arguments, 'imul':PyJs_imul_1264_}, var)
            var.registers(['y', 'x', 'yl', 'UINT16', 'xl', 'xn', 'yn'])
            var.put('UINT16', Js(65535))
            var.put('xn', (+var.get('x')))
            var.put('yn', (+var.get('y')))
            var.put('xl', (var.get('UINT16')&var.get('xn')))
            var.put('yl', (var.get('UINT16')&var.get('yn')))
            return (Js(0.0)|((var.get('xl')*var.get('yl'))+PyJsBshift(((((var.get('UINT16')&PyJsBshift(var.get('xn'),Js(16.0)))*var.get('yl'))+(var.get('xl')*(var.get('UINT16')&PyJsBshift(var.get('yn'),Js(16.0)))))<<Js(16.0)),Js(0.0))))
        PyJs_imul_1264_._set_name('imul')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('require')(Js('./_fails'))(PyJs_anonymous_1263_))), Js('Math'), Js({'imul':PyJs_imul_1264_}))
    PyJs_anonymous_1262_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1265_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        @Js
        def PyJs_log10_1266_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'log10':PyJs_log10_1266_}, var)
            var.registers(['x'])
            return (var.get('Math').callprop('log', var.get('x'))*var.get('Math').get('LOG10E'))
        PyJs_log10_1266_._set_name('log10')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'log10':PyJs_log10_1266_}))
    PyJs_anonymous_1265_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1267_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'log1p':var.get('require')(Js('./_math-log1p'))}))
    PyJs_anonymous_1267_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1268_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        @Js
        def PyJs_log2_1269_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'log2':PyJs_log2_1269_}, var)
            var.registers(['x'])
            return (var.get('Math').callprop('log', var.get('x'))/var.get('Math').get('LN2'))
        PyJs_log2_1269_._set_name('log2')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'log2':PyJs_log2_1269_}))
    PyJs_anonymous_1268_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1270_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'sign':var.get('require')(Js('./_math-sign'))}))
    PyJs_anonymous_1270_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1271_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', 'expm1', 'exp', 'require'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('expm1', var.get('require')(Js('./_math-expm1')))
        var.put('exp', var.get('Math').get('exp'))
        @Js
        def PyJs_anonymous_1272_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return (var.get('Math').callprop('sinh', (-Js(2e-17))).neg()!=(-Js(2e-17)))
        PyJs_anonymous_1272_._set_name('anonymous')
        @Js
        def PyJs_sinh_1273_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'sinh':PyJs_sinh_1273_}, var)
            var.registers(['x'])
            return (((var.get('expm1')(var.get('x'))-var.get('expm1')((-var.get('x'))))/Js(2.0)) if (var.get('Math').callprop('abs', var.put('x', (+var.get('x'))))<Js(1.0)) else ((var.get('exp')((var.get('x')-Js(1.0)))-var.get('exp')(((-var.get('x'))-Js(1.0))))*(var.get('Math').get('E')/Js(2.0))))
        PyJs_sinh_1273_._set_name('sinh')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('require')(Js('./_fails'))(PyJs_anonymous_1272_))), Js('Math'), Js({'sinh':PyJs_sinh_1273_}))
    PyJs_anonymous_1271_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1274_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', 'expm1', 'exp', 'require'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('expm1', var.get('require')(Js('./_math-expm1')))
        var.put('exp', var.get('Math').get('exp'))
        @Js
        def PyJs_tanh_1275_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'tanh':PyJs_tanh_1275_}, var)
            var.registers(['a', 'x', 'b'])
            var.put('a', var.get('expm1')(var.put('x', (+var.get('x')))))
            var.put('b', var.get('expm1')((-var.get('x'))))
            return (Js(1.0) if (var.get('a')==var.get('Infinity')) else ((-Js(1.0)) if (var.get('b')==var.get('Infinity')) else ((var.get('a')-var.get('b'))/(var.get('exp')(var.get('x'))+var.get('exp')((-var.get('x')))))))
        PyJs_tanh_1275_._set_name('tanh')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'tanh':PyJs_tanh_1275_}))
    PyJs_anonymous_1274_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1276_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        @Js
        def PyJs_trunc_1277_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'trunc':PyJs_trunc_1277_}, var)
            var.registers(['it'])
            return (var.get('Math').get('floor') if (var.get('it')>Js(0.0)) else var.get('Math').get('ceil'))(var.get('it'))
        PyJs_trunc_1277_._set_name('trunc')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'trunc':PyJs_trunc_1277_}))
    PyJs_anonymous_1276_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1278_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$Number', 'global', '$trim', 'BROKEN_COF', 'gOPN', 'dP', 'j', 'proto', 'Base', 'fails', 'toNumber', 'key', 'gOPD', 'NUMBER', 'TRIM', 'require', 'keys', 'has', 'module', 'toPrimitive', 'exports', 'cof', 'inheritIfRequired'])
        Js('use strict')
        var.put('global', var.get('require')(Js('./_global')))
        var.put('has', var.get('require')(Js('./_has')))
        var.put('cof', var.get('require')(Js('./_cof')))
        var.put('inheritIfRequired', var.get('require')(Js('./_inherit-if-required')))
        var.put('toPrimitive', var.get('require')(Js('./_to-primitive')))
        var.put('fails', var.get('require')(Js('./_fails')))
        var.put('gOPN', var.get('require')(Js('./_object-gopn')).get('f'))
        var.put('gOPD', var.get('require')(Js('./_object-gopd')).get('f'))
        var.put('dP', var.get('require')(Js('./_object-dp')).get('f'))
        var.put('$trim', var.get('require')(Js('./_string-trim')).get('trim'))
        var.put('NUMBER', Js('Number'))
        var.put('$Number', var.get('global').get(var.get('NUMBER')))
        var.put('Base', var.get('$Number'))
        var.put('proto', var.get('$Number').get('prototype'))
        var.put('BROKEN_COF', (var.get('cof')(var.get('require')(Js('./_object-create'))(var.get('proto')))==var.get('NUMBER')))
        var.put('TRIM', var.get('String').get('prototype').contains(Js('trim')))
        @Js
        def PyJs_toNumber_1279_(argument, this, arguments, var=var):
            var = Scope({'argument':argument, 'this':this, 'arguments':arguments, 'toNumber':PyJs_toNumber_1279_}, var)
            var.registers(['third', 'i', 'code', 'l', 'first', 'it', 'maxCode', 'digits', 'argument', 'radix'])
            var.put('it', var.get('toPrimitive')(var.get('argument'), Js(False)))
            if ((var.get('it',throw=False).typeof()==Js('string')) and (var.get('it').get('length')>Js(2.0))):
                var.put('it', (var.get('it').callprop('trim') if var.get('TRIM') else var.get('$trim')(var.get('it'), Js(3.0))))
                var.put('first', var.get('it').callprop('charCodeAt', Js(0.0)))
                pass
                if (PyJsStrictEq(var.get('first'),Js(43.0)) or PyJsStrictEq(var.get('first'),Js(45.0))):
                    var.put('third', var.get('it').callprop('charCodeAt', Js(2.0)))
                    if (PyJsStrictEq(var.get('third'),Js(88.0)) or PyJsStrictEq(var.get('third'),Js(120.0))):
                        return var.get('NaN')
                else:
                    if PyJsStrictEq(var.get('first'),Js(48.0)):
                        while 1:
                            SWITCHED = False
                            CONDITION = (var.get('it').callprop('charCodeAt', Js(1.0)))
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(66.0)):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(98.0)):
                                SWITCHED = True
                                var.put('radix', Js(2.0))
                                var.put('maxCode', Js(49.0))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(79.0)):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(111.0)):
                                SWITCHED = True
                                var.put('radix', Js(8.0))
                                var.put('maxCode', Js(55.0))
                                break
                            if True:
                                SWITCHED = True
                                return (+var.get('it'))
                            SWITCHED = True
                            break
                        #for JS loop
                        var.put('digits', var.get('it').callprop('slice', Js(2.0)))
                        var.put('i', Js(0.0))
                        var.put('l', var.get('digits').get('length'))
                        while (var.get('i')<var.get('l')):
                            try:
                                var.put('code', var.get('digits').callprop('charCodeAt', var.get('i')))
                                if ((var.get('code')<Js(48.0)) or (var.get('code')>var.get('maxCode'))):
                                    return var.get('NaN')
                            finally:
                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                        return var.get('parseInt')(var.get('digits'), var.get('radix'))
            return (+var.get('it'))
        PyJs_toNumber_1279_._set_name('toNumber')
        var.put('toNumber', PyJs_toNumber_1279_)
        if ((var.get('$Number')(Js(' 0o1')).neg() or var.get('$Number')(Js('0b1')).neg()) or var.get('$Number')(Js('+0x1'))):
            @Js
            def PyJs_Number_1280_(value, this, arguments, var=var):
                var = Scope({'value':value, 'this':this, 'arguments':arguments, 'Number':PyJs_Number_1280_}, var)
                var.registers(['it', 'value', 'that'])
                var.put('it', (Js(0.0) if (var.get('arguments').get('length')<Js(1.0)) else var.get('value')))
                var.put('that', var.get(u"this"))
                @Js
                def PyJs_anonymous_1281_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.get('proto').get('valueOf').callprop('call', var.get('that'))
                PyJs_anonymous_1281_._set_name('anonymous')
                return (var.get('inheritIfRequired')(var.get('Base').create(var.get('toNumber')(var.get('it'))), var.get('that'), var.get('$Number')) if (var.get('that').instanceof(var.get('$Number')) and (var.get('fails')(PyJs_anonymous_1281_) if var.get('BROKEN_COF') else (var.get('cof')(var.get('that'))!=var.get('NUMBER')))) else var.get('toNumber')(var.get('it')))
            PyJs_Number_1280_._set_name('Number')
            var.put('$Number', PyJs_Number_1280_)
            #for JS loop
            var.put('keys', (var.get('gOPN')(var.get('Base')) if var.get('require')(Js('./_descriptors')) else ((Js('MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,')+Js('EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,'))+Js('MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger')).callprop('split', Js(','))))
            var.put('j', Js(0.0))
            while (var.get('keys').get('length')>var.get('j')):
                try:
                    if (var.get('has')(var.get('Base'), var.put('key', var.get('keys').get(var.get('j')))) and var.get('has')(var.get('$Number'), var.get('key')).neg()):
                        var.get('dP')(var.get('$Number'), var.get('key'), var.get('gOPD')(var.get('Base'), var.get('key')))
                finally:
                        (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
            var.get('$Number').put('prototype', var.get('proto'))
            var.get('proto').put('constructor', var.get('$Number'))
            var.get('require')(Js('./_redefine'))(var.get('global'), var.get('NUMBER'), var.get('$Number'))
    PyJs_anonymous_1278_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1282_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Number'), Js({'EPSILON':var.get('Math').callprop('pow', Js(2.0), (-Js(52.0)))}))
    PyJs_anonymous_1282_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1283_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', '_isFinite', 'require'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('_isFinite', var.get('require')(Js('./_global')).get('isFinite'))
        @Js
        def PyJs_isFinite_1284_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'isFinite':PyJs_isFinite_1284_}, var)
            var.registers(['it'])
            return ((var.get('it',throw=False).typeof()==Js('number')) and var.get('_isFinite')(var.get('it')))
        PyJs_isFinite_1284_._set_name('isFinite')
        var.get('$export')(var.get('$export').get('S'), Js('Number'), Js({'isFinite':PyJs_isFinite_1284_}))
    PyJs_anonymous_1283_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1285_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Number'), Js({'isInteger':var.get('require')(Js('./_is-integer'))}))
    PyJs_anonymous_1285_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1286_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        @Js
        def PyJs_isNaN_1287_(number, this, arguments, var=var):
            var = Scope({'number':number, 'this':this, 'arguments':arguments, 'isNaN':PyJs_isNaN_1287_}, var)
            var.registers(['number'])
            return (var.get('number')!=var.get('number'))
        PyJs_isNaN_1287_._set_name('isNaN')
        var.get('$export')(var.get('$export').get('S'), Js('Number'), Js({'isNaN':PyJs_isNaN_1287_}))
    PyJs_anonymous_1286_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1288_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'isInteger', 'abs', 'exports', 'require'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('isInteger', var.get('require')(Js('./_is-integer')))
        var.put('abs', var.get('Math').get('abs'))
        @Js
        def PyJs_isSafeInteger_1289_(number, this, arguments, var=var):
            var = Scope({'number':number, 'this':this, 'arguments':arguments, 'isSafeInteger':PyJs_isSafeInteger_1289_}, var)
            var.registers(['number'])
            return (var.get('isInteger')(var.get('number')) and (var.get('abs')(var.get('number'))<=Js(9007199254740991)))
        PyJs_isSafeInteger_1289_._set_name('isSafeInteger')
        var.get('$export')(var.get('$export').get('S'), Js('Number'), Js({'isSafeInteger':PyJs_isSafeInteger_1289_}))
    PyJs_anonymous_1288_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1290_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Number'), Js({'MAX_SAFE_INTEGER':Js(9007199254740991)}))
    PyJs_anonymous_1290_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1291_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Number'), Js({'MIN_SAFE_INTEGER':(-Js(9007199254740991))}))
    PyJs_anonymous_1291_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1292_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', 'require', '$parseFloat'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$parseFloat', var.get('require')(Js('./_parse-float')))
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*(var.get('Number').get('parseFloat')!=var.get('$parseFloat')))), Js('Number'), Js({'parseFloat':var.get('$parseFloat')}))
    PyJs_anonymous_1292_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1293_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', '$parseInt', 'require'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$parseInt', var.get('require')(Js('./_parse-int')))
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*(var.get('Number').get('parseInt')!=var.get('$parseInt')))), Js('Number'), Js({'parseInt':var.get('$parseInt')}))
    PyJs_anonymous_1293_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1294_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['floor', 'multiply', '$toFixed', 'divide', '$export', 'pow', 'module', 'ERROR', 'exports', 'toInteger', 'log', 'data', 'repeat', 'numToString', 'aNumberValue', 'ZERO', 'require'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('toInteger', var.get('require')(Js('./_to-integer')))
        var.put('aNumberValue', var.get('require')(Js('./_a-number-value')))
        var.put('repeat', var.get('require')(Js('./_string-repeat')))
        var.put('$toFixed', Js(1.0).get('toFixed'))
        var.put('floor', var.get('Math').get('floor'))
        var.put('data', Js([Js(0.0), Js(0.0), Js(0.0), Js(0.0), Js(0.0), Js(0.0)]))
        var.put('ERROR', Js('Number.toFixed: incorrect invocation!'))
        var.put('ZERO', Js('0'))
        @Js
        def PyJs_multiply_1295_(n, c, this, arguments, var=var):
            var = Scope({'n':n, 'c':c, 'this':this, 'arguments':arguments, 'multiply':PyJs_multiply_1295_}, var)
            var.registers(['c', 'n', 'c2', 'i'])
            var.put('i', (-Js(1.0)))
            var.put('c2', var.get('c'))
            while (var.put('i',Js(var.get('i').to_number())+Js(1))<Js(6.0)):
                var.put('c2', (var.get('n')*var.get('data').get(var.get('i'))), '+')
                var.get('data').put(var.get('i'), (var.get('c2')%Js(10000000.0)))
                var.put('c2', var.get('floor')((var.get('c2')/Js(10000000.0))))
        PyJs_multiply_1295_._set_name('multiply')
        var.put('multiply', PyJs_multiply_1295_)
        @Js
        def PyJs_divide_1296_(n, this, arguments, var=var):
            var = Scope({'n':n, 'this':this, 'arguments':arguments, 'divide':PyJs_divide_1296_}, var)
            var.registers(['c', 'n', 'i'])
            var.put('i', Js(6.0))
            var.put('c', Js(0.0))
            while (var.put('i',Js(var.get('i').to_number())-Js(1))>=Js(0.0)):
                var.put('c', var.get('data').get(var.get('i')), '+')
                var.get('data').put(var.get('i'), var.get('floor')((var.get('c')/var.get('n'))))
                var.put('c', ((var.get('c')%var.get('n'))*Js(10000000.0)))
        PyJs_divide_1296_._set_name('divide')
        var.put('divide', PyJs_divide_1296_)
        @Js
        def PyJs_numToString_1297_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'numToString':PyJs_numToString_1297_}, var)
            var.registers(['t', 'i', 's'])
            var.put('i', Js(6.0))
            var.put('s', Js(''))
            while (var.put('i',Js(var.get('i').to_number())-Js(1))>=Js(0.0)):
                if ((PyJsStrictNeq(var.get('s'),Js('')) or PyJsStrictEq(var.get('i'),Js(0.0))) or PyJsStrictNeq(var.get('data').get(var.get('i')),Js(0.0))):
                    var.put('t', var.get('String')(var.get('data').get(var.get('i'))))
                    var.put('s', (var.get('t') if PyJsStrictEq(var.get('s'),Js('')) else ((var.get('s')+var.get('repeat').callprop('call', var.get('ZERO'), (Js(7.0)-var.get('t').get('length'))))+var.get('t'))))
            return var.get('s')
        PyJs_numToString_1297_._set_name('numToString')
        var.put('numToString', PyJs_numToString_1297_)
        @Js
        def PyJs_pow_1298_(x, n, acc, this, arguments, var=var):
            var = Scope({'x':x, 'n':n, 'acc':acc, 'this':this, 'arguments':arguments, 'pow':PyJs_pow_1298_}, var)
            var.registers(['n', 'x', 'acc'])
            return (var.get('acc') if PyJsStrictEq(var.get('n'),Js(0.0)) else (var.get('pow')(var.get('x'), (var.get('n')-Js(1.0)), (var.get('acc')*var.get('x'))) if PyJsStrictEq((var.get('n')%Js(2.0)),Js(1.0)) else var.get('pow')((var.get('x')*var.get('x')), (var.get('n')/Js(2.0)), var.get('acc'))))
        PyJs_pow_1298_._set_name('pow')
        var.put('pow', PyJs_pow_1298_)
        @Js
        def PyJs_log_1299_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'log':PyJs_log_1299_}, var)
            var.registers(['n', 'x2', 'x'])
            var.put('n', Js(0.0))
            var.put('x2', var.get('x'))
            while (var.get('x2')>=Js(4096.0)):
                var.put('n', Js(12.0), '+')
                var.put('x2', Js(4096.0), '/')
            while (var.get('x2')>=Js(2.0)):
                var.put('n', Js(1.0), '+')
                var.put('x2', Js(2.0), '/')
            return var.get('n')
        PyJs_log_1299_._set_name('log')
        var.put('log', PyJs_log_1299_)
        def PyJs_LONG_1301_(var=var):
            @Js
            def PyJs_anonymous_1300_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('$toFixed').callprop('call', Js({}))
            PyJs_anonymous_1300_._set_name('anonymous')
            return ((var.get('$toFixed').neg().neg() and (((PyJsStrictNeq(Js(8e-05).callprop('toFixed', Js(3.0)),Js('0.000')) or PyJsStrictNeq(Js(0.9).callprop('toFixed', Js(0.0)),Js('1'))) or PyJsStrictNeq(Js(1.255).callprop('toFixed', Js(2.0)),Js('1.25'))) or PyJsStrictNeq(Js(1.0000000000000001e+18).callprop('toFixed', Js(0.0)),Js('1000000000000000128')))) or var.get('require')(Js('./_fails'))(PyJs_anonymous_1300_).neg())
        @Js
        def PyJs_toFixed_1302_(fractionDigits, this, arguments, var=var):
            var = Scope({'fractionDigits':fractionDigits, 'this':this, 'arguments':arguments, 'toFixed':PyJs_toFixed_1302_}, var)
            var.registers(['x', 's', 'fractionDigits', 'e', 'm', 'k', 'z', 'f', 'j'])
            var.put('x', var.get('aNumberValue')(var.get(u"this"), var.get('ERROR')))
            var.put('f', var.get('toInteger')(var.get('fractionDigits')))
            var.put('s', Js(''))
            var.put('m', var.get('ZERO'))
            pass
            if ((var.get('f')<Js(0.0)) or (var.get('f')>Js(20.0))):
                PyJsTempException = JsToPyException(var.get('RangeError')(var.get('ERROR')))
                raise PyJsTempException
            if (var.get('x')!=var.get('x')):
                return Js('NaN')
            if ((var.get('x')<=(-Js(1e+21))) or (var.get('x')>=Js(1e+21))):
                return var.get('String')(var.get('x'))
            if (var.get('x')<Js(0.0)):
                var.put('s', Js('-'))
                var.put('x', (-var.get('x')))
            if (var.get('x')>Js(1e-21)):
                var.put('e', (var.get('log')((var.get('x')*var.get('pow')(Js(2.0), Js(69.0), Js(1.0))))-Js(69.0)))
                var.put('z', ((var.get('x')*var.get('pow')(Js(2.0), (-var.get('e')), Js(1.0))) if (var.get('e')<Js(0.0)) else (var.get('x')/var.get('pow')(Js(2.0), var.get('e'), Js(1.0)))))
                var.put('z', Js(4503599627370496), '*')
                var.put('e', (Js(52.0)-var.get('e')))
                if (var.get('e')>Js(0.0)):
                    var.get('multiply')(Js(0.0), var.get('z'))
                    var.put('j', var.get('f'))
                    while (var.get('j')>=Js(7.0)):
                        var.get('multiply')(Js(10000000.0), Js(0.0))
                        var.put('j', Js(7.0), '-')
                    var.get('multiply')(var.get('pow')(Js(10.0), var.get('j'), Js(1.0)), Js(0.0))
                    var.put('j', (var.get('e')-Js(1.0)))
                    while (var.get('j')>=Js(23.0)):
                        var.get('divide')((Js(1.0)<<Js(23.0)))
                        var.put('j', Js(23.0), '-')
                    var.get('divide')((Js(1.0)<<var.get('j')))
                    var.get('multiply')(Js(1.0), Js(1.0))
                    var.get('divide')(Js(2.0))
                    var.put('m', var.get('numToString')())
                else:
                    var.get('multiply')(Js(0.0), var.get('z'))
                    var.get('multiply')((Js(1.0)<<(-var.get('e'))), Js(0.0))
                    var.put('m', (var.get('numToString')()+var.get('repeat').callprop('call', var.get('ZERO'), var.get('f'))))
            if (var.get('f')>Js(0.0)):
                var.put('k', var.get('m').get('length'))
                var.put('m', (var.get('s')+(((Js('0.')+var.get('repeat').callprop('call', var.get('ZERO'), (var.get('f')-var.get('k'))))+var.get('m')) if (var.get('k')<=var.get('f')) else ((var.get('m').callprop('slice', Js(0.0), (var.get('k')-var.get('f')))+Js('.'))+var.get('m').callprop('slice', (var.get('k')-var.get('f')))))))
            else:
                var.put('m', (var.get('s')+var.get('m')))
            return var.get('m')
        PyJs_toFixed_1302_._set_name('toFixed')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*PyJs_LONG_1301_())), Js('Number'), Js({'toFixed':PyJs_toFixed_1302_}))
    PyJs_anonymous_1294_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1303_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$fails', 'module', '$export', 'exports', '$toPrecision', 'require', 'aNumberValue'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$fails', var.get('require')(Js('./_fails')))
        var.put('aNumberValue', var.get('require')(Js('./_a-number-value')))
        var.put('$toPrecision', Js(1.0).get('toPrecision'))
        @Js
        def PyJs_anonymous_1304_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return PyJsStrictNeq(var.get('$toPrecision').callprop('call', Js(1.0), var.get('undefined')),Js('1'))
        PyJs_anonymous_1304_._set_name('anonymous')
        @Js
        def PyJs_anonymous_1305_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('$toPrecision').callprop('call', Js({}))
        PyJs_anonymous_1305_._set_name('anonymous')
        @Js
        def PyJs_toPrecision_1306_(precision, this, arguments, var=var):
            var = Scope({'precision':precision, 'this':this, 'arguments':arguments, 'toPrecision':PyJs_toPrecision_1306_}, var)
            var.registers(['precision', 'that'])
            var.put('that', var.get('aNumberValue')(var.get(u"this"), Js('Number#toPrecision: incorrect invocation!')))
            return (var.get('$toPrecision').callprop('call', var.get('that')) if PyJsStrictEq(var.get('precision'),var.get('undefined')) else var.get('$toPrecision').callprop('call', var.get('that'), var.get('precision')))
        PyJs_toPrecision_1306_._set_name('toPrecision')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*(var.get('$fails')(PyJs_anonymous_1304_) or var.get('$fails')(PyJs_anonymous_1305_).neg()))), Js('Number'), Js({'toPrecision':PyJs_toPrecision_1306_}))
    PyJs_anonymous_1303_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1307_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')((var.get('$export').get('S')+var.get('$export').get('F')), Js('Object'), Js({'assign':var.get('require')(Js('./_object-assign'))}))
    PyJs_anonymous_1307_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1308_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Object'), Js({'create':var.get('require')(Js('./_object-create'))}))
    PyJs_anonymous_1308_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1309_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('require')(Js('./_descriptors')).neg())), Js('Object'), Js({'defineProperties':var.get('require')(Js('./_object-dps'))}))
    PyJs_anonymous_1309_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1310_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('require')(Js('./_descriptors')).neg())), Js('Object'), Js({'defineProperty':var.get('require')(Js('./_object-dp')).get('f')}))
    PyJs_anonymous_1310_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1311_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'meta', 'require', 'isObject'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('meta', var.get('require')(Js('./_meta')).get('onFreeze'))
        @Js
        def PyJs_anonymous_1312_(PyJsArg_24667265657a65_, this, arguments, var=var):
            var = Scope({'$freeze':PyJsArg_24667265657a65_, 'this':this, 'arguments':arguments}, var)
            var.registers(['$freeze'])
            @Js
            def PyJs_freeze_1313_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments, 'freeze':PyJs_freeze_1313_}, var)
                var.registers(['it'])
                return (var.get('$freeze')(var.get('meta')(var.get('it'))) if (var.get('$freeze') and var.get('isObject')(var.get('it'))) else var.get('it'))
            PyJs_freeze_1313_._set_name('freeze')
            return PyJs_freeze_1313_
        PyJs_anonymous_1312_._set_name('anonymous')
        var.get('require')(Js('./_object-sap'))(Js('freeze'), PyJs_anonymous_1312_)
    PyJs_anonymous_1311_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1314_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', '$getOwnPropertyDescriptor', 'toIObject', 'require'])
        var.put('toIObject', var.get('require')(Js('./_to-iobject')))
        var.put('$getOwnPropertyDescriptor', var.get('require')(Js('./_object-gopd')).get('f'))
        @Js
        def PyJs_anonymous_1315_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_getOwnPropertyDescriptor_1316_(it, key, this, arguments, var=var):
                var = Scope({'it':it, 'key':key, 'this':this, 'arguments':arguments, 'getOwnPropertyDescriptor':PyJs_getOwnPropertyDescriptor_1316_}, var)
                var.registers(['key', 'it'])
                return var.get('$getOwnPropertyDescriptor')(var.get('toIObject')(var.get('it')), var.get('key'))
            PyJs_getOwnPropertyDescriptor_1316_._set_name('getOwnPropertyDescriptor')
            return PyJs_getOwnPropertyDescriptor_1316_
        PyJs_anonymous_1315_._set_name('anonymous')
        var.get('require')(Js('./_object-sap'))(Js('getOwnPropertyDescriptor'), PyJs_anonymous_1315_)
    PyJs_anonymous_1314_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1317_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_1318_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get('require')(Js('./_object-gopn-ext')).get('f')
        PyJs_anonymous_1318_._set_name('anonymous')
        var.get('require')(Js('./_object-sap'))(Js('getOwnPropertyNames'), PyJs_anonymous_1318_)
    PyJs_anonymous_1317_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1319_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['toObject', 'module', '$getPrototypeOf', 'exports', 'require'])
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('$getPrototypeOf', var.get('require')(Js('./_object-gpo')))
        @Js
        def PyJs_anonymous_1320_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_getPrototypeOf_1321_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments, 'getPrototypeOf':PyJs_getPrototypeOf_1321_}, var)
                var.registers(['it'])
                return var.get('$getPrototypeOf')(var.get('toObject')(var.get('it')))
            PyJs_getPrototypeOf_1321_._set_name('getPrototypeOf')
            return PyJs_getPrototypeOf_1321_
        PyJs_anonymous_1320_._set_name('anonymous')
        var.get('require')(Js('./_object-sap'))(Js('getPrototypeOf'), PyJs_anonymous_1320_)
    PyJs_anonymous_1319_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1322_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'isObject', 'module', 'exports'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        @Js
        def PyJs_anonymous_1323_(PyJsArg_246973457874656e7369626c65_, this, arguments, var=var):
            var = Scope({'$isExtensible':PyJsArg_246973457874656e7369626c65_, 'this':this, 'arguments':arguments}, var)
            var.registers(['$isExtensible'])
            @Js
            def PyJs_isExtensible_1324_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments, 'isExtensible':PyJs_isExtensible_1324_}, var)
                var.registers(['it'])
                return ((var.get('$isExtensible')(var.get('it')) if var.get('$isExtensible') else Js(True)) if var.get('isObject')(var.get('it')) else Js(False))
            PyJs_isExtensible_1324_._set_name('isExtensible')
            return PyJs_isExtensible_1324_
        PyJs_anonymous_1323_._set_name('anonymous')
        var.get('require')(Js('./_object-sap'))(Js('isExtensible'), PyJs_anonymous_1323_)
    PyJs_anonymous_1322_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1325_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'isObject', 'module', 'exports'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        @Js
        def PyJs_anonymous_1326_(PyJsArg_24697346726f7a656e_, this, arguments, var=var):
            var = Scope({'$isFrozen':PyJsArg_24697346726f7a656e_, 'this':this, 'arguments':arguments}, var)
            var.registers(['$isFrozen'])
            @Js
            def PyJs_isFrozen_1327_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments, 'isFrozen':PyJs_isFrozen_1327_}, var)
                var.registers(['it'])
                return ((var.get('$isFrozen')(var.get('it')) if var.get('$isFrozen') else Js(False)) if var.get('isObject')(var.get('it')) else Js(True))
            PyJs_isFrozen_1327_._set_name('isFrozen')
            return PyJs_isFrozen_1327_
        PyJs_anonymous_1326_._set_name('anonymous')
        var.get('require')(Js('./_object-sap'))(Js('isFrozen'), PyJs_anonymous_1326_)
    PyJs_anonymous_1325_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1328_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'isObject', 'module', 'exports'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        @Js
        def PyJs_anonymous_1329_(PyJsArg_2469735365616c6564_, this, arguments, var=var):
            var = Scope({'$isSealed':PyJsArg_2469735365616c6564_, 'this':this, 'arguments':arguments}, var)
            var.registers(['$isSealed'])
            @Js
            def PyJs_isSealed_1330_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments, 'isSealed':PyJs_isSealed_1330_}, var)
                var.registers(['it'])
                return ((var.get('$isSealed')(var.get('it')) if var.get('$isSealed') else Js(False)) if var.get('isObject')(var.get('it')) else Js(True))
            PyJs_isSealed_1330_._set_name('isSealed')
            return PyJs_isSealed_1330_
        PyJs_anonymous_1329_._set_name('anonymous')
        var.get('require')(Js('./_object-sap'))(Js('isSealed'), PyJs_anonymous_1329_)
    PyJs_anonymous_1328_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1331_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Object'), Js({'is':var.get('require')(Js('./_same-value'))}))
    PyJs_anonymous_1331_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1332_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['toObject', 'module', 'exports', '$keys', 'require'])
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('$keys', var.get('require')(Js('./_object-keys')))
        @Js
        def PyJs_anonymous_1333_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_keys_1334_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments, 'keys':PyJs_keys_1334_}, var)
                var.registers(['it'])
                return var.get('$keys')(var.get('toObject')(var.get('it')))
            PyJs_keys_1334_._set_name('keys')
            return PyJs_keys_1334_
        PyJs_anonymous_1333_._set_name('anonymous')
        var.get('require')(Js('./_object-sap'))(Js('keys'), PyJs_anonymous_1333_)
    PyJs_anonymous_1332_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1335_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'meta', 'require', 'isObject'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('meta', var.get('require')(Js('./_meta')).get('onFreeze'))
        @Js
        def PyJs_anonymous_1336_(PyJsArg_2470726576656e74457874656e73696f6e73_, this, arguments, var=var):
            var = Scope({'$preventExtensions':PyJsArg_2470726576656e74457874656e73696f6e73_, 'this':this, 'arguments':arguments}, var)
            var.registers(['$preventExtensions'])
            @Js
            def PyJs_preventExtensions_1337_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments, 'preventExtensions':PyJs_preventExtensions_1337_}, var)
                var.registers(['it'])
                return (var.get('$preventExtensions')(var.get('meta')(var.get('it'))) if (var.get('$preventExtensions') and var.get('isObject')(var.get('it'))) else var.get('it'))
            PyJs_preventExtensions_1337_._set_name('preventExtensions')
            return PyJs_preventExtensions_1337_
        PyJs_anonymous_1336_._set_name('anonymous')
        var.get('require')(Js('./_object-sap'))(Js('preventExtensions'), PyJs_anonymous_1336_)
    PyJs_anonymous_1335_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1338_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'meta', 'require', 'isObject'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('meta', var.get('require')(Js('./_meta')).get('onFreeze'))
        @Js
        def PyJs_anonymous_1339_(PyJsArg_247365616c_, this, arguments, var=var):
            var = Scope({'$seal':PyJsArg_247365616c_, 'this':this, 'arguments':arguments}, var)
            var.registers(['$seal'])
            @Js
            def PyJs_seal_1340_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments, 'seal':PyJs_seal_1340_}, var)
                var.registers(['it'])
                return (var.get('$seal')(var.get('meta')(var.get('it'))) if (var.get('$seal') and var.get('isObject')(var.get('it'))) else var.get('it'))
            PyJs_seal_1340_._set_name('seal')
            return PyJs_seal_1340_
        PyJs_anonymous_1339_._set_name('anonymous')
        var.get('require')(Js('./_object-sap'))(Js('seal'), PyJs_anonymous_1339_)
    PyJs_anonymous_1338_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1341_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Object'), Js({'setPrototypeOf':var.get('require')(Js('./_set-proto')).get('set')}))
    PyJs_anonymous_1341_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1342_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'classof', 'exports', 'test', 'require'])
        Js('use strict')
        var.put('classof', var.get('require')(Js('./_classof')))
        var.put('test', Js({}))
        var.get('test').put(var.get('require')(Js('./_wks'))(Js('toStringTag')), Js('z'))
        if ((var.get('test')+Js(''))!=Js('[object z]')):
            @Js
            def PyJs_toString_1343_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'toString':PyJs_toString_1343_}, var)
                var.registers([])
                return ((Js('[object ')+var.get('classof')(var.get(u"this")))+Js(']'))
            PyJs_toString_1343_._set_name('toString')
            var.get('require')(Js('./_redefine'))(var.get('Object').get('prototype'), Js('toString'), PyJs_toString_1343_, Js(True))
    PyJs_anonymous_1342_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1344_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', 'require', '$parseFloat'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$parseFloat', var.get('require')(Js('./_parse-float')))
        var.get('$export')((var.get('$export').get('G')+(var.get('$export').get('F')*(var.get('parseFloat')!=var.get('$parseFloat')))), Js({'parseFloat':var.get('$parseFloat')}))
    PyJs_anonymous_1344_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1345_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', '$parseInt', 'require'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$parseInt', var.get('require')(Js('./_parse-int')))
        var.get('$export')((var.get('$export').get('G')+(var.get('$export').get('F')*(var.get('parseInt')!=var.get('$parseInt')))), Js({'parseInt':var.get('$parseInt')}))
    PyJs_anonymous_1345_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1346_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['perform', 'global', 'LIBRARY', '$resolve', 'notify', '$Promise', 'aFunction', 'anInstance', '$reject', 'versions', 'isUnhandled', 'onUnhandled', 'empty', 'v8', 'newPromiseCapability', 'classof', 'USE_NATIVE', 'promiseResolve', 'speciesConstructor', 'isNode', 'isThenable', 'Internal', 'microtask', 'newPromiseCapabilityModule', 'OwnPromiseCapability', 'require', 'isObject', 'Wrapper', 'TypeError', 'module', '$export', 'userAgent', 'forOf', 'exports', 'PROMISE', 'process', 'newGenericPromiseCapability', 'onHandleUnhandled', 'ctx', 'task'])
        Js('use strict')
        var.put('LIBRARY', var.get('require')(Js('./_library')))
        var.put('global', var.get('require')(Js('./_global')))
        var.put('ctx', var.get('require')(Js('./_ctx')))
        var.put('classof', var.get('require')(Js('./_classof')))
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        var.put('anInstance', var.get('require')(Js('./_an-instance')))
        var.put('forOf', var.get('require')(Js('./_for-of')))
        var.put('speciesConstructor', var.get('require')(Js('./_species-constructor')))
        var.put('task', var.get('require')(Js('./_task')).get('set'))
        var.put('microtask', var.get('require')(Js('./_microtask'))())
        var.put('newPromiseCapabilityModule', var.get('require')(Js('./_new-promise-capability')))
        var.put('perform', var.get('require')(Js('./_perform')))
        var.put('userAgent', var.get('require')(Js('./_user-agent')))
        var.put('promiseResolve', var.get('require')(Js('./_promise-resolve')))
        var.put('PROMISE', Js('Promise'))
        var.put('TypeError', var.get('global').get('TypeError'))
        var.put('process', var.get('global').get('process'))
        var.put('versions', (var.get('process') and var.get('process').get('versions')))
        var.put('v8', ((var.get('versions') and var.get('versions').get('v8')) or Js('')))
        var.put('$Promise', var.get('global').get(var.get('PROMISE')))
        var.put('isNode', (var.get('classof')(var.get('process'))==Js('process')))
        @Js
        def PyJs_empty_1347_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'empty':PyJs_empty_1347_}, var)
            var.registers([])
            pass
        PyJs_empty_1347_._set_name('empty')
        var.put('empty', PyJs_empty_1347_)
        pass
        var.put('newPromiseCapability', var.put('newGenericPromiseCapability', var.get('newPromiseCapabilityModule').get('f')))
        @Js
        def PyJs_anonymous_1348_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['FakePromise', 'promise'])
            try:
                var.put('promise', var.get('$Promise').callprop('resolve', Js(1.0)))
                @Js
                def PyJs_anonymous_1349_(exec, this, arguments, var=var):
                    var = Scope({'exec':exec, 'this':this, 'arguments':arguments}, var)
                    var.registers(['exec'])
                    var.get('exec')(var.get('empty'), var.get('empty'))
                PyJs_anonymous_1349_._set_name('anonymous')
                var.put('FakePromise', var.get('promise').put('constructor', Js({})).put(var.get('require')(Js('./_wks'))(Js('species')), PyJs_anonymous_1349_))
                return ((((var.get('isNode') or (var.get('PromiseRejectionEvent',throw=False).typeof()==Js('function'))) and var.get('promise').callprop('then', var.get('empty')).instanceof(var.get('FakePromise'))) and PyJsStrictNeq(var.get('v8').callprop('indexOf', Js('6.6')),Js(0.0))) and PyJsStrictEq(var.get('userAgent').callprop('indexOf', Js('Chrome/66')),(-Js(1.0))))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_87126984 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    pass
                finally:
                    if PyJsHolder_65_87126984 is not None:
                        var.own['e'] = PyJsHolder_65_87126984
                    else:
                        del var.own['e']
                    del PyJsHolder_65_87126984
        PyJs_anonymous_1348_._set_name('anonymous')
        var.put('USE_NATIVE', PyJs_anonymous_1348_().neg().neg())
        @Js
        def PyJs_isThenable_1350_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'isThenable':PyJs_isThenable_1350_}, var)
            var.registers(['then', 'it'])
            pass
            return (var.get('then') if (var.get('isObject')(var.get('it')) and (var.put('then', var.get('it').get('then')).typeof()==Js('function'))) else Js(False))
        PyJs_isThenable_1350_._set_name('isThenable')
        var.put('isThenable', PyJs_isThenable_1350_)
        @Js
        def PyJs_notify_1351_(promise, isReject, this, arguments, var=var):
            var = Scope({'promise':promise, 'isReject':isReject, 'this':this, 'arguments':arguments, 'notify':PyJs_notify_1351_}, var)
            var.registers(['isReject', 'chain', 'promise'])
            if var.get('promise').get('_n'):
                return var.get('undefined')
            var.get('promise').put('_n', Js(True))
            var.put('chain', var.get('promise').get('_c'))
            @Js
            def PyJs_anonymous_1352_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['ok', 'run', 'i', 'value'])
                var.put('value', var.get('promise').get('_v'))
                var.put('ok', (var.get('promise').get('_s')==Js(1.0)))
                var.put('i', Js(0.0))
                @Js
                def PyJs_run_1353_(reaction, this, arguments, var=var):
                    var = Scope({'reaction':reaction, 'this':this, 'arguments':arguments, 'run':PyJs_run_1353_}, var)
                    var.registers(['reaction', 'result', 'exited', 'handler', 'then', 'domain', 'resolve', 'reject'])
                    var.put('handler', (var.get('reaction').get('ok') if var.get('ok') else var.get('reaction').get('fail')))
                    var.put('resolve', var.get('reaction').get('resolve'))
                    var.put('reject', var.get('reaction').get('reject'))
                    var.put('domain', var.get('reaction').get('domain'))
                    pass
                    try:
                        if var.get('handler'):
                            if var.get('ok').neg():
                                if (var.get('promise').get('_h')==Js(2.0)):
                                    var.get('onHandleUnhandled')(var.get('promise'))
                                var.get('promise').put('_h', Js(1.0))
                            if PyJsStrictEq(var.get('handler'),Js(True)):
                                var.put('result', var.get('value'))
                            else:
                                if var.get('domain'):
                                    var.get('domain').callprop('enter')
                                var.put('result', var.get('handler')(var.get('value')))
                                if var.get('domain'):
                                    var.get('domain').callprop('exit')
                                    var.put('exited', Js(True))
                            if PyJsStrictEq(var.get('result'),var.get('reaction').get('promise')):
                                var.get('reject')(var.get('TypeError')(Js('Promise-chain cycle')))
                            else:
                                if var.put('then', var.get('isThenable')(var.get('result'))):
                                    var.get('then').callprop('call', var.get('result'), var.get('resolve'), var.get('reject'))
                                else:
                                    var.get('resolve')(var.get('result'))
                        else:
                            var.get('reject')(var.get('value'))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_65_71935881 = var.own.get('e')
                        var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                        try:
                            if (var.get('domain') and var.get('exited').neg()):
                                var.get('domain').callprop('exit')
                            var.get('reject')(var.get('e'))
                        finally:
                            if PyJsHolder_65_71935881 is not None:
                                var.own['e'] = PyJsHolder_65_71935881
                            else:
                                del var.own['e']
                            del PyJsHolder_65_71935881
                PyJs_run_1353_._set_name('run')
                var.put('run', PyJs_run_1353_)
                while (var.get('chain').get('length')>var.get('i')):
                    var.get('run')(var.get('chain').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))
                var.get('promise').put('_c', Js([]))
                var.get('promise').put('_n', Js(False))
                if (var.get('isReject') and var.get('promise').get('_h').neg()):
                    var.get('onUnhandled')(var.get('promise'))
            PyJs_anonymous_1352_._set_name('anonymous')
            var.get('microtask')(PyJs_anonymous_1352_)
        PyJs_notify_1351_._set_name('notify')
        var.put('notify', PyJs_notify_1351_)
        @Js
        def PyJs_onUnhandled_1354_(promise, this, arguments, var=var):
            var = Scope({'promise':promise, 'this':this, 'arguments':arguments, 'onUnhandled':PyJs_onUnhandled_1354_}, var)
            var.registers(['promise'])
            @Js
            def PyJs_anonymous_1355_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['result', 'console', 'handler', 'unhandled', 'value'])
                var.put('value', var.get('promise').get('_v'))
                var.put('unhandled', var.get('isUnhandled')(var.get('promise')))
                pass
                if var.get('unhandled'):
                    @Js
                    def PyJs_anonymous_1356_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        if var.get('isNode'):
                            var.get('process').callprop('emit', Js('unhandledRejection'), var.get('value'), var.get('promise'))
                        else:
                            if var.put('handler', var.get('global').get('onunhandledrejection')):
                                var.get('handler')(Js({'promise':var.get('promise'),'reason':var.get('value')}))
                            else:
                                if (var.put('console', var.get('global').get('console')) and var.get('console').get('error')):
                                    var.get('console').callprop('error', Js('Unhandled promise rejection'), var.get('value'))
                    PyJs_anonymous_1356_._set_name('anonymous')
                    var.put('result', var.get('perform')(PyJs_anonymous_1356_))
                    var.get('promise').put('_h', (Js(2.0) if (var.get('isNode') or var.get('isUnhandled')(var.get('promise'))) else Js(1.0)))
                var.get('promise').put('_a', var.get('undefined'))
                if (var.get('unhandled') and var.get('result').get('e')):
                    PyJsTempException = JsToPyException(var.get('result').get('v'))
                    raise PyJsTempException
            PyJs_anonymous_1355_._set_name('anonymous')
            var.get('task').callprop('call', var.get('global'), PyJs_anonymous_1355_)
        PyJs_onUnhandled_1354_._set_name('onUnhandled')
        var.put('onUnhandled', PyJs_onUnhandled_1354_)
        @Js
        def PyJs_isUnhandled_1357_(promise, this, arguments, var=var):
            var = Scope({'promise':promise, 'this':this, 'arguments':arguments, 'isUnhandled':PyJs_isUnhandled_1357_}, var)
            var.registers(['promise'])
            return (PyJsStrictNeq(var.get('promise').get('_h'),Js(1.0)) and PyJsStrictEq((var.get('promise').get('_a') or var.get('promise').get('_c')).get('length'),Js(0.0)))
        PyJs_isUnhandled_1357_._set_name('isUnhandled')
        var.put('isUnhandled', PyJs_isUnhandled_1357_)
        @Js
        def PyJs_onHandleUnhandled_1358_(promise, this, arguments, var=var):
            var = Scope({'promise':promise, 'this':this, 'arguments':arguments, 'onHandleUnhandled':PyJs_onHandleUnhandled_1358_}, var)
            var.registers(['promise'])
            @Js
            def PyJs_anonymous_1359_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['handler'])
                pass
                if var.get('isNode'):
                    var.get('process').callprop('emit', Js('rejectionHandled'), var.get('promise'))
                else:
                    if var.put('handler', var.get('global').get('onrejectionhandled')):
                        var.get('handler')(Js({'promise':var.get('promise'),'reason':var.get('promise').get('_v')}))
            PyJs_anonymous_1359_._set_name('anonymous')
            var.get('task').callprop('call', var.get('global'), PyJs_anonymous_1359_)
        PyJs_onHandleUnhandled_1358_._set_name('onHandleUnhandled')
        var.put('onHandleUnhandled', PyJs_onHandleUnhandled_1358_)
        @Js
        def PyJs_InlineNonPyName_1360_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments, '$reject':PyJs_InlineNonPyName_1360_}, var)
            var.registers(['value', 'promise'])
            var.put('promise', var.get(u"this"))
            if var.get('promise').get('_d'):
                return var.get('undefined')
            var.get('promise').put('_d', Js(True))
            var.put('promise', (var.get('promise').get('_w') or var.get('promise')))
            var.get('promise').put('_v', var.get('value'))
            var.get('promise').put('_s', Js(2.0))
            if var.get('promise').get('_a').neg():
                var.get('promise').put('_a', var.get('promise').get('_c').callprop('slice'))
            var.get('notify')(var.get('promise'), Js(True))
        PyJs_InlineNonPyName_1360_._set_name('$reject')
        var.put('$reject', PyJs_InlineNonPyName_1360_)
        @Js
        def PyJs_InlineNonPyName_1361_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments, '$resolve':PyJs_InlineNonPyName_1361_}, var)
            var.registers(['then', 'value', 'promise'])
            var.put('promise', var.get(u"this"))
            pass
            if var.get('promise').get('_d'):
                return var.get('undefined')
            var.get('promise').put('_d', Js(True))
            var.put('promise', (var.get('promise').get('_w') or var.get('promise')))
            try:
                if PyJsStrictEq(var.get('promise'),var.get('value')):
                    PyJsTempException = JsToPyException(var.get('TypeError')(Js("Promise can't be resolved itself")))
                    raise PyJsTempException
                if var.put('then', var.get('isThenable')(var.get('value'))):
                    @Js
                    def PyJs_anonymous_1362_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['wrapper'])
                        var.put('wrapper', Js({'_w':var.get('promise'),'_d':Js(False)}))
                        try:
                            var.get('then').callprop('call', var.get('value'), var.get('ctx')(var.get('$resolve'), var.get('wrapper'), Js(1.0)), var.get('ctx')(var.get('$reject'), var.get('wrapper'), Js(1.0)))
                        except PyJsException as PyJsTempException:
                            PyJsHolder_65_39775981 = var.own.get('e')
                            var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                            try:
                                var.get('$reject').callprop('call', var.get('wrapper'), var.get('e'))
                            finally:
                                if PyJsHolder_65_39775981 is not None:
                                    var.own['e'] = PyJsHolder_65_39775981
                                else:
                                    del var.own['e']
                                del PyJsHolder_65_39775981
                    PyJs_anonymous_1362_._set_name('anonymous')
                    var.get('microtask')(PyJs_anonymous_1362_)
                else:
                    var.get('promise').put('_v', var.get('value'))
                    var.get('promise').put('_s', Js(1.0))
                    var.get('notify')(var.get('promise'), Js(False))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_74881200 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    var.get('$reject').callprop('call', Js({'_w':var.get('promise'),'_d':Js(False)}), var.get('e'))
                finally:
                    if PyJsHolder_65_74881200 is not None:
                        var.own['e'] = PyJsHolder_65_74881200
                    else:
                        del var.own['e']
                    del PyJsHolder_65_74881200
        PyJs_InlineNonPyName_1361_._set_name('$resolve')
        var.put('$resolve', PyJs_InlineNonPyName_1361_)
        if var.get('USE_NATIVE').neg():
            @Js
            def PyJs_Promise_1363_(executor, this, arguments, var=var):
                var = Scope({'executor':executor, 'this':this, 'arguments':arguments, 'Promise':PyJs_Promise_1363_}, var)
                var.registers(['executor'])
                var.get('anInstance')(var.get(u"this"), var.get('$Promise'), var.get('PROMISE'), Js('_h'))
                var.get('aFunction')(var.get('executor'))
                var.get('Internal').callprop('call', var.get(u"this"))
                try:
                    var.get('executor')(var.get('ctx')(var.get('$resolve'), var.get(u"this"), Js(1.0)), var.get('ctx')(var.get('$reject'), var.get(u"this"), Js(1.0)))
                except PyJsException as PyJsTempException:
                    PyJsHolder_657272_74910181 = var.own.get('err')
                    var.force_own_put('err', PyExceptionToJs(PyJsTempException))
                    try:
                        var.get('$reject').callprop('call', var.get(u"this"), var.get('err'))
                    finally:
                        if PyJsHolder_657272_74910181 is not None:
                            var.own['err'] = PyJsHolder_657272_74910181
                        else:
                            del var.own['err']
                        del PyJsHolder_657272_74910181
            PyJs_Promise_1363_._set_name('Promise')
            var.put('$Promise', PyJs_Promise_1363_)
            @Js
            def PyJs_Promise_1364_(executor, this, arguments, var=var):
                var = Scope({'executor':executor, 'this':this, 'arguments':arguments, 'Promise':PyJs_Promise_1364_}, var)
                var.registers(['executor'])
                var.get(u"this").put('_c', Js([]))
                var.get(u"this").put('_a', var.get('undefined'))
                var.get(u"this").put('_s', Js(0.0))
                var.get(u"this").put('_d', Js(False))
                var.get(u"this").put('_v', var.get('undefined'))
                var.get(u"this").put('_h', Js(0.0))
                var.get(u"this").put('_n', Js(False))
            PyJs_Promise_1364_._set_name('Promise')
            var.put('Internal', PyJs_Promise_1364_)
            @Js
            def PyJs_then_1365_(onFulfilled, onRejected, this, arguments, var=var):
                var = Scope({'onFulfilled':onFulfilled, 'onRejected':onRejected, 'this':this, 'arguments':arguments, 'then':PyJs_then_1365_}, var)
                var.registers(['onFulfilled', 'reaction', 'onRejected'])
                var.put('reaction', var.get('newPromiseCapability')(var.get('speciesConstructor')(var.get(u"this"), var.get('$Promise'))))
                var.get('reaction').put('ok', (var.get('onFulfilled') if (var.get('onFulfilled',throw=False).typeof()==Js('function')) else Js(True)))
                var.get('reaction').put('fail', ((var.get('onRejected',throw=False).typeof()==Js('function')) and var.get('onRejected')))
                var.get('reaction').put('domain', (var.get('process').get('domain') if var.get('isNode') else var.get('undefined')))
                var.get(u"this").get('_c').callprop('push', var.get('reaction'))
                if var.get(u"this").get('_a'):
                    var.get(u"this").get('_a').callprop('push', var.get('reaction'))
                if var.get(u"this").get('_s'):
                    var.get('notify')(var.get(u"this"), Js(False))
                return var.get('reaction').get('promise')
            PyJs_then_1365_._set_name('then')
            @Js
            def PyJs__catch_1366_(onRejected, this, arguments, var=var):
                var = Scope({'onRejected':onRejected, 'this':this, 'arguments':arguments, '_catch':PyJs__catch_1366_}, var)
                var.registers(['onRejected'])
                return var.get(u"this").callprop('then', var.get('undefined'), var.get('onRejected'))
            PyJs__catch_1366_._set_name('_catch')
            var.get('Internal').put('prototype', var.get('require')(Js('./_redefine-all'))(var.get('$Promise').get('prototype'), Js({'then':PyJs_then_1365_,'catch':PyJs__catch_1366_})))
            @Js
            def PyJs_OwnPromiseCapability_1367_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'OwnPromiseCapability':PyJs_OwnPromiseCapability_1367_}, var)
                var.registers(['promise'])
                var.put('promise', var.get('Internal').create())
                var.get(u"this").put('promise', var.get('promise'))
                var.get(u"this").put('resolve', var.get('ctx')(var.get('$resolve'), var.get('promise'), Js(1.0)))
                var.get(u"this").put('reject', var.get('ctx')(var.get('$reject'), var.get('promise'), Js(1.0)))
            PyJs_OwnPromiseCapability_1367_._set_name('OwnPromiseCapability')
            var.put('OwnPromiseCapability', PyJs_OwnPromiseCapability_1367_)
            @Js
            def PyJs_newPromiseCapability_1368_(C, this, arguments, var=var):
                var = Scope({'C':C, 'this':this, 'arguments':arguments, 'newPromiseCapability':PyJs_newPromiseCapability_1368_}, var)
                var.registers(['C'])
                return (var.get('OwnPromiseCapability').create(var.get('C')) if (PyJsStrictEq(var.get('C'),var.get('$Promise')) or PyJsStrictEq(var.get('C'),var.get('Wrapper'))) else var.get('newGenericPromiseCapability')(var.get('C')))
            PyJs_newPromiseCapability_1368_._set_name('newPromiseCapability')
            var.get('newPromiseCapabilityModule').put('f', var.put('newPromiseCapability', PyJs_newPromiseCapability_1368_))
        var.get('$export')(((var.get('$export').get('G')+var.get('$export').get('W'))+(var.get('$export').get('F')*var.get('USE_NATIVE').neg())), Js({'Promise':var.get('$Promise')}))
        var.get('require')(Js('./_set-to-string-tag'))(var.get('$Promise'), var.get('PROMISE'))
        var.get('require')(Js('./_set-species'))(var.get('PROMISE'))
        var.put('Wrapper', var.get('require')(Js('./_core')).get(var.get('PROMISE')))
        @Js
        def PyJs_reject_1369_(r, this, arguments, var=var):
            var = Scope({'r':r, 'this':this, 'arguments':arguments, 'reject':PyJs_reject_1369_}, var)
            var.registers(['$$reject', 'r', 'capability'])
            var.put('capability', var.get('newPromiseCapability')(var.get(u"this")))
            var.put('$$reject', var.get('capability').get('reject'))
            var.get('$$reject')(var.get('r'))
            return var.get('capability').get('promise')
        PyJs_reject_1369_._set_name('reject')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('USE_NATIVE').neg())), var.get('PROMISE'), Js({'reject':PyJs_reject_1369_}))
        @Js
        def PyJs_resolve_1370_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'resolve':PyJs_resolve_1370_}, var)
            var.registers(['x'])
            return var.get('promiseResolve')((var.get('$Promise') if (var.get('LIBRARY') and PyJsStrictEq(var.get(u"this"),var.get('Wrapper'))) else var.get(u"this")), var.get('x'))
        PyJs_resolve_1370_._set_name('resolve')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*(var.get('LIBRARY') or var.get('USE_NATIVE').neg()))), var.get('PROMISE'), Js({'resolve':PyJs_resolve_1370_}))
        @Js
        def PyJs_anonymous_1371_(iter, this, arguments, var=var):
            var = Scope({'iter':iter, 'this':this, 'arguments':arguments}, var)
            var.registers(['iter'])
            var.get('$Promise').callprop('all', var.get('iter')).callprop('catch', var.get('empty'))
        PyJs_anonymous_1371_._set_name('anonymous')
        @Js
        def PyJs_all_1372_(iterable, this, arguments, var=var):
            var = Scope({'iterable':iterable, 'this':this, 'arguments':arguments, 'all':PyJs_all_1372_}, var)
            var.registers(['result', 'iterable', 'capability', 'C', 'resolve', 'reject'])
            var.put('C', var.get(u"this"))
            var.put('capability', var.get('newPromiseCapability')(var.get('C')))
            var.put('resolve', var.get('capability').get('resolve'))
            var.put('reject', var.get('capability').get('reject'))
            @Js
            def PyJs_anonymous_1373_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['values', 'index', 'remaining'])
                var.put('values', Js([]))
                var.put('index', Js(0.0))
                var.put('remaining', Js(1.0))
                @Js
                def PyJs_anonymous_1374_(promise, this, arguments, var=var):
                    var = Scope({'promise':promise, 'this':this, 'arguments':arguments}, var)
                    var.registers(['$index', 'alreadyCalled', 'promise'])
                    var.put('$index', (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1)))
                    var.put('alreadyCalled', Js(False))
                    var.get('values').callprop('push', var.get('undefined'))
                    (var.put('remaining',Js(var.get('remaining').to_number())+Js(1))-Js(1))
                    @Js
                    def PyJs_anonymous_1375_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        if var.get('alreadyCalled'):
                            return var.get('undefined')
                        var.put('alreadyCalled', Js(True))
                        var.get('values').put(var.get('$index'), var.get('value'))
                        (var.put('remaining',Js(var.get('remaining').to_number())-Js(1)) or var.get('resolve')(var.get('values')))
                    PyJs_anonymous_1375_._set_name('anonymous')
                    var.get('C').callprop('resolve', var.get('promise')).callprop('then', PyJs_anonymous_1375_, var.get('reject'))
                PyJs_anonymous_1374_._set_name('anonymous')
                var.get('forOf')(var.get('iterable'), Js(False), PyJs_anonymous_1374_)
                (var.put('remaining',Js(var.get('remaining').to_number())-Js(1)) or var.get('resolve')(var.get('values')))
            PyJs_anonymous_1373_._set_name('anonymous')
            var.put('result', var.get('perform')(PyJs_anonymous_1373_))
            if var.get('result').get('e'):
                var.get('reject')(var.get('result').get('v'))
            return var.get('capability').get('promise')
        PyJs_all_1372_._set_name('all')
        @Js
        def PyJs_race_1376_(iterable, this, arguments, var=var):
            var = Scope({'iterable':iterable, 'this':this, 'arguments':arguments, 'race':PyJs_race_1376_}, var)
            var.registers(['iterable', 'capability', 'C', 'result', 'reject'])
            var.put('C', var.get(u"this"))
            var.put('capability', var.get('newPromiseCapability')(var.get('C')))
            var.put('reject', var.get('capability').get('reject'))
            @Js
            def PyJs_anonymous_1377_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                @Js
                def PyJs_anonymous_1378_(promise, this, arguments, var=var):
                    var = Scope({'promise':promise, 'this':this, 'arguments':arguments}, var)
                    var.registers(['promise'])
                    var.get('C').callprop('resolve', var.get('promise')).callprop('then', var.get('capability').get('resolve'), var.get('reject'))
                PyJs_anonymous_1378_._set_name('anonymous')
                var.get('forOf')(var.get('iterable'), Js(False), PyJs_anonymous_1378_)
            PyJs_anonymous_1377_._set_name('anonymous')
            var.put('result', var.get('perform')(PyJs_anonymous_1377_))
            if var.get('result').get('e'):
                var.get('reject')(var.get('result').get('v'))
            return var.get('capability').get('promise')
        PyJs_race_1376_._set_name('race')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*(var.get('USE_NATIVE') and var.get('require')(Js('./_iter-detect'))(PyJs_anonymous_1371_)).neg())), var.get('PROMISE'), Js({'all':PyJs_all_1372_,'race':PyJs_race_1376_}))
    PyJs_anonymous_1346_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1379_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', 'anObject', 'aFunction', 'fApply', 'rApply', 'require'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('rApply', (var.get('require')(Js('./_global')).get('Reflect') or Js({})).get('apply'))
        var.put('fApply', var.get('Function').get('apply'))
        @Js
        def PyJs_anonymous_1380_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_anonymous_1381_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                pass
            PyJs_anonymous_1381_._set_name('anonymous')
            var.get('rApply')(PyJs_anonymous_1381_)
        PyJs_anonymous_1380_._set_name('anonymous')
        @Js
        def PyJs_apply_1382_(target, thisArgument, argumentsList, this, arguments, var=var):
            var = Scope({'target':target, 'thisArgument':thisArgument, 'argumentsList':argumentsList, 'this':this, 'arguments':arguments, 'apply':PyJs_apply_1382_}, var)
            var.registers(['L', 'target', 'thisArgument', 'argumentsList', 'T'])
            var.put('T', var.get('aFunction')(var.get('target')))
            var.put('L', var.get('anObject')(var.get('argumentsList')))
            return (var.get('rApply')(var.get('T'), var.get('thisArgument'), var.get('L')) if var.get('rApply') else var.get('fApply').callprop('call', var.get('T'), var.get('thisArgument'), var.get('L')))
        PyJs_apply_1382_._set_name('apply')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('require')(Js('./_fails'))(PyJs_anonymous_1380_).neg())), Js('Reflect'), Js({'apply':PyJs_apply_1382_}))
    PyJs_anonymous_1379_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1383_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['create', 'module', 'fails', '$export', 'exports', 'anObject', 'aFunction', 'bind', 'ARGS_BUG', 'isObject', 'require', 'NEW_TARGET_BUG', 'rConstruct'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('create', var.get('require')(Js('./_object-create')))
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('fails', var.get('require')(Js('./_fails')))
        var.put('bind', var.get('require')(Js('./_bind')))
        var.put('rConstruct', (var.get('require')(Js('./_global')).get('Reflect') or Js({})).get('construct'))
        @Js
        def PyJs_anonymous_1384_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['F'])
            @Js
            def PyJsHoisted_F_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                pass
            PyJsHoisted_F_.func_name = 'F'
            var.put('F', PyJsHoisted_F_)
            pass
            @Js
            def PyJs_anonymous_1385_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                pass
            PyJs_anonymous_1385_._set_name('anonymous')
            return var.get('rConstruct')(PyJs_anonymous_1385_, Js([]), var.get('F')).instanceof(var.get('F')).neg()
        PyJs_anonymous_1384_._set_name('anonymous')
        var.put('NEW_TARGET_BUG', var.get('fails')(PyJs_anonymous_1384_))
        @Js
        def PyJs_anonymous_1386_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_anonymous_1387_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                pass
            PyJs_anonymous_1387_._set_name('anonymous')
            var.get('rConstruct')(PyJs_anonymous_1387_)
        PyJs_anonymous_1386_._set_name('anonymous')
        var.put('ARGS_BUG', var.get('fails')(PyJs_anonymous_1386_).neg())
        @Js
        def PyJs_construct_1388_(Target, args, this, arguments, var=var):
            var = Scope({'Target':Target, 'args':args, 'this':this, 'arguments':arguments, 'construct':PyJs_construct_1388_}, var)
            var.registers(['newTarget', 'instance', 'args', 'proto', 'Target', '$args', 'result'])
            var.get('aFunction')(var.get('Target'))
            var.get('anObject')(var.get('args'))
            var.put('newTarget', (var.get('Target') if (var.get('arguments').get('length')<Js(3.0)) else var.get('aFunction')(var.get('arguments').get('2'))))
            if (var.get('ARGS_BUG') and var.get('NEW_TARGET_BUG').neg()):
                return var.get('rConstruct')(var.get('Target'), var.get('args'), var.get('newTarget'))
            if (var.get('Target')==var.get('newTarget')):
                while 1:
                    SWITCHED = False
                    CONDITION = (var.get('args').get('length'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js(0.0)):
                        SWITCHED = True
                        return var.get('Target').create()
                    if SWITCHED or PyJsStrictEq(CONDITION, Js(1.0)):
                        SWITCHED = True
                        return var.get('Target').create(var.get('args').get('0'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js(2.0)):
                        SWITCHED = True
                        return var.get('Target').create(var.get('args').get('0'), var.get('args').get('1'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js(3.0)):
                        SWITCHED = True
                        return var.get('Target').create(var.get('args').get('0'), var.get('args').get('1'), var.get('args').get('2'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js(4.0)):
                        SWITCHED = True
                        return var.get('Target').create(var.get('args').get('0'), var.get('args').get('1'), var.get('args').get('2'), var.get('args').get('3'))
                    SWITCHED = True
                    break
                var.put('$args', Js([var.get(u"null")]))
                var.get('$args').get('push').callprop('apply', var.get('$args'), var.get('args'))
                return var.get('bind').callprop('apply', var.get('Target'), var.get('$args')).create()
            var.put('proto', var.get('newTarget').get('prototype'))
            var.put('instance', var.get('create')((var.get('proto') if var.get('isObject')(var.get('proto')) else var.get('Object').get('prototype'))))
            var.put('result', var.get('Function').get('apply').callprop('call', var.get('Target'), var.get('instance'), var.get('args')))
            return (var.get('result') if var.get('isObject')(var.get('result')) else var.get('instance'))
        PyJs_construct_1388_._set_name('construct')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*(var.get('NEW_TARGET_BUG') or var.get('ARGS_BUG')))), Js('Reflect'), Js({'construct':PyJs_construct_1388_}))
    PyJs_anonymous_1383_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1389_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'toPrimitive', 'exports', 'anObject', 'require', 'dP'])
        var.put('dP', var.get('require')(Js('./_object-dp')))
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('toPrimitive', var.get('require')(Js('./_to-primitive')))
        @Js
        def PyJs_anonymous_1390_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('Reflect').callprop('defineProperty', var.get('dP').callprop('f', Js({}), Js(1.0), Js({'value':Js(1.0)})), Js(1.0), Js({'value':Js(2.0)}))
        PyJs_anonymous_1390_._set_name('anonymous')
        @Js
        def PyJs_defineProperty_1391_(target, propertyKey, attributes, this, arguments, var=var):
            var = Scope({'target':target, 'propertyKey':propertyKey, 'attributes':attributes, 'this':this, 'arguments':arguments, 'defineProperty':PyJs_defineProperty_1391_}, var)
            var.registers(['propertyKey', 'target', 'attributes'])
            var.get('anObject')(var.get('target'))
            var.put('propertyKey', var.get('toPrimitive')(var.get('propertyKey'), Js(True)))
            var.get('anObject')(var.get('attributes'))
            try:
                var.get('dP').callprop('f', var.get('target'), var.get('propertyKey'), var.get('attributes'))
                return Js(True)
            except PyJsException as PyJsTempException:
                PyJsHolder_65_41272651 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    return Js(False)
                finally:
                    if PyJsHolder_65_41272651 is not None:
                        var.own['e'] = PyJsHolder_65_41272651
                    else:
                        del var.own['e']
                    del PyJsHolder_65_41272651
        PyJs_defineProperty_1391_._set_name('defineProperty')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('require')(Js('./_fails'))(PyJs_anonymous_1390_))), Js('Reflect'), Js({'defineProperty':PyJs_defineProperty_1391_}))
    PyJs_anonymous_1389_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1392_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', 'gOPD', 'anObject', 'require'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('gOPD', var.get('require')(Js('./_object-gopd')).get('f'))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        @Js
        def PyJs_deleteProperty_1393_(target, propertyKey, this, arguments, var=var):
            var = Scope({'target':target, 'propertyKey':propertyKey, 'this':this, 'arguments':arguments, 'deleteProperty':PyJs_deleteProperty_1393_}, var)
            var.registers(['propertyKey', 'target', 'desc'])
            var.put('desc', var.get('gOPD')(var.get('anObject')(var.get('target')), var.get('propertyKey')))
            return (Js(False) if (var.get('desc') and var.get('desc').get('configurable').neg()) else var.get('target').delete(var.get('propertyKey')))
        PyJs_deleteProperty_1393_._set_name('deleteProperty')
        var.get('$export')(var.get('$export').get('S'), Js('Reflect'), Js({'deleteProperty':PyJs_deleteProperty_1393_}))
    PyJs_anonymous_1392_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1394_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'Enumerate', 'exports', 'anObject', 'require'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        @Js
        def PyJs_Enumerate_1395_(iterated, this, arguments, var=var):
            var = Scope({'iterated':iterated, 'this':this, 'arguments':arguments, 'Enumerate':PyJs_Enumerate_1395_}, var)
            var.registers(['key', 'keys', 'iterated'])
            var.get(u"this").put('_t', var.get('anObject')(var.get('iterated')))
            var.get(u"this").put('_i', Js(0.0))
            var.put('keys', var.get(u"this").put('_k', Js([])))
            pass
            for PyJsTemp in var.get('iterated'):
                var.put('key', PyJsTemp)
                var.get('keys').callprop('push', var.get('key'))
        PyJs_Enumerate_1395_._set_name('Enumerate')
        var.put('Enumerate', PyJs_Enumerate_1395_)
        @Js
        def PyJs_anonymous_1396_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['key', 'keys', 'that'])
            var.put('that', var.get(u"this"))
            var.put('keys', var.get('that').get('_k'))
            pass
            while 1:
                if (var.get('that').get('_i')>=var.get('keys').get('length')):
                    return Js({'value':var.get('undefined'),'done':Js(True)})
                if not var.get('that').get('_t').contains(var.put('key', var.get('keys').get((var.get('that').put('_i',Js(var.get('that').get('_i').to_number())+Js(1))-Js(1))))).neg():
                    break
            return Js({'value':var.get('key'),'done':Js(False)})
        PyJs_anonymous_1396_._set_name('anonymous')
        var.get('require')(Js('./_iter-create'))(var.get('Enumerate'), Js('Object'), PyJs_anonymous_1396_)
        @Js
        def PyJs_enumerate_1397_(target, this, arguments, var=var):
            var = Scope({'target':target, 'this':this, 'arguments':arguments, 'enumerate':PyJs_enumerate_1397_}, var)
            var.registers(['target'])
            return var.get('Enumerate').create(var.get('target'))
        PyJs_enumerate_1397_._set_name('enumerate')
        var.get('$export')(var.get('$export').get('S'), Js('Reflect'), Js({'enumerate':PyJs_enumerate_1397_}))
    PyJs_anonymous_1394_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1398_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', 'gOPD', 'anObject', 'require'])
        var.put('gOPD', var.get('require')(Js('./_object-gopd')))
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        @Js
        def PyJs_getOwnPropertyDescriptor_1399_(target, propertyKey, this, arguments, var=var):
            var = Scope({'target':target, 'propertyKey':propertyKey, 'this':this, 'arguments':arguments, 'getOwnPropertyDescriptor':PyJs_getOwnPropertyDescriptor_1399_}, var)
            var.registers(['propertyKey', 'target'])
            return var.get('gOPD').callprop('f', var.get('anObject')(var.get('target')), var.get('propertyKey'))
        PyJs_getOwnPropertyDescriptor_1399_._set_name('getOwnPropertyDescriptor')
        var.get('$export')(var.get('$export').get('S'), Js('Reflect'), Js({'getOwnPropertyDescriptor':PyJs_getOwnPropertyDescriptor_1399_}))
    PyJs_anonymous_1398_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1400_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', 'getProto', 'anObject', 'require'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('getProto', var.get('require')(Js('./_object-gpo')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        @Js
        def PyJs_getPrototypeOf_1401_(target, this, arguments, var=var):
            var = Scope({'target':target, 'this':this, 'arguments':arguments, 'getPrototypeOf':PyJs_getPrototypeOf_1401_}, var)
            var.registers(['target'])
            return var.get('getProto')(var.get('anObject')(var.get('target')))
        PyJs_getPrototypeOf_1401_._set_name('getPrototypeOf')
        var.get('$export')(var.get('$export').get('S'), Js('Reflect'), Js({'getPrototypeOf':PyJs_getPrototypeOf_1401_}))
    PyJs_anonymous_1400_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1402_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['has', 'module', '$export', 'getPrototypeOf', 'exports', 'gOPD', 'anObject', 'require', 'isObject', 'get'])
        @Js
        def PyJsHoisted_get_(target, propertyKey, this, arguments, var=var):
            var = Scope({'target':target, 'propertyKey':propertyKey, 'this':this, 'arguments':arguments}, var)
            var.registers(['propertyKey', 'target', 'desc', 'receiver', 'proto'])
            var.put('receiver', (var.get('target') if (var.get('arguments').get('length')<Js(3.0)) else var.get('arguments').get('2')))
            pass
            if PyJsStrictEq(var.get('anObject')(var.get('target')),var.get('receiver')):
                return var.get('target').get(var.get('propertyKey'))
            if var.put('desc', var.get('gOPD').callprop('f', var.get('target'), var.get('propertyKey'))):
                return (var.get('desc').get('value') if var.get('has')(var.get('desc'), Js('value')) else (var.get('desc').get('get').callprop('call', var.get('receiver')) if PyJsStrictNeq(var.get('desc').get('get'),var.get('undefined')) else var.get('undefined')))
            if var.get('isObject')(var.put('proto', var.get('getPrototypeOf')(var.get('target')))):
                return var.get('get')(var.get('proto'), var.get('propertyKey'), var.get('receiver'))
        PyJsHoisted_get_.func_name = 'get'
        var.put('get', PyJsHoisted_get_)
        var.put('gOPD', var.get('require')(Js('./_object-gopd')))
        var.put('getPrototypeOf', var.get('require')(Js('./_object-gpo')))
        var.put('has', var.get('require')(Js('./_has')))
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        pass
        var.get('$export')(var.get('$export').get('S'), Js('Reflect'), Js({'get':var.get('get')}))
    PyJs_anonymous_1402_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1403_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        @Js
        def PyJs_has_1404_(target, propertyKey, this, arguments, var=var):
            var = Scope({'target':target, 'propertyKey':propertyKey, 'this':this, 'arguments':arguments, 'has':PyJs_has_1404_}, var)
            var.registers(['propertyKey', 'target'])
            return var.get('target').contains(var.get('propertyKey'))
        PyJs_has_1404_._set_name('has')
        var.get('$export')(var.get('$export').get('S'), Js('Reflect'), Js({'has':PyJs_has_1404_}))
    PyJs_anonymous_1403_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1405_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', '$isExtensible', 'anObject', 'require'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('$isExtensible', var.get('Object').get('isExtensible'))
        @Js
        def PyJs_isExtensible_1406_(target, this, arguments, var=var):
            var = Scope({'target':target, 'this':this, 'arguments':arguments, 'isExtensible':PyJs_isExtensible_1406_}, var)
            var.registers(['target'])
            var.get('anObject')(var.get('target'))
            return (var.get('$isExtensible')(var.get('target')) if var.get('$isExtensible') else Js(True))
        PyJs_isExtensible_1406_._set_name('isExtensible')
        var.get('$export')(var.get('$export').get('S'), Js('Reflect'), Js({'isExtensible':PyJs_isExtensible_1406_}))
    PyJs_anonymous_1405_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1407_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Reflect'), Js({'ownKeys':var.get('require')(Js('./_own-keys'))}))
    PyJs_anonymous_1407_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1408_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$preventExtensions', 'module', '$export', 'exports', 'anObject', 'require'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('$preventExtensions', var.get('Object').get('preventExtensions'))
        @Js
        def PyJs_preventExtensions_1409_(target, this, arguments, var=var):
            var = Scope({'target':target, 'this':this, 'arguments':arguments, 'preventExtensions':PyJs_preventExtensions_1409_}, var)
            var.registers(['target'])
            var.get('anObject')(var.get('target'))
            try:
                if var.get('$preventExtensions'):
                    var.get('$preventExtensions')(var.get('target'))
                return Js(True)
            except PyJsException as PyJsTempException:
                PyJsHolder_65_37865762 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    return Js(False)
                finally:
                    if PyJsHolder_65_37865762 is not None:
                        var.own['e'] = PyJsHolder_65_37865762
                    else:
                        del var.own['e']
                    del PyJsHolder_65_37865762
        PyJs_preventExtensions_1409_._set_name('preventExtensions')
        var.get('$export')(var.get('$export').get('S'), Js('Reflect'), Js({'preventExtensions':PyJs_preventExtensions_1409_}))
    PyJs_anonymous_1408_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1410_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', 'setProto', 'require'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('setProto', var.get('require')(Js('./_set-proto')))
        if var.get('setProto'):
            @Js
            def PyJs_setPrototypeOf_1411_(target, proto, this, arguments, var=var):
                var = Scope({'target':target, 'proto':proto, 'this':this, 'arguments':arguments, 'setPrototypeOf':PyJs_setPrototypeOf_1411_}, var)
                var.registers(['target', 'proto'])
                var.get('setProto').callprop('check', var.get('target'), var.get('proto'))
                try:
                    var.get('setProto').callprop('set', var.get('target'), var.get('proto'))
                    return Js(True)
                except PyJsException as PyJsTempException:
                    PyJsHolder_65_20498292 = var.own.get('e')
                    var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                    try:
                        return Js(False)
                    finally:
                        if PyJsHolder_65_20498292 is not None:
                            var.own['e'] = PyJsHolder_65_20498292
                        else:
                            del var.own['e']
                        del PyJsHolder_65_20498292
            PyJs_setPrototypeOf_1411_._set_name('setPrototypeOf')
            var.get('$export')(var.get('$export').get('S'), Js('Reflect'), Js({'setPrototypeOf':PyJs_setPrototypeOf_1411_}))
    PyJs_anonymous_1410_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1412_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['has', 'module', '$export', 'getPrototypeOf', 'exports', 'gOPD', 'anObject', 'createDesc', 'require', 'isObject', 'dP', 'set'])
        @Js
        def PyJsHoisted_set_(target, propertyKey, V, this, arguments, var=var):
            var = Scope({'target':target, 'propertyKey':propertyKey, 'V':V, 'this':this, 'arguments':arguments}, var)
            var.registers(['target', 'propertyKey', 'V', 'existingDescriptor', 'receiver', 'proto', 'ownDesc'])
            var.put('receiver', (var.get('target') if (var.get('arguments').get('length')<Js(4.0)) else var.get('arguments').get('3')))
            var.put('ownDesc', var.get('gOPD').callprop('f', var.get('anObject')(var.get('target')), var.get('propertyKey')))
            pass
            if var.get('ownDesc').neg():
                if var.get('isObject')(var.put('proto', var.get('getPrototypeOf')(var.get('target')))):
                    return var.get('set')(var.get('proto'), var.get('propertyKey'), var.get('V'), var.get('receiver'))
                var.put('ownDesc', var.get('createDesc')(Js(0.0)))
            if var.get('has')(var.get('ownDesc'), Js('value')):
                if (PyJsStrictEq(var.get('ownDesc').get('writable'),Js(False)) or var.get('isObject')(var.get('receiver')).neg()):
                    return Js(False)
                if var.put('existingDescriptor', var.get('gOPD').callprop('f', var.get('receiver'), var.get('propertyKey'))):
                    if ((var.get('existingDescriptor').get('get') or var.get('existingDescriptor').get('set')) or PyJsStrictEq(var.get('existingDescriptor').get('writable'),Js(False))):
                        return Js(False)
                    var.get('existingDescriptor').put('value', var.get('V'))
                    var.get('dP').callprop('f', var.get('receiver'), var.get('propertyKey'), var.get('existingDescriptor'))
                else:
                    var.get('dP').callprop('f', var.get('receiver'), var.get('propertyKey'), var.get('createDesc')(Js(0.0), var.get('V')))
                return Js(True)
            return (Js(False) if PyJsStrictEq(var.get('ownDesc').get('set'),var.get('undefined')) else PyJsComma(var.get('ownDesc').get('set').callprop('call', var.get('receiver'), var.get('V')),Js(True)))
        PyJsHoisted_set_.func_name = 'set'
        var.put('set', PyJsHoisted_set_)
        var.put('dP', var.get('require')(Js('./_object-dp')))
        var.put('gOPD', var.get('require')(Js('./_object-gopd')))
        var.put('getPrototypeOf', var.get('require')(Js('./_object-gpo')))
        var.put('has', var.get('require')(Js('./_has')))
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('createDesc', var.get('require')(Js('./_property-desc')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        pass
        var.get('$export')(var.get('$export').get('S'), Js('Reflect'), Js({'set':var.get('set')}))
    PyJs_anonymous_1412_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1413_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['Base', 'module', 'global', 'proxy', 'i', '$flags', 're1', 'exports', '$RegExp', 'gOPN', 're2', 'CORRECT_NEW', 'proto', 'inheritIfRequired', 'require', 'dP', 'keys', 'isRegExp'])
        var.put('global', var.get('require')(Js('./_global')))
        var.put('inheritIfRequired', var.get('require')(Js('./_inherit-if-required')))
        var.put('dP', var.get('require')(Js('./_object-dp')).get('f'))
        var.put('gOPN', var.get('require')(Js('./_object-gopn')).get('f'))
        var.put('isRegExp', var.get('require')(Js('./_is-regexp')))
        var.put('$flags', var.get('require')(Js('./_flags')))
        var.put('$RegExp', var.get('global').get('RegExp'))
        var.put('Base', var.get('$RegExp'))
        var.put('proto', var.get('$RegExp').get('prototype'))
        var.put('re1', JsRegExp('/a/g'))
        var.put('re2', JsRegExp('/a/g'))
        var.put('CORRECT_NEW', PyJsStrictNeq(var.get('$RegExp').create(var.get('re1')),var.get('re1')))
        @Js
        def PyJs_anonymous_1414_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('re2').put(var.get('require')(Js('./_wks'))(Js('match')), Js(False))
            return (((var.get('$RegExp')(var.get('re1'))!=var.get('re1')) or (var.get('$RegExp')(var.get('re2'))==var.get('re2'))) or (var.get('$RegExp')(var.get('re1'), Js('i'))!=Js('/a/i')))
        PyJs_anonymous_1414_._set_name('anonymous')
        if (var.get('require')(Js('./_descriptors')) and (var.get('CORRECT_NEW').neg() or var.get('require')(Js('./_fails'))(PyJs_anonymous_1414_))):
            @Js
            def PyJs_RegExp_1415_(p, f, this, arguments, var=var):
                var = Scope({'p':p, 'f':f, 'this':this, 'arguments':arguments, 'RegExp':PyJs_RegExp_1415_}, var)
                var.registers(['p', 'fiU', 'f', 'tiRE', 'piRE'])
                var.put('tiRE', var.get(u"this").instanceof(var.get('$RegExp')))
                var.put('piRE', var.get('isRegExp')(var.get('p')))
                var.put('fiU', PyJsStrictEq(var.get('f'),var.get('undefined')))
                def PyJs_LONG_1416_(var=var):
                    return (var.get('Base').create((var.get('p').get('source') if (var.get('piRE') and var.get('fiU').neg()) else var.get('p')), var.get('f')) if var.get('CORRECT_NEW') else var.get('Base')((var.get('p').get('source') if var.put('piRE', var.get('p').instanceof(var.get('$RegExp'))) else var.get('p')), (var.get('$flags').callprop('call', var.get('p')) if (var.get('piRE') and var.get('fiU')) else var.get('f'))))
                return (var.get('p') if (((var.get('tiRE').neg() and var.get('piRE')) and PyJsStrictEq(var.get('p').get('constructor'),var.get('$RegExp'))) and var.get('fiU')) else var.get('inheritIfRequired')(PyJs_LONG_1416_(), (var.get(u"this") if var.get('tiRE') else var.get('proto')), var.get('$RegExp')))
            PyJs_RegExp_1415_._set_name('RegExp')
            var.put('$RegExp', PyJs_RegExp_1415_)
            @Js
            def PyJs_proxy_1417_(key, this, arguments, var=var):
                var = Scope({'key':key, 'this':this, 'arguments':arguments, 'proxy':PyJs_proxy_1417_}, var)
                var.registers(['key'])
                @Js
                def PyJs_get_1418_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_1418_}, var)
                    var.registers([])
                    return var.get('Base').get(var.get('key'))
                PyJs_get_1418_._set_name('get')
                @Js
                def PyJs_set_1419_(it, this, arguments, var=var):
                    var = Scope({'it':it, 'this':this, 'arguments':arguments, 'set':PyJs_set_1419_}, var)
                    var.registers(['it'])
                    var.get('Base').put(var.get('key'), var.get('it'))
                PyJs_set_1419_._set_name('set')
                (var.get('$RegExp').contains(var.get('key')) or var.get('dP')(var.get('$RegExp'), var.get('key'), Js({'configurable':Js(True),'get':PyJs_get_1418_,'set':PyJs_set_1419_})))
            PyJs_proxy_1417_._set_name('proxy')
            var.put('proxy', PyJs_proxy_1417_)
            #for JS loop
            var.put('keys', var.get('gOPN')(var.get('Base')))
            var.put('i', Js(0.0))
            while (var.get('keys').get('length')>var.get('i')):
                var.get('proxy')(var.get('keys').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))
            
            var.get('proto').put('constructor', var.get('$RegExp'))
            var.get('$RegExp').put('prototype', var.get('proto'))
            var.get('require')(Js('./_redefine'))(var.get('global'), Js('RegExp'), var.get('$RegExp'))
        var.get('require')(Js('./_set-species'))(Js('RegExp'))
    PyJs_anonymous_1413_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1420_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'regexpExec', 'module', 'exports'])
        Js('use strict')
        var.put('regexpExec', var.get('require')(Js('./_regexp-exec')))
        var.get('require')(Js('./_export'))(Js({'target':Js('RegExp'),'proto':Js(True),'forced':PyJsStrictNeq(var.get('regexpExec'),JsRegExp('/./').get('exec'))}), Js({'exec':var.get('regexpExec')}))
    PyJs_anonymous_1420_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1421_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        if (var.get('require')(Js('./_descriptors')) and (JsRegExp('/./g').get('flags')!=Js('g'))):
            var.get('require')(Js('./_object-dp')).callprop('f', var.get('RegExp').get('prototype'), Js('flags'), Js({'configurable':Js(True),'get':var.get('require')(Js('./_flags'))}))
    PyJs_anonymous_1421_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1422_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'regExpExec', 'exports', 'advanceStringIndex', 'anObject', 'require', 'toLength'])
        Js('use strict')
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('advanceStringIndex', var.get('require')(Js('./_advance-string-index')))
        var.put('regExpExec', var.get('require')(Js('./_regexp-exec-abstract')))
        @Js
        def PyJs_anonymous_1423_(defined, MATCH, PyJsArg_246d61746368_, maybeCallNative, this, arguments, var=var):
            var = Scope({'defined':defined, 'MATCH':MATCH, '$match':PyJsArg_246d61746368_, 'maybeCallNative':maybeCallNative, 'this':this, 'arguments':arguments}, var)
            var.registers(['maybeCallNative', 'defined', '$match', 'MATCH'])
            @Js
            def PyJs_match_1424_(regexp, this, arguments, var=var):
                var = Scope({'regexp':regexp, 'this':this, 'arguments':arguments, 'match':PyJs_match_1424_}, var)
                var.registers(['O', 'regexp', 'fn'])
                var.put('O', var.get('defined')(var.get(u"this")))
                var.put('fn', (var.get('undefined') if (var.get('regexp')==var.get('undefined')) else var.get('regexp').get(var.get('MATCH'))))
                return (var.get('fn').callprop('call', var.get('regexp'), var.get('O')) if PyJsStrictNeq(var.get('fn'),var.get('undefined')) else var.get('RegExp').create(var.get('regexp')).callprop(var.get('MATCH'), var.get('String')(var.get('O'))))
            PyJs_match_1424_._set_name('match')
            @Js
            def PyJs_anonymous_1425_(regexp, this, arguments, var=var):
                var = Scope({'regexp':regexp, 'this':this, 'arguments':arguments}, var)
                var.registers(['fullUnicode', 'n', 'rx', 'S', 'matchStr', 'regexp', 'A', 'res', 'result'])
                var.put('res', var.get('maybeCallNative')(var.get('$match'), var.get('regexp'), var.get(u"this")))
                if var.get('res').get('done'):
                    return var.get('res').get('value')
                var.put('rx', var.get('anObject')(var.get('regexp')))
                var.put('S', var.get('String')(var.get(u"this")))
                if var.get('rx').get('global').neg():
                    return var.get('regExpExec')(var.get('rx'), var.get('S'))
                var.put('fullUnicode', var.get('rx').get('unicode'))
                var.get('rx').put('lastIndex', Js(0.0))
                var.put('A', Js([]))
                var.put('n', Js(0.0))
                pass
                while PyJsStrictNeq(var.put('result', var.get('regExpExec')(var.get('rx'), var.get('S'))),var.get(u"null")):
                    var.put('matchStr', var.get('String')(var.get('result').get('0')))
                    var.get('A').put(var.get('n'), var.get('matchStr'))
                    if PyJsStrictEq(var.get('matchStr'),Js('')):
                        var.get('rx').put('lastIndex', var.get('advanceStringIndex')(var.get('S'), var.get('toLength')(var.get('rx').get('lastIndex')), var.get('fullUnicode')))
                    (var.put('n',Js(var.get('n').to_number())+Js(1))-Js(1))
                return (var.get(u"null") if PyJsStrictEq(var.get('n'),Js(0.0)) else var.get('A'))
            PyJs_anonymous_1425_._set_name('anonymous')
            return Js([PyJs_match_1424_, PyJs_anonymous_1425_])
        PyJs_anonymous_1423_._set_name('anonymous')
        var.get('require')(Js('./_fix-re-wks'))(Js('match'), Js(1.0), PyJs_anonymous_1423_)
    PyJs_anonymous_1422_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1426_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['SUBSTITUTION_SYMBOLS_NO_NAMED', 'toObject', 'module', 'regExpExec', 'exports', 'toInteger', 'max', 'min', 'advanceStringIndex', 'anObject', 'SUBSTITUTION_SYMBOLS', 'maybeToString', 'require', 'floor', 'toLength'])
        Js('use strict')
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('toInteger', var.get('require')(Js('./_to-integer')))
        var.put('advanceStringIndex', var.get('require')(Js('./_advance-string-index')))
        var.put('regExpExec', var.get('require')(Js('./_regexp-exec-abstract')))
        var.put('max', var.get('Math').get('max'))
        var.put('min', var.get('Math').get('min'))
        var.put('floor', var.get('Math').get('floor'))
        var.put('SUBSTITUTION_SYMBOLS', JsRegExp("/\\$([$&`']|\\d\\d?|<[^>]*>)/g"))
        var.put('SUBSTITUTION_SYMBOLS_NO_NAMED', JsRegExp("/\\$([$&`']|\\d\\d?)/g"))
        @Js
        def PyJs_maybeToString_1427_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'maybeToString':PyJs_maybeToString_1427_}, var)
            var.registers(['it'])
            return (var.get('it') if PyJsStrictEq(var.get('it'),var.get('undefined')) else var.get('String')(var.get('it')))
        PyJs_maybeToString_1427_._set_name('maybeToString')
        var.put('maybeToString', PyJs_maybeToString_1427_)
        @Js
        def PyJs_anonymous_1428_(defined, REPLACE, PyJsArg_247265706c616365_, maybeCallNative, this, arguments, var=var):
            var = Scope({'defined':defined, 'REPLACE':REPLACE, '$replace':PyJsArg_247265706c616365_, 'maybeCallNative':maybeCallNative, 'this':this, 'arguments':arguments}, var)
            var.registers(['maybeCallNative', 'getSubstitution', '$replace', 'defined', 'REPLACE'])
            @Js
            def PyJsHoisted_getSubstitution_(matched, str, position, captures, namedCaptures, replacement, this, arguments, var=var):
                var = Scope({'matched':matched, 'str':str, 'position':position, 'captures':captures, 'namedCaptures':namedCaptures, 'replacement':replacement, 'this':this, 'arguments':arguments}, var)
                var.registers(['replacement', 'str', 'captures', 'm', 'position', 'symbols', 'namedCaptures', 'matched', 'tailPos'])
                var.put('tailPos', (var.get('position')+var.get('matched').get('length')))
                var.put('m', var.get('captures').get('length'))
                var.put('symbols', var.get('SUBSTITUTION_SYMBOLS_NO_NAMED'))
                if PyJsStrictNeq(var.get('namedCaptures'),var.get('undefined')):
                    var.put('namedCaptures', var.get('toObject')(var.get('namedCaptures')))
                    var.put('symbols', var.get('SUBSTITUTION_SYMBOLS'))
                @Js
                def PyJs_anonymous_1431_(match, ch, this, arguments, var=var):
                    var = Scope({'match':match, 'ch':ch, 'this':this, 'arguments':arguments}, var)
                    var.registers(['n', 'match', 'ch', 'capture', 'f'])
                    pass
                    while 1:
                        SWITCHED = False
                        CONDITION = (var.get('ch').callprop('charAt', Js(0.0)))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('$')):
                            SWITCHED = True
                            return Js('$')
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('&')):
                            SWITCHED = True
                            return var.get('matched')
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('`')):
                            SWITCHED = True
                            return var.get('str').callprop('slice', Js(0.0), var.get('position'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js("'")):
                            SWITCHED = True
                            return var.get('str').callprop('slice', var.get('tailPos'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('<')):
                            SWITCHED = True
                            var.put('capture', var.get('namedCaptures').get(var.get('ch').callprop('slice', Js(1.0), (-Js(1.0)))))
                            break
                        if True:
                            SWITCHED = True
                            var.put('n', (+var.get('ch')))
                            if PyJsStrictEq(var.get('n'),Js(0.0)):
                                return var.get('match')
                            if (var.get('n')>var.get('m')):
                                var.put('f', var.get('floor')((var.get('n')/Js(10.0))))
                                if PyJsStrictEq(var.get('f'),Js(0.0)):
                                    return var.get('match')
                                if (var.get('f')<=var.get('m')):
                                    return (var.get('ch').callprop('charAt', Js(1.0)) if PyJsStrictEq(var.get('captures').get((var.get('f')-Js(1.0))),var.get('undefined')) else (var.get('captures').get((var.get('f')-Js(1.0)))+var.get('ch').callprop('charAt', Js(1.0))))
                                return var.get('match')
                            var.put('capture', var.get('captures').get((var.get('n')-Js(1.0))))
                        SWITCHED = True
                        break
                    return (Js('') if PyJsStrictEq(var.get('capture'),var.get('undefined')) else var.get('capture'))
                PyJs_anonymous_1431_._set_name('anonymous')
                return var.get('$replace').callprop('call', var.get('replacement'), var.get('symbols'), PyJs_anonymous_1431_)
            PyJsHoisted_getSubstitution_.func_name = 'getSubstitution'
            var.put('getSubstitution', PyJsHoisted_getSubstitution_)
            @Js
            def PyJs_replace_1429_(searchValue, replaceValue, this, arguments, var=var):
                var = Scope({'searchValue':searchValue, 'replaceValue':replaceValue, 'this':this, 'arguments':arguments, 'replace':PyJs_replace_1429_}, var)
                var.registers(['O', 'replaceValue', 'fn', 'searchValue'])
                var.put('O', var.get('defined')(var.get(u"this")))
                var.put('fn', (var.get('undefined') if (var.get('searchValue')==var.get('undefined')) else var.get('searchValue').get(var.get('REPLACE'))))
                return (var.get('fn').callprop('call', var.get('searchValue'), var.get('O'), var.get('replaceValue')) if PyJsStrictNeq(var.get('fn'),var.get('undefined')) else var.get('$replace').callprop('call', var.get('String')(var.get('O')), var.get('searchValue'), var.get('replaceValue')))
            PyJs_replace_1429_._set_name('replace')
            @Js
            def PyJs_anonymous_1430_(regexp, replaceValue, this, arguments, var=var):
                var = Scope({'regexp':regexp, 'replaceValue':replaceValue, 'this':this, 'arguments':arguments}, var)
                var.registers(['fullUnicode', 'rx', 'global', 'functionalReplace', 'i', 'matchStr', 'position', 'res', 'result', 'matched', 'j', 'captures', 'S', 'results', 'namedCaptures', 'replacement', 'replacerArgs', 'regexp', 'nextSourcePosition', 'accumulatedResult', 'replaceValue'])
                var.put('res', var.get('maybeCallNative')(var.get('$replace'), var.get('regexp'), var.get(u"this"), var.get('replaceValue')))
                if var.get('res').get('done'):
                    return var.get('res').get('value')
                var.put('rx', var.get('anObject')(var.get('regexp')))
                var.put('S', var.get('String')(var.get(u"this")))
                var.put('functionalReplace', PyJsStrictEq(var.get('replaceValue',throw=False).typeof(),Js('function')))
                if var.get('functionalReplace').neg():
                    var.put('replaceValue', var.get('String')(var.get('replaceValue')))
                var.put('global', var.get('rx').get('global'))
                if var.get('global'):
                    var.put('fullUnicode', var.get('rx').get('unicode'))
                    var.get('rx').put('lastIndex', Js(0.0))
                var.put('results', Js([]))
                while Js(True):
                    var.put('result', var.get('regExpExec')(var.get('rx'), var.get('S')))
                    if PyJsStrictEq(var.get('result'),var.get(u"null")):
                        break
                    var.get('results').callprop('push', var.get('result'))
                    if var.get('global').neg():
                        break
                    var.put('matchStr', var.get('String')(var.get('result').get('0')))
                    if PyJsStrictEq(var.get('matchStr'),Js('')):
                        var.get('rx').put('lastIndex', var.get('advanceStringIndex')(var.get('S'), var.get('toLength')(var.get('rx').get('lastIndex')), var.get('fullUnicode')))
                var.put('accumulatedResult', Js(''))
                var.put('nextSourcePosition', Js(0.0))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('results').get('length')):
                    try:
                        var.put('result', var.get('results').get(var.get('i')))
                        var.put('matched', var.get('String')(var.get('result').get('0')))
                        var.put('position', var.get('max')(var.get('min')(var.get('toInteger')(var.get('result').get('index')), var.get('S').get('length')), Js(0.0)))
                        var.put('captures', Js([]))
                        #for JS loop
                        var.put('j', Js(1.0))
                        while (var.get('j')<var.get('result').get('length')):
                            try:
                                var.get('captures').callprop('push', var.get('maybeToString')(var.get('result').get(var.get('j'))))
                            finally:
                                    (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                        var.put('namedCaptures', var.get('result').get('groups'))
                        if var.get('functionalReplace'):
                            var.put('replacerArgs', Js([var.get('matched')]).callprop('concat', var.get('captures'), var.get('position'), var.get('S')))
                            if PyJsStrictNeq(var.get('namedCaptures'),var.get('undefined')):
                                var.get('replacerArgs').callprop('push', var.get('namedCaptures'))
                            var.put('replacement', var.get('String')(var.get('replaceValue').callprop('apply', var.get('undefined'), var.get('replacerArgs'))))
                        else:
                            var.put('replacement', var.get('getSubstitution')(var.get('matched'), var.get('S'), var.get('position'), var.get('captures'), var.get('namedCaptures'), var.get('replaceValue')))
                        if (var.get('position')>=var.get('nextSourcePosition')):
                            var.put('accumulatedResult', (var.get('S').callprop('slice', var.get('nextSourcePosition'), var.get('position'))+var.get('replacement')), '+')
                            var.put('nextSourcePosition', (var.get('position')+var.get('matched').get('length')))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                return (var.get('accumulatedResult')+var.get('S').callprop('slice', var.get('nextSourcePosition')))
            PyJs_anonymous_1430_._set_name('anonymous')
            return Js([PyJs_replace_1429_, PyJs_anonymous_1430_])
            pass
        PyJs_anonymous_1428_._set_name('anonymous')
        var.get('require')(Js('./_fix-re-wks'))(Js('replace'), Js(2.0), PyJs_anonymous_1428_)
    PyJs_anonymous_1426_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1432_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['sameValue', 'module', 'regExpExec', 'exports', 'anObject', 'require'])
        Js('use strict')
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('sameValue', var.get('require')(Js('./_same-value')))
        var.put('regExpExec', var.get('require')(Js('./_regexp-exec-abstract')))
        @Js
        def PyJs_anonymous_1433_(defined, SEARCH, PyJsArg_24736561726368_, maybeCallNative, this, arguments, var=var):
            var = Scope({'defined':defined, 'SEARCH':SEARCH, '$search':PyJsArg_24736561726368_, 'maybeCallNative':maybeCallNative, 'this':this, 'arguments':arguments}, var)
            var.registers(['SEARCH', 'defined', 'maybeCallNative', '$search'])
            @Js
            def PyJs_search_1434_(regexp, this, arguments, var=var):
                var = Scope({'regexp':regexp, 'this':this, 'arguments':arguments, 'search':PyJs_search_1434_}, var)
                var.registers(['O', 'regexp', 'fn'])
                var.put('O', var.get('defined')(var.get(u"this")))
                var.put('fn', (var.get('undefined') if (var.get('regexp')==var.get('undefined')) else var.get('regexp').get(var.get('SEARCH'))))
                return (var.get('fn').callprop('call', var.get('regexp'), var.get('O')) if PyJsStrictNeq(var.get('fn'),var.get('undefined')) else var.get('RegExp').create(var.get('regexp')).callprop(var.get('SEARCH'), var.get('String')(var.get('O'))))
            PyJs_search_1434_._set_name('search')
            @Js
            def PyJs_anonymous_1435_(regexp, this, arguments, var=var):
                var = Scope({'regexp':regexp, 'this':this, 'arguments':arguments}, var)
                var.registers(['rx', 'S', 'previousLastIndex', 'regexp', 'res', 'result'])
                var.put('res', var.get('maybeCallNative')(var.get('$search'), var.get('regexp'), var.get(u"this")))
                if var.get('res').get('done'):
                    return var.get('res').get('value')
                var.put('rx', var.get('anObject')(var.get('regexp')))
                var.put('S', var.get('String')(var.get(u"this")))
                var.put('previousLastIndex', var.get('rx').get('lastIndex'))
                if var.get('sameValue')(var.get('previousLastIndex'), Js(0.0)).neg():
                    var.get('rx').put('lastIndex', Js(0.0))
                var.put('result', var.get('regExpExec')(var.get('rx'), var.get('S')))
                if var.get('sameValue')(var.get('rx').get('lastIndex'), var.get('previousLastIndex')).neg():
                    var.get('rx').put('lastIndex', var.get('previousLastIndex'))
                return ((-Js(1.0)) if PyJsStrictEq(var.get('result'),var.get(u"null")) else var.get('result').get('index'))
            PyJs_anonymous_1435_._set_name('anonymous')
            return Js([PyJs_search_1434_, PyJs_anonymous_1435_])
        PyJs_anonymous_1433_._set_name('anonymous')
        var.get('require')(Js('./_fix-re-wks'))(Js('search'), Js(1.0), PyJs_anonymous_1433_)
    PyJs_anonymous_1432_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1436_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['speciesConstructor', 'LAST_INDEX', 'fails', 'module', 'regexpExec', '$push', 'exports', '$min', '$SPLIT', 'LENGTH', 'MAX_UINT32', 'advanceStringIndex', 'anObject', 'require', 'callRegExpExec', 'toLength', 'isRegExp', 'SUPPORTS_Y'])
        Js('use strict')
        var.put('isRegExp', var.get('require')(Js('./_is-regexp')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('speciesConstructor', var.get('require')(Js('./_species-constructor')))
        var.put('advanceStringIndex', var.get('require')(Js('./_advance-string-index')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('callRegExpExec', var.get('require')(Js('./_regexp-exec-abstract')))
        var.put('regexpExec', var.get('require')(Js('./_regexp-exec')))
        var.put('fails', var.get('require')(Js('./_fails')))
        var.put('$min', var.get('Math').get('min'))
        var.put('$push', Js([]).get('push'))
        var.put('$SPLIT', Js('split'))
        var.put('LENGTH', Js('length'))
        var.put('LAST_INDEX', Js('lastIndex'))
        var.put('MAX_UINT32', Js(4294967295))
        @Js
        def PyJs_anonymous_1437_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('RegExp')(var.get('MAX_UINT32'), Js('y'))
        PyJs_anonymous_1437_._set_name('anonymous')
        var.put('SUPPORTS_Y', var.get('fails')(PyJs_anonymous_1437_).neg())
        @Js
        def PyJs_anonymous_1438_(defined, SPLIT, PyJsArg_2473706c6974_, maybeCallNative, this, arguments, var=var):
            var = Scope({'defined':defined, 'SPLIT':SPLIT, '$split':PyJsArg_2473706c6974_, 'maybeCallNative':maybeCallNative, 'this':this, 'arguments':arguments}, var)
            var.registers(['SPLIT', 'maybeCallNative', 'defined', 'internalSplit', '$split'])
            pass
            def PyJs_LONG_1439_(var=var):
                return (((((Js('abbc').callprop(var.get('$SPLIT'), JsRegExp('/(b)*/')).get('1')==Js('c')) or (Js('test').callprop(var.get('$SPLIT'), JsRegExp('/(?:)/'), (-Js(1.0))).get(var.get('LENGTH'))!=Js(4.0))) or (Js('ab').callprop(var.get('$SPLIT'), JsRegExp('/(?:ab)*/')).get(var.get('LENGTH'))!=Js(2.0))) or (Js('.').callprop(var.get('$SPLIT'), JsRegExp('/(.?)(.?)/')).get(var.get('LENGTH'))!=Js(4.0))) or (Js('.').callprop(var.get('$SPLIT'), JsRegExp('/()()/')).get(var.get('LENGTH'))>Js(1.0)))
            if (PyJs_LONG_1439_() or Js('').callprop(var.get('$SPLIT'), JsRegExp('/.?/')).get(var.get('LENGTH'))):
                @Js
                def PyJs_internalSplit_1440_(separator, limit, this, arguments, var=var):
                    var = Scope({'separator':separator, 'limit':limit, 'this':this, 'arguments':arguments, 'internalSplit':PyJs_internalSplit_1440_}, var)
                    var.registers(['lastLastIndex', 'flags', 'match', 'separator', 'string', 'lastIndex', 'lastLength', 'separatorCopy', 'limit', 'splitLimit', 'output'])
                    var.put('string', var.get('String')(var.get(u"this")))
                    if (PyJsStrictEq(var.get('separator'),var.get('undefined')) and PyJsStrictEq(var.get('limit'),Js(0.0))):
                        return Js([])
                    if var.get('isRegExp')(var.get('separator')).neg():
                        return var.get('$split').callprop('call', var.get('string'), var.get('separator'), var.get('limit'))
                    var.put('output', Js([]))
                    var.put('flags', ((((Js('i') if var.get('separator').get('ignoreCase') else Js(''))+(Js('m') if var.get('separator').get('multiline') else Js('')))+(Js('u') if var.get('separator').get('unicode') else Js('')))+(Js('y') if var.get('separator').get('sticky') else Js(''))))
                    var.put('lastLastIndex', Js(0.0))
                    var.put('splitLimit', (var.get('MAX_UINT32') if PyJsStrictEq(var.get('limit'),var.get('undefined')) else PyJsBshift(var.get('limit'),Js(0.0))))
                    var.put('separatorCopy', var.get('RegExp').create(var.get('separator').get('source'), (var.get('flags')+Js('g'))))
                    pass
                    while var.put('match', var.get('regexpExec').callprop('call', var.get('separatorCopy'), var.get('string'))):
                        var.put('lastIndex', var.get('separatorCopy').get(var.get('LAST_INDEX')))
                        if (var.get('lastIndex')>var.get('lastLastIndex')):
                            var.get('output').callprop('push', var.get('string').callprop('slice', var.get('lastLastIndex'), var.get('match').get('index')))
                            if ((var.get('match').get(var.get('LENGTH'))>Js(1.0)) and (var.get('match').get('index')<var.get('string').get(var.get('LENGTH')))):
                                var.get('$push').callprop('apply', var.get('output'), var.get('match').callprop('slice', Js(1.0)))
                            var.put('lastLength', var.get('match').get('0').get(var.get('LENGTH')))
                            var.put('lastLastIndex', var.get('lastIndex'))
                            if (var.get('output').get(var.get('LENGTH'))>=var.get('splitLimit')):
                                break
                        if PyJsStrictEq(var.get('separatorCopy').get(var.get('LAST_INDEX')),var.get('match').get('index')):
                            (var.get('separatorCopy').put(var.get('LAST_INDEX'),Js(var.get('separatorCopy').get(var.get('LAST_INDEX')).to_number())+Js(1))-Js(1))
                    if PyJsStrictEq(var.get('lastLastIndex'),var.get('string').get(var.get('LENGTH'))):
                        if (var.get('lastLength') or var.get('separatorCopy').callprop('test', Js('')).neg()):
                            var.get('output').callprop('push', Js(''))
                    else:
                        var.get('output').callprop('push', var.get('string').callprop('slice', var.get('lastLastIndex')))
                    return (var.get('output').callprop('slice', Js(0.0), var.get('splitLimit')) if (var.get('output').get(var.get('LENGTH'))>var.get('splitLimit')) else var.get('output'))
                PyJs_internalSplit_1440_._set_name('internalSplit')
                var.put('internalSplit', PyJs_internalSplit_1440_)
            else:
                if Js('0').callprop(var.get('$SPLIT'), var.get('undefined'), Js(0.0)).get(var.get('LENGTH')):
                    @Js
                    def PyJs_internalSplit_1441_(separator, limit, this, arguments, var=var):
                        var = Scope({'separator':separator, 'limit':limit, 'this':this, 'arguments':arguments, 'internalSplit':PyJs_internalSplit_1441_}, var)
                        var.registers(['limit', 'separator'])
                        return (Js([]) if (PyJsStrictEq(var.get('separator'),var.get('undefined')) and PyJsStrictEq(var.get('limit'),Js(0.0))) else var.get('$split').callprop('call', var.get(u"this"), var.get('separator'), var.get('limit')))
                    PyJs_internalSplit_1441_._set_name('internalSplit')
                    var.put('internalSplit', PyJs_internalSplit_1441_)
                else:
                    var.put('internalSplit', var.get('$split'))
            @Js
            def PyJs_split_1442_(separator, limit, this, arguments, var=var):
                var = Scope({'separator':separator, 'limit':limit, 'this':this, 'arguments':arguments, 'split':PyJs_split_1442_}, var)
                var.registers(['O', 'limit', 'separator', 'splitter'])
                var.put('O', var.get('defined')(var.get(u"this")))
                var.put('splitter', (var.get('undefined') if (var.get('separator')==var.get('undefined')) else var.get('separator').get(var.get('SPLIT'))))
                return (var.get('splitter').callprop('call', var.get('separator'), var.get('O'), var.get('limit')) if PyJsStrictNeq(var.get('splitter'),var.get('undefined')) else var.get('internalSplit').callprop('call', var.get('String')(var.get('O')), var.get('separator'), var.get('limit')))
            PyJs_split_1442_._set_name('split')
            @Js
            def PyJs_anonymous_1443_(regexp, limit, this, arguments, var=var):
                var = Scope({'regexp':regexp, 'limit':limit, 'this':this, 'arguments':arguments}, var)
                var.registers(['rx', 'p', 'i', 'flags', 'S', 'lim', 'e', 'regexp', 'q', 'res', 'A', 'C', 'z', 'limit', 'unicodeMatching', 'splitter'])
                var.put('res', var.get('maybeCallNative')(var.get('internalSplit'), var.get('regexp'), var.get(u"this"), var.get('limit'), PyJsStrictNeq(var.get('internalSplit'),var.get('$split'))))
                if var.get('res').get('done'):
                    return var.get('res').get('value')
                var.put('rx', var.get('anObject')(var.get('regexp')))
                var.put('S', var.get('String')(var.get(u"this")))
                var.put('C', var.get('speciesConstructor')(var.get('rx'), var.get('RegExp')))
                var.put('unicodeMatching', var.get('rx').get('unicode'))
                var.put('flags', ((((Js('i') if var.get('rx').get('ignoreCase') else Js(''))+(Js('m') if var.get('rx').get('multiline') else Js('')))+(Js('u') if var.get('rx').get('unicode') else Js('')))+(Js('y') if var.get('SUPPORTS_Y') else Js('g'))))
                var.put('splitter', var.get('C').create((var.get('rx') if var.get('SUPPORTS_Y') else ((Js('^(?:')+var.get('rx').get('source'))+Js(')'))), var.get('flags')))
                var.put('lim', (var.get('MAX_UINT32') if PyJsStrictEq(var.get('limit'),var.get('undefined')) else PyJsBshift(var.get('limit'),Js(0.0))))
                if PyJsStrictEq(var.get('lim'),Js(0.0)):
                    return Js([])
                if PyJsStrictEq(var.get('S').get('length'),Js(0.0)):
                    return (Js([var.get('S')]) if PyJsStrictEq(var.get('callRegExpExec')(var.get('splitter'), var.get('S')),var.get(u"null")) else Js([]))
                var.put('p', Js(0.0))
                var.put('q', Js(0.0))
                var.put('A', Js([]))
                while (var.get('q')<var.get('S').get('length')):
                    var.get('splitter').put('lastIndex', (var.get('q') if var.get('SUPPORTS_Y') else Js(0.0)))
                    var.put('z', var.get('callRegExpExec')(var.get('splitter'), (var.get('S') if var.get('SUPPORTS_Y') else var.get('S').callprop('slice', var.get('q')))))
                    pass
                    if (PyJsStrictEq(var.get('z'),var.get(u"null")) or PyJsStrictEq(var.put('e', var.get('$min')(var.get('toLength')((var.get('splitter').get('lastIndex')+(Js(0.0) if var.get('SUPPORTS_Y') else var.get('q')))), var.get('S').get('length'))),var.get('p'))):
                        var.put('q', var.get('advanceStringIndex')(var.get('S'), var.get('q'), var.get('unicodeMatching')))
                    else:
                        var.get('A').callprop('push', var.get('S').callprop('slice', var.get('p'), var.get('q')))
                        if PyJsStrictEq(var.get('A').get('length'),var.get('lim')):
                            return var.get('A')
                        #for JS loop
                        var.put('i', Js(1.0))
                        while (var.get('i')<=(var.get('z').get('length')-Js(1.0))):
                            try:
                                var.get('A').callprop('push', var.get('z').get(var.get('i')))
                                if PyJsStrictEq(var.get('A').get('length'),var.get('lim')):
                                    return var.get('A')
                            finally:
                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                        var.put('q', var.put('p', var.get('e')))
                var.get('A').callprop('push', var.get('S').callprop('slice', var.get('p')))
                return var.get('A')
            PyJs_anonymous_1443_._set_name('anonymous')
            return Js([PyJs_split_1442_, PyJs_anonymous_1443_])
        PyJs_anonymous_1438_._set_name('anonymous')
        var.get('require')(Js('./_fix-re-wks'))(Js('split'), Js(2.0), PyJs_anonymous_1438_)
    PyJs_anonymous_1436_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1444_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['define', 'module', 'TO_STRING', '$flags', 'exports', '$toString', 'anObject', 'DESCRIPTORS', 'require'])
        Js('use strict')
        var.get('require')(Js('./es6.regexp.flags'))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('$flags', var.get('require')(Js('./_flags')))
        var.put('DESCRIPTORS', var.get('require')(Js('./_descriptors')))
        var.put('TO_STRING', Js('toString'))
        var.put('$toString', JsRegExp('/./').get(var.get('TO_STRING')))
        @Js
        def PyJs_define_1445_(fn, this, arguments, var=var):
            var = Scope({'fn':fn, 'this':this, 'arguments':arguments, 'define':PyJs_define_1445_}, var)
            var.registers(['fn'])
            var.get('require')(Js('./_redefine'))(var.get('RegExp').get('prototype'), var.get('TO_STRING'), var.get('fn'), Js(True))
        PyJs_define_1445_._set_name('define')
        var.put('define', PyJs_define_1445_)
        @Js
        def PyJs_anonymous_1446_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return (var.get('$toString').callprop('call', Js({'source':Js('a'),'flags':Js('b')}))!=Js('/a/b'))
        PyJs_anonymous_1446_._set_name('anonymous')
        if var.get('require')(Js('./_fails'))(PyJs_anonymous_1446_):
            @Js
            def PyJs_toString_1447_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'toString':PyJs_toString_1447_}, var)
                var.registers(['R'])
                var.put('R', var.get('anObject')(var.get(u"this")))
                return Js('/').callprop('concat', var.get('R').get('source'), Js('/'), (var.get('R').get('flags') if var.get('R').contains(Js('flags')) else (var.get('$flags').callprop('call', var.get('R')) if (var.get('DESCRIPTORS').neg() and var.get('R').instanceof(var.get('RegExp'))) else var.get('undefined'))))
            PyJs_toString_1447_._set_name('toString')
            var.get('define')(PyJs_toString_1447_)
        else:
            if (var.get('$toString').get('name')!=var.get('TO_STRING')):
                @Js
                def PyJs_toString_1448_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'toString':PyJs_toString_1448_}, var)
                    var.registers([])
                    return var.get('$toString').callprop('call', var.get(u"this"))
                PyJs_toString_1448_._set_name('toString')
                var.get('define')(PyJs_toString_1448_)
    PyJs_anonymous_1444_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1449_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'SET', 'validate', 'require', 'strong'])
        Js('use strict')
        var.put('strong', var.get('require')(Js('./_collection-strong')))
        var.put('validate', var.get('require')(Js('./_validate-collection')))
        var.put('SET', Js('Set'))
        @Js
        def PyJs_anonymous_1450_(get, this, arguments, var=var):
            var = Scope({'get':get, 'this':this, 'arguments':arguments}, var)
            var.registers(['get'])
            @Js
            def PyJs_Set_1451_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'Set':PyJs_Set_1451_}, var)
                var.registers([])
                return var.get('get')(var.get(u"this"), (var.get('arguments').get('0') if (var.get('arguments').get('length')>Js(0.0)) else var.get('undefined')))
            PyJs_Set_1451_._set_name('Set')
            return PyJs_Set_1451_
        PyJs_anonymous_1450_._set_name('anonymous')
        @Js
        def PyJs_add_1452_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments, 'add':PyJs_add_1452_}, var)
            var.registers(['value'])
            return var.get('strong').callprop('def', var.get('validate')(var.get(u"this"), var.get('SET')), var.put('value', (Js(0.0) if PyJsStrictEq(var.get('value'),Js(0.0)) else var.get('value'))), var.get('value'))
        PyJs_add_1452_._set_name('add')
        var.get('module').put('exports', var.get('require')(Js('./_collection'))(var.get('SET'), PyJs_anonymous_1450_, Js({'add':PyJs_add_1452_}), var.get('strong')))
    PyJs_anonymous_1449_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1453_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        Js('use strict')
        @Js
        def PyJs_anonymous_1454_(createHTML, this, arguments, var=var):
            var = Scope({'createHTML':createHTML, 'this':this, 'arguments':arguments}, var)
            var.registers(['createHTML'])
            @Js
            def PyJs_anchor_1455_(name, this, arguments, var=var):
                var = Scope({'name':name, 'this':this, 'arguments':arguments, 'anchor':PyJs_anchor_1455_}, var)
                var.registers(['name'])
                return var.get('createHTML')(var.get(u"this"), Js('a'), Js('name'), var.get('name'))
            PyJs_anchor_1455_._set_name('anchor')
            return PyJs_anchor_1455_
        PyJs_anonymous_1454_._set_name('anonymous')
        var.get('require')(Js('./_string-html'))(Js('anchor'), PyJs_anonymous_1454_)
    PyJs_anonymous_1453_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1456_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        Js('use strict')
        @Js
        def PyJs_anonymous_1457_(createHTML, this, arguments, var=var):
            var = Scope({'createHTML':createHTML, 'this':this, 'arguments':arguments}, var)
            var.registers(['createHTML'])
            @Js
            def PyJs_big_1458_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'big':PyJs_big_1458_}, var)
                var.registers([])
                return var.get('createHTML')(var.get(u"this"), Js('big'), Js(''), Js(''))
            PyJs_big_1458_._set_name('big')
            return PyJs_big_1458_
        PyJs_anonymous_1457_._set_name('anonymous')
        var.get('require')(Js('./_string-html'))(Js('big'), PyJs_anonymous_1457_)
    PyJs_anonymous_1456_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1459_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        Js('use strict')
        @Js
        def PyJs_anonymous_1460_(createHTML, this, arguments, var=var):
            var = Scope({'createHTML':createHTML, 'this':this, 'arguments':arguments}, var)
            var.registers(['createHTML'])
            @Js
            def PyJs_blink_1461_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'blink':PyJs_blink_1461_}, var)
                var.registers([])
                return var.get('createHTML')(var.get(u"this"), Js('blink'), Js(''), Js(''))
            PyJs_blink_1461_._set_name('blink')
            return PyJs_blink_1461_
        PyJs_anonymous_1460_._set_name('anonymous')
        var.get('require')(Js('./_string-html'))(Js('blink'), PyJs_anonymous_1460_)
    PyJs_anonymous_1459_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1462_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        Js('use strict')
        @Js
        def PyJs_anonymous_1463_(createHTML, this, arguments, var=var):
            var = Scope({'createHTML':createHTML, 'this':this, 'arguments':arguments}, var)
            var.registers(['createHTML'])
            @Js
            def PyJs_bold_1464_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'bold':PyJs_bold_1464_}, var)
                var.registers([])
                return var.get('createHTML')(var.get(u"this"), Js('b'), Js(''), Js(''))
            PyJs_bold_1464_._set_name('bold')
            return PyJs_bold_1464_
        PyJs_anonymous_1463_._set_name('anonymous')
        var.get('require')(Js('./_string-html'))(Js('bold'), PyJs_anonymous_1463_)
    PyJs_anonymous_1462_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1465_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', 'require', '$at'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$at', var.get('require')(Js('./_string-at'))(Js(False)))
        @Js
        def PyJs_codePointAt_1466_(pos, this, arguments, var=var):
            var = Scope({'pos':pos, 'this':this, 'arguments':arguments, 'codePointAt':PyJs_codePointAt_1466_}, var)
            var.registers(['pos'])
            return var.get('$at')(var.get(u"this"), var.get('pos'))
        PyJs_codePointAt_1466_._set_name('codePointAt')
        var.get('$export')(var.get('$export').get('P'), Js('String'), Js({'codePointAt':PyJs_codePointAt_1466_}))
    PyJs_anonymous_1465_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1467_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['context', 'module', '$export', 'exports', '$endsWith', 'ENDS_WITH', 'require', 'toLength'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('context', var.get('require')(Js('./_string-context')))
        var.put('ENDS_WITH', Js('endsWith'))
        var.put('$endsWith', Js('').get(var.get('ENDS_WITH')))
        @Js
        def PyJs_endsWith_1468_(searchString, this, arguments, var=var):
            var = Scope({'searchString':searchString, 'this':this, 'arguments':arguments, 'endsWith':PyJs_endsWith_1468_}, var)
            var.registers(['len', 'endPosition', 'end', 'that', 'searchString', 'search'])
            var.put('that', var.get('context')(var.get(u"this"), var.get('searchString'), var.get('ENDS_WITH')))
            var.put('endPosition', (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
            var.put('len', var.get('toLength')(var.get('that').get('length')))
            var.put('end', (var.get('len') if PyJsStrictEq(var.get('endPosition'),var.get('undefined')) else var.get('Math').callprop('min', var.get('toLength')(var.get('endPosition')), var.get('len'))))
            var.put('search', var.get('String')(var.get('searchString')))
            return (var.get('$endsWith').callprop('call', var.get('that'), var.get('search'), var.get('end')) if var.get('$endsWith') else PyJsStrictEq(var.get('that').callprop('slice', (var.get('end')-var.get('search').get('length')), var.get('end')),var.get('search')))
        PyJs_endsWith_1468_._set_name('endsWith')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('require')(Js('./_fails-is-regexp'))(var.get('ENDS_WITH')))), Js('String'), Js({'endsWith':PyJs_endsWith_1468_}))
    PyJs_anonymous_1467_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1469_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        Js('use strict')
        @Js
        def PyJs_anonymous_1470_(createHTML, this, arguments, var=var):
            var = Scope({'createHTML':createHTML, 'this':this, 'arguments':arguments}, var)
            var.registers(['createHTML'])
            @Js
            def PyJs_fixed_1471_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'fixed':PyJs_fixed_1471_}, var)
                var.registers([])
                return var.get('createHTML')(var.get(u"this"), Js('tt'), Js(''), Js(''))
            PyJs_fixed_1471_._set_name('fixed')
            return PyJs_fixed_1471_
        PyJs_anonymous_1470_._set_name('anonymous')
        var.get('require')(Js('./_string-html'))(Js('fixed'), PyJs_anonymous_1470_)
    PyJs_anonymous_1469_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1472_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        Js('use strict')
        @Js
        def PyJs_anonymous_1473_(createHTML, this, arguments, var=var):
            var = Scope({'createHTML':createHTML, 'this':this, 'arguments':arguments}, var)
            var.registers(['createHTML'])
            @Js
            def PyJs_fontcolor_1474_(color, this, arguments, var=var):
                var = Scope({'color':color, 'this':this, 'arguments':arguments, 'fontcolor':PyJs_fontcolor_1474_}, var)
                var.registers(['color'])
                return var.get('createHTML')(var.get(u"this"), Js('font'), Js('color'), var.get('color'))
            PyJs_fontcolor_1474_._set_name('fontcolor')
            return PyJs_fontcolor_1474_
        PyJs_anonymous_1473_._set_name('anonymous')
        var.get('require')(Js('./_string-html'))(Js('fontcolor'), PyJs_anonymous_1473_)
    PyJs_anonymous_1472_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1475_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        Js('use strict')
        @Js
        def PyJs_anonymous_1476_(createHTML, this, arguments, var=var):
            var = Scope({'createHTML':createHTML, 'this':this, 'arguments':arguments}, var)
            var.registers(['createHTML'])
            @Js
            def PyJs_fontsize_1477_(size, this, arguments, var=var):
                var = Scope({'size':size, 'this':this, 'arguments':arguments, 'fontsize':PyJs_fontsize_1477_}, var)
                var.registers(['size'])
                return var.get('createHTML')(var.get(u"this"), Js('font'), Js('size'), var.get('size'))
            PyJs_fontsize_1477_._set_name('fontsize')
            return PyJs_fontsize_1477_
        PyJs_anonymous_1476_._set_name('anonymous')
        var.get('require')(Js('./_string-html'))(Js('fontsize'), PyJs_anonymous_1476_)
    PyJs_anonymous_1475_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1478_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['fromCharCode', 'module', '$export', 'exports', '$fromCodePoint', 'toAbsoluteIndex', 'require'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('toAbsoluteIndex', var.get('require')(Js('./_to-absolute-index')))
        var.put('fromCharCode', var.get('String').get('fromCharCode'))
        var.put('$fromCodePoint', var.get('String').get('fromCodePoint'))
        @Js
        def PyJs_fromCodePoint_1479_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'fromCodePoint':PyJs_fromCodePoint_1479_}, var)
            var.registers(['x', 'i', 'aLen', 'code', 'res'])
            var.put('res', Js([]))
            var.put('aLen', var.get('arguments').get('length'))
            var.put('i', Js(0.0))
            pass
            while (var.get('aLen')>var.get('i')):
                var.put('code', (+var.get('arguments').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)))))
                if PyJsStrictNeq(var.get('toAbsoluteIndex')(var.get('code'), Js(1114111)),var.get('code')):
                    PyJsTempException = JsToPyException(var.get('RangeError')((var.get('code')+Js(' is not a valid code point'))))
                    raise PyJsTempException
                var.get('res').callprop('push', (var.get('fromCharCode')(var.get('code')) if (var.get('code')<Js(65536)) else var.get('fromCharCode')(((var.put('code', Js(65536), '-')>>Js(10.0))+Js(55296)), ((var.get('code')%Js(1024))+Js(56320)))))
            return var.get('res').callprop('join', Js(''))
        PyJs_fromCodePoint_1479_._set_name('fromCodePoint')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*(var.get('$fromCodePoint').neg().neg() and (var.get('$fromCodePoint').get('length')!=Js(1.0))))), Js('String'), Js({'fromCodePoint':PyJs_fromCodePoint_1479_}))
    PyJs_anonymous_1478_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1480_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['context', 'module', '$export', 'INCLUDES', 'exports', 'require'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('context', var.get('require')(Js('./_string-context')))
        var.put('INCLUDES', Js('includes'))
        @Js
        def PyJs_includes_1481_(searchString, this, arguments, var=var):
            var = Scope({'searchString':searchString, 'this':this, 'arguments':arguments, 'includes':PyJs_includes_1481_}, var)
            var.registers(['searchString'])
            return (~var.get('context')(var.get(u"this"), var.get('searchString'), var.get('INCLUDES')).callprop('indexOf', var.get('searchString'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))).neg().neg()
        PyJs_includes_1481_._set_name('includes')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('require')(Js('./_fails-is-regexp'))(var.get('INCLUDES')))), Js('String'), Js({'includes':PyJs_includes_1481_}))
    PyJs_anonymous_1480_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1482_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        Js('use strict')
        @Js
        def PyJs_anonymous_1483_(createHTML, this, arguments, var=var):
            var = Scope({'createHTML':createHTML, 'this':this, 'arguments':arguments}, var)
            var.registers(['createHTML'])
            @Js
            def PyJs_italics_1484_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'italics':PyJs_italics_1484_}, var)
                var.registers([])
                return var.get('createHTML')(var.get(u"this"), Js('i'), Js(''), Js(''))
            PyJs_italics_1484_._set_name('italics')
            return PyJs_italics_1484_
        PyJs_anonymous_1483_._set_name('anonymous')
        var.get('require')(Js('./_string-html'))(Js('italics'), PyJs_anonymous_1483_)
    PyJs_anonymous_1482_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1485_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$at', 'exports'])
        Js('use strict')
        var.put('$at', var.get('require')(Js('./_string-at'))(Js(True)))
        @Js
        def PyJs_anonymous_1486_(iterated, this, arguments, var=var):
            var = Scope({'iterated':iterated, 'this':this, 'arguments':arguments}, var)
            var.registers(['iterated'])
            var.get(u"this").put('_t', var.get('String')(var.get('iterated')))
            var.get(u"this").put('_i', Js(0.0))
        PyJs_anonymous_1486_._set_name('anonymous')
        @Js
        def PyJs_anonymous_1487_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['O', 'index', 'point'])
            var.put('O', var.get(u"this").get('_t'))
            var.put('index', var.get(u"this").get('_i'))
            pass
            if (var.get('index')>=var.get('O').get('length')):
                return Js({'value':var.get('undefined'),'done':Js(True)})
            var.put('point', var.get('$at')(var.get('O'), var.get('index')))
            var.get(u"this").put('_i', var.get('point').get('length'), '+')
            return Js({'value':var.get('point'),'done':Js(False)})
        PyJs_anonymous_1487_._set_name('anonymous')
        var.get('require')(Js('./_iter-define'))(var.get('String'), Js('String'), PyJs_anonymous_1486_, PyJs_anonymous_1487_)
    PyJs_anonymous_1485_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1488_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        Js('use strict')
        @Js
        def PyJs_anonymous_1489_(createHTML, this, arguments, var=var):
            var = Scope({'createHTML':createHTML, 'this':this, 'arguments':arguments}, var)
            var.registers(['createHTML'])
            @Js
            def PyJs_link_1490_(url, this, arguments, var=var):
                var = Scope({'url':url, 'this':this, 'arguments':arguments, 'link':PyJs_link_1490_}, var)
                var.registers(['url'])
                return var.get('createHTML')(var.get(u"this"), Js('a'), Js('href'), var.get('url'))
            PyJs_link_1490_._set_name('link')
            return PyJs_link_1490_
        PyJs_anonymous_1489_._set_name('anonymous')
        var.get('require')(Js('./_string-html'))(Js('link'), PyJs_anonymous_1489_)
    PyJs_anonymous_1488_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1491_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', 'toIObject', 'require', 'toLength'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('toIObject', var.get('require')(Js('./_to-iobject')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        @Js
        def PyJs_raw_1492_(callSite, this, arguments, var=var):
            var = Scope({'callSite':callSite, 'this':this, 'arguments':arguments, 'raw':PyJs_raw_1492_}, var)
            var.registers(['len', 'i', 'aLen', 'res', 'callSite', 'tpl'])
            var.put('tpl', var.get('toIObject')(var.get('callSite').get('raw')))
            var.put('len', var.get('toLength')(var.get('tpl').get('length')))
            var.put('aLen', var.get('arguments').get('length'))
            var.put('res', Js([]))
            var.put('i', Js(0.0))
            while (var.get('len')>var.get('i')):
                var.get('res').callprop('push', var.get('String')(var.get('tpl').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)))))
                if (var.get('i')<var.get('aLen')):
                    var.get('res').callprop('push', var.get('String')(var.get('arguments').get(var.get('i'))))
            return var.get('res').callprop('join', Js(''))
        PyJs_raw_1492_._set_name('raw')
        var.get('$export')(var.get('$export').get('S'), Js('String'), Js({'raw':PyJs_raw_1492_}))
    PyJs_anonymous_1491_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1493_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('P'), Js('String'), Js({'repeat':var.get('require')(Js('./_string-repeat'))}))
    PyJs_anonymous_1493_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1494_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        Js('use strict')
        @Js
        def PyJs_anonymous_1495_(createHTML, this, arguments, var=var):
            var = Scope({'createHTML':createHTML, 'this':this, 'arguments':arguments}, var)
            var.registers(['createHTML'])
            @Js
            def PyJs_small_1496_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'small':PyJs_small_1496_}, var)
                var.registers([])
                return var.get('createHTML')(var.get(u"this"), Js('small'), Js(''), Js(''))
            PyJs_small_1496_._set_name('small')
            return PyJs_small_1496_
        PyJs_anonymous_1495_._set_name('anonymous')
        var.get('require')(Js('./_string-html'))(Js('small'), PyJs_anonymous_1495_)
    PyJs_anonymous_1494_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1497_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['context', 'module', '$export', 'exports', '$startsWith', 'STARTS_WITH', 'require', 'toLength'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('context', var.get('require')(Js('./_string-context')))
        var.put('STARTS_WITH', Js('startsWith'))
        var.put('$startsWith', Js('').get(var.get('STARTS_WITH')))
        @Js
        def PyJs_startsWith_1498_(searchString, this, arguments, var=var):
            var = Scope({'searchString':searchString, 'this':this, 'arguments':arguments, 'startsWith':PyJs_startsWith_1498_}, var)
            var.registers(['search', 'index', 'searchString', 'that'])
            var.put('that', var.get('context')(var.get(u"this"), var.get('searchString'), var.get('STARTS_WITH')))
            var.put('index', var.get('toLength')(var.get('Math').callprop('min', (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')), var.get('that').get('length'))))
            var.put('search', var.get('String')(var.get('searchString')))
            return (var.get('$startsWith').callprop('call', var.get('that'), var.get('search'), var.get('index')) if var.get('$startsWith') else PyJsStrictEq(var.get('that').callprop('slice', var.get('index'), (var.get('index')+var.get('search').get('length'))),var.get('search')))
        PyJs_startsWith_1498_._set_name('startsWith')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('require')(Js('./_fails-is-regexp'))(var.get('STARTS_WITH')))), Js('String'), Js({'startsWith':PyJs_startsWith_1498_}))
    PyJs_anonymous_1497_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1499_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        Js('use strict')
        @Js
        def PyJs_anonymous_1500_(createHTML, this, arguments, var=var):
            var = Scope({'createHTML':createHTML, 'this':this, 'arguments':arguments}, var)
            var.registers(['createHTML'])
            @Js
            def PyJs_strike_1501_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'strike':PyJs_strike_1501_}, var)
                var.registers([])
                return var.get('createHTML')(var.get(u"this"), Js('strike'), Js(''), Js(''))
            PyJs_strike_1501_._set_name('strike')
            return PyJs_strike_1501_
        PyJs_anonymous_1500_._set_name('anonymous')
        var.get('require')(Js('./_string-html'))(Js('strike'), PyJs_anonymous_1500_)
    PyJs_anonymous_1499_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1502_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        Js('use strict')
        @Js
        def PyJs_anonymous_1503_(createHTML, this, arguments, var=var):
            var = Scope({'createHTML':createHTML, 'this':this, 'arguments':arguments}, var)
            var.registers(['createHTML'])
            @Js
            def PyJs_sub_1504_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'sub':PyJs_sub_1504_}, var)
                var.registers([])
                return var.get('createHTML')(var.get(u"this"), Js('sub'), Js(''), Js(''))
            PyJs_sub_1504_._set_name('sub')
            return PyJs_sub_1504_
        PyJs_anonymous_1503_._set_name('anonymous')
        var.get('require')(Js('./_string-html'))(Js('sub'), PyJs_anonymous_1503_)
    PyJs_anonymous_1502_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1505_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        Js('use strict')
        @Js
        def PyJs_anonymous_1506_(createHTML, this, arguments, var=var):
            var = Scope({'createHTML':createHTML, 'this':this, 'arguments':arguments}, var)
            var.registers(['createHTML'])
            @Js
            def PyJs_sup_1507_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'sup':PyJs_sup_1507_}, var)
                var.registers([])
                return var.get('createHTML')(var.get(u"this"), Js('sup'), Js(''), Js(''))
            PyJs_sup_1507_._set_name('sup')
            return PyJs_sup_1507_
        PyJs_anonymous_1506_._set_name('anonymous')
        var.get('require')(Js('./_string-html'))(Js('sup'), PyJs_anonymous_1506_)
    PyJs_anonymous_1505_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1508_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        Js('use strict')
        @Js
        def PyJs_anonymous_1509_(PyJsArg_247472696d_, this, arguments, var=var):
            var = Scope({'$trim':PyJsArg_247472696d_, 'this':this, 'arguments':arguments}, var)
            var.registers(['$trim'])
            @Js
            def PyJs_trim_1510_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'trim':PyJs_trim_1510_}, var)
                var.registers([])
                return var.get('$trim')(var.get(u"this"), Js(3.0))
            PyJs_trim_1510_._set_name('trim')
            return PyJs_trim_1510_
        PyJs_anonymous_1509_._set_name('anonymous')
        var.get('require')(Js('./_string-trim'))(Js('trim'), PyJs_anonymous_1509_)
    PyJs_anonymous_1508_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1511_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['FAILS_ON_PRIMITIVES', 'global', '$create', '$DP', '$keys', '$getOwnPropertyNames', 'gOPN', 'DESCRIPTORS', 'createDesc', '$propertyIsEnumerable', 'dP', 'HIDDEN', 'QObject', 'setter', 'uid', 'shared', '$fails', 'j', '$GOPS', '$defineProperty', 'wks', 'wksExt', 'isEnum', 'isArray', 'es6Symbols', 'enumKeys', 'anObject', '$GOPD', 'META', '$defineProperties', 'USE_NATIVE', '$getOwnPropertySymbols', 'SymbolRegistry', 'toObject', 'wksDefine', '$JSON', 'isSymbol', 'gOPD', 'redefine', 'setToStringTag', 'toIObject', 'require', 'isObject', 'PROTOTYPE', 'setSymbolDesc', 'has', '$Symbol', 'module', '$export', 'toPrimitive', 'TO_PRIMITIVE', '_create', 'gOPNExt', 'OPSymbols', 'ObjectProto', 'AllSymbols', 'wrap', 'exports', 'k', '_stringify', '$getOwnPropertyDescriptor', 'wellKnownSymbols'])
        Js('use strict')
        var.put('global', var.get('require')(Js('./_global')))
        var.put('has', var.get('require')(Js('./_has')))
        var.put('DESCRIPTORS', var.get('require')(Js('./_descriptors')))
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('redefine', var.get('require')(Js('./_redefine')))
        var.put('META', var.get('require')(Js('./_meta')).get('KEY'))
        var.put('$fails', var.get('require')(Js('./_fails')))
        var.put('shared', var.get('require')(Js('./_shared')))
        var.put('setToStringTag', var.get('require')(Js('./_set-to-string-tag')))
        var.put('uid', var.get('require')(Js('./_uid')))
        var.put('wks', var.get('require')(Js('./_wks')))
        var.put('wksExt', var.get('require')(Js('./_wks-ext')))
        var.put('wksDefine', var.get('require')(Js('./_wks-define')))
        var.put('enumKeys', var.get('require')(Js('./_enum-keys')))
        var.put('isArray', var.get('require')(Js('./_is-array')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('toIObject', var.get('require')(Js('./_to-iobject')))
        var.put('toPrimitive', var.get('require')(Js('./_to-primitive')))
        var.put('createDesc', var.get('require')(Js('./_property-desc')))
        var.put('_create', var.get('require')(Js('./_object-create')))
        var.put('gOPNExt', var.get('require')(Js('./_object-gopn-ext')))
        var.put('$GOPD', var.get('require')(Js('./_object-gopd')))
        var.put('$GOPS', var.get('require')(Js('./_object-gops')))
        var.put('$DP', var.get('require')(Js('./_object-dp')))
        var.put('$keys', var.get('require')(Js('./_object-keys')))
        var.put('gOPD', var.get('$GOPD').get('f'))
        var.put('dP', var.get('$DP').get('f'))
        var.put('gOPN', var.get('gOPNExt').get('f'))
        var.put('$Symbol', var.get('global').get('Symbol'))
        var.put('$JSON', var.get('global').get('JSON'))
        var.put('_stringify', (var.get('$JSON') and var.get('$JSON').get('stringify')))
        var.put('PROTOTYPE', Js('prototype'))
        var.put('HIDDEN', var.get('wks')(Js('_hidden')))
        var.put('TO_PRIMITIVE', var.get('wks')(Js('toPrimitive')))
        var.put('isEnum', Js({}).get('propertyIsEnumerable'))
        var.put('SymbolRegistry', var.get('shared')(Js('symbol-registry')))
        var.put('AllSymbols', var.get('shared')(Js('symbols')))
        var.put('OPSymbols', var.get('shared')(Js('op-symbols')))
        var.put('ObjectProto', var.get('Object').get(var.get('PROTOTYPE')))
        var.put('USE_NATIVE', ((var.get('$Symbol',throw=False).typeof()==Js('function')) and var.get('$GOPS').get('f').neg().neg()))
        var.put('QObject', var.get('global').get('QObject'))
        var.put('setter', ((var.get('QObject').neg() or var.get('QObject').get(var.get('PROTOTYPE')).neg()) or var.get('QObject').get(var.get('PROTOTYPE')).get('findChild').neg()))
        @Js
        def PyJs_anonymous_1512_(it, key, D, this, arguments, var=var):
            var = Scope({'it':it, 'key':key, 'D':D, 'this':this, 'arguments':arguments}, var)
            var.registers(['D', 'key', 'it', 'protoDesc'])
            var.put('protoDesc', var.get('gOPD')(var.get('ObjectProto'), var.get('key')))
            if var.get('protoDesc'):
                var.get('ObjectProto').delete(var.get('key'))
            var.get('dP')(var.get('it'), var.get('key'), var.get('D'))
            if (var.get('protoDesc') and PyJsStrictNeq(var.get('it'),var.get('ObjectProto'))):
                var.get('dP')(var.get('ObjectProto'), var.get('key'), var.get('protoDesc'))
        PyJs_anonymous_1512_._set_name('anonymous')
        @Js
        def PyJs_anonymous_1513_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_get_1514_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_1514_}, var)
                var.registers([])
                return var.get('dP')(var.get(u"this"), Js('a'), Js({'value':Js(7.0)})).get('a')
            PyJs_get_1514_._set_name('get')
            return (var.get('_create')(var.get('dP')(Js({}), Js('a'), Js({'get':PyJs_get_1514_}))).get('a')!=Js(7.0))
        PyJs_anonymous_1513_._set_name('anonymous')
        var.put('setSymbolDesc', (PyJs_anonymous_1512_ if (var.get('DESCRIPTORS') and var.get('$fails')(PyJs_anonymous_1513_)) else var.get('dP')))
        @Js
        def PyJs_wrap_1515_(tag, this, arguments, var=var):
            var = Scope({'tag':tag, 'this':this, 'arguments':arguments, 'wrap':PyJs_wrap_1515_}, var)
            var.registers(['tag', 'sym'])
            var.put('sym', var.get('AllSymbols').put(var.get('tag'), var.get('_create')(var.get('$Symbol').get(var.get('PROTOTYPE')))))
            var.get('sym').put('_k', var.get('tag'))
            return var.get('sym')
        PyJs_wrap_1515_._set_name('wrap')
        var.put('wrap', PyJs_wrap_1515_)
        @Js
        def PyJs_anonymous_1516_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return ((Js('undefined') if PyJsStrictEq(var.get('it',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('it')))==Js('symbol'))
        PyJs_anonymous_1516_._set_name('anonymous')
        @Js
        def PyJs_anonymous_1517_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return var.get('it').instanceof(var.get('$Symbol'))
        PyJs_anonymous_1517_._set_name('anonymous')
        var.put('isSymbol', (PyJs_anonymous_1516_ if (var.get('USE_NATIVE') and (var.get('_typeof')(var.get('$Symbol').get('iterator'))==Js('symbol'))) else PyJs_anonymous_1517_))
        @Js
        def PyJs_defineProperty_1518_(it, key, D, this, arguments, var=var):
            var = Scope({'it':it, 'key':key, 'D':D, 'this':this, 'arguments':arguments, 'defineProperty':PyJs_defineProperty_1518_}, var)
            var.registers(['D', 'key', 'it'])
            if PyJsStrictEq(var.get('it'),var.get('ObjectProto')):
                var.get('$defineProperty')(var.get('OPSymbols'), var.get('key'), var.get('D'))
            var.get('anObject')(var.get('it'))
            var.put('key', var.get('toPrimitive')(var.get('key'), Js(True)))
            var.get('anObject')(var.get('D'))
            if var.get('has')(var.get('AllSymbols'), var.get('key')):
                if var.get('D').get('enumerable').neg():
                    if var.get('has')(var.get('it'), var.get('HIDDEN')).neg():
                        var.get('dP')(var.get('it'), var.get('HIDDEN'), var.get('createDesc')(Js(1.0), Js({})))
                    var.get('it').get(var.get('HIDDEN')).put(var.get('key'), Js(True))
                else:
                    if (var.get('has')(var.get('it'), var.get('HIDDEN')) and var.get('it').get(var.get('HIDDEN')).get(var.get('key'))):
                        var.get('it').get(var.get('HIDDEN')).put(var.get('key'), Js(False))
                    var.put('D', var.get('_create')(var.get('D'), Js({'enumerable':var.get('createDesc')(Js(0.0), Js(False))})))
                return var.get('setSymbolDesc')(var.get('it'), var.get('key'), var.get('D'))
            return var.get('dP')(var.get('it'), var.get('key'), var.get('D'))
        PyJs_defineProperty_1518_._set_name('defineProperty')
        var.put('$defineProperty', PyJs_defineProperty_1518_)
        @Js
        def PyJs_defineProperties_1519_(it, P, this, arguments, var=var):
            var = Scope({'it':it, 'P':P, 'this':this, 'arguments':arguments, 'defineProperties':PyJs_defineProperties_1519_}, var)
            var.registers(['i', 'key', 'l', 'it', 'P', 'keys'])
            var.get('anObject')(var.get('it'))
            var.put('keys', var.get('enumKeys')(var.put('P', var.get('toIObject')(var.get('P')))))
            var.put('i', Js(0.0))
            var.put('l', var.get('keys').get('length'))
            pass
            while (var.get('l')>var.get('i')):
                var.get('$defineProperty')(var.get('it'), var.put('key', var.get('keys').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)))), var.get('P').get(var.get('key')))
            return var.get('it')
        PyJs_defineProperties_1519_._set_name('defineProperties')
        var.put('$defineProperties', PyJs_defineProperties_1519_)
        @Js
        def PyJs_create_1520_(it, P, this, arguments, var=var):
            var = Scope({'it':it, 'P':P, 'this':this, 'arguments':arguments, 'create':PyJs_create_1520_}, var)
            var.registers(['P', 'it'])
            return (var.get('_create')(var.get('it')) if PyJsStrictEq(var.get('P'),var.get('undefined')) else var.get('$defineProperties')(var.get('_create')(var.get('it')), var.get('P')))
        PyJs_create_1520_._set_name('create')
        var.put('$create', PyJs_create_1520_)
        @Js
        def PyJs_propertyIsEnumerable_1521_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments, 'propertyIsEnumerable':PyJs_propertyIsEnumerable_1521_}, var)
            var.registers(['key', 'E'])
            var.put('E', var.get('isEnum').callprop('call', var.get(u"this"), var.put('key', var.get('toPrimitive')(var.get('key'), Js(True)))))
            if ((PyJsStrictEq(var.get(u"this"),var.get('ObjectProto')) and var.get('has')(var.get('AllSymbols'), var.get('key'))) and var.get('has')(var.get('OPSymbols'), var.get('key')).neg()):
                return Js(False)
            return (var.get('E') if (((var.get('E') or var.get('has')(var.get(u"this"), var.get('key')).neg()) or var.get('has')(var.get('AllSymbols'), var.get('key')).neg()) or (var.get('has')(var.get(u"this"), var.get('HIDDEN')) and var.get(u"this").get(var.get('HIDDEN')).get(var.get('key')))) else Js(True))
        PyJs_propertyIsEnumerable_1521_._set_name('propertyIsEnumerable')
        var.put('$propertyIsEnumerable', PyJs_propertyIsEnumerable_1521_)
        @Js
        def PyJs_getOwnPropertyDescriptor_1522_(it, key, this, arguments, var=var):
            var = Scope({'it':it, 'key':key, 'this':this, 'arguments':arguments, 'getOwnPropertyDescriptor':PyJs_getOwnPropertyDescriptor_1522_}, var)
            var.registers(['D', 'key', 'it'])
            var.put('it', var.get('toIObject')(var.get('it')))
            var.put('key', var.get('toPrimitive')(var.get('key'), Js(True)))
            if ((PyJsStrictEq(var.get('it'),var.get('ObjectProto')) and var.get('has')(var.get('AllSymbols'), var.get('key'))) and var.get('has')(var.get('OPSymbols'), var.get('key')).neg()):
                return var.get('undefined')
            var.put('D', var.get('gOPD')(var.get('it'), var.get('key')))
            if ((var.get('D') and var.get('has')(var.get('AllSymbols'), var.get('key'))) and (var.get('has')(var.get('it'), var.get('HIDDEN')) and var.get('it').get(var.get('HIDDEN')).get(var.get('key'))).neg()):
                var.get('D').put('enumerable', Js(True))
            return var.get('D')
        PyJs_getOwnPropertyDescriptor_1522_._set_name('getOwnPropertyDescriptor')
        var.put('$getOwnPropertyDescriptor', PyJs_getOwnPropertyDescriptor_1522_)
        @Js
        def PyJs_getOwnPropertyNames_1523_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'getOwnPropertyNames':PyJs_getOwnPropertyNames_1523_}, var)
            var.registers(['i', 'names', 'key', 'it', 'result'])
            var.put('names', var.get('gOPN')(var.get('toIObject')(var.get('it'))))
            var.put('result', Js([]))
            var.put('i', Js(0.0))
            pass
            while (var.get('names').get('length')>var.get('i')):
                if ((var.get('has')(var.get('AllSymbols'), var.put('key', var.get('names').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))).neg() and (var.get('key')!=var.get('HIDDEN'))) and (var.get('key')!=var.get('META'))):
                    var.get('result').callprop('push', var.get('key'))
            return var.get('result')
        PyJs_getOwnPropertyNames_1523_._set_name('getOwnPropertyNames')
        var.put('$getOwnPropertyNames', PyJs_getOwnPropertyNames_1523_)
        @Js
        def PyJs_getOwnPropertySymbols_1524_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'getOwnPropertySymbols':PyJs_getOwnPropertySymbols_1524_}, var)
            var.registers(['i', 'names', 'key', 'it', 'result', 'IS_OP'])
            var.put('IS_OP', PyJsStrictEq(var.get('it'),var.get('ObjectProto')))
            var.put('names', var.get('gOPN')((var.get('OPSymbols') if var.get('IS_OP') else var.get('toIObject')(var.get('it')))))
            var.put('result', Js([]))
            var.put('i', Js(0.0))
            pass
            while (var.get('names').get('length')>var.get('i')):
                if (var.get('has')(var.get('AllSymbols'), var.put('key', var.get('names').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))) and (var.get('has')(var.get('ObjectProto'), var.get('key')) if var.get('IS_OP') else Js(True))):
                    var.get('result').callprop('push', var.get('AllSymbols').get(var.get('key')))
            return var.get('result')
        PyJs_getOwnPropertySymbols_1524_._set_name('getOwnPropertySymbols')
        var.put('$getOwnPropertySymbols', PyJs_getOwnPropertySymbols_1524_)
        if var.get('USE_NATIVE').neg():
            @Js
            def PyJs__Symbol2_1525_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, '_Symbol2':PyJs__Symbol2_1525_}, var)
                var.registers(['tag', '$set'])
                if var.get(u"this").instanceof(var.get('$Symbol')):
                    PyJsTempException = JsToPyException(var.get('TypeError')(Js('Symbol is not a constructor!')))
                    raise PyJsTempException
                var.put('tag', var.get('uid')((var.get('arguments').get('0') if (var.get('arguments').get('length')>Js(0.0)) else var.get('undefined'))))
                @Js
                def PyJs_InlineNonPyName_1526_(value, this, arguments, var=var):
                    var = Scope({'value':value, 'this':this, 'arguments':arguments, '$set':PyJs_InlineNonPyName_1526_}, var)
                    var.registers(['value'])
                    if PyJsStrictEq(var.get(u"this"),var.get('ObjectProto')):
                        var.get('$set').callprop('call', var.get('OPSymbols'), var.get('value'))
                    if (var.get('has')(var.get(u"this"), var.get('HIDDEN')) and var.get('has')(var.get(u"this").get(var.get('HIDDEN')), var.get('tag'))):
                        var.get(u"this").get(var.get('HIDDEN')).put(var.get('tag'), Js(False))
                    var.get('setSymbolDesc')(var.get(u"this"), var.get('tag'), var.get('createDesc')(Js(1.0), var.get('value')))
                PyJs_InlineNonPyName_1526_._set_name('$set')
                var.put('$set', PyJs_InlineNonPyName_1526_)
                if (var.get('DESCRIPTORS') and var.get('setter')):
                    var.get('setSymbolDesc')(var.get('ObjectProto'), var.get('tag'), Js({'configurable':Js(True),'set':var.get('$set')}))
                return var.get('wrap')(var.get('tag'))
            PyJs__Symbol2_1525_._set_name('_Symbol2')
            var.put('$Symbol', PyJs__Symbol2_1525_)
            @Js
            def PyJs_toString_1527_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'toString':PyJs_toString_1527_}, var)
                var.registers([])
                return var.get(u"this").get('_k')
            PyJs_toString_1527_._set_name('toString')
            var.get('redefine')(var.get('$Symbol').get(var.get('PROTOTYPE')), Js('toString'), PyJs_toString_1527_)
            var.get('$GOPD').put('f', var.get('$getOwnPropertyDescriptor'))
            var.get('$DP').put('f', var.get('$defineProperty'))
            var.get('require')(Js('./_object-gopn')).put('f', var.get('gOPNExt').put('f', var.get('$getOwnPropertyNames')))
            var.get('require')(Js('./_object-pie')).put('f', var.get('$propertyIsEnumerable'))
            var.get('$GOPS').put('f', var.get('$getOwnPropertySymbols'))
            if (var.get('DESCRIPTORS') and var.get('require')(Js('./_library')).neg()):
                var.get('redefine')(var.get('ObjectProto'), Js('propertyIsEnumerable'), var.get('$propertyIsEnumerable'), Js(True))
            @Js
            def PyJs_anonymous_1528_(name, this, arguments, var=var):
                var = Scope({'name':name, 'this':this, 'arguments':arguments}, var)
                var.registers(['name'])
                return var.get('wrap')(var.get('wks')(var.get('name')))
            PyJs_anonymous_1528_._set_name('anonymous')
            var.get('wksExt').put('f', PyJs_anonymous_1528_)
        var.get('$export')(((var.get('$export').get('G')+var.get('$export').get('W'))+(var.get('$export').get('F')*var.get('USE_NATIVE').neg())), Js({'Symbol':var.get('$Symbol')}))
        #for JS loop
        var.put('es6Symbols', Js('hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables').callprop('split', Js(',')))
        var.put('j', Js(0.0))
        while (var.get('es6Symbols').get('length')>var.get('j')):
            var.get('wks')(var.get('es6Symbols').get((var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))))
        
        #for JS loop
        var.put('wellKnownSymbols', var.get('$keys')(var.get('wks').get('store')))
        var.put('k', Js(0.0))
        while (var.get('wellKnownSymbols').get('length')>var.get('k')):
            var.get('wksDefine')(var.get('wellKnownSymbols').get((var.put('k',Js(var.get('k').to_number())+Js(1))-Js(1))))
        
        @Js
        def PyJs__for_1529_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments, '_for':PyJs__for_1529_}, var)
            var.registers(['key'])
            return (var.get('SymbolRegistry').get(var.get('key')) if var.get('has')(var.get('SymbolRegistry'), var.put('key', Js(''), '+')) else var.get('SymbolRegistry').put(var.get('key'), var.get('$Symbol')(var.get('key'))))
        PyJs__for_1529_._set_name('_for')
        @Js
        def PyJs_keyFor_1530_(sym, this, arguments, var=var):
            var = Scope({'sym':sym, 'this':this, 'arguments':arguments, 'keyFor':PyJs_keyFor_1530_}, var)
            var.registers(['key', 'sym'])
            if var.get('isSymbol')(var.get('sym')).neg():
                PyJsTempException = JsToPyException(var.get('TypeError')((var.get('sym')+Js(' is not a symbol!'))))
                raise PyJsTempException
            for PyJsTemp in var.get('SymbolRegistry'):
                var.put('key', PyJsTemp)
                if PyJsStrictEq(var.get('SymbolRegistry').get(var.get('key')),var.get('sym')):
                    return var.get('key')
        PyJs_keyFor_1530_._set_name('keyFor')
        @Js
        def PyJs_useSetter_1531_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'useSetter':PyJs_useSetter_1531_}, var)
            var.registers([])
            var.put('setter', Js(True))
        PyJs_useSetter_1531_._set_name('useSetter')
        @Js
        def PyJs_useSimple_1532_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'useSimple':PyJs_useSimple_1532_}, var)
            var.registers([])
            var.put('setter', Js(False))
        PyJs_useSimple_1532_._set_name('useSimple')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('USE_NATIVE').neg())), Js('Symbol'), Js({'for':PyJs__for_1529_,'keyFor':PyJs_keyFor_1530_,'useSetter':PyJs_useSetter_1531_,'useSimple':PyJs_useSimple_1532_}))
        def PyJs_LONG_1533_(var=var):
            return var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('USE_NATIVE').neg())), Js('Object'), Js({'create':var.get('$create'),'defineProperty':var.get('$defineProperty'),'defineProperties':var.get('$defineProperties'),'getOwnPropertyDescriptor':var.get('$getOwnPropertyDescriptor'),'getOwnPropertyNames':var.get('$getOwnPropertyNames'),'getOwnPropertySymbols':var.get('$getOwnPropertySymbols')}))
        PyJs_LONG_1533_()
        @Js
        def PyJs_anonymous_1534_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('$GOPS').callprop('f', Js(1.0))
        PyJs_anonymous_1534_._set_name('anonymous')
        var.put('FAILS_ON_PRIMITIVES', var.get('$fails')(PyJs_anonymous_1534_))
        @Js
        def PyJs_getOwnPropertySymbols_1535_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'getOwnPropertySymbols':PyJs_getOwnPropertySymbols_1535_}, var)
            var.registers(['it'])
            return var.get('$GOPS').callprop('f', var.get('toObject')(var.get('it')))
        PyJs_getOwnPropertySymbols_1535_._set_name('getOwnPropertySymbols')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('FAILS_ON_PRIMITIVES'))), Js('Object'), Js({'getOwnPropertySymbols':PyJs_getOwnPropertySymbols_1535_}))
        @Js
        def PyJs_anonymous_1536_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['S'])
            var.put('S', var.get('$Symbol')())
            return (((var.get('_stringify')(Js([var.get('S')]))!=Js('[null]')) or (var.get('_stringify')(Js({'a':var.get('S')}))!=Js('{}'))) or (var.get('_stringify')(var.get('Object')(var.get('S')))!=Js('{}')))
        PyJs_anonymous_1536_._set_name('anonymous')
        @Js
        def PyJs_stringify_1537_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'stringify':PyJs_stringify_1537_}, var)
            var.registers(['i', 'replacer', '$replacer', 'args', 'it'])
            var.put('args', Js([var.get('it')]))
            var.put('i', Js(1.0))
            pass
            while (var.get('arguments').get('length')>var.get('i')):
                var.get('args').callprop('push', var.get('arguments').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))
            var.put('$replacer', var.put('replacer', var.get('args').get('1')))
            if ((var.get('isObject')(var.get('replacer')).neg() and PyJsStrictEq(var.get('it'),var.get('undefined'))) or var.get('isSymbol')(var.get('it'))):
                return var.get('undefined')
            if var.get('isArray')(var.get('replacer')).neg():
                @Js
                def PyJs_replacer_1538_(key, value, this, arguments, var=var):
                    var = Scope({'key':key, 'value':value, 'this':this, 'arguments':arguments, 'replacer':PyJs_replacer_1538_}, var)
                    var.registers(['key', 'value'])
                    if (var.get('$replacer',throw=False).typeof()==Js('function')):
                        var.put('value', var.get('$replacer').callprop('call', var.get(u"this"), var.get('key'), var.get('value')))
                    if var.get('isSymbol')(var.get('value')).neg():
                        return var.get('value')
                PyJs_replacer_1538_._set_name('replacer')
                var.put('replacer', PyJs_replacer_1538_)
            var.get('args').put('1', var.get('replacer'))
            return var.get('_stringify').callprop('apply', var.get('$JSON'), var.get('args'))
        PyJs_stringify_1537_._set_name('stringify')
        (var.get('$JSON') and var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*(var.get('USE_NATIVE').neg() or var.get('$fails')(PyJs_anonymous_1536_)))), Js('JSON'), Js({'stringify':PyJs_stringify_1537_})))
        (var.get('$Symbol').get(var.get('PROTOTYPE')).get(var.get('TO_PRIMITIVE')) or var.get('require')(Js('./_hide'))(var.get('$Symbol').get(var.get('PROTOTYPE')), var.get('TO_PRIMITIVE'), var.get('$Symbol').get(var.get('PROTOTYPE')).get('valueOf')))
        var.get('setToStringTag')(var.get('$Symbol'), Js('Symbol'))
        var.get('setToStringTag')(var.get('Math'), Js('Math'), Js(True))
        var.get('setToStringTag')(var.get('global').get('JSON'), Js('JSON'), Js(True))
    PyJs_anonymous_1511_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1539_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['VIEW', 'speciesConstructor', 'ARRAY_BUFFER', 'module', '$export', '$ArrayBuffer', 'buffer', 'exports', 'ArrayBuffer', '$isView', '$slice', 'toAbsoluteIndex', 'anObject', 'require', 'isObject', '$typed', 'toLength', '$DataView'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$typed', var.get('require')(Js('./_typed')))
        var.put('buffer', var.get('require')(Js('./_typed-buffer')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('toAbsoluteIndex', var.get('require')(Js('./_to-absolute-index')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('ArrayBuffer', var.get('require')(Js('./_global')).get('ArrayBuffer'))
        var.put('speciesConstructor', var.get('require')(Js('./_species-constructor')))
        var.put('$ArrayBuffer', var.get('buffer').get('ArrayBuffer'))
        var.put('$DataView', var.get('buffer').get('DataView'))
        var.put('$isView', (var.get('$typed').get('ABV') and var.get('ArrayBuffer').get('isView')))
        var.put('$slice', var.get('$ArrayBuffer').get('prototype').get('slice'))
        var.put('VIEW', var.get('$typed').get('VIEW'))
        var.put('ARRAY_BUFFER', Js('ArrayBuffer'))
        var.get('$export')(((var.get('$export').get('G')+var.get('$export').get('W'))+(var.get('$export').get('F')*PyJsStrictNeq(var.get('ArrayBuffer'),var.get('$ArrayBuffer')))), Js({'ArrayBuffer':var.get('$ArrayBuffer')}))
        @Js
        def PyJs_isView_1540_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'isView':PyJs_isView_1540_}, var)
            var.registers(['it'])
            return ((var.get('$isView') and var.get('$isView')(var.get('it'))) or (var.get('isObject')(var.get('it')) and var.get('it').contains(var.get('VIEW'))))
        PyJs_isView_1540_._set_name('isView')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('$typed').get('CONSTR').neg())), var.get('ARRAY_BUFFER'), Js({'isView':PyJs_isView_1540_}))
        @Js
        def PyJs_anonymous_1541_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get('$ArrayBuffer').create(Js(2.0)).callprop('slice', Js(1.0), var.get('undefined')).get('byteLength').neg()
        PyJs_anonymous_1541_._set_name('anonymous')
        @Js
        def PyJs_slice_1542_(start, end, this, arguments, var=var):
            var = Scope({'start':start, 'end':end, 'this':this, 'arguments':arguments, 'slice':PyJs_slice_1542_}, var)
            var.registers(['len', 'viewT', 'start', 'end', 'viewS', 'first', 'fin', 'result', 'index'])
            if (PyJsStrictNeq(var.get('$slice'),var.get('undefined')) and PyJsStrictEq(var.get('end'),var.get('undefined'))):
                return var.get('$slice').callprop('call', var.get('anObject')(var.get(u"this")), var.get('start'))
            var.put('len', var.get('anObject')(var.get(u"this")).get('byteLength'))
            var.put('first', var.get('toAbsoluteIndex')(var.get('start'), var.get('len')))
            var.put('fin', var.get('toAbsoluteIndex')((var.get('len') if PyJsStrictEq(var.get('end'),var.get('undefined')) else var.get('end')), var.get('len')))
            var.put('result', var.get('speciesConstructor')(var.get(u"this"), var.get('$ArrayBuffer')).create(var.get('toLength')((var.get('fin')-var.get('first')))))
            var.put('viewS', var.get('$DataView').create(var.get(u"this")))
            var.put('viewT', var.get('$DataView').create(var.get('result')))
            var.put('index', Js(0.0))
            while (var.get('first')<var.get('fin')):
                var.get('viewT').callprop('setUint8', (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1)), var.get('viewS').callprop('getUint8', (var.put('first',Js(var.get('first').to_number())+Js(1))-Js(1))))
            return var.get('result')
        PyJs_slice_1542_._set_name('slice')
        var.get('$export')(((var.get('$export').get('P')+var.get('$export').get('U'))+(var.get('$export').get('F')*var.get('require')(Js('./_fails'))(PyJs_anonymous_1541_))), var.get('ARRAY_BUFFER'), Js({'slice':PyJs_slice_1542_}))
        var.get('require')(Js('./_set-species'))(var.get('ARRAY_BUFFER'))
    PyJs_anonymous_1539_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1543_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(((var.get('$export').get('G')+var.get('$export').get('W'))+(var.get('$export').get('F')*var.get('require')(Js('./_typed')).get('ABV').neg())), Js({'DataView':var.get('require')(Js('./_typed-buffer')).get('DataView')}))
    PyJs_anonymous_1543_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1544_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_1545_(init, this, arguments, var=var):
            var = Scope({'init':init, 'this':this, 'arguments':arguments}, var)
            var.registers(['init'])
            @Js
            def PyJs_Float32Array_1546_(data, byteOffset, length, this, arguments, var=var):
                var = Scope({'data':data, 'byteOffset':byteOffset, 'length':length, 'this':this, 'arguments':arguments, 'Float32Array':PyJs_Float32Array_1546_}, var)
                var.registers(['length', 'data', 'byteOffset'])
                return var.get('init')(var.get(u"this"), var.get('data'), var.get('byteOffset'), var.get('length'))
            PyJs_Float32Array_1546_._set_name('Float32Array')
            return PyJs_Float32Array_1546_
        PyJs_anonymous_1545_._set_name('anonymous')
        var.get('require')(Js('./_typed-array'))(Js('Float32'), Js(4.0), PyJs_anonymous_1545_)
    PyJs_anonymous_1544_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1547_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_1548_(init, this, arguments, var=var):
            var = Scope({'init':init, 'this':this, 'arguments':arguments}, var)
            var.registers(['init'])
            @Js
            def PyJs_Float64Array_1549_(data, byteOffset, length, this, arguments, var=var):
                var = Scope({'data':data, 'byteOffset':byteOffset, 'length':length, 'this':this, 'arguments':arguments, 'Float64Array':PyJs_Float64Array_1549_}, var)
                var.registers(['length', 'data', 'byteOffset'])
                return var.get('init')(var.get(u"this"), var.get('data'), var.get('byteOffset'), var.get('length'))
            PyJs_Float64Array_1549_._set_name('Float64Array')
            return PyJs_Float64Array_1549_
        PyJs_anonymous_1548_._set_name('anonymous')
        var.get('require')(Js('./_typed-array'))(Js('Float64'), Js(8.0), PyJs_anonymous_1548_)
    PyJs_anonymous_1547_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1550_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_1551_(init, this, arguments, var=var):
            var = Scope({'init':init, 'this':this, 'arguments':arguments}, var)
            var.registers(['init'])
            @Js
            def PyJs_Int16Array_1552_(data, byteOffset, length, this, arguments, var=var):
                var = Scope({'data':data, 'byteOffset':byteOffset, 'length':length, 'this':this, 'arguments':arguments, 'Int16Array':PyJs_Int16Array_1552_}, var)
                var.registers(['length', 'data', 'byteOffset'])
                return var.get('init')(var.get(u"this"), var.get('data'), var.get('byteOffset'), var.get('length'))
            PyJs_Int16Array_1552_._set_name('Int16Array')
            return PyJs_Int16Array_1552_
        PyJs_anonymous_1551_._set_name('anonymous')
        var.get('require')(Js('./_typed-array'))(Js('Int16'), Js(2.0), PyJs_anonymous_1551_)
    PyJs_anonymous_1550_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1553_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_1554_(init, this, arguments, var=var):
            var = Scope({'init':init, 'this':this, 'arguments':arguments}, var)
            var.registers(['init'])
            @Js
            def PyJs_Int32Array_1555_(data, byteOffset, length, this, arguments, var=var):
                var = Scope({'data':data, 'byteOffset':byteOffset, 'length':length, 'this':this, 'arguments':arguments, 'Int32Array':PyJs_Int32Array_1555_}, var)
                var.registers(['length', 'data', 'byteOffset'])
                return var.get('init')(var.get(u"this"), var.get('data'), var.get('byteOffset'), var.get('length'))
            PyJs_Int32Array_1555_._set_name('Int32Array')
            return PyJs_Int32Array_1555_
        PyJs_anonymous_1554_._set_name('anonymous')
        var.get('require')(Js('./_typed-array'))(Js('Int32'), Js(4.0), PyJs_anonymous_1554_)
    PyJs_anonymous_1553_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1556_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_1557_(init, this, arguments, var=var):
            var = Scope({'init':init, 'this':this, 'arguments':arguments}, var)
            var.registers(['init'])
            @Js
            def PyJs_Int8Array_1558_(data, byteOffset, length, this, arguments, var=var):
                var = Scope({'data':data, 'byteOffset':byteOffset, 'length':length, 'this':this, 'arguments':arguments, 'Int8Array':PyJs_Int8Array_1558_}, var)
                var.registers(['length', 'data', 'byteOffset'])
                return var.get('init')(var.get(u"this"), var.get('data'), var.get('byteOffset'), var.get('length'))
            PyJs_Int8Array_1558_._set_name('Int8Array')
            return PyJs_Int8Array_1558_
        PyJs_anonymous_1557_._set_name('anonymous')
        var.get('require')(Js('./_typed-array'))(Js('Int8'), Js(1.0), PyJs_anonymous_1557_)
    PyJs_anonymous_1556_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1559_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_1560_(init, this, arguments, var=var):
            var = Scope({'init':init, 'this':this, 'arguments':arguments}, var)
            var.registers(['init'])
            @Js
            def PyJs_Uint16Array_1561_(data, byteOffset, length, this, arguments, var=var):
                var = Scope({'data':data, 'byteOffset':byteOffset, 'length':length, 'this':this, 'arguments':arguments, 'Uint16Array':PyJs_Uint16Array_1561_}, var)
                var.registers(['length', 'data', 'byteOffset'])
                return var.get('init')(var.get(u"this"), var.get('data'), var.get('byteOffset'), var.get('length'))
            PyJs_Uint16Array_1561_._set_name('Uint16Array')
            return PyJs_Uint16Array_1561_
        PyJs_anonymous_1560_._set_name('anonymous')
        var.get('require')(Js('./_typed-array'))(Js('Uint16'), Js(2.0), PyJs_anonymous_1560_)
    PyJs_anonymous_1559_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1562_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_1563_(init, this, arguments, var=var):
            var = Scope({'init':init, 'this':this, 'arguments':arguments}, var)
            var.registers(['init'])
            @Js
            def PyJs_Uint32Array_1564_(data, byteOffset, length, this, arguments, var=var):
                var = Scope({'data':data, 'byteOffset':byteOffset, 'length':length, 'this':this, 'arguments':arguments, 'Uint32Array':PyJs_Uint32Array_1564_}, var)
                var.registers(['length', 'data', 'byteOffset'])
                return var.get('init')(var.get(u"this"), var.get('data'), var.get('byteOffset'), var.get('length'))
            PyJs_Uint32Array_1564_._set_name('Uint32Array')
            return PyJs_Uint32Array_1564_
        PyJs_anonymous_1563_._set_name('anonymous')
        var.get('require')(Js('./_typed-array'))(Js('Uint32'), Js(4.0), PyJs_anonymous_1563_)
    PyJs_anonymous_1562_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1565_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_1566_(init, this, arguments, var=var):
            var = Scope({'init':init, 'this':this, 'arguments':arguments}, var)
            var.registers(['init'])
            @Js
            def PyJs_Uint8Array_1567_(data, byteOffset, length, this, arguments, var=var):
                var = Scope({'data':data, 'byteOffset':byteOffset, 'length':length, 'this':this, 'arguments':arguments, 'Uint8Array':PyJs_Uint8Array_1567_}, var)
                var.registers(['length', 'data', 'byteOffset'])
                return var.get('init')(var.get(u"this"), var.get('data'), var.get('byteOffset'), var.get('length'))
            PyJs_Uint8Array_1567_._set_name('Uint8Array')
            return PyJs_Uint8Array_1567_
        PyJs_anonymous_1566_._set_name('anonymous')
        var.get('require')(Js('./_typed-array'))(Js('Uint8'), Js(1.0), PyJs_anonymous_1566_)
    PyJs_anonymous_1565_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1568_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_1569_(init, this, arguments, var=var):
            var = Scope({'init':init, 'this':this, 'arguments':arguments}, var)
            var.registers(['init'])
            @Js
            def PyJs_Uint8ClampedArray_1570_(data, byteOffset, length, this, arguments, var=var):
                var = Scope({'data':data, 'byteOffset':byteOffset, 'length':length, 'this':this, 'arguments':arguments, 'Uint8ClampedArray':PyJs_Uint8ClampedArray_1570_}, var)
                var.registers(['length', 'data', 'byteOffset'])
                return var.get('init')(var.get(u"this"), var.get('data'), var.get('byteOffset'), var.get('length'))
            PyJs_Uint8ClampedArray_1570_._set_name('Uint8ClampedArray')
            return PyJs_Uint8ClampedArray_1570_
        PyJs_anonymous_1569_._set_name('anonymous')
        var.get('require')(Js('./_typed-array'))(Js('Uint8'), Js(1.0), PyJs_anonymous_1569_, Js(True))
    PyJs_anonymous_1568_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1571_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['assign', 'global', 'meta', 'validate', 'isExtensible', '$WeakMap', 'weak', 'NATIVE_WEAK_MAP', 'IS_IE11', 'methods', 'uncaughtFrozenStore', 'wrapper', 'redefine', 'require', 'isObject', 'InternalMap', 'WEAK_MAP', 'module', 'exports', 'getWeak', 'each'])
        Js('use strict')
        var.put('global', var.get('require')(Js('./_global')))
        var.put('each', var.get('require')(Js('./_array-methods'))(Js(0.0)))
        var.put('redefine', var.get('require')(Js('./_redefine')))
        var.put('meta', var.get('require')(Js('./_meta')))
        var.put('assign', var.get('require')(Js('./_object-assign')))
        var.put('weak', var.get('require')(Js('./_collection-weak')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('validate', var.get('require')(Js('./_validate-collection')))
        var.put('NATIVE_WEAK_MAP', var.get('require')(Js('./_validate-collection')))
        var.put('IS_IE11', (var.get('global').get('ActiveXObject').neg() and var.get('global').contains(Js('ActiveXObject'))))
        var.put('WEAK_MAP', Js('WeakMap'))
        var.put('getWeak', var.get('meta').get('getWeak'))
        var.put('isExtensible', var.get('Object').get('isExtensible'))
        var.put('uncaughtFrozenStore', var.get('weak').get('ufstore'))
        pass
        @Js
        def PyJs_wrapper_1572_(get, this, arguments, var=var):
            var = Scope({'get':get, 'this':this, 'arguments':arguments, 'wrapper':PyJs_wrapper_1572_}, var)
            var.registers(['get'])
            @Js
            def PyJs_WeakMap_1573_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'WeakMap':PyJs_WeakMap_1573_}, var)
                var.registers([])
                return var.get('get')(var.get(u"this"), (var.get('arguments').get('0') if (var.get('arguments').get('length')>Js(0.0)) else var.get('undefined')))
            PyJs_WeakMap_1573_._set_name('WeakMap')
            return PyJs_WeakMap_1573_
        PyJs_wrapper_1572_._set_name('wrapper')
        var.put('wrapper', PyJs_wrapper_1572_)
        @Js
        def PyJs_get_1574_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments, 'get':PyJs_get_1574_}, var)
            var.registers(['key', 'data'])
            if var.get('isObject')(var.get('key')):
                var.put('data', var.get('getWeak')(var.get('key')))
                if PyJsStrictEq(var.get('data'),Js(True)):
                    return var.get('uncaughtFrozenStore')(var.get('validate')(var.get(u"this"), var.get('WEAK_MAP'))).callprop('get', var.get('key'))
                return (var.get('data').get(var.get(u"this").get('_i')) if var.get('data') else var.get('undefined'))
        PyJs_get_1574_._set_name('get')
        @Js
        def PyJs_set_1575_(key, value, this, arguments, var=var):
            var = Scope({'key':key, 'value':value, 'this':this, 'arguments':arguments, 'set':PyJs_set_1575_}, var)
            var.registers(['key', 'value'])
            return var.get('weak').callprop('def', var.get('validate')(var.get(u"this"), var.get('WEAK_MAP')), var.get('key'), var.get('value'))
        PyJs_set_1575_._set_name('set')
        var.put('methods', Js({'get':PyJs_get_1574_,'set':PyJs_set_1575_}))
        var.put('$WeakMap', var.get('module').put('exports', var.get('require')(Js('./_collection'))(var.get('WEAK_MAP'), var.get('wrapper'), var.get('methods'), var.get('weak'), Js(True), Js(True))))
        if (var.get('NATIVE_WEAK_MAP') and var.get('IS_IE11')):
            var.put('InternalMap', var.get('weak').callprop('getConstructor', var.get('wrapper'), var.get('WEAK_MAP')))
            var.get('assign')(var.get('InternalMap').get('prototype'), var.get('methods'))
            var.get('meta').put('NEED', Js(True))
            @Js
            def PyJs_anonymous_1576_(key, this, arguments, var=var):
                var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                var.registers(['key', 'proto', 'method'])
                var.put('proto', var.get('$WeakMap').get('prototype'))
                var.put('method', var.get('proto').get(var.get('key')))
                @Js
                def PyJs_anonymous_1577_(a, b, this, arguments, var=var):
                    var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments}, var)
                    var.registers(['result', 'a', 'b'])
                    if (var.get('isObject')(var.get('a')) and var.get('isExtensible')(var.get('a')).neg()):
                        if var.get(u"this").get('_f').neg():
                            var.get(u"this").put('_f', var.get('InternalMap').create())
                        var.put('result', var.get(u"this").get('_f').callprop(var.get('key'), var.get('a'), var.get('b')))
                        return (var.get(u"this") if (var.get('key')==Js('set')) else var.get('result'))
                    return var.get('method').callprop('call', var.get(u"this"), var.get('a'), var.get('b'))
                PyJs_anonymous_1577_._set_name('anonymous')
                var.get('redefine')(var.get('proto'), var.get('key'), PyJs_anonymous_1577_)
            PyJs_anonymous_1576_._set_name('anonymous')
            var.get('each')(Js([Js('delete'), Js('has'), Js('get'), Js('set')]), PyJs_anonymous_1576_)
    PyJs_anonymous_1571_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1578_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'weak', 'validate', 'require', 'WEAK_SET'])
        Js('use strict')
        var.put('weak', var.get('require')(Js('./_collection-weak')))
        var.put('validate', var.get('require')(Js('./_validate-collection')))
        var.put('WEAK_SET', Js('WeakSet'))
        @Js
        def PyJs_anonymous_1579_(get, this, arguments, var=var):
            var = Scope({'get':get, 'this':this, 'arguments':arguments}, var)
            var.registers(['get'])
            @Js
            def PyJs_WeakSet_1580_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'WeakSet':PyJs_WeakSet_1580_}, var)
                var.registers([])
                return var.get('get')(var.get(u"this"), (var.get('arguments').get('0') if (var.get('arguments').get('length')>Js(0.0)) else var.get('undefined')))
            PyJs_WeakSet_1580_._set_name('WeakSet')
            return PyJs_WeakSet_1580_
        PyJs_anonymous_1579_._set_name('anonymous')
        @Js
        def PyJs_add_1581_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments, 'add':PyJs_add_1581_}, var)
            var.registers(['value'])
            return var.get('weak').callprop('def', var.get('validate')(var.get(u"this"), var.get('WEAK_SET')), var.get('value'), Js(True))
        PyJs_add_1581_._set_name('add')
        var.get('require')(Js('./_collection'))(var.get('WEAK_SET'), PyJs_anonymous_1579_, Js({'add':PyJs_add_1581_}), var.get('weak'), Js(False), Js(True))
    PyJs_anonymous_1578_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1582_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['toObject', 'module', '$export', 'exports', 'aFunction', 'flattenIntoArray', 'arraySpeciesCreate', 'require', 'toLength'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('flattenIntoArray', var.get('require')(Js('./_flatten-into-array')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        var.put('arraySpeciesCreate', var.get('require')(Js('./_array-species-create')))
        @Js
        def PyJs_flatMap_1583_(callbackfn, this, arguments, var=var):
            var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'flatMap':PyJs_flatMap_1583_}, var)
            var.registers(['O', 'callbackfn', 'A', 'sourceLen'])
            var.put('O', var.get('toObject')(var.get(u"this")))
            pass
            var.get('aFunction')(var.get('callbackfn'))
            var.put('sourceLen', var.get('toLength')(var.get('O').get('length')))
            var.put('A', var.get('arraySpeciesCreate')(var.get('O'), Js(0.0)))
            var.get('flattenIntoArray')(var.get('A'), var.get('O'), var.get('O'), var.get('sourceLen'), Js(0.0), Js(1.0), var.get('callbackfn'), var.get('arguments').get('1'))
            return var.get('A')
        PyJs_flatMap_1583_._set_name('flatMap')
        var.get('$export')(var.get('$export').get('P'), Js('Array'), Js({'flatMap':PyJs_flatMap_1583_}))
        var.get('require')(Js('./_add-to-unscopables'))(Js('flatMap'))
    PyJs_anonymous_1582_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1584_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['toObject', 'module', '$export', 'exports', 'toInteger', 'flattenIntoArray', 'arraySpeciesCreate', 'require', 'toLength'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('flattenIntoArray', var.get('require')(Js('./_flatten-into-array')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('toInteger', var.get('require')(Js('./_to-integer')))
        var.put('arraySpeciesCreate', var.get('require')(Js('./_array-species-create')))
        @Js
        def PyJs_flatten_1585_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'flatten':PyJs_flatten_1585_}, var)
            var.registers(['O', 'A', 'sourceLen', 'depthArg'])
            var.put('depthArg', var.get('arguments').get('0'))
            var.put('O', var.get('toObject')(var.get(u"this")))
            var.put('sourceLen', var.get('toLength')(var.get('O').get('length')))
            var.put('A', var.get('arraySpeciesCreate')(var.get('O'), Js(0.0)))
            var.get('flattenIntoArray')(var.get('A'), var.get('O'), var.get('O'), var.get('sourceLen'), Js(0.0), (Js(1.0) if PyJsStrictEq(var.get('depthArg'),var.get('undefined')) else var.get('toInteger')(var.get('depthArg'))))
            return var.get('A')
        PyJs_flatten_1585_._set_name('flatten')
        var.get('$export')(var.get('$export').get('P'), Js('Array'), Js({'flatten':PyJs_flatten_1585_}))
        var.get('require')(Js('./_add-to-unscopables'))(Js('flatten'))
    PyJs_anonymous_1584_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1586_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', '$includes', 'require'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$includes', var.get('require')(Js('./_array-includes'))(Js(True)))
        @Js
        def PyJs_includes_1587_(el, this, arguments, var=var):
            var = Scope({'el':el, 'this':this, 'arguments':arguments, 'includes':PyJs_includes_1587_}, var)
            var.registers(['el'])
            return var.get('$includes')(var.get(u"this"), var.get('el'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
        PyJs_includes_1587_._set_name('includes')
        var.get('$export')(var.get('$export').get('P'), Js('Array'), Js({'includes':PyJs_includes_1587_}))
        var.get('require')(Js('./_add-to-unscopables'))(Js('includes'))
    PyJs_anonymous_1586_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1588_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'isNode', 'exports', 'process', 'microtask', 'require'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('microtask', var.get('require')(Js('./_microtask'))())
        var.put('process', var.get('require')(Js('./_global')).get('process'))
        var.put('isNode', (var.get('require')(Js('./_cof'))(var.get('process'))==Js('process')))
        @Js
        def PyJs_asap_1589_(fn, this, arguments, var=var):
            var = Scope({'fn':fn, 'this':this, 'arguments':arguments, 'asap':PyJs_asap_1589_}, var)
            var.registers(['fn', 'domain'])
            var.put('domain', (var.get('isNode') and var.get('process').get('domain')))
            var.get('microtask')((var.get('domain').callprop('bind', var.get('fn')) if var.get('domain') else var.get('fn')))
        PyJs_asap_1589_._set_name('asap')
        var.get('$export')(var.get('$export').get('G'), Js({'asap':PyJs_asap_1589_}))
    PyJs_anonymous_1588_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1590_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', 'cof', 'require'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('cof', var.get('require')(Js('./_cof')))
        @Js
        def PyJs_isError_1591_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'isError':PyJs_isError_1591_}, var)
            var.registers(['it'])
            return PyJsStrictEq(var.get('cof')(var.get('it')),Js('Error'))
        PyJs_isError_1591_._set_name('isError')
        var.get('$export')(var.get('$export').get('S'), Js('Error'), Js({'isError':PyJs_isError_1591_}))
    PyJs_anonymous_1590_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1592_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('G'), Js({'global':var.get('require')(Js('./_global'))}))
    PyJs_anonymous_1592_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1593_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('require')(Js('./_set-collection-from'))(Js('Map'))
    PyJs_anonymous_1593_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1594_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('require')(Js('./_set-collection-of'))(Js('Map'))
    PyJs_anonymous_1594_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1595_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')((var.get('$export').get('P')+var.get('$export').get('R')), Js('Map'), Js({'toJSON':var.get('require')(Js('./_collection-to-json'))(Js('Map'))}))
    PyJs_anonymous_1595_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1596_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        @Js
        def PyJs_clamp_1597_(x, lower, upper, this, arguments, var=var):
            var = Scope({'x':x, 'lower':lower, 'upper':upper, 'this':this, 'arguments':arguments, 'clamp':PyJs_clamp_1597_}, var)
            var.registers(['lower', 'x', 'upper'])
            return var.get('Math').callprop('min', var.get('upper'), var.get('Math').callprop('max', var.get('lower'), var.get('x')))
        PyJs_clamp_1597_._set_name('clamp')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'clamp':PyJs_clamp_1597_}))
    PyJs_anonymous_1596_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1598_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'DEG_PER_RAD':(var.get('Math').get('PI')/Js(180.0))}))
    PyJs_anonymous_1598_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1599_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', 'RAD_PER_DEG', 'require'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('RAD_PER_DEG', (Js(180.0)/var.get('Math').get('PI')))
        @Js
        def PyJs_degrees_1600_(radians, this, arguments, var=var):
            var = Scope({'radians':radians, 'this':this, 'arguments':arguments, 'degrees':PyJs_degrees_1600_}, var)
            var.registers(['radians'])
            return (var.get('radians')*var.get('RAD_PER_DEG'))
        PyJs_degrees_1600_._set_name('degrees')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'degrees':PyJs_degrees_1600_}))
    PyJs_anonymous_1599_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1601_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', 'fround', 'scale', 'require'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('scale', var.get('require')(Js('./_math-scale')))
        var.put('fround', var.get('require')(Js('./_math-fround')))
        @Js
        def PyJs_fscale_1602_(x, inLow, inHigh, outLow, outHigh, this, arguments, var=var):
            var = Scope({'x':x, 'inLow':inLow, 'inHigh':inHigh, 'outLow':outLow, 'outHigh':outHigh, 'this':this, 'arguments':arguments, 'fscale':PyJs_fscale_1602_}, var)
            var.registers(['inHigh', 'x', 'outHigh', 'outLow', 'inLow'])
            return var.get('fround')(var.get('scale')(var.get('x'), var.get('inLow'), var.get('inHigh'), var.get('outLow'), var.get('outHigh')))
        PyJs_fscale_1602_._set_name('fscale')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'fscale':PyJs_fscale_1602_}))
    PyJs_anonymous_1601_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1603_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        @Js
        def PyJs_iaddh_1604_(x0, x1, y0, y1, this, arguments, var=var):
            var = Scope({'x0':x0, 'x1':x1, 'y0':y0, 'y1':y1, 'this':this, 'arguments':arguments, 'iaddh':PyJs_iaddh_1604_}, var)
            var.registers(['$x1', 'y1', 'x0', 'y0', 'x1', '$x0', '$y0'])
            var.put('$x0', PyJsBshift(var.get('x0'),Js(0.0)))
            var.put('$x1', PyJsBshift(var.get('x1'),Js(0.0)))
            var.put('$y0', PyJsBshift(var.get('y0'),Js(0.0)))
            return (((var.get('$x1')+PyJsBshift(var.get('y1'),Js(0.0)))+PyJsBshift(((var.get('$x0')&var.get('$y0'))|((var.get('$x0')|var.get('$y0'))&(~PyJsBshift((var.get('$x0')+var.get('$y0')),Js(0.0))))),Js(31.0)))|Js(0.0))
        PyJs_iaddh_1604_._set_name('iaddh')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'iaddh':PyJs_iaddh_1604_}))
    PyJs_anonymous_1603_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1605_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        @Js
        def PyJs_imulh_1606_(u, v, this, arguments, var=var):
            var = Scope({'u':u, 'v':v, 'this':this, 'arguments':arguments, 'imulh':PyJs_imulh_1606_}, var)
            var.registers(['u0', '$v', 'UINT16', 'u1', 'v1', 't', 'u', 'v', 'v0', '$u'])
            var.put('UINT16', Js(65535))
            var.put('$u', (+var.get('u')))
            var.put('$v', (+var.get('v')))
            var.put('u0', (var.get('$u')&var.get('UINT16')))
            var.put('v0', (var.get('$v')&var.get('UINT16')))
            var.put('u1', (var.get('$u')>>Js(16.0)))
            var.put('v1', (var.get('$v')>>Js(16.0)))
            var.put('t', (PyJsBshift((var.get('u1')*var.get('v0')),Js(0.0))+PyJsBshift((var.get('u0')*var.get('v0')),Js(16.0))))
            return (((var.get('u1')*var.get('v1'))+(var.get('t')>>Js(16.0)))+((PyJsBshift((var.get('u0')*var.get('v1')),Js(0.0))+(var.get('t')&var.get('UINT16')))>>Js(16.0)))
        PyJs_imulh_1606_._set_name('imulh')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'imulh':PyJs_imulh_1606_}))
    PyJs_anonymous_1605_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1607_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        @Js
        def PyJs_isubh_1608_(x0, x1, y0, y1, this, arguments, var=var):
            var = Scope({'x0':x0, 'x1':x1, 'y0':y0, 'y1':y1, 'this':this, 'arguments':arguments, 'isubh':PyJs_isubh_1608_}, var)
            var.registers(['$x1', 'y1', 'x0', 'y0', 'x1', '$x0', '$y0'])
            var.put('$x0', PyJsBshift(var.get('x0'),Js(0.0)))
            var.put('$x1', PyJsBshift(var.get('x1'),Js(0.0)))
            var.put('$y0', PyJsBshift(var.get('y0'),Js(0.0)))
            return (((var.get('$x1')-PyJsBshift(var.get('y1'),Js(0.0)))-PyJsBshift((((~var.get('$x0'))&var.get('$y0'))|((~(var.get('$x0')^var.get('$y0')))&PyJsBshift((var.get('$x0')-var.get('$y0')),Js(0.0)))),Js(31.0)))|Js(0.0))
        PyJs_isubh_1608_._set_name('isubh')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'isubh':PyJs_isubh_1608_}))
    PyJs_anonymous_1607_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1609_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'RAD_PER_DEG':(Js(180.0)/var.get('Math').get('PI'))}))
    PyJs_anonymous_1609_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1610_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', 'require', 'DEG_PER_RAD'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('DEG_PER_RAD', (var.get('Math').get('PI')/Js(180.0)))
        @Js
        def PyJs_radians_1611_(degrees, this, arguments, var=var):
            var = Scope({'degrees':degrees, 'this':this, 'arguments':arguments, 'radians':PyJs_radians_1611_}, var)
            var.registers(['degrees'])
            return (var.get('degrees')*var.get('DEG_PER_RAD'))
        PyJs_radians_1611_._set_name('radians')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'radians':PyJs_radians_1611_}))
    PyJs_anonymous_1610_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1612_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'scale':var.get('require')(Js('./_math-scale'))}))
    PyJs_anonymous_1612_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1613_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        @Js
        def PyJs_signbit_1614_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'signbit':PyJs_signbit_1614_}, var)
            var.registers(['x'])
            return (var.get('x') if (var.put('x', (+var.get('x')))!=var.get('x')) else (((Js(1.0)/var.get('x'))==var.get('Infinity')) if (var.get('x')==Js(0.0)) else (var.get('x')>Js(0.0))))
        PyJs_signbit_1614_._set_name('signbit')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'signbit':PyJs_signbit_1614_}))
    PyJs_anonymous_1613_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1615_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        @Js
        def PyJs_umulh_1616_(u, v, this, arguments, var=var):
            var = Scope({'u':u, 'v':v, 'this':this, 'arguments':arguments, 'umulh':PyJs_umulh_1616_}, var)
            var.registers(['u0', '$v', 'UINT16', 'u1', 'v1', 't', 'u', 'v', 'v0', '$u'])
            var.put('UINT16', Js(65535))
            var.put('$u', (+var.get('u')))
            var.put('$v', (+var.get('v')))
            var.put('u0', (var.get('$u')&var.get('UINT16')))
            var.put('v0', (var.get('$v')&var.get('UINT16')))
            var.put('u1', PyJsBshift(var.get('$u'),Js(16.0)))
            var.put('v1', PyJsBshift(var.get('$v'),Js(16.0)))
            var.put('t', (PyJsBshift((var.get('u1')*var.get('v0')),Js(0.0))+PyJsBshift((var.get('u0')*var.get('v0')),Js(16.0))))
            return (((var.get('u1')*var.get('v1'))+PyJsBshift(var.get('t'),Js(16.0)))+PyJsBshift((PyJsBshift((var.get('u0')*var.get('v1')),Js(0.0))+(var.get('t')&var.get('UINT16'))),Js(16.0)))
        PyJs_umulh_1616_._set_name('umulh')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'umulh':PyJs_umulh_1616_}))
    PyJs_anonymous_1615_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1617_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['toObject', 'module', '$defineProperty', '$export', 'exports', 'aFunction', 'require'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        var.put('$defineProperty', var.get('require')(Js('./_object-dp')))
        @Js
        def PyJs___defineGetter___1618_(P, getter, this, arguments, var=var):
            var = Scope({'P':P, 'getter':getter, 'this':this, 'arguments':arguments, '__defineGetter__':PyJs___defineGetter___1618_}, var)
            var.registers(['P', 'getter'])
            var.get('$defineProperty').callprop('f', var.get('toObject')(var.get(u"this")), var.get('P'), Js({'get':var.get('aFunction')(var.get('getter')),'enumerable':Js(True),'configurable':Js(True)}))
        PyJs___defineGetter___1618_._set_name('__defineGetter__')
        (var.get('require')(Js('./_descriptors')) and var.get('$export')((var.get('$export').get('P')+var.get('require')(Js('./_object-forced-pam'))), Js('Object'), Js({'__defineGetter__':PyJs___defineGetter___1618_})))
    PyJs_anonymous_1617_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1619_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['toObject', 'module', '$defineProperty', '$export', 'exports', 'aFunction', 'require'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        var.put('$defineProperty', var.get('require')(Js('./_object-dp')))
        @Js
        def PyJs___defineSetter___1620_(P, setter, this, arguments, var=var):
            var = Scope({'P':P, 'setter':setter, 'this':this, 'arguments':arguments, '__defineSetter__':PyJs___defineSetter___1620_}, var)
            var.registers(['P', 'setter'])
            var.get('$defineProperty').callprop('f', var.get('toObject')(var.get(u"this")), var.get('P'), Js({'set':var.get('aFunction')(var.get('setter')),'enumerable':Js(True),'configurable':Js(True)}))
        PyJs___defineSetter___1620_._set_name('__defineSetter__')
        (var.get('require')(Js('./_descriptors')) and var.get('$export')((var.get('$export').get('P')+var.get('require')(Js('./_object-forced-pam'))), Js('Object'), Js({'__defineSetter__':PyJs___defineSetter___1620_})))
    PyJs_anonymous_1619_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1621_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', '$entries', 'require'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$entries', var.get('require')(Js('./_object-to-array'))(Js(True)))
        @Js
        def PyJs_entries_1622_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'entries':PyJs_entries_1622_}, var)
            var.registers(['it'])
            return var.get('$entries')(var.get('it'))
        PyJs_entries_1622_._set_name('entries')
        var.get('$export')(var.get('$export').get('S'), Js('Object'), Js({'entries':PyJs_entries_1622_}))
    PyJs_anonymous_1621_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1623_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', 'ownKeys', 'gOPD', 'createProperty', 'toIObject', 'require'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('ownKeys', var.get('require')(Js('./_own-keys')))
        var.put('toIObject', var.get('require')(Js('./_to-iobject')))
        var.put('gOPD', var.get('require')(Js('./_object-gopd')))
        var.put('createProperty', var.get('require')(Js('./_create-property')))
        @Js
        def PyJs_getOwnPropertyDescriptors_1624_(object, this, arguments, var=var):
            var = Scope({'object':object, 'this':this, 'arguments':arguments, 'getOwnPropertyDescriptors':PyJs_getOwnPropertyDescriptors_1624_}, var)
            var.registers(['i', 'getDesc', 'O', 'key', 'desc', 'object', 'result', 'keys'])
            var.put('O', var.get('toIObject')(var.get('object')))
            var.put('getDesc', var.get('gOPD').get('f'))
            var.put('keys', var.get('ownKeys')(var.get('O')))
            var.put('result', Js({}))
            var.put('i', Js(0.0))
            pass
            while (var.get('keys').get('length')>var.get('i')):
                var.put('desc', var.get('getDesc')(var.get('O'), var.put('key', var.get('keys').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))))
                if PyJsStrictNeq(var.get('desc'),var.get('undefined')):
                    var.get('createProperty')(var.get('result'), var.get('key'), var.get('desc'))
            return var.get('result')
        PyJs_getOwnPropertyDescriptors_1624_._set_name('getOwnPropertyDescriptors')
        var.get('$export')(var.get('$export').get('S'), Js('Object'), Js({'getOwnPropertyDescriptors':PyJs_getOwnPropertyDescriptors_1624_}))
    PyJs_anonymous_1623_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1625_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['toObject', 'module', '$export', 'getOwnPropertyDescriptor', 'getPrototypeOf', 'toPrimitive', 'exports', 'require'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('toPrimitive', var.get('require')(Js('./_to-primitive')))
        var.put('getPrototypeOf', var.get('require')(Js('./_object-gpo')))
        var.put('getOwnPropertyDescriptor', var.get('require')(Js('./_object-gopd')).get('f'))
        @Js
        def PyJs___lookupGetter___1626_(P, this, arguments, var=var):
            var = Scope({'P':P, 'this':this, 'arguments':arguments, '__lookupGetter__':PyJs___lookupGetter___1626_}, var)
            var.registers(['O', 'K', 'D', 'P'])
            var.put('O', var.get('toObject')(var.get(u"this")))
            var.put('K', var.get('toPrimitive')(var.get('P'), Js(True)))
            pass
            while 1:
                if var.put('D', var.get('getOwnPropertyDescriptor')(var.get('O'), var.get('K'))):
                    return var.get('D').get('get')
                if not var.put('O', var.get('getPrototypeOf')(var.get('O'))):
                    break
        PyJs___lookupGetter___1626_._set_name('__lookupGetter__')
        (var.get('require')(Js('./_descriptors')) and var.get('$export')((var.get('$export').get('P')+var.get('require')(Js('./_object-forced-pam'))), Js('Object'), Js({'__lookupGetter__':PyJs___lookupGetter___1626_})))
    PyJs_anonymous_1625_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1627_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['toObject', 'module', '$export', 'getOwnPropertyDescriptor', 'getPrototypeOf', 'toPrimitive', 'exports', 'require'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('toPrimitive', var.get('require')(Js('./_to-primitive')))
        var.put('getPrototypeOf', var.get('require')(Js('./_object-gpo')))
        var.put('getOwnPropertyDescriptor', var.get('require')(Js('./_object-gopd')).get('f'))
        @Js
        def PyJs___lookupSetter___1628_(P, this, arguments, var=var):
            var = Scope({'P':P, 'this':this, 'arguments':arguments, '__lookupSetter__':PyJs___lookupSetter___1628_}, var)
            var.registers(['O', 'K', 'D', 'P'])
            var.put('O', var.get('toObject')(var.get(u"this")))
            var.put('K', var.get('toPrimitive')(var.get('P'), Js(True)))
            pass
            while 1:
                if var.put('D', var.get('getOwnPropertyDescriptor')(var.get('O'), var.get('K'))):
                    return var.get('D').get('set')
                if not var.put('O', var.get('getPrototypeOf')(var.get('O'))):
                    break
        PyJs___lookupSetter___1628_._set_name('__lookupSetter__')
        (var.get('require')(Js('./_descriptors')) and var.get('$export')((var.get('$export').get('P')+var.get('require')(Js('./_object-forced-pam'))), Js('Object'), Js({'__lookupSetter__':PyJs___lookupSetter___1628_})))
    PyJs_anonymous_1627_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1629_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', 'require', '$values'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$values', var.get('require')(Js('./_object-to-array'))(Js(False)))
        @Js
        def PyJs_values_1630_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'values':PyJs_values_1630_}, var)
            var.registers(['it'])
            return var.get('$values')(var.get('it'))
        PyJs_values_1630_._set_name('values')
        var.get('$export')(var.get('$export').get('S'), Js('Object'), Js({'values':PyJs_values_1630_}))
    PyJs_anonymous_1629_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1631_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['global', 'aFunction', 'anInstance', 'cleanupSubscription', 'closeSubscription', 'Subscription', 'anObject', 'getMethod', 'SubscriptionObserver', 'RETURN', 'redefineAll', 'microtask', 'subscriptionClosed', 'core', 'require', '$Observable', 'hide', 'OBSERVABLE', 'module', '$export', 'forOf', 'exports'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('global', var.get('require')(Js('./_global')))
        var.put('core', var.get('require')(Js('./_core')))
        var.put('microtask', var.get('require')(Js('./_microtask'))())
        var.put('OBSERVABLE', var.get('require')(Js('./_wks'))(Js('observable')))
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('anInstance', var.get('require')(Js('./_an-instance')))
        var.put('redefineAll', var.get('require')(Js('./_redefine-all')))
        var.put('hide', var.get('require')(Js('./_hide')))
        var.put('forOf', var.get('require')(Js('./_for-of')))
        var.put('RETURN', var.get('forOf').get('RETURN'))
        @Js
        def PyJs_getMethod_1632_(fn, this, arguments, var=var):
            var = Scope({'fn':fn, 'this':this, 'arguments':arguments, 'getMethod':PyJs_getMethod_1632_}, var)
            var.registers(['fn'])
            return (var.get('undefined') if (var.get('fn')==var.get(u"null")) else var.get('aFunction')(var.get('fn')))
        PyJs_getMethod_1632_._set_name('getMethod')
        var.put('getMethod', PyJs_getMethod_1632_)
        @Js
        def PyJs_cleanupSubscription_1633_(subscription, this, arguments, var=var):
            var = Scope({'subscription':subscription, 'this':this, 'arguments':arguments, 'cleanupSubscription':PyJs_cleanupSubscription_1633_}, var)
            var.registers(['cleanup', 'subscription'])
            var.put('cleanup', var.get('subscription').get('_c'))
            if var.get('cleanup'):
                var.get('subscription').put('_c', var.get('undefined'))
                var.get('cleanup')()
        PyJs_cleanupSubscription_1633_._set_name('cleanupSubscription')
        var.put('cleanupSubscription', PyJs_cleanupSubscription_1633_)
        @Js
        def PyJs_subscriptionClosed_1634_(subscription, this, arguments, var=var):
            var = Scope({'subscription':subscription, 'this':this, 'arguments':arguments, 'subscriptionClosed':PyJs_subscriptionClosed_1634_}, var)
            var.registers(['subscription'])
            return PyJsStrictEq(var.get('subscription').get('_o'),var.get('undefined'))
        PyJs_subscriptionClosed_1634_._set_name('subscriptionClosed')
        var.put('subscriptionClosed', PyJs_subscriptionClosed_1634_)
        @Js
        def PyJs_closeSubscription_1635_(subscription, this, arguments, var=var):
            var = Scope({'subscription':subscription, 'this':this, 'arguments':arguments, 'closeSubscription':PyJs_closeSubscription_1635_}, var)
            var.registers(['subscription'])
            if var.get('subscriptionClosed')(var.get('subscription')).neg():
                var.get('subscription').put('_o', var.get('undefined'))
                var.get('cleanupSubscription')(var.get('subscription'))
        PyJs_closeSubscription_1635_._set_name('closeSubscription')
        var.put('closeSubscription', PyJs_closeSubscription_1635_)
        @Js
        def PyJs_Subscription_1636_(observer, subscriber, this, arguments, var=var):
            var = Scope({'observer':observer, 'subscriber':subscriber, 'this':this, 'arguments':arguments, 'Subscription':PyJs_Subscription_1636_}, var)
            var.registers(['cleanup', 'subscriber', 'subscription', 'observer'])
            var.get('anObject')(var.get('observer'))
            var.get(u"this").put('_c', var.get('undefined'))
            var.get(u"this").put('_o', var.get('observer'))
            var.put('observer', var.get('SubscriptionObserver').create(var.get(u"this")))
            try:
                var.put('cleanup', var.get('subscriber')(var.get('observer')))
                var.put('subscription', var.get('cleanup'))
                if (var.get('cleanup')!=var.get(u"null")):
                    if PyJsStrictEq(var.get('cleanup').get('unsubscribe').typeof(),Js('function')):
                        @Js
                        def PyJs_cleanup_1637_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments, 'cleanup':PyJs_cleanup_1637_}, var)
                            var.registers([])
                            var.get('subscription').callprop('unsubscribe')
                        PyJs_cleanup_1637_._set_name('cleanup')
                        var.put('cleanup', PyJs_cleanup_1637_)
                    else:
                        var.get('aFunction')(var.get('cleanup'))
                    var.get(u"this").put('_c', var.get('cleanup'))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_67175626 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    var.get('observer').callprop('error', var.get('e'))
                    return var.get('undefined')
                finally:
                    if PyJsHolder_65_67175626 is not None:
                        var.own['e'] = PyJsHolder_65_67175626
                    else:
                        del var.own['e']
                    del PyJsHolder_65_67175626
            if var.get('subscriptionClosed')(var.get(u"this")):
                var.get('cleanupSubscription')(var.get(u"this"))
        PyJs_Subscription_1636_._set_name('Subscription')
        var.put('Subscription', PyJs_Subscription_1636_)
        @Js
        def PyJs_unsubscribe_1638_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'unsubscribe':PyJs_unsubscribe_1638_}, var)
            var.registers([])
            var.get('closeSubscription')(var.get(u"this"))
        PyJs_unsubscribe_1638_._set_name('unsubscribe')
        var.get('Subscription').put('prototype', var.get('redefineAll')(Js({}), Js({'unsubscribe':PyJs_unsubscribe_1638_})))
        @Js
        def PyJs_SubscriptionObserver_1639_(subscription, this, arguments, var=var):
            var = Scope({'subscription':subscription, 'this':this, 'arguments':arguments, 'SubscriptionObserver':PyJs_SubscriptionObserver_1639_}, var)
            var.registers(['subscription'])
            var.get(u"this").put('_s', var.get('subscription'))
        PyJs_SubscriptionObserver_1639_._set_name('SubscriptionObserver')
        var.put('SubscriptionObserver', PyJs_SubscriptionObserver_1639_)
        @Js
        def PyJs_next_1640_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments, 'next':PyJs_next_1640_}, var)
            var.registers(['m', 'value', 'subscription', 'observer'])
            var.put('subscription', var.get(u"this").get('_s'))
            if var.get('subscriptionClosed')(var.get('subscription')).neg():
                var.put('observer', var.get('subscription').get('_o'))
                try:
                    var.put('m', var.get('getMethod')(var.get('observer').get('next')))
                    if var.get('m'):
                        return var.get('m').callprop('call', var.get('observer'), var.get('value'))
                except PyJsException as PyJsTempException:
                    PyJsHolder_65_20433878 = var.own.get('e')
                    var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                    try:
                        try:
                            var.get('closeSubscription')(var.get('subscription'))
                        finally:
                            PyJsTempException = JsToPyException(var.get('e'))
                            raise PyJsTempException
                    finally:
                        if PyJsHolder_65_20433878 is not None:
                            var.own['e'] = PyJsHolder_65_20433878
                        else:
                            del var.own['e']
                        del PyJsHolder_65_20433878
        PyJs_next_1640_._set_name('next')
        @Js
        def PyJs_error_1641_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments, 'error':PyJs_error_1641_}, var)
            var.registers(['m', 'value', 'subscription', 'observer'])
            var.put('subscription', var.get(u"this").get('_s'))
            if var.get('subscriptionClosed')(var.get('subscription')):
                PyJsTempException = JsToPyException(var.get('value'))
                raise PyJsTempException
            var.put('observer', var.get('subscription').get('_o'))
            var.get('subscription').put('_o', var.get('undefined'))
            try:
                var.put('m', var.get('getMethod')(var.get('observer').get('error')))
                if var.get('m').neg():
                    PyJsTempException = JsToPyException(var.get('value'))
                    raise PyJsTempException
                var.put('value', var.get('m').callprop('call', var.get('observer'), var.get('value')))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_9169729 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    try:
                        var.get('cleanupSubscription')(var.get('subscription'))
                    finally:
                        PyJsTempException = JsToPyException(var.get('e'))
                        raise PyJsTempException
                finally:
                    if PyJsHolder_65_9169729 is not None:
                        var.own['e'] = PyJsHolder_65_9169729
                    else:
                        del var.own['e']
                    del PyJsHolder_65_9169729
            var.get('cleanupSubscription')(var.get('subscription'))
            return var.get('value')
        PyJs_error_1641_._set_name('error')
        @Js
        def PyJs_complete_1642_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments, 'complete':PyJs_complete_1642_}, var)
            var.registers(['m', 'value', 'subscription', 'observer'])
            var.put('subscription', var.get(u"this").get('_s'))
            if var.get('subscriptionClosed')(var.get('subscription')).neg():
                var.put('observer', var.get('subscription').get('_o'))
                var.get('subscription').put('_o', var.get('undefined'))
                try:
                    var.put('m', var.get('getMethod')(var.get('observer').get('complete')))
                    var.put('value', (var.get('m').callprop('call', var.get('observer'), var.get('value')) if var.get('m') else var.get('undefined')))
                except PyJsException as PyJsTempException:
                    PyJsHolder_65_98590055 = var.own.get('e')
                    var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                    try:
                        try:
                            var.get('cleanupSubscription')(var.get('subscription'))
                        finally:
                            PyJsTempException = JsToPyException(var.get('e'))
                            raise PyJsTempException
                    finally:
                        if PyJsHolder_65_98590055 is not None:
                            var.own['e'] = PyJsHolder_65_98590055
                        else:
                            del var.own['e']
                        del PyJsHolder_65_98590055
                var.get('cleanupSubscription')(var.get('subscription'))
                return var.get('value')
        PyJs_complete_1642_._set_name('complete')
        var.get('SubscriptionObserver').put('prototype', var.get('redefineAll')(Js({}), Js({'next':PyJs_next_1640_,'error':PyJs_error_1641_,'complete':PyJs_complete_1642_})))
        @Js
        def PyJs_Observable_1643_(subscriber, this, arguments, var=var):
            var = Scope({'subscriber':subscriber, 'this':this, 'arguments':arguments, 'Observable':PyJs_Observable_1643_}, var)
            var.registers(['subscriber'])
            var.get('anInstance')(var.get(u"this"), var.get('$Observable'), Js('Observable'), Js('_f')).put('_f', var.get('aFunction')(var.get('subscriber')))
        PyJs_Observable_1643_._set_name('Observable')
        var.put('$Observable', PyJs_Observable_1643_)
        @Js
        def PyJs_subscribe_1644_(observer, this, arguments, var=var):
            var = Scope({'observer':observer, 'this':this, 'arguments':arguments, 'subscribe':PyJs_subscribe_1644_}, var)
            var.registers(['observer'])
            return var.get('Subscription').create(var.get('observer'), var.get(u"this").get('_f'))
        PyJs_subscribe_1644_._set_name('subscribe')
        @Js
        def PyJs_forEach_1645_(fn, this, arguments, var=var):
            var = Scope({'fn':fn, 'this':this, 'arguments':arguments, 'forEach':PyJs_forEach_1645_}, var)
            var.registers(['fn', 'that'])
            var.put('that', var.get(u"this"))
            @Js
            def PyJs_anonymous_1646_(resolve, reject, this, arguments, var=var):
                var = Scope({'resolve':resolve, 'reject':reject, 'this':this, 'arguments':arguments}, var)
                var.registers(['resolve', 'reject', 'subscription'])
                var.get('aFunction')(var.get('fn'))
                @Js
                def PyJs_next_1647_(value, this, arguments, var=var):
                    var = Scope({'value':value, 'this':this, 'arguments':arguments, 'next':PyJs_next_1647_}, var)
                    var.registers(['value'])
                    try:
                        return var.get('fn')(var.get('value'))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_65_56965599 = var.own.get('e')
                        var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                        try:
                            var.get('reject')(var.get('e'))
                            var.get('subscription').callprop('unsubscribe')
                        finally:
                            if PyJsHolder_65_56965599 is not None:
                                var.own['e'] = PyJsHolder_65_56965599
                            else:
                                del var.own['e']
                            del PyJsHolder_65_56965599
                PyJs_next_1647_._set_name('next')
                var.put('subscription', var.get('that').callprop('subscribe', Js({'next':PyJs_next_1647_,'error':var.get('reject'),'complete':var.get('resolve')})))
            PyJs_anonymous_1646_._set_name('anonymous')
            return (var.get('core').get('Promise') or var.get('global').get('Promise')).create(PyJs_anonymous_1646_)
        PyJs_forEach_1645_._set_name('forEach')
        var.get('redefineAll')(var.get('$Observable').get('prototype'), Js({'subscribe':PyJs_subscribe_1644_,'forEach':PyJs_forEach_1645_}))
        @Js
        def PyJs_InlineNonPyName_1648_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'from':PyJs_InlineNonPyName_1648_}, var)
            var.registers(['observable', 'x', 'method', 'C'])
            var.put('C', (var.get(u"this") if PyJsStrictEq(var.get(u"this",throw=False).typeof(),Js('function')) else var.get('$Observable')))
            var.put('method', var.get('getMethod')(var.get('anObject')(var.get('x')).get(var.get('OBSERVABLE'))))
            if var.get('method'):
                var.put('observable', var.get('anObject')(var.get('method').callprop('call', var.get('x'))))
                @Js
                def PyJs_anonymous_1649_(observer, this, arguments, var=var):
                    var = Scope({'observer':observer, 'this':this, 'arguments':arguments}, var)
                    var.registers(['observer'])
                    return var.get('observable').callprop('subscribe', var.get('observer'))
                PyJs_anonymous_1649_._set_name('anonymous')
                return (var.get('observable') if PyJsStrictEq(var.get('observable').get('constructor'),var.get('C')) else var.get('C').create(PyJs_anonymous_1649_))
            @Js
            def PyJs_anonymous_1650_(observer, this, arguments, var=var):
                var = Scope({'observer':observer, 'this':this, 'arguments':arguments}, var)
                var.registers(['done', 'observer'])
                var.put('done', Js(False))
                @Js
                def PyJs_anonymous_1651_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    if var.get('done').neg():
                        try:
                            @Js
                            def PyJs_anonymous_1652_(it, this, arguments, var=var):
                                var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
                                var.registers(['it'])
                                var.get('observer').callprop('next', var.get('it'))
                                if var.get('done'):
                                    return var.get('RETURN')
                            PyJs_anonymous_1652_._set_name('anonymous')
                            if PyJsStrictEq(var.get('forOf')(var.get('x'), Js(False), PyJs_anonymous_1652_),var.get('RETURN')):
                                return var.get('undefined')
                        except PyJsException as PyJsTempException:
                            PyJsHolder_65_2760200 = var.own.get('e')
                            var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                            try:
                                if var.get('done'):
                                    PyJsTempException = JsToPyException(var.get('e'))
                                    raise PyJsTempException
                                var.get('observer').callprop('error', var.get('e'))
                                return var.get('undefined')
                            finally:
                                if PyJsHolder_65_2760200 is not None:
                                    var.own['e'] = PyJsHolder_65_2760200
                                else:
                                    del var.own['e']
                                del PyJsHolder_65_2760200
                        var.get('observer').callprop('complete')
                PyJs_anonymous_1651_._set_name('anonymous')
                var.get('microtask')(PyJs_anonymous_1651_)
                @Js
                def PyJs_anonymous_1653_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.put('done', Js(True))
                PyJs_anonymous_1653_._set_name('anonymous')
                return PyJs_anonymous_1653_
            PyJs_anonymous_1650_._set_name('anonymous')
            return var.get('C').create(PyJs_anonymous_1650_)
        PyJs_InlineNonPyName_1648_._set_name('from')
        @Js
        def PyJs_of_1654_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'of':PyJs_of_1654_}, var)
            var.registers(['l', 'i', 'items'])
            #for JS loop
            var.put('i', Js(0.0))
            var.put('l', var.get('arguments').get('length'))
            var.put('items', var.get('Array').create(var.get('l')))
            while (var.get('i')<var.get('l')):
                var.get('items').put(var.get('i'), var.get('arguments').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))
            
            @Js
            def PyJs_anonymous_1655_(observer, this, arguments, var=var):
                var = Scope({'observer':observer, 'this':this, 'arguments':arguments}, var)
                var.registers(['done', 'observer'])
                var.put('done', Js(False))
                @Js
                def PyJs_anonymous_1656_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers(['j'])
                    if var.get('done').neg():
                        #for JS loop
                        var.put('j', Js(0.0))
                        while (var.get('j')<var.get('items').get('length')):
                            try:
                                var.get('observer').callprop('next', var.get('items').get(var.get('j')))
                                if var.get('done'):
                                    return var.get('undefined')
                            finally:
                                    var.put('j',Js(var.get('j').to_number())+Js(1))
                        var.get('observer').callprop('complete')
                PyJs_anonymous_1656_._set_name('anonymous')
                var.get('microtask')(PyJs_anonymous_1656_)
                @Js
                def PyJs_anonymous_1657_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.put('done', Js(True))
                PyJs_anonymous_1657_._set_name('anonymous')
                return PyJs_anonymous_1657_
            PyJs_anonymous_1655_._set_name('anonymous')
            return (var.get(u"this") if PyJsStrictEq(var.get(u"this",throw=False).typeof(),Js('function')) else var.get('$Observable')).create(PyJs_anonymous_1655_)
        PyJs_of_1654_._set_name('of')
        var.get('redefineAll')(var.get('$Observable'), Js({'from':PyJs_InlineNonPyName_1648_,'of':PyJs_of_1654_}))
        @Js
        def PyJs_anonymous_1658_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get(u"this")
        PyJs_anonymous_1658_._set_name('anonymous')
        var.get('hide')(var.get('$Observable').get('prototype'), var.get('OBSERVABLE'), PyJs_anonymous_1658_)
        var.get('$export')(var.get('$export').get('G'), Js({'Observable':var.get('$Observable')}))
        var.get('require')(Js('./_set-species'))(Js('Observable'))
    PyJs_anonymous_1631_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1659_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['speciesConstructor', 'module', 'global', '$export', 'exports', 'core', 'require', 'promiseResolve'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('core', var.get('require')(Js('./_core')))
        var.put('global', var.get('require')(Js('./_global')))
        var.put('speciesConstructor', var.get('require')(Js('./_species-constructor')))
        var.put('promiseResolve', var.get('require')(Js('./_promise-resolve')))
        @Js
        def PyJs__finally_1660_(onFinally, this, arguments, var=var):
            var = Scope({'onFinally':onFinally, 'this':this, 'arguments':arguments, '_finally':PyJs__finally_1660_}, var)
            var.registers(['isFunction', 'onFinally', 'C'])
            var.put('C', var.get('speciesConstructor')(var.get(u"this"), (var.get('core').get('Promise') or var.get('global').get('Promise'))))
            var.put('isFunction', (var.get('onFinally',throw=False).typeof()==Js('function')))
            @Js
            def PyJs_anonymous_1661_(x, this, arguments, var=var):
                var = Scope({'x':x, 'this':this, 'arguments':arguments}, var)
                var.registers(['x'])
                @Js
                def PyJs_anonymous_1662_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    return var.get('x')
                PyJs_anonymous_1662_._set_name('anonymous')
                return var.get('promiseResolve')(var.get('C'), var.get('onFinally')()).callprop('then', PyJs_anonymous_1662_)
            PyJs_anonymous_1661_._set_name('anonymous')
            @Js
            def PyJs_anonymous_1663_(e, this, arguments, var=var):
                var = Scope({'e':e, 'this':this, 'arguments':arguments}, var)
                var.registers(['e'])
                @Js
                def PyJs_anonymous_1664_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    PyJsTempException = JsToPyException(var.get('e'))
                    raise PyJsTempException
                PyJs_anonymous_1664_._set_name('anonymous')
                return var.get('promiseResolve')(var.get('C'), var.get('onFinally')()).callprop('then', PyJs_anonymous_1664_)
            PyJs_anonymous_1663_._set_name('anonymous')
            return var.get(u"this").callprop('then', (PyJs_anonymous_1661_ if var.get('isFunction') else var.get('onFinally')), (PyJs_anonymous_1663_ if var.get('isFunction') else var.get('onFinally')))
        PyJs__finally_1660_._set_name('_finally')
        var.get('$export')((var.get('$export').get('P')+var.get('$export').get('R')), Js('Promise'), Js({'finally':PyJs__finally_1660_}))
    PyJs_anonymous_1659_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1665_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['perform', 'module', 'newPromiseCapability', '$export', 'exports', 'require'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('newPromiseCapability', var.get('require')(Js('./_new-promise-capability')))
        var.put('perform', var.get('require')(Js('./_perform')))
        @Js
        def PyJs__try_1666_(callbackfn, this, arguments, var=var):
            var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, '_try':PyJs__try_1666_}, var)
            var.registers(['callbackfn', 'result', 'promiseCapability'])
            var.put('promiseCapability', var.get('newPromiseCapability').callprop('f', var.get(u"this")))
            var.put('result', var.get('perform')(var.get('callbackfn')))
            (var.get('promiseCapability').get('reject') if var.get('result').get('e') else var.get('promiseCapability').get('resolve'))(var.get('result').get('v'))
            return var.get('promiseCapability').get('promise')
        PyJs__try_1666_._set_name('_try')
        var.get('$export')(var.get('$export').get('S'), Js('Promise'), Js({'try':PyJs__try_1666_}))
    PyJs_anonymous_1665_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1667_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['ordinaryDefineOwnMetadata', 'module', 'metadata', 'exports', 'anObject', 'toMetaKey', 'require'])
        var.put('metadata', var.get('require')(Js('./_metadata')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('toMetaKey', var.get('metadata').get('key'))
        var.put('ordinaryDefineOwnMetadata', var.get('metadata').get('set'))
        @Js
        def PyJs_defineMetadata_1668_(metadataKey, metadataValue, target, targetKey, this, arguments, var=var):
            var = Scope({'metadataKey':metadataKey, 'metadataValue':metadataValue, 'target':target, 'targetKey':targetKey, 'this':this, 'arguments':arguments, 'defineMetadata':PyJs_defineMetadata_1668_}, var)
            var.registers(['metadataKey', 'target', 'metadataValue', 'targetKey'])
            var.get('ordinaryDefineOwnMetadata')(var.get('metadataKey'), var.get('metadataValue'), var.get('anObject')(var.get('target')), var.get('toMetaKey')(var.get('targetKey')))
        PyJs_defineMetadata_1668_._set_name('defineMetadata')
        var.get('metadata').callprop('exp', Js({'defineMetadata':PyJs_defineMetadata_1668_}))
    PyJs_anonymous_1667_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1669_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['store', 'module', 'metadata', 'exports', 'anObject', 'getOrCreateMetadataMap', 'toMetaKey', 'require'])
        var.put('metadata', var.get('require')(Js('./_metadata')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('toMetaKey', var.get('metadata').get('key'))
        var.put('getOrCreateMetadataMap', var.get('metadata').get('map'))
        var.put('store', var.get('metadata').get('store'))
        @Js
        def PyJs_deleteMetadata_1670_(metadataKey, target, this, arguments, var=var):
            var = Scope({'metadataKey':metadataKey, 'target':target, 'this':this, 'arguments':arguments, 'deleteMetadata':PyJs_deleteMetadata_1670_}, var)
            var.registers(['metadataKey', 'target', 'targetMetadata', 'targetKey', 'metadataMap'])
            var.put('targetKey', (var.get('undefined') if (var.get('arguments').get('length')<Js(3.0)) else var.get('toMetaKey')(var.get('arguments').get('2'))))
            var.put('metadataMap', var.get('getOrCreateMetadataMap')(var.get('anObject')(var.get('target')), var.get('targetKey'), Js(False)))
            if (PyJsStrictEq(var.get('metadataMap'),var.get('undefined')) or var.get('metadataMap').callprop('delete', var.get('metadataKey')).neg()):
                return Js(False)
            if var.get('metadataMap').get('size'):
                return Js(True)
            var.put('targetMetadata', var.get('store').callprop('get', var.get('target')))
            var.get('targetMetadata').callprop('delete', var.get('targetKey'))
            return (var.get('targetMetadata').get('size').neg().neg() or var.get('store').callprop('delete', var.get('target')))
        PyJs_deleteMetadata_1670_._set_name('deleteMetadata')
        var.get('metadata').callprop('exp', Js({'deleteMetadata':PyJs_deleteMetadata_1670_}))
    PyJs_anonymous_1669_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1671_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'metadata', 'getPrototypeOf', 'exports', 'anObject', 'ordinaryOwnMetadataKeys', 'from', 'toMetaKey', 'Set', 'require', 'ordinaryMetadataKeys'])
        var.put('Set', var.get('require')(Js('./es6.set')))
        var.put('from', var.get('require')(Js('./_array-from-iterable')))
        var.put('metadata', var.get('require')(Js('./_metadata')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('getPrototypeOf', var.get('require')(Js('./_object-gpo')))
        var.put('ordinaryOwnMetadataKeys', var.get('metadata').get('keys'))
        var.put('toMetaKey', var.get('metadata').get('key'))
        @Js
        def PyJs_ordinaryMetadataKeys_1672_(O, P, this, arguments, var=var):
            var = Scope({'O':O, 'P':P, 'this':this, 'arguments':arguments, 'ordinaryMetadataKeys':PyJs_ordinaryMetadataKeys_1672_}, var)
            var.registers(['pKeys', 'O', 'parent', 'oKeys', 'P'])
            var.put('oKeys', var.get('ordinaryOwnMetadataKeys')(var.get('O'), var.get('P')))
            var.put('parent', var.get('getPrototypeOf')(var.get('O')))
            if PyJsStrictEq(var.get('parent'),var.get(u"null")):
                return var.get('oKeys')
            var.put('pKeys', var.get('ordinaryMetadataKeys')(var.get('parent'), var.get('P')))
            return ((var.get('from')(var.get('Set').create(var.get('oKeys').callprop('concat', var.get('pKeys')))) if var.get('oKeys').get('length') else var.get('pKeys')) if var.get('pKeys').get('length') else var.get('oKeys'))
        PyJs_ordinaryMetadataKeys_1672_._set_name('ordinaryMetadataKeys')
        var.put('ordinaryMetadataKeys', PyJs_ordinaryMetadataKeys_1672_)
        @Js
        def PyJs_getMetadataKeys_1673_(target, this, arguments, var=var):
            var = Scope({'target':target, 'this':this, 'arguments':arguments, 'getMetadataKeys':PyJs_getMetadataKeys_1673_}, var)
            var.registers(['target'])
            return var.get('ordinaryMetadataKeys')(var.get('anObject')(var.get('target')), (var.get('undefined') if (var.get('arguments').get('length')<Js(2.0)) else var.get('toMetaKey')(var.get('arguments').get('1'))))
        PyJs_getMetadataKeys_1673_._set_name('getMetadataKeys')
        var.get('metadata').callprop('exp', Js({'getMetadataKeys':PyJs_getMetadataKeys_1673_}))
    PyJs_anonymous_1671_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1674_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['ordinaryGetMetadata', 'ordinaryHasOwnMetadata', 'module', 'metadata', 'getPrototypeOf', 'exports', 'anObject', 'toMetaKey', 'require', 'ordinaryGetOwnMetadata'])
        var.put('metadata', var.get('require')(Js('./_metadata')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('getPrototypeOf', var.get('require')(Js('./_object-gpo')))
        var.put('ordinaryHasOwnMetadata', var.get('metadata').get('has'))
        var.put('ordinaryGetOwnMetadata', var.get('metadata').get('get'))
        var.put('toMetaKey', var.get('metadata').get('key'))
        @Js
        def PyJs_ordinaryGetMetadata_1675_(MetadataKey, O, P, this, arguments, var=var):
            var = Scope({'MetadataKey':MetadataKey, 'O':O, 'P':P, 'this':this, 'arguments':arguments, 'ordinaryGetMetadata':PyJs_ordinaryGetMetadata_1675_}, var)
            var.registers(['O', 'parent', 'hasOwn', 'MetadataKey', 'P'])
            var.put('hasOwn', var.get('ordinaryHasOwnMetadata')(var.get('MetadataKey'), var.get('O'), var.get('P')))
            if var.get('hasOwn'):
                return var.get('ordinaryGetOwnMetadata')(var.get('MetadataKey'), var.get('O'), var.get('P'))
            var.put('parent', var.get('getPrototypeOf')(var.get('O')))
            return (var.get('ordinaryGetMetadata')(var.get('MetadataKey'), var.get('parent'), var.get('P')) if PyJsStrictNeq(var.get('parent'),var.get(u"null")) else var.get('undefined'))
        PyJs_ordinaryGetMetadata_1675_._set_name('ordinaryGetMetadata')
        var.put('ordinaryGetMetadata', PyJs_ordinaryGetMetadata_1675_)
        @Js
        def PyJs_getMetadata_1676_(metadataKey, target, this, arguments, var=var):
            var = Scope({'metadataKey':metadataKey, 'target':target, 'this':this, 'arguments':arguments, 'getMetadata':PyJs_getMetadata_1676_}, var)
            var.registers(['metadataKey', 'target'])
            return var.get('ordinaryGetMetadata')(var.get('metadataKey'), var.get('anObject')(var.get('target')), (var.get('undefined') if (var.get('arguments').get('length')<Js(3.0)) else var.get('toMetaKey')(var.get('arguments').get('2'))))
        PyJs_getMetadata_1676_._set_name('getMetadata')
        var.get('metadata').callprop('exp', Js({'getMetadata':PyJs_getMetadata_1676_}))
    PyJs_anonymous_1674_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1677_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'metadata', 'exports', 'anObject', 'ordinaryOwnMetadataKeys', 'toMetaKey', 'require'])
        var.put('metadata', var.get('require')(Js('./_metadata')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('ordinaryOwnMetadataKeys', var.get('metadata').get('keys'))
        var.put('toMetaKey', var.get('metadata').get('key'))
        @Js
        def PyJs_getOwnMetadataKeys_1678_(target, this, arguments, var=var):
            var = Scope({'target':target, 'this':this, 'arguments':arguments, 'getOwnMetadataKeys':PyJs_getOwnMetadataKeys_1678_}, var)
            var.registers(['target'])
            return var.get('ordinaryOwnMetadataKeys')(var.get('anObject')(var.get('target')), (var.get('undefined') if (var.get('arguments').get('length')<Js(2.0)) else var.get('toMetaKey')(var.get('arguments').get('1'))))
        PyJs_getOwnMetadataKeys_1678_._set_name('getOwnMetadataKeys')
        var.get('metadata').callprop('exp', Js({'getOwnMetadataKeys':PyJs_getOwnMetadataKeys_1678_}))
    PyJs_anonymous_1677_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1679_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'metadata', 'exports', 'anObject', 'toMetaKey', 'require', 'ordinaryGetOwnMetadata'])
        var.put('metadata', var.get('require')(Js('./_metadata')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('ordinaryGetOwnMetadata', var.get('metadata').get('get'))
        var.put('toMetaKey', var.get('metadata').get('key'))
        @Js
        def PyJs_getOwnMetadata_1680_(metadataKey, target, this, arguments, var=var):
            var = Scope({'metadataKey':metadataKey, 'target':target, 'this':this, 'arguments':arguments, 'getOwnMetadata':PyJs_getOwnMetadata_1680_}, var)
            var.registers(['metadataKey', 'target'])
            return var.get('ordinaryGetOwnMetadata')(var.get('metadataKey'), var.get('anObject')(var.get('target')), (var.get('undefined') if (var.get('arguments').get('length')<Js(3.0)) else var.get('toMetaKey')(var.get('arguments').get('2'))))
        PyJs_getOwnMetadata_1680_._set_name('getOwnMetadata')
        var.get('metadata').callprop('exp', Js({'getOwnMetadata':PyJs_getOwnMetadata_1680_}))
    PyJs_anonymous_1679_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1681_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['ordinaryHasOwnMetadata', 'module', 'metadata', 'getPrototypeOf', 'exports', 'anObject', 'toMetaKey', 'ordinaryHasMetadata', 'require'])
        var.put('metadata', var.get('require')(Js('./_metadata')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('getPrototypeOf', var.get('require')(Js('./_object-gpo')))
        var.put('ordinaryHasOwnMetadata', var.get('metadata').get('has'))
        var.put('toMetaKey', var.get('metadata').get('key'))
        @Js
        def PyJs_ordinaryHasMetadata_1682_(MetadataKey, O, P, this, arguments, var=var):
            var = Scope({'MetadataKey':MetadataKey, 'O':O, 'P':P, 'this':this, 'arguments':arguments, 'ordinaryHasMetadata':PyJs_ordinaryHasMetadata_1682_}, var)
            var.registers(['O', 'parent', 'hasOwn', 'MetadataKey', 'P'])
            var.put('hasOwn', var.get('ordinaryHasOwnMetadata')(var.get('MetadataKey'), var.get('O'), var.get('P')))
            if var.get('hasOwn'):
                return Js(True)
            var.put('parent', var.get('getPrototypeOf')(var.get('O')))
            return (var.get('ordinaryHasMetadata')(var.get('MetadataKey'), var.get('parent'), var.get('P')) if PyJsStrictNeq(var.get('parent'),var.get(u"null")) else Js(False))
        PyJs_ordinaryHasMetadata_1682_._set_name('ordinaryHasMetadata')
        var.put('ordinaryHasMetadata', PyJs_ordinaryHasMetadata_1682_)
        @Js
        def PyJs_hasMetadata_1683_(metadataKey, target, this, arguments, var=var):
            var = Scope({'metadataKey':metadataKey, 'target':target, 'this':this, 'arguments':arguments, 'hasMetadata':PyJs_hasMetadata_1683_}, var)
            var.registers(['metadataKey', 'target'])
            return var.get('ordinaryHasMetadata')(var.get('metadataKey'), var.get('anObject')(var.get('target')), (var.get('undefined') if (var.get('arguments').get('length')<Js(3.0)) else var.get('toMetaKey')(var.get('arguments').get('2'))))
        PyJs_hasMetadata_1683_._set_name('hasMetadata')
        var.get('metadata').callprop('exp', Js({'hasMetadata':PyJs_hasMetadata_1683_}))
    PyJs_anonymous_1681_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1684_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['ordinaryHasOwnMetadata', 'module', 'metadata', 'exports', 'anObject', 'toMetaKey', 'require'])
        var.put('metadata', var.get('require')(Js('./_metadata')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('ordinaryHasOwnMetadata', var.get('metadata').get('has'))
        var.put('toMetaKey', var.get('metadata').get('key'))
        @Js
        def PyJs_hasOwnMetadata_1685_(metadataKey, target, this, arguments, var=var):
            var = Scope({'metadataKey':metadataKey, 'target':target, 'this':this, 'arguments':arguments, 'hasOwnMetadata':PyJs_hasOwnMetadata_1685_}, var)
            var.registers(['metadataKey', 'target'])
            return var.get('ordinaryHasOwnMetadata')(var.get('metadataKey'), var.get('anObject')(var.get('target')), (var.get('undefined') if (var.get('arguments').get('length')<Js(3.0)) else var.get('toMetaKey')(var.get('arguments').get('2'))))
        PyJs_hasOwnMetadata_1685_._set_name('hasOwnMetadata')
        var.get('metadata').callprop('exp', Js({'hasOwnMetadata':PyJs_hasOwnMetadata_1685_}))
    PyJs_anonymous_1684_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1686_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['ordinaryDefineOwnMetadata', 'module', 'exports', '$metadata', 'anObject', 'aFunction', 'toMetaKey', 'require'])
        var.put('$metadata', var.get('require')(Js('./_metadata')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        var.put('toMetaKey', var.get('$metadata').get('key'))
        var.put('ordinaryDefineOwnMetadata', var.get('$metadata').get('set'))
        @Js
        def PyJs_metadata_1687_(metadataKey, metadataValue, this, arguments, var=var):
            var = Scope({'metadataKey':metadataKey, 'metadataValue':metadataValue, 'this':this, 'arguments':arguments, 'metadata':PyJs_metadata_1687_}, var)
            var.registers(['metadataKey', 'metadataValue'])
            @Js
            def PyJs_decorator_1688_(target, targetKey, this, arguments, var=var):
                var = Scope({'target':target, 'targetKey':targetKey, 'this':this, 'arguments':arguments, 'decorator':PyJs_decorator_1688_}, var)
                var.registers(['target', 'targetKey'])
                var.get('ordinaryDefineOwnMetadata')(var.get('metadataKey'), var.get('metadataValue'), (var.get('anObject') if PyJsStrictNeq(var.get('targetKey'),var.get('undefined')) else var.get('aFunction'))(var.get('target')), var.get('toMetaKey')(var.get('targetKey')))
            PyJs_decorator_1688_._set_name('decorator')
            return PyJs_decorator_1688_
        PyJs_metadata_1687_._set_name('metadata')
        var.get('$metadata').callprop('exp', Js({'metadata':PyJs_metadata_1687_}))
    PyJs_anonymous_1686_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1689_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('require')(Js('./_set-collection-from'))(Js('Set'))
    PyJs_anonymous_1689_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1690_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('require')(Js('./_set-collection-of'))(Js('Set'))
    PyJs_anonymous_1690_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1691_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')((var.get('$export').get('P')+var.get('$export').get('R')), Js('Set'), Js({'toJSON':var.get('require')(Js('./_collection-to-json'))(Js('Set'))}))
    PyJs_anonymous_1691_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1692_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', 'require', '$at'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$at', var.get('require')(Js('./_string-at'))(Js(True)))
        @Js
        def PyJs_at_1693_(pos, this, arguments, var=var):
            var = Scope({'pos':pos, 'this':this, 'arguments':arguments, 'at':PyJs_at_1693_}, var)
            var.registers(['pos'])
            return var.get('$at')(var.get(u"this"), var.get('pos'))
        PyJs_at_1693_._set_name('at')
        var.get('$export')(var.get('$export').get('P'), Js('String'), Js({'at':PyJs_at_1693_}))
    PyJs_anonymous_1692_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1694_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$RegExpStringIterator', 'module', 'isRegExp', '$export', 'exports', 'getFlags', 'RegExpProto', 'defined', 'require', 'toLength'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('defined', var.get('require')(Js('./_defined')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('isRegExp', var.get('require')(Js('./_is-regexp')))
        var.put('getFlags', var.get('require')(Js('./_flags')))
        var.put('RegExpProto', var.get('RegExp').get('prototype'))
        @Js
        def PyJs_InlineNonPyName_1695_(regexp, string, this, arguments, var=var):
            var = Scope({'regexp':regexp, 'string':string, 'this':this, 'arguments':arguments, '$RegExpStringIterator':PyJs_InlineNonPyName_1695_}, var)
            var.registers(['regexp', 'string'])
            var.get(u"this").put('_r', var.get('regexp'))
            var.get(u"this").put('_s', var.get('string'))
        PyJs_InlineNonPyName_1695_._set_name('$RegExpStringIterator')
        var.put('$RegExpStringIterator', PyJs_InlineNonPyName_1695_)
        @Js
        def PyJs_next_1696_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'next':PyJs_next_1696_}, var)
            var.registers(['match'])
            var.put('match', var.get(u"this").get('_r').callprop('exec', var.get(u"this").get('_s')))
            return Js({'value':var.get('match'),'done':PyJsStrictEq(var.get('match'),var.get(u"null"))})
        PyJs_next_1696_._set_name('next')
        var.get('require')(Js('./_iter-create'))(var.get('$RegExpStringIterator'), Js('RegExp String'), PyJs_next_1696_)
        @Js
        def PyJs_matchAll_1697_(regexp, this, arguments, var=var):
            var = Scope({'regexp':regexp, 'this':this, 'arguments':arguments, 'matchAll':PyJs_matchAll_1697_}, var)
            var.registers(['S', 'regexp', 'rx', 'flags'])
            var.get('defined')(var.get(u"this"))
            if var.get('isRegExp')(var.get('regexp')).neg():
                PyJsTempException = JsToPyException(var.get('TypeError')((var.get('regexp')+Js(' is not a regexp!'))))
                raise PyJsTempException
            var.put('S', var.get('String')(var.get(u"this")))
            var.put('flags', (var.get('String')(var.get('regexp').get('flags')) if var.get('RegExpProto').contains(Js('flags')) else var.get('getFlags').callprop('call', var.get('regexp'))))
            var.put('rx', var.get('RegExp').create(var.get('regexp').get('source'), (var.get('flags') if (~var.get('flags').callprop('indexOf', Js('g'))) else (Js('g')+var.get('flags')))))
            var.get('rx').put('lastIndex', var.get('toLength')(var.get('regexp').get('lastIndex')))
            return var.get('$RegExpStringIterator').create(var.get('rx'), var.get('S'))
        PyJs_matchAll_1697_._set_name('matchAll')
        var.get('$export')(var.get('$export').get('P'), Js('String'), Js({'matchAll':PyJs_matchAll_1697_}))
    PyJs_anonymous_1694_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1698_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'userAgent', 'exports', '$pad', 'require', 'WEBKIT_BUG'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$pad', var.get('require')(Js('./_string-pad')))
        var.put('userAgent', var.get('require')(Js('./_user-agent')))
        var.put('WEBKIT_BUG', JsRegExp('/Version\\/10\\.\\d+(\\.\\d+)?( Mobile\\/\\w+)? Safari\\//').callprop('test', var.get('userAgent')))
        @Js
        def PyJs_padEnd_1699_(maxLength, this, arguments, var=var):
            var = Scope({'maxLength':maxLength, 'this':this, 'arguments':arguments, 'padEnd':PyJs_padEnd_1699_}, var)
            var.registers(['maxLength'])
            return var.get('$pad')(var.get(u"this"), var.get('maxLength'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')), Js(False))
        PyJs_padEnd_1699_._set_name('padEnd')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('WEBKIT_BUG'))), Js('String'), Js({'padEnd':PyJs_padEnd_1699_}))
    PyJs_anonymous_1698_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1700_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'userAgent', 'exports', '$pad', 'require', 'WEBKIT_BUG'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$pad', var.get('require')(Js('./_string-pad')))
        var.put('userAgent', var.get('require')(Js('./_user-agent')))
        var.put('WEBKIT_BUG', JsRegExp('/Version\\/10\\.\\d+(\\.\\d+)?( Mobile\\/\\w+)? Safari\\//').callprop('test', var.get('userAgent')))
        @Js
        def PyJs_padStart_1701_(maxLength, this, arguments, var=var):
            var = Scope({'maxLength':maxLength, 'this':this, 'arguments':arguments, 'padStart':PyJs_padStart_1701_}, var)
            var.registers(['maxLength'])
            return var.get('$pad')(var.get(u"this"), var.get('maxLength'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')), Js(True))
        PyJs_padStart_1701_._set_name('padStart')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('WEBKIT_BUG'))), Js('String'), Js({'padStart':PyJs_padStart_1701_}))
    PyJs_anonymous_1700_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1702_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        Js('use strict')
        @Js
        def PyJs_anonymous_1703_(PyJsArg_247472696d_, this, arguments, var=var):
            var = Scope({'$trim':PyJsArg_247472696d_, 'this':this, 'arguments':arguments}, var)
            var.registers(['$trim'])
            @Js
            def PyJs_trimLeft_1704_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'trimLeft':PyJs_trimLeft_1704_}, var)
                var.registers([])
                return var.get('$trim')(var.get(u"this"), Js(1.0))
            PyJs_trimLeft_1704_._set_name('trimLeft')
            return PyJs_trimLeft_1704_
        PyJs_anonymous_1703_._set_name('anonymous')
        var.get('require')(Js('./_string-trim'))(Js('trimLeft'), PyJs_anonymous_1703_, Js('trimStart'))
    PyJs_anonymous_1702_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1705_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        Js('use strict')
        @Js
        def PyJs_anonymous_1706_(PyJsArg_247472696d_, this, arguments, var=var):
            var = Scope({'$trim':PyJsArg_247472696d_, 'this':this, 'arguments':arguments}, var)
            var.registers(['$trim'])
            @Js
            def PyJs_trimRight_1707_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'trimRight':PyJs_trimRight_1707_}, var)
                var.registers([])
                return var.get('$trim')(var.get(u"this"), Js(2.0))
            PyJs_trimRight_1707_._set_name('trimRight')
            return PyJs_trimRight_1707_
        PyJs_anonymous_1706_._set_name('anonymous')
        var.get('require')(Js('./_string-trim'))(Js('trimRight'), PyJs_anonymous_1706_, Js('trimEnd'))
    PyJs_anonymous_1705_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1708_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('require')(Js('./_wks-define'))(Js('asyncIterator'))
    PyJs_anonymous_1708_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1709_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('require')(Js('./_wks-define'))(Js('observable'))
    PyJs_anonymous_1709_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1710_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('System'), Js({'global':var.get('require')(Js('./_global'))}))
    PyJs_anonymous_1710_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1711_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('require')(Js('./_set-collection-from'))(Js('WeakMap'))
    PyJs_anonymous_1711_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1712_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('require')(Js('./_set-collection-of'))(Js('WeakMap'))
    PyJs_anonymous_1712_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1713_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('require')(Js('./_set-collection-from'))(Js('WeakSet'))
    PyJs_anonymous_1713_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1714_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('require')(Js('./_set-collection-of'))(Js('WeakSet'))
    PyJs_anonymous_1714_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1715_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['ITERATOR', 'global', 'i', 'DOMIterables', 'Iterators', 'collections', 'wks', 'ArrayValues', 'proto', 'explicit', '$iterators', 'TO_STRING_TAG', 'key', 'redefine', 'NAME', 'require', 'hide', 'getKeys', 'module', 'exports', 'Collection'])
        var.put('$iterators', var.get('require')(Js('./es6.array.iterator')))
        var.put('getKeys', var.get('require')(Js('./_object-keys')))
        var.put('redefine', var.get('require')(Js('./_redefine')))
        var.put('global', var.get('require')(Js('./_global')))
        var.put('hide', var.get('require')(Js('./_hide')))
        var.put('Iterators', var.get('require')(Js('./_iterators')))
        var.put('wks', var.get('require')(Js('./_wks')))
        var.put('ITERATOR', var.get('wks')(Js('iterator')))
        var.put('TO_STRING_TAG', var.get('wks')(Js('toStringTag')))
        var.put('ArrayValues', var.get('Iterators').get('Array'))
        var.put('DOMIterables', Js({'CSSRuleList':Js(True),'CSSStyleDeclaration':Js(False),'CSSValueList':Js(False),'ClientRectList':Js(False),'DOMRectList':Js(False),'DOMStringList':Js(False),'DOMTokenList':Js(True),'DataTransferItemList':Js(False),'FileList':Js(False),'HTMLAllCollection':Js(False),'HTMLCollection':Js(False),'HTMLFormElement':Js(False),'HTMLSelectElement':Js(False),'MediaList':Js(True),'MimeTypeArray':Js(False),'NamedNodeMap':Js(False),'NodeList':Js(True),'PaintRequestList':Js(False),'Plugin':Js(False),'PluginArray':Js(False),'SVGLengthList':Js(False),'SVGNumberList':Js(False),'SVGPathSegList':Js(False),'SVGPointList':Js(False),'SVGStringList':Js(False),'SVGTransformList':Js(False),'SourceBufferList':Js(False),'StyleSheetList':Js(True),'TextTrackCueList':Js(False),'TextTrackList':Js(False),'TouchList':Js(False)}))
        #for JS loop
        var.put('collections', var.get('getKeys')(var.get('DOMIterables')))
        var.put('i', Js(0.0))
        while (var.get('i')<var.get('collections').get('length')):
            try:
                var.put('NAME', var.get('collections').get(var.get('i')))
                var.put('explicit', var.get('DOMIterables').get(var.get('NAME')))
                var.put('Collection', var.get('global').get(var.get('NAME')))
                var.put('proto', (var.get('Collection') and var.get('Collection').get('prototype')))
                pass
                if var.get('proto'):
                    if var.get('proto').get(var.get('ITERATOR')).neg():
                        var.get('hide')(var.get('proto'), var.get('ITERATOR'), var.get('ArrayValues'))
                    if var.get('proto').get(var.get('TO_STRING_TAG')).neg():
                        var.get('hide')(var.get('proto'), var.get('TO_STRING_TAG'), var.get('NAME'))
                    var.get('Iterators').put(var.get('NAME'), var.get('ArrayValues'))
                    if var.get('explicit'):
                        for PyJsTemp in var.get('$iterators'):
                            var.put('key', PyJsTemp)
                            if var.get('proto').get(var.get('key')).neg():
                                var.get('redefine')(var.get('proto'), var.get('key'), var.get('$iterators').get(var.get('key')), Js(True))
            finally:
                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
    PyJs_anonymous_1715_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1716_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$export', 'exports', 'require', '$task'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$task', var.get('require')(Js('./_task')))
        var.get('$export')((var.get('$export').get('G')+var.get('$export').get('B')), Js({'setImmediate':var.get('$task').get('set'),'clearImmediate':var.get('$task').get('clear')}))
    PyJs_anonymous_1716_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1717_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'global', '$export', 'userAgent', 'exports', 'MSIE', 'wrap', 'slice', 'require'])
        var.put('global', var.get('require')(Js('./_global')))
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('userAgent', var.get('require')(Js('./_user-agent')))
        var.put('slice', Js([]).get('slice'))
        var.put('MSIE', JsRegExp('/MSIE .\\./').callprop('test', var.get('userAgent')))
        @Js
        def PyJs_wrap_1718_(set, this, arguments, var=var):
            var = Scope({'set':set, 'this':this, 'arguments':arguments, 'wrap':PyJs_wrap_1718_}, var)
            var.registers(['set'])
            @Js
            def PyJs_anonymous_1719_(fn, time, this, arguments, var=var):
                var = Scope({'fn':fn, 'time':time, 'this':this, 'arguments':arguments}, var)
                var.registers(['boundArgs', 'time', 'fn', 'args'])
                var.put('boundArgs', (var.get('arguments').get('length')>Js(2.0)))
                var.put('args', (var.get('slice').callprop('call', var.get('arguments'), Js(2.0)) if var.get('boundArgs') else Js(False)))
                @Js
                def PyJs_anonymous_1720_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    (var.get('fn') if (var.get('fn',throw=False).typeof()==Js('function')) else var.get('Function')(var.get('fn'))).callprop('apply', var.get(u"this"), var.get('args'))
                PyJs_anonymous_1720_._set_name('anonymous')
                return var.get('set')((PyJs_anonymous_1720_ if var.get('boundArgs') else var.get('fn')), var.get('time'))
            PyJs_anonymous_1719_._set_name('anonymous')
            return PyJs_anonymous_1719_
        PyJs_wrap_1718_._set_name('wrap')
        var.put('wrap', PyJs_wrap_1718_)
        var.get('$export')(((var.get('$export').get('G')+var.get('$export').get('B'))+(var.get('$export').get('F')*var.get('MSIE'))), Js({'setTimeout':var.get('wrap')(var.get('global').get('setTimeout')),'setInterval':var.get('wrap')(var.get('global').get('setInterval'))}))
    PyJs_anonymous_1717_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1721_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('require')(Js('./modules/es6.symbol'))
        var.get('require')(Js('./modules/es6.object.create'))
        var.get('require')(Js('./modules/es6.object.define-property'))
        var.get('require')(Js('./modules/es6.object.define-properties'))
        var.get('require')(Js('./modules/es6.object.get-own-property-descriptor'))
        var.get('require')(Js('./modules/es6.object.get-prototype-of'))
        var.get('require')(Js('./modules/es6.object.keys'))
        var.get('require')(Js('./modules/es6.object.get-own-property-names'))
        var.get('require')(Js('./modules/es6.object.freeze'))
        var.get('require')(Js('./modules/es6.object.seal'))
        var.get('require')(Js('./modules/es6.object.prevent-extensions'))
        var.get('require')(Js('./modules/es6.object.is-frozen'))
        var.get('require')(Js('./modules/es6.object.is-sealed'))
        var.get('require')(Js('./modules/es6.object.is-extensible'))
        var.get('require')(Js('./modules/es6.object.assign'))
        var.get('require')(Js('./modules/es6.object.is'))
        var.get('require')(Js('./modules/es6.object.set-prototype-of'))
        var.get('require')(Js('./modules/es6.object.to-string'))
        var.get('require')(Js('./modules/es6.function.bind'))
        var.get('require')(Js('./modules/es6.function.name'))
        var.get('require')(Js('./modules/es6.function.has-instance'))
        var.get('require')(Js('./modules/es6.parse-int'))
        var.get('require')(Js('./modules/es6.parse-float'))
        var.get('require')(Js('./modules/es6.number.constructor'))
        var.get('require')(Js('./modules/es6.number.to-fixed'))
        var.get('require')(Js('./modules/es6.number.to-precision'))
        var.get('require')(Js('./modules/es6.number.epsilon'))
        var.get('require')(Js('./modules/es6.number.is-finite'))
        var.get('require')(Js('./modules/es6.number.is-integer'))
        var.get('require')(Js('./modules/es6.number.is-nan'))
        var.get('require')(Js('./modules/es6.number.is-safe-integer'))
        var.get('require')(Js('./modules/es6.number.max-safe-integer'))
        var.get('require')(Js('./modules/es6.number.min-safe-integer'))
        var.get('require')(Js('./modules/es6.number.parse-float'))
        var.get('require')(Js('./modules/es6.number.parse-int'))
        var.get('require')(Js('./modules/es6.math.acosh'))
        var.get('require')(Js('./modules/es6.math.asinh'))
        var.get('require')(Js('./modules/es6.math.atanh'))
        var.get('require')(Js('./modules/es6.math.cbrt'))
        var.get('require')(Js('./modules/es6.math.clz32'))
        var.get('require')(Js('./modules/es6.math.cosh'))
        var.get('require')(Js('./modules/es6.math.expm1'))
        var.get('require')(Js('./modules/es6.math.fround'))
        var.get('require')(Js('./modules/es6.math.hypot'))
        var.get('require')(Js('./modules/es6.math.imul'))
        var.get('require')(Js('./modules/es6.math.log10'))
        var.get('require')(Js('./modules/es6.math.log1p'))
        var.get('require')(Js('./modules/es6.math.log2'))
        var.get('require')(Js('./modules/es6.math.sign'))
        var.get('require')(Js('./modules/es6.math.sinh'))
        var.get('require')(Js('./modules/es6.math.tanh'))
        var.get('require')(Js('./modules/es6.math.trunc'))
        var.get('require')(Js('./modules/es6.string.from-code-point'))
        var.get('require')(Js('./modules/es6.string.raw'))
        var.get('require')(Js('./modules/es6.string.trim'))
        var.get('require')(Js('./modules/es6.string.iterator'))
        var.get('require')(Js('./modules/es6.string.code-point-at'))
        var.get('require')(Js('./modules/es6.string.ends-with'))
        var.get('require')(Js('./modules/es6.string.includes'))
        var.get('require')(Js('./modules/es6.string.repeat'))
        var.get('require')(Js('./modules/es6.string.starts-with'))
        var.get('require')(Js('./modules/es6.string.anchor'))
        var.get('require')(Js('./modules/es6.string.big'))
        var.get('require')(Js('./modules/es6.string.blink'))
        var.get('require')(Js('./modules/es6.string.bold'))
        var.get('require')(Js('./modules/es6.string.fixed'))
        var.get('require')(Js('./modules/es6.string.fontcolor'))
        var.get('require')(Js('./modules/es6.string.fontsize'))
        var.get('require')(Js('./modules/es6.string.italics'))
        var.get('require')(Js('./modules/es6.string.link'))
        var.get('require')(Js('./modules/es6.string.small'))
        var.get('require')(Js('./modules/es6.string.strike'))
        var.get('require')(Js('./modules/es6.string.sub'))
        var.get('require')(Js('./modules/es6.string.sup'))
        var.get('require')(Js('./modules/es6.date.now'))
        var.get('require')(Js('./modules/es6.date.to-json'))
        var.get('require')(Js('./modules/es6.date.to-iso-string'))
        var.get('require')(Js('./modules/es6.date.to-string'))
        var.get('require')(Js('./modules/es6.date.to-primitive'))
        var.get('require')(Js('./modules/es6.array.is-array'))
        var.get('require')(Js('./modules/es6.array.from'))
        var.get('require')(Js('./modules/es6.array.of'))
        var.get('require')(Js('./modules/es6.array.join'))
        var.get('require')(Js('./modules/es6.array.slice'))
        var.get('require')(Js('./modules/es6.array.sort'))
        var.get('require')(Js('./modules/es6.array.for-each'))
        var.get('require')(Js('./modules/es6.array.map'))
        var.get('require')(Js('./modules/es6.array.filter'))
        var.get('require')(Js('./modules/es6.array.some'))
        var.get('require')(Js('./modules/es6.array.every'))
        var.get('require')(Js('./modules/es6.array.reduce'))
        var.get('require')(Js('./modules/es6.array.reduce-right'))
        var.get('require')(Js('./modules/es6.array.index-of'))
        var.get('require')(Js('./modules/es6.array.last-index-of'))
        var.get('require')(Js('./modules/es6.array.copy-within'))
        var.get('require')(Js('./modules/es6.array.fill'))
        var.get('require')(Js('./modules/es6.array.find'))
        var.get('require')(Js('./modules/es6.array.find-index'))
        var.get('require')(Js('./modules/es6.array.species'))
        var.get('require')(Js('./modules/es6.array.iterator'))
        var.get('require')(Js('./modules/es6.regexp.constructor'))
        var.get('require')(Js('./modules/es6.regexp.exec'))
        var.get('require')(Js('./modules/es6.regexp.to-string'))
        var.get('require')(Js('./modules/es6.regexp.flags'))
        var.get('require')(Js('./modules/es6.regexp.match'))
        var.get('require')(Js('./modules/es6.regexp.replace'))
        var.get('require')(Js('./modules/es6.regexp.search'))
        var.get('require')(Js('./modules/es6.regexp.split'))
        var.get('require')(Js('./modules/es6.promise'))
        var.get('require')(Js('./modules/es6.map'))
        var.get('require')(Js('./modules/es6.set'))
        var.get('require')(Js('./modules/es6.weak-map'))
        var.get('require')(Js('./modules/es6.weak-set'))
        var.get('require')(Js('./modules/es6.typed.array-buffer'))
        var.get('require')(Js('./modules/es6.typed.data-view'))
        var.get('require')(Js('./modules/es6.typed.int8-array'))
        var.get('require')(Js('./modules/es6.typed.uint8-array'))
        var.get('require')(Js('./modules/es6.typed.uint8-clamped-array'))
        var.get('require')(Js('./modules/es6.typed.int16-array'))
        var.get('require')(Js('./modules/es6.typed.uint16-array'))
        var.get('require')(Js('./modules/es6.typed.int32-array'))
        var.get('require')(Js('./modules/es6.typed.uint32-array'))
        var.get('require')(Js('./modules/es6.typed.float32-array'))
        var.get('require')(Js('./modules/es6.typed.float64-array'))
        var.get('require')(Js('./modules/es6.reflect.apply'))
        var.get('require')(Js('./modules/es6.reflect.construct'))
        var.get('require')(Js('./modules/es6.reflect.define-property'))
        var.get('require')(Js('./modules/es6.reflect.delete-property'))
        var.get('require')(Js('./modules/es6.reflect.enumerate'))
        var.get('require')(Js('./modules/es6.reflect.get'))
        var.get('require')(Js('./modules/es6.reflect.get-own-property-descriptor'))
        var.get('require')(Js('./modules/es6.reflect.get-prototype-of'))
        var.get('require')(Js('./modules/es6.reflect.has'))
        var.get('require')(Js('./modules/es6.reflect.is-extensible'))
        var.get('require')(Js('./modules/es6.reflect.own-keys'))
        var.get('require')(Js('./modules/es6.reflect.prevent-extensions'))
        var.get('require')(Js('./modules/es6.reflect.set'))
        var.get('require')(Js('./modules/es6.reflect.set-prototype-of'))
        var.get('require')(Js('./modules/es7.array.includes'))
        var.get('require')(Js('./modules/es7.array.flat-map'))
        var.get('require')(Js('./modules/es7.array.flatten'))
        var.get('require')(Js('./modules/es7.string.at'))
        var.get('require')(Js('./modules/es7.string.pad-start'))
        var.get('require')(Js('./modules/es7.string.pad-end'))
        var.get('require')(Js('./modules/es7.string.trim-left'))
        var.get('require')(Js('./modules/es7.string.trim-right'))
        var.get('require')(Js('./modules/es7.string.match-all'))
        var.get('require')(Js('./modules/es7.symbol.async-iterator'))
        var.get('require')(Js('./modules/es7.symbol.observable'))
        var.get('require')(Js('./modules/es7.object.get-own-property-descriptors'))
        var.get('require')(Js('./modules/es7.object.values'))
        var.get('require')(Js('./modules/es7.object.entries'))
        var.get('require')(Js('./modules/es7.object.define-getter'))
        var.get('require')(Js('./modules/es7.object.define-setter'))
        var.get('require')(Js('./modules/es7.object.lookup-getter'))
        var.get('require')(Js('./modules/es7.object.lookup-setter'))
        var.get('require')(Js('./modules/es7.map.to-json'))
        var.get('require')(Js('./modules/es7.set.to-json'))
        var.get('require')(Js('./modules/es7.map.of'))
        var.get('require')(Js('./modules/es7.set.of'))
        var.get('require')(Js('./modules/es7.weak-map.of'))
        var.get('require')(Js('./modules/es7.weak-set.of'))
        var.get('require')(Js('./modules/es7.map.from'))
        var.get('require')(Js('./modules/es7.set.from'))
        var.get('require')(Js('./modules/es7.weak-map.from'))
        var.get('require')(Js('./modules/es7.weak-set.from'))
        var.get('require')(Js('./modules/es7.global'))
        var.get('require')(Js('./modules/es7.system.global'))
        var.get('require')(Js('./modules/es7.error.is-error'))
        var.get('require')(Js('./modules/es7.math.clamp'))
        var.get('require')(Js('./modules/es7.math.deg-per-rad'))
        var.get('require')(Js('./modules/es7.math.degrees'))
        var.get('require')(Js('./modules/es7.math.fscale'))
        var.get('require')(Js('./modules/es7.math.iaddh'))
        var.get('require')(Js('./modules/es7.math.isubh'))
        var.get('require')(Js('./modules/es7.math.imulh'))
        var.get('require')(Js('./modules/es7.math.rad-per-deg'))
        var.get('require')(Js('./modules/es7.math.radians'))
        var.get('require')(Js('./modules/es7.math.scale'))
        var.get('require')(Js('./modules/es7.math.umulh'))
        var.get('require')(Js('./modules/es7.math.signbit'))
        var.get('require')(Js('./modules/es7.promise.finally'))
        var.get('require')(Js('./modules/es7.promise.try'))
        var.get('require')(Js('./modules/es7.reflect.define-metadata'))
        var.get('require')(Js('./modules/es7.reflect.delete-metadata'))
        var.get('require')(Js('./modules/es7.reflect.get-metadata'))
        var.get('require')(Js('./modules/es7.reflect.get-metadata-keys'))
        var.get('require')(Js('./modules/es7.reflect.get-own-metadata'))
        var.get('require')(Js('./modules/es7.reflect.get-own-metadata-keys'))
        var.get('require')(Js('./modules/es7.reflect.has-metadata'))
        var.get('require')(Js('./modules/es7.reflect.has-own-metadata'))
        var.get('require')(Js('./modules/es7.reflect.metadata'))
        var.get('require')(Js('./modules/es7.asap'))
        var.get('require')(Js('./modules/es7.observable'))
        var.get('require')(Js('./modules/web.timers'))
        var.get('require')(Js('./modules/web.immediate'))
        var.get('require')(Js('./modules/web.dom.iterable'))
        var.get('module').put('exports', var.get('require')(Js('./modules/_core')))
    PyJs_anonymous_1721_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1722_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['reEscapeChar', 'asyncFunction', '$gOPD', 'generator', 'rePropName', 'INTRINSICS', 'stringToPath', 'getProto', '$replace', 'undefined', 'bind', 'generatorFunction', 'asyncGen', 'asyncGenFunction', 'hasSymbols', '$TypeError', 'require', 'TypedArray', 'asyncGenIterator', 'module', 'exports', 'getBaseIntrinsic', 'throwTypeError', 'ThrowTypeError', 'asyncFn'])
        Js('use strict')
        pass
        var.put('$TypeError', var.get('TypeError'))
        var.put('$gOPD', var.get('Object').get('getOwnPropertyDescriptor'))
        if var.get('$gOPD'):
            try:
                var.get('$gOPD')(Js({}), Js(''))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_5772407 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    var.put('$gOPD', var.get(u"null"))
                finally:
                    if PyJsHolder_65_5772407 is not None:
                        var.own['e'] = PyJsHolder_65_5772407
                    else:
                        del var.own['e']
                    del PyJsHolder_65_5772407
        @Js
        def PyJs_throwTypeError_1723_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'throwTypeError':PyJs_throwTypeError_1723_}, var)
            var.registers([])
            PyJsTempException = JsToPyException(var.get('$TypeError').create())
            raise PyJsTempException
        PyJs_throwTypeError_1723_._set_name('throwTypeError')
        var.put('throwTypeError', PyJs_throwTypeError_1723_)
        @Js
        def PyJs_anonymous_1724_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            try:
                var.get('arguments').get('callee')
                return var.get('throwTypeError')
            except PyJsException as PyJsTempException:
                PyJsHolder_63616c6c65655468726f7773_83868436 = var.own.get('calleeThrows')
                var.force_own_put('calleeThrows', PyExceptionToJs(PyJsTempException))
                try:
                    try:
                        return var.get('$gOPD')(var.get('arguments'), Js('callee')).get('get')
                    except PyJsException as PyJsTempException:
                        PyJsHolder_674f50447468726f7773_42688880 = var.own.get('gOPDthrows')
                        var.force_own_put('gOPDthrows', PyExceptionToJs(PyJsTempException))
                        try:
                            return var.get('throwTypeError')
                        finally:
                            if PyJsHolder_674f50447468726f7773_42688880 is not None:
                                var.own['gOPDthrows'] = PyJsHolder_674f50447468726f7773_42688880
                            else:
                                del var.own['gOPDthrows']
                            del PyJsHolder_674f50447468726f7773_42688880
                finally:
                    if PyJsHolder_63616c6c65655468726f7773_83868436 is not None:
                        var.own['calleeThrows'] = PyJsHolder_63616c6c65655468726f7773_83868436
                    else:
                        del var.own['calleeThrows']
                    del PyJsHolder_63616c6c65655468726f7773_83868436
        PyJs_anonymous_1724_._set_name('anonymous')
        var.put('ThrowTypeError', (PyJs_anonymous_1724_() if var.get('$gOPD') else var.get('throwTypeError')))
        var.put('hasSymbols', var.get('require')(Js('has-symbols'))())
        @Js
        def PyJs_anonymous_1725_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments}, var)
            var.registers(['x'])
            return var.get('x').get('__proto__')
        PyJs_anonymous_1725_._set_name('anonymous')
        var.put('getProto', (var.get('Object').get('getPrototypeOf') or PyJs_anonymous_1725_))
        pass
        var.put('generatorFunction', (var.get('getProto')(var.get('generator')) if var.get('generator') else var.get('undefined')))
        pass
        var.put('asyncFunction', (var.get('asyncFn').get('constructor') if var.get('asyncFn') else var.get('undefined')))
        pass
        var.put('asyncGenFunction', (var.get('getProto')(var.get('asyncGen')) if var.get('asyncGen') else var.get('undefined')))
        var.put('asyncGenIterator', (var.get('asyncGen')() if var.get('asyncGen') else var.get('undefined')))
        var.put('TypedArray', (var.get('undefined') if PyJsStrictEq(var.get('Uint8Array',throw=False).typeof(),Js('undefined')) else var.get('getProto')(var.get('Uint8Array'))))
        var.put('INTRINSICS', Js({'%Array%':var.get('Array'),'%ArrayBuffer%':(var.get('undefined') if PyJsStrictEq(var.get('ArrayBuffer',throw=False).typeof(),Js('undefined')) else var.get('ArrayBuffer')),'%ArrayBufferPrototype%':(var.get('undefined') if PyJsStrictEq(var.get('ArrayBuffer',throw=False).typeof(),Js('undefined')) else var.get('ArrayBuffer').get('prototype')),'%ArrayIteratorPrototype%':(var.get('getProto')(Js([]).callprop(var.get('Symbol').get('iterator'))) if var.get('hasSymbols') else var.get('undefined')),'%ArrayPrototype%':var.get('Array').get('prototype'),'%ArrayProto_entries%':var.get('Array').get('prototype').get('entries'),'%ArrayProto_forEach%':var.get('Array').get('prototype').get('forEach'),'%ArrayProto_keys%':var.get('Array').get('prototype').get('keys'),'%ArrayProto_values%':var.get('Array').get('prototype').get('values'),'%AsyncFromSyncIteratorPrototype%':var.get('undefined'),'%AsyncFunction%':var.get('asyncFunction'),'%AsyncFunctionPrototype%':(var.get('asyncFunction').get('prototype') if var.get('asyncFunction') else var.get('undefined')),'%AsyncGenerator%':(var.get('getProto')(var.get('asyncGenIterator')) if var.get('asyncGen') else var.get('undefined')),'%AsyncGeneratorFunction%':var.get('asyncGenFunction'),'%AsyncGeneratorPrototype%':(var.get('asyncGenFunction').get('prototype') if var.get('asyncGenFunction') else var.get('undefined')),'%AsyncIteratorPrototype%':(var.get('asyncGenIterator').callprop(var.get('Symbol').get('asyncIterator')) if ((var.get('asyncGenIterator') and var.get('hasSymbols')) and var.get('Symbol').get('asyncIterator')) else var.get('undefined')),'%Atomics%':(var.get('undefined') if PyJsStrictEq(var.get('Atomics',throw=False).typeof(),Js('undefined')) else var.get('Atomics')),'%Boolean%':var.get('Boolean'),'%BooleanPrototype%':var.get('Boolean').get('prototype'),'%DataView%':(var.get('undefined') if PyJsStrictEq(var.get('DataView',throw=False).typeof(),Js('undefined')) else var.get('DataView')),'%DataViewPrototype%':(var.get('undefined') if PyJsStrictEq(var.get('DataView',throw=False).typeof(),Js('undefined')) else var.get('DataView').get('prototype')),'%Date%':var.get('Date'),'%DatePrototype%':var.get('Date').get('prototype'),'%decodeURI%':var.get('decodeURI'),'%decodeURIComponent%':var.get('decodeURIComponent'),'%encodeURI%':var.get('encodeURI'),'%encodeURIComponent%':var.get('encodeURIComponent'),'%Error%':var.get('Error'),'%ErrorPrototype%':var.get('Error').get('prototype'),'%eval%':var.get('eval'),'%EvalError%':var.get('EvalError'),'%EvalErrorPrototype%':var.get('EvalError').get('prototype'),'%Float32Array%':(var.get('undefined') if PyJsStrictEq(var.get('Float32Array',throw=False).typeof(),Js('undefined')) else var.get('Float32Array')),'%Float32ArrayPrototype%':(var.get('undefined') if PyJsStrictEq(var.get('Float32Array',throw=False).typeof(),Js('undefined')) else var.get('Float32Array').get('prototype')),'%Float64Array%':(var.get('undefined') if PyJsStrictEq(var.get('Float64Array',throw=False).typeof(),Js('undefined')) else var.get('Float64Array')),'%Float64ArrayPrototype%':(var.get('undefined') if PyJsStrictEq(var.get('Float64Array',throw=False).typeof(),Js('undefined')) else var.get('Float64Array').get('prototype')),'%Function%':var.get('Function'),'%FunctionPrototype%':var.get('Function').get('prototype'),'%Generator%':(var.get('getProto')(var.get('generator')()) if var.get('generator') else var.get('undefined')),'%GeneratorFunction%':var.get('generatorFunction'),'%GeneratorPrototype%':(var.get('generatorFunction').get('prototype') if var.get('generatorFunction') else var.get('undefined')),'%Int8Array%':(var.get('undefined') if PyJsStrictEq(var.get('Int8Array',throw=False).typeof(),Js('undefined')) else var.get('Int8Array')),'%Int8ArrayPrototype%':(var.get('undefined') if PyJsStrictEq(var.get('Int8Array',throw=False).typeof(),Js('undefined')) else var.get('Int8Array').get('prototype')),'%Int16Array%':(var.get('undefined') if PyJsStrictEq(var.get('Int16Array',throw=False).typeof(),Js('undefined')) else var.get('Int16Array')),'%Int16ArrayPrototype%':(var.get('undefined') if PyJsStrictEq(var.get('Int16Array',throw=False).typeof(),Js('undefined')) else var.get('Int8Array').get('prototype')),'%Int32Array%':(var.get('undefined') if PyJsStrictEq(var.get('Int32Array',throw=False).typeof(),Js('undefined')) else var.get('Int32Array')),'%Int32ArrayPrototype%':(var.get('undefined') if PyJsStrictEq(var.get('Int32Array',throw=False).typeof(),Js('undefined')) else var.get('Int32Array').get('prototype')),'%isFinite%':var.get('isFinite'),'%isNaN%':var.get('isNaN'),'%IteratorPrototype%':(var.get('getProto')(var.get('getProto')(Js([]).callprop(var.get('Symbol').get('iterator')))) if var.get('hasSymbols') else var.get('undefined')),'%JSON%':(var.get('JSON') if PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('JSON',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('JSON'))),Js('object')) else var.get('undefined')),'%JSONParse%':(var.get('JSON').get('parse') if PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('JSON',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('JSON'))),Js('object')) else var.get('undefined')),'%Map%':(var.get('undefined') if PyJsStrictEq(var.get('Map',throw=False).typeof(),Js('undefined')) else var.get('Map')),'%MapIteratorPrototype%':(var.get('undefined') if (PyJsStrictEq(var.get('Map',throw=False).typeof(),Js('undefined')) or var.get('hasSymbols').neg()) else var.get('getProto')(var.get('Map').create().callprop(var.get('Symbol').get('iterator')))),'%MapPrototype%':(var.get('undefined') if PyJsStrictEq(var.get('Map',throw=False).typeof(),Js('undefined')) else var.get('Map').get('prototype')),'%Math%':var.get('Math'),'%Number%':var.get('Number'),'%NumberPrototype%':var.get('Number').get('prototype'),'%Object%':var.get('Object'),'%ObjectPrototype%':var.get('Object').get('prototype'),'%ObjProto_toString%':var.get('Object').get('prototype').get('toString'),'%ObjProto_valueOf%':var.get('Object').get('prototype').get('valueOf'),'%parseFloat%':var.get('parseFloat'),'%parseInt%':var.get('parseInt'),'%Promise%':(var.get('undefined') if PyJsStrictEq(var.get('Promise',throw=False).typeof(),Js('undefined')) else var.get('Promise')),'%PromisePrototype%':(var.get('undefined') if PyJsStrictEq(var.get('Promise',throw=False).typeof(),Js('undefined')) else var.get('Promise').get('prototype')),'%PromiseProto_then%':(var.get('undefined') if PyJsStrictEq(var.get('Promise',throw=False).typeof(),Js('undefined')) else var.get('Promise').get('prototype').get('then')),'%Promise_all%':(var.get('undefined') if PyJsStrictEq(var.get('Promise',throw=False).typeof(),Js('undefined')) else var.get('Promise').get('all')),'%Promise_reject%':(var.get('undefined') if PyJsStrictEq(var.get('Promise',throw=False).typeof(),Js('undefined')) else var.get('Promise').get('reject')),'%Promise_resolve%':(var.get('undefined') if PyJsStrictEq(var.get('Promise',throw=False).typeof(),Js('undefined')) else var.get('Promise').get('resolve')),'%Proxy%':(var.get('undefined') if PyJsStrictEq(var.get('Proxy',throw=False).typeof(),Js('undefined')) else var.get('Proxy')),'%RangeError%':var.get('RangeError'),'%RangeErrorPrototype%':var.get('RangeError').get('prototype'),'%ReferenceError%':var.get('ReferenceError'),'%ReferenceErrorPrototype%':var.get('ReferenceError').get('prototype'),'%Reflect%':(var.get('undefined') if PyJsStrictEq(var.get('Reflect',throw=False).typeof(),Js('undefined')) else var.get('Reflect')),'%RegExp%':var.get('RegExp'),'%RegExpPrototype%':var.get('RegExp').get('prototype'),'%Set%':(var.get('undefined') if PyJsStrictEq(var.get('Set',throw=False).typeof(),Js('undefined')) else var.get('Set')),'%SetIteratorPrototype%':(var.get('undefined') if (PyJsStrictEq(var.get('Set',throw=False).typeof(),Js('undefined')) or var.get('hasSymbols').neg()) else var.get('getProto')(var.get('Set').create().callprop(var.get('Symbol').get('iterator')))),'%SetPrototype%':(var.get('undefined') if PyJsStrictEq(var.get('Set',throw=False).typeof(),Js('undefined')) else var.get('Set').get('prototype')),'%SharedArrayBuffer%':(var.get('undefined') if PyJsStrictEq(var.get('SharedArrayBuffer',throw=False).typeof(),Js('undefined')) else var.get('SharedArrayBuffer')),'%SharedArrayBufferPrototype%':(var.get('undefined') if PyJsStrictEq(var.get('SharedArrayBuffer',throw=False).typeof(),Js('undefined')) else var.get('SharedArrayBuffer').get('prototype')),'%String%':var.get('String'),'%StringIteratorPrototype%':(var.get('getProto')(Js('').callprop(var.get('Symbol').get('iterator'))) if var.get('hasSymbols') else var.get('undefined')),'%StringPrototype%':var.get('String').get('prototype'),'%Symbol%':(var.get('Symbol') if var.get('hasSymbols') else var.get('undefined')),'%SymbolPrototype%':(var.get('Symbol').get('prototype') if var.get('hasSymbols') else var.get('undefined')),'%SyntaxError%':var.get('SyntaxError'),'%SyntaxErrorPrototype%':var.get('SyntaxError').get('prototype'),'%ThrowTypeError%':var.get('ThrowTypeError'),'%TypedArray%':var.get('TypedArray'),'%TypedArrayPrototype%':(var.get('TypedArray').get('prototype') if var.get('TypedArray') else var.get('undefined')),'%TypeError%':var.get('$TypeError'),'%TypeErrorPrototype%':var.get('$TypeError').get('prototype'),'%Uint8Array%':(var.get('undefined') if PyJsStrictEq(var.get('Uint8Array',throw=False).typeof(),Js('undefined')) else var.get('Uint8Array')),'%Uint8ArrayPrototype%':(var.get('undefined') if PyJsStrictEq(var.get('Uint8Array',throw=False).typeof(),Js('undefined')) else var.get('Uint8Array').get('prototype')),'%Uint8ClampedArray%':(var.get('undefined') if PyJsStrictEq(var.get('Uint8ClampedArray',throw=False).typeof(),Js('undefined')) else var.get('Uint8ClampedArray')),'%Uint8ClampedArrayPrototype%':(var.get('undefined') if PyJsStrictEq(var.get('Uint8ClampedArray',throw=False).typeof(),Js('undefined')) else var.get('Uint8ClampedArray').get('prototype')),'%Uint16Array%':(var.get('undefined') if PyJsStrictEq(var.get('Uint16Array',throw=False).typeof(),Js('undefined')) else var.get('Uint16Array')),'%Uint16ArrayPrototype%':(var.get('undefined') if PyJsStrictEq(var.get('Uint16Array',throw=False).typeof(),Js('undefined')) else var.get('Uint16Array').get('prototype')),'%Uint32Array%':(var.get('undefined') if PyJsStrictEq(var.get('Uint32Array',throw=False).typeof(),Js('undefined')) else var.get('Uint32Array')),'%Uint32ArrayPrototype%':(var.get('undefined') if PyJsStrictEq(var.get('Uint32Array',throw=False).typeof(),Js('undefined')) else var.get('Uint32Array').get('prototype')),'%URIError%':var.get('URIError'),'%URIErrorPrototype%':var.get('URIError').get('prototype'),'%WeakMap%':(var.get('undefined') if PyJsStrictEq(var.get('WeakMap',throw=False).typeof(),Js('undefined')) else var.get('WeakMap')),'%WeakMapPrototype%':(var.get('undefined') if PyJsStrictEq(var.get('WeakMap',throw=False).typeof(),Js('undefined')) else var.get('WeakMap').get('prototype')),'%WeakSet%':(var.get('undefined') if PyJsStrictEq(var.get('WeakSet',throw=False).typeof(),Js('undefined')) else var.get('WeakSet')),'%WeakSetPrototype%':(var.get('undefined') if PyJsStrictEq(var.get('WeakSet',throw=False).typeof(),Js('undefined')) else var.get('WeakSet').get('prototype'))}))
        var.put('bind', var.get('require')(Js('function-bind')))
        var.put('$replace', var.get('bind').callprop('call', var.get('Function').get('call'), var.get('String').get('prototype').get('replace')))
        var.put('rePropName', JsRegExp('/[^%.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|(["\'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|%$))/g'))
        var.put('reEscapeChar', JsRegExp('/\\\\(\\\\)?/g'))
        @Js
        def PyJs_stringToPath_1726_(string, this, arguments, var=var):
            var = Scope({'string':string, 'this':this, 'arguments':arguments, 'stringToPath':PyJs_stringToPath_1726_}, var)
            var.registers(['result', 'string'])
            var.put('result', Js([]))
            @Js
            def PyJs_anonymous_1727_(match, number, quote, subString, this, arguments, var=var):
                var = Scope({'match':match, 'number':number, 'quote':quote, 'subString':subString, 'this':this, 'arguments':arguments}, var)
                var.registers(['match', 'quote', 'number', 'subString'])
                var.get('result').put(var.get('result').get('length'), (var.get('$replace')(var.get('subString'), var.get('reEscapeChar'), Js('$1')) if var.get('quote') else (var.get('number') or var.get('match'))))
            PyJs_anonymous_1727_._set_name('anonymous')
            var.get('$replace')(var.get('string'), var.get('rePropName'), PyJs_anonymous_1727_)
            return var.get('result')
        PyJs_stringToPath_1726_._set_name('stringToPath')
        var.put('stringToPath', PyJs_stringToPath_1726_)
        @Js
        def PyJs_getBaseIntrinsic_1728_(name, allowMissing, this, arguments, var=var):
            var = Scope({'name':name, 'allowMissing':allowMissing, 'this':this, 'arguments':arguments, 'getBaseIntrinsic':PyJs_getBaseIntrinsic_1728_}, var)
            var.registers(['allowMissing', 'name'])
            if var.get('INTRINSICS').contains(var.get('name')).neg():
                PyJsTempException = JsToPyException(var.get('SyntaxError').create(((Js('intrinsic ')+var.get('name'))+Js(' does not exist!'))))
                raise PyJsTempException
            if (PyJsStrictEq(var.get('INTRINSICS').get(var.get('name')).typeof(),Js('undefined')) and var.get('allowMissing').neg()):
                PyJsTempException = JsToPyException(var.get('$TypeError').create(((Js('intrinsic ')+var.get('name'))+Js(' exists, but is not available. Please file an issue!'))))
                raise PyJsTempException
            return var.get('INTRINSICS').get(var.get('name'))
        PyJs_getBaseIntrinsic_1728_._set_name('getBaseIntrinsic')
        var.put('getBaseIntrinsic', PyJs_getBaseIntrinsic_1728_)
        @Js
        def PyJs_GetIntrinsic_1729_(name, allowMissing, this, arguments, var=var):
            var = Scope({'name':name, 'allowMissing':allowMissing, 'this':this, 'arguments':arguments, 'GetIntrinsic':PyJs_GetIntrinsic_1729_}, var)
            var.registers(['i', 'allowMissing', 'desc', 'name', 'parts', 'value'])
            if (PyJsStrictNeq(var.get('name',throw=False).typeof(),Js('string')) or PyJsStrictEq(var.get('name').get('length'),Js(0.0))):
                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('intrinsic name must be a non-empty string')))
                raise PyJsTempException
            if ((var.get('arguments').get('length')>Js(1.0)) and PyJsStrictNeq(var.get('allowMissing',throw=False).typeof(),Js('boolean'))):
                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('"allowMissing" argument must be a boolean')))
                raise PyJsTempException
            var.put('parts', var.get('stringToPath')(var.get('name')))
            var.put('value', var.get('getBaseIntrinsic')(((Js('%')+(var.get('parts').get('0') if (var.get('parts').get('length')>Js(0.0)) else Js('')))+Js('%')), var.get('allowMissing')))
            #for JS loop
            var.put('i', Js(1.0))
            while (var.get('i')<var.get('parts').get('length')):
                try:
                    if (var.get('value')!=var.get(u"null")):
                        if (var.get('$gOPD') and ((var.get('i')+Js(1.0))>=var.get('parts').get('length'))):
                            var.put('desc', var.get('$gOPD')(var.get('value'), var.get('parts').get(var.get('i'))))
                            if (var.get('allowMissing').neg() and var.get('value').contains(var.get('parts').get(var.get('i'))).neg()):
                                PyJsTempException = JsToPyException(var.get('$TypeError').create(((Js('base intrinsic for ')+var.get('name'))+Js(' exists, but the property is not available.'))))
                                raise PyJsTempException
                            var.put('value', (var.get('desc').get('get') if ((var.get('desc') and var.get('desc').contains(Js('get'))) and var.get('desc').get('get').contains(Js('originalValue')).neg()) else var.get('value').get(var.get('parts').get(var.get('i')))))
                        else:
                            var.put('value', var.get('value').get(var.get('parts').get(var.get('i'))))
                finally:
                        var.put('i', Js(1.0), '+')
            return var.get('value')
        PyJs_GetIntrinsic_1729_._set_name('GetIntrinsic')
        var.get('module').put('exports', PyJs_GetIntrinsic_1729_)
    PyJs_anonymous_1722_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1730_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$reflectApply', 'applyBind', 'module', '$defineProperty', 'exports', 'GetIntrinsic', '$apply', 'bind', 'require', '$call'])
        Js('use strict')
        var.put('bind', var.get('require')(Js('function-bind')))
        var.put('GetIntrinsic', var.get('require')(Js('../GetIntrinsic')))
        var.put('$apply', var.get('GetIntrinsic')(Js('%Function.prototype.apply%')))
        var.put('$call', var.get('GetIntrinsic')(Js('%Function.prototype.call%')))
        var.put('$reflectApply', (var.get('GetIntrinsic')(Js('%Reflect.apply%'), Js(True)) or var.get('bind').callprop('call', var.get('$call'), var.get('$apply'))))
        var.put('$defineProperty', var.get('GetIntrinsic')(Js('%Object.defineProperty%'), Js(True)))
        if var.get('$defineProperty'):
            try:
                var.get('$defineProperty')(Js({}), Js('a'), Js({'value':Js(1.0)}))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_82747382 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    var.put('$defineProperty', var.get(u"null"))
                finally:
                    if PyJsHolder_65_82747382 is not None:
                        var.own['e'] = PyJsHolder_65_82747382
                    else:
                        del var.own['e']
                    del PyJsHolder_65_82747382
        @Js
        def PyJs_callBind_1731_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'callBind':PyJs_callBind_1731_}, var)
            var.registers([])
            return var.get('$reflectApply')(var.get('bind'), var.get('$call'), var.get('arguments'))
        PyJs_callBind_1731_._set_name('callBind')
        var.get('module').put('exports', PyJs_callBind_1731_)
        @Js
        def PyJs_applyBind_1732_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'applyBind':PyJs_applyBind_1732_}, var)
            var.registers([])
            return var.get('$reflectApply')(var.get('bind'), var.get('$apply'), var.get('arguments'))
        PyJs_applyBind_1732_._set_name('applyBind')
        var.put('applyBind', PyJs_applyBind_1732_)
        if var.get('$defineProperty'):
            var.get('$defineProperty')(var.get('module').get('exports'), Js('apply'), Js({'value':var.get('applyBind')}))
        else:
            var.get('module').get('exports').put('apply', var.get('applyBind'))
    PyJs_anonymous_1730_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1733_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'GetIntrinsic', 'callBind', 'require', '$indexOf'])
        Js('use strict')
        var.put('GetIntrinsic', var.get('require')(Js('../GetIntrinsic')))
        var.put('callBind', var.get('require')(Js('./callBind')))
        var.put('$indexOf', var.get('callBind')(var.get('GetIntrinsic')(Js('String.prototype.indexOf'))))
        @Js
        def PyJs_callBoundIntrinsic_1734_(name, allowMissing, this, arguments, var=var):
            var = Scope({'name':name, 'allowMissing':allowMissing, 'this':this, 'arguments':arguments, 'callBoundIntrinsic':PyJs_callBoundIntrinsic_1734_}, var)
            var.registers(['allowMissing', 'intrinsic', 'name'])
            var.put('intrinsic', var.get('GetIntrinsic')(var.get('name'), var.get('allowMissing').neg().neg()))
            if (PyJsStrictEq(var.get('intrinsic',throw=False).typeof(),Js('function')) and var.get('$indexOf')(var.get('name'), Js('.prototype.'))):
                return var.get('callBind')(var.get('intrinsic'))
            return var.get('intrinsic')
        PyJs_callBoundIntrinsic_1734_._set_name('callBoundIntrinsic')
        var.get('module').put('exports', PyJs_callBoundIntrinsic_1734_)
    PyJs_anonymous_1733_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1735_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'GetIntrinsic', '$gOPD', 'require'])
        Js('use strict')
        var.put('GetIntrinsic', var.get('require')(Js('../GetIntrinsic')))
        var.put('$gOPD', var.get('GetIntrinsic')(Js('%Object.getOwnPropertyDescriptor%')))
        if var.get('$gOPD'):
            try:
                var.get('$gOPD')(Js([]), Js('length'))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_81547835 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    var.put('$gOPD', var.get(u"null"))
                finally:
                    if PyJsHolder_65_81547835 is not None:
                        var.own['e'] = PyJsHolder_65_81547835
                    else:
                        del var.own['e']
                    del PyJsHolder_65_81547835
        var.get('module').put('exports', var.get('$gOPD'))
    PyJs_anonymous_1735_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1736_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['defaultMaxListeners', 'R', '_getMaxListeners', '_onceWrap', 'NumberIsNaN', 'ReflectApply', '_addListener', 'once', 'spliceOne', '_listeners', 'onceWrapper', 'require', 'listenerCount', 'ProcessEmitWarning', 'module', 'arrayClone', 'ReflectOwnKeys', 'unwrapListeners', 'exports', 'checkListener', 'EventEmitter'])
        @Js
        def PyJsHoisted_ProcessEmitWarning_(warning, this, arguments, var=var):
            var = Scope({'warning':warning, 'this':this, 'arguments':arguments}, var)
            var.registers(['warning'])
            if (var.get('console') and var.get('console').get('warn')):
                var.get('console').callprop('warn', var.get('warning'))
        PyJsHoisted_ProcessEmitWarning_.func_name = 'ProcessEmitWarning'
        var.put('ProcessEmitWarning', PyJsHoisted_ProcessEmitWarning_)
        @Js
        def PyJsHoisted_EventEmitter_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('EventEmitter').get('init').callprop('call', var.get(u"this"))
        PyJsHoisted_EventEmitter_.func_name = 'EventEmitter'
        var.put('EventEmitter', PyJsHoisted_EventEmitter_)
        @Js
        def PyJsHoisted_checkListener_(listener, this, arguments, var=var):
            var = Scope({'listener':listener, 'this':this, 'arguments':arguments}, var)
            var.registers(['listener'])
            if PyJsStrictNeq(var.get('listener',throw=False).typeof(),Js('function')):
                PyJsTempException = JsToPyException(var.get('TypeError').create((Js('The "listener" argument must be of type Function. Received type ')+(Js('undefined') if PyJsStrictEq(var.get('listener',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('listener'))))))
                raise PyJsTempException
        PyJsHoisted_checkListener_.func_name = 'checkListener'
        var.put('checkListener', PyJsHoisted_checkListener_)
        @Js
        def PyJsHoisted__getMaxListeners_(that, this, arguments, var=var):
            var = Scope({'that':that, 'this':this, 'arguments':arguments}, var)
            var.registers(['that'])
            if PyJsStrictEq(var.get('that').get('_maxListeners'),var.get('undefined')):
                return var.get('EventEmitter').get('defaultMaxListeners')
            return var.get('that').get('_maxListeners')
        PyJsHoisted__getMaxListeners_.func_name = '_getMaxListeners'
        var.put('_getMaxListeners', PyJsHoisted__getMaxListeners_)
        @Js
        def PyJsHoisted__addListener_(target, type, listener, prepend, this, arguments, var=var):
            var = Scope({'target':target, 'type':type, 'listener':listener, 'prepend':prepend, 'this':this, 'arguments':arguments}, var)
            var.registers(['prepend', 'existing', 'w', 'target', 'listener', 'm', 'type', 'events'])
            pass
            pass
            pass
            var.get('checkListener')(var.get('listener'))
            var.put('events', var.get('target').get('_events'))
            if PyJsStrictEq(var.get('events'),var.get('undefined')):
                var.put('events', var.get('target').put('_events', var.get('Object').callprop('create', var.get(u"null"))))
                var.get('target').put('_eventsCount', Js(0.0))
            else:
                if PyJsStrictNeq(var.get('events').get('newListener'),var.get('undefined')):
                    var.get('target').callprop('emit', Js('newListener'), var.get('type'), (var.get('listener').get('listener') if var.get('listener').get('listener') else var.get('listener')))
                    var.put('events', var.get('target').get('_events'))
                var.put('existing', var.get('events').get(var.get('type')))
            if PyJsStrictEq(var.get('existing'),var.get('undefined')):
                var.put('existing', var.get('events').put(var.get('type'), var.get('listener')))
                var.get('target').put('_eventsCount',Js(var.get('target').get('_eventsCount').to_number())+Js(1))
            else:
                if PyJsStrictEq(var.get('existing',throw=False).typeof(),Js('function')):
                    var.put('existing', var.get('events').put(var.get('type'), (Js([var.get('listener'), var.get('existing')]) if var.get('prepend') else Js([var.get('existing'), var.get('listener')]))))
                else:
                    if var.get('prepend'):
                        var.get('existing').callprop('unshift', var.get('listener'))
                    else:
                        var.get('existing').callprop('push', var.get('listener'))
                var.put('m', var.get('_getMaxListeners')(var.get('target')))
                if (((var.get('m')>Js(0.0)) and (var.get('existing').get('length')>var.get('m'))) and var.get('existing').get('warned').neg()):
                    var.get('existing').put('warned', Js(True))
                    var.put('w', var.get('Error').create(((((((Js('Possible EventEmitter memory leak detected. ')+var.get('existing').get('length'))+Js(' '))+var.get('String')(var.get('type')))+Js(' listeners '))+Js('added. Use emitter.setMaxListeners() to '))+Js('increase limit'))))
                    var.get('w').put('name', Js('MaxListenersExceededWarning'))
                    var.get('w').put('emitter', var.get('target'))
                    var.get('w').put('type', var.get('type'))
                    var.get('w').put('count', var.get('existing').get('length'))
                    var.get('ProcessEmitWarning')(var.get('w'))
            return var.get('target')
        PyJsHoisted__addListener_.func_name = '_addListener'
        var.put('_addListener', PyJsHoisted__addListener_)
        @Js
        def PyJsHoisted_onceWrapper_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            if var.get(u"this").get('fired').neg():
                var.get(u"this").get('target').callprop('removeListener', var.get(u"this").get('type'), var.get(u"this").get('wrapFn'))
                var.get(u"this").put('fired', Js(True))
                if PyJsStrictEq(var.get('arguments').get('length'),Js(0.0)):
                    return var.get(u"this").get('listener').callprop('call', var.get(u"this").get('target'))
                return var.get(u"this").get('listener').callprop('apply', var.get(u"this").get('target'), var.get('arguments'))
        PyJsHoisted_onceWrapper_.func_name = 'onceWrapper'
        var.put('onceWrapper', PyJsHoisted_onceWrapper_)
        @Js
        def PyJsHoisted__onceWrap_(target, type, listener, this, arguments, var=var):
            var = Scope({'target':target, 'type':type, 'listener':listener, 'this':this, 'arguments':arguments}, var)
            var.registers(['wrapped', 'state', 'target', 'listener', 'type'])
            var.put('state', Js({'fired':Js(False),'wrapFn':var.get('undefined'),'target':var.get('target'),'type':var.get('type'),'listener':var.get('listener')}))
            var.put('wrapped', var.get('onceWrapper').callprop('bind', var.get('state')))
            var.get('wrapped').put('listener', var.get('listener'))
            var.get('state').put('wrapFn', var.get('wrapped'))
            return var.get('wrapped')
        PyJsHoisted__onceWrap_.func_name = '_onceWrap'
        var.put('_onceWrap', PyJsHoisted__onceWrap_)
        @Js
        def PyJsHoisted__listeners_(target, type, unwrap, this, arguments, var=var):
            var = Scope({'target':target, 'type':type, 'unwrap':unwrap, 'this':this, 'arguments':arguments}, var)
            var.registers(['target', 'evlistener', 'type', 'events', 'unwrap'])
            var.put('events', var.get('target').get('_events'))
            if PyJsStrictEq(var.get('events'),var.get('undefined')):
                return Js([])
            var.put('evlistener', var.get('events').get(var.get('type')))
            if PyJsStrictEq(var.get('evlistener'),var.get('undefined')):
                return Js([])
            if PyJsStrictEq(var.get('evlistener',throw=False).typeof(),Js('function')):
                return (Js([(var.get('evlistener').get('listener') or var.get('evlistener'))]) if var.get('unwrap') else Js([var.get('evlistener')]))
            return (var.get('unwrapListeners')(var.get('evlistener')) if var.get('unwrap') else var.get('arrayClone')(var.get('evlistener'), var.get('evlistener').get('length')))
        PyJsHoisted__listeners_.func_name = '_listeners'
        var.put('_listeners', PyJsHoisted__listeners_)
        @Js
        def PyJsHoisted_listenerCount_(type, this, arguments, var=var):
            var = Scope({'type':type, 'this':this, 'arguments':arguments}, var)
            var.registers(['evlistener', 'type', 'events'])
            var.put('events', var.get(u"this").get('_events'))
            if PyJsStrictNeq(var.get('events'),var.get('undefined')):
                var.put('evlistener', var.get('events').get(var.get('type')))
                if PyJsStrictEq(var.get('evlistener',throw=False).typeof(),Js('function')):
                    return Js(1.0)
                else:
                    if PyJsStrictNeq(var.get('evlistener'),var.get('undefined')):
                        return var.get('evlistener').get('length')
            return Js(0.0)
        PyJsHoisted_listenerCount_.func_name = 'listenerCount'
        var.put('listenerCount', PyJsHoisted_listenerCount_)
        @Js
        def PyJsHoisted_arrayClone_(arr, n, this, arguments, var=var):
            var = Scope({'arr':arr, 'n':n, 'this':this, 'arguments':arguments}, var)
            var.registers(['copy', 'n', 'i', 'arr'])
            var.put('copy', var.get('Array').create(var.get('n')))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('n')):
                try:
                    var.get('copy').put(var.get('i'), var.get('arr').get(var.get('i')))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            return var.get('copy')
        PyJsHoisted_arrayClone_.func_name = 'arrayClone'
        var.put('arrayClone', PyJsHoisted_arrayClone_)
        @Js
        def PyJsHoisted_spliceOne_(list, index, this, arguments, var=var):
            var = Scope({'list':list, 'index':index, 'this':this, 'arguments':arguments}, var)
            var.registers(['index', 'list'])
            #for JS loop
            
            while ((var.get('index')+Js(1.0))<var.get('list').get('length')):
                try:
                    var.get('list').put(var.get('index'), var.get('list').get((var.get('index')+Js(1.0))))
                finally:
                        (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))
            var.get('list').callprop('pop')
        PyJsHoisted_spliceOne_.func_name = 'spliceOne'
        var.put('spliceOne', PyJsHoisted_spliceOne_)
        @Js
        def PyJsHoisted_unwrapListeners_(arr, this, arguments, var=var):
            var = Scope({'arr':arr, 'this':this, 'arguments':arguments}, var)
            var.registers(['arr', 'i', 'ret'])
            var.put('ret', var.get('Array').create(var.get('arr').get('length')))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('ret').get('length')):
                try:
                    var.get('ret').put(var.get('i'), (var.get('arr').get(var.get('i')).get('listener') or var.get('arr').get(var.get('i'))))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            return var.get('ret')
        PyJsHoisted_unwrapListeners_.func_name = 'unwrapListeners'
        var.put('unwrapListeners', PyJsHoisted_unwrapListeners_)
        @Js
        def PyJsHoisted_once_(emitter, name, this, arguments, var=var):
            var = Scope({'emitter':emitter, 'name':name, 'this':this, 'arguments':arguments}, var)
            var.registers(['emitter', 'name'])
            @Js
            def PyJs_anonymous_1757_(resolve, reject, this, arguments, var=var):
                var = Scope({'resolve':resolve, 'reject':reject, 'this':this, 'arguments':arguments}, var)
                var.registers(['resolve', 'errorListener', 'reject', 'eventListener'])
                @Js
                def PyJsHoisted_eventListener_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    if PyJsStrictNeq(var.get('errorListener'),var.get('undefined')):
                        var.get('emitter').callprop('removeListener', Js('error'), var.get('errorListener'))
                    var.get('resolve')(Js([]).get('slice').callprop('call', var.get('arguments')))
                PyJsHoisted_eventListener_.func_name = 'eventListener'
                var.put('eventListener', PyJsHoisted_eventListener_)
                pass
                pass
                pass
                if PyJsStrictNeq(var.get('name'),Js('error')):
                    @Js
                    def PyJs_errorListener_1758_(err, this, arguments, var=var):
                        var = Scope({'err':err, 'this':this, 'arguments':arguments, 'errorListener':PyJs_errorListener_1758_}, var)
                        var.registers(['err'])
                        var.get('emitter').callprop('removeListener', var.get('name'), var.get('eventListener'))
                        var.get('reject')(var.get('err'))
                    PyJs_errorListener_1758_._set_name('errorListener')
                    var.put('errorListener', PyJs_errorListener_1758_)
                    var.get('emitter').callprop('once', Js('error'), var.get('errorListener'))
                var.get('emitter').callprop('once', var.get('name'), var.get('eventListener'))
            PyJs_anonymous_1757_._set_name('anonymous')
            return var.get('Promise').create(PyJs_anonymous_1757_)
        PyJsHoisted_once_.func_name = 'once'
        var.put('once', PyJsHoisted_once_)
        Js('use strict')
        var.put('R', (var.get('Reflect') if PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('Reflect',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('Reflect'))),Js('object')) else var.get(u"null")))
        @Js
        def PyJs_ReflectApply_1737_(target, receiver, args, this, arguments, var=var):
            var = Scope({'target':target, 'receiver':receiver, 'args':args, 'this':this, 'arguments':arguments, 'ReflectApply':PyJs_ReflectApply_1737_}, var)
            var.registers(['receiver', 'target', 'args'])
            return var.get('Function').get('prototype').get('apply').callprop('call', var.get('target'), var.get('receiver'), var.get('args'))
        PyJs_ReflectApply_1737_._set_name('ReflectApply')
        var.put('ReflectApply', (var.get('R').get('apply') if (var.get('R') and PyJsStrictEq(var.get('R').get('apply').typeof(),Js('function'))) else PyJs_ReflectApply_1737_))
        pass
        if (var.get('R') and PyJsStrictEq(var.get('R').get('ownKeys').typeof(),Js('function'))):
            var.put('ReflectOwnKeys', var.get('R').get('ownKeys'))
        else:
            if var.get('Object').get('getOwnPropertySymbols'):
                @Js
                def PyJs_ReflectOwnKeys_1738_(target, this, arguments, var=var):
                    var = Scope({'target':target, 'this':this, 'arguments':arguments, 'ReflectOwnKeys':PyJs_ReflectOwnKeys_1738_}, var)
                    var.registers(['target'])
                    return var.get('Object').callprop('getOwnPropertyNames', var.get('target')).callprop('concat', var.get('Object').callprop('getOwnPropertySymbols', var.get('target')))
                PyJs_ReflectOwnKeys_1738_._set_name('ReflectOwnKeys')
                var.put('ReflectOwnKeys', PyJs_ReflectOwnKeys_1738_)
            else:
                @Js
                def PyJs_ReflectOwnKeys_1739_(target, this, arguments, var=var):
                    var = Scope({'target':target, 'this':this, 'arguments':arguments, 'ReflectOwnKeys':PyJs_ReflectOwnKeys_1739_}, var)
                    var.registers(['target'])
                    return var.get('Object').callprop('getOwnPropertyNames', var.get('target'))
                PyJs_ReflectOwnKeys_1739_._set_name('ReflectOwnKeys')
                var.put('ReflectOwnKeys', PyJs_ReflectOwnKeys_1739_)
        pass
        @Js
        def PyJs_NumberIsNaN_1740_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments, 'NumberIsNaN':PyJs_NumberIsNaN_1740_}, var)
            var.registers(['value'])
            return PyJsStrictNeq(var.get('value'),var.get('value'))
        PyJs_NumberIsNaN_1740_._set_name('NumberIsNaN')
        var.put('NumberIsNaN', (var.get('Number').get('isNaN') or PyJs_NumberIsNaN_1740_))
        pass
        var.get('module').put('exports', var.get('EventEmitter'))
        var.get('module').get('exports').put('once', var.get('once'))
        var.get('EventEmitter').put('EventEmitter', var.get('EventEmitter'))
        var.get('EventEmitter').get('prototype').put('_events', var.get('undefined'))
        var.get('EventEmitter').get('prototype').put('_eventsCount', Js(0.0))
        var.get('EventEmitter').get('prototype').put('_maxListeners', var.get('undefined'))
        var.put('defaultMaxListeners', Js(10.0))
        pass
        @Js
        def PyJs_get_1741_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_1741_}, var)
            var.registers([])
            return var.get('defaultMaxListeners')
        PyJs_get_1741_._set_name('get')
        @Js
        def PyJs_set_1742_(arg, this, arguments, var=var):
            var = Scope({'arg':arg, 'this':this, 'arguments':arguments, 'set':PyJs_set_1742_}, var)
            var.registers(['arg'])
            if ((PyJsStrictNeq(var.get('arg',throw=False).typeof(),Js('number')) or (var.get('arg')<Js(0.0))) or var.get('NumberIsNaN')(var.get('arg'))):
                PyJsTempException = JsToPyException(var.get('RangeError').create(((Js('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ')+var.get('arg'))+Js('.'))))
                raise PyJsTempException
            var.put('defaultMaxListeners', var.get('arg'))
        PyJs_set_1742_._set_name('set')
        var.get('Object').callprop('defineProperty', var.get('EventEmitter'), Js('defaultMaxListeners'), Js({'enumerable':Js(True),'get':PyJs_get_1741_,'set':PyJs_set_1742_}))
        @Js
        def PyJs_anonymous_1743_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            if (PyJsStrictEq(var.get(u"this").get('_events'),var.get('undefined')) or PyJsStrictEq(var.get(u"this").get('_events'),var.get('Object').callprop('getPrototypeOf', var.get(u"this")).get('_events'))):
                var.get(u"this").put('_events', var.get('Object').callprop('create', var.get(u"null")))
                var.get(u"this").put('_eventsCount', Js(0.0))
            var.get(u"this").put('_maxListeners', (var.get(u"this").get('_maxListeners') or var.get('undefined')))
        PyJs_anonymous_1743_._set_name('anonymous')
        var.get('EventEmitter').put('init', PyJs_anonymous_1743_)
        @Js
        def PyJs_setMaxListeners_1744_(n, this, arguments, var=var):
            var = Scope({'n':n, 'this':this, 'arguments':arguments, 'setMaxListeners':PyJs_setMaxListeners_1744_}, var)
            var.registers(['n'])
            if ((PyJsStrictNeq(var.get('n',throw=False).typeof(),Js('number')) or (var.get('n')<Js(0.0))) or var.get('NumberIsNaN')(var.get('n'))):
                PyJsTempException = JsToPyException(var.get('RangeError').create(((Js('The value of "n" is out of range. It must be a non-negative number. Received ')+var.get('n'))+Js('.'))))
                raise PyJsTempException
            var.get(u"this").put('_maxListeners', var.get('n'))
            return var.get(u"this")
        PyJs_setMaxListeners_1744_._set_name('setMaxListeners')
        var.get('EventEmitter').get('prototype').put('setMaxListeners', PyJs_setMaxListeners_1744_)
        pass
        @Js
        def PyJs_getMaxListeners_1745_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'getMaxListeners':PyJs_getMaxListeners_1745_}, var)
            var.registers([])
            return var.get('_getMaxListeners')(var.get(u"this"))
        PyJs_getMaxListeners_1745_._set_name('getMaxListeners')
        var.get('EventEmitter').get('prototype').put('getMaxListeners', PyJs_getMaxListeners_1745_)
        @Js
        def PyJs_emit_1746_(type, this, arguments, var=var):
            var = Scope({'type':type, 'this':this, 'arguments':arguments, 'emit':PyJs_emit_1746_}, var)
            var.registers(['len', 'er', 'i', 'err', 'handler', 'args', 'listeners', 'type', 'doError', 'events'])
            var.put('args', Js([]))
            #for JS loop
            var.put('i', Js(1.0))
            while (var.get('i')<var.get('arguments').get('length')):
                try:
                    var.get('args').callprop('push', var.get('arguments').get(var.get('i')))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            var.put('doError', PyJsStrictEq(var.get('type'),Js('error')))
            var.put('events', var.get(u"this").get('_events'))
            if PyJsStrictNeq(var.get('events'),var.get('undefined')):
                var.put('doError', (var.get('doError') and PyJsStrictEq(var.get('events').get('error'),var.get('undefined'))))
            else:
                if var.get('doError').neg():
                    return Js(False)
            if var.get('doError'):
                pass
                if (var.get('args').get('length')>Js(0.0)):
                    var.put('er', var.get('args').get('0'))
                if var.get('er').instanceof(var.get('Error')):
                    PyJsTempException = JsToPyException(var.get('er'))
                    raise PyJsTempException
                var.put('err', var.get('Error').create((Js('Unhandled error.')+(((Js(' (')+var.get('er').get('message'))+Js(')')) if var.get('er') else Js('')))))
                var.get('err').put('context', var.get('er'))
                PyJsTempException = JsToPyException(var.get('err'))
                raise PyJsTempException
            var.put('handler', var.get('events').get(var.get('type')))
            if PyJsStrictEq(var.get('handler'),var.get('undefined')):
                return Js(False)
            if PyJsStrictEq(var.get('handler',throw=False).typeof(),Js('function')):
                var.get('ReflectApply')(var.get('handler'), var.get(u"this"), var.get('args'))
            else:
                var.put('len', var.get('handler').get('length'))
                var.put('listeners', var.get('arrayClone')(var.get('handler'), var.get('len')))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('len')):
                    try:
                        var.get('ReflectApply')(var.get('listeners').get(var.get('i')), var.get(u"this"), var.get('args'))
                    finally:
                            var.put('i',Js(var.get('i').to_number())+Js(1))
            return Js(True)
        PyJs_emit_1746_._set_name('emit')
        var.get('EventEmitter').get('prototype').put('emit', PyJs_emit_1746_)
        pass
        @Js
        def PyJs_addListener_1747_(type, listener, this, arguments, var=var):
            var = Scope({'type':type, 'listener':listener, 'this':this, 'arguments':arguments, 'addListener':PyJs_addListener_1747_}, var)
            var.registers(['type', 'listener'])
            return var.get('_addListener')(var.get(u"this"), var.get('type'), var.get('listener'), Js(False))
        PyJs_addListener_1747_._set_name('addListener')
        var.get('EventEmitter').get('prototype').put('addListener', PyJs_addListener_1747_)
        var.get('EventEmitter').get('prototype').put('on', var.get('EventEmitter').get('prototype').get('addListener'))
        @Js
        def PyJs_prependListener_1748_(type, listener, this, arguments, var=var):
            var = Scope({'type':type, 'listener':listener, 'this':this, 'arguments':arguments, 'prependListener':PyJs_prependListener_1748_}, var)
            var.registers(['type', 'listener'])
            return var.get('_addListener')(var.get(u"this"), var.get('type'), var.get('listener'), Js(True))
        PyJs_prependListener_1748_._set_name('prependListener')
        var.get('EventEmitter').get('prototype').put('prependListener', PyJs_prependListener_1748_)
        pass
        pass
        @Js
        def PyJs_once_1749_(type, listener, this, arguments, var=var):
            var = Scope({'type':type, 'listener':listener, 'this':this, 'arguments':arguments, 'once':PyJs_once_1749_}, var)
            var.registers(['type', 'listener'])
            var.get('checkListener')(var.get('listener'))
            var.get(u"this").callprop('on', var.get('type'), var.get('_onceWrap')(var.get(u"this"), var.get('type'), var.get('listener')))
            return var.get(u"this")
        PyJs_once_1749_._set_name('once')
        var.get('EventEmitter').get('prototype').put('once', PyJs_once_1749_)
        @Js
        def PyJs_prependOnceListener_1750_(type, listener, this, arguments, var=var):
            var = Scope({'type':type, 'listener':listener, 'this':this, 'arguments':arguments, 'prependOnceListener':PyJs_prependOnceListener_1750_}, var)
            var.registers(['type', 'listener'])
            var.get('checkListener')(var.get('listener'))
            var.get(u"this").callprop('prependListener', var.get('type'), var.get('_onceWrap')(var.get(u"this"), var.get('type'), var.get('listener')))
            return var.get(u"this")
        PyJs_prependOnceListener_1750_._set_name('prependOnceListener')
        var.get('EventEmitter').get('prototype').put('prependOnceListener', PyJs_prependOnceListener_1750_)
        @Js
        def PyJs_removeListener_1751_(type, listener, this, arguments, var=var):
            var = Scope({'type':type, 'listener':listener, 'this':this, 'arguments':arguments, 'removeListener':PyJs_removeListener_1751_}, var)
            var.registers(['i', 'list', 'listener', 'position', 'type', 'originalListener', 'events'])
            pass
            var.get('checkListener')(var.get('listener'))
            var.put('events', var.get(u"this").get('_events'))
            if PyJsStrictEq(var.get('events'),var.get('undefined')):
                return var.get(u"this")
            var.put('list', var.get('events').get(var.get('type')))
            if PyJsStrictEq(var.get('list'),var.get('undefined')):
                return var.get(u"this")
            if (PyJsStrictEq(var.get('list'),var.get('listener')) or PyJsStrictEq(var.get('list').get('listener'),var.get('listener'))):
                if PyJsStrictEq(var.get(u"this").put('_eventsCount',Js(var.get(u"this").get('_eventsCount').to_number())-Js(1)),Js(0.0)):
                    var.get(u"this").put('_events', var.get('Object').callprop('create', var.get(u"null")))
                else:
                    var.get('events').delete(var.get('type'))
                    if var.get('events').get('removeListener'):
                        var.get(u"this").callprop('emit', Js('removeListener'), var.get('type'), (var.get('list').get('listener') or var.get('listener')))
            else:
                if PyJsStrictNeq(var.get('list',throw=False).typeof(),Js('function')):
                    var.put('position', (-Js(1.0)))
                    #for JS loop
                    var.put('i', (var.get('list').get('length')-Js(1.0)))
                    while (var.get('i')>=Js(0.0)):
                        try:
                            if (PyJsStrictEq(var.get('list').get(var.get('i')),var.get('listener')) or PyJsStrictEq(var.get('list').get(var.get('i')).get('listener'),var.get('listener'))):
                                var.put('originalListener', var.get('list').get(var.get('i')).get('listener'))
                                var.put('position', var.get('i'))
                                break
                        finally:
                                (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
                    if (var.get('position')<Js(0.0)):
                        return var.get(u"this")
                    if PyJsStrictEq(var.get('position'),Js(0.0)):
                        var.get('list').callprop('shift')
                    else:
                        var.get('spliceOne')(var.get('list'), var.get('position'))
                    if PyJsStrictEq(var.get('list').get('length'),Js(1.0)):
                        var.get('events').put(var.get('type'), var.get('list').get('0'))
                    if PyJsStrictNeq(var.get('events').get('removeListener'),var.get('undefined')):
                        var.get(u"this").callprop('emit', Js('removeListener'), var.get('type'), (var.get('originalListener') or var.get('listener')))
            return var.get(u"this")
        PyJs_removeListener_1751_._set_name('removeListener')
        var.get('EventEmitter').get('prototype').put('removeListener', PyJs_removeListener_1751_)
        var.get('EventEmitter').get('prototype').put('off', var.get('EventEmitter').get('prototype').get('removeListener'))
        @Js
        def PyJs_removeAllListeners_1752_(type, this, arguments, var=var):
            var = Scope({'type':type, 'this':this, 'arguments':arguments, 'removeAllListeners':PyJs_removeAllListeners_1752_}, var)
            var.registers(['i', 'key', 'listeners', 'type', 'events', 'keys'])
            pass
            var.put('events', var.get(u"this").get('_events'))
            if PyJsStrictEq(var.get('events'),var.get('undefined')):
                return var.get(u"this")
            if PyJsStrictEq(var.get('events').get('removeListener'),var.get('undefined')):
                if PyJsStrictEq(var.get('arguments').get('length'),Js(0.0)):
                    var.get(u"this").put('_events', var.get('Object').callprop('create', var.get(u"null")))
                    var.get(u"this").put('_eventsCount', Js(0.0))
                else:
                    if PyJsStrictNeq(var.get('events').get(var.get('type')),var.get('undefined')):
                        if PyJsStrictEq(var.get(u"this").put('_eventsCount',Js(var.get(u"this").get('_eventsCount').to_number())-Js(1)),Js(0.0)):
                            var.get(u"this").put('_events', var.get('Object').callprop('create', var.get(u"null")))
                        else:
                            var.get('events').delete(var.get('type'))
                return var.get(u"this")
            if PyJsStrictEq(var.get('arguments').get('length'),Js(0.0)):
                var.put('keys', var.get('Object').callprop('keys', var.get('events')))
                pass
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('keys').get('length')):
                    try:
                        var.put('key', var.get('keys').get(var.get('i')))
                        if PyJsStrictEq(var.get('key'),Js('removeListener')):
                            continue
                        var.get(u"this").callprop('removeAllListeners', var.get('key'))
                    finally:
                            var.put('i',Js(var.get('i').to_number())+Js(1))
                var.get(u"this").callprop('removeAllListeners', Js('removeListener'))
                var.get(u"this").put('_events', var.get('Object').callprop('create', var.get(u"null")))
                var.get(u"this").put('_eventsCount', Js(0.0))
                return var.get(u"this")
            var.put('listeners', var.get('events').get(var.get('type')))
            if PyJsStrictEq(var.get('listeners',throw=False).typeof(),Js('function')):
                var.get(u"this").callprop('removeListener', var.get('type'), var.get('listeners'))
            else:
                if PyJsStrictNeq(var.get('listeners'),var.get('undefined')):
                    #for JS loop
                    var.put('i', (var.get('listeners').get('length')-Js(1.0)))
                    while (var.get('i')>=Js(0.0)):
                        try:
                            var.get(u"this").callprop('removeListener', var.get('type'), var.get('listeners').get(var.get('i')))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
            return var.get(u"this")
        PyJs_removeAllListeners_1752_._set_name('removeAllListeners')
        var.get('EventEmitter').get('prototype').put('removeAllListeners', PyJs_removeAllListeners_1752_)
        pass
        @Js
        def PyJs_listeners_1753_(type, this, arguments, var=var):
            var = Scope({'type':type, 'this':this, 'arguments':arguments, 'listeners':PyJs_listeners_1753_}, var)
            var.registers(['type'])
            return var.get('_listeners')(var.get(u"this"), var.get('type'), Js(True))
        PyJs_listeners_1753_._set_name('listeners')
        var.get('EventEmitter').get('prototype').put('listeners', PyJs_listeners_1753_)
        @Js
        def PyJs_rawListeners_1754_(type, this, arguments, var=var):
            var = Scope({'type':type, 'this':this, 'arguments':arguments, 'rawListeners':PyJs_rawListeners_1754_}, var)
            var.registers(['type'])
            return var.get('_listeners')(var.get(u"this"), var.get('type'), Js(False))
        PyJs_rawListeners_1754_._set_name('rawListeners')
        var.get('EventEmitter').get('prototype').put('rawListeners', PyJs_rawListeners_1754_)
        @Js
        def PyJs_anonymous_1755_(emitter, type, this, arguments, var=var):
            var = Scope({'emitter':emitter, 'type':type, 'this':this, 'arguments':arguments}, var)
            var.registers(['emitter', 'type'])
            if PyJsStrictEq(var.get('emitter').get('listenerCount').typeof(),Js('function')):
                return var.get('emitter').callprop('listenerCount', var.get('type'))
            else:
                return var.get('listenerCount').callprop('call', var.get('emitter'), var.get('type'))
        PyJs_anonymous_1755_._set_name('anonymous')
        var.get('EventEmitter').put('listenerCount', PyJs_anonymous_1755_)
        var.get('EventEmitter').get('prototype').put('listenerCount', var.get('listenerCount'))
        pass
        @Js
        def PyJs_eventNames_1756_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'eventNames':PyJs_eventNames_1756_}, var)
            var.registers([])
            return (var.get('ReflectOwnKeys')(var.get(u"this").get('_events')) if (var.get(u"this").get('_eventsCount')>Js(0.0)) else Js([]))
        PyJs_eventNames_1756_._set_name('eventNames')
        var.get('EventEmitter').get('prototype').put('eventNames', PyJs_eventNames_1756_)
        pass
        pass
        pass
        pass
    PyJs_anonymous_1736_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1759_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'toString', 'exports', 'hasOwn', 'require'])
        var.put('hasOwn', var.get('Object').get('prototype').get('hasOwnProperty'))
        var.put('toString', var.get('Object').get('prototype').get('toString'))
        @Js
        def PyJs_forEach_1760_(obj, fn, ctx, this, arguments, var=var):
            var = Scope({'obj':obj, 'fn':fn, 'ctx':ctx, 'this':this, 'arguments':arguments, 'forEach':PyJs_forEach_1760_}, var)
            var.registers(['i', 'l', 'k', 'ctx', 'fn', 'obj'])
            if PyJsStrictNeq(var.get('toString').callprop('call', var.get('fn')),Js('[object Function]')):
                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('iterator must be a function')))
                raise PyJsTempException
            var.put('l', var.get('obj').get('length'))
            if PyJsStrictEq(var.get('l'),(+var.get('l'))):
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('l')):
                    try:
                        var.get('fn').callprop('call', var.get('ctx'), var.get('obj').get(var.get('i')), var.get('i'), var.get('obj'))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            else:
                for PyJsTemp in var.get('obj'):
                    var.put('k', PyJsTemp)
                    if var.get('hasOwn').callprop('call', var.get('obj'), var.get('k')):
                        var.get('fn').callprop('call', var.get('ctx'), var.get('obj').get(var.get('k')), var.get('k'), var.get('obj'))
        PyJs_forEach_1760_._set_name('forEach')
        var.get('module').put('exports', PyJs_forEach_1760_)
    PyJs_anonymous_1759_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1761_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_1762_(process, this, arguments, var=var):
            var = Scope({'process':process, 'this':this, 'arguments':arguments}, var)
            var.registers(['process'])
            @Js
            def PyJs_anonymous_1763_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['mkdirpSync', 'utimesSync', 'copyLink', 'copySync', 'mayCopyFile', 'onFile', 'handleFilterAndCopy', 'copyFile', 'mkDirAndCopy', 'path', 'startCopy', 'onDir', 'copyFileFallback', 'getStats', 'fs', 'onLink', 'copyDirItem', 'stat', 'copyDir'])
                @Js
                def PyJsHoisted_copySync_(src, dest, opts, this, arguments, var=var):
                    var = Scope({'src':src, 'dest':dest, 'opts':opts, 'this':this, 'arguments':arguments}, var)
                    var.registers(['_stat$checkPathsSync', 'srcStat', 'destStat', 'opts', 'dest', 'src'])
                    if PyJsStrictEq(var.get('opts',throw=False).typeof(),Js('function')):
                        var.put('opts', Js({'filter':var.get('opts')}))
                    var.put('opts', (var.get('opts') or Js({})))
                    var.get('opts').put('clobber', (var.get('opts').get('clobber').neg().neg() if var.get('opts').contains(Js('clobber')) else Js(True)))
                    var.get('opts').put('overwrite', (var.get('opts').get('overwrite').neg().neg() if var.get('opts').contains(Js('overwrite')) else var.get('opts').get('clobber')))
                    if (var.get('opts').get('preserveTimestamps') and PyJsStrictEq(var.get('process').get('arch'),Js('ia32'))):
                        var.get('console').callprop('warn', Js('fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\n\n    see https://github.com/jprichardson/node-fs-extra/issues/269'))
                    var.put('_stat$checkPathsSync', var.get('stat').callprop('checkPathsSync', var.get('src'), var.get('dest'), Js('copy')))
                    var.put('srcStat', var.get('_stat$checkPathsSync').get('srcStat'))
                    var.put('destStat', var.get('_stat$checkPathsSync').get('destStat'))
                    var.get('stat').callprop('checkParentPathsSync', var.get('src'), var.get('srcStat'), var.get('dest'), Js('copy'))
                    return var.get('handleFilterAndCopy')(var.get('destStat'), var.get('src'), var.get('dest'), var.get('opts'))
                PyJsHoisted_copySync_.func_name = 'copySync'
                var.put('copySync', PyJsHoisted_copySync_)
                @Js
                def PyJsHoisted_handleFilterAndCopy_(destStat, src, dest, opts, this, arguments, var=var):
                    var = Scope({'destStat':destStat, 'src':src, 'dest':dest, 'opts':opts, 'this':this, 'arguments':arguments}, var)
                    var.registers(['destStat', 'opts', 'dest', 'destParent', 'src'])
                    if (var.get('opts').get('filter') and var.get('opts').callprop('filter', var.get('src'), var.get('dest')).neg()):
                        return var.get('undefined')
                    var.put('destParent', var.get('path').callprop('dirname', var.get('dest')))
                    if var.get('fs').callprop('existsSync', var.get('destParent')).neg():
                        var.get('mkdirpSync')(var.get('destParent'))
                    return var.get('startCopy')(var.get('destStat'), var.get('src'), var.get('dest'), var.get('opts'))
                PyJsHoisted_handleFilterAndCopy_.func_name = 'handleFilterAndCopy'
                var.put('handleFilterAndCopy', PyJsHoisted_handleFilterAndCopy_)
                @Js
                def PyJsHoisted_startCopy_(destStat, src, dest, opts, this, arguments, var=var):
                    var = Scope({'destStat':destStat, 'src':src, 'dest':dest, 'opts':opts, 'this':this, 'arguments':arguments}, var)
                    var.registers(['destStat', 'dest', 'opts', 'src'])
                    if (var.get('opts').get('filter') and var.get('opts').callprop('filter', var.get('src'), var.get('dest')).neg()):
                        return var.get('undefined')
                    return var.get('getStats')(var.get('destStat'), var.get('src'), var.get('dest'), var.get('opts'))
                PyJsHoisted_startCopy_.func_name = 'startCopy'
                var.put('startCopy', PyJsHoisted_startCopy_)
                @Js
                def PyJsHoisted_getStats_(destStat, src, dest, opts, this, arguments, var=var):
                    var = Scope({'destStat':destStat, 'src':src, 'dest':dest, 'opts':opts, 'this':this, 'arguments':arguments}, var)
                    var.registers(['srcStat', 'destStat', 'statSync', 'opts', 'dest', 'src'])
                    var.put('statSync', (var.get('fs').get('statSync') if var.get('opts').get('dereference') else var.get('fs').get('lstatSync')))
                    var.put('srcStat', var.get('statSync')(var.get('src')))
                    if var.get('srcStat').callprop('isDirectory'):
                        return var.get('onDir')(var.get('srcStat'), var.get('destStat'), var.get('src'), var.get('dest'), var.get('opts'))
                    else:
                        if ((var.get('srcStat').callprop('isFile') or var.get('srcStat').callprop('isCharacterDevice')) or var.get('srcStat').callprop('isBlockDevice')):
                            return var.get('onFile')(var.get('srcStat'), var.get('destStat'), var.get('src'), var.get('dest'), var.get('opts'))
                        else:
                            if var.get('srcStat').callprop('isSymbolicLink'):
                                return var.get('onLink')(var.get('destStat'), var.get('src'), var.get('dest'), var.get('opts'))
                PyJsHoisted_getStats_.func_name = 'getStats'
                var.put('getStats', PyJsHoisted_getStats_)
                @Js
                def PyJsHoisted_onFile_(srcStat, destStat, src, dest, opts, this, arguments, var=var):
                    var = Scope({'srcStat':srcStat, 'destStat':destStat, 'src':src, 'dest':dest, 'opts':opts, 'this':this, 'arguments':arguments}, var)
                    var.registers(['srcStat', 'destStat', 'opts', 'dest', 'src'])
                    if var.get('destStat').neg():
                        return var.get('copyFile')(var.get('srcStat'), var.get('src'), var.get('dest'), var.get('opts'))
                    return var.get('mayCopyFile')(var.get('srcStat'), var.get('src'), var.get('dest'), var.get('opts'))
                PyJsHoisted_onFile_.func_name = 'onFile'
                var.put('onFile', PyJsHoisted_onFile_)
                @Js
                def PyJsHoisted_mayCopyFile_(srcStat, src, dest, opts, this, arguments, var=var):
                    var = Scope({'srcStat':srcStat, 'src':src, 'dest':dest, 'opts':opts, 'this':this, 'arguments':arguments}, var)
                    var.registers(['src', 'dest', 'opts', 'srcStat'])
                    if var.get('opts').get('overwrite'):
                        var.get('fs').callprop('unlinkSync', var.get('dest'))
                        return var.get('copyFile')(var.get('srcStat'), var.get('src'), var.get('dest'), var.get('opts'))
                    else:
                        if var.get('opts').get('errorOnExist'):
                            PyJsTempException = JsToPyException(var.get('Error').create(((Js("'")+var.get('dest'))+Js("' already exists"))))
                            raise PyJsTempException
                PyJsHoisted_mayCopyFile_.func_name = 'mayCopyFile'
                var.put('mayCopyFile', PyJsHoisted_mayCopyFile_)
                @Js
                def PyJsHoisted_copyFile_(srcStat, src, dest, opts, this, arguments, var=var):
                    var = Scope({'srcStat':srcStat, 'src':src, 'dest':dest, 'opts':opts, 'this':this, 'arguments':arguments}, var)
                    var.registers(['src', 'dest', 'opts', 'srcStat'])
                    if PyJsStrictEq(var.get('fs').get('copyFileSync').typeof(),Js('function')):
                        var.get('fs').callprop('copyFileSync', var.get('src'), var.get('dest'))
                        var.get('fs').callprop('chmodSync', var.get('dest'), var.get('srcStat').get('mode'))
                        if var.get('opts').get('preserveTimestamps'):
                            return var.get('utimesSync')(var.get('dest'), var.get('srcStat').get('atime'), var.get('srcStat').get('mtime'))
                        return var.get('undefined')
                    return var.get('copyFileFallback')(var.get('srcStat'), var.get('src'), var.get('dest'), var.get('opts'))
                PyJsHoisted_copyFile_.func_name = 'copyFile'
                var.put('copyFile', PyJsHoisted_copyFile_)
                @Js
                def PyJsHoisted_copyFileFallback_(srcStat, src, dest, opts, this, arguments, var=var):
                    var = Scope({'srcStat':srcStat, 'src':src, 'dest':dest, 'opts':opts, 'this':this, 'arguments':arguments}, var)
                    var.registers(['pos', 'fdr', 'fdw', 'srcStat', '_buff', 'BUF_LENGTH', 'bytesRead', 'opts', 'dest', 'src'])
                    var.put('BUF_LENGTH', (Js(64.0)*Js(1024.0)))
                    var.put('_buff', var.get('require')(Js('../util/buffer'))(var.get('BUF_LENGTH')))
                    var.put('fdr', var.get('fs').callprop('openSync', var.get('src'), Js('r')))
                    var.put('fdw', var.get('fs').callprop('openSync', var.get('dest'), Js('w'), var.get('srcStat').get('mode')))
                    var.put('pos', Js(0.0))
                    while (var.get('pos')<var.get('srcStat').get('size')):
                        var.put('bytesRead', var.get('fs').callprop('readSync', var.get('fdr'), var.get('_buff'), Js(0.0), var.get('BUF_LENGTH'), var.get('pos')))
                        var.get('fs').callprop('writeSync', var.get('fdw'), var.get('_buff'), Js(0.0), var.get('bytesRead'))
                        var.put('pos', var.get('bytesRead'), '+')
                    if var.get('opts').get('preserveTimestamps'):
                        var.get('fs').callprop('futimesSync', var.get('fdw'), var.get('srcStat').get('atime'), var.get('srcStat').get('mtime'))
                    var.get('fs').callprop('closeSync', var.get('fdr'))
                    var.get('fs').callprop('closeSync', var.get('fdw'))
                PyJsHoisted_copyFileFallback_.func_name = 'copyFileFallback'
                var.put('copyFileFallback', PyJsHoisted_copyFileFallback_)
                @Js
                def PyJsHoisted_onDir_(srcStat, destStat, src, dest, opts, this, arguments, var=var):
                    var = Scope({'srcStat':srcStat, 'destStat':destStat, 'src':src, 'dest':dest, 'opts':opts, 'this':this, 'arguments':arguments}, var)
                    var.registers(['srcStat', 'destStat', 'opts', 'dest', 'src'])
                    if var.get('destStat').neg():
                        return var.get('mkDirAndCopy')(var.get('srcStat'), var.get('src'), var.get('dest'), var.get('opts'))
                    if (var.get('destStat') and var.get('destStat').callprop('isDirectory').neg()):
                        PyJsTempException = JsToPyException(var.get('Error').create(((((Js("Cannot overwrite non-directory '")+var.get('dest'))+Js("' with directory '"))+var.get('src'))+Js("'."))))
                        raise PyJsTempException
                    return var.get('copyDir')(var.get('src'), var.get('dest'), var.get('opts'))
                PyJsHoisted_onDir_.func_name = 'onDir'
                var.put('onDir', PyJsHoisted_onDir_)
                @Js
                def PyJsHoisted_mkDirAndCopy_(srcStat, src, dest, opts, this, arguments, var=var):
                    var = Scope({'srcStat':srcStat, 'src':src, 'dest':dest, 'opts':opts, 'this':this, 'arguments':arguments}, var)
                    var.registers(['src', 'dest', 'opts', 'srcStat'])
                    var.get('fs').callprop('mkdirSync', var.get('dest'))
                    var.get('copyDir')(var.get('src'), var.get('dest'), var.get('opts'))
                    return var.get('fs').callprop('chmodSync', var.get('dest'), var.get('srcStat').get('mode'))
                PyJsHoisted_mkDirAndCopy_.func_name = 'mkDirAndCopy'
                var.put('mkDirAndCopy', PyJsHoisted_mkDirAndCopy_)
                @Js
                def PyJsHoisted_copyDir_(src, dest, opts, this, arguments, var=var):
                    var = Scope({'src':src, 'dest':dest, 'opts':opts, 'this':this, 'arguments':arguments}, var)
                    var.registers(['dest', 'opts', 'src'])
                    @Js
                    def PyJs_anonymous_1764_(item, this, arguments, var=var):
                        var = Scope({'item':item, 'this':this, 'arguments':arguments}, var)
                        var.registers(['item'])
                        return var.get('copyDirItem')(var.get('item'), var.get('src'), var.get('dest'), var.get('opts'))
                    PyJs_anonymous_1764_._set_name('anonymous')
                    var.get('fs').callprop('readdirSync', var.get('src')).callprop('forEach', PyJs_anonymous_1764_)
                PyJsHoisted_copyDir_.func_name = 'copyDir'
                var.put('copyDir', PyJsHoisted_copyDir_)
                @Js
                def PyJsHoisted_copyDirItem_(item, src, dest, opts, this, arguments, var=var):
                    var = Scope({'item':item, 'src':src, 'dest':dest, 'opts':opts, 'this':this, 'arguments':arguments}, var)
                    var.registers(['_stat$checkPathsSync2', 'srcItem', 'destStat', 'destItem', 'item', 'opts', 'dest', 'src'])
                    var.put('srcItem', var.get('path').callprop('join', var.get('src'), var.get('item')))
                    var.put('destItem', var.get('path').callprop('join', var.get('dest'), var.get('item')))
                    var.put('_stat$checkPathsSync2', var.get('stat').callprop('checkPathsSync', var.get('srcItem'), var.get('destItem'), Js('copy')))
                    var.put('destStat', var.get('_stat$checkPathsSync2').get('destStat'))
                    return var.get('startCopy')(var.get('destStat'), var.get('srcItem'), var.get('destItem'), var.get('opts'))
                PyJsHoisted_copyDirItem_.func_name = 'copyDirItem'
                var.put('copyDirItem', PyJsHoisted_copyDirItem_)
                @Js
                def PyJsHoisted_onLink_(destStat, src, dest, opts, this, arguments, var=var):
                    var = Scope({'destStat':destStat, 'src':src, 'dest':dest, 'opts':opts, 'this':this, 'arguments':arguments}, var)
                    var.registers(['resolvedDest', 'destStat', 'resolvedSrc', 'opts', 'dest', 'src'])
                    var.put('resolvedSrc', var.get('fs').callprop('readlinkSync', var.get('src')))
                    if var.get('opts').get('dereference'):
                        var.put('resolvedSrc', var.get('path').callprop('resolve', var.get('process').callprop('cwd'), var.get('resolvedSrc')))
                    if var.get('destStat').neg():
                        return var.get('fs').callprop('symlinkSync', var.get('resolvedSrc'), var.get('dest'))
                    else:
                        var.put('resolvedDest', PyJsComma(Js(0.0), Js(None)))
                        try:
                            var.put('resolvedDest', var.get('fs').callprop('readlinkSync', var.get('dest')))
                        except PyJsException as PyJsTempException:
                            PyJsHolder_657272_73472787 = var.own.get('err')
                            var.force_own_put('err', PyExceptionToJs(PyJsTempException))
                            try:
                                if (PyJsStrictEq(var.get('err').get('code'),Js('EINVAL')) or PyJsStrictEq(var.get('err').get('code'),Js('UNKNOWN'))):
                                    return var.get('fs').callprop('symlinkSync', var.get('resolvedSrc'), var.get('dest'))
                                PyJsTempException = JsToPyException(var.get('err'))
                                raise PyJsTempException
                            finally:
                                if PyJsHolder_657272_73472787 is not None:
                                    var.own['err'] = PyJsHolder_657272_73472787
                                else:
                                    del var.own['err']
                                del PyJsHolder_657272_73472787
                        if var.get('opts').get('dereference'):
                            var.put('resolvedDest', var.get('path').callprop('resolve', var.get('process').callprop('cwd'), var.get('resolvedDest')))
                        if var.get('stat').callprop('isSrcSubdir', var.get('resolvedSrc'), var.get('resolvedDest')):
                            PyJsTempException = JsToPyException(var.get('Error').create(((((Js("Cannot copy '")+var.get('resolvedSrc'))+Js("' to a subdirectory of itself, '"))+var.get('resolvedDest'))+Js("'."))))
                            raise PyJsTempException
                        if (var.get('fs').callprop('statSync', var.get('dest')).callprop('isDirectory') and var.get('stat').callprop('isSrcSubdir', var.get('resolvedDest'), var.get('resolvedSrc'))):
                            PyJsTempException = JsToPyException(var.get('Error').create(((((Js("Cannot overwrite '")+var.get('resolvedDest'))+Js("' with '"))+var.get('resolvedSrc'))+Js("'."))))
                            raise PyJsTempException
                        return var.get('copyLink')(var.get('resolvedSrc'), var.get('dest'))
                PyJsHoisted_onLink_.func_name = 'onLink'
                var.put('onLink', PyJsHoisted_onLink_)
                @Js
                def PyJsHoisted_copyLink_(resolvedSrc, dest, this, arguments, var=var):
                    var = Scope({'resolvedSrc':resolvedSrc, 'dest':dest, 'this':this, 'arguments':arguments}, var)
                    var.registers(['resolvedSrc', 'dest'])
                    var.get('fs').callprop('unlinkSync', var.get('dest'))
                    return var.get('fs').callprop('symlinkSync', var.get('resolvedSrc'), var.get('dest'))
                PyJsHoisted_copyLink_.func_name = 'copyLink'
                var.put('copyLink', PyJsHoisted_copyLink_)
                Js('use strict')
                var.put('fs', var.get('require')(Js('graceful-fs')))
                var.put('path', var.get('require')(Js('path')))
                var.put('mkdirpSync', var.get('require')(Js('../mkdirs')).get('mkdirsSync'))
                var.put('utimesSync', var.get('require')(Js('../util/utimes.js')).get('utimesMillisSync'))
                var.put('stat', var.get('require')(Js('../util/stat')))
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                var.get('module').put('exports', var.get('copySync'))
            PyJs_anonymous_1763_._set_name('anonymous')
            PyJs_anonymous_1763_.callprop('call', var.get(u"this"))
        PyJs_anonymous_1762_._set_name('anonymous')
        PyJs_anonymous_1762_.callprop('call', var.get(u"this"), var.get('require')(Js('_process')))
    PyJs_anonymous_1761_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1765_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        Js('use strict')
        var.get('module').put('exports', Js({'copySync':var.get('require')(Js('./copy-sync'))}))
    PyJs_anonymous_1765_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1766_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_1767_(process, this, arguments, var=var):
            var = Scope({'process':process, 'this':this, 'arguments':arguments}, var)
            var.registers(['process'])
            @Js
            def PyJs_anonymous_1768_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['copyLink', 'pathExists', 'setDestModeAndTimestamps', 'handleFilter', 'mayCopyFile', 'checkParentDir', 'onFile', 'utimes', 'copyFile', 'copyDirItems', 'mkDirAndCopy', 'path', 'startCopy', 'onDir', 'copyFileFallback', 'getStats', 'fs', 'copy', 'mkdirp', 'onLink', 'copyDirItem', 'stat', 'copyDir'])
                @Js
                def PyJsHoisted_copy_(src, dest, opts, cb, this, arguments, var=var):
                    var = Scope({'src':src, 'dest':dest, 'opts':opts, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['dest', 'opts', 'cb', 'src'])
                    if (PyJsStrictEq(var.get('opts',throw=False).typeof(),Js('function')) and var.get('cb').neg()):
                        var.put('cb', var.get('opts'))
                        var.put('opts', Js({}))
                    else:
                        if PyJsStrictEq(var.get('opts',throw=False).typeof(),Js('function')):
                            var.put('opts', Js({'filter':var.get('opts')}))
                    @Js
                    def PyJs_anonymous_1769_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        pass
                    PyJs_anonymous_1769_._set_name('anonymous')
                    var.put('cb', (var.get('cb') or PyJs_anonymous_1769_))
                    var.put('opts', (var.get('opts') or Js({})))
                    var.get('opts').put('clobber', (var.get('opts').get('clobber').neg().neg() if var.get('opts').contains(Js('clobber')) else Js(True)))
                    var.get('opts').put('overwrite', (var.get('opts').get('overwrite').neg().neg() if var.get('opts').contains(Js('overwrite')) else var.get('opts').get('clobber')))
                    if (var.get('opts').get('preserveTimestamps') and PyJsStrictEq(var.get('process').get('arch'),Js('ia32'))):
                        var.get('console').callprop('warn', Js('fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\n\n    see https://github.com/jprichardson/node-fs-extra/issues/269'))
                    @Js
                    def PyJs_anonymous_1770_(err, stats, this, arguments, var=var):
                        var = Scope({'err':err, 'stats':stats, 'this':this, 'arguments':arguments}, var)
                        var.registers(['destStat', 'err', 'stats', 'srcStat'])
                        if var.get('err'):
                            return var.get('cb')(var.get('err'))
                        var.put('srcStat', var.get('stats').get('srcStat'))
                        var.put('destStat', var.get('stats').get('destStat'))
                        @Js
                        def PyJs_anonymous_1771_(err, this, arguments, var=var):
                            var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                            var.registers(['err'])
                            if var.get('err'):
                                return var.get('cb')(var.get('err'))
                            if var.get('opts').get('filter'):
                                return var.get('handleFilter')(var.get('checkParentDir'), var.get('destStat'), var.get('src'), var.get('dest'), var.get('opts'), var.get('cb'))
                            return var.get('checkParentDir')(var.get('destStat'), var.get('src'), var.get('dest'), var.get('opts'), var.get('cb'))
                        PyJs_anonymous_1771_._set_name('anonymous')
                        var.get('stat').callprop('checkParentPaths', var.get('src'), var.get('srcStat'), var.get('dest'), Js('copy'), PyJs_anonymous_1771_)
                    PyJs_anonymous_1770_._set_name('anonymous')
                    var.get('stat').callprop('checkPaths', var.get('src'), var.get('dest'), Js('copy'), PyJs_anonymous_1770_)
                PyJsHoisted_copy_.func_name = 'copy'
                var.put('copy', PyJsHoisted_copy_)
                @Js
                def PyJsHoisted_checkParentDir_(destStat, src, dest, opts, cb, this, arguments, var=var):
                    var = Scope({'destStat':destStat, 'src':src, 'dest':dest, 'opts':opts, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['destStat', 'cb', 'opts', 'dest', 'destParent', 'src'])
                    var.put('destParent', var.get('path').callprop('dirname', var.get('dest')))
                    @Js
                    def PyJs_anonymous_1772_(err, dirExists, this, arguments, var=var):
                        var = Scope({'err':err, 'dirExists':dirExists, 'this':this, 'arguments':arguments}, var)
                        var.registers(['err', 'dirExists'])
                        if var.get('err'):
                            return var.get('cb')(var.get('err'))
                        if var.get('dirExists'):
                            return var.get('startCopy')(var.get('destStat'), var.get('src'), var.get('dest'), var.get('opts'), var.get('cb'))
                        @Js
                        def PyJs_anonymous_1773_(err, this, arguments, var=var):
                            var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                            var.registers(['err'])
                            if var.get('err'):
                                return var.get('cb')(var.get('err'))
                            return var.get('startCopy')(var.get('destStat'), var.get('src'), var.get('dest'), var.get('opts'), var.get('cb'))
                        PyJs_anonymous_1773_._set_name('anonymous')
                        var.get('mkdirp')(var.get('destParent'), PyJs_anonymous_1773_)
                    PyJs_anonymous_1772_._set_name('anonymous')
                    var.get('pathExists')(var.get('destParent'), PyJs_anonymous_1772_)
                PyJsHoisted_checkParentDir_.func_name = 'checkParentDir'
                var.put('checkParentDir', PyJsHoisted_checkParentDir_)
                @Js
                def PyJsHoisted_handleFilter_(onInclude, destStat, src, dest, opts, cb, this, arguments, var=var):
                    var = Scope({'onInclude':onInclude, 'destStat':destStat, 'src':src, 'dest':dest, 'opts':opts, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['destStat', 'cb', 'opts', 'onInclude', 'dest', 'src'])
                    @Js
                    def PyJs_anonymous_1774_(include, this, arguments, var=var):
                        var = Scope({'include':include, 'this':this, 'arguments':arguments}, var)
                        var.registers(['include'])
                        if var.get('include'):
                            return var.get('onInclude')(var.get('destStat'), var.get('src'), var.get('dest'), var.get('opts'), var.get('cb'))
                        return var.get('cb')()
                    PyJs_anonymous_1774_._set_name('anonymous')
                    @Js
                    def PyJs_anonymous_1775_(error, this, arguments, var=var):
                        var = Scope({'error':error, 'this':this, 'arguments':arguments}, var)
                        var.registers(['error'])
                        return var.get('cb')(var.get('error'))
                    PyJs_anonymous_1775_._set_name('anonymous')
                    var.get('Promise').callprop('resolve', var.get('opts').callprop('filter', var.get('src'), var.get('dest'))).callprop('then', PyJs_anonymous_1774_, PyJs_anonymous_1775_)
                PyJsHoisted_handleFilter_.func_name = 'handleFilter'
                var.put('handleFilter', PyJsHoisted_handleFilter_)
                @Js
                def PyJsHoisted_startCopy_(destStat, src, dest, opts, cb, this, arguments, var=var):
                    var = Scope({'destStat':destStat, 'src':src, 'dest':dest, 'opts':opts, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['destStat', 'cb', 'opts', 'dest', 'src'])
                    if var.get('opts').get('filter'):
                        return var.get('handleFilter')(var.get('getStats'), var.get('destStat'), var.get('src'), var.get('dest'), var.get('opts'), var.get('cb'))
                    return var.get('getStats')(var.get('destStat'), var.get('src'), var.get('dest'), var.get('opts'), var.get('cb'))
                PyJsHoisted_startCopy_.func_name = 'startCopy'
                var.put('startCopy', PyJsHoisted_startCopy_)
                @Js
                def PyJsHoisted_getStats_(destStat, src, dest, opts, cb, this, arguments, var=var):
                    var = Scope({'destStat':destStat, 'src':src, 'dest':dest, 'opts':opts, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['destStat', 'stat', 'cb', 'opts', 'dest', 'src'])
                    var.put('stat', (var.get('fs').get('stat') if var.get('opts').get('dereference') else var.get('fs').get('lstat')))
                    @Js
                    def PyJs_anonymous_1776_(err, srcStat, this, arguments, var=var):
                        var = Scope({'err':err, 'srcStat':srcStat, 'this':this, 'arguments':arguments}, var)
                        var.registers(['err', 'srcStat'])
                        if var.get('err'):
                            return var.get('cb')(var.get('err'))
                        if var.get('srcStat').callprop('isDirectory'):
                            return var.get('onDir')(var.get('srcStat'), var.get('destStat'), var.get('src'), var.get('dest'), var.get('opts'), var.get('cb'))
                        else:
                            if ((var.get('srcStat').callprop('isFile') or var.get('srcStat').callprop('isCharacterDevice')) or var.get('srcStat').callprop('isBlockDevice')):
                                return var.get('onFile')(var.get('srcStat'), var.get('destStat'), var.get('src'), var.get('dest'), var.get('opts'), var.get('cb'))
                            else:
                                if var.get('srcStat').callprop('isSymbolicLink'):
                                    return var.get('onLink')(var.get('destStat'), var.get('src'), var.get('dest'), var.get('opts'), var.get('cb'))
                    PyJs_anonymous_1776_._set_name('anonymous')
                    var.get('stat')(var.get('src'), PyJs_anonymous_1776_)
                PyJsHoisted_getStats_.func_name = 'getStats'
                var.put('getStats', PyJsHoisted_getStats_)
                @Js
                def PyJsHoisted_onFile_(srcStat, destStat, src, dest, opts, cb, this, arguments, var=var):
                    var = Scope({'srcStat':srcStat, 'destStat':destStat, 'src':src, 'dest':dest, 'opts':opts, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['srcStat', 'destStat', 'cb', 'opts', 'dest', 'src'])
                    if var.get('destStat').neg():
                        return var.get('copyFile')(var.get('srcStat'), var.get('src'), var.get('dest'), var.get('opts'), var.get('cb'))
                    return var.get('mayCopyFile')(var.get('srcStat'), var.get('src'), var.get('dest'), var.get('opts'), var.get('cb'))
                PyJsHoisted_onFile_.func_name = 'onFile'
                var.put('onFile', PyJsHoisted_onFile_)
                @Js
                def PyJsHoisted_mayCopyFile_(srcStat, src, dest, opts, cb, this, arguments, var=var):
                    var = Scope({'srcStat':srcStat, 'src':src, 'dest':dest, 'opts':opts, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['srcStat', 'cb', 'opts', 'dest', 'src'])
                    if var.get('opts').get('overwrite'):
                        @Js
                        def PyJs_anonymous_1777_(err, this, arguments, var=var):
                            var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                            var.registers(['err'])
                            if var.get('err'):
                                return var.get('cb')(var.get('err'))
                            return var.get('copyFile')(var.get('srcStat'), var.get('src'), var.get('dest'), var.get('opts'), var.get('cb'))
                        PyJs_anonymous_1777_._set_name('anonymous')
                        var.get('fs').callprop('unlink', var.get('dest'), PyJs_anonymous_1777_)
                    else:
                        if var.get('opts').get('errorOnExist'):
                            return var.get('cb')(var.get('Error').create(((Js("'")+var.get('dest'))+Js("' already exists"))))
                        else:
                            return var.get('cb')()
                PyJsHoisted_mayCopyFile_.func_name = 'mayCopyFile'
                var.put('mayCopyFile', PyJsHoisted_mayCopyFile_)
                @Js
                def PyJsHoisted_copyFile_(srcStat, src, dest, opts, cb, this, arguments, var=var):
                    var = Scope({'srcStat':srcStat, 'src':src, 'dest':dest, 'opts':opts, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['srcStat', 'cb', 'opts', 'dest', 'src'])
                    if PyJsStrictEq(var.get('fs').get('copyFile').typeof(),Js('function')):
                        @Js
                        def PyJs_anonymous_1778_(err, this, arguments, var=var):
                            var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                            var.registers(['err'])
                            if var.get('err'):
                                return var.get('cb')(var.get('err'))
                            return var.get('setDestModeAndTimestamps')(var.get('srcStat'), var.get('dest'), var.get('opts'), var.get('cb'))
                        PyJs_anonymous_1778_._set_name('anonymous')
                        return var.get('fs').callprop('copyFile', var.get('src'), var.get('dest'), PyJs_anonymous_1778_)
                    return var.get('copyFileFallback')(var.get('srcStat'), var.get('src'), var.get('dest'), var.get('opts'), var.get('cb'))
                PyJsHoisted_copyFile_.func_name = 'copyFile'
                var.put('copyFile', PyJsHoisted_copyFile_)
                @Js
                def PyJsHoisted_copyFileFallback_(srcStat, src, dest, opts, cb, this, arguments, var=var):
                    var = Scope({'srcStat':srcStat, 'src':src, 'dest':dest, 'opts':opts, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['srcStat', 'cb', 'rs', 'opts', 'dest', 'src'])
                    var.put('rs', var.get('fs').callprop('createReadStream', var.get('src')))
                    @Js
                    def PyJs_anonymous_1779_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['ws'])
                        var.put('ws', var.get('fs').callprop('createWriteStream', var.get('dest'), Js({'mode':var.get('srcStat').get('mode')})))
                        @Js
                        def PyJs_anonymous_1780_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers([])
                            return var.get('setDestModeAndTimestamps')(var.get('srcStat'), var.get('dest'), var.get('opts'), var.get('cb'))
                        PyJs_anonymous_1780_._set_name('anonymous')
                        @Js
                        def PyJs_anonymous_1781_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers([])
                            return var.get('rs').callprop('pipe', var.get('ws'))
                        PyJs_anonymous_1781_._set_name('anonymous')
                        @Js
                        def PyJs_anonymous_1782_(err, this, arguments, var=var):
                            var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                            var.registers(['err'])
                            return var.get('cb')(var.get('err'))
                        PyJs_anonymous_1782_._set_name('anonymous')
                        var.get('ws').callprop('on', Js('error'), PyJs_anonymous_1782_).callprop('on', Js('open'), PyJs_anonymous_1781_).callprop('once', Js('close'), PyJs_anonymous_1780_)
                    PyJs_anonymous_1779_._set_name('anonymous')
                    @Js
                    def PyJs_anonymous_1783_(err, this, arguments, var=var):
                        var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                        var.registers(['err'])
                        return var.get('cb')(var.get('err'))
                    PyJs_anonymous_1783_._set_name('anonymous')
                    var.get('rs').callprop('on', Js('error'), PyJs_anonymous_1783_).callprop('once', Js('open'), PyJs_anonymous_1779_)
                PyJsHoisted_copyFileFallback_.func_name = 'copyFileFallback'
                var.put('copyFileFallback', PyJsHoisted_copyFileFallback_)
                @Js
                def PyJsHoisted_setDestModeAndTimestamps_(srcStat, dest, opts, cb, this, arguments, var=var):
                    var = Scope({'srcStat':srcStat, 'dest':dest, 'opts':opts, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['dest', 'opts', 'cb', 'srcStat'])
                    @Js
                    def PyJs_anonymous_1784_(err, this, arguments, var=var):
                        var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                        var.registers(['err'])
                        if var.get('err'):
                            return var.get('cb')(var.get('err'))
                        if var.get('opts').get('preserveTimestamps'):
                            return var.get('utimes')(var.get('dest'), var.get('srcStat').get('atime'), var.get('srcStat').get('mtime'), var.get('cb'))
                        return var.get('cb')()
                    PyJs_anonymous_1784_._set_name('anonymous')
                    var.get('fs').callprop('chmod', var.get('dest'), var.get('srcStat').get('mode'), PyJs_anonymous_1784_)
                PyJsHoisted_setDestModeAndTimestamps_.func_name = 'setDestModeAndTimestamps'
                var.put('setDestModeAndTimestamps', PyJsHoisted_setDestModeAndTimestamps_)
                @Js
                def PyJsHoisted_onDir_(srcStat, destStat, src, dest, opts, cb, this, arguments, var=var):
                    var = Scope({'srcStat':srcStat, 'destStat':destStat, 'src':src, 'dest':dest, 'opts':opts, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['srcStat', 'destStat', 'cb', 'opts', 'dest', 'src'])
                    if var.get('destStat').neg():
                        return var.get('mkDirAndCopy')(var.get('srcStat'), var.get('src'), var.get('dest'), var.get('opts'), var.get('cb'))
                    if (var.get('destStat') and var.get('destStat').callprop('isDirectory').neg()):
                        return var.get('cb')(var.get('Error').create(((((Js("Cannot overwrite non-directory '")+var.get('dest'))+Js("' with directory '"))+var.get('src'))+Js("'."))))
                    return var.get('copyDir')(var.get('src'), var.get('dest'), var.get('opts'), var.get('cb'))
                PyJsHoisted_onDir_.func_name = 'onDir'
                var.put('onDir', PyJsHoisted_onDir_)
                @Js
                def PyJsHoisted_mkDirAndCopy_(srcStat, src, dest, opts, cb, this, arguments, var=var):
                    var = Scope({'srcStat':srcStat, 'src':src, 'dest':dest, 'opts':opts, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['srcStat', 'cb', 'opts', 'dest', 'src'])
                    @Js
                    def PyJs_anonymous_1785_(err, this, arguments, var=var):
                        var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                        var.registers(['err'])
                        if var.get('err'):
                            return var.get('cb')(var.get('err'))
                        @Js
                        def PyJs_anonymous_1786_(err, this, arguments, var=var):
                            var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                            var.registers(['err'])
                            if var.get('err'):
                                return var.get('cb')(var.get('err'))
                            return var.get('fs').callprop('chmod', var.get('dest'), var.get('srcStat').get('mode'), var.get('cb'))
                        PyJs_anonymous_1786_._set_name('anonymous')
                        var.get('copyDir')(var.get('src'), var.get('dest'), var.get('opts'), PyJs_anonymous_1786_)
                    PyJs_anonymous_1785_._set_name('anonymous')
                    var.get('fs').callprop('mkdir', var.get('dest'), PyJs_anonymous_1785_)
                PyJsHoisted_mkDirAndCopy_.func_name = 'mkDirAndCopy'
                var.put('mkDirAndCopy', PyJsHoisted_mkDirAndCopy_)
                @Js
                def PyJsHoisted_copyDir_(src, dest, opts, cb, this, arguments, var=var):
                    var = Scope({'src':src, 'dest':dest, 'opts':opts, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['dest', 'opts', 'cb', 'src'])
                    @Js
                    def PyJs_anonymous_1787_(err, items, this, arguments, var=var):
                        var = Scope({'err':err, 'items':items, 'this':this, 'arguments':arguments}, var)
                        var.registers(['err', 'items'])
                        if var.get('err'):
                            return var.get('cb')(var.get('err'))
                        return var.get('copyDirItems')(var.get('items'), var.get('src'), var.get('dest'), var.get('opts'), var.get('cb'))
                    PyJs_anonymous_1787_._set_name('anonymous')
                    var.get('fs').callprop('readdir', var.get('src'), PyJs_anonymous_1787_)
                PyJsHoisted_copyDir_.func_name = 'copyDir'
                var.put('copyDir', PyJsHoisted_copyDir_)
                @Js
                def PyJsHoisted_copyDirItems_(items, src, dest, opts, cb, this, arguments, var=var):
                    var = Scope({'items':items, 'src':src, 'dest':dest, 'opts':opts, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['items', 'cb', 'item', 'opts', 'dest', 'src'])
                    var.put('item', var.get('items').callprop('pop'))
                    if var.get('item').neg():
                        return var.get('cb')()
                    return var.get('copyDirItem')(var.get('items'), var.get('item'), var.get('src'), var.get('dest'), var.get('opts'), var.get('cb'))
                PyJsHoisted_copyDirItems_.func_name = 'copyDirItems'
                var.put('copyDirItems', PyJsHoisted_copyDirItems_)
                @Js
                def PyJsHoisted_copyDirItem_(items, item, src, dest, opts, cb, this, arguments, var=var):
                    var = Scope({'items':items, 'item':item, 'src':src, 'dest':dest, 'opts':opts, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['items', 'srcItem', 'destItem', 'cb', 'item', 'opts', 'dest', 'src'])
                    var.put('srcItem', var.get('path').callprop('join', var.get('src'), var.get('item')))
                    var.put('destItem', var.get('path').callprop('join', var.get('dest'), var.get('item')))
                    @Js
                    def PyJs_anonymous_1788_(err, stats, this, arguments, var=var):
                        var = Scope({'err':err, 'stats':stats, 'this':this, 'arguments':arguments}, var)
                        var.registers(['destStat', 'err', 'stats'])
                        if var.get('err'):
                            return var.get('cb')(var.get('err'))
                        var.put('destStat', var.get('stats').get('destStat'))
                        @Js
                        def PyJs_anonymous_1789_(err, this, arguments, var=var):
                            var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                            var.registers(['err'])
                            if var.get('err'):
                                return var.get('cb')(var.get('err'))
                            return var.get('copyDirItems')(var.get('items'), var.get('src'), var.get('dest'), var.get('opts'), var.get('cb'))
                        PyJs_anonymous_1789_._set_name('anonymous')
                        var.get('startCopy')(var.get('destStat'), var.get('srcItem'), var.get('destItem'), var.get('opts'), PyJs_anonymous_1789_)
                    PyJs_anonymous_1788_._set_name('anonymous')
                    var.get('stat').callprop('checkPaths', var.get('srcItem'), var.get('destItem'), Js('copy'), PyJs_anonymous_1788_)
                PyJsHoisted_copyDirItem_.func_name = 'copyDirItem'
                var.put('copyDirItem', PyJsHoisted_copyDirItem_)
                @Js
                def PyJsHoisted_onLink_(destStat, src, dest, opts, cb, this, arguments, var=var):
                    var = Scope({'destStat':destStat, 'src':src, 'dest':dest, 'opts':opts, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['destStat', 'cb', 'opts', 'dest', 'src'])
                    @Js
                    def PyJs_anonymous_1790_(err, resolvedSrc, this, arguments, var=var):
                        var = Scope({'err':err, 'resolvedSrc':resolvedSrc, 'this':this, 'arguments':arguments}, var)
                        var.registers(['err', 'resolvedSrc'])
                        if var.get('err'):
                            return var.get('cb')(var.get('err'))
                        if var.get('opts').get('dereference'):
                            var.put('resolvedSrc', var.get('path').callprop('resolve', var.get('process').callprop('cwd'), var.get('resolvedSrc')))
                        if var.get('destStat').neg():
                            return var.get('fs').callprop('symlink', var.get('resolvedSrc'), var.get('dest'), var.get('cb'))
                        else:
                            @Js
                            def PyJs_anonymous_1791_(err, resolvedDest, this, arguments, var=var):
                                var = Scope({'err':err, 'resolvedDest':resolvedDest, 'this':this, 'arguments':arguments}, var)
                                var.registers(['resolvedDest', 'err'])
                                if var.get('err'):
                                    if (PyJsStrictEq(var.get('err').get('code'),Js('EINVAL')) or PyJsStrictEq(var.get('err').get('code'),Js('UNKNOWN'))):
                                        return var.get('fs').callprop('symlink', var.get('resolvedSrc'), var.get('dest'), var.get('cb'))
                                    return var.get('cb')(var.get('err'))
                                if var.get('opts').get('dereference'):
                                    var.put('resolvedDest', var.get('path').callprop('resolve', var.get('process').callprop('cwd'), var.get('resolvedDest')))
                                if var.get('stat').callprop('isSrcSubdir', var.get('resolvedSrc'), var.get('resolvedDest')):
                                    return var.get('cb')(var.get('Error').create(((((Js("Cannot copy '")+var.get('resolvedSrc'))+Js("' to a subdirectory of itself, '"))+var.get('resolvedDest'))+Js("'."))))
                                if (var.get('destStat').callprop('isDirectory') and var.get('stat').callprop('isSrcSubdir', var.get('resolvedDest'), var.get('resolvedSrc'))):
                                    return var.get('cb')(var.get('Error').create(((((Js("Cannot overwrite '")+var.get('resolvedDest'))+Js("' with '"))+var.get('resolvedSrc'))+Js("'."))))
                                return var.get('copyLink')(var.get('resolvedSrc'), var.get('dest'), var.get('cb'))
                            PyJs_anonymous_1791_._set_name('anonymous')
                            var.get('fs').callprop('readlink', var.get('dest'), PyJs_anonymous_1791_)
                    PyJs_anonymous_1790_._set_name('anonymous')
                    var.get('fs').callprop('readlink', var.get('src'), PyJs_anonymous_1790_)
                PyJsHoisted_onLink_.func_name = 'onLink'
                var.put('onLink', PyJsHoisted_onLink_)
                @Js
                def PyJsHoisted_copyLink_(resolvedSrc, dest, cb, this, arguments, var=var):
                    var = Scope({'resolvedSrc':resolvedSrc, 'dest':dest, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['resolvedSrc', 'dest', 'cb'])
                    @Js
                    def PyJs_anonymous_1792_(err, this, arguments, var=var):
                        var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                        var.registers(['err'])
                        if var.get('err'):
                            return var.get('cb')(var.get('err'))
                        return var.get('fs').callprop('symlink', var.get('resolvedSrc'), var.get('dest'), var.get('cb'))
                    PyJs_anonymous_1792_._set_name('anonymous')
                    var.get('fs').callprop('unlink', var.get('dest'), PyJs_anonymous_1792_)
                PyJsHoisted_copyLink_.func_name = 'copyLink'
                var.put('copyLink', PyJsHoisted_copyLink_)
                Js('use strict')
                var.put('fs', var.get('require')(Js('graceful-fs')))
                var.put('path', var.get('require')(Js('path')))
                var.put('mkdirp', var.get('require')(Js('../mkdirs')).get('mkdirs'))
                var.put('pathExists', var.get('require')(Js('../path-exists')).get('pathExists'))
                var.put('utimes', var.get('require')(Js('../util/utimes')).get('utimesMillis'))
                var.put('stat', var.get('require')(Js('../util/stat')))
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                var.get('module').put('exports', var.get('copy'))
            PyJs_anonymous_1768_._set_name('anonymous')
            PyJs_anonymous_1768_.callprop('call', var.get(u"this"))
        PyJs_anonymous_1767_._set_name('anonymous')
        PyJs_anonymous_1767_.callprop('call', var.get(u"this"), var.get('require')(Js('_process')))
    PyJs_anonymous_1766_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1793_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'u'])
        Js('use strict')
        var.put('u', var.get('require')(Js('universalify')).get('fromCallback'))
        var.get('module').put('exports', Js({'copy':var.get('u')(var.get('require')(Js('./copy')))}))
    PyJs_anonymous_1793_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1794_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'path', 'exports', 'remove', 'mkdir', 'emptyDir', 'u', 'fs', 'require', 'emptyDirSync'])
        @Js
        def PyJsHoisted_emptyDirSync_(dir, this, arguments, var=var):
            var = Scope({'dir':dir, 'this':this, 'arguments':arguments}, var)
            var.registers(['dir', 'items'])
            var.put('items', PyJsComma(Js(0.0), Js(None)))
            try:
                var.put('items', var.get('fs').callprop('readdirSync', var.get('dir')))
            except PyJsException as PyJsTempException:
                PyJsHolder_657272_37242485 = var.own.get('err')
                var.force_own_put('err', PyExceptionToJs(PyJsTempException))
                try:
                    return var.get('mkdir').callprop('mkdirsSync', var.get('dir'))
                finally:
                    if PyJsHolder_657272_37242485 is not None:
                        var.own['err'] = PyJsHolder_657272_37242485
                    else:
                        del var.own['err']
                    del PyJsHolder_657272_37242485
            @Js
            def PyJs_anonymous_1800_(item, this, arguments, var=var):
                var = Scope({'item':item, 'this':this, 'arguments':arguments}, var)
                var.registers(['item'])
                var.put('item', var.get('path').callprop('join', var.get('dir'), var.get('item')))
                var.get('remove').callprop('removeSync', var.get('item'))
            PyJs_anonymous_1800_._set_name('anonymous')
            var.get('items').callprop('forEach', PyJs_anonymous_1800_)
        PyJsHoisted_emptyDirSync_.func_name = 'emptyDirSync'
        var.put('emptyDirSync', PyJsHoisted_emptyDirSync_)
        Js('use strict')
        var.put('u', var.get('require')(Js('universalify')).get('fromCallback'))
        var.put('fs', var.get('require')(Js('graceful-fs')))
        var.put('path', var.get('require')(Js('path')))
        var.put('mkdir', var.get('require')(Js('../mkdirs')))
        var.put('remove', var.get('require')(Js('../remove')))
        @Js
        def PyJs_emptyDir_1795_(dir, callback, this, arguments, var=var):
            var = Scope({'dir':dir, 'callback':callback, 'this':this, 'arguments':arguments, 'emptyDir':PyJs_emptyDir_1795_}, var)
            var.registers(['dir', 'callback'])
            @Js
            def PyJs_anonymous_1796_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                pass
            PyJs_anonymous_1796_._set_name('anonymous')
            var.put('callback', (var.get('callback') or PyJs_anonymous_1796_))
            @Js
            def PyJs_anonymous_1797_(err, items, this, arguments, var=var):
                var = Scope({'err':err, 'items':items, 'this':this, 'arguments':arguments}, var)
                var.registers(['err', 'deleteItem', 'items'])
                @Js
                def PyJsHoisted_deleteItem_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers(['item'])
                    var.put('item', var.get('items').callprop('pop'))
                    if var.get('item').neg():
                        return var.get('callback')()
                    @Js
                    def PyJs_anonymous_1799_(err, this, arguments, var=var):
                        var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                        var.registers(['err'])
                        if var.get('err'):
                            return var.get('callback')(var.get('err'))
                        var.get('deleteItem')()
                    PyJs_anonymous_1799_._set_name('anonymous')
                    var.get('remove').callprop('remove', var.get('item'), PyJs_anonymous_1799_)
                PyJsHoisted_deleteItem_.func_name = 'deleteItem'
                var.put('deleteItem', PyJsHoisted_deleteItem_)
                if var.get('err'):
                    return var.get('mkdir').callprop('mkdirs', var.get('dir'), var.get('callback'))
                @Js
                def PyJs_anonymous_1798_(item, this, arguments, var=var):
                    var = Scope({'item':item, 'this':this, 'arguments':arguments}, var)
                    var.registers(['item'])
                    return var.get('path').callprop('join', var.get('dir'), var.get('item'))
                PyJs_anonymous_1798_._set_name('anonymous')
                var.put('items', var.get('items').callprop('map', PyJs_anonymous_1798_))
                var.get('deleteItem')()
                pass
            PyJs_anonymous_1797_._set_name('anonymous')
            var.get('fs').callprop('readdir', var.get('dir'), PyJs_anonymous_1797_)
        PyJs_emptyDir_1795_._set_name('emptyDir')
        var.put('emptyDir', var.get('u')(PyJs_emptyDir_1795_))
        pass
        var.get('module').put('exports', Js({'emptyDirSync':var.get('emptyDirSync'),'emptydirSync':var.get('emptyDirSync'),'emptyDir':var.get('emptyDir'),'emptydir':var.get('emptyDir')}))
    PyJs_anonymous_1794_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1801_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'path', 'createFile', 'exports', 'mkdir', 'createFileSync', 'u', 'fs', 'require', 'pathExists'])
        @Js
        def PyJsHoisted_createFile_(file, callback, this, arguments, var=var):
            var = Scope({'file':file, 'callback':callback, 'this':this, 'arguments':arguments}, var)
            var.registers(['callback', 'file', 'makeFile'])
            @Js
            def PyJsHoisted_makeFile_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                @Js
                def PyJs_anonymous_1802_(err, this, arguments, var=var):
                    var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                    var.registers(['err'])
                    if var.get('err'):
                        return var.get('callback')(var.get('err'))
                    var.get('callback')()
                PyJs_anonymous_1802_._set_name('anonymous')
                var.get('fs').callprop('writeFile', var.get('file'), Js(''), PyJs_anonymous_1802_)
            PyJsHoisted_makeFile_.func_name = 'makeFile'
            var.put('makeFile', PyJsHoisted_makeFile_)
            pass
            @Js
            def PyJs_anonymous_1803_(err, stats, this, arguments, var=var):
                var = Scope({'err':err, 'stats':stats, 'this':this, 'arguments':arguments}, var)
                var.registers(['dir', 'err', 'stats'])
                if (var.get('err').neg() and var.get('stats').callprop('isFile')):
                    return var.get('callback')()
                var.put('dir', var.get('path').callprop('dirname', var.get('file')))
                @Js
                def PyJs_anonymous_1804_(err, dirExists, this, arguments, var=var):
                    var = Scope({'err':err, 'dirExists':dirExists, 'this':this, 'arguments':arguments}, var)
                    var.registers(['err', 'dirExists'])
                    if var.get('err'):
                        return var.get('callback')(var.get('err'))
                    if var.get('dirExists'):
                        return var.get('makeFile')()
                    @Js
                    def PyJs_anonymous_1805_(err, this, arguments, var=var):
                        var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                        var.registers(['err'])
                        if var.get('err'):
                            return var.get('callback')(var.get('err'))
                        var.get('makeFile')()
                    PyJs_anonymous_1805_._set_name('anonymous')
                    var.get('mkdir').callprop('mkdirs', var.get('dir'), PyJs_anonymous_1805_)
                PyJs_anonymous_1804_._set_name('anonymous')
                var.get('pathExists')(var.get('dir'), PyJs_anonymous_1804_)
            PyJs_anonymous_1803_._set_name('anonymous')
            var.get('fs').callprop('stat', var.get('file'), PyJs_anonymous_1803_)
        PyJsHoisted_createFile_.func_name = 'createFile'
        var.put('createFile', PyJsHoisted_createFile_)
        @Js
        def PyJsHoisted_createFileSync_(file, this, arguments, var=var):
            var = Scope({'file':file, 'this':this, 'arguments':arguments}, var)
            var.registers(['dir', 'file', 'stats'])
            var.put('stats', PyJsComma(Js(0.0), Js(None)))
            try:
                var.put('stats', var.get('fs').callprop('statSync', var.get('file')))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_47014157 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    pass
                finally:
                    if PyJsHolder_65_47014157 is not None:
                        var.own['e'] = PyJsHolder_65_47014157
                    else:
                        del var.own['e']
                    del PyJsHolder_65_47014157
            if (var.get('stats') and var.get('stats').callprop('isFile')):
                return var.get('undefined')
            var.put('dir', var.get('path').callprop('dirname', var.get('file')))
            if var.get('fs').callprop('existsSync', var.get('dir')).neg():
                var.get('mkdir').callprop('mkdirsSync', var.get('dir'))
            var.get('fs').callprop('writeFileSync', var.get('file'), Js(''))
        PyJsHoisted_createFileSync_.func_name = 'createFileSync'
        var.put('createFileSync', PyJsHoisted_createFileSync_)
        Js('use strict')
        var.put('u', var.get('require')(Js('universalify')).get('fromCallback'))
        var.put('path', var.get('require')(Js('path')))
        var.put('fs', var.get('require')(Js('graceful-fs')))
        var.put('mkdir', var.get('require')(Js('../mkdirs')))
        var.put('pathExists', var.get('require')(Js('../path-exists')).get('pathExists'))
        pass
        pass
        var.get('module').put('exports', Js({'createFile':var.get('u')(var.get('createFile')),'createFileSync':var.get('createFileSync')}))
    PyJs_anonymous_1801_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1806_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'symlink', 'exports', 'link', 'require', 'file'])
        Js('use strict')
        var.put('file', var.get('require')(Js('./file')))
        var.put('link', var.get('require')(Js('./link')))
        var.put('symlink', var.get('require')(Js('./symlink')))
        def PyJs_LONG_1807_(var=var):
            return var.get('module').put('exports', Js({'createFile':var.get('file').get('createFile'),'createFileSync':var.get('file').get('createFileSync'),'ensureFile':var.get('file').get('createFile'),'ensureFileSync':var.get('file').get('createFileSync'),'createLink':var.get('link').get('createLink'),'createLinkSync':var.get('link').get('createLinkSync'),'ensureLink':var.get('link').get('createLink'),'ensureLinkSync':var.get('link').get('createLinkSync'),'createSymlink':var.get('symlink').get('createSymlink'),'createSymlinkSync':var.get('symlink').get('createSymlinkSync'),'ensureSymlink':var.get('symlink').get('createSymlink'),'ensureSymlinkSync':var.get('symlink').get('createSymlinkSync')}))
        PyJs_LONG_1807_()
    PyJs_anonymous_1806_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1808_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'path', 'exports', 'createLinkSync', 'mkdir', 'u', 'createLink', 'fs', 'require', 'pathExists'])
        @Js
        def PyJsHoisted_createLink_(srcpath, dstpath, callback, this, arguments, var=var):
            var = Scope({'srcpath':srcpath, 'dstpath':dstpath, 'callback':callback, 'this':this, 'arguments':arguments}, var)
            var.registers(['makeLink', 'srcpath', 'dstpath', 'callback'])
            @Js
            def PyJsHoisted_makeLink_(srcpath, dstpath, this, arguments, var=var):
                var = Scope({'srcpath':srcpath, 'dstpath':dstpath, 'this':this, 'arguments':arguments}, var)
                var.registers(['srcpath', 'dstpath'])
                @Js
                def PyJs_anonymous_1809_(err, this, arguments, var=var):
                    var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                    var.registers(['err'])
                    if var.get('err'):
                        return var.get('callback')(var.get('err'))
                    var.get('callback')(var.get(u"null"))
                PyJs_anonymous_1809_._set_name('anonymous')
                var.get('fs').callprop('link', var.get('srcpath'), var.get('dstpath'), PyJs_anonymous_1809_)
            PyJsHoisted_makeLink_.func_name = 'makeLink'
            var.put('makeLink', PyJsHoisted_makeLink_)
            pass
            @Js
            def PyJs_anonymous_1810_(err, destinationExists, this, arguments, var=var):
                var = Scope({'err':err, 'destinationExists':destinationExists, 'this':this, 'arguments':arguments}, var)
                var.registers(['destinationExists', 'err'])
                if var.get('err'):
                    return var.get('callback')(var.get('err'))
                if var.get('destinationExists'):
                    return var.get('callback')(var.get(u"null"))
                @Js
                def PyJs_anonymous_1811_(err, this, arguments, var=var):
                    var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                    var.registers(['dir', 'err'])
                    if var.get('err'):
                        var.get('err').put('message', var.get('err').get('message').callprop('replace', Js('lstat'), Js('ensureLink')))
                        return var.get('callback')(var.get('err'))
                    var.put('dir', var.get('path').callprop('dirname', var.get('dstpath')))
                    @Js
                    def PyJs_anonymous_1812_(err, dirExists, this, arguments, var=var):
                        var = Scope({'err':err, 'dirExists':dirExists, 'this':this, 'arguments':arguments}, var)
                        var.registers(['err', 'dirExists'])
                        if var.get('err'):
                            return var.get('callback')(var.get('err'))
                        if var.get('dirExists'):
                            return var.get('makeLink')(var.get('srcpath'), var.get('dstpath'))
                        @Js
                        def PyJs_anonymous_1813_(err, this, arguments, var=var):
                            var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                            var.registers(['err'])
                            if var.get('err'):
                                return var.get('callback')(var.get('err'))
                            var.get('makeLink')(var.get('srcpath'), var.get('dstpath'))
                        PyJs_anonymous_1813_._set_name('anonymous')
                        var.get('mkdir').callprop('mkdirs', var.get('dir'), PyJs_anonymous_1813_)
                    PyJs_anonymous_1812_._set_name('anonymous')
                    var.get('pathExists')(var.get('dir'), PyJs_anonymous_1812_)
                PyJs_anonymous_1811_._set_name('anonymous')
                var.get('fs').callprop('lstat', var.get('srcpath'), PyJs_anonymous_1811_)
            PyJs_anonymous_1810_._set_name('anonymous')
            var.get('pathExists')(var.get('dstpath'), PyJs_anonymous_1810_)
        PyJsHoisted_createLink_.func_name = 'createLink'
        var.put('createLink', PyJsHoisted_createLink_)
        @Js
        def PyJsHoisted_createLinkSync_(srcpath, dstpath, this, arguments, var=var):
            var = Scope({'srcpath':srcpath, 'dstpath':dstpath, 'this':this, 'arguments':arguments}, var)
            var.registers(['dstpath', 'dir', 'destinationExists', 'srcpath', 'dirExists'])
            var.put('destinationExists', var.get('fs').callprop('existsSync', var.get('dstpath')))
            if var.get('destinationExists'):
                return var.get('undefined')
            try:
                var.get('fs').callprop('lstatSync', var.get('srcpath'))
            except PyJsException as PyJsTempException:
                PyJsHolder_657272_84675493 = var.own.get('err')
                var.force_own_put('err', PyExceptionToJs(PyJsTempException))
                try:
                    var.get('err').put('message', var.get('err').get('message').callprop('replace', Js('lstat'), Js('ensureLink')))
                    PyJsTempException = JsToPyException(var.get('err'))
                    raise PyJsTempException
                finally:
                    if PyJsHolder_657272_84675493 is not None:
                        var.own['err'] = PyJsHolder_657272_84675493
                    else:
                        del var.own['err']
                    del PyJsHolder_657272_84675493
            var.put('dir', var.get('path').callprop('dirname', var.get('dstpath')))
            var.put('dirExists', var.get('fs').callprop('existsSync', var.get('dir')))
            if var.get('dirExists'):
                return var.get('fs').callprop('linkSync', var.get('srcpath'), var.get('dstpath'))
            var.get('mkdir').callprop('mkdirsSync', var.get('dir'))
            return var.get('fs').callprop('linkSync', var.get('srcpath'), var.get('dstpath'))
        PyJsHoisted_createLinkSync_.func_name = 'createLinkSync'
        var.put('createLinkSync', PyJsHoisted_createLinkSync_)
        Js('use strict')
        var.put('u', var.get('require')(Js('universalify')).get('fromCallback'))
        var.put('path', var.get('require')(Js('path')))
        var.put('fs', var.get('require')(Js('graceful-fs')))
        var.put('mkdir', var.get('require')(Js('../mkdirs')))
        var.put('pathExists', var.get('require')(Js('../path-exists')).get('pathExists'))
        pass
        pass
        var.get('module').put('exports', Js({'createLink':var.get('u')(var.get('createLink')),'createLinkSync':var.get('createLinkSync')}))
    PyJs_anonymous_1808_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1814_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'symlinkPaths', 'path', 'exports', 'symlinkPathsSync', 'fs', 'require', 'pathExists'])
        @Js
        def PyJsHoisted_symlinkPaths_(srcpath, dstpath, callback, this, arguments, var=var):
            var = Scope({'srcpath':srcpath, 'dstpath':dstpath, 'callback':callback, 'this':this, 'arguments':arguments}, var)
            var.registers(['dstdir', 'callback', 'dstpath', 'relativeToDst', 'srcpath'])
            if var.get('path').callprop('isAbsolute', var.get('srcpath')):
                @Js
                def PyJs_anonymous_1815_(err, this, arguments, var=var):
                    var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                    var.registers(['err'])
                    if var.get('err'):
                        var.get('err').put('message', var.get('err').get('message').callprop('replace', Js('lstat'), Js('ensureSymlink')))
                        return var.get('callback')(var.get('err'))
                    return var.get('callback')(var.get(u"null"), Js({'toCwd':var.get('srcpath'),'toDst':var.get('srcpath')}))
                PyJs_anonymous_1815_._set_name('anonymous')
                return var.get('fs').callprop('lstat', var.get('srcpath'), PyJs_anonymous_1815_)
            else:
                var.put('dstdir', var.get('path').callprop('dirname', var.get('dstpath')))
                var.put('relativeToDst', var.get('path').callprop('join', var.get('dstdir'), var.get('srcpath')))
                @Js
                def PyJs_anonymous_1816_(err, exists, this, arguments, var=var):
                    var = Scope({'err':err, 'exists':exists, 'this':this, 'arguments':arguments}, var)
                    var.registers(['err', 'exists'])
                    if var.get('err'):
                        return var.get('callback')(var.get('err'))
                    if var.get('exists'):
                        return var.get('callback')(var.get(u"null"), Js({'toCwd':var.get('relativeToDst'),'toDst':var.get('srcpath')}))
                    else:
                        @Js
                        def PyJs_anonymous_1817_(err, this, arguments, var=var):
                            var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                            var.registers(['err'])
                            if var.get('err'):
                                var.get('err').put('message', var.get('err').get('message').callprop('replace', Js('lstat'), Js('ensureSymlink')))
                                return var.get('callback')(var.get('err'))
                            return var.get('callback')(var.get(u"null"), Js({'toCwd':var.get('srcpath'),'toDst':var.get('path').callprop('relative', var.get('dstdir'), var.get('srcpath'))}))
                        PyJs_anonymous_1817_._set_name('anonymous')
                        return var.get('fs').callprop('lstat', var.get('srcpath'), PyJs_anonymous_1817_)
                PyJs_anonymous_1816_._set_name('anonymous')
                return var.get('pathExists')(var.get('relativeToDst'), PyJs_anonymous_1816_)
        PyJsHoisted_symlinkPaths_.func_name = 'symlinkPaths'
        var.put('symlinkPaths', PyJsHoisted_symlinkPaths_)
        @Js
        def PyJsHoisted_symlinkPathsSync_(srcpath, dstpath, this, arguments, var=var):
            var = Scope({'srcpath':srcpath, 'dstpath':dstpath, 'this':this, 'arguments':arguments}, var)
            var.registers(['dstdir', 'dstpath', 'exists', 'relativeToDst', 'srcpath'])
            var.put('exists', PyJsComma(Js(0.0), Js(None)))
            if var.get('path').callprop('isAbsolute', var.get('srcpath')):
                var.put('exists', var.get('fs').callprop('existsSync', var.get('srcpath')))
                if var.get('exists').neg():
                    PyJsTempException = JsToPyException(var.get('Error').create(Js('absolute srcpath does not exist')))
                    raise PyJsTempException
                return Js({'toCwd':var.get('srcpath'),'toDst':var.get('srcpath')})
            else:
                var.put('dstdir', var.get('path').callprop('dirname', var.get('dstpath')))
                var.put('relativeToDst', var.get('path').callprop('join', var.get('dstdir'), var.get('srcpath')))
                var.put('exists', var.get('fs').callprop('existsSync', var.get('relativeToDst')))
                if var.get('exists'):
                    return Js({'toCwd':var.get('relativeToDst'),'toDst':var.get('srcpath')})
                else:
                    var.put('exists', var.get('fs').callprop('existsSync', var.get('srcpath')))
                    if var.get('exists').neg():
                        PyJsTempException = JsToPyException(var.get('Error').create(Js('relative srcpath does not exist')))
                        raise PyJsTempException
                    return Js({'toCwd':var.get('srcpath'),'toDst':var.get('path').callprop('relative', var.get('dstdir'), var.get('srcpath'))})
        PyJsHoisted_symlinkPathsSync_.func_name = 'symlinkPathsSync'
        var.put('symlinkPathsSync', PyJsHoisted_symlinkPathsSync_)
        Js('use strict')
        var.put('path', var.get('require')(Js('path')))
        var.put('fs', var.get('require')(Js('graceful-fs')))
        var.put('pathExists', var.get('require')(Js('../path-exists')).get('pathExists'))
        pass
        pass
        var.get('module').put('exports', Js({'symlinkPaths':var.get('symlinkPaths'),'symlinkPathsSync':var.get('symlinkPathsSync')}))
    PyJs_anonymous_1814_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1818_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'symlinkType', 'symlinkTypeSync', 'fs', 'require'])
        @Js
        def PyJsHoisted_symlinkType_(srcpath, type, callback, this, arguments, var=var):
            var = Scope({'srcpath':srcpath, 'type':type, 'callback':callback, 'this':this, 'arguments':arguments}, var)
            var.registers(['srcpath', 'type', 'callback'])
            var.put('callback', (var.get('type') if PyJsStrictEq(var.get('type',throw=False).typeof(),Js('function')) else var.get('callback')))
            var.put('type', (Js(False) if PyJsStrictEq(var.get('type',throw=False).typeof(),Js('function')) else var.get('type')))
            if var.get('type'):
                return var.get('callback')(var.get(u"null"), var.get('type'))
            @Js
            def PyJs_anonymous_1819_(err, stats, this, arguments, var=var):
                var = Scope({'err':err, 'stats':stats, 'this':this, 'arguments':arguments}, var)
                var.registers(['err', 'stats'])
                if var.get('err'):
                    return var.get('callback')(var.get(u"null"), Js('file'))
                var.put('type', (Js('dir') if (var.get('stats') and var.get('stats').callprop('isDirectory')) else Js('file')))
                var.get('callback')(var.get(u"null"), var.get('type'))
            PyJs_anonymous_1819_._set_name('anonymous')
            var.get('fs').callprop('lstat', var.get('srcpath'), PyJs_anonymous_1819_)
        PyJsHoisted_symlinkType_.func_name = 'symlinkType'
        var.put('symlinkType', PyJsHoisted_symlinkType_)
        @Js
        def PyJsHoisted_symlinkTypeSync_(srcpath, type, this, arguments, var=var):
            var = Scope({'srcpath':srcpath, 'type':type, 'this':this, 'arguments':arguments}, var)
            var.registers(['srcpath', 'type', 'stats'])
            var.put('stats', PyJsComma(Js(0.0), Js(None)))
            if var.get('type'):
                return var.get('type')
            try:
                var.put('stats', var.get('fs').callprop('lstatSync', var.get('srcpath')))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_80692659 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    return Js('file')
                finally:
                    if PyJsHolder_65_80692659 is not None:
                        var.own['e'] = PyJsHolder_65_80692659
                    else:
                        del var.own['e']
                    del PyJsHolder_65_80692659
            return (Js('dir') if (var.get('stats') and var.get('stats').callprop('isDirectory')) else Js('file'))
        PyJsHoisted_symlinkTypeSync_.func_name = 'symlinkTypeSync'
        var.put('symlinkTypeSync', PyJsHoisted_symlinkTypeSync_)
        Js('use strict')
        var.put('fs', var.get('require')(Js('graceful-fs')))
        pass
        pass
        var.get('module').put('exports', Js({'symlinkType':var.get('symlinkType'),'symlinkTypeSync':var.get('symlinkTypeSync')}))
    PyJs_anonymous_1818_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1820_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['_symlinkPaths', 'module', 'symlinkPaths', 'mkdirs', 'path', '_mkdirs', 'exports', 'symlinkType', 'symlinkTypeSync', 'createSymlink', '_symlinkType', 'symlinkPathsSync', 'u', 'fs', 'require', 'pathExists', 'mkdirsSync', 'createSymlinkSync'])
        @Js
        def PyJsHoisted_createSymlink_(srcpath, dstpath, type, callback, this, arguments, var=var):
            var = Scope({'srcpath':srcpath, 'dstpath':dstpath, 'type':type, 'callback':callback, 'this':this, 'arguments':arguments}, var)
            var.registers(['type', 'srcpath', 'dstpath', 'callback'])
            var.put('callback', (var.get('type') if PyJsStrictEq(var.get('type',throw=False).typeof(),Js('function')) else var.get('callback')))
            var.put('type', (Js(False) if PyJsStrictEq(var.get('type',throw=False).typeof(),Js('function')) else var.get('type')))
            @Js
            def PyJs_anonymous_1821_(err, destinationExists, this, arguments, var=var):
                var = Scope({'err':err, 'destinationExists':destinationExists, 'this':this, 'arguments':arguments}, var)
                var.registers(['destinationExists', 'err'])
                if var.get('err'):
                    return var.get('callback')(var.get('err'))
                if var.get('destinationExists'):
                    return var.get('callback')(var.get(u"null"))
                @Js
                def PyJs_anonymous_1822_(err, relative, this, arguments, var=var):
                    var = Scope({'err':err, 'relative':relative, 'this':this, 'arguments':arguments}, var)
                    var.registers(['err', 'relative'])
                    if var.get('err'):
                        return var.get('callback')(var.get('err'))
                    var.put('srcpath', var.get('relative').get('toDst'))
                    @Js
                    def PyJs_anonymous_1823_(err, type, this, arguments, var=var):
                        var = Scope({'err':err, 'type':type, 'this':this, 'arguments':arguments}, var)
                        var.registers(['dir', 'err', 'type'])
                        if var.get('err'):
                            return var.get('callback')(var.get('err'))
                        var.put('dir', var.get('path').callprop('dirname', var.get('dstpath')))
                        @Js
                        def PyJs_anonymous_1824_(err, dirExists, this, arguments, var=var):
                            var = Scope({'err':err, 'dirExists':dirExists, 'this':this, 'arguments':arguments}, var)
                            var.registers(['err', 'dirExists'])
                            if var.get('err'):
                                return var.get('callback')(var.get('err'))
                            if var.get('dirExists'):
                                return var.get('fs').callprop('symlink', var.get('srcpath'), var.get('dstpath'), var.get('type'), var.get('callback'))
                            @Js
                            def PyJs_anonymous_1825_(err, this, arguments, var=var):
                                var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                                var.registers(['err'])
                                if var.get('err'):
                                    return var.get('callback')(var.get('err'))
                                var.get('fs').callprop('symlink', var.get('srcpath'), var.get('dstpath'), var.get('type'), var.get('callback'))
                            PyJs_anonymous_1825_._set_name('anonymous')
                            var.get('mkdirs')(var.get('dir'), PyJs_anonymous_1825_)
                        PyJs_anonymous_1824_._set_name('anonymous')
                        var.get('pathExists')(var.get('dir'), PyJs_anonymous_1824_)
                    PyJs_anonymous_1823_._set_name('anonymous')
                    var.get('symlinkType')(var.get('relative').get('toCwd'), var.get('type'), PyJs_anonymous_1823_)
                PyJs_anonymous_1822_._set_name('anonymous')
                var.get('symlinkPaths')(var.get('srcpath'), var.get('dstpath'), PyJs_anonymous_1822_)
            PyJs_anonymous_1821_._set_name('anonymous')
            var.get('pathExists')(var.get('dstpath'), PyJs_anonymous_1821_)
        PyJsHoisted_createSymlink_.func_name = 'createSymlink'
        var.put('createSymlink', PyJsHoisted_createSymlink_)
        @Js
        def PyJsHoisted_createSymlinkSync_(srcpath, dstpath, type, this, arguments, var=var):
            var = Scope({'srcpath':srcpath, 'dstpath':dstpath, 'type':type, 'this':this, 'arguments':arguments}, var)
            var.registers(['dstpath', 'exists', 'dir', 'destinationExists', 'relative', 'srcpath', 'type'])
            var.put('destinationExists', var.get('fs').callprop('existsSync', var.get('dstpath')))
            if var.get('destinationExists'):
                return var.get('undefined')
            var.put('relative', var.get('symlinkPathsSync')(var.get('srcpath'), var.get('dstpath')))
            var.put('srcpath', var.get('relative').get('toDst'))
            var.put('type', var.get('symlinkTypeSync')(var.get('relative').get('toCwd'), var.get('type')))
            var.put('dir', var.get('path').callprop('dirname', var.get('dstpath')))
            var.put('exists', var.get('fs').callprop('existsSync', var.get('dir')))
            if var.get('exists'):
                return var.get('fs').callprop('symlinkSync', var.get('srcpath'), var.get('dstpath'), var.get('type'))
            var.get('mkdirsSync')(var.get('dir'))
            return var.get('fs').callprop('symlinkSync', var.get('srcpath'), var.get('dstpath'), var.get('type'))
        PyJsHoisted_createSymlinkSync_.func_name = 'createSymlinkSync'
        var.put('createSymlinkSync', PyJsHoisted_createSymlinkSync_)
        Js('use strict')
        var.put('u', var.get('require')(Js('universalify')).get('fromCallback'))
        var.put('path', var.get('require')(Js('path')))
        var.put('fs', var.get('require')(Js('graceful-fs')))
        var.put('_mkdirs', var.get('require')(Js('../mkdirs')))
        var.put('mkdirs', var.get('_mkdirs').get('mkdirs'))
        var.put('mkdirsSync', var.get('_mkdirs').get('mkdirsSync'))
        var.put('_symlinkPaths', var.get('require')(Js('./symlink-paths')))
        var.put('symlinkPaths', var.get('_symlinkPaths').get('symlinkPaths'))
        var.put('symlinkPathsSync', var.get('_symlinkPaths').get('symlinkPathsSync'))
        var.put('_symlinkType', var.get('require')(Js('./symlink-type')))
        var.put('symlinkType', var.get('_symlinkType').get('symlinkType'))
        var.put('symlinkTypeSync', var.get('_symlinkType').get('symlinkTypeSync'))
        var.put('pathExists', var.get('require')(Js('../path-exists')).get('pathExists'))
        pass
        pass
        var.get('module').put('exports', Js({'createSymlink':var.get('u')(var.get('createSymlink')),'createSymlinkSync':var.get('createSymlinkSync')}))
    PyJs_anonymous_1820_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1826_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'api', 'u', 'fs', 'require'])
        Js('use strict')
        var.put('u', var.get('require')(Js('universalify')).get('fromCallback'))
        var.put('fs', var.get('require')(Js('graceful-fs')))
        def PyJs_LONG_1828_(var=var):
            @Js
            def PyJs_anonymous_1827_(key, this, arguments, var=var):
                var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                var.registers(['key'])
                return PyJsStrictEq(var.get('fs').get(var.get('key')).typeof(),Js('function'))
            PyJs_anonymous_1827_._set_name('anonymous')
            return Js([Js('access'), Js('appendFile'), Js('chmod'), Js('chown'), Js('close'), Js('copyFile'), Js('fchmod'), Js('fchown'), Js('fdatasync'), Js('fstat'), Js('fsync'), Js('ftruncate'), Js('futimes'), Js('lchown'), Js('lchmod'), Js('link'), Js('lstat'), Js('mkdir'), Js('mkdtemp'), Js('open'), Js('readFile'), Js('readdir'), Js('readlink'), Js('realpath'), Js('rename'), Js('rmdir'), Js('stat'), Js('symlink'), Js('truncate'), Js('unlink'), Js('utimes'), Js('writeFile')]).callprop('filter', PyJs_anonymous_1827_)
        var.put('api', PyJs_LONG_1828_())
        @Js
        def PyJs_anonymous_1829_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
            var.registers(['key'])
            if PyJsStrictEq(var.get('key'),Js('promises')):
                return var.get('undefined')
            var.get('exports').put(var.get('key'), var.get('fs').get(var.get('key')))
        PyJs_anonymous_1829_._set_name('anonymous')
        var.get('Object').callprop('keys', var.get('fs')).callprop('forEach', PyJs_anonymous_1829_)
        @Js
        def PyJs_anonymous_1830_(method, this, arguments, var=var):
            var = Scope({'method':method, 'this':this, 'arguments':arguments}, var)
            var.registers(['method'])
            var.get('exports').put(var.get('method'), var.get('u')(var.get('fs').get(var.get('method'))))
        PyJs_anonymous_1830_._set_name('anonymous')
        var.get('api').callprop('forEach', PyJs_anonymous_1830_)
        @Js
        def PyJs_anonymous_1831_(filename, callback, this, arguments, var=var):
            var = Scope({'filename':filename, 'callback':callback, 'this':this, 'arguments':arguments}, var)
            var.registers(['filename', 'callback'])
            if PyJsStrictEq(var.get('callback',throw=False).typeof(),Js('function')):
                return var.get('fs').callprop('exists', var.get('filename'), var.get('callback'))
            @Js
            def PyJs_anonymous_1832_(resolve, this, arguments, var=var):
                var = Scope({'resolve':resolve, 'this':this, 'arguments':arguments}, var)
                var.registers(['resolve'])
                return var.get('fs').callprop('exists', var.get('filename'), var.get('resolve'))
            PyJs_anonymous_1832_._set_name('anonymous')
            return var.get('Promise').create(PyJs_anonymous_1832_)
        PyJs_anonymous_1831_._set_name('anonymous')
        var.get('exports').put('exists', PyJs_anonymous_1831_)
        @Js
        def PyJs_anonymous_1833_(fd, buffer, offset, length, position, callback, this, arguments, var=var):
            var = Scope({'fd':fd, 'buffer':buffer, 'offset':offset, 'length':length, 'position':position, 'callback':callback, 'this':this, 'arguments':arguments}, var)
            var.registers(['callback', 'buffer', 'fd', 'length', 'position', 'offset'])
            if PyJsStrictEq(var.get('callback',throw=False).typeof(),Js('function')):
                return var.get('fs').callprop('read', var.get('fd'), var.get('buffer'), var.get('offset'), var.get('length'), var.get('position'), var.get('callback'))
            @Js
            def PyJs_anonymous_1834_(resolve, reject, this, arguments, var=var):
                var = Scope({'resolve':resolve, 'reject':reject, 'this':this, 'arguments':arguments}, var)
                var.registers(['resolve', 'reject'])
                @Js
                def PyJs_anonymous_1835_(err, bytesRead, buffer, this, arguments, var=var):
                    var = Scope({'err':err, 'bytesRead':bytesRead, 'buffer':buffer, 'this':this, 'arguments':arguments}, var)
                    var.registers(['buffer', 'err', 'bytesRead'])
                    if var.get('err'):
                        return var.get('reject')(var.get('err'))
                    var.get('resolve')(Js({'bytesRead':var.get('bytesRead'),'buffer':var.get('buffer')}))
                PyJs_anonymous_1835_._set_name('anonymous')
                var.get('fs').callprop('read', var.get('fd'), var.get('buffer'), var.get('offset'), var.get('length'), var.get('position'), PyJs_anonymous_1835_)
            PyJs_anonymous_1834_._set_name('anonymous')
            return var.get('Promise').create(PyJs_anonymous_1834_)
        PyJs_anonymous_1833_._set_name('anonymous')
        var.get('exports').put('read', PyJs_anonymous_1833_)
        @Js
        def PyJs_anonymous_1836_(fd, buffer, this, arguments, var=var):
            var = Scope({'fd':fd, 'buffer':buffer, 'this':this, 'arguments':arguments}, var)
            var.registers(['_key2', '_len2', 'buffer', 'fd', 'args'])
            #for JS loop
            var.put('_len2', var.get('arguments').get('length'))
            var.put('args', var.get('Array')(((var.get('_len2')-Js(2.0)) if (var.get('_len2')>Js(2.0)) else Js(0.0))))
            var.put('_key2', Js(2.0))
            while (var.get('_key2')<var.get('_len2')):
                try:
                    var.get('args').put((var.get('_key2')-Js(2.0)), var.get('arguments').get(var.get('_key2')))
                finally:
                        (var.put('_key2',Js(var.get('_key2').to_number())+Js(1))-Js(1))
            if PyJsStrictEq(var.get('args').get((var.get('args').get('length')-Js(1.0))).typeof(),Js('function')):
                return var.get('fs').get('write').callprop('apply', var.get('fs'), Js([var.get('fd'), var.get('buffer')]).callprop('concat', var.get('args')))
            @Js
            def PyJs_anonymous_1837_(resolve, reject, this, arguments, var=var):
                var = Scope({'resolve':resolve, 'reject':reject, 'this':this, 'arguments':arguments}, var)
                var.registers(['resolve', 'reject'])
                @Js
                def PyJs_anonymous_1838_(err, bytesWritten, buffer, this, arguments, var=var):
                    var = Scope({'err':err, 'bytesWritten':bytesWritten, 'buffer':buffer, 'this':this, 'arguments':arguments}, var)
                    var.registers(['buffer', 'err', 'bytesWritten'])
                    if var.get('err'):
                        return var.get('reject')(var.get('err'))
                    var.get('resolve')(Js({'bytesWritten':var.get('bytesWritten'),'buffer':var.get('buffer')}))
                PyJs_anonymous_1838_._set_name('anonymous')
                var.get('fs').get('write').callprop('apply', var.get('fs'), Js([var.get('fd'), var.get('buffer')]).callprop('concat', var.get('args'), Js([PyJs_anonymous_1838_])))
            PyJs_anonymous_1837_._set_name('anonymous')
            return var.get('Promise').create(PyJs_anonymous_1837_)
        PyJs_anonymous_1836_._set_name('anonymous')
        var.get('exports').put('write', PyJs_anonymous_1836_)
        if PyJsStrictEq(var.get('fs').get('realpath').get('native').typeof(),Js('function')):
            var.get('exports').get('realpath').put('native', var.get('u')(var.get('fs').get('realpath').get('native')))
    PyJs_anonymous_1826_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1839_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['fs', 'require', 'module', 'exports'])
        Js('use strict')
        def PyJs_LONG_1840_(var=var):
            return var.get('Object').callprop('assign', Js({}), var.get('require')(Js('./fs')), var.get('require')(Js('./copy-sync')), var.get('require')(Js('./copy')), var.get('require')(Js('./empty')), var.get('require')(Js('./ensure')), var.get('require')(Js('./json')), var.get('require')(Js('./mkdirs')), var.get('require')(Js('./move-sync')), var.get('require')(Js('./move')), var.get('require')(Js('./output')), var.get('require')(Js('./path-exists')), var.get('require')(Js('./remove')))
        var.get('module').put('exports', PyJs_LONG_1840_())
        var.put('fs', var.get('require')(Js('fs')))
        if var.get('Object').callprop('getOwnPropertyDescriptor', var.get('fs'), Js('promises')):
            @Js
            def PyJs_get_1841_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_1841_}, var)
                var.registers([])
                return var.get('fs').get('promises')
            PyJs_get_1841_._set_name('get')
            var.get('Object').callprop('defineProperty', var.get('module').get('exports'), Js('promises'), Js({'get':PyJs_get_1841_}))
    PyJs_anonymous_1839_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1842_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'jsonFile', 'u', 'require'])
        Js('use strict')
        var.put('u', var.get('require')(Js('universalify')).get('fromCallback'))
        var.put('jsonFile', var.get('require')(Js('./jsonfile')))
        var.get('jsonFile').put('outputJson', var.get('u')(var.get('require')(Js('./output-json'))))
        var.get('jsonFile').put('outputJsonSync', var.get('require')(Js('./output-json-sync')))
        var.get('jsonFile').put('outputJSON', var.get('jsonFile').get('outputJson'))
        var.get('jsonFile').put('outputJSONSync', var.get('jsonFile').get('outputJsonSync'))
        var.get('jsonFile').put('writeJSON', var.get('jsonFile').get('writeJson'))
        var.get('jsonFile').put('writeJSONSync', var.get('jsonFile').get('writeJsonSync'))
        var.get('jsonFile').put('readJSON', var.get('jsonFile').get('readJson'))
        var.get('jsonFile').put('readJSONSync', var.get('jsonFile').get('readJsonSync'))
        var.get('module').put('exports', var.get('jsonFile'))
    PyJs_anonymous_1842_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1843_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'jsonFile', 'u', 'require'])
        Js('use strict')
        var.put('u', var.get('require')(Js('universalify')).get('fromCallback'))
        var.put('jsonFile', var.get('require')(Js('jsonfile')))
        var.get('module').put('exports', Js({'readJson':var.get('u')(var.get('jsonFile').get('readFile')),'readJsonSync':var.get('jsonFile').get('readFileSync'),'writeJson':var.get('u')(var.get('jsonFile').get('writeFile')),'writeJsonSync':var.get('jsonFile').get('writeFileSync')}))
    PyJs_anonymous_1843_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1844_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'path', 'exports', 'jsonFile', 'mkdir', 'outputJsonSync', 'fs', 'require'])
        @Js
        def PyJsHoisted_outputJsonSync_(file, data, options, this, arguments, var=var):
            var = Scope({'file':file, 'data':data, 'options':options, 'this':this, 'arguments':arguments}, var)
            var.registers(['options', 'dir', 'data', 'file'])
            var.put('dir', var.get('path').callprop('dirname', var.get('file')))
            if var.get('fs').callprop('existsSync', var.get('dir')).neg():
                var.get('mkdir').callprop('mkdirsSync', var.get('dir'))
            var.get('jsonFile').callprop('writeJsonSync', var.get('file'), var.get('data'), var.get('options'))
        PyJsHoisted_outputJsonSync_.func_name = 'outputJsonSync'
        var.put('outputJsonSync', PyJsHoisted_outputJsonSync_)
        Js('use strict')
        var.put('fs', var.get('require')(Js('graceful-fs')))
        var.put('path', var.get('require')(Js('path')))
        var.put('mkdir', var.get('require')(Js('../mkdirs')))
        var.put('jsonFile', var.get('require')(Js('./jsonfile')))
        pass
        var.get('module').put('exports', var.get('outputJsonSync'))
    PyJs_anonymous_1844_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1845_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'path', 'exports', 'jsonFile', 'mkdir', 'outputJson', 'require', 'pathExists'])
        @Js
        def PyJsHoisted_outputJson_(file, data, options, callback, this, arguments, var=var):
            var = Scope({'file':file, 'data':data, 'options':options, 'callback':callback, 'this':this, 'arguments':arguments}, var)
            var.registers(['callback', 'dir', 'options', 'data', 'file'])
            if PyJsStrictEq(var.get('options',throw=False).typeof(),Js('function')):
                var.put('callback', var.get('options'))
                var.put('options', Js({}))
            var.put('dir', var.get('path').callprop('dirname', var.get('file')))
            @Js
            def PyJs_anonymous_1846_(err, itDoes, this, arguments, var=var):
                var = Scope({'err':err, 'itDoes':itDoes, 'this':this, 'arguments':arguments}, var)
                var.registers(['itDoes', 'err'])
                if var.get('err'):
                    return var.get('callback')(var.get('err'))
                if var.get('itDoes'):
                    return var.get('jsonFile').callprop('writeJson', var.get('file'), var.get('data'), var.get('options'), var.get('callback'))
                @Js
                def PyJs_anonymous_1847_(err, this, arguments, var=var):
                    var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                    var.registers(['err'])
                    if var.get('err'):
                        return var.get('callback')(var.get('err'))
                    var.get('jsonFile').callprop('writeJson', var.get('file'), var.get('data'), var.get('options'), var.get('callback'))
                PyJs_anonymous_1847_._set_name('anonymous')
                var.get('mkdir').callprop('mkdirs', var.get('dir'), PyJs_anonymous_1847_)
            PyJs_anonymous_1846_._set_name('anonymous')
            var.get('pathExists')(var.get('dir'), PyJs_anonymous_1846_)
        PyJsHoisted_outputJson_.func_name = 'outputJson'
        var.put('outputJson', PyJsHoisted_outputJson_)
        Js('use strict')
        var.put('path', var.get('require')(Js('path')))
        var.put('mkdir', var.get('require')(Js('../mkdirs')))
        var.put('pathExists', var.get('require')(Js('../path-exists')).get('pathExists'))
        var.put('jsonFile', var.get('require')(Js('./jsonfile')))
        pass
        var.get('module').put('exports', var.get('outputJson'))
    PyJs_anonymous_1845_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1848_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'mkdirs', 'exports', 'u', 'require', 'mkdirsSync'])
        Js('use strict')
        var.put('u', var.get('require')(Js('universalify')).get('fromCallback'))
        var.put('mkdirs', var.get('u')(var.get('require')(Js('./mkdirs'))))
        var.put('mkdirsSync', var.get('require')(Js('./mkdirs-sync')))
        var.get('module').put('exports', Js({'mkdirs':var.get('mkdirs'),'mkdirsSync':var.get('mkdirsSync'),'mkdirp':var.get('mkdirs'),'mkdirpSync':var.get('mkdirsSync'),'ensureDir':var.get('mkdirs'),'ensureDirSync':var.get('mkdirsSync')}))
    PyJs_anonymous_1848_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1849_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_1850_(process, this, arguments, var=var):
            var = Scope({'process':process, 'this':this, 'arguments':arguments}, var)
            var.registers(['process'])
            @Js
            def PyJs_anonymous_1851_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['path', 'invalidWin32Path', 'o777', 'fs', 'mkdirsSync'])
                @Js
                def PyJsHoisted_mkdirsSync_(p, opts, made, this, arguments, var=var):
                    var = Scope({'p':p, 'opts':opts, 'made':made, 'this':this, 'arguments':arguments}, var)
                    var.registers(['errInval', 'p', 'mode', 'stat', 'made', 'xfs', 'opts'])
                    if (var.get('opts').neg() or PyJsStrictNeq((Js('undefined') if PyJsStrictEq(var.get('opts',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('opts'))),Js('object'))):
                        var.put('opts', Js({'mode':var.get('opts')}))
                    var.put('mode', var.get('opts').get('mode'))
                    var.put('xfs', (var.get('opts').get('fs') or var.get('fs')))
                    if (PyJsStrictEq(var.get('process').get('platform'),Js('win32')) and var.get('invalidWin32Path')(var.get('p'))):
                        var.put('errInval', var.get('Error').create((var.get('p')+Js(' contains invalid WIN32 path characters.'))))
                        var.get('errInval').put('code', Js('EINVAL'))
                        PyJsTempException = JsToPyException(var.get('errInval'))
                        raise PyJsTempException
                    if PyJsStrictEq(var.get('mode'),var.get('undefined')):
                        var.put('mode', (var.get('o777')&(~var.get('process').callprop('umask'))))
                    if var.get('made').neg():
                        var.put('made', var.get(u"null"))
                    var.put('p', var.get('path').callprop('resolve', var.get('p')))
                    try:
                        var.get('xfs').callprop('mkdirSync', var.get('p'), var.get('mode'))
                        var.put('made', (var.get('made') or var.get('p')))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_65727230_3461921 = var.own.get('err0')
                        var.force_own_put('err0', PyExceptionToJs(PyJsTempException))
                        try:
                            if PyJsStrictEq(var.get('err0').get('code'),Js('ENOENT')):
                                if PyJsStrictEq(var.get('path').callprop('dirname', var.get('p')),var.get('p')):
                                    PyJsTempException = JsToPyException(var.get('err0'))
                                    raise PyJsTempException
                                var.put('made', var.get('mkdirsSync')(var.get('path').callprop('dirname', var.get('p')), var.get('opts'), var.get('made')))
                                var.get('mkdirsSync')(var.get('p'), var.get('opts'), var.get('made'))
                            else:
                                var.put('stat', PyJsComma(Js(0.0), Js(None)))
                                try:
                                    var.put('stat', var.get('xfs').callprop('statSync', var.get('p')))
                                except PyJsException as PyJsTempException:
                                    PyJsHolder_65727231_29970967 = var.own.get('err1')
                                    var.force_own_put('err1', PyExceptionToJs(PyJsTempException))
                                    try:
                                        PyJsTempException = JsToPyException(var.get('err0'))
                                        raise PyJsTempException
                                    finally:
                                        if PyJsHolder_65727231_29970967 is not None:
                                            var.own['err1'] = PyJsHolder_65727231_29970967
                                        else:
                                            del var.own['err1']
                                        del PyJsHolder_65727231_29970967
                                if var.get('stat').callprop('isDirectory').neg():
                                    PyJsTempException = JsToPyException(var.get('err0'))
                                    raise PyJsTempException
                        finally:
                            if PyJsHolder_65727230_3461921 is not None:
                                var.own['err0'] = PyJsHolder_65727230_3461921
                            else:
                                del var.own['err0']
                            del PyJsHolder_65727230_3461921
                    return var.get('made')
                PyJsHoisted_mkdirsSync_.func_name = 'mkdirsSync'
                var.put('mkdirsSync', PyJsHoisted_mkdirsSync_)
                Js('use strict')
                var.put('fs', var.get('require')(Js('graceful-fs')))
                var.put('path', var.get('require')(Js('path')))
                var.put('invalidWin32Path', var.get('require')(Js('./win32')).get('invalidWin32Path'))
                var.put('o777', var.get('parseInt')(Js('0777'), Js(8.0)))
                pass
                var.get('module').put('exports', var.get('mkdirsSync'))
            PyJs_anonymous_1851_._set_name('anonymous')
            PyJs_anonymous_1851_.callprop('call', var.get(u"this"))
        PyJs_anonymous_1850_._set_name('anonymous')
        PyJs_anonymous_1850_.callprop('call', var.get(u"this"), var.get('require')(Js('_process')))
    PyJs_anonymous_1849_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1852_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_1853_(process, this, arguments, var=var):
            var = Scope({'process':process, 'this':this, 'arguments':arguments}, var)
            var.registers(['process'])
            @Js
            def PyJs_anonymous_1854_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['mkdirs', 'path', 'invalidWin32Path', 'o777', 'fs'])
                @Js
                def PyJsHoisted_mkdirs_(p, opts, callback, made, this, arguments, var=var):
                    var = Scope({'p':p, 'opts':opts, 'callback':callback, 'made':made, 'this':this, 'arguments':arguments}, var)
                    var.registers(['errInval', 'callback', 'p', 'mode', 'made', 'xfs', 'opts'])
                    if PyJsStrictEq(var.get('opts',throw=False).typeof(),Js('function')):
                        var.put('callback', var.get('opts'))
                        var.put('opts', Js({}))
                    else:
                        if (var.get('opts').neg() or PyJsStrictNeq((Js('undefined') if PyJsStrictEq(var.get('opts',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('opts'))),Js('object'))):
                            var.put('opts', Js({'mode':var.get('opts')}))
                    if (PyJsStrictEq(var.get('process').get('platform'),Js('win32')) and var.get('invalidWin32Path')(var.get('p'))):
                        var.put('errInval', var.get('Error').create((var.get('p')+Js(' contains invalid WIN32 path characters.'))))
                        var.get('errInval').put('code', Js('EINVAL'))
                        return var.get('callback')(var.get('errInval'))
                    var.put('mode', var.get('opts').get('mode'))
                    var.put('xfs', (var.get('opts').get('fs') or var.get('fs')))
                    if PyJsStrictEq(var.get('mode'),var.get('undefined')):
                        var.put('mode', (var.get('o777')&(~var.get('process').callprop('umask'))))
                    if var.get('made').neg():
                        var.put('made', var.get(u"null"))
                    @Js
                    def PyJs_anonymous_1855_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        pass
                    PyJs_anonymous_1855_._set_name('anonymous')
                    var.put('callback', (var.get('callback') or PyJs_anonymous_1855_))
                    var.put('p', var.get('path').callprop('resolve', var.get('p')))
                    @Js
                    def PyJs_anonymous_1856_(er, this, arguments, var=var):
                        var = Scope({'er':er, 'this':this, 'arguments':arguments}, var)
                        var.registers(['er'])
                        if var.get('er').neg():
                            var.put('made', (var.get('made') or var.get('p')))
                            return var.get('callback')(var.get(u"null"), var.get('made'))
                        while 1:
                            SWITCHED = False
                            CONDITION = (var.get('er').get('code'))
                            if SWITCHED or PyJsStrictEq(CONDITION, Js('ENOENT')):
                                SWITCHED = True
                                if PyJsStrictEq(var.get('path').callprop('dirname', var.get('p')),var.get('p')):
                                    return var.get('callback')(var.get('er'))
                                @Js
                                def PyJs_anonymous_1857_(er, made, this, arguments, var=var):
                                    var = Scope({'er':er, 'made':made, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['made', 'er'])
                                    if var.get('er'):
                                        var.get('callback')(var.get('er'), var.get('made'))
                                    else:
                                        var.get('mkdirs')(var.get('p'), var.get('opts'), var.get('callback'), var.get('made'))
                                PyJs_anonymous_1857_._set_name('anonymous')
                                var.get('mkdirs')(var.get('path').callprop('dirname', var.get('p')), var.get('opts'), PyJs_anonymous_1857_)
                                break
                            if True:
                                SWITCHED = True
                                @Js
                                def PyJs_anonymous_1858_(er2, stat, this, arguments, var=var):
                                    var = Scope({'er2':er2, 'stat':stat, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['stat', 'er2'])
                                    if (var.get('er2') or var.get('stat').callprop('isDirectory').neg()):
                                        var.get('callback')(var.get('er'), var.get('made'))
                                    else:
                                        var.get('callback')(var.get(u"null"), var.get('made'))
                                PyJs_anonymous_1858_._set_name('anonymous')
                                var.get('xfs').callprop('stat', var.get('p'), PyJs_anonymous_1858_)
                                break
                            SWITCHED = True
                            break
                    PyJs_anonymous_1856_._set_name('anonymous')
                    var.get('xfs').callprop('mkdir', var.get('p'), var.get('mode'), PyJs_anonymous_1856_)
                PyJsHoisted_mkdirs_.func_name = 'mkdirs'
                var.put('mkdirs', PyJsHoisted_mkdirs_)
                Js('use strict')
                var.put('fs', var.get('require')(Js('graceful-fs')))
                var.put('path', var.get('require')(Js('path')))
                var.put('invalidWin32Path', var.get('require')(Js('./win32')).get('invalidWin32Path'))
                var.put('o777', var.get('parseInt')(Js('0777'), Js(8.0)))
                pass
                var.get('module').put('exports', var.get('mkdirs'))
            PyJs_anonymous_1854_._set_name('anonymous')
            PyJs_anonymous_1854_.callprop('call', var.get(u"this"))
        PyJs_anonymous_1853_._set_name('anonymous')
        PyJs_anonymous_1853_.callprop('call', var.get(u"this"), var.get('require')(Js('_process')))
    PyJs_anonymous_1852_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1859_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'path', 'exports', 'invalidWin32Path', 'INVALID_PATH_CHARS', 'require', 'getRootPath'])
        @Js
        def PyJsHoisted_getRootPath_(p, this, arguments, var=var):
            var = Scope({'p':p, 'this':this, 'arguments':arguments}, var)
            var.registers(['p'])
            var.put('p', var.get('path').callprop('normalize', var.get('path').callprop('resolve', var.get('p'))).callprop('split', var.get('path').get('sep')))
            if (var.get('p').get('length')>Js(0.0)):
                return var.get('p').get('0')
            return var.get(u"null")
        PyJsHoisted_getRootPath_.func_name = 'getRootPath'
        var.put('getRootPath', PyJsHoisted_getRootPath_)
        @Js
        def PyJsHoisted_invalidWin32Path_(p, this, arguments, var=var):
            var = Scope({'p':p, 'this':this, 'arguments':arguments}, var)
            var.registers(['p', 'rp'])
            var.put('rp', var.get('getRootPath')(var.get('p')))
            var.put('p', var.get('p').callprop('replace', var.get('rp'), Js('')))
            return var.get('INVALID_PATH_CHARS').callprop('test', var.get('p'))
        PyJsHoisted_invalidWin32Path_.func_name = 'invalidWin32Path'
        var.put('invalidWin32Path', PyJsHoisted_invalidWin32Path_)
        Js('use strict')
        var.put('path', var.get('require')(Js('path')))
        pass
        var.put('INVALID_PATH_CHARS', JsRegExp('/[<>:"|?*]/'))
        pass
        var.get('module').put('exports', Js({'getRootPath':var.get('getRootPath'),'invalidWin32Path':var.get('invalidWin32Path')}))
    PyJs_anonymous_1859_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1860_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        Js('use strict')
        var.get('module').put('exports', Js({'moveSync':var.get('require')(Js('./move-sync'))}))
    PyJs_anonymous_1860_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1861_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'removeSync', 'path', 'stat', 'mkdirpSync', 'moveSync', 'exports', 'moveAcrossDevice', 'doRename', 'fs', 'require', 'rename', 'copySync'])
        @Js
        def PyJsHoisted_moveSync_(src, dest, opts, this, arguments, var=var):
            var = Scope({'src':src, 'dest':dest, 'opts':opts, 'this':this, 'arguments':arguments}, var)
            var.registers(['srcStat', '_stat$checkPathsSync3', 'overwrite', 'opts', 'dest', 'src'])
            var.put('opts', (var.get('opts') or Js({})))
            var.put('overwrite', ((var.get('opts').get('overwrite') or var.get('opts').get('clobber')) or Js(False)))
            var.put('_stat$checkPathsSync3', var.get('stat').callprop('checkPathsSync', var.get('src'), var.get('dest'), Js('move')))
            var.put('srcStat', var.get('_stat$checkPathsSync3').get('srcStat'))
            var.get('stat').callprop('checkParentPathsSync', var.get('src'), var.get('srcStat'), var.get('dest'), Js('move'))
            var.get('mkdirpSync')(var.get('path').callprop('dirname', var.get('dest')))
            return var.get('doRename')(var.get('src'), var.get('dest'), var.get('overwrite'))
        PyJsHoisted_moveSync_.func_name = 'moveSync'
        var.put('moveSync', PyJsHoisted_moveSync_)
        @Js
        def PyJsHoisted_doRename_(src, dest, overwrite, this, arguments, var=var):
            var = Scope({'src':src, 'dest':dest, 'overwrite':overwrite, 'this':this, 'arguments':arguments}, var)
            var.registers(['dest', 'overwrite', 'src'])
            if var.get('overwrite'):
                var.get('removeSync')(var.get('dest'))
                return var.get('rename')(var.get('src'), var.get('dest'), var.get('overwrite'))
            if var.get('fs').callprop('existsSync', var.get('dest')):
                PyJsTempException = JsToPyException(var.get('Error').create(Js('dest already exists.')))
                raise PyJsTempException
            return var.get('rename')(var.get('src'), var.get('dest'), var.get('overwrite'))
        PyJsHoisted_doRename_.func_name = 'doRename'
        var.put('doRename', PyJsHoisted_doRename_)
        @Js
        def PyJsHoisted_rename_(src, dest, overwrite, this, arguments, var=var):
            var = Scope({'src':src, 'dest':dest, 'overwrite':overwrite, 'this':this, 'arguments':arguments}, var)
            var.registers(['dest', 'overwrite', 'src'])
            try:
                var.get('fs').callprop('renameSync', var.get('src'), var.get('dest'))
            except PyJsException as PyJsTempException:
                PyJsHolder_657272_37851325 = var.own.get('err')
                var.force_own_put('err', PyExceptionToJs(PyJsTempException))
                try:
                    if PyJsStrictNeq(var.get('err').get('code'),Js('EXDEV')):
                        PyJsTempException = JsToPyException(var.get('err'))
                        raise PyJsTempException
                    return var.get('moveAcrossDevice')(var.get('src'), var.get('dest'), var.get('overwrite'))
                finally:
                    if PyJsHolder_657272_37851325 is not None:
                        var.own['err'] = PyJsHolder_657272_37851325
                    else:
                        del var.own['err']
                    del PyJsHolder_657272_37851325
        PyJsHoisted_rename_.func_name = 'rename'
        var.put('rename', PyJsHoisted_rename_)
        @Js
        def PyJsHoisted_moveAcrossDevice_(src, dest, overwrite, this, arguments, var=var):
            var = Scope({'src':src, 'dest':dest, 'overwrite':overwrite, 'this':this, 'arguments':arguments}, var)
            var.registers(['dest', 'opts', 'overwrite', 'src'])
            var.put('opts', Js({'overwrite':var.get('overwrite'),'errorOnExist':Js(True)}))
            var.get('copySync')(var.get('src'), var.get('dest'), var.get('opts'))
            return var.get('removeSync')(var.get('src'))
        PyJsHoisted_moveAcrossDevice_.func_name = 'moveAcrossDevice'
        var.put('moveAcrossDevice', PyJsHoisted_moveAcrossDevice_)
        Js('use strict')
        var.put('fs', var.get('require')(Js('graceful-fs')))
        var.put('path', var.get('require')(Js('path')))
        var.put('copySync', var.get('require')(Js('../copy-sync')).get('copySync'))
        var.put('removeSync', var.get('require')(Js('../remove')).get('removeSync'))
        var.put('mkdirpSync', var.get('require')(Js('../mkdirs')).get('mkdirpSync'))
        var.put('stat', var.get('require')(Js('../util/stat')))
        pass
        pass
        pass
        pass
        var.get('module').put('exports', var.get('moveSync'))
    PyJs_anonymous_1861_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1862_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'u'])
        Js('use strict')
        var.put('u', var.get('require')(Js('universalify')).get('fromCallback'))
        var.get('module').put('exports', Js({'move':var.get('u')(var.get('require')(Js('./move')))}))
    PyJs_anonymous_1862_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1863_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['mkdirp', 'module', 'path', 'stat', 'exports', 'remove', 'doRename', 'moveAcrossDevice', 'move', 'require', 'fs', 'copy', 'pathExists', 'rename'])
        @Js
        def PyJsHoisted_move_(src, dest, opts, cb, this, arguments, var=var):
            var = Scope({'src':src, 'dest':dest, 'opts':opts, 'cb':cb, 'this':this, 'arguments':arguments}, var)
            var.registers(['overwrite', 'cb', 'opts', 'dest', 'src'])
            if PyJsStrictEq(var.get('opts',throw=False).typeof(),Js('function')):
                var.put('cb', var.get('opts'))
                var.put('opts', Js({}))
            var.put('overwrite', ((var.get('opts').get('overwrite') or var.get('opts').get('clobber')) or Js(False)))
            @Js
            def PyJs_anonymous_1864_(err, stats, this, arguments, var=var):
                var = Scope({'err':err, 'stats':stats, 'this':this, 'arguments':arguments}, var)
                var.registers(['err', 'stats', 'srcStat'])
                if var.get('err'):
                    return var.get('cb')(var.get('err'))
                var.put('srcStat', var.get('stats').get('srcStat'))
                @Js
                def PyJs_anonymous_1865_(err, this, arguments, var=var):
                    var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                    var.registers(['err'])
                    if var.get('err'):
                        return var.get('cb')(var.get('err'))
                    @Js
                    def PyJs_anonymous_1866_(err, this, arguments, var=var):
                        var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                        var.registers(['err'])
                        if var.get('err'):
                            return var.get('cb')(var.get('err'))
                        return var.get('doRename')(var.get('src'), var.get('dest'), var.get('overwrite'), var.get('cb'))
                    PyJs_anonymous_1866_._set_name('anonymous')
                    var.get('mkdirp')(var.get('path').callprop('dirname', var.get('dest')), PyJs_anonymous_1866_)
                PyJs_anonymous_1865_._set_name('anonymous')
                var.get('stat').callprop('checkParentPaths', var.get('src'), var.get('srcStat'), var.get('dest'), Js('move'), PyJs_anonymous_1865_)
            PyJs_anonymous_1864_._set_name('anonymous')
            var.get('stat').callprop('checkPaths', var.get('src'), var.get('dest'), Js('move'), PyJs_anonymous_1864_)
        PyJsHoisted_move_.func_name = 'move'
        var.put('move', PyJsHoisted_move_)
        @Js
        def PyJsHoisted_doRename_(src, dest, overwrite, cb, this, arguments, var=var):
            var = Scope({'src':src, 'dest':dest, 'overwrite':overwrite, 'cb':cb, 'this':this, 'arguments':arguments}, var)
            var.registers(['dest', 'overwrite', 'cb', 'src'])
            if var.get('overwrite'):
                @Js
                def PyJs_anonymous_1867_(err, this, arguments, var=var):
                    var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                    var.registers(['err'])
                    if var.get('err'):
                        return var.get('cb')(var.get('err'))
                    return var.get('rename')(var.get('src'), var.get('dest'), var.get('overwrite'), var.get('cb'))
                PyJs_anonymous_1867_._set_name('anonymous')
                return var.get('remove')(var.get('dest'), PyJs_anonymous_1867_)
            @Js
            def PyJs_anonymous_1868_(err, destExists, this, arguments, var=var):
                var = Scope({'err':err, 'destExists':destExists, 'this':this, 'arguments':arguments}, var)
                var.registers(['err', 'destExists'])
                if var.get('err'):
                    return var.get('cb')(var.get('err'))
                if var.get('destExists'):
                    return var.get('cb')(var.get('Error').create(Js('dest already exists.')))
                return var.get('rename')(var.get('src'), var.get('dest'), var.get('overwrite'), var.get('cb'))
            PyJs_anonymous_1868_._set_name('anonymous')
            var.get('pathExists')(var.get('dest'), PyJs_anonymous_1868_)
        PyJsHoisted_doRename_.func_name = 'doRename'
        var.put('doRename', PyJsHoisted_doRename_)
        @Js
        def PyJsHoisted_rename_(src, dest, overwrite, cb, this, arguments, var=var):
            var = Scope({'src':src, 'dest':dest, 'overwrite':overwrite, 'cb':cb, 'this':this, 'arguments':arguments}, var)
            var.registers(['dest', 'overwrite', 'cb', 'src'])
            @Js
            def PyJs_anonymous_1869_(err, this, arguments, var=var):
                var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                var.registers(['err'])
                if var.get('err').neg():
                    return var.get('cb')()
                if PyJsStrictNeq(var.get('err').get('code'),Js('EXDEV')):
                    return var.get('cb')(var.get('err'))
                return var.get('moveAcrossDevice')(var.get('src'), var.get('dest'), var.get('overwrite'), var.get('cb'))
            PyJs_anonymous_1869_._set_name('anonymous')
            var.get('fs').callprop('rename', var.get('src'), var.get('dest'), PyJs_anonymous_1869_)
        PyJsHoisted_rename_.func_name = 'rename'
        var.put('rename', PyJsHoisted_rename_)
        @Js
        def PyJsHoisted_moveAcrossDevice_(src, dest, overwrite, cb, this, arguments, var=var):
            var = Scope({'src':src, 'dest':dest, 'overwrite':overwrite, 'cb':cb, 'this':this, 'arguments':arguments}, var)
            var.registers(['overwrite', 'cb', 'opts', 'dest', 'src'])
            var.put('opts', Js({'overwrite':var.get('overwrite'),'errorOnExist':Js(True)}))
            @Js
            def PyJs_anonymous_1870_(err, this, arguments, var=var):
                var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                var.registers(['err'])
                if var.get('err'):
                    return var.get('cb')(var.get('err'))
                return var.get('remove')(var.get('src'), var.get('cb'))
            PyJs_anonymous_1870_._set_name('anonymous')
            var.get('copy')(var.get('src'), var.get('dest'), var.get('opts'), PyJs_anonymous_1870_)
        PyJsHoisted_moveAcrossDevice_.func_name = 'moveAcrossDevice'
        var.put('moveAcrossDevice', PyJsHoisted_moveAcrossDevice_)
        Js('use strict')
        var.put('fs', var.get('require')(Js('graceful-fs')))
        var.put('path', var.get('require')(Js('path')))
        var.put('copy', var.get('require')(Js('../copy')).get('copy'))
        var.put('remove', var.get('require')(Js('../remove')).get('remove'))
        var.put('mkdirp', var.get('require')(Js('../mkdirs')).get('mkdirp'))
        var.put('pathExists', var.get('require')(Js('../path-exists')).get('pathExists'))
        var.put('stat', var.get('require')(Js('../util/stat')))
        pass
        pass
        pass
        pass
        var.get('module').put('exports', var.get('move'))
    PyJs_anonymous_1863_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1871_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['outputFile', 'module', 'path', 'outputFileSync', 'exports', 'mkdir', 'u', 'fs', 'require', 'pathExists'])
        @Js
        def PyJsHoisted_outputFile_(file, data, encoding, callback, this, arguments, var=var):
            var = Scope({'file':file, 'data':data, 'encoding':encoding, 'callback':callback, 'this':this, 'arguments':arguments}, var)
            var.registers(['callback', 'dir', 'encoding', 'data', 'file'])
            if PyJsStrictEq(var.get('encoding',throw=False).typeof(),Js('function')):
                var.put('callback', var.get('encoding'))
                var.put('encoding', Js('utf8'))
            var.put('dir', var.get('path').callprop('dirname', var.get('file')))
            @Js
            def PyJs_anonymous_1872_(err, itDoes, this, arguments, var=var):
                var = Scope({'err':err, 'itDoes':itDoes, 'this':this, 'arguments':arguments}, var)
                var.registers(['itDoes', 'err'])
                if var.get('err'):
                    return var.get('callback')(var.get('err'))
                if var.get('itDoes'):
                    return var.get('fs').callprop('writeFile', var.get('file'), var.get('data'), var.get('encoding'), var.get('callback'))
                @Js
                def PyJs_anonymous_1873_(err, this, arguments, var=var):
                    var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                    var.registers(['err'])
                    if var.get('err'):
                        return var.get('callback')(var.get('err'))
                    var.get('fs').callprop('writeFile', var.get('file'), var.get('data'), var.get('encoding'), var.get('callback'))
                PyJs_anonymous_1873_._set_name('anonymous')
                var.get('mkdir').callprop('mkdirs', var.get('dir'), PyJs_anonymous_1873_)
            PyJs_anonymous_1872_._set_name('anonymous')
            var.get('pathExists')(var.get('dir'), PyJs_anonymous_1872_)
        PyJsHoisted_outputFile_.func_name = 'outputFile'
        var.put('outputFile', PyJsHoisted_outputFile_)
        @Js
        def PyJsHoisted_outputFileSync_(file, this, arguments, var=var):
            var = Scope({'file':file, 'this':this, 'arguments':arguments}, var)
            var.registers(['dir', '_len3', '_key3', 'args', 'file'])
            var.put('dir', var.get('path').callprop('dirname', var.get('file')))
            #for JS loop
            var.put('_len3', var.get('arguments').get('length'))
            var.put('args', var.get('Array')(((var.get('_len3')-Js(1.0)) if (var.get('_len3')>Js(1.0)) else Js(0.0))))
            var.put('_key3', Js(1.0))
            while (var.get('_key3')<var.get('_len3')):
                try:
                    var.get('args').put((var.get('_key3')-Js(1.0)), var.get('arguments').get(var.get('_key3')))
                finally:
                        (var.put('_key3',Js(var.get('_key3').to_number())+Js(1))-Js(1))
            if var.get('fs').callprop('existsSync', var.get('dir')):
                return var.get('fs').get('writeFileSync').callprop('apply', var.get('fs'), Js([var.get('file')]).callprop('concat', var.get('args')))
            var.get('mkdir').callprop('mkdirsSync', var.get('dir'))
            var.get('fs').get('writeFileSync').callprop('apply', var.get('fs'), Js([var.get('file')]).callprop('concat', var.get('args')))
        PyJsHoisted_outputFileSync_.func_name = 'outputFileSync'
        var.put('outputFileSync', PyJsHoisted_outputFileSync_)
        Js('use strict')
        var.put('u', var.get('require')(Js('universalify')).get('fromCallback'))
        var.put('fs', var.get('require')(Js('graceful-fs')))
        var.put('path', var.get('require')(Js('path')))
        var.put('mkdir', var.get('require')(Js('../mkdirs')))
        var.put('pathExists', var.get('require')(Js('../path-exists')).get('pathExists'))
        pass
        pass
        var.get('module').put('exports', Js({'outputFile':var.get('u')(var.get('outputFile')),'outputFileSync':var.get('outputFileSync')}))
    PyJs_anonymous_1871_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1874_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'u', 'fs', 'require', 'pathExists'])
        @Js
        def PyJsHoisted_pathExists_(path, this, arguments, var=var):
            var = Scope({'path':path, 'this':this, 'arguments':arguments}, var)
            var.registers(['path'])
            @Js
            def PyJs_anonymous_1875_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return Js(False)
            PyJs_anonymous_1875_._set_name('anonymous')
            @Js
            def PyJs_anonymous_1876_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return Js(True)
            PyJs_anonymous_1876_._set_name('anonymous')
            return var.get('fs').callprop('access', var.get('path')).callprop('then', PyJs_anonymous_1876_).callprop('catch', PyJs_anonymous_1875_)
        PyJsHoisted_pathExists_.func_name = 'pathExists'
        var.put('pathExists', PyJsHoisted_pathExists_)
        Js('use strict')
        var.put('u', var.get('require')(Js('universalify')).get('fromPromise'))
        var.put('fs', var.get('require')(Js('../fs')))
        pass
        var.get('module').put('exports', Js({'pathExists':var.get('u')(var.get('pathExists')),'pathExistsSync':var.get('fs').get('existsSync')}))
    PyJs_anonymous_1874_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1877_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'rimraf', 'u', 'require'])
        Js('use strict')
        var.put('u', var.get('require')(Js('universalify')).get('fromCallback'))
        var.put('rimraf', var.get('require')(Js('./rimraf')))
        var.get('module').put('exports', Js({'remove':var.get('u')(var.get('rimraf')),'removeSync':var.get('rimraf').get('sync')}))
    PyJs_anonymous_1877_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1878_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_1879_(process, this, arguments, var=var):
            var = Scope({'process':process, 'this':this, 'arguments':arguments}, var)
            var.registers(['process'])
            @Js
            def PyJs_anonymous_1880_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['rmdir', 'rmdirSync', 'path', 'rmkids', 'rimraf_', 'assert', 'rmkidsSync', 'rimraf', 'fixWinEPERMSync', 'defaults', 'fs', 'fixWinEPERM', 'rimrafSync', 'isWindows'])
                @Js
                def PyJsHoisted_defaults_(options, this, arguments, var=var):
                    var = Scope({'options':options, 'this':this, 'arguments':arguments}, var)
                    var.registers(['options', 'methods'])
                    var.put('methods', Js([Js('unlink'), Js('chmod'), Js('stat'), Js('lstat'), Js('rmdir'), Js('readdir')]))
                    @Js
                    def PyJs_anonymous_1881_(m, this, arguments, var=var):
                        var = Scope({'m':m, 'this':this, 'arguments':arguments}, var)
                        var.registers(['m'])
                        var.get('options').put(var.get('m'), (var.get('options').get(var.get('m')) or var.get('fs').get(var.get('m'))))
                        var.put('m', (var.get('m')+Js('Sync')))
                        var.get('options').put(var.get('m'), (var.get('options').get(var.get('m')) or var.get('fs').get(var.get('m'))))
                    PyJs_anonymous_1881_._set_name('anonymous')
                    var.get('methods').callprop('forEach', PyJs_anonymous_1881_)
                    var.get('options').put('maxBusyTries', (var.get('options').get('maxBusyTries') or Js(3.0)))
                PyJsHoisted_defaults_.func_name = 'defaults'
                var.put('defaults', PyJsHoisted_defaults_)
                @Js
                def PyJsHoisted_rimraf_(p, options, cb, this, arguments, var=var):
                    var = Scope({'p':p, 'options':options, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['options', 'p', 'busyTries', 'cb'])
                    var.put('busyTries', Js(0.0))
                    if PyJsStrictEq(var.get('options',throw=False).typeof(),Js('function')):
                        var.put('cb', var.get('options'))
                        var.put('options', Js({}))
                    var.get('assert')(var.get('p'), Js('rimraf: missing path'))
                    var.get('assert').callprop('strictEqual', (Js('undefined') if PyJsStrictEq(var.get('p',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('p'))), Js('string'), Js('rimraf: path should be a string'))
                    var.get('assert').callprop('strictEqual', (Js('undefined') if PyJsStrictEq(var.get('cb',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('cb'))), Js('function'), Js('rimraf: callback function required'))
                    var.get('assert')(var.get('options'), Js('rimraf: invalid options argument provided'))
                    var.get('assert').callprop('strictEqual', (Js('undefined') if PyJsStrictEq(var.get('options',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('options'))), Js('object'), Js('rimraf: options should be object'))
                    var.get('defaults')(var.get('options'))
                    @Js
                    def PyJs_CB_1882_(er, this, arguments, var=var):
                        var = Scope({'er':er, 'this':this, 'arguments':arguments, 'CB':PyJs_CB_1882_}, var)
                        var.registers(['time', 'er'])
                        if var.get('er'):
                            if (((PyJsStrictEq(var.get('er').get('code'),Js('EBUSY')) or PyJsStrictEq(var.get('er').get('code'),Js('ENOTEMPTY'))) or PyJsStrictEq(var.get('er').get('code'),Js('EPERM'))) and (var.get('busyTries')<var.get('options').get('maxBusyTries'))):
                                (var.put('busyTries',Js(var.get('busyTries').to_number())+Js(1))-Js(1))
                                var.put('time', (var.get('busyTries')*Js(100.0)))
                                @Js
                                def PyJs_anonymous_1883_(this, arguments, var=var):
                                    var = Scope({'this':this, 'arguments':arguments}, var)
                                    var.registers([])
                                    return var.get('rimraf_')(var.get('p'), var.get('options'), var.get('CB'))
                                PyJs_anonymous_1883_._set_name('anonymous')
                                return var.get('setTimeout')(PyJs_anonymous_1883_, var.get('time'))
                            if PyJsStrictEq(var.get('er').get('code'),Js('ENOENT')):
                                var.put('er', var.get(u"null"))
                        var.get('cb')(var.get('er'))
                    PyJs_CB_1882_._set_name('CB')
                    var.get('rimraf_')(var.get('p'), var.get('options'), PyJs_CB_1882_)
                PyJsHoisted_rimraf_.func_name = 'rimraf'
                var.put('rimraf', PyJsHoisted_rimraf_)
                @Js
                def PyJsHoisted_rimraf__(p, options, cb, this, arguments, var=var):
                    var = Scope({'p':p, 'options':options, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['options', 'p', 'cb'])
                    var.get('assert')(var.get('p'))
                    var.get('assert')(var.get('options'))
                    var.get('assert')(PyJsStrictEq(var.get('cb',throw=False).typeof(),Js('function')))
                    @Js
                    def PyJs_anonymous_1884_(er, st, this, arguments, var=var):
                        var = Scope({'er':er, 'st':st, 'this':this, 'arguments':arguments}, var)
                        var.registers(['st', 'er'])
                        if (var.get('er') and PyJsStrictEq(var.get('er').get('code'),Js('ENOENT'))):
                            return var.get('cb')(var.get(u"null"))
                        if ((var.get('er') and PyJsStrictEq(var.get('er').get('code'),Js('EPERM'))) and var.get('isWindows')):
                            return var.get('fixWinEPERM')(var.get('p'), var.get('options'), var.get('er'), var.get('cb'))
                        if (var.get('st') and var.get('st').callprop('isDirectory')):
                            return var.get('rmdir')(var.get('p'), var.get('options'), var.get('er'), var.get('cb'))
                        @Js
                        def PyJs_anonymous_1885_(er, this, arguments, var=var):
                            var = Scope({'er':er, 'this':this, 'arguments':arguments}, var)
                            var.registers(['er'])
                            if var.get('er'):
                                if PyJsStrictEq(var.get('er').get('code'),Js('ENOENT')):
                                    return var.get('cb')(var.get(u"null"))
                                if PyJsStrictEq(var.get('er').get('code'),Js('EPERM')):
                                    return (var.get('fixWinEPERM')(var.get('p'), var.get('options'), var.get('er'), var.get('cb')) if var.get('isWindows') else var.get('rmdir')(var.get('p'), var.get('options'), var.get('er'), var.get('cb')))
                                if PyJsStrictEq(var.get('er').get('code'),Js('EISDIR')):
                                    return var.get('rmdir')(var.get('p'), var.get('options'), var.get('er'), var.get('cb'))
                            return var.get('cb')(var.get('er'))
                        PyJs_anonymous_1885_._set_name('anonymous')
                        var.get('options').callprop('unlink', var.get('p'), PyJs_anonymous_1885_)
                    PyJs_anonymous_1884_._set_name('anonymous')
                    var.get('options').callprop('lstat', var.get('p'), PyJs_anonymous_1884_)
                PyJsHoisted_rimraf__.func_name = 'rimraf_'
                var.put('rimraf_', PyJsHoisted_rimraf__)
                @Js
                def PyJsHoisted_fixWinEPERM_(p, options, er, cb, this, arguments, var=var):
                    var = Scope({'p':p, 'options':options, 'er':er, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['options', 'p', 'er', 'cb'])
                    var.get('assert')(var.get('p'))
                    var.get('assert')(var.get('options'))
                    var.get('assert')(PyJsStrictEq(var.get('cb',throw=False).typeof(),Js('function')))
                    if var.get('er'):
                        var.get('assert')(var.get('er').instanceof(var.get('Error')))
                    @Js
                    def PyJs_anonymous_1886_(er2, this, arguments, var=var):
                        var = Scope({'er2':er2, 'this':this, 'arguments':arguments}, var)
                        var.registers(['er2'])
                        if var.get('er2'):
                            var.get('cb')((var.get(u"null") if PyJsStrictEq(var.get('er2').get('code'),Js('ENOENT')) else var.get('er')))
                        else:
                            @Js
                            def PyJs_anonymous_1887_(er3, stats, this, arguments, var=var):
                                var = Scope({'er3':er3, 'stats':stats, 'this':this, 'arguments':arguments}, var)
                                var.registers(['er3', 'stats'])
                                if var.get('er3'):
                                    var.get('cb')((var.get(u"null") if PyJsStrictEq(var.get('er3').get('code'),Js('ENOENT')) else var.get('er')))
                                else:
                                    if var.get('stats').callprop('isDirectory'):
                                        var.get('rmdir')(var.get('p'), var.get('options'), var.get('er'), var.get('cb'))
                                    else:
                                        var.get('options').callprop('unlink', var.get('p'), var.get('cb'))
                            PyJs_anonymous_1887_._set_name('anonymous')
                            var.get('options').callprop('stat', var.get('p'), PyJs_anonymous_1887_)
                    PyJs_anonymous_1886_._set_name('anonymous')
                    var.get('options').callprop('chmod', var.get('p'), Js(438.0), PyJs_anonymous_1886_)
                PyJsHoisted_fixWinEPERM_.func_name = 'fixWinEPERM'
                var.put('fixWinEPERM', PyJsHoisted_fixWinEPERM_)
                @Js
                def PyJsHoisted_fixWinEPERMSync_(p, options, er, this, arguments, var=var):
                    var = Scope({'p':p, 'options':options, 'er':er, 'this':this, 'arguments':arguments}, var)
                    var.registers(['options', 'p', 'er', 'stats'])
                    var.put('stats', PyJsComma(Js(0.0), Js(None)))
                    var.get('assert')(var.get('p'))
                    var.get('assert')(var.get('options'))
                    if var.get('er'):
                        var.get('assert')(var.get('er').instanceof(var.get('Error')))
                    try:
                        var.get('options').callprop('chmodSync', var.get('p'), Js(438.0))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_657232_33362767 = var.own.get('er2')
                        var.force_own_put('er2', PyExceptionToJs(PyJsTempException))
                        try:
                            if PyJsStrictEq(var.get('er2').get('code'),Js('ENOENT')):
                                return var.get('undefined')
                            else:
                                PyJsTempException = JsToPyException(var.get('er'))
                                raise PyJsTempException
                        finally:
                            if PyJsHolder_657232_33362767 is not None:
                                var.own['er2'] = PyJsHolder_657232_33362767
                            else:
                                del var.own['er2']
                            del PyJsHolder_657232_33362767
                    try:
                        var.put('stats', var.get('options').callprop('statSync', var.get('p')))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_657233_90427865 = var.own.get('er3')
                        var.force_own_put('er3', PyExceptionToJs(PyJsTempException))
                        try:
                            if PyJsStrictEq(var.get('er3').get('code'),Js('ENOENT')):
                                return var.get('undefined')
                            else:
                                PyJsTempException = JsToPyException(var.get('er'))
                                raise PyJsTempException
                        finally:
                            if PyJsHolder_657233_90427865 is not None:
                                var.own['er3'] = PyJsHolder_657233_90427865
                            else:
                                del var.own['er3']
                            del PyJsHolder_657233_90427865
                    if var.get('stats').callprop('isDirectory'):
                        var.get('rmdirSync')(var.get('p'), var.get('options'), var.get('er'))
                    else:
                        var.get('options').callprop('unlinkSync', var.get('p'))
                PyJsHoisted_fixWinEPERMSync_.func_name = 'fixWinEPERMSync'
                var.put('fixWinEPERMSync', PyJsHoisted_fixWinEPERMSync_)
                @Js
                def PyJsHoisted_rmdir_(p, options, originalEr, cb, this, arguments, var=var):
                    var = Scope({'p':p, 'options':options, 'originalEr':originalEr, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['options', 'originalEr', 'p', 'cb'])
                    var.get('assert')(var.get('p'))
                    var.get('assert')(var.get('options'))
                    if var.get('originalEr'):
                        var.get('assert')(var.get('originalEr').instanceof(var.get('Error')))
                    var.get('assert')(PyJsStrictEq(var.get('cb',throw=False).typeof(),Js('function')))
                    @Js
                    def PyJs_anonymous_1888_(er, this, arguments, var=var):
                        var = Scope({'er':er, 'this':this, 'arguments':arguments}, var)
                        var.registers(['er'])
                        if (var.get('er') and ((PyJsStrictEq(var.get('er').get('code'),Js('ENOTEMPTY')) or PyJsStrictEq(var.get('er').get('code'),Js('EEXIST'))) or PyJsStrictEq(var.get('er').get('code'),Js('EPERM')))):
                            var.get('rmkids')(var.get('p'), var.get('options'), var.get('cb'))
                        else:
                            if (var.get('er') and PyJsStrictEq(var.get('er').get('code'),Js('ENOTDIR'))):
                                var.get('cb')(var.get('originalEr'))
                            else:
                                var.get('cb')(var.get('er'))
                    PyJs_anonymous_1888_._set_name('anonymous')
                    var.get('options').callprop('rmdir', var.get('p'), PyJs_anonymous_1888_)
                PyJsHoisted_rmdir_.func_name = 'rmdir'
                var.put('rmdir', PyJsHoisted_rmdir_)
                @Js
                def PyJsHoisted_rmkids_(p, options, cb, this, arguments, var=var):
                    var = Scope({'p':p, 'options':options, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['options', 'p', 'cb'])
                    var.get('assert')(var.get('p'))
                    var.get('assert')(var.get('options'))
                    var.get('assert')(PyJsStrictEq(var.get('cb',throw=False).typeof(),Js('function')))
                    @Js
                    def PyJs_anonymous_1889_(er, files, this, arguments, var=var):
                        var = Scope({'er':er, 'files':files, 'this':this, 'arguments':arguments}, var)
                        var.registers(['errState', 'n', 'files', 'er'])
                        if var.get('er'):
                            return var.get('cb')(var.get('er'))
                        var.put('n', var.get('files').get('length'))
                        var.put('errState', PyJsComma(Js(0.0), Js(None)))
                        if PyJsStrictEq(var.get('n'),Js(0.0)):
                            return var.get('options').callprop('rmdir', var.get('p'), var.get('cb'))
                        @Js
                        def PyJs_anonymous_1890_(f, this, arguments, var=var):
                            var = Scope({'f':f, 'this':this, 'arguments':arguments}, var)
                            var.registers(['f'])
                            @Js
                            def PyJs_anonymous_1891_(er, this, arguments, var=var):
                                var = Scope({'er':er, 'this':this, 'arguments':arguments}, var)
                                var.registers(['er'])
                                if var.get('errState'):
                                    return var.get('undefined')
                                if var.get('er'):
                                    return var.get('cb')(var.put('errState', var.get('er')))
                                if PyJsStrictEq(var.put('n',Js(var.get('n').to_number())-Js(1)),Js(0.0)):
                                    var.get('options').callprop('rmdir', var.get('p'), var.get('cb'))
                            PyJs_anonymous_1891_._set_name('anonymous')
                            var.get('rimraf')(var.get('path').callprop('join', var.get('p'), var.get('f')), var.get('options'), PyJs_anonymous_1891_)
                        PyJs_anonymous_1890_._set_name('anonymous')
                        var.get('files').callprop('forEach', PyJs_anonymous_1890_)
                    PyJs_anonymous_1889_._set_name('anonymous')
                    var.get('options').callprop('readdir', var.get('p'), PyJs_anonymous_1889_)
                PyJsHoisted_rmkids_.func_name = 'rmkids'
                var.put('rmkids', PyJsHoisted_rmkids_)
                @Js
                def PyJsHoisted_rimrafSync_(p, options, this, arguments, var=var):
                    var = Scope({'p':p, 'options':options, 'this':this, 'arguments':arguments}, var)
                    var.registers(['options', 'st', 'p'])
                    var.put('st', PyJsComma(Js(0.0), Js(None)))
                    var.put('options', (var.get('options') or Js({})))
                    var.get('defaults')(var.get('options'))
                    var.get('assert')(var.get('p'), Js('rimraf: missing path'))
                    var.get('assert').callprop('strictEqual', (Js('undefined') if PyJsStrictEq(var.get('p',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('p'))), Js('string'), Js('rimraf: path should be a string'))
                    var.get('assert')(var.get('options'), Js('rimraf: missing options'))
                    var.get('assert').callprop('strictEqual', (Js('undefined') if PyJsStrictEq(var.get('options',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('options'))), Js('object'), Js('rimraf: options should be object'))
                    try:
                        var.put('st', var.get('options').callprop('lstatSync', var.get('p')))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_6572_33360912 = var.own.get('er')
                        var.force_own_put('er', PyExceptionToJs(PyJsTempException))
                        try:
                            if PyJsStrictEq(var.get('er').get('code'),Js('ENOENT')):
                                return var.get('undefined')
                            if (PyJsStrictEq(var.get('er').get('code'),Js('EPERM')) and var.get('isWindows')):
                                var.get('fixWinEPERMSync')(var.get('p'), var.get('options'), var.get('er'))
                        finally:
                            if PyJsHolder_6572_33360912 is not None:
                                var.own['er'] = PyJsHolder_6572_33360912
                            else:
                                del var.own['er']
                            del PyJsHolder_6572_33360912
                    try:
                        if (var.get('st') and var.get('st').callprop('isDirectory')):
                            var.get('rmdirSync')(var.get('p'), var.get('options'), var.get(u"null"))
                        else:
                            var.get('options').callprop('unlinkSync', var.get('p'))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_6572_74236199 = var.own.get('er')
                        var.force_own_put('er', PyExceptionToJs(PyJsTempException))
                        try:
                            if PyJsStrictEq(var.get('er').get('code'),Js('ENOENT')):
                                return var.get('undefined')
                            else:
                                if PyJsStrictEq(var.get('er').get('code'),Js('EPERM')):
                                    return (var.get('fixWinEPERMSync')(var.get('p'), var.get('options'), var.get('er')) if var.get('isWindows') else var.get('rmdirSync')(var.get('p'), var.get('options'), var.get('er')))
                                else:
                                    if PyJsStrictNeq(var.get('er').get('code'),Js('EISDIR')):
                                        PyJsTempException = JsToPyException(var.get('er'))
                                        raise PyJsTempException
                            var.get('rmdirSync')(var.get('p'), var.get('options'), var.get('er'))
                        finally:
                            if PyJsHolder_6572_74236199 is not None:
                                var.own['er'] = PyJsHolder_6572_74236199
                            else:
                                del var.own['er']
                            del PyJsHolder_6572_74236199
                PyJsHoisted_rimrafSync_.func_name = 'rimrafSync'
                var.put('rimrafSync', PyJsHoisted_rimrafSync_)
                @Js
                def PyJsHoisted_rmdirSync_(p, options, originalEr, this, arguments, var=var):
                    var = Scope({'p':p, 'options':options, 'originalEr':originalEr, 'this':this, 'arguments':arguments}, var)
                    var.registers(['options', 'originalEr', 'p'])
                    var.get('assert')(var.get('p'))
                    var.get('assert')(var.get('options'))
                    if var.get('originalEr'):
                        var.get('assert')(var.get('originalEr').instanceof(var.get('Error')))
                    try:
                        var.get('options').callprop('rmdirSync', var.get('p'))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_6572_8697535 = var.own.get('er')
                        var.force_own_put('er', PyExceptionToJs(PyJsTempException))
                        try:
                            if PyJsStrictEq(var.get('er').get('code'),Js('ENOTDIR')):
                                PyJsTempException = JsToPyException(var.get('originalEr'))
                                raise PyJsTempException
                            else:
                                if ((PyJsStrictEq(var.get('er').get('code'),Js('ENOTEMPTY')) or PyJsStrictEq(var.get('er').get('code'),Js('EEXIST'))) or PyJsStrictEq(var.get('er').get('code'),Js('EPERM'))):
                                    var.get('rmkidsSync')(var.get('p'), var.get('options'))
                                else:
                                    if PyJsStrictNeq(var.get('er').get('code'),Js('ENOENT')):
                                        PyJsTempException = JsToPyException(var.get('er'))
                                        raise PyJsTempException
                        finally:
                            if PyJsHolder_6572_8697535 is not None:
                                var.own['er'] = PyJsHolder_6572_8697535
                            else:
                                del var.own['er']
                            del PyJsHolder_6572_8697535
                PyJsHoisted_rmdirSync_.func_name = 'rmdirSync'
                var.put('rmdirSync', PyJsHoisted_rmdirSync_)
                @Js
                def PyJsHoisted_rmkidsSync_(p, options, this, arguments, var=var):
                    var = Scope({'p':p, 'options':options, 'this':this, 'arguments':arguments}, var)
                    var.registers(['startTime', 'p', 'ret', '_ret', 'options'])
                    var.get('assert')(var.get('p'))
                    var.get('assert')(var.get('options'))
                    @Js
                    def PyJs_anonymous_1892_(f, this, arguments, var=var):
                        var = Scope({'f':f, 'this':this, 'arguments':arguments}, var)
                        var.registers(['f'])
                        return var.get('rimrafSync')(var.get('path').callprop('join', var.get('p'), var.get('f')), var.get('options'))
                    PyJs_anonymous_1892_._set_name('anonymous')
                    var.get('options').callprop('readdirSync', var.get('p')).callprop('forEach', PyJs_anonymous_1892_)
                    if var.get('isWindows'):
                        var.put('startTime', var.get('Date').callprop('now'))
                        while 1:
                            try:
                                var.put('ret', var.get('options').callprop('rmdirSync', var.get('p'), var.get('options')))
                                return var.get('ret')
                            except PyJsException as PyJsTempException:
                                PyJsHolder_6572_26769451 = var.own.get('er')
                                var.force_own_put('er', PyExceptionToJs(PyJsTempException))
                                try:
                                    pass
                                finally:
                                    if PyJsHolder_6572_26769451 is not None:
                                        var.own['er'] = PyJsHolder_6572_26769451
                                    else:
                                        del var.own['er']
                                    del PyJsHolder_6572_26769451
                            if not ((var.get('Date').callprop('now')-var.get('startTime'))<Js(500.0)):
                                break
                    else:
                        var.put('_ret', var.get('options').callprop('rmdirSync', var.get('p'), var.get('options')))
                        return var.get('_ret')
                PyJsHoisted_rmkidsSync_.func_name = 'rmkidsSync'
                var.put('rmkidsSync', PyJsHoisted_rmkidsSync_)
                Js('use strict')
                var.put('fs', var.get('require')(Js('graceful-fs')))
                var.put('path', var.get('require')(Js('path')))
                var.put('assert', var.get('require')(Js('assert')))
                var.put('isWindows', PyJsStrictEq(var.get('process').get('platform'),Js('win32')))
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                var.get('module').put('exports', var.get('rimraf'))
                var.get('rimraf').put('sync', var.get('rimrafSync'))
            PyJs_anonymous_1880_._set_name('anonymous')
            PyJs_anonymous_1880_.callprop('call', var.get(u"this"))
        PyJs_anonymous_1879_._set_name('anonymous')
        PyJs_anonymous_1879_.callprop('call', var.get(u"this"), var.get('require')(Js('_process')))
    PyJs_anonymous_1878_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1893_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_1894_(Buffer, this, arguments, var=var):
            var = Scope({'Buffer':Buffer, 'this':this, 'arguments':arguments}, var)
            var.registers(['Buffer'])
            @Js
            def PyJs_anonymous_1895_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                Js('use strict')
                @Js
                def PyJs_anonymous_1896_(size, this, arguments, var=var):
                    var = Scope({'size':size, 'this':this, 'arguments':arguments}, var)
                    var.registers(['size'])
                    if PyJsStrictEq(var.get('Buffer').get('allocUnsafe').typeof(),Js('function')):
                        try:
                            return var.get('Buffer').callprop('allocUnsafe', var.get('size'))
                        except PyJsException as PyJsTempException:
                            PyJsHolder_65_57272041 = var.own.get('e')
                            var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                            try:
                                return var.get('Buffer').create(var.get('size'))
                            finally:
                                if PyJsHolder_65_57272041 is not None:
                                    var.own['e'] = PyJsHolder_65_57272041
                                else:
                                    del var.own['e']
                                del PyJsHolder_65_57272041
                    return var.get('Buffer').create(var.get('size'))
                PyJs_anonymous_1896_._set_name('anonymous')
                var.get('module').put('exports', PyJs_anonymous_1896_)
            PyJs_anonymous_1895_._set_name('anonymous')
            PyJs_anonymous_1895_.callprop('call', var.get(u"this"))
        PyJs_anonymous_1894_._set_name('anonymous')
        PyJs_anonymous_1894_.callprop('call', var.get(u"this"), var.get('require')(Js('buffer')).get('Buffer'))
    PyJs_anonymous_1893_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1897_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_1898_(process, this, arguments, var=var):
            var = Scope({'process':process, 'this':this, 'arguments':arguments}, var)
            var.registers(['process'])
            @Js
            def PyJs_anonymous_1899_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['checkParentPaths', 'path', 'nodeVersionMajor', 'isSrcSubdir', 'checkPathsSync', 'NODE_VERSION_MAJOR_WITH_BIGINT', 'NODE_VERSION_MINOR_WITH_BIGINT', 'nodeVersionMinor', 'checkParentPathsSync', 'getStatsSync', 'nodeSupportsBigInt', 'nodeVersionPatch', 'errMsg', 'nodeVersion', 'getStats', 'fs', 'checkPaths', 'NODE_VERSION_PATCH_WITH_BIGINT'])
                @Js
                def PyJsHoisted_nodeSupportsBigInt_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    if (var.get('nodeVersionMajor')>var.get('NODE_VERSION_MAJOR_WITH_BIGINT')):
                        return Js(True)
                    else:
                        if PyJsStrictEq(var.get('nodeVersionMajor'),var.get('NODE_VERSION_MAJOR_WITH_BIGINT')):
                            if (var.get('nodeVersionMinor')>var.get('NODE_VERSION_MINOR_WITH_BIGINT')):
                                return Js(True)
                            else:
                                if PyJsStrictEq(var.get('nodeVersionMinor'),var.get('NODE_VERSION_MINOR_WITH_BIGINT')):
                                    if (var.get('nodeVersionPatch')>=var.get('NODE_VERSION_PATCH_WITH_BIGINT')):
                                        return Js(True)
                    return Js(False)
                PyJsHoisted_nodeSupportsBigInt_.func_name = 'nodeSupportsBigInt'
                var.put('nodeSupportsBigInt', PyJsHoisted_nodeSupportsBigInt_)
                @Js
                def PyJsHoisted_getStats_(src, dest, cb, this, arguments, var=var):
                    var = Scope({'src':src, 'dest':dest, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['dest', 'cb', 'src'])
                    if var.get('nodeSupportsBigInt')():
                        @Js
                        def PyJs_anonymous_1900_(err, srcStat, this, arguments, var=var):
                            var = Scope({'err':err, 'srcStat':srcStat, 'this':this, 'arguments':arguments}, var)
                            var.registers(['err', 'srcStat'])
                            if var.get('err'):
                                return var.get('cb')(var.get('err'))
                            @Js
                            def PyJs_anonymous_1901_(err, destStat, this, arguments, var=var):
                                var = Scope({'err':err, 'destStat':destStat, 'this':this, 'arguments':arguments}, var)
                                var.registers(['destStat', 'err'])
                                if var.get('err'):
                                    if PyJsStrictEq(var.get('err').get('code'),Js('ENOENT')):
                                        return var.get('cb')(var.get(u"null"), Js({'srcStat':var.get('srcStat'),'destStat':var.get(u"null")}))
                                    return var.get('cb')(var.get('err'))
                                return var.get('cb')(var.get(u"null"), Js({'srcStat':var.get('srcStat'),'destStat':var.get('destStat')}))
                            PyJs_anonymous_1901_._set_name('anonymous')
                            var.get('fs').callprop('stat', var.get('dest'), Js({'bigint':Js(True)}), PyJs_anonymous_1901_)
                        PyJs_anonymous_1900_._set_name('anonymous')
                        var.get('fs').callprop('stat', var.get('src'), Js({'bigint':Js(True)}), PyJs_anonymous_1900_)
                    else:
                        @Js
                        def PyJs_anonymous_1902_(err, srcStat, this, arguments, var=var):
                            var = Scope({'err':err, 'srcStat':srcStat, 'this':this, 'arguments':arguments}, var)
                            var.registers(['err', 'srcStat'])
                            if var.get('err'):
                                return var.get('cb')(var.get('err'))
                            @Js
                            def PyJs_anonymous_1903_(err, destStat, this, arguments, var=var):
                                var = Scope({'err':err, 'destStat':destStat, 'this':this, 'arguments':arguments}, var)
                                var.registers(['destStat', 'err'])
                                if var.get('err'):
                                    if PyJsStrictEq(var.get('err').get('code'),Js('ENOENT')):
                                        return var.get('cb')(var.get(u"null"), Js({'srcStat':var.get('srcStat'),'destStat':var.get(u"null")}))
                                    return var.get('cb')(var.get('err'))
                                return var.get('cb')(var.get(u"null"), Js({'srcStat':var.get('srcStat'),'destStat':var.get('destStat')}))
                            PyJs_anonymous_1903_._set_name('anonymous')
                            var.get('fs').callprop('stat', var.get('dest'), PyJs_anonymous_1903_)
                        PyJs_anonymous_1902_._set_name('anonymous')
                        var.get('fs').callprop('stat', var.get('src'), PyJs_anonymous_1902_)
                PyJsHoisted_getStats_.func_name = 'getStats'
                var.put('getStats', PyJsHoisted_getStats_)
                @Js
                def PyJsHoisted_getStatsSync_(src, dest, this, arguments, var=var):
                    var = Scope({'src':src, 'dest':dest, 'this':this, 'arguments':arguments}, var)
                    var.registers(['destStat', 'src', 'dest', 'srcStat'])
                    var.put('srcStat', PyJsComma(Js(0.0), Js(None)))
                    var.put('destStat', PyJsComma(Js(0.0), Js(None)))
                    if var.get('nodeSupportsBigInt')():
                        var.put('srcStat', var.get('fs').callprop('statSync', var.get('src'), Js({'bigint':Js(True)})))
                    else:
                        var.put('srcStat', var.get('fs').callprop('statSync', var.get('src')))
                    try:
                        if var.get('nodeSupportsBigInt')():
                            var.put('destStat', var.get('fs').callprop('statSync', var.get('dest'), Js({'bigint':Js(True)})))
                        else:
                            var.put('destStat', var.get('fs').callprop('statSync', var.get('dest')))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_657272_98521891 = var.own.get('err')
                        var.force_own_put('err', PyExceptionToJs(PyJsTempException))
                        try:
                            if PyJsStrictEq(var.get('err').get('code'),Js('ENOENT')):
                                return Js({'srcStat':var.get('srcStat'),'destStat':var.get(u"null")})
                            PyJsTempException = JsToPyException(var.get('err'))
                            raise PyJsTempException
                        finally:
                            if PyJsHolder_657272_98521891 is not None:
                                var.own['err'] = PyJsHolder_657272_98521891
                            else:
                                del var.own['err']
                            del PyJsHolder_657272_98521891
                    return Js({'srcStat':var.get('srcStat'),'destStat':var.get('destStat')})
                PyJsHoisted_getStatsSync_.func_name = 'getStatsSync'
                var.put('getStatsSync', PyJsHoisted_getStatsSync_)
                @Js
                def PyJsHoisted_checkPaths_(src, dest, funcName, cb, this, arguments, var=var):
                    var = Scope({'src':src, 'dest':dest, 'funcName':funcName, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['funcName', 'dest', 'cb', 'src'])
                    @Js
                    def PyJs_anonymous_1904_(err, stats, this, arguments, var=var):
                        var = Scope({'err':err, 'stats':stats, 'this':this, 'arguments':arguments}, var)
                        var.registers(['destStat', 'err', 'stats', 'srcStat'])
                        if var.get('err'):
                            return var.get('cb')(var.get('err'))
                        var.put('srcStat', var.get('stats').get('srcStat'))
                        var.put('destStat', var.get('stats').get('destStat'))
                        if ((((var.get('destStat') and var.get('destStat').get('ino')) and var.get('destStat').get('dev')) and PyJsStrictEq(var.get('destStat').get('ino'),var.get('srcStat').get('ino'))) and PyJsStrictEq(var.get('destStat').get('dev'),var.get('srcStat').get('dev'))):
                            return var.get('cb')(var.get('Error').create(Js('Source and destination must not be the same.')))
                        if (var.get('srcStat').callprop('isDirectory') and var.get('isSrcSubdir')(var.get('src'), var.get('dest'))):
                            return var.get('cb')(var.get('Error').create(var.get('errMsg')(var.get('src'), var.get('dest'), var.get('funcName'))))
                        return var.get('cb')(var.get(u"null"), Js({'srcStat':var.get('srcStat'),'destStat':var.get('destStat')}))
                    PyJs_anonymous_1904_._set_name('anonymous')
                    var.get('getStats')(var.get('src'), var.get('dest'), PyJs_anonymous_1904_)
                PyJsHoisted_checkPaths_.func_name = 'checkPaths'
                var.put('checkPaths', PyJsHoisted_checkPaths_)
                @Js
                def PyJsHoisted_checkPathsSync_(src, dest, funcName, this, arguments, var=var):
                    var = Scope({'src':src, 'dest':dest, 'funcName':funcName, 'this':this, 'arguments':arguments}, var)
                    var.registers(['funcName', 'srcStat', 'destStat', '_getStatsSync', 'dest', 'src'])
                    var.put('_getStatsSync', var.get('getStatsSync')(var.get('src'), var.get('dest')))
                    var.put('srcStat', var.get('_getStatsSync').get('srcStat'))
                    var.put('destStat', var.get('_getStatsSync').get('destStat'))
                    if ((((var.get('destStat') and var.get('destStat').get('ino')) and var.get('destStat').get('dev')) and PyJsStrictEq(var.get('destStat').get('ino'),var.get('srcStat').get('ino'))) and PyJsStrictEq(var.get('destStat').get('dev'),var.get('srcStat').get('dev'))):
                        PyJsTempException = JsToPyException(var.get('Error').create(Js('Source and destination must not be the same.')))
                        raise PyJsTempException
                    if (var.get('srcStat').callprop('isDirectory') and var.get('isSrcSubdir')(var.get('src'), var.get('dest'))):
                        PyJsTempException = JsToPyException(var.get('Error').create(var.get('errMsg')(var.get('src'), var.get('dest'), var.get('funcName'))))
                        raise PyJsTempException
                    return Js({'srcStat':var.get('srcStat'),'destStat':var.get('destStat')})
                PyJsHoisted_checkPathsSync_.func_name = 'checkPathsSync'
                var.put('checkPathsSync', PyJsHoisted_checkPathsSync_)
                @Js
                def PyJsHoisted_checkParentPaths_(src, srcStat, dest, funcName, cb, this, arguments, var=var):
                    var = Scope({'src':src, 'srcStat':srcStat, 'dest':dest, 'funcName':funcName, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['funcName', 'srcStat', 'cb', 'srcParent', 'dest', 'destParent', 'src'])
                    var.put('srcParent', var.get('path').callprop('resolve', var.get('path').callprop('dirname', var.get('src'))))
                    var.put('destParent', var.get('path').callprop('resolve', var.get('path').callprop('dirname', var.get('dest'))))
                    if (PyJsStrictEq(var.get('destParent'),var.get('srcParent')) or PyJsStrictEq(var.get('destParent'),var.get('path').callprop('parse', var.get('destParent')).get('root'))):
                        return var.get('cb')()
                    if var.get('nodeSupportsBigInt')():
                        @Js
                        def PyJs_anonymous_1905_(err, destStat, this, arguments, var=var):
                            var = Scope({'err':err, 'destStat':destStat, 'this':this, 'arguments':arguments}, var)
                            var.registers(['destStat', 'err'])
                            if var.get('err'):
                                if PyJsStrictEq(var.get('err').get('code'),Js('ENOENT')):
                                    return var.get('cb')()
                                return var.get('cb')(var.get('err'))
                            if (((var.get('destStat').get('ino') and var.get('destStat').get('dev')) and PyJsStrictEq(var.get('destStat').get('ino'),var.get('srcStat').get('ino'))) and PyJsStrictEq(var.get('destStat').get('dev'),var.get('srcStat').get('dev'))):
                                return var.get('cb')(var.get('Error').create(var.get('errMsg')(var.get('src'), var.get('dest'), var.get('funcName'))))
                            return var.get('checkParentPaths')(var.get('src'), var.get('srcStat'), var.get('destParent'), var.get('funcName'), var.get('cb'))
                        PyJs_anonymous_1905_._set_name('anonymous')
                        var.get('fs').callprop('stat', var.get('destParent'), Js({'bigint':Js(True)}), PyJs_anonymous_1905_)
                    else:
                        @Js
                        def PyJs_anonymous_1906_(err, destStat, this, arguments, var=var):
                            var = Scope({'err':err, 'destStat':destStat, 'this':this, 'arguments':arguments}, var)
                            var.registers(['destStat', 'err'])
                            if var.get('err'):
                                if PyJsStrictEq(var.get('err').get('code'),Js('ENOENT')):
                                    return var.get('cb')()
                                return var.get('cb')(var.get('err'))
                            if (((var.get('destStat').get('ino') and var.get('destStat').get('dev')) and PyJsStrictEq(var.get('destStat').get('ino'),var.get('srcStat').get('ino'))) and PyJsStrictEq(var.get('destStat').get('dev'),var.get('srcStat').get('dev'))):
                                return var.get('cb')(var.get('Error').create(var.get('errMsg')(var.get('src'), var.get('dest'), var.get('funcName'))))
                            return var.get('checkParentPaths')(var.get('src'), var.get('srcStat'), var.get('destParent'), var.get('funcName'), var.get('cb'))
                        PyJs_anonymous_1906_._set_name('anonymous')
                        var.get('fs').callprop('stat', var.get('destParent'), PyJs_anonymous_1906_)
                PyJsHoisted_checkParentPaths_.func_name = 'checkParentPaths'
                var.put('checkParentPaths', PyJsHoisted_checkParentPaths_)
                @Js
                def PyJsHoisted_checkParentPathsSync_(src, srcStat, dest, funcName, this, arguments, var=var):
                    var = Scope({'src':src, 'srcStat':srcStat, 'dest':dest, 'funcName':funcName, 'this':this, 'arguments':arguments}, var)
                    var.registers(['funcName', 'srcStat', 'destStat', 'srcParent', 'dest', 'destParent', 'src'])
                    var.put('srcParent', var.get('path').callprop('resolve', var.get('path').callprop('dirname', var.get('src'))))
                    var.put('destParent', var.get('path').callprop('resolve', var.get('path').callprop('dirname', var.get('dest'))))
                    if (PyJsStrictEq(var.get('destParent'),var.get('srcParent')) or PyJsStrictEq(var.get('destParent'),var.get('path').callprop('parse', var.get('destParent')).get('root'))):
                        return var.get('undefined')
                    var.put('destStat', PyJsComma(Js(0.0), Js(None)))
                    try:
                        if var.get('nodeSupportsBigInt')():
                            var.put('destStat', var.get('fs').callprop('statSync', var.get('destParent'), Js({'bigint':Js(True)})))
                        else:
                            var.put('destStat', var.get('fs').callprop('statSync', var.get('destParent')))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_657272_42909354 = var.own.get('err')
                        var.force_own_put('err', PyExceptionToJs(PyJsTempException))
                        try:
                            if PyJsStrictEq(var.get('err').get('code'),Js('ENOENT')):
                                return var.get('undefined')
                            PyJsTempException = JsToPyException(var.get('err'))
                            raise PyJsTempException
                        finally:
                            if PyJsHolder_657272_42909354 is not None:
                                var.own['err'] = PyJsHolder_657272_42909354
                            else:
                                del var.own['err']
                            del PyJsHolder_657272_42909354
                    if (((var.get('destStat').get('ino') and var.get('destStat').get('dev')) and PyJsStrictEq(var.get('destStat').get('ino'),var.get('srcStat').get('ino'))) and PyJsStrictEq(var.get('destStat').get('dev'),var.get('srcStat').get('dev'))):
                        PyJsTempException = JsToPyException(var.get('Error').create(var.get('errMsg')(var.get('src'), var.get('dest'), var.get('funcName'))))
                        raise PyJsTempException
                    return var.get('checkParentPathsSync')(var.get('src'), var.get('srcStat'), var.get('destParent'), var.get('funcName'))
                PyJsHoisted_checkParentPathsSync_.func_name = 'checkParentPathsSync'
                var.put('checkParentPathsSync', PyJsHoisted_checkParentPathsSync_)
                @Js
                def PyJsHoisted_isSrcSubdir_(src, dest, this, arguments, var=var):
                    var = Scope({'src':src, 'dest':dest, 'this':this, 'arguments':arguments}, var)
                    var.registers(['src', 'dest', 'destArr', 'srcArr'])
                    @Js
                    def PyJs_anonymous_1907_(i, this, arguments, var=var):
                        var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                        var.registers(['i'])
                        return var.get('i')
                    PyJs_anonymous_1907_._set_name('anonymous')
                    var.put('srcArr', var.get('path').callprop('resolve', var.get('src')).callprop('split', var.get('path').get('sep')).callprop('filter', PyJs_anonymous_1907_))
                    @Js
                    def PyJs_anonymous_1908_(i, this, arguments, var=var):
                        var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                        var.registers(['i'])
                        return var.get('i')
                    PyJs_anonymous_1908_._set_name('anonymous')
                    var.put('destArr', var.get('path').callprop('resolve', var.get('dest')).callprop('split', var.get('path').get('sep')).callprop('filter', PyJs_anonymous_1908_))
                    @Js
                    def PyJs_anonymous_1909_(acc, cur, i, this, arguments, var=var):
                        var = Scope({'acc':acc, 'cur':cur, 'i':i, 'this':this, 'arguments':arguments}, var)
                        var.registers(['cur', 'i', 'acc'])
                        return (var.get('acc') and PyJsStrictEq(var.get('destArr').get(var.get('i')),var.get('cur')))
                    PyJs_anonymous_1909_._set_name('anonymous')
                    return var.get('srcArr').callprop('reduce', PyJs_anonymous_1909_, Js(True))
                PyJsHoisted_isSrcSubdir_.func_name = 'isSrcSubdir'
                var.put('isSrcSubdir', PyJsHoisted_isSrcSubdir_)
                @Js
                def PyJsHoisted_errMsg_(src, dest, funcName, this, arguments, var=var):
                    var = Scope({'src':src, 'dest':dest, 'funcName':funcName, 'this':this, 'arguments':arguments}, var)
                    var.registers(['funcName', 'dest', 'src'])
                    return ((((((Js('Cannot ')+var.get('funcName'))+Js(" '"))+var.get('src'))+Js("' to a subdirectory of itself, '"))+var.get('dest'))+Js("'."))
                PyJsHoisted_errMsg_.func_name = 'errMsg'
                var.put('errMsg', PyJsHoisted_errMsg_)
                Js('use strict')
                var.put('fs', var.get('require')(Js('graceful-fs')))
                var.put('path', var.get('require')(Js('path')))
                var.put('NODE_VERSION_MAJOR_WITH_BIGINT', Js(10.0))
                var.put('NODE_VERSION_MINOR_WITH_BIGINT', Js(5.0))
                var.put('NODE_VERSION_PATCH_WITH_BIGINT', Js(0.0))
                var.put('nodeVersion', var.get('process').get('versions').get('node').callprop('split', Js('.')))
                var.put('nodeVersionMajor', var.get('Number').callprop('parseInt', var.get('nodeVersion').get('0'), Js(10.0)))
                var.put('nodeVersionMinor', var.get('Number').callprop('parseInt', var.get('nodeVersion').get('1'), Js(10.0)))
                var.put('nodeVersionPatch', var.get('Number').callprop('parseInt', var.get('nodeVersion').get('2'), Js(10.0)))
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                var.get('module').put('exports', Js({'checkPaths':var.get('checkPaths'),'checkPathsSync':var.get('checkPathsSync'),'checkParentPaths':var.get('checkParentPaths'),'checkParentPathsSync':var.get('checkParentPathsSync'),'isSrcSubdir':var.get('isSrcSubdir')}))
            PyJs_anonymous_1899_._set_name('anonymous')
            PyJs_anonymous_1899_.callprop('call', var.get(u"this"))
        PyJs_anonymous_1898_._set_name('anonymous')
        PyJs_anonymous_1898_.callprop('call', var.get(u"this"), var.get('require')(Js('_process')))
    PyJs_anonymous_1897_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1910_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['utimesMillisSync', 'module', 'hasMillisResSync', 'path', 'exports', 'utimesMillis', 'timeRemoveMillis', 'hasMillisRes', 'fs', 'require', 'os'])
        @Js
        def PyJsHoisted_hasMillisResSync_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['d', 'tmpfile', 'fd'])
            var.put('tmpfile', var.get('path').callprop('join', ((Js('millis-test-sync')+var.get('Date').callprop('now').callprop('toString'))+var.get('Math').callprop('random').callprop('toString').callprop('slice', Js(2.0)))))
            var.put('tmpfile', var.get('path').callprop('join', var.get('os').callprop('tmpdir'), var.get('tmpfile')))
            var.put('d', var.get('Date').create(Js(1435410243862.0)))
            var.get('fs').callprop('writeFileSync', var.get('tmpfile'), Js('https://github.com/jprichardson/node-fs-extra/pull/141'))
            var.put('fd', var.get('fs').callprop('openSync', var.get('tmpfile'), Js('r+')))
            var.get('fs').callprop('futimesSync', var.get('fd'), var.get('d'), var.get('d'))
            var.get('fs').callprop('closeSync', var.get('fd'))
            return (var.get('fs').callprop('statSync', var.get('tmpfile')).get('mtime')>Js(1435410243000.0))
        PyJsHoisted_hasMillisResSync_.func_name = 'hasMillisResSync'
        var.put('hasMillisResSync', PyJsHoisted_hasMillisResSync_)
        @Js
        def PyJsHoisted_hasMillisRes_(callback, this, arguments, var=var):
            var = Scope({'callback':callback, 'this':this, 'arguments':arguments}, var)
            var.registers(['d', 'tmpfile', 'callback'])
            var.put('tmpfile', var.get('path').callprop('join', ((Js('millis-test')+var.get('Date').callprop('now').callprop('toString'))+var.get('Math').callprop('random').callprop('toString').callprop('slice', Js(2.0)))))
            var.put('tmpfile', var.get('path').callprop('join', var.get('os').callprop('tmpdir'), var.get('tmpfile')))
            var.put('d', var.get('Date').create(Js(1435410243862.0)))
            @Js
            def PyJs_anonymous_1911_(err, this, arguments, var=var):
                var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                var.registers(['err'])
                if var.get('err'):
                    return var.get('callback')(var.get('err'))
                @Js
                def PyJs_anonymous_1912_(err, fd, this, arguments, var=var):
                    var = Scope({'err':err, 'fd':fd, 'this':this, 'arguments':arguments}, var)
                    var.registers(['err', 'fd'])
                    if var.get('err'):
                        return var.get('callback')(var.get('err'))
                    @Js
                    def PyJs_anonymous_1913_(err, this, arguments, var=var):
                        var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                        var.registers(['err'])
                        if var.get('err'):
                            return var.get('callback')(var.get('err'))
                        @Js
                        def PyJs_anonymous_1914_(err, this, arguments, var=var):
                            var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                            var.registers(['err'])
                            if var.get('err'):
                                return var.get('callback')(var.get('err'))
                            @Js
                            def PyJs_anonymous_1915_(err, stats, this, arguments, var=var):
                                var = Scope({'err':err, 'stats':stats, 'this':this, 'arguments':arguments}, var)
                                var.registers(['err', 'stats'])
                                if var.get('err'):
                                    return var.get('callback')(var.get('err'))
                                var.get('callback')(var.get(u"null"), (var.get('stats').get('mtime')>Js(1435410243000.0)))
                            PyJs_anonymous_1915_._set_name('anonymous')
                            var.get('fs').callprop('stat', var.get('tmpfile'), PyJs_anonymous_1915_)
                        PyJs_anonymous_1914_._set_name('anonymous')
                        var.get('fs').callprop('close', var.get('fd'), PyJs_anonymous_1914_)
                    PyJs_anonymous_1913_._set_name('anonymous')
                    var.get('fs').callprop('futimes', var.get('fd'), var.get('d'), var.get('d'), PyJs_anonymous_1913_)
                PyJs_anonymous_1912_._set_name('anonymous')
                var.get('fs').callprop('open', var.get('tmpfile'), Js('r+'), PyJs_anonymous_1912_)
            PyJs_anonymous_1911_._set_name('anonymous')
            var.get('fs').callprop('writeFile', var.get('tmpfile'), Js('https://github.com/jprichardson/node-fs-extra/pull/141'), PyJs_anonymous_1911_)
        PyJsHoisted_hasMillisRes_.func_name = 'hasMillisRes'
        var.put('hasMillisRes', PyJsHoisted_hasMillisRes_)
        @Js
        def PyJsHoisted_timeRemoveMillis_(timestamp, this, arguments, var=var):
            var = Scope({'timestamp':timestamp, 'this':this, 'arguments':arguments}, var)
            var.registers(['timestamp'])
            if PyJsStrictEq(var.get('timestamp',throw=False).typeof(),Js('number')):
                return (var.get('Math').callprop('floor', (var.get('timestamp')/Js(1000.0)))*Js(1000.0))
            else:
                if var.get('timestamp').instanceof(var.get('Date')):
                    return var.get('Date').create((var.get('Math').callprop('floor', (var.get('timestamp').callprop('getTime')/Js(1000.0)))*Js(1000.0)))
                else:
                    PyJsTempException = JsToPyException(var.get('Error').create(Js('fs-extra: timeRemoveMillis() unknown parameter type')))
                    raise PyJsTempException
        PyJsHoisted_timeRemoveMillis_.func_name = 'timeRemoveMillis'
        var.put('timeRemoveMillis', PyJsHoisted_timeRemoveMillis_)
        @Js
        def PyJsHoisted_utimesMillis_(path, atime, mtime, callback, this, arguments, var=var):
            var = Scope({'path':path, 'atime':atime, 'mtime':mtime, 'callback':callback, 'this':this, 'arguments':arguments}, var)
            var.registers(['atime', 'mtime', 'callback', 'path'])
            @Js
            def PyJs_anonymous_1916_(err, fd, this, arguments, var=var):
                var = Scope({'err':err, 'fd':fd, 'this':this, 'arguments':arguments}, var)
                var.registers(['err', 'fd'])
                if var.get('err'):
                    return var.get('callback')(var.get('err'))
                @Js
                def PyJs_anonymous_1917_(futimesErr, this, arguments, var=var):
                    var = Scope({'futimesErr':futimesErr, 'this':this, 'arguments':arguments}, var)
                    var.registers(['futimesErr'])
                    @Js
                    def PyJs_anonymous_1918_(closeErr, this, arguments, var=var):
                        var = Scope({'closeErr':closeErr, 'this':this, 'arguments':arguments}, var)
                        var.registers(['closeErr'])
                        if var.get('callback'):
                            var.get('callback')((var.get('futimesErr') or var.get('closeErr')))
                    PyJs_anonymous_1918_._set_name('anonymous')
                    var.get('fs').callprop('close', var.get('fd'), PyJs_anonymous_1918_)
                PyJs_anonymous_1917_._set_name('anonymous')
                var.get('fs').callprop('futimes', var.get('fd'), var.get('atime'), var.get('mtime'), PyJs_anonymous_1917_)
            PyJs_anonymous_1916_._set_name('anonymous')
            var.get('fs').callprop('open', var.get('path'), Js('r+'), PyJs_anonymous_1916_)
        PyJsHoisted_utimesMillis_.func_name = 'utimesMillis'
        var.put('utimesMillis', PyJsHoisted_utimesMillis_)
        @Js
        def PyJsHoisted_utimesMillisSync_(path, atime, mtime, this, arguments, var=var):
            var = Scope({'path':path, 'atime':atime, 'mtime':mtime, 'this':this, 'arguments':arguments}, var)
            var.registers(['atime', 'fd', 'mtime', 'path'])
            var.put('fd', var.get('fs').callprop('openSync', var.get('path'), Js('r+')))
            var.get('fs').callprop('futimesSync', var.get('fd'), var.get('atime'), var.get('mtime'))
            return var.get('fs').callprop('closeSync', var.get('fd'))
        PyJsHoisted_utimesMillisSync_.func_name = 'utimesMillisSync'
        var.put('utimesMillisSync', PyJsHoisted_utimesMillisSync_)
        Js('use strict')
        var.put('fs', var.get('require')(Js('graceful-fs')))
        var.put('os', var.get('require')(Js('os')))
        var.put('path', var.get('require')(Js('path')))
        pass
        pass
        pass
        pass
        pass
        var.get('module').put('exports', Js({'hasMillisRes':var.get('hasMillisRes'),'hasMillisResSync':var.get('hasMillisResSync'),'timeRemoveMillis':var.get('timeRemoveMillis'),'utimesMillis':var.get('utimesMillis'),'utimesMillisSync':var.get('utimesMillisSync')}))
    PyJs_anonymous_1910_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1919_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'ERROR_MESSAGE', 'exports', 'slice', 'toStr', 'funcType', 'require'])
        Js('use strict')
        var.put('ERROR_MESSAGE', Js('Function.prototype.bind called on incompatible '))
        var.put('slice', var.get('Array').get('prototype').get('slice'))
        var.put('toStr', var.get('Object').get('prototype').get('toString'))
        var.put('funcType', Js('[object Function]'))
        @Js
        def PyJs_bind_1920_(that, this, arguments, var=var):
            var = Scope({'that':that, 'this':this, 'arguments':arguments, 'bind':PyJs_bind_1920_}, var)
            var.registers(['i', 'that', 'target', 'boundLength', 'Empty', 'binder', 'args', 'boundArgs', 'bound'])
            var.put('target', var.get(u"this"))
            if (PyJsStrictNeq(var.get('target',throw=False).typeof(),Js('function')) or PyJsStrictNeq(var.get('toStr').callprop('call', var.get('target')),var.get('funcType'))):
                PyJsTempException = JsToPyException(var.get('TypeError').create((var.get('ERROR_MESSAGE')+var.get('target'))))
                raise PyJsTempException
            var.put('args', var.get('slice').callprop('call', var.get('arguments'), Js(1.0)))
            pass
            @Js
            def PyJs_binder_1921_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'binder':PyJs_binder_1921_}, var)
                var.registers(['result'])
                if var.get(u"this").instanceof(var.get('bound')):
                    var.put('result', var.get('target').callprop('apply', var.get(u"this"), var.get('args').callprop('concat', var.get('slice').callprop('call', var.get('arguments')))))
                    if PyJsStrictEq(var.get('Object')(var.get('result')),var.get('result')):
                        return var.get('result')
                    return var.get(u"this")
                else:
                    return var.get('target').callprop('apply', var.get('that'), var.get('args').callprop('concat', var.get('slice').callprop('call', var.get('arguments'))))
            PyJs_binder_1921_._set_name('binder')
            var.put('binder', PyJs_binder_1921_)
            var.put('boundLength', var.get('Math').callprop('max', Js(0.0), (var.get('target').get('length')-var.get('args').get('length'))))
            var.put('boundArgs', Js([]))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('boundLength')):
                try:
                    var.get('boundArgs').callprop('push', (Js('$')+var.get('i')))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            var.put('bound', var.get('Function')(Js('binder'), ((Js('return function (')+var.get('boundArgs').callprop('join', Js(',')))+Js('){ return binder.apply(this,arguments); }')))(var.get('binder')))
            if var.get('target').get('prototype'):
                @Js
                def PyJs_Empty_1922_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'Empty':PyJs_Empty_1922_}, var)
                    var.registers([])
                    pass
                PyJs_Empty_1922_._set_name('Empty')
                var.put('Empty', PyJs_Empty_1922_)
                var.get('Empty').put('prototype', var.get('target').get('prototype'))
                var.get('bound').put('prototype', var.get('Empty').create())
                var.get('Empty').put('prototype', var.get(u"null"))
            return var.get('bound')
        PyJs_bind_1920_._set_name('bind')
        var.get('module').put('exports', PyJs_bind_1920_)
    PyJs_anonymous_1919_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1923_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['implementation', 'require', 'module', 'exports'])
        Js('use strict')
        var.put('implementation', var.get('require')(Js('./implementation')))
        var.get('module').put('exports', (var.get('Function').get('prototype').get('bind') or var.get('implementation')))
    PyJs_anonymous_1923_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1924_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'clone', 'exports'])
        @Js
        def PyJsHoisted_clone_(obj, this, arguments, var=var):
            var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
            var.registers(['copy', 'obj'])
            if (PyJsStrictEq(var.get('obj'),var.get(u"null")) or PyJsStrictNeq((Js('undefined') if PyJsStrictEq(var.get('obj',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('obj'))),Js('object'))):
                return var.get('obj')
            if var.get('obj').instanceof(var.get('Object')):
                var.put('copy', Js({'__proto__':var.get('obj').get('__proto__')}))
            else:
                var.put('copy', var.get('Object').callprop('create', var.get(u"null")))
            @Js
            def PyJs_anonymous_1925_(key, this, arguments, var=var):
                var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                var.registers(['key'])
                var.get('Object').callprop('defineProperty', var.get('copy'), var.get('key'), var.get('Object').callprop('getOwnPropertyDescriptor', var.get('obj'), var.get('key')))
            PyJs_anonymous_1925_._set_name('anonymous')
            var.get('Object').callprop('getOwnPropertyNames', var.get('obj')).callprop('forEach', PyJs_anonymous_1925_)
            return var.get('copy')
        PyJsHoisted_clone_.func_name = 'clone'
        var.put('clone', PyJsHoisted_clone_)
        Js('use strict')
        var.get('module').put('exports', var.get('clone'))
        pass
    PyJs_anonymous_1924_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1926_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_1927_(process, PyJsArg_676c6f62616c_, this, arguments, var=var):
            var = Scope({'process':process, 'global':PyJsArg_676c6f62616c_, 'this':this, 'arguments':arguments}, var)
            var.registers(['global', 'process'])
            @Js
            def PyJs_anonymous_1928_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['polyfills', 'retry', 'enqueue', 'noop', 'publishQueue', 'util', 'gracefulQueue', 'clone', 'debug', 'legacy', 'queue', 'fs', 'previousSymbol', 'patch'])
                @Js
                def PyJsHoisted_noop_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    pass
                PyJsHoisted_noop_.func_name = 'noop'
                var.put('noop', PyJsHoisted_noop_)
                @Js
                def PyJsHoisted_publishQueue_(context, queue, this, arguments, var=var):
                    var = Scope({'context':context, 'queue':queue, 'this':this, 'arguments':arguments}, var)
                    var.registers(['context', 'queue'])
                    @Js
                    def PyJs_get_1929_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_1929_}, var)
                        var.registers([])
                        return var.get('queue')
                    PyJs_get_1929_._set_name('get')
                    var.get('Object').callprop('defineProperty', var.get('context'), var.get('gracefulQueue'), Js({'get':PyJs_get_1929_}))
                PyJsHoisted_publishQueue_.func_name = 'publishQueue'
                var.put('publishQueue', PyJsHoisted_publishQueue_)
                @Js
                def PyJsHoisted_patch_(fs, this, arguments, var=var):
                    var = Scope({'fs':fs, 'this':this, 'arguments':arguments}, var)
                    var.registers(['FileReadStream', 'fs$readdir', 'WriteStream$open', 'FileWriteStream', 'fs$open', 'fs$appendFile', 'writeFile', 'go$readdir', 'ReadStream$open', 'ReadStream', 'readFile', 'fs$readFile', 'open', 'fs$writeFile', 'createWriteStream', 'legStreams', 'fs', 'fs$WriteStream', 'readdir', 'WriteStream', 'appendFile', 'createReadStream', 'fs$ReadStream'])
                    @Js
                    def PyJsHoisted_readFile_(path, options, cb, this, arguments, var=var):
                        var = Scope({'path':path, 'options':options, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                        var.registers(['options', 'cb', 'path', 'go$readFile'])
                        @Js
                        def PyJsHoistedNonPyName(path, options, cb, this, arguments, var=var):
                            var = Scope({'path':path, 'options':options, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                            var.registers(['options', 'cb', 'path'])
                            @Js
                            def PyJs_anonymous_1935_(err, this, arguments, var=var):
                                var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                                var.registers(['err'])
                                if (var.get('err') and (PyJsStrictEq(var.get('err').get('code'),Js('EMFILE')) or PyJsStrictEq(var.get('err').get('code'),Js('ENFILE')))):
                                    var.get('enqueue')(Js([var.get('go$readFile'), Js([var.get('path'), var.get('options'), var.get('cb')])]))
                                else:
                                    if PyJsStrictEq(var.get('cb',throw=False).typeof(),Js('function')):
                                        var.get('cb').callprop('apply', var.get(u"this"), var.get('arguments'))
                                    var.get('retry')()
                            PyJs_anonymous_1935_._set_name('anonymous')
                            return var.get('fs$readFile')(var.get('path'), var.get('options'), PyJs_anonymous_1935_)
                        PyJsHoistedNonPyName.func_name = 'go$readFile'
                        var.put('go$readFile', PyJsHoistedNonPyName)
                        if PyJsStrictEq(var.get('options',throw=False).typeof(),Js('function')):
                            PyJsComma(var.put('cb', var.get('options')),var.put('options', var.get(u"null")))
                        return var.get('go$readFile')(var.get('path'), var.get('options'), var.get('cb'))
                        pass
                    PyJsHoisted_readFile_.func_name = 'readFile'
                    var.put('readFile', PyJsHoisted_readFile_)
                    @Js
                    def PyJsHoisted_writeFile_(path, data, options, cb, this, arguments, var=var):
                        var = Scope({'path':path, 'data':data, 'options':options, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                        var.registers(['go$writeFile', 'path', 'cb', 'options', 'data'])
                        @Js
                        def PyJsHoistedNonPyName(path, data, options, cb, this, arguments, var=var):
                            var = Scope({'path':path, 'data':data, 'options':options, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                            var.registers(['options', 'data', 'cb', 'path'])
                            @Js
                            def PyJs_anonymous_1936_(err, this, arguments, var=var):
                                var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                                var.registers(['err'])
                                if (var.get('err') and (PyJsStrictEq(var.get('err').get('code'),Js('EMFILE')) or PyJsStrictEq(var.get('err').get('code'),Js('ENFILE')))):
                                    var.get('enqueue')(Js([var.get('go$writeFile'), Js([var.get('path'), var.get('data'), var.get('options'), var.get('cb')])]))
                                else:
                                    if PyJsStrictEq(var.get('cb',throw=False).typeof(),Js('function')):
                                        var.get('cb').callprop('apply', var.get(u"this"), var.get('arguments'))
                                    var.get('retry')()
                            PyJs_anonymous_1936_._set_name('anonymous')
                            return var.get('fs$writeFile')(var.get('path'), var.get('data'), var.get('options'), PyJs_anonymous_1936_)
                        PyJsHoistedNonPyName.func_name = 'go$writeFile'
                        var.put('go$writeFile', PyJsHoistedNonPyName)
                        if PyJsStrictEq(var.get('options',throw=False).typeof(),Js('function')):
                            PyJsComma(var.put('cb', var.get('options')),var.put('options', var.get(u"null")))
                        return var.get('go$writeFile')(var.get('path'), var.get('data'), var.get('options'), var.get('cb'))
                        pass
                    PyJsHoisted_writeFile_.func_name = 'writeFile'
                    var.put('writeFile', PyJsHoisted_writeFile_)
                    @Js
                    def PyJsHoisted_appendFile_(path, data, options, cb, this, arguments, var=var):
                        var = Scope({'path':path, 'data':data, 'options':options, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                        var.registers(['go$appendFile', 'path', 'cb', 'options', 'data'])
                        @Js
                        def PyJsHoistedNonPyName(path, data, options, cb, this, arguments, var=var):
                            var = Scope({'path':path, 'data':data, 'options':options, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                            var.registers(['options', 'data', 'cb', 'path'])
                            @Js
                            def PyJs_anonymous_1937_(err, this, arguments, var=var):
                                var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                                var.registers(['err'])
                                if (var.get('err') and (PyJsStrictEq(var.get('err').get('code'),Js('EMFILE')) or PyJsStrictEq(var.get('err').get('code'),Js('ENFILE')))):
                                    var.get('enqueue')(Js([var.get('go$appendFile'), Js([var.get('path'), var.get('data'), var.get('options'), var.get('cb')])]))
                                else:
                                    if PyJsStrictEq(var.get('cb',throw=False).typeof(),Js('function')):
                                        var.get('cb').callprop('apply', var.get(u"this"), var.get('arguments'))
                                    var.get('retry')()
                            PyJs_anonymous_1937_._set_name('anonymous')
                            return var.get('fs$appendFile')(var.get('path'), var.get('data'), var.get('options'), PyJs_anonymous_1937_)
                        PyJsHoistedNonPyName.func_name = 'go$appendFile'
                        var.put('go$appendFile', PyJsHoistedNonPyName)
                        if PyJsStrictEq(var.get('options',throw=False).typeof(),Js('function')):
                            PyJsComma(var.put('cb', var.get('options')),var.put('options', var.get(u"null")))
                        return var.get('go$appendFile')(var.get('path'), var.get('data'), var.get('options'), var.get('cb'))
                        pass
                    PyJsHoisted_appendFile_.func_name = 'appendFile'
                    var.put('appendFile', PyJsHoisted_appendFile_)
                    @Js
                    def PyJsHoisted_readdir_(path, options, cb, this, arguments, var=var):
                        var = Scope({'path':path, 'options':options, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                        var.registers(['path', 'go$readdir$cb', 'cb', 'args', 'options'])
                        @Js
                        def PyJsHoistedNonPyName(err, files, this, arguments, var=var):
                            var = Scope({'err':err, 'files':files, 'this':this, 'arguments':arguments}, var)
                            var.registers(['files', 'err'])
                            if (var.get('files') and var.get('files').get('sort')):
                                var.get('files').callprop('sort')
                            if (var.get('err') and (PyJsStrictEq(var.get('err').get('code'),Js('EMFILE')) or PyJsStrictEq(var.get('err').get('code'),Js('ENFILE')))):
                                var.get('enqueue')(Js([var.get('go$readdir'), Js([var.get('args')])]))
                            else:
                                if PyJsStrictEq(var.get('cb',throw=False).typeof(),Js('function')):
                                    var.get('cb').callprop('apply', var.get(u"this"), var.get('arguments'))
                                var.get('retry')()
                        PyJsHoistedNonPyName.func_name = 'go$readdir$cb'
                        var.put('go$readdir$cb', PyJsHoistedNonPyName)
                        var.put('args', Js([var.get('path')]))
                        if PyJsStrictNeq(var.get('options',throw=False).typeof(),Js('function')):
                            var.get('args').callprop('push', var.get('options'))
                        else:
                            var.put('cb', var.get('options'))
                        var.get('args').callprop('push', var.get('go$readdir$cb'))
                        return var.get('go$readdir')(var.get('args'))
                        pass
                    PyJsHoisted_readdir_.func_name = 'readdir'
                    var.put('readdir', PyJsHoisted_readdir_)
                    @Js
                    def PyJsHoistedNonPyName(args, this, arguments, var=var):
                        var = Scope({'args':args, 'this':this, 'arguments':arguments}, var)
                        var.registers(['args'])
                        return var.get('fs$readdir').callprop('apply', var.get('fs'), var.get('args'))
                    PyJsHoistedNonPyName.func_name = 'go$readdir'
                    var.put('go$readdir', PyJsHoistedNonPyName)
                    @Js
                    def PyJsHoisted_ReadStream_(path, options, this, arguments, var=var):
                        var = Scope({'path':path, 'options':options, 'this':this, 'arguments':arguments}, var)
                        var.registers(['options', 'path'])
                        if var.get(u"this").instanceof(var.get('ReadStream')):
                            return PyJsComma(var.get('fs$ReadStream').callprop('apply', var.get(u"this"), var.get('arguments')),var.get(u"this"))
                        else:
                            return var.get('ReadStream').callprop('apply', var.get('Object').callprop('create', var.get('ReadStream').get('prototype')), var.get('arguments'))
                    PyJsHoisted_ReadStream_.func_name = 'ReadStream'
                    var.put('ReadStream', PyJsHoisted_ReadStream_)
                    @Js
                    def PyJsHoistedNonPyName(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['that'])
                        var.put('that', var.get(u"this"))
                        @Js
                        def PyJs_anonymous_1946_(err, fd, this, arguments, var=var):
                            var = Scope({'err':err, 'fd':fd, 'this':this, 'arguments':arguments}, var)
                            var.registers(['err', 'fd'])
                            if var.get('err'):
                                if var.get('that').get('autoClose'):
                                    var.get('that').callprop('destroy')
                                var.get('that').callprop('emit', Js('error'), var.get('err'))
                            else:
                                var.get('that').put('fd', var.get('fd'))
                                var.get('that').callprop('emit', Js('open'), var.get('fd'))
                                var.get('that').callprop('read')
                        PyJs_anonymous_1946_._set_name('anonymous')
                        var.get('open')(var.get('that').get('path'), var.get('that').get('flags'), var.get('that').get('mode'), PyJs_anonymous_1946_)
                    PyJsHoistedNonPyName.func_name = 'ReadStream$open'
                    var.put('ReadStream$open', PyJsHoistedNonPyName)
                    @Js
                    def PyJsHoisted_WriteStream_(path, options, this, arguments, var=var):
                        var = Scope({'path':path, 'options':options, 'this':this, 'arguments':arguments}, var)
                        var.registers(['options', 'path'])
                        if var.get(u"this").instanceof(var.get('WriteStream')):
                            return PyJsComma(var.get('fs$WriteStream').callprop('apply', var.get(u"this"), var.get('arguments')),var.get(u"this"))
                        else:
                            return var.get('WriteStream').callprop('apply', var.get('Object').callprop('create', var.get('WriteStream').get('prototype')), var.get('arguments'))
                    PyJsHoisted_WriteStream_.func_name = 'WriteStream'
                    var.put('WriteStream', PyJsHoisted_WriteStream_)
                    @Js
                    def PyJsHoistedNonPyName(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['that'])
                        var.put('that', var.get(u"this"))
                        @Js
                        def PyJs_anonymous_1947_(err, fd, this, arguments, var=var):
                            var = Scope({'err':err, 'fd':fd, 'this':this, 'arguments':arguments}, var)
                            var.registers(['err', 'fd'])
                            if var.get('err'):
                                var.get('that').callprop('destroy')
                                var.get('that').callprop('emit', Js('error'), var.get('err'))
                            else:
                                var.get('that').put('fd', var.get('fd'))
                                var.get('that').callprop('emit', Js('open'), var.get('fd'))
                        PyJs_anonymous_1947_._set_name('anonymous')
                        var.get('open')(var.get('that').get('path'), var.get('that').get('flags'), var.get('that').get('mode'), PyJs_anonymous_1947_)
                    PyJsHoistedNonPyName.func_name = 'WriteStream$open'
                    var.put('WriteStream$open', PyJsHoistedNonPyName)
                    @Js
                    def PyJsHoisted_createReadStream_(path, options, this, arguments, var=var):
                        var = Scope({'path':path, 'options':options, 'this':this, 'arguments':arguments}, var)
                        var.registers(['options', 'path'])
                        return var.get('fs').get('ReadStream').create(var.get('path'), var.get('options'))
                    PyJsHoisted_createReadStream_.func_name = 'createReadStream'
                    var.put('createReadStream', PyJsHoisted_createReadStream_)
                    @Js
                    def PyJsHoisted_createWriteStream_(path, options, this, arguments, var=var):
                        var = Scope({'path':path, 'options':options, 'this':this, 'arguments':arguments}, var)
                        var.registers(['options', 'path'])
                        return var.get('fs').get('WriteStream').create(var.get('path'), var.get('options'))
                    PyJsHoisted_createWriteStream_.func_name = 'createWriteStream'
                    var.put('createWriteStream', PyJsHoisted_createWriteStream_)
                    @Js
                    def PyJsHoisted_open_(path, flags, mode, cb, this, arguments, var=var):
                        var = Scope({'path':path, 'flags':flags, 'mode':mode, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                        var.registers(['mode', 'flags', 'path', 'go$open', 'cb'])
                        @Js
                        def PyJsHoistedNonPyName(path, flags, mode, cb, this, arguments, var=var):
                            var = Scope({'path':path, 'flags':flags, 'mode':mode, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                            var.registers(['flags', 'mode', 'cb', 'path'])
                            @Js
                            def PyJs_anonymous_1948_(err, fd, this, arguments, var=var):
                                var = Scope({'err':err, 'fd':fd, 'this':this, 'arguments':arguments}, var)
                                var.registers(['err', 'fd'])
                                if (var.get('err') and (PyJsStrictEq(var.get('err').get('code'),Js('EMFILE')) or PyJsStrictEq(var.get('err').get('code'),Js('ENFILE')))):
                                    var.get('enqueue')(Js([var.get('go$open'), Js([var.get('path'), var.get('flags'), var.get('mode'), var.get('cb')])]))
                                else:
                                    if PyJsStrictEq(var.get('cb',throw=False).typeof(),Js('function')):
                                        var.get('cb').callprop('apply', var.get(u"this"), var.get('arguments'))
                                    var.get('retry')()
                            PyJs_anonymous_1948_._set_name('anonymous')
                            return var.get('fs$open')(var.get('path'), var.get('flags'), var.get('mode'), PyJs_anonymous_1948_)
                        PyJsHoistedNonPyName.func_name = 'go$open'
                        var.put('go$open', PyJsHoistedNonPyName)
                        if PyJsStrictEq(var.get('mode',throw=False).typeof(),Js('function')):
                            PyJsComma(var.put('cb', var.get('mode')),var.put('mode', var.get(u"null")))
                        return var.get('go$open')(var.get('path'), var.get('flags'), var.get('mode'), var.get('cb'))
                        pass
                    PyJsHoisted_open_.func_name = 'open'
                    var.put('open', PyJsHoisted_open_)
                    var.get('polyfills')(var.get('fs'))
                    var.get('fs').put('gracefulify', var.get('patch'))
                    var.get('fs').put('createReadStream', var.get('createReadStream'))
                    var.get('fs').put('createWriteStream', var.get('createWriteStream'))
                    var.put('fs$readFile', var.get('fs').get('readFile'))
                    var.get('fs').put('readFile', var.get('readFile'))
                    pass
                    var.put('fs$writeFile', var.get('fs').get('writeFile'))
                    var.get('fs').put('writeFile', var.get('writeFile'))
                    pass
                    var.put('fs$appendFile', var.get('fs').get('appendFile'))
                    if var.get('fs$appendFile'):
                        var.get('fs').put('appendFile', var.get('appendFile'))
                    pass
                    var.put('fs$readdir', var.get('fs').get('readdir'))
                    var.get('fs').put('readdir', var.get('readdir'))
                    pass
                    pass
                    if PyJsStrictEq(var.get('process').get('version').callprop('substr', Js(0.0), Js(4.0)),Js('v0.8')):
                        var.put('legStreams', var.get('legacy')(var.get('fs')))
                        var.put('ReadStream', var.get('legStreams').get('ReadStream'))
                        var.put('WriteStream', var.get('legStreams').get('WriteStream'))
                    var.put('fs$ReadStream', var.get('fs').get('ReadStream'))
                    if var.get('fs$ReadStream'):
                        var.get('ReadStream').put('prototype', var.get('Object').callprop('create', var.get('fs$ReadStream').get('prototype')))
                        var.get('ReadStream').get('prototype').put('open', var.get('ReadStream$open'))
                    var.put('fs$WriteStream', var.get('fs').get('WriteStream'))
                    if var.get('fs$WriteStream'):
                        var.get('WriteStream').put('prototype', var.get('Object').callprop('create', var.get('fs$WriteStream').get('prototype')))
                        var.get('WriteStream').get('prototype').put('open', var.get('WriteStream$open'))
                    @Js
                    def PyJs_get_1938_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_1938_}, var)
                        var.registers([])
                        return var.get('ReadStream')
                    PyJs_get_1938_._set_name('get')
                    @Js
                    def PyJs_set_1939_(val, this, arguments, var=var):
                        var = Scope({'val':val, 'this':this, 'arguments':arguments, 'set':PyJs_set_1939_}, var)
                        var.registers(['val'])
                        var.put('ReadStream', var.get('val'))
                    PyJs_set_1939_._set_name('set')
                    var.get('Object').callprop('defineProperty', var.get('fs'), Js('ReadStream'), Js({'get':PyJs_get_1938_,'set':PyJs_set_1939_,'enumerable':Js(True),'configurable':Js(True)}))
                    @Js
                    def PyJs_get_1940_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_1940_}, var)
                        var.registers([])
                        return var.get('WriteStream')
                    PyJs_get_1940_._set_name('get')
                    @Js
                    def PyJs_set_1941_(val, this, arguments, var=var):
                        var = Scope({'val':val, 'this':this, 'arguments':arguments, 'set':PyJs_set_1941_}, var)
                        var.registers(['val'])
                        var.put('WriteStream', var.get('val'))
                    PyJs_set_1941_._set_name('set')
                    var.get('Object').callprop('defineProperty', var.get('fs'), Js('WriteStream'), Js({'get':PyJs_get_1940_,'set':PyJs_set_1941_,'enumerable':Js(True),'configurable':Js(True)}))
                    var.put('FileReadStream', var.get('ReadStream'))
                    @Js
                    def PyJs_get_1942_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_1942_}, var)
                        var.registers([])
                        return var.get('FileReadStream')
                    PyJs_get_1942_._set_name('get')
                    @Js
                    def PyJs_set_1943_(val, this, arguments, var=var):
                        var = Scope({'val':val, 'this':this, 'arguments':arguments, 'set':PyJs_set_1943_}, var)
                        var.registers(['val'])
                        var.put('FileReadStream', var.get('val'))
                    PyJs_set_1943_._set_name('set')
                    var.get('Object').callprop('defineProperty', var.get('fs'), Js('FileReadStream'), Js({'get':PyJs_get_1942_,'set':PyJs_set_1943_,'enumerable':Js(True),'configurable':Js(True)}))
                    var.put('FileWriteStream', var.get('WriteStream'))
                    @Js
                    def PyJs_get_1944_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_1944_}, var)
                        var.registers([])
                        return var.get('FileWriteStream')
                    PyJs_get_1944_._set_name('get')
                    @Js
                    def PyJs_set_1945_(val, this, arguments, var=var):
                        var = Scope({'val':val, 'this':this, 'arguments':arguments, 'set':PyJs_set_1945_}, var)
                        var.registers(['val'])
                        var.put('FileWriteStream', var.get('val'))
                    PyJs_set_1945_._set_name('set')
                    var.get('Object').callprop('defineProperty', var.get('fs'), Js('FileWriteStream'), Js({'get':PyJs_get_1944_,'set':PyJs_set_1945_,'enumerable':Js(True),'configurable':Js(True)}))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    var.put('fs$open', var.get('fs').get('open'))
                    var.get('fs').put('open', var.get('open'))
                    pass
                    return var.get('fs')
                PyJsHoisted_patch_.func_name = 'patch'
                var.put('patch', PyJsHoisted_patch_)
                @Js
                def PyJsHoisted_enqueue_(elem, this, arguments, var=var):
                    var = Scope({'elem':elem, 'this':this, 'arguments':arguments}, var)
                    var.registers(['elem'])
                    var.get('debug')(Js('ENQUEUE'), var.get('elem').get('0').get('name'), var.get('elem').get('1'))
                    var.get('fs').get(var.get('gracefulQueue')).callprop('push', var.get('elem'))
                PyJsHoisted_enqueue_.func_name = 'enqueue'
                var.put('enqueue', PyJsHoisted_enqueue_)
                @Js
                def PyJsHoisted_retry_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers(['elem'])
                    var.put('elem', var.get('fs').get(var.get('gracefulQueue')).callprop('shift'))
                    if var.get('elem'):
                        var.get('debug')(Js('RETRY'), var.get('elem').get('0').get('name'), var.get('elem').get('1'))
                        var.get('elem').get('0').callprop('apply', var.get(u"null"), var.get('elem').get('1'))
                PyJsHoisted_retry_.func_name = 'retry'
                var.put('retry', PyJsHoisted_retry_)
                var.put('fs', var.get('require')(Js('fs')))
                var.put('polyfills', var.get('require')(Js('./polyfills.js')))
                var.put('legacy', var.get('require')(Js('./legacy-streams.js')))
                var.put('clone', var.get('require')(Js('./clone.js')))
                var.put('util', var.get('require')(Js('util')))
                pass
                pass
                if (PyJsStrictEq(var.get('Symbol',throw=False).typeof(),Js('function')) and PyJsStrictEq(var.get('Symbol').get('for').typeof(),Js('function'))):
                    var.put('gracefulQueue', var.get('Symbol').callprop('for', Js('graceful-fs.queue')))
                    var.put('previousSymbol', var.get('Symbol').callprop('for', Js('graceful-fs.previous')))
                else:
                    var.put('gracefulQueue', Js('___graceful-fs.queue'))
                    var.put('previousSymbol', Js('___graceful-fs.previous'))
                pass
                pass
                var.put('debug', var.get('noop'))
                if var.get('util').get('debuglog'):
                    var.put('debug', var.get('util').callprop('debuglog', Js('gfs4')))
                else:
                    if JsRegExp('/\\bgfs4\\b/i').callprop('test', (var.get('process').get('env').get('NODE_DEBUG') or Js(''))):
                        @Js
                        def PyJs_debug_1930_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments, 'debug':PyJs_debug_1930_}, var)
                            var.registers(['m'])
                            var.put('m', var.get('util').get('format').callprop('apply', var.get('util'), var.get('arguments')))
                            var.put('m', (Js('GFS4: ')+var.get('m').callprop('split', JsRegExp('/\\n/')).callprop('join', Js('\nGFS4: '))))
                            var.get('console').callprop('error', var.get('m'))
                        PyJs_debug_1930_._set_name('debug')
                        var.put('debug', PyJs_debug_1930_)
                if var.get('fs').get(var.get('gracefulQueue')).neg():
                    var.put('queue', (var.get('global').get(var.get('gracefulQueue')) or Js([])))
                    var.get('publishQueue')(var.get('fs'), var.get('queue'))
                    @Js
                    def PyJs_anonymous_1931_(PyJsArg_667324636c6f7365_, this, arguments, var=var):
                        var = Scope({'fs$close':PyJsArg_667324636c6f7365_, 'this':this, 'arguments':arguments}, var)
                        var.registers(['fs$close', 'close'])
                        @Js
                        def PyJsHoisted_close_(fd, cb, this, arguments, var=var):
                            var = Scope({'fd':fd, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                            var.registers(['fd', 'cb'])
                            @Js
                            def PyJs_anonymous_1932_(err, this, arguments, var=var):
                                var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                                var.registers(['err'])
                                if var.get('err').neg():
                                    var.get('retry')()
                                if PyJsStrictEq(var.get('cb',throw=False).typeof(),Js('function')):
                                    var.get('cb').callprop('apply', var.get(u"this"), var.get('arguments'))
                            PyJs_anonymous_1932_._set_name('anonymous')
                            return var.get('fs$close').callprop('call', var.get('fs'), var.get('fd'), PyJs_anonymous_1932_)
                        PyJsHoisted_close_.func_name = 'close'
                        var.put('close', PyJsHoisted_close_)
                        pass
                        var.get('Object').callprop('defineProperty', var.get('close'), var.get('previousSymbol'), Js({'value':var.get('fs$close')}))
                        return var.get('close')
                    PyJs_anonymous_1931_._set_name('anonymous')
                    var.get('fs').put('close', PyJs_anonymous_1931_(var.get('fs').get('close')))
                    @Js
                    def PyJs_anonymous_1933_(PyJsArg_667324636c6f736553796e63_, this, arguments, var=var):
                        var = Scope({'fs$closeSync':PyJsArg_667324636c6f736553796e63_, 'this':this, 'arguments':arguments}, var)
                        var.registers(['fs$closeSync', 'closeSync'])
                        @Js
                        def PyJsHoisted_closeSync_(fd, this, arguments, var=var):
                            var = Scope({'fd':fd, 'this':this, 'arguments':arguments}, var)
                            var.registers(['fd'])
                            var.get('fs$closeSync').callprop('apply', var.get('fs'), var.get('arguments'))
                            var.get('retry')()
                        PyJsHoisted_closeSync_.func_name = 'closeSync'
                        var.put('closeSync', PyJsHoisted_closeSync_)
                        pass
                        var.get('Object').callprop('defineProperty', var.get('closeSync'), var.get('previousSymbol'), Js({'value':var.get('fs$closeSync')}))
                        return var.get('closeSync')
                    PyJs_anonymous_1933_._set_name('anonymous')
                    var.get('fs').put('closeSync', PyJs_anonymous_1933_(var.get('fs').get('closeSync')))
                    if JsRegExp('/\\bgfs4\\b/i').callprop('test', (var.get('process').get('env').get('NODE_DEBUG') or Js(''))):
                        @Js
                        def PyJs_anonymous_1934_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers([])
                            var.get('debug')(var.get('fs').get(var.get('gracefulQueue')))
                            var.get('require')(Js('assert')).callprop('equal', var.get('fs').get(var.get('gracefulQueue')).get('length'), Js(0.0))
                        PyJs_anonymous_1934_._set_name('anonymous')
                        var.get('process').callprop('on', Js('exit'), PyJs_anonymous_1934_)
                if var.get('global').get(var.get('gracefulQueue')).neg():
                    var.get('publishQueue')(var.get('global'), var.get('fs').get(var.get('gracefulQueue')))
                var.get('module').put('exports', var.get('patch')(var.get('clone')(var.get('fs'))))
                if (var.get('process').get('env').get('TEST_GRACEFUL_FS_GLOBAL_PATCH') and var.get('fs').get('__patched').neg()):
                    var.get('module').put('exports', var.get('patch')(var.get('fs')))
                    var.get('fs').put('__patched', Js(True))
                pass
                pass
                pass
            PyJs_anonymous_1928_._set_name('anonymous')
            PyJs_anonymous_1928_.callprop('call', var.get(u"this"))
        PyJs_anonymous_1927_._set_name('anonymous')
        PyJs_anonymous_1927_.callprop('call', var.get(u"this"), var.get('require')(Js('_process')), (var.get('global') if PyJsStrictNeq(var.get('global',throw=False).typeof(),Js('undefined')) else (var.get('self') if PyJsStrictNeq(var.get('self',throw=False).typeof(),Js('undefined')) else (var.get('window') if PyJsStrictNeq(var.get('window',throw=False).typeof(),Js('undefined')) else Js({})))))
    PyJs_anonymous_1926_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1949_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_1950_(process, this, arguments, var=var):
            var = Scope({'process':process, 'this':this, 'arguments':arguments}, var)
            var.registers(['process'])
            @Js
            def PyJs_anonymous_1951_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['Stream', 'legacy'])
                @Js
                def PyJsHoisted_legacy_(fs, this, arguments, var=var):
                    var = Scope({'fs':fs, 'this':this, 'arguments':arguments}, var)
                    var.registers(['fs', 'ReadStream', 'WriteStream'])
                    @Js
                    def PyJsHoisted_ReadStream_(path, options, this, arguments, var=var):
                        var = Scope({'path':path, 'options':options, 'this':this, 'arguments':arguments}, var)
                        var.registers(['self', 'path', 'key', 'options', 'length', 'keys', 'index'])
                        if var.get(u"this").instanceof(var.get('ReadStream')).neg():
                            return var.get('ReadStream').create(var.get('path'), var.get('options'))
                        var.get('Stream').callprop('call', var.get(u"this"))
                        var.put('self', var.get(u"this"))
                        var.get(u"this").put('path', var.get('path'))
                        var.get(u"this").put('fd', var.get(u"null"))
                        var.get(u"this").put('readable', Js(True))
                        var.get(u"this").put('paused', Js(False))
                        var.get(u"this").put('flags', Js('r'))
                        var.get(u"this").put('mode', Js(438.0))
                        var.get(u"this").put('bufferSize', (Js(64.0)*Js(1024.0)))
                        var.put('options', (var.get('options') or Js({})))
                        var.put('keys', var.get('Object').callprop('keys', var.get('options')))
                        #for JS loop
                        var.put('index', Js(0.0))
                        var.put('length', var.get('keys').get('length'))
                        while (var.get('index')<var.get('length')):
                            try:
                                var.put('key', var.get('keys').get(var.get('index')))
                                var.get(u"this").put(var.get('key'), var.get('options').get(var.get('key')))
                            finally:
                                    (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))
                        if var.get(u"this").get('encoding'):
                            var.get(u"this").callprop('setEncoding', var.get(u"this").get('encoding'))
                        if PyJsStrictNeq(var.get(u"this").get('start'),var.get('undefined')):
                            if PyJsStrictNeq(Js('number'),var.get(u"this").get('start').typeof()):
                                PyJsTempException = JsToPyException(var.get('TypeError')(Js('start must be a Number')))
                                raise PyJsTempException
                            if PyJsStrictEq(var.get(u"this").get('end'),var.get('undefined')):
                                var.get(u"this").put('end', var.get('Infinity'))
                            else:
                                if PyJsStrictNeq(Js('number'),var.get(u"this").get('end').typeof()):
                                    PyJsTempException = JsToPyException(var.get('TypeError')(Js('end must be a Number')))
                                    raise PyJsTempException
                            if (var.get(u"this").get('start')>var.get(u"this").get('end')):
                                PyJsTempException = JsToPyException(var.get('Error').create(Js('start must be <= end')))
                                raise PyJsTempException
                            var.get(u"this").put('pos', var.get(u"this").get('start'))
                        if PyJsStrictNeq(var.get(u"this").get('fd'),var.get(u"null")):
                            @Js
                            def PyJs_anonymous_1952_(this, arguments, var=var):
                                var = Scope({'this':this, 'arguments':arguments}, var)
                                var.registers([])
                                var.get('self').callprop('_read')
                            PyJs_anonymous_1952_._set_name('anonymous')
                            var.get('process').callprop('nextTick', PyJs_anonymous_1952_)
                            return var.get('undefined')
                        @Js
                        def PyJs_anonymous_1953_(err, fd, this, arguments, var=var):
                            var = Scope({'err':err, 'fd':fd, 'this':this, 'arguments':arguments}, var)
                            var.registers(['err', 'fd'])
                            if var.get('err'):
                                var.get('self').callprop('emit', Js('error'), var.get('err'))
                                var.get('self').put('readable', Js(False))
                                return var.get('undefined')
                            var.get('self').put('fd', var.get('fd'))
                            var.get('self').callprop('emit', Js('open'), var.get('fd'))
                            var.get('self').callprop('_read')
                        PyJs_anonymous_1953_._set_name('anonymous')
                        var.get('fs').callprop('open', var.get(u"this").get('path'), var.get(u"this").get('flags'), var.get(u"this").get('mode'), PyJs_anonymous_1953_)
                    PyJsHoisted_ReadStream_.func_name = 'ReadStream'
                    var.put('ReadStream', PyJsHoisted_ReadStream_)
                    @Js
                    def PyJsHoisted_WriteStream_(path, options, this, arguments, var=var):
                        var = Scope({'path':path, 'options':options, 'this':this, 'arguments':arguments}, var)
                        var.registers(['path', 'key', 'options', 'length', 'keys', 'index'])
                        if var.get(u"this").instanceof(var.get('WriteStream')).neg():
                            return var.get('WriteStream').create(var.get('path'), var.get('options'))
                        var.get('Stream').callprop('call', var.get(u"this"))
                        var.get(u"this").put('path', var.get('path'))
                        var.get(u"this").put('fd', var.get(u"null"))
                        var.get(u"this").put('writable', Js(True))
                        var.get(u"this").put('flags', Js('w'))
                        var.get(u"this").put('encoding', Js('binary'))
                        var.get(u"this").put('mode', Js(438.0))
                        var.get(u"this").put('bytesWritten', Js(0.0))
                        var.put('options', (var.get('options') or Js({})))
                        var.put('keys', var.get('Object').callprop('keys', var.get('options')))
                        #for JS loop
                        var.put('index', Js(0.0))
                        var.put('length', var.get('keys').get('length'))
                        while (var.get('index')<var.get('length')):
                            try:
                                var.put('key', var.get('keys').get(var.get('index')))
                                var.get(u"this").put(var.get('key'), var.get('options').get(var.get('key')))
                            finally:
                                    (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))
                        if PyJsStrictNeq(var.get(u"this").get('start'),var.get('undefined')):
                            if PyJsStrictNeq(Js('number'),var.get(u"this").get('start').typeof()):
                                PyJsTempException = JsToPyException(var.get('TypeError')(Js('start must be a Number')))
                                raise PyJsTempException
                            if (var.get(u"this").get('start')<Js(0.0)):
                                PyJsTempException = JsToPyException(var.get('Error').create(Js('start must be >= zero')))
                                raise PyJsTempException
                            var.get(u"this").put('pos', var.get(u"this").get('start'))
                        var.get(u"this").put('busy', Js(False))
                        var.get(u"this").put('_queue', Js([]))
                        if PyJsStrictEq(var.get(u"this").get('fd'),var.get(u"null")):
                            var.get(u"this").put('_open', var.get('fs').get('open'))
                            var.get(u"this").get('_queue').callprop('push', Js([var.get(u"this").get('_open'), var.get(u"this").get('path'), var.get(u"this").get('flags'), var.get(u"this").get('mode'), var.get('undefined')]))
                            var.get(u"this").callprop('flush')
                    PyJsHoisted_WriteStream_.func_name = 'WriteStream'
                    var.put('WriteStream', PyJsHoisted_WriteStream_)
                    return Js({'ReadStream':var.get('ReadStream'),'WriteStream':var.get('WriteStream')})
                    pass
                    pass
                PyJsHoisted_legacy_.func_name = 'legacy'
                var.put('legacy', PyJsHoisted_legacy_)
                var.put('Stream', var.get('require')(Js('stream')).get('Stream'))
                var.get('module').put('exports', var.get('legacy'))
                pass
            PyJs_anonymous_1951_._set_name('anonymous')
            PyJs_anonymous_1951_.callprop('call', var.get(u"this"))
        PyJs_anonymous_1950_._set_name('anonymous')
        PyJs_anonymous_1950_.callprop('call', var.get(u"this"), var.get('require')(Js('_process')))
    PyJs_anonymous_1949_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1954_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_1955_(process, this, arguments, var=var):
            var = Scope({'process':process, 'this':this, 'arguments':arguments}, var)
            var.registers(['process'])
            @Js
            def PyJs_anonymous_1956_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['chdir', 'origCwd', 'cwd', 'constants', 'platform', 'patch'])
                @Js
                def PyJsHoisted_patch_(fs, this, arguments, var=var):
                    var = Scope({'fs':fs, 'this':this, 'arguments':arguments}, var)
                    var.registers(['statFixSync', 'patchLutimes', 'chownFixSync', 'chownErOk', 'chmodFixSync', 'patchLchmod', 'chmodFix', 'statFix', 'fs', 'chownFix'])
                    @Js
                    def PyJsHoisted_patchLchmod_(fs, this, arguments, var=var):
                        var = Scope({'fs':fs, 'this':this, 'arguments':arguments}, var)
                        var.registers(['fs'])
                        @Js
                        def PyJs_anonymous_1972_(path, mode, callback, this, arguments, var=var):
                            var = Scope({'path':path, 'mode':mode, 'callback':callback, 'this':this, 'arguments':arguments}, var)
                            var.registers(['callback', 'mode', 'path'])
                            @Js
                            def PyJs_anonymous_1973_(err, fd, this, arguments, var=var):
                                var = Scope({'err':err, 'fd':fd, 'this':this, 'arguments':arguments}, var)
                                var.registers(['err', 'fd'])
                                if var.get('err'):
                                    if var.get('callback'):
                                        var.get('callback')(var.get('err'))
                                    return var.get('undefined')
                                @Js
                                def PyJs_anonymous_1974_(err, this, arguments, var=var):
                                    var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['err'])
                                    @Js
                                    def PyJs_anonymous_1975_(err2, this, arguments, var=var):
                                        var = Scope({'err2':err2, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['err2'])
                                        if var.get('callback'):
                                            var.get('callback')((var.get('err') or var.get('err2')))
                                    PyJs_anonymous_1975_._set_name('anonymous')
                                    var.get('fs').callprop('close', var.get('fd'), PyJs_anonymous_1975_)
                                PyJs_anonymous_1974_._set_name('anonymous')
                                var.get('fs').callprop('fchmod', var.get('fd'), var.get('mode'), PyJs_anonymous_1974_)
                            PyJs_anonymous_1973_._set_name('anonymous')
                            var.get('fs').callprop('open', var.get('path'), (var.get('constants').get('O_WRONLY')|var.get('constants').get('O_SYMLINK')), var.get('mode'), PyJs_anonymous_1973_)
                        PyJs_anonymous_1972_._set_name('anonymous')
                        var.get('fs').put('lchmod', PyJs_anonymous_1972_)
                        @Js
                        def PyJs_anonymous_1976_(path, mode, this, arguments, var=var):
                            var = Scope({'path':path, 'mode':mode, 'this':this, 'arguments':arguments}, var)
                            var.registers(['threw', 'mode', 'path', 'ret', 'fd'])
                            var.put('fd', var.get('fs').callprop('openSync', var.get('path'), (var.get('constants').get('O_WRONLY')|var.get('constants').get('O_SYMLINK')), var.get('mode')))
                            var.put('threw', Js(True))
                            pass
                            try:
                                var.put('ret', var.get('fs').callprop('fchmodSync', var.get('fd'), var.get('mode')))
                                var.put('threw', Js(False))
                            finally:
                                if var.get('threw'):
                                    try:
                                        var.get('fs').callprop('closeSync', var.get('fd'))
                                    except PyJsException as PyJsTempException:
                                        PyJsHolder_6572_49085312 = var.own.get('er')
                                        var.force_own_put('er', PyExceptionToJs(PyJsTempException))
                                        try:
                                            pass
                                        finally:
                                            if PyJsHolder_6572_49085312 is not None:
                                                var.own['er'] = PyJsHolder_6572_49085312
                                            else:
                                                del var.own['er']
                                            del PyJsHolder_6572_49085312
                                else:
                                    var.get('fs').callprop('closeSync', var.get('fd'))
                            return var.get('ret')
                        PyJs_anonymous_1976_._set_name('anonymous')
                        var.get('fs').put('lchmodSync', PyJs_anonymous_1976_)
                    PyJsHoisted_patchLchmod_.func_name = 'patchLchmod'
                    var.put('patchLchmod', PyJsHoisted_patchLchmod_)
                    @Js
                    def PyJsHoisted_patchLutimes_(fs, this, arguments, var=var):
                        var = Scope({'fs':fs, 'this':this, 'arguments':arguments}, var)
                        var.registers(['fs'])
                        if var.get('constants').callprop('hasOwnProperty', Js('O_SYMLINK')):
                            @Js
                            def PyJs_anonymous_1977_(path, at, mt, cb, this, arguments, var=var):
                                var = Scope({'path':path, 'at':at, 'mt':mt, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                                var.registers(['at', 'mt', 'cb', 'path'])
                                @Js
                                def PyJs_anonymous_1978_(er, fd, this, arguments, var=var):
                                    var = Scope({'er':er, 'fd':fd, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['fd', 'er'])
                                    if var.get('er'):
                                        if var.get('cb'):
                                            var.get('cb')(var.get('er'))
                                        return var.get('undefined')
                                    @Js
                                    def PyJs_anonymous_1979_(er, this, arguments, var=var):
                                        var = Scope({'er':er, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['er'])
                                        @Js
                                        def PyJs_anonymous_1980_(er2, this, arguments, var=var):
                                            var = Scope({'er2':er2, 'this':this, 'arguments':arguments}, var)
                                            var.registers(['er2'])
                                            if var.get('cb'):
                                                var.get('cb')((var.get('er') or var.get('er2')))
                                        PyJs_anonymous_1980_._set_name('anonymous')
                                        var.get('fs').callprop('close', var.get('fd'), PyJs_anonymous_1980_)
                                    PyJs_anonymous_1979_._set_name('anonymous')
                                    var.get('fs').callprop('futimes', var.get('fd'), var.get('at'), var.get('mt'), PyJs_anonymous_1979_)
                                PyJs_anonymous_1978_._set_name('anonymous')
                                var.get('fs').callprop('open', var.get('path'), var.get('constants').get('O_SYMLINK'), PyJs_anonymous_1978_)
                            PyJs_anonymous_1977_._set_name('anonymous')
                            var.get('fs').put('lutimes', PyJs_anonymous_1977_)
                            @Js
                            def PyJs_anonymous_1981_(path, at, mt, this, arguments, var=var):
                                var = Scope({'path':path, 'at':at, 'mt':mt, 'this':this, 'arguments':arguments}, var)
                                var.registers(['threw', 'mt', 'path', 'ret', 'at', 'fd'])
                                var.put('fd', var.get('fs').callprop('openSync', var.get('path'), var.get('constants').get('O_SYMLINK')))
                                pass
                                var.put('threw', Js(True))
                                try:
                                    var.put('ret', var.get('fs').callprop('futimesSync', var.get('fd'), var.get('at'), var.get('mt')))
                                    var.put('threw', Js(False))
                                finally:
                                    if var.get('threw'):
                                        try:
                                            var.get('fs').callprop('closeSync', var.get('fd'))
                                        except PyJsException as PyJsTempException:
                                            PyJsHolder_6572_83758955 = var.own.get('er')
                                            var.force_own_put('er', PyExceptionToJs(PyJsTempException))
                                            try:
                                                pass
                                            finally:
                                                if PyJsHolder_6572_83758955 is not None:
                                                    var.own['er'] = PyJsHolder_6572_83758955
                                                else:
                                                    del var.own['er']
                                                del PyJsHolder_6572_83758955
                                    else:
                                        var.get('fs').callprop('closeSync', var.get('fd'))
                                return var.get('ret')
                            PyJs_anonymous_1981_._set_name('anonymous')
                            var.get('fs').put('lutimesSync', PyJs_anonymous_1981_)
                        else:
                            @Js
                            def PyJs_anonymous_1982_(_a, _b, _c, cb, this, arguments, var=var):
                                var = Scope({'_a':_a, '_b':_b, '_c':_c, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                                var.registers(['_c', '_b', 'cb', '_a'])
                                if var.get('cb'):
                                    var.get('process').callprop('nextTick', var.get('cb'))
                            PyJs_anonymous_1982_._set_name('anonymous')
                            var.get('fs').put('lutimes', PyJs_anonymous_1982_)
                            @Js
                            def PyJs_anonymous_1983_(this, arguments, var=var):
                                var = Scope({'this':this, 'arguments':arguments}, var)
                                var.registers([])
                                pass
                            PyJs_anonymous_1983_._set_name('anonymous')
                            var.get('fs').put('lutimesSync', PyJs_anonymous_1983_)
                    PyJsHoisted_patchLutimes_.func_name = 'patchLutimes'
                    var.put('patchLutimes', PyJsHoisted_patchLutimes_)
                    @Js
                    def PyJsHoisted_chmodFix_(orig, this, arguments, var=var):
                        var = Scope({'orig':orig, 'this':this, 'arguments':arguments}, var)
                        var.registers(['orig'])
                        if var.get('orig').neg():
                            return var.get('orig')
                        @Js
                        def PyJs_anonymous_1984_(target, mode, cb, this, arguments, var=var):
                            var = Scope({'target':target, 'mode':mode, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                            var.registers(['target', 'mode', 'cb'])
                            @Js
                            def PyJs_anonymous_1985_(er, this, arguments, var=var):
                                var = Scope({'er':er, 'this':this, 'arguments':arguments}, var)
                                var.registers(['er'])
                                if var.get('chownErOk')(var.get('er')):
                                    var.put('er', var.get(u"null"))
                                if var.get('cb'):
                                    var.get('cb').callprop('apply', var.get(u"this"), var.get('arguments'))
                            PyJs_anonymous_1985_._set_name('anonymous')
                            return var.get('orig').callprop('call', var.get('fs'), var.get('target'), var.get('mode'), PyJs_anonymous_1985_)
                        PyJs_anonymous_1984_._set_name('anonymous')
                        return PyJs_anonymous_1984_
                    PyJsHoisted_chmodFix_.func_name = 'chmodFix'
                    var.put('chmodFix', PyJsHoisted_chmodFix_)
                    @Js
                    def PyJsHoisted_chmodFixSync_(orig, this, arguments, var=var):
                        var = Scope({'orig':orig, 'this':this, 'arguments':arguments}, var)
                        var.registers(['orig'])
                        if var.get('orig').neg():
                            return var.get('orig')
                        @Js
                        def PyJs_anonymous_1986_(target, mode, this, arguments, var=var):
                            var = Scope({'target':target, 'mode':mode, 'this':this, 'arguments':arguments}, var)
                            var.registers(['target', 'mode'])
                            try:
                                return var.get('orig').callprop('call', var.get('fs'), var.get('target'), var.get('mode'))
                            except PyJsException as PyJsTempException:
                                PyJsHolder_6572_89329453 = var.own.get('er')
                                var.force_own_put('er', PyExceptionToJs(PyJsTempException))
                                try:
                                    if var.get('chownErOk')(var.get('er')).neg():
                                        PyJsTempException = JsToPyException(var.get('er'))
                                        raise PyJsTempException
                                finally:
                                    if PyJsHolder_6572_89329453 is not None:
                                        var.own['er'] = PyJsHolder_6572_89329453
                                    else:
                                        del var.own['er']
                                    del PyJsHolder_6572_89329453
                        PyJs_anonymous_1986_._set_name('anonymous')
                        return PyJs_anonymous_1986_
                    PyJsHoisted_chmodFixSync_.func_name = 'chmodFixSync'
                    var.put('chmodFixSync', PyJsHoisted_chmodFixSync_)
                    @Js
                    def PyJsHoisted_chownFix_(orig, this, arguments, var=var):
                        var = Scope({'orig':orig, 'this':this, 'arguments':arguments}, var)
                        var.registers(['orig'])
                        if var.get('orig').neg():
                            return var.get('orig')
                        @Js
                        def PyJs_anonymous_1987_(target, uid, gid, cb, this, arguments, var=var):
                            var = Scope({'target':target, 'uid':uid, 'gid':gid, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                            var.registers(['target', 'cb', 'gid', 'uid'])
                            @Js
                            def PyJs_anonymous_1988_(er, this, arguments, var=var):
                                var = Scope({'er':er, 'this':this, 'arguments':arguments}, var)
                                var.registers(['er'])
                                if var.get('chownErOk')(var.get('er')):
                                    var.put('er', var.get(u"null"))
                                if var.get('cb'):
                                    var.get('cb').callprop('apply', var.get(u"this"), var.get('arguments'))
                            PyJs_anonymous_1988_._set_name('anonymous')
                            return var.get('orig').callprop('call', var.get('fs'), var.get('target'), var.get('uid'), var.get('gid'), PyJs_anonymous_1988_)
                        PyJs_anonymous_1987_._set_name('anonymous')
                        return PyJs_anonymous_1987_
                    PyJsHoisted_chownFix_.func_name = 'chownFix'
                    var.put('chownFix', PyJsHoisted_chownFix_)
                    @Js
                    def PyJsHoisted_chownFixSync_(orig, this, arguments, var=var):
                        var = Scope({'orig':orig, 'this':this, 'arguments':arguments}, var)
                        var.registers(['orig'])
                        if var.get('orig').neg():
                            return var.get('orig')
                        @Js
                        def PyJs_anonymous_1989_(target, uid, gid, this, arguments, var=var):
                            var = Scope({'target':target, 'uid':uid, 'gid':gid, 'this':this, 'arguments':arguments}, var)
                            var.registers(['target', 'gid', 'uid'])
                            try:
                                return var.get('orig').callprop('call', var.get('fs'), var.get('target'), var.get('uid'), var.get('gid'))
                            except PyJsException as PyJsTempException:
                                PyJsHolder_6572_65438378 = var.own.get('er')
                                var.force_own_put('er', PyExceptionToJs(PyJsTempException))
                                try:
                                    if var.get('chownErOk')(var.get('er')).neg():
                                        PyJsTempException = JsToPyException(var.get('er'))
                                        raise PyJsTempException
                                finally:
                                    if PyJsHolder_6572_65438378 is not None:
                                        var.own['er'] = PyJsHolder_6572_65438378
                                    else:
                                        del var.own['er']
                                    del PyJsHolder_6572_65438378
                        PyJs_anonymous_1989_._set_name('anonymous')
                        return PyJs_anonymous_1989_
                    PyJsHoisted_chownFixSync_.func_name = 'chownFixSync'
                    var.put('chownFixSync', PyJsHoisted_chownFixSync_)
                    @Js
                    def PyJsHoisted_statFix_(orig, this, arguments, var=var):
                        var = Scope({'orig':orig, 'this':this, 'arguments':arguments}, var)
                        var.registers(['orig'])
                        if var.get('orig').neg():
                            return var.get('orig')
                        @Js
                        def PyJs_anonymous_1990_(target, options, cb, this, arguments, var=var):
                            var = Scope({'target':target, 'options':options, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                            var.registers(['options', 'target', 'callback', 'cb'])
                            @Js
                            def PyJsHoisted_callback_(er, stats, this, arguments, var=var):
                                var = Scope({'er':er, 'stats':stats, 'this':this, 'arguments':arguments}, var)
                                var.registers(['er', 'stats'])
                                if var.get('stats'):
                                    if (var.get('stats').get('uid')<Js(0.0)):
                                        var.get('stats').put('uid', Js(4294967296), '+')
                                    if (var.get('stats').get('gid')<Js(0.0)):
                                        var.get('stats').put('gid', Js(4294967296), '+')
                                if var.get('cb'):
                                    var.get('cb').callprop('apply', var.get(u"this"), var.get('arguments'))
                            PyJsHoisted_callback_.func_name = 'callback'
                            var.put('callback', PyJsHoisted_callback_)
                            if PyJsStrictEq(var.get('options',throw=False).typeof(),Js('function')):
                                var.put('cb', var.get('options'))
                                var.put('options', var.get(u"null"))
                            pass
                            return (var.get('orig').callprop('call', var.get('fs'), var.get('target'), var.get('options'), var.get('callback')) if var.get('options') else var.get('orig').callprop('call', var.get('fs'), var.get('target'), var.get('callback')))
                        PyJs_anonymous_1990_._set_name('anonymous')
                        return PyJs_anonymous_1990_
                    PyJsHoisted_statFix_.func_name = 'statFix'
                    var.put('statFix', PyJsHoisted_statFix_)
                    @Js
                    def PyJsHoisted_statFixSync_(orig, this, arguments, var=var):
                        var = Scope({'orig':orig, 'this':this, 'arguments':arguments}, var)
                        var.registers(['orig'])
                        if var.get('orig').neg():
                            return var.get('orig')
                        @Js
                        def PyJs_anonymous_1991_(target, options, this, arguments, var=var):
                            var = Scope({'target':target, 'options':options, 'this':this, 'arguments':arguments}, var)
                            var.registers(['options', 'target', 'stats'])
                            var.put('stats', (var.get('orig').callprop('call', var.get('fs'), var.get('target'), var.get('options')) if var.get('options') else var.get('orig').callprop('call', var.get('fs'), var.get('target'))))
                            if (var.get('stats').get('uid')<Js(0.0)):
                                var.get('stats').put('uid', Js(4294967296), '+')
                            if (var.get('stats').get('gid')<Js(0.0)):
                                var.get('stats').put('gid', Js(4294967296), '+')
                            return var.get('stats')
                        PyJs_anonymous_1991_._set_name('anonymous')
                        return PyJs_anonymous_1991_
                    PyJsHoisted_statFixSync_.func_name = 'statFixSync'
                    var.put('statFixSync', PyJsHoisted_statFixSync_)
                    @Js
                    def PyJsHoisted_chownErOk_(er, this, arguments, var=var):
                        var = Scope({'er':er, 'this':this, 'arguments':arguments}, var)
                        var.registers(['nonroot', 'er'])
                        if var.get('er').neg():
                            return Js(True)
                        if PyJsStrictEq(var.get('er').get('code'),Js('ENOSYS')):
                            return Js(True)
                        var.put('nonroot', (var.get('process').get('getuid').neg() or PyJsStrictNeq(var.get('process').callprop('getuid'),Js(0.0))))
                        if var.get('nonroot'):
                            if (PyJsStrictEq(var.get('er').get('code'),Js('EINVAL')) or PyJsStrictEq(var.get('er').get('code'),Js('EPERM'))):
                                return Js(True)
                        return Js(False)
                    PyJsHoisted_chownErOk_.func_name = 'chownErOk'
                    var.put('chownErOk', PyJsHoisted_chownErOk_)
                    if (var.get('constants').callprop('hasOwnProperty', Js('O_SYMLINK')) and var.get('process').get('version').callprop('match', JsRegExp('/^v0\\.6\\.[0-2]|^v0\\.5\\./'))):
                        var.get('patchLchmod')(var.get('fs'))
                    if var.get('fs').get('lutimes').neg():
                        var.get('patchLutimes')(var.get('fs'))
                    var.get('fs').put('chown', var.get('chownFix')(var.get('fs').get('chown')))
                    var.get('fs').put('fchown', var.get('chownFix')(var.get('fs').get('fchown')))
                    var.get('fs').put('lchown', var.get('chownFix')(var.get('fs').get('lchown')))
                    var.get('fs').put('chmod', var.get('chmodFix')(var.get('fs').get('chmod')))
                    var.get('fs').put('fchmod', var.get('chmodFix')(var.get('fs').get('fchmod')))
                    var.get('fs').put('lchmod', var.get('chmodFix')(var.get('fs').get('lchmod')))
                    var.get('fs').put('chownSync', var.get('chownFixSync')(var.get('fs').get('chownSync')))
                    var.get('fs').put('fchownSync', var.get('chownFixSync')(var.get('fs').get('fchownSync')))
                    var.get('fs').put('lchownSync', var.get('chownFixSync')(var.get('fs').get('lchownSync')))
                    var.get('fs').put('chmodSync', var.get('chmodFixSync')(var.get('fs').get('chmodSync')))
                    var.get('fs').put('fchmodSync', var.get('chmodFixSync')(var.get('fs').get('fchmodSync')))
                    var.get('fs').put('lchmodSync', var.get('chmodFixSync')(var.get('fs').get('lchmodSync')))
                    var.get('fs').put('stat', var.get('statFix')(var.get('fs').get('stat')))
                    var.get('fs').put('fstat', var.get('statFix')(var.get('fs').get('fstat')))
                    var.get('fs').put('lstat', var.get('statFix')(var.get('fs').get('lstat')))
                    var.get('fs').put('statSync', var.get('statFixSync')(var.get('fs').get('statSync')))
                    var.get('fs').put('fstatSync', var.get('statFixSync')(var.get('fs').get('fstatSync')))
                    var.get('fs').put('lstatSync', var.get('statFixSync')(var.get('fs').get('lstatSync')))
                    if var.get('fs').get('lchmod').neg():
                        @Js
                        def PyJs_anonymous_1959_(path, mode, cb, this, arguments, var=var):
                            var = Scope({'path':path, 'mode':mode, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                            var.registers(['mode', 'cb', 'path'])
                            if var.get('cb'):
                                var.get('process').callprop('nextTick', var.get('cb'))
                        PyJs_anonymous_1959_._set_name('anonymous')
                        var.get('fs').put('lchmod', PyJs_anonymous_1959_)
                        @Js
                        def PyJs_anonymous_1960_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers([])
                            pass
                        PyJs_anonymous_1960_._set_name('anonymous')
                        var.get('fs').put('lchmodSync', PyJs_anonymous_1960_)
                    if var.get('fs').get('lchown').neg():
                        @Js
                        def PyJs_anonymous_1961_(path, uid, gid, cb, this, arguments, var=var):
                            var = Scope({'path':path, 'uid':uid, 'gid':gid, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                            var.registers(['cb', 'uid', 'gid', 'path'])
                            if var.get('cb'):
                                var.get('process').callprop('nextTick', var.get('cb'))
                        PyJs_anonymous_1961_._set_name('anonymous')
                        var.get('fs').put('lchown', PyJs_anonymous_1961_)
                        @Js
                        def PyJs_anonymous_1962_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers([])
                            pass
                        PyJs_anonymous_1962_._set_name('anonymous')
                        var.get('fs').put('lchownSync', PyJs_anonymous_1962_)
                    if PyJsStrictEq(var.get('platform'),Js('win32')):
                        @Js
                        def PyJs_anonymous_1963_(PyJsArg_66732472656e616d65_, this, arguments, var=var):
                            var = Scope({'fs$rename':PyJsArg_66732472656e616d65_, 'this':this, 'arguments':arguments}, var)
                            var.registers(['fs$rename'])
                            @Js
                            def PyJs_anonymous_1964_(PyJsArg_66726f6d_, to, cb, this, arguments, var=var):
                                var = Scope({'from':PyJsArg_66726f6d_, 'to':to, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                                var.registers(['start', 'cb', 'backoff', 'from', 'to'])
                                var.put('start', var.get('Date').callprop('now'))
                                var.put('backoff', Js(0.0))
                                @Js
                                def PyJs_CB_1965_(er, this, arguments, var=var):
                                    var = Scope({'er':er, 'this':this, 'arguments':arguments, 'CB':PyJs_CB_1965_}, var)
                                    var.registers(['er'])
                                    if ((var.get('er') and (PyJsStrictEq(var.get('er').get('code'),Js('EACCES')) or PyJsStrictEq(var.get('er').get('code'),Js('EPERM')))) and ((var.get('Date').callprop('now')-var.get('start'))<Js(60000.0))):
                                        @Js
                                        def PyJs_anonymous_1966_(this, arguments, var=var):
                                            var = Scope({'this':this, 'arguments':arguments}, var)
                                            var.registers([])
                                            @Js
                                            def PyJs_anonymous_1967_(stater, st, this, arguments, var=var):
                                                var = Scope({'stater':stater, 'st':st, 'this':this, 'arguments':arguments}, var)
                                                var.registers(['st', 'stater'])
                                                if (var.get('stater') and PyJsStrictEq(var.get('stater').get('code'),Js('ENOENT'))):
                                                    var.get('fs$rename')(var.get('from'), var.get('to'), var.get('CB'))
                                                else:
                                                    var.get('cb')(var.get('er'))
                                            PyJs_anonymous_1967_._set_name('anonymous')
                                            var.get('fs').callprop('stat', var.get('to'), PyJs_anonymous_1967_)
                                        PyJs_anonymous_1966_._set_name('anonymous')
                                        var.get('setTimeout')(PyJs_anonymous_1966_, var.get('backoff'))
                                        if (var.get('backoff')<Js(100.0)):
                                            var.put('backoff', Js(10.0), '+')
                                        return var.get('undefined')
                                    if var.get('cb'):
                                        var.get('cb')(var.get('er'))
                                PyJs_CB_1965_._set_name('CB')
                                var.get('fs$rename')(var.get('from'), var.get('to'), PyJs_CB_1965_)
                            PyJs_anonymous_1964_._set_name('anonymous')
                            return PyJs_anonymous_1964_
                        PyJs_anonymous_1963_._set_name('anonymous')
                        var.get('fs').put('rename', PyJs_anonymous_1963_(var.get('fs').get('rename')))
                    @Js
                    def PyJs_anonymous_1968_(PyJsArg_66732472656164_, this, arguments, var=var):
                        var = Scope({'fs$read':PyJsArg_66732472656164_, 'this':this, 'arguments':arguments}, var)
                        var.registers(['fs$read', 'read'])
                        @Js
                        def PyJsHoisted_read_(fd, buffer, offset, length, position, callback_, this, arguments, var=var):
                            var = Scope({'fd':fd, 'buffer':buffer, 'offset':offset, 'length':length, 'position':position, 'callback_':callback_, 'this':this, 'arguments':arguments}, var)
                            var.registers(['eagCounter', 'buffer', 'fd', 'callback_', '_callback', 'length', 'position', 'offset'])
                            pass
                            if (var.get('callback_') and PyJsStrictEq(var.get('callback_',throw=False).typeof(),Js('function'))):
                                var.put('eagCounter', Js(0.0))
                                @Js
                                def PyJs_callback_1969_(er, _, __, this, arguments, var=var):
                                    var = Scope({'er':er, '_':_, '__':__, 'this':this, 'arguments':arguments, 'callback':PyJs_callback_1969_}, var)
                                    var.registers(['_', '__', 'er'])
                                    if ((var.get('er') and PyJsStrictEq(var.get('er').get('code'),Js('EAGAIN'))) and (var.get('eagCounter')<Js(10.0))):
                                        (var.put('eagCounter',Js(var.get('eagCounter').to_number())+Js(1))-Js(1))
                                        return var.get('fs$read').callprop('call', var.get('fs'), var.get('fd'), var.get('buffer'), var.get('offset'), var.get('length'), var.get('position'), var.get('_callback'))
                                    var.get('callback_').callprop('apply', var.get(u"this"), var.get('arguments'))
                                PyJs_callback_1969_._set_name('callback')
                                var.put('_callback', PyJs_callback_1969_)
                            return var.get('fs$read').callprop('call', var.get('fs'), var.get('fd'), var.get('buffer'), var.get('offset'), var.get('length'), var.get('position'), var.get('_callback'))
                        PyJsHoisted_read_.func_name = 'read'
                        var.put('read', PyJsHoisted_read_)
                        pass
                        var.get('read').put('__proto__', var.get('fs$read'))
                        return var.get('read')
                    PyJs_anonymous_1968_._set_name('anonymous')
                    var.get('fs').put('read', PyJs_anonymous_1968_(var.get('fs').get('read')))
                    @Js
                    def PyJs_anonymous_1970_(PyJsArg_6673247265616453796e63_, this, arguments, var=var):
                        var = Scope({'fs$readSync':PyJsArg_6673247265616453796e63_, 'this':this, 'arguments':arguments}, var)
                        var.registers(['fs$readSync'])
                        @Js
                        def PyJs_anonymous_1971_(fd, buffer, offset, length, position, this, arguments, var=var):
                            var = Scope({'fd':fd, 'buffer':buffer, 'offset':offset, 'length':length, 'position':position, 'this':this, 'arguments':arguments}, var)
                            var.registers(['eagCounter', 'buffer', 'fd', 'length', 'position', 'offset'])
                            var.put('eagCounter', Js(0.0))
                            while Js(True):
                                try:
                                    return var.get('fs$readSync').callprop('call', var.get('fs'), var.get('fd'), var.get('buffer'), var.get('offset'), var.get('length'), var.get('position'))
                                except PyJsException as PyJsTempException:
                                    PyJsHolder_6572_8647705 = var.own.get('er')
                                    var.force_own_put('er', PyExceptionToJs(PyJsTempException))
                                    try:
                                        if (PyJsStrictEq(var.get('er').get('code'),Js('EAGAIN')) and (var.get('eagCounter')<Js(10.0))):
                                            (var.put('eagCounter',Js(var.get('eagCounter').to_number())+Js(1))-Js(1))
                                            continue
                                        PyJsTempException = JsToPyException(var.get('er'))
                                        raise PyJsTempException
                                    finally:
                                        if PyJsHolder_6572_8647705 is not None:
                                            var.own['er'] = PyJsHolder_6572_8647705
                                        else:
                                            del var.own['er']
                                        del PyJsHolder_6572_8647705
                        PyJs_anonymous_1971_._set_name('anonymous')
                        return PyJs_anonymous_1971_
                    PyJs_anonymous_1970_._set_name('anonymous')
                    var.get('fs').put('readSync', PyJs_anonymous_1970_(var.get('fs').get('readSync')))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                PyJsHoisted_patch_.func_name = 'patch'
                var.put('patch', PyJsHoisted_patch_)
                var.put('constants', var.get('require')(Js('constants')))
                var.put('origCwd', var.get('process').get('cwd'))
                var.put('cwd', var.get(u"null"))
                var.put('platform', (var.get('process').get('env').get('GRACEFUL_FS_PLATFORM') or var.get('process').get('platform')))
                @Js
                def PyJs_anonymous_1957_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    if var.get('cwd').neg():
                        var.put('cwd', var.get('origCwd').callprop('call', var.get('process')))
                    return var.get('cwd')
                PyJs_anonymous_1957_._set_name('anonymous')
                var.get('process').put('cwd', PyJs_anonymous_1957_)
                try:
                    var.get('process').callprop('cwd')
                except PyJsException as PyJsTempException:
                    PyJsHolder_6572_89256565 = var.own.get('er')
                    var.force_own_put('er', PyExceptionToJs(PyJsTempException))
                    try:
                        pass
                    finally:
                        if PyJsHolder_6572_89256565 is not None:
                            var.own['er'] = PyJsHolder_6572_89256565
                        else:
                            del var.own['er']
                        del PyJsHolder_6572_89256565
                var.put('chdir', var.get('process').get('chdir'))
                @Js
                def PyJs_anonymous_1958_(d, this, arguments, var=var):
                    var = Scope({'d':d, 'this':this, 'arguments':arguments}, var)
                    var.registers(['d'])
                    var.put('cwd', var.get(u"null"))
                    var.get('chdir').callprop('call', var.get('process'), var.get('d'))
                PyJs_anonymous_1958_._set_name('anonymous')
                var.get('process').put('chdir', PyJs_anonymous_1958_)
                var.get('module').put('exports', var.get('patch'))
                pass
            PyJs_anonymous_1956_._set_name('anonymous')
            PyJs_anonymous_1956_.callprop('call', var.get(u"this"))
        PyJs_anonymous_1955_._set_name('anonymous')
        PyJs_anonymous_1955_.callprop('call', var.get(u"this"), var.get('require')(Js('_process')))
    PyJs_anonymous_1954_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1992_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_1993_(PyJsArg_676c6f62616c_, this, arguments, var=var):
            var = Scope({'global':PyJsArg_676c6f62616c_, 'this':this, 'arguments':arguments}, var)
            var.registers(['global'])
            @Js
            def PyJs_anonymous_1994_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['origSymbol', 'hasSymbolSham'])
                Js('use strict')
                var.put('origSymbol', var.get('global').get('Symbol'))
                var.put('hasSymbolSham', var.get('require')(Js('./shams')))
                @Js
                def PyJs_hasNativeSymbols_1995_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'hasNativeSymbols':PyJs_hasNativeSymbols_1995_}, var)
                    var.registers([])
                    if PyJsStrictNeq(var.get('origSymbol',throw=False).typeof(),Js('function')):
                        return Js(False)
                    if PyJsStrictNeq(var.get('Symbol',throw=False).typeof(),Js('function')):
                        return Js(False)
                    if PyJsStrictNeq(var.get('_typeof')(var.get('origSymbol')(Js('foo'))),Js('symbol')):
                        return Js(False)
                    if PyJsStrictNeq(var.get('_typeof')(var.get('Symbol')(Js('bar'))),Js('symbol')):
                        return Js(False)
                    return var.get('hasSymbolSham')()
                PyJs_hasNativeSymbols_1995_._set_name('hasNativeSymbols')
                var.get('module').put('exports', PyJs_hasNativeSymbols_1995_)
            PyJs_anonymous_1994_._set_name('anonymous')
            PyJs_anonymous_1994_.callprop('call', var.get(u"this"))
        PyJs_anonymous_1993_._set_name('anonymous')
        PyJs_anonymous_1993_.callprop('call', var.get(u"this"), (var.get('global') if PyJsStrictNeq(var.get('global',throw=False).typeof(),Js('undefined')) else (var.get('self') if PyJsStrictNeq(var.get('self',throw=False).typeof(),Js('undefined')) else (var.get('window') if PyJsStrictNeq(var.get('window',throw=False).typeof(),Js('undefined')) else Js({})))))
    PyJs_anonymous_1992_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1996_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        Js('use strict')
        @Js
        def PyJs_hasSymbols_1997_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'hasSymbols':PyJs_hasSymbols_1997_}, var)
            var.registers(['sym', 'syms', 'symVal', 'descriptor', 'symObj', 'obj'])
            if (PyJsStrictNeq(var.get('Symbol',throw=False).typeof(),Js('function')) or PyJsStrictNeq(var.get('Object').get('getOwnPropertySymbols').typeof(),Js('function'))):
                return Js(False)
            if PyJsStrictEq(var.get('_typeof')(var.get('Symbol').get('iterator')),Js('symbol')):
                return Js(True)
            var.put('obj', Js({}))
            var.put('sym', var.get('Symbol')(Js('test')))
            var.put('symObj', var.get('Object')(var.get('sym')))
            if PyJsStrictEq(var.get('sym',throw=False).typeof(),Js('string')):
                return Js(False)
            if PyJsStrictNeq(var.get('Object').get('prototype').get('toString').callprop('call', var.get('sym')),Js('[object Symbol]')):
                return Js(False)
            if PyJsStrictNeq(var.get('Object').get('prototype').get('toString').callprop('call', var.get('symObj')),Js('[object Symbol]')):
                return Js(False)
            var.put('symVal', Js(42.0))
            var.get('obj').put(var.get('sym'), var.get('symVal'))
            for PyJsTemp in var.get('obj'):
                var.put('sym', PyJsTemp)
                return Js(False)
            if (PyJsStrictEq(var.get('Object').get('keys').typeof(),Js('function')) and PyJsStrictNeq(var.get('Object').callprop('keys', var.get('obj')).get('length'),Js(0.0))):
                return Js(False)
            if (PyJsStrictEq(var.get('Object').get('getOwnPropertyNames').typeof(),Js('function')) and PyJsStrictNeq(var.get('Object').callprop('getOwnPropertyNames', var.get('obj')).get('length'),Js(0.0))):
                return Js(False)
            var.put('syms', var.get('Object').callprop('getOwnPropertySymbols', var.get('obj')))
            if (PyJsStrictNeq(var.get('syms').get('length'),Js(1.0)) or PyJsStrictNeq(var.get('syms').get('0'),var.get('sym'))):
                return Js(False)
            if var.get('Object').get('prototype').get('propertyIsEnumerable').callprop('call', var.get('obj'), var.get('sym')).neg():
                return Js(False)
            if PyJsStrictEq(var.get('Object').get('getOwnPropertyDescriptor').typeof(),Js('function')):
                var.put('descriptor', var.get('Object').callprop('getOwnPropertyDescriptor', var.get('obj'), var.get('sym')))
                if (PyJsStrictNeq(var.get('descriptor').get('value'),var.get('symVal')) or PyJsStrictNeq(var.get('descriptor').get('enumerable'),Js(True))):
                    return Js(False)
            return Js(True)
        PyJs_hasSymbols_1997_._set_name('hasSymbols')
        var.get('module').put('exports', PyJs_hasSymbols_1997_)
    PyJs_anonymous_1996_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1998_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_1999_(buffer, offset, isLE, mLen, nBytes, this, arguments, var=var):
            var = Scope({'buffer':buffer, 'offset':offset, 'isLE':isLE, 'mLen':mLen, 'nBytes':nBytes, 'this':this, 'arguments':arguments}, var)
            var.registers(['eMax', 'i', 's', 'nBytes', 'buffer', 'mLen', 'm', 'e', 'isLE', 'eLen', 'eBias', 'nBits', 'offset', 'd'])
            pass
            var.put('eLen', (((var.get('nBytes')*Js(8.0))-var.get('mLen'))-Js(1.0)))
            var.put('eMax', ((Js(1.0)<<var.get('eLen'))-Js(1.0)))
            var.put('eBias', (var.get('eMax')>>Js(1.0)))
            var.put('nBits', (-Js(7.0)))
            var.put('i', ((var.get('nBytes')-Js(1.0)) if var.get('isLE') else Js(0.0)))
            var.put('d', ((-Js(1.0)) if var.get('isLE') else Js(1.0)))
            var.put('s', var.get('buffer').get((var.get('offset')+var.get('i'))))
            var.put('i', var.get('d'), '+')
            var.put('e', (var.get('s')&((Js(1.0)<<(-var.get('nBits')))-Js(1.0))))
            var.put('s', (-var.get('nBits')), '>>')
            var.put('nBits', var.get('eLen'), '+')
            #for JS loop
            
            while (var.get('nBits')>Js(0.0)):
                try:
                    pass
                finally:
                        PyJsComma(PyJsComma(var.put('e', ((var.get('e')*Js(256.0))+var.get('buffer').get((var.get('offset')+var.get('i'))))),var.put('i', var.get('d'), '+')),var.put('nBits', Js(8.0), '-'))
            var.put('m', (var.get('e')&((Js(1.0)<<(-var.get('nBits')))-Js(1.0))))
            var.put('e', (-var.get('nBits')), '>>')
            var.put('nBits', var.get('mLen'), '+')
            #for JS loop
            
            while (var.get('nBits')>Js(0.0)):
                try:
                    pass
                finally:
                        PyJsComma(PyJsComma(var.put('m', ((var.get('m')*Js(256.0))+var.get('buffer').get((var.get('offset')+var.get('i'))))),var.put('i', var.get('d'), '+')),var.put('nBits', Js(8.0), '-'))
            if PyJsStrictEq(var.get('e'),Js(0.0)):
                var.put('e', (Js(1.0)-var.get('eBias')))
            else:
                if PyJsStrictEq(var.get('e'),var.get('eMax')):
                    return (var.get('NaN') if var.get('m') else (((-Js(1.0)) if var.get('s') else Js(1.0))*var.get('Infinity')))
                else:
                    var.put('m', (var.get('m')+var.get('Math').callprop('pow', Js(2.0), var.get('mLen'))))
                    var.put('e', (var.get('e')-var.get('eBias')))
            return ((((-Js(1.0)) if var.get('s') else Js(1.0))*var.get('m'))*var.get('Math').callprop('pow', Js(2.0), (var.get('e')-var.get('mLen'))))
        PyJs_anonymous_1999_._set_name('anonymous')
        var.get('exports').put('read', PyJs_anonymous_1999_)
        @Js
        def PyJs_anonymous_2000_(buffer, value, offset, isLE, mLen, nBytes, this, arguments, var=var):
            var = Scope({'buffer':buffer, 'value':value, 'offset':offset, 'isLE':isLE, 'mLen':mLen, 'nBytes':nBytes, 'this':this, 'arguments':arguments}, var)
            var.registers(['eMax', 'i', 's', 'nBytes', 'buffer', 'mLen', 'm', 'e', 'isLE', 'eLen', 'eBias', 'rt', 'offset', 'c', 'd', 'value'])
            pass
            var.put('eLen', (((var.get('nBytes')*Js(8.0))-var.get('mLen'))-Js(1.0)))
            var.put('eMax', ((Js(1.0)<<var.get('eLen'))-Js(1.0)))
            var.put('eBias', (var.get('eMax')>>Js(1.0)))
            var.put('rt', ((var.get('Math').callprop('pow', Js(2.0), (-Js(24.0)))-var.get('Math').callprop('pow', Js(2.0), (-Js(77.0)))) if PyJsStrictEq(var.get('mLen'),Js(23.0)) else Js(0.0)))
            var.put('i', (Js(0.0) if var.get('isLE') else (var.get('nBytes')-Js(1.0))))
            var.put('d', (Js(1.0) if var.get('isLE') else (-Js(1.0))))
            var.put('s', (Js(1.0) if ((var.get('value')<Js(0.0)) or (PyJsStrictEq(var.get('value'),Js(0.0)) and ((Js(1.0)/var.get('value'))<Js(0.0)))) else Js(0.0)))
            var.put('value', var.get('Math').callprop('abs', var.get('value')))
            if (var.get('isNaN')(var.get('value')) or PyJsStrictEq(var.get('value'),var.get('Infinity'))):
                var.put('m', (Js(1.0) if var.get('isNaN')(var.get('value')) else Js(0.0)))
                var.put('e', var.get('eMax'))
            else:
                var.put('e', var.get('Math').callprop('floor', (var.get('Math').callprop('log', var.get('value'))/var.get('Math').get('LN2'))))
                if ((var.get('value')*var.put('c', var.get('Math').callprop('pow', Js(2.0), (-var.get('e')))))<Js(1.0)):
                    (var.put('e',Js(var.get('e').to_number())-Js(1))+Js(1))
                    var.put('c', Js(2.0), '*')
                if ((var.get('e')+var.get('eBias'))>=Js(1.0)):
                    var.put('value', (var.get('rt')/var.get('c')), '+')
                else:
                    var.put('value', (var.get('rt')*var.get('Math').callprop('pow', Js(2.0), (Js(1.0)-var.get('eBias')))), '+')
                if ((var.get('value')*var.get('c'))>=Js(2.0)):
                    (var.put('e',Js(var.get('e').to_number())+Js(1))-Js(1))
                    var.put('c', Js(2.0), '/')
                if ((var.get('e')+var.get('eBias'))>=var.get('eMax')):
                    var.put('m', Js(0.0))
                    var.put('e', var.get('eMax'))
                else:
                    if ((var.get('e')+var.get('eBias'))>=Js(1.0)):
                        var.put('m', (((var.get('value')*var.get('c'))-Js(1.0))*var.get('Math').callprop('pow', Js(2.0), var.get('mLen'))))
                        var.put('e', (var.get('e')+var.get('eBias')))
                    else:
                        var.put('m', ((var.get('value')*var.get('Math').callprop('pow', Js(2.0), (var.get('eBias')-Js(1.0))))*var.get('Math').callprop('pow', Js(2.0), var.get('mLen'))))
                        var.put('e', Js(0.0))
            #for JS loop
            
            while (var.get('mLen')>=Js(8.0)):
                try:
                    pass
                finally:
                        PyJsComma(PyJsComma(PyJsComma(var.get('buffer').put((var.get('offset')+var.get('i')), (var.get('m')&Js(255))),var.put('i', var.get('d'), '+')),var.put('m', Js(256.0), '/')),var.put('mLen', Js(8.0), '-'))
            var.put('e', ((var.get('e')<<var.get('mLen'))|var.get('m')))
            var.put('eLen', var.get('mLen'), '+')
            #for JS loop
            
            while (var.get('eLen')>Js(0.0)):
                try:
                    pass
                finally:
                        PyJsComma(PyJsComma(PyJsComma(var.get('buffer').put((var.get('offset')+var.get('i')), (var.get('e')&Js(255))),var.put('i', var.get('d'), '+')),var.put('e', Js(256.0), '/')),var.put('eLen', Js(8.0), '-'))
            var.get('buffer').put(((var.get('offset')+var.get('i'))-var.get('d')), (var.get('s')*Js(128.0)), '|')
        PyJs_anonymous_2000_._set_name('anonymous')
        var.get('exports').put('write', PyJs_anonymous_2000_)
    PyJs_anonymous_1998_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2001_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        if PyJsStrictEq(var.get('Object').get('create').typeof(),Js('function')):
            @Js
            def PyJs_inherits_2002_(ctor, superCtor, this, arguments, var=var):
                var = Scope({'ctor':ctor, 'superCtor':superCtor, 'this':this, 'arguments':arguments, 'inherits':PyJs_inherits_2002_}, var)
                var.registers(['superCtor', 'ctor'])
                if var.get('superCtor'):
                    var.get('ctor').put('super_', var.get('superCtor'))
                    var.get('ctor').put('prototype', var.get('Object').callprop('create', var.get('superCtor').get('prototype'), Js({'constructor':Js({'value':var.get('ctor'),'enumerable':Js(False),'writable':Js(True),'configurable':Js(True)})})))
            PyJs_inherits_2002_._set_name('inherits')
            var.get('module').put('exports', PyJs_inherits_2002_)
        else:
            @Js
            def PyJs_inherits_2003_(ctor, superCtor, this, arguments, var=var):
                var = Scope({'ctor':ctor, 'superCtor':superCtor, 'this':this, 'arguments':arguments, 'inherits':PyJs_inherits_2003_}, var)
                var.registers(['TempCtor', 'ctor', 'superCtor'])
                if var.get('superCtor'):
                    var.get('ctor').put('super_', var.get('superCtor'))
                    @Js
                    def PyJs_TempCtor_2004_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments, 'TempCtor':PyJs_TempCtor_2004_}, var)
                        var.registers([])
                        pass
                    PyJs_TempCtor_2004_._set_name('TempCtor')
                    var.put('TempCtor', PyJs_TempCtor_2004_)
                    var.get('TempCtor').put('prototype', var.get('superCtor').get('prototype'))
                    var.get('ctor').put('prototype', var.get('TempCtor').create())
                    var.get('ctor').get('prototype').put('constructor', var.get('ctor'))
            PyJs_inherits_2003_._set_name('inherits')
            var.get('module').put('exports', PyJs_inherits_2003_)
    PyJs_anonymous_2001_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2005_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['hasToStringTag', 'module', 'exports', 'supportsStandardArguments', 'isLegacyArguments', 'toStr', 'require', 'isStandardArguments'])
        Js('use strict')
        var.put('hasToStringTag', (PyJsStrictEq(var.get('Symbol',throw=False).typeof(),Js('function')) and PyJsStrictEq(var.get('_typeof')(var.get('Symbol').get('toStringTag')),Js('symbol'))))
        var.put('toStr', var.get('Object').get('prototype').get('toString'))
        @Js
        def PyJs_isArguments_2006_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments, 'isArguments':PyJs_isArguments_2006_}, var)
            var.registers(['value'])
            if (((var.get('hasToStringTag') and var.get('value')) and PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('value',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('value'))),Js('object'))) and var.get('value').contains(var.get('Symbol').get('toStringTag'))):
                return Js(False)
            return PyJsStrictEq(var.get('toStr').callprop('call', var.get('value')),Js('[object Arguments]'))
        PyJs_isArguments_2006_._set_name('isArguments')
        var.put('isStandardArguments', PyJs_isArguments_2006_)
        @Js
        def PyJs_isArguments_2007_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments, 'isArguments':PyJs_isArguments_2007_}, var)
            var.registers(['value'])
            if var.get('isStandardArguments')(var.get('value')):
                return Js(True)
            def PyJs_LONG_2008_(var=var):
                return ((((PyJsStrictNeq(var.get('value'),var.get(u"null")) and PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('value',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('value'))),Js('object'))) and PyJsStrictEq(var.get('value').get('length').typeof(),Js('number'))) and (var.get('value').get('length')>=Js(0.0))) and PyJsStrictNeq(var.get('toStr').callprop('call', var.get('value')),Js('[object Array]')))
            return (PyJs_LONG_2008_() and PyJsStrictEq(var.get('toStr').callprop('call', var.get('value').get('callee')),Js('[object Function]')))
        PyJs_isArguments_2007_._set_name('isArguments')
        var.put('isLegacyArguments', PyJs_isArguments_2007_)
        @Js
        def PyJs_anonymous_2009_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get('isStandardArguments')(var.get('arguments'))
        PyJs_anonymous_2009_._set_name('anonymous')
        var.put('supportsStandardArguments', PyJs_anonymous_2009_())
        var.get('isStandardArguments').put('isLegacyArguments', var.get('isLegacyArguments'))
        var.get('module').put('exports', (var.get('isStandardArguments') if var.get('supportsStandardArguments') else var.get('isLegacyArguments')))
    PyJs_anonymous_2005_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2010_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'isSlowBuffer', 'isBuffer', 'require'])
        @Js
        def PyJsHoisted_isBuffer_(obj, this, arguments, var=var):
            var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
            var.registers(['obj'])
            return ((var.get('obj').get('constructor').neg().neg() and PyJsStrictEq(var.get('obj').get('constructor').get('isBuffer').typeof(),Js('function'))) and var.get('obj').get('constructor').callprop('isBuffer', var.get('obj')))
        PyJsHoisted_isBuffer_.func_name = 'isBuffer'
        var.put('isBuffer', PyJsHoisted_isBuffer_)
        @Js
        def PyJsHoisted_isSlowBuffer_(obj, this, arguments, var=var):
            var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
            var.registers(['obj'])
            return ((PyJsStrictEq(var.get('obj').get('readFloatLE').typeof(),Js('function')) and PyJsStrictEq(var.get('obj').get('slice').typeof(),Js('function'))) and var.get('isBuffer')(var.get('obj').callprop('slice', Js(0.0), Js(0.0))))
        PyJsHoisted_isSlowBuffer_.func_name = 'isSlowBuffer'
        var.put('isSlowBuffer', PyJsHoisted_isSlowBuffer_)
        @Js
        def PyJs_anonymous_2011_(obj, this, arguments, var=var):
            var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
            var.registers(['obj'])
            return ((var.get('obj')!=var.get(u"null")) and ((var.get('isBuffer')(var.get('obj')) or var.get('isSlowBuffer')(var.get('obj'))) or var.get('obj').get('_isBuffer').neg().neg()))
        PyJs_anonymous_2011_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_2011_)
        pass
        pass
    PyJs_anonymous_2010_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2012_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['hasToStringTag', 'fnToStr', 'GeneratorFunction', 'module', 'generatorFunc', 'getGeneratorFunc', 'exports', 'getProto', 'toStr', 'isFnRegex', 'require'])
        Js('use strict')
        var.put('toStr', var.get('Object').get('prototype').get('toString'))
        var.put('fnToStr', var.get('Function').get('prototype').get('toString'))
        var.put('isFnRegex', JsRegExp('/^\\s*(?:function)?\\*/'))
        var.put('hasToStringTag', (PyJsStrictEq(var.get('Symbol',throw=False).typeof(),Js('function')) and PyJsStrictEq(var.get('_typeof')(var.get('Symbol').get('toStringTag')),Js('symbol'))))
        var.put('getProto', var.get('Object').get('getPrototypeOf'))
        @Js
        def PyJs_getGeneratorFunc_2013_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'getGeneratorFunc':PyJs_getGeneratorFunc_2013_}, var)
            var.registers([])
            if var.get('hasToStringTag').neg():
                return Js(False)
            try:
                return var.get('Function')(Js('return function*() {}'))()
            except PyJsException as PyJsTempException:
                PyJsHolder_65_43402003 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    pass
                finally:
                    if PyJsHolder_65_43402003 is not None:
                        var.own['e'] = PyJsHolder_65_43402003
                    else:
                        del var.own['e']
                    del PyJsHolder_65_43402003
        PyJs_getGeneratorFunc_2013_._set_name('getGeneratorFunc')
        var.put('getGeneratorFunc', PyJs_getGeneratorFunc_2013_)
        var.put('generatorFunc', var.get('getGeneratorFunc')())
        var.put('GeneratorFunction', (var.get('getProto')(var.get('generatorFunc')) if var.get('generatorFunc') else Js({})))
        @Js
        def PyJs_isGeneratorFunction_2014_(fn, this, arguments, var=var):
            var = Scope({'fn':fn, 'this':this, 'arguments':arguments, 'isGeneratorFunction':PyJs_isGeneratorFunction_2014_}, var)
            var.registers(['str', 'fn'])
            if PyJsStrictNeq(var.get('fn',throw=False).typeof(),Js('function')):
                return Js(False)
            if var.get('isFnRegex').callprop('test', var.get('fnToStr').callprop('call', var.get('fn'))):
                return Js(True)
            if var.get('hasToStringTag').neg():
                var.put('str', var.get('toStr').callprop('call', var.get('fn')))
                return PyJsStrictEq(var.get('str'),Js('[object GeneratorFunction]'))
            return PyJsStrictEq(var.get('getProto')(var.get('fn')),var.get('GeneratorFunction'))
        PyJs_isGeneratorFunction_2014_._set_name('isGeneratorFunction')
        var.get('module').put('exports', PyJs_isGeneratorFunction_2014_)
    PyJs_anonymous_2012_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2015_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_2016_(PyJsArg_676c6f62616c_, this, arguments, var=var):
            var = Scope({'global':PyJsArg_676c6f62616c_, 'this':this, 'arguments':arguments}, var)
            var.registers(['global'])
            @Js
            def PyJs_anonymous_2017_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['hasToStringTag', 'availableTypedArrays', 'toStrTags', 'getPrototypeOf', '$toString', 'typedArrays', '$slice', 'gOPD', 'tryTypedArrays', 'callBound', 'hasSymbols', '$indexOf', 'forEach'])
                Js('use strict')
                var.put('forEach', var.get('require')(Js('foreach')))
                var.put('availableTypedArrays', var.get('require')(Js('available-typed-arrays')))
                var.put('callBound', var.get('require')(Js('es-abstract/helpers/callBound')))
                var.put('$toString', var.get('callBound')(Js('Object.prototype.toString')))
                var.put('hasSymbols', var.get('require')(Js('has-symbols'))())
                var.put('hasToStringTag', (var.get('hasSymbols') and PyJsStrictEq(var.get('_typeof')(var.get('Symbol').get('toStringTag')),Js('symbol'))))
                var.put('typedArrays', var.get('availableTypedArrays')())
                @Js
                def PyJs_indexOf_2018_(array, value, this, arguments, var=var):
                    var = Scope({'array':array, 'value':value, 'this':this, 'arguments':arguments, 'indexOf':PyJs_indexOf_2018_}, var)
                    var.registers(['array', 'i', 'value'])
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('array').get('length')):
                        try:
                            if PyJsStrictEq(var.get('array').get(var.get('i')),var.get('value')):
                                return var.get('i')
                        finally:
                                var.put('i', Js(1.0), '+')
                    return (-Js(1.0))
                PyJs_indexOf_2018_._set_name('indexOf')
                var.put('$indexOf', (var.get('callBound')(Js('Array.prototype.indexOf'), Js(True)) or PyJs_indexOf_2018_))
                var.put('$slice', var.get('callBound')(Js('String.prototype.slice')))
                var.put('toStrTags', Js({}))
                var.put('gOPD', var.get('require')(Js('es-abstract/helpers/getOwnPropertyDescriptor')))
                var.put('getPrototypeOf', var.get('Object').get('getPrototypeOf'))
                if ((var.get('hasToStringTag') and var.get('gOPD')) and var.get('getPrototypeOf')):
                    @Js
                    def PyJs_anonymous_2019_(typedArray, this, arguments, var=var):
                        var = Scope({'typedArray':typedArray, 'this':this, 'arguments':arguments}, var)
                        var.registers(['typedArray', 'descriptor', 'proto', 'superProto', 'arr'])
                        var.put('arr', var.get('global').get(var.get('typedArray')).create())
                        if var.get('arr').contains(var.get('Symbol').get('toStringTag')).neg():
                            PyJsTempException = JsToPyException(var.get('EvalError').create(((Js('this engine has support for Symbol.toStringTag, but ')+var.get('typedArray'))+Js(' does not have the property! Please report this.'))))
                            raise PyJsTempException
                        var.put('proto', var.get('getPrototypeOf')(var.get('arr')))
                        var.put('descriptor', var.get('gOPD')(var.get('proto'), var.get('Symbol').get('toStringTag')))
                        if var.get('descriptor').neg():
                            var.put('superProto', var.get('getPrototypeOf')(var.get('proto')))
                            var.put('descriptor', var.get('gOPD')(var.get('superProto'), var.get('Symbol').get('toStringTag')))
                        var.get('toStrTags').put(var.get('typedArray'), var.get('descriptor').get('get'))
                    PyJs_anonymous_2019_._set_name('anonymous')
                    var.get('forEach')(var.get('typedArrays'), PyJs_anonymous_2019_)
                @Js
                def PyJs_tryAllTypedArrays_2020_(value, this, arguments, var=var):
                    var = Scope({'value':value, 'this':this, 'arguments':arguments, 'tryAllTypedArrays':PyJs_tryAllTypedArrays_2020_}, var)
                    var.registers(['anyTrue', 'value'])
                    var.put('anyTrue', Js(False))
                    @Js
                    def PyJs_anonymous_2021_(getter, typedArray, this, arguments, var=var):
                        var = Scope({'getter':getter, 'typedArray':typedArray, 'this':this, 'arguments':arguments}, var)
                        var.registers(['typedArray', 'getter'])
                        if var.get('anyTrue').neg():
                            try:
                                var.put('anyTrue', PyJsStrictEq(var.get('getter').callprop('call', var.get('value')),var.get('typedArray')))
                            except PyJsException as PyJsTempException:
                                PyJsHolder_65_59397928 = var.own.get('e')
                                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                                try:
                                    pass
                                finally:
                                    if PyJsHolder_65_59397928 is not None:
                                        var.own['e'] = PyJsHolder_65_59397928
                                    else:
                                        del var.own['e']
                                    del PyJsHolder_65_59397928
                    PyJs_anonymous_2021_._set_name('anonymous')
                    var.get('forEach')(var.get('toStrTags'), PyJs_anonymous_2021_)
                    return var.get('anyTrue')
                PyJs_tryAllTypedArrays_2020_._set_name('tryAllTypedArrays')
                var.put('tryTypedArrays', PyJs_tryAllTypedArrays_2020_)
                @Js
                def PyJs_isTypedArray_2022_(value, this, arguments, var=var):
                    var = Scope({'value':value, 'this':this, 'arguments':arguments, 'isTypedArray':PyJs_isTypedArray_2022_}, var)
                    var.registers(['tag', 'value'])
                    if (var.get('value').neg() or PyJsStrictNeq((Js('undefined') if PyJsStrictEq(var.get('value',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('value'))),Js('object'))):
                        return Js(False)
                    if var.get('hasToStringTag').neg():
                        var.put('tag', var.get('$slice')(var.get('$toString')(var.get('value')), Js(8.0), (-Js(1.0))))
                        return (var.get('$indexOf')(var.get('typedArrays'), var.get('tag'))>(-Js(1.0)))
                    if var.get('gOPD').neg():
                        return Js(False)
                    return var.get('tryTypedArrays')(var.get('value'))
                PyJs_isTypedArray_2022_._set_name('isTypedArray')
                var.get('module').put('exports', PyJs_isTypedArray_2022_)
            PyJs_anonymous_2017_._set_name('anonymous')
            PyJs_anonymous_2017_.callprop('call', var.get(u"this"))
        PyJs_anonymous_2016_._set_name('anonymous')
        PyJs_anonymous_2016_.callprop('call', var.get(u"this"), (var.get('global') if PyJsStrictNeq(var.get('global',throw=False).typeof(),Js('undefined')) else (var.get('self') if PyJsStrictNeq(var.get('self',throw=False).typeof(),Js('undefined')) else (var.get('window') if PyJsStrictNeq(var.get('window',throw=False).typeof(),Js('undefined')) else Js({})))))
    PyJs_anonymous_2015_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2023_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['encode', 'module', 'exports', 'require', 'decode'])
        var.put('encode', var.get('require')(Js('./lib/encoder')))
        var.put('decode', var.get('require')(Js('./lib/decoder')))
        var.get('module').put('exports', Js({'encode':var.get('encode'),'decode':var.get('decode')}))
    PyJs_anonymous_2023_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2024_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_2025_(Buffer, this, arguments, var=var):
            var = Scope({'Buffer':Buffer, 'this':this, 'arguments':arguments}, var)
            var.registers(['Buffer'])
            @Js
            def PyJs_anonymous_2026_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['JpegImage', 'decode'])
                @Js
                def PyJsHoisted_decode_(jpegData, opts, this, arguments, var=var):
                    var = Scope({'jpegData':jpegData, 'opts':opts, 'this':this, 'arguments':arguments}, var)
                    var.registers(['defaultOpts', 'image', 'channels', 'opts', 'bytesNeeded', 'jpegData', 'decoder', 'arr'])
                    var.put('defaultOpts', Js({'useTArray':Js(False),'colorTransform':var.get('undefined'),'formatAsRGBA':Js(True)}))
                    if var.get('opts'):
                        if PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('opts',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('opts'))),Js('object')):
                            def PyJs_LONG_2037_(var=var):
                                return var.put('opts', Js({'useTArray':(var.get('defaultOpts').get('useTArray') if PyJsStrictEq(var.get('opts').get('useTArray').typeof(),Js('undefined')) else var.get('opts').get('useTArray')),'colorTransform':(var.get('defaultOpts').get('colorTransform') if PyJsStrictEq(var.get('opts').get('colorTransform').typeof(),Js('undefined')) else var.get('opts').get('colorTransform')),'formatAsRGBA':(var.get('defaultOpts').get('formatAsRGBA') if PyJsStrictEq(var.get('opts').get('formatAsRGBA').typeof(),Js('undefined')) else var.get('opts').get('formatAsRGBA'))}))
                            PyJs_LONG_2037_()
                        else:
                            var.put('opts', var.get('defaultOpts'))
                            var.get('opts').put('useTArray', Js(True))
                    else:
                        var.put('opts', var.get('defaultOpts'))
                    var.put('arr', var.get('Uint8Array').create(var.get('jpegData')))
                    var.put('decoder', var.get('JpegImage').create())
                    var.get('decoder').callprop('parse', var.get('arr'))
                    var.get('decoder').put('colorTransform', var.get('opts').get('colorTransform'))
                    var.put('channels', (Js(4.0) if var.get('opts').get('formatAsRGBA') else Js(3.0)))
                    var.put('bytesNeeded', ((var.get('decoder').get('width')*var.get('decoder').get('height'))*var.get('channels')))
                    try:
                        var.put('image', Js({'width':var.get('decoder').get('width'),'height':var.get('decoder').get('height'),'data':(var.get('Uint8Array').create(var.get('bytesNeeded')) if var.get('opts').get('useTArray') else var.get('Buffer').create(var.get('bytesNeeded')))}))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_657272_74888182 = var.own.get('err')
                        var.force_own_put('err', PyExceptionToJs(PyJsTempException))
                        try:
                            if var.get('err').instanceof(var.get('RangeError')):
                                PyJsTempException = JsToPyException(var.get('Error').create(((Js('Could not allocate enough memory for the image. ')+Js('Required: '))+var.get('bytesNeeded'))))
                                raise PyJsTempException
                            else:
                                PyJsTempException = JsToPyException(var.get('err'))
                                raise PyJsTempException
                        finally:
                            if PyJsHolder_657272_74888182 is not None:
                                var.own['err'] = PyJsHolder_657272_74888182
                            else:
                                del var.own['err']
                            del PyJsHolder_657272_74888182
                    var.get('decoder').callprop('copyToImageData', var.get('image'), var.get('opts').get('formatAsRGBA'))
                    return var.get('image')
                PyJsHoisted_decode_.func_name = 'decode'
                var.put('decode', PyJsHoisted_decode_)
                @Js
                def PyJs_jpegImage_2027_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'jpegImage':PyJs_jpegImage_2027_}, var)
                    var.registers(['clampTo8bit', 'decodeScan', 'buildHuffmanTable', 'dctCos6', 'dctSin6', 'buildComponentData', 'dctSin1', 'dctSqrt1d2', 'dctZigZag', 'constructor', 'dctSin3', 'dctCos1', 'dctCos3', 'dctSqrt2'])
                    @Js
                    def PyJsHoisted_constructor_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        pass
                    PyJsHoisted_constructor_.func_name = 'constructor'
                    var.put('constructor', PyJsHoisted_constructor_)
                    @Js
                    def PyJsHoisted_buildHuffmanTable_(codeLengths, values, this, arguments, var=var):
                        var = Scope({'codeLengths':codeLengths, 'values':values, 'this':this, 'arguments':arguments}, var)
                        var.registers(['p', 'i', 'code', 'values', 'length', 'k', 'q', 'codeLengths', 'j'])
                        var.put('k', Js(0.0))
                        var.put('code', Js([]))
                        var.put('length', Js(16.0))
                        while ((var.get('length')>Js(0.0)) and var.get('codeLengths').get((var.get('length')-Js(1.0))).neg()):
                            (var.put('length',Js(var.get('length').to_number())-Js(1))+Js(1))
                        var.get('code').callprop('push', Js({'children':Js([]),'index':Js(0.0)}))
                        var.put('p', var.get('code').get('0'))
                        #for JS loop
                        var.put('i', Js(0.0))
                        while (var.get('i')<var.get('length')):
                            try:
                                #for JS loop
                                var.put('j', Js(0.0))
                                while (var.get('j')<var.get('codeLengths').get(var.get('i'))):
                                    try:
                                        var.put('p', var.get('code').callprop('pop'))
                                        var.get('p').get('children').put(var.get('p').get('index'), var.get('values').get(var.get('k')))
                                        while (var.get('p').get('index')>Js(0.0)):
                                            if PyJsStrictEq(var.get('code').get('length'),Js(0.0)):
                                                PyJsTempException = JsToPyException(var.get('Error').create(Js('Could not recreate Huffman Table')))
                                                raise PyJsTempException
                                            var.put('p', var.get('code').callprop('pop'))
                                        (var.get('p').put('index',Js(var.get('p').get('index').to_number())+Js(1))-Js(1))
                                        var.get('code').callprop('push', var.get('p'))
                                        while (var.get('code').get('length')<=var.get('i')):
                                            var.get('code').callprop('push', var.put('q', Js({'children':Js([]),'index':Js(0.0)})))
                                            var.get('p').get('children').put(var.get('p').get('index'), var.get('q').get('children'))
                                            var.put('p', var.get('q'))
                                        (var.put('k',Js(var.get('k').to_number())+Js(1))-Js(1))
                                    finally:
                                            (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                                if ((var.get('i')+Js(1.0))<var.get('length')):
                                    var.get('code').callprop('push', var.put('q', Js({'children':Js([]),'index':Js(0.0)})))
                                    var.get('p').get('children').put(var.get('p').get('index'), var.get('q').get('children'))
                                    var.put('p', var.get('q'))
                            finally:
                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                        return var.get('code').get('0').get('children')
                    PyJsHoisted_buildHuffmanTable_.func_name = 'buildHuffmanTable'
                    var.put('buildHuffmanTable', PyJsHoisted_buildHuffmanTable_)
                    @Js
                    def PyJsHoisted_decodeScan_(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successivePrev, successive, this, arguments, var=var):
                        var = Scope({'data':data, 'offset':offset, 'frame':frame, 'components':components, 'resetInterval':resetInterval, 'spectralStart':spectralStart, 'spectralEnd':spectralEnd, 'successivePrev':successivePrev, 'successive':successive, 'this':this, 'arguments':arguments}, var)
                        var.registers(['n', 'i', 'components', 'mcusPerLine', 'marker', 'decodeDCSuccessive', 'successivePrev', 'resetInterval', 'h', 'decodeACSuccessive', 'decodeFn', 'offset', 'v', 'maxV', 'bitsCount', 'successive', 'startOffset', 'decodeDCFirst', 'samplesPerLine', 'j', 'spectralStart', 'maxH', 'progressive', 'successiveACState', 'decodeMcu', 'precision', 'decodeHuffman', 'successiveACNextValue', 'mcuExpected', 'readBit', 'eobrun', 'bitsData', 'data', 'scanLines', 'decodeBlock', 'decodeBaseline', 'spectralEnd', 'mcu', 'decodeACFirst', 'component', 'k', 'receive', 'receiveAndExtend', 'frame', 'componentsLength'])
                        @Js
                        def PyJsHoisted_readBit_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers(['nextByte'])
                            if (var.get('bitsCount')>Js(0.0)):
                                (var.put('bitsCount',Js(var.get('bitsCount').to_number())-Js(1))+Js(1))
                                return ((var.get('bitsData')>>var.get('bitsCount'))&Js(1.0))
                            var.put('bitsData', var.get('data').get((var.put('offset',Js(var.get('offset').to_number())+Js(1))-Js(1))))
                            if (var.get('bitsData')==Js(255)):
                                var.put('nextByte', var.get('data').get((var.put('offset',Js(var.get('offset').to_number())+Js(1))-Js(1))))
                                if var.get('nextByte'):
                                    PyJsTempException = JsToPyException(var.get('Error').create((Js('unexpected marker: ')+((var.get('bitsData')<<Js(8.0))|var.get('nextByte')).callprop('toString', Js(16.0)))))
                                    raise PyJsTempException
                            var.put('bitsCount', Js(7.0))
                            return PyJsBshift(var.get('bitsData'),Js(7.0))
                        PyJsHoisted_readBit_.func_name = 'readBit'
                        var.put('readBit', PyJsHoisted_readBit_)
                        @Js
                        def PyJsHoisted_decodeHuffman_(tree, this, arguments, var=var):
                            var = Scope({'tree':tree, 'this':this, 'arguments':arguments}, var)
                            var.registers(['tree', 'bit', 'node'])
                            var.put('node', var.get('tree'))
                            while PyJsStrictNeq(var.put('bit', var.get('readBit')()),var.get(u"null")):
                                var.put('node', var.get('node').get(var.get('bit')))
                                if PyJsStrictEq(var.get('node',throw=False).typeof(),Js('number')):
                                    return var.get('node')
                                if PyJsStrictNeq((Js('undefined') if PyJsStrictEq(var.get('node',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('node'))),Js('object')):
                                    PyJsTempException = JsToPyException(var.get('Error').create(Js('invalid huffman sequence')))
                                    raise PyJsTempException
                            return var.get(u"null")
                        PyJsHoisted_decodeHuffman_.func_name = 'decodeHuffman'
                        var.put('decodeHuffman', PyJsHoisted_decodeHuffman_)
                        @Js
                        def PyJsHoisted_receive_(length, this, arguments, var=var):
                            var = Scope({'length':length, 'this':this, 'arguments':arguments}, var)
                            var.registers(['n', 'length', 'bit'])
                            var.put('n', Js(0.0))
                            while (var.get('length')>Js(0.0)):
                                var.put('bit', var.get('readBit')())
                                if PyJsStrictEq(var.get('bit'),var.get(u"null")):
                                    return var.get('undefined')
                                var.put('n', ((var.get('n')<<Js(1.0))|var.get('bit')))
                                (var.put('length',Js(var.get('length').to_number())-Js(1))+Js(1))
                            return var.get('n')
                        PyJsHoisted_receive_.func_name = 'receive'
                        var.put('receive', PyJsHoisted_receive_)
                        @Js
                        def PyJsHoisted_receiveAndExtend_(length, this, arguments, var=var):
                            var = Scope({'length':length, 'this':this, 'arguments':arguments}, var)
                            var.registers(['n', 'length'])
                            var.put('n', var.get('receive')(var.get('length')))
                            if (var.get('n')>=(Js(1.0)<<(var.get('length')-Js(1.0)))):
                                return var.get('n')
                            return ((var.get('n')+((-Js(1.0))<<var.get('length')))+Js(1.0))
                        PyJsHoisted_receiveAndExtend_.func_name = 'receiveAndExtend'
                        var.put('receiveAndExtend', PyJsHoisted_receiveAndExtend_)
                        @Js
                        def PyJsHoisted_decodeBaseline_(component, zz, this, arguments, var=var):
                            var = Scope({'component':component, 'zz':zz, 'this':this, 'arguments':arguments}, var)
                            var.registers(['r', 's', 'zz', 'component', 'k', 'rs', 'z', 'diff', 't'])
                            var.put('t', var.get('decodeHuffman')(var.get('component').get('huffmanTableDC')))
                            var.put('diff', (Js(0.0) if PyJsStrictEq(var.get('t'),Js(0.0)) else var.get('receiveAndExtend')(var.get('t'))))
                            var.get('zz').put('0', var.get('component').put('pred', var.get('diff'), '+'))
                            var.put('k', Js(1.0))
                            while (var.get('k')<Js(64.0)):
                                var.put('rs', var.get('decodeHuffman')(var.get('component').get('huffmanTableAC')))
                                var.put('s', (var.get('rs')&Js(15.0)))
                                var.put('r', (var.get('rs')>>Js(4.0)))
                                if PyJsStrictEq(var.get('s'),Js(0.0)):
                                    if (var.get('r')<Js(15.0)):
                                        break
                                    var.put('k', Js(16.0), '+')
                                    continue
                                var.put('k', var.get('r'), '+')
                                var.put('z', var.get('dctZigZag').get(var.get('k')))
                                var.get('zz').put(var.get('z'), var.get('receiveAndExtend')(var.get('s')))
                                (var.put('k',Js(var.get('k').to_number())+Js(1))-Js(1))
                        PyJsHoisted_decodeBaseline_.func_name = 'decodeBaseline'
                        var.put('decodeBaseline', PyJsHoisted_decodeBaseline_)
                        @Js
                        def PyJsHoisted_decodeDCFirst_(component, zz, this, arguments, var=var):
                            var = Scope({'component':component, 'zz':zz, 'this':this, 'arguments':arguments}, var)
                            var.registers(['t', 'zz', 'component', 'diff'])
                            var.put('t', var.get('decodeHuffman')(var.get('component').get('huffmanTableDC')))
                            var.put('diff', (Js(0.0) if PyJsStrictEq(var.get('t'),Js(0.0)) else (var.get('receiveAndExtend')(var.get('t'))<<var.get('successive'))))
                            var.get('zz').put('0', var.get('component').put('pred', var.get('diff'), '+'))
                        PyJsHoisted_decodeDCFirst_.func_name = 'decodeDCFirst'
                        var.put('decodeDCFirst', PyJsHoisted_decodeDCFirst_)
                        @Js
                        def PyJsHoisted_decodeDCSuccessive_(component, zz, this, arguments, var=var):
                            var = Scope({'component':component, 'zz':zz, 'this':this, 'arguments':arguments}, var)
                            var.registers(['zz', 'component'])
                            var.get('zz').put('0', (var.get('readBit')()<<var.get('successive')), '|')
                        PyJsHoisted_decodeDCSuccessive_.func_name = 'decodeDCSuccessive'
                        var.put('decodeDCSuccessive', PyJsHoisted_decodeDCSuccessive_)
                        @Js
                        def PyJsHoisted_decodeACFirst_(component, zz, this, arguments, var=var):
                            var = Scope({'component':component, 'zz':zz, 'this':this, 'arguments':arguments}, var)
                            var.registers(['r', 's', 'zz', 'e', 'component', 'k', 'rs', 'z'])
                            if (var.get('eobrun')>Js(0.0)):
                                (var.put('eobrun',Js(var.get('eobrun').to_number())-Js(1))+Js(1))
                                return var.get('undefined')
                            var.put('k', var.get('spectralStart'))
                            var.put('e', var.get('spectralEnd'))
                            while (var.get('k')<=var.get('e')):
                                var.put('rs', var.get('decodeHuffman')(var.get('component').get('huffmanTableAC')))
                                var.put('s', (var.get('rs')&Js(15.0)))
                                var.put('r', (var.get('rs')>>Js(4.0)))
                                if PyJsStrictEq(var.get('s'),Js(0.0)):
                                    if (var.get('r')<Js(15.0)):
                                        var.put('eobrun', ((var.get('receive')(var.get('r'))+(Js(1.0)<<var.get('r')))-Js(1.0)))
                                        break
                                    var.put('k', Js(16.0), '+')
                                    continue
                                var.put('k', var.get('r'), '+')
                                var.put('z', var.get('dctZigZag').get(var.get('k')))
                                var.get('zz').put(var.get('z'), (var.get('receiveAndExtend')(var.get('s'))*(Js(1.0)<<var.get('successive'))))
                                (var.put('k',Js(var.get('k').to_number())+Js(1))-Js(1))
                        PyJsHoisted_decodeACFirst_.func_name = 'decodeACFirst'
                        var.put('decodeACFirst', PyJsHoisted_decodeACFirst_)
                        @Js
                        def PyJsHoisted_decodeACSuccessive_(component, zz, this, arguments, var=var):
                            var = Scope({'component':component, 'zz':zz, 'this':this, 'arguments':arguments}, var)
                            var.registers(['r', 's', 'zz', 'direction', 'e', 'component', 'k', 'rs', 'z'])
                            var.put('k', var.get('spectralStart'))
                            var.put('e', var.get('spectralEnd'))
                            var.put('r', Js(0.0))
                            while (var.get('k')<=var.get('e')):
                                var.put('z', var.get('dctZigZag').get(var.get('k')))
                                var.put('direction', ((-Js(1.0)) if (var.get('zz').get(var.get('z'))<Js(0.0)) else Js(1.0)))
                                while 1:
                                    SWITCHED = False
                                    CONDITION = (var.get('successiveACState'))
                                    if SWITCHED or PyJsStrictEq(CONDITION, Js(0.0)):
                                        SWITCHED = True
                                        var.put('rs', var.get('decodeHuffman')(var.get('component').get('huffmanTableAC')))
                                        var.put('s', (var.get('rs')&Js(15.0)))
                                        var.put('r', (var.get('rs')>>Js(4.0)))
                                        if PyJsStrictEq(var.get('s'),Js(0.0)):
                                            if (var.get('r')<Js(15.0)):
                                                var.put('eobrun', (var.get('receive')(var.get('r'))+(Js(1.0)<<var.get('r'))))
                                                var.put('successiveACState', Js(4.0))
                                            else:
                                                var.put('r', Js(16.0))
                                                var.put('successiveACState', Js(1.0))
                                        else:
                                            if PyJsStrictNeq(var.get('s'),Js(1.0)):
                                                PyJsTempException = JsToPyException(var.get('Error').create(Js('invalid ACn encoding')))
                                                raise PyJsTempException
                                            var.put('successiveACNextValue', var.get('receiveAndExtend')(var.get('s')))
                                            var.put('successiveACState', (Js(2.0) if var.get('r') else Js(3.0)))
                                        continue
                                    if SWITCHED or PyJsStrictEq(CONDITION, Js(1.0)):
                                        SWITCHED = True
                                        pass
                                    if SWITCHED or PyJsStrictEq(CONDITION, Js(2.0)):
                                        SWITCHED = True
                                        if var.get('zz').get(var.get('z')):
                                            var.get('zz').put(var.get('z'), ((var.get('readBit')()<<var.get('successive'))*var.get('direction')), '+')
                                        else:
                                            (var.put('r',Js(var.get('r').to_number())-Js(1))+Js(1))
                                            if PyJsStrictEq(var.get('r'),Js(0.0)):
                                                var.put('successiveACState', (Js(3.0) if (var.get('successiveACState')==Js(2.0)) else Js(0.0)))
                                        break
                                    if SWITCHED or PyJsStrictEq(CONDITION, Js(3.0)):
                                        SWITCHED = True
                                        if var.get('zz').get(var.get('z')):
                                            var.get('zz').put(var.get('z'), ((var.get('readBit')()<<var.get('successive'))*var.get('direction')), '+')
                                        else:
                                            var.get('zz').put(var.get('z'), (var.get('successiveACNextValue')<<var.get('successive')))
                                            var.put('successiveACState', Js(0.0))
                                        break
                                    if SWITCHED or PyJsStrictEq(CONDITION, Js(4.0)):
                                        SWITCHED = True
                                        if var.get('zz').get(var.get('z')):
                                            var.get('zz').put(var.get('z'), ((var.get('readBit')()<<var.get('successive'))*var.get('direction')), '+')
                                        break
                                    SWITCHED = True
                                    break
                                (var.put('k',Js(var.get('k').to_number())+Js(1))-Js(1))
                            if PyJsStrictEq(var.get('successiveACState'),Js(4.0)):
                                (var.put('eobrun',Js(var.get('eobrun').to_number())-Js(1))+Js(1))
                                if PyJsStrictEq(var.get('eobrun'),Js(0.0)):
                                    var.put('successiveACState', Js(0.0))
                        PyJsHoisted_decodeACSuccessive_.func_name = 'decodeACSuccessive'
                        var.put('decodeACSuccessive', PyJsHoisted_decodeACSuccessive_)
                        @Js
                        def PyJsHoisted_decodeMcu_(component, decode, mcu, row, col, this, arguments, var=var):
                            var = Scope({'component':component, 'decode':decode, 'mcu':mcu, 'row':row, 'col':col, 'this':this, 'arguments':arguments}, var)
                            var.registers(['mcuRow', 'mcu', 'mcuCol', 'blockCol', 'row', 'component', 'col', 'blockRow', 'decode'])
                            var.put('mcuRow', ((var.get('mcu')/var.get('mcusPerLine'))|Js(0.0)))
                            var.put('mcuCol', (var.get('mcu')%var.get('mcusPerLine')))
                            var.put('blockRow', ((var.get('mcuRow')*var.get('component').get('v'))+var.get('row')))
                            var.put('blockCol', ((var.get('mcuCol')*var.get('component').get('h'))+var.get('col')))
                            var.get('decode')(var.get('component'), var.get('component').get('blocks').get(var.get('blockRow')).get(var.get('blockCol')))
                        PyJsHoisted_decodeMcu_.func_name = 'decodeMcu'
                        var.put('decodeMcu', PyJsHoisted_decodeMcu_)
                        @Js
                        def PyJsHoisted_decodeBlock_(component, decode, mcu, this, arguments, var=var):
                            var = Scope({'component':component, 'decode':decode, 'mcu':mcu, 'this':this, 'arguments':arguments}, var)
                            var.registers(['mcu', 'blockCol', 'component', 'blockRow', 'decode'])
                            var.put('blockRow', ((var.get('mcu')/var.get('component').get('blocksPerLine'))|Js(0.0)))
                            var.put('blockCol', (var.get('mcu')%var.get('component').get('blocksPerLine')))
                            var.get('decode')(var.get('component'), var.get('component').get('blocks').get(var.get('blockRow')).get(var.get('blockCol')))
                        PyJsHoisted_decodeBlock_.func_name = 'decodeBlock'
                        var.put('decodeBlock', PyJsHoisted_decodeBlock_)
                        var.put('precision', var.get('frame').get('precision'))
                        var.put('samplesPerLine', var.get('frame').get('samplesPerLine'))
                        var.put('scanLines', var.get('frame').get('scanLines'))
                        var.put('mcusPerLine', var.get('frame').get('mcusPerLine'))
                        var.put('progressive', var.get('frame').get('progressive'))
                        var.put('maxH', var.get('frame').get('maxH'))
                        var.put('maxV', var.get('frame').get('maxV'))
                        var.put('startOffset', var.get('offset'))
                        var.put('bitsData', Js(0.0))
                        var.put('bitsCount', Js(0.0))
                        pass
                        pass
                        pass
                        pass
                        pass
                        pass
                        pass
                        var.put('eobrun', Js(0.0))
                        pass
                        var.put('successiveACState', Js(0.0))
                        pass
                        pass
                        pass
                        var.put('componentsLength', var.get('components').get('length'))
                        pass
                        pass
                        if var.get('progressive'):
                            if PyJsStrictEq(var.get('spectralStart'),Js(0.0)):
                                var.put('decodeFn', (var.get('decodeDCFirst') if PyJsStrictEq(var.get('successivePrev'),Js(0.0)) else var.get('decodeDCSuccessive')))
                            else:
                                var.put('decodeFn', (var.get('decodeACFirst') if PyJsStrictEq(var.get('successivePrev'),Js(0.0)) else var.get('decodeACSuccessive')))
                        else:
                            var.put('decodeFn', var.get('decodeBaseline'))
                        var.put('mcu', Js(0.0))
                        pass
                        if (var.get('componentsLength')==Js(1.0)):
                            var.put('mcuExpected', (var.get('components').get('0').get('blocksPerLine')*var.get('components').get('0').get('blocksPerColumn')))
                        else:
                            var.put('mcuExpected', (var.get('mcusPerLine')*var.get('frame').get('mcusPerColumn')))
                        if var.get('resetInterval').neg():
                            var.put('resetInterval', var.get('mcuExpected'))
                        pass
                        while (var.get('mcu')<var.get('mcuExpected')):
                            #for JS loop
                            var.put('i', Js(0.0))
                            while (var.get('i')<var.get('componentsLength')):
                                try:
                                    var.get('components').get(var.get('i')).put('pred', Js(0.0))
                                finally:
                                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                            var.put('eobrun', Js(0.0))
                            if (var.get('componentsLength')==Js(1.0)):
                                var.put('component', var.get('components').get('0'))
                                #for JS loop
                                var.put('n', Js(0.0))
                                while (var.get('n')<var.get('resetInterval')):
                                    try:
                                        var.get('decodeBlock')(var.get('component'), var.get('decodeFn'), var.get('mcu'))
                                        (var.put('mcu',Js(var.get('mcu').to_number())+Js(1))-Js(1))
                                    finally:
                                            (var.put('n',Js(var.get('n').to_number())+Js(1))-Js(1))
                            else:
                                #for JS loop
                                var.put('n', Js(0.0))
                                while (var.get('n')<var.get('resetInterval')):
                                    try:
                                        #for JS loop
                                        var.put('i', Js(0.0))
                                        while (var.get('i')<var.get('componentsLength')):
                                            try:
                                                var.put('component', var.get('components').get(var.get('i')))
                                                var.put('h', var.get('component').get('h'))
                                                var.put('v', var.get('component').get('v'))
                                                #for JS loop
                                                var.put('j', Js(0.0))
                                                while (var.get('j')<var.get('v')):
                                                    try:
                                                        #for JS loop
                                                        var.put('k', Js(0.0))
                                                        while (var.get('k')<var.get('h')):
                                                            try:
                                                                var.get('decodeMcu')(var.get('component'), var.get('decodeFn'), var.get('mcu'), var.get('j'), var.get('k'))
                                                            finally:
                                                                    (var.put('k',Js(var.get('k').to_number())+Js(1))-Js(1))
                                                    finally:
                                                            (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                                            finally:
                                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                                        (var.put('mcu',Js(var.get('mcu').to_number())+Js(1))-Js(1))
                                        if PyJsStrictEq(var.get('mcu'),var.get('mcuExpected')):
                                            break
                                    finally:
                                            (var.put('n',Js(var.get('n').to_number())+Js(1))-Js(1))
                            var.put('bitsCount', Js(0.0))
                            var.put('marker', ((var.get('data').get(var.get('offset'))<<Js(8.0))|var.get('data').get((var.get('offset')+Js(1.0)))))
                            if (var.get('marker')<Js(65280)):
                                PyJsTempException = JsToPyException(var.get('Error').create(Js('marker was not found')))
                                raise PyJsTempException
                            if ((var.get('marker')>=Js(65488)) and (var.get('marker')<=Js(65495))):
                                var.put('offset', Js(2.0), '+')
                            else:
                                break
                        return (var.get('offset')-var.get('startOffset'))
                    PyJsHoisted_decodeScan_.func_name = 'decodeScan'
                    var.put('decodeScan', PyJsHoisted_decodeScan_)
                    @Js
                    def PyJsHoisted_buildComponentData_(frame, component, this, arguments, var=var):
                        var = Scope({'frame':frame, 'component':component, 'this':this, 'arguments':arguments}, var)
                        var.registers(['quantizeAndInverse', 'r', 'i', 'blockCol', 'lines', 'scanLine', 'sample', 'R', 'blocksPerLine', 'component', 'frame', 'blocksPerColumn', 'offset', 'blockRow', 'line', 'samplesPerLine', 'j'])
                        @Js
                        def PyJsHoisted_quantizeAndInverse_(zz, dataOut, dataIn, this, arguments, var=var):
                            var = Scope({'zz':zz, 'dataOut':dataOut, 'dataIn':dataIn, 'this':this, 'arguments':arguments}, var)
                            var.registers(['qt', 'p', 'i', 'v7', 'v3', 'row', 'sample', 'zz', 'dataOut', 'v2', 'v1', 'v5', 'col', 'dataIn', 'v0', 't', 'v4', 'v6'])
                            var.put('qt', var.get('component').get('quantizationTable'))
                            pass
                            var.put('p', var.get('dataIn'))
                            pass
                            #for JS loop
                            var.put('i', Js(0.0))
                            while (var.get('i')<Js(64.0)):
                                try:
                                    var.get('p').put(var.get('i'), (var.get('zz').get(var.get('i'))*var.get('qt').get(var.get('i'))))
                                finally:
                                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                            #for JS loop
                            var.put('i', Js(0.0))
                            while (var.get('i')<Js(8.0)):
                                try:
                                    var.put('row', (Js(8.0)*var.get('i')))
                                    def PyJs_LONG_2029_(var=var):
                                        return (((((((var.get('p').get((Js(1.0)+var.get('row')))==Js(0.0)) and (var.get('p').get((Js(2.0)+var.get('row')))==Js(0.0))) and (var.get('p').get((Js(3.0)+var.get('row')))==Js(0.0))) and (var.get('p').get((Js(4.0)+var.get('row')))==Js(0.0))) and (var.get('p').get((Js(5.0)+var.get('row')))==Js(0.0))) and (var.get('p').get((Js(6.0)+var.get('row')))==Js(0.0))) and (var.get('p').get((Js(7.0)+var.get('row')))==Js(0.0)))
                                    if PyJs_LONG_2029_():
                                        var.put('t', (((var.get('dctSqrt2')*var.get('p').get((Js(0.0)+var.get('row'))))+Js(512.0))>>Js(10.0)))
                                        var.get('p').put((Js(0.0)+var.get('row')), var.get('t'))
                                        var.get('p').put((Js(1.0)+var.get('row')), var.get('t'))
                                        var.get('p').put((Js(2.0)+var.get('row')), var.get('t'))
                                        var.get('p').put((Js(3.0)+var.get('row')), var.get('t'))
                                        var.get('p').put((Js(4.0)+var.get('row')), var.get('t'))
                                        var.get('p').put((Js(5.0)+var.get('row')), var.get('t'))
                                        var.get('p').put((Js(6.0)+var.get('row')), var.get('t'))
                                        var.get('p').put((Js(7.0)+var.get('row')), var.get('t'))
                                        continue
                                    var.put('v0', (((var.get('dctSqrt2')*var.get('p').get((Js(0.0)+var.get('row'))))+Js(128.0))>>Js(8.0)))
                                    var.put('v1', (((var.get('dctSqrt2')*var.get('p').get((Js(4.0)+var.get('row'))))+Js(128.0))>>Js(8.0)))
                                    var.put('v2', var.get('p').get((Js(2.0)+var.get('row'))))
                                    var.put('v3', var.get('p').get((Js(6.0)+var.get('row'))))
                                    var.put('v4', (((var.get('dctSqrt1d2')*(var.get('p').get((Js(1.0)+var.get('row')))-var.get('p').get((Js(7.0)+var.get('row')))))+Js(128.0))>>Js(8.0)))
                                    var.put('v7', (((var.get('dctSqrt1d2')*(var.get('p').get((Js(1.0)+var.get('row')))+var.get('p').get((Js(7.0)+var.get('row')))))+Js(128.0))>>Js(8.0)))
                                    var.put('v5', (var.get('p').get((Js(3.0)+var.get('row')))<<Js(4.0)))
                                    var.put('v6', (var.get('p').get((Js(5.0)+var.get('row')))<<Js(4.0)))
                                    var.put('t', (((var.get('v0')-var.get('v1'))+Js(1.0))>>Js(1.0)))
                                    var.put('v0', (((var.get('v0')+var.get('v1'))+Js(1.0))>>Js(1.0)))
                                    var.put('v1', var.get('t'))
                                    var.put('t', ((((var.get('v2')*var.get('dctSin6'))+(var.get('v3')*var.get('dctCos6')))+Js(128.0))>>Js(8.0)))
                                    var.put('v2', ((((var.get('v2')*var.get('dctCos6'))-(var.get('v3')*var.get('dctSin6')))+Js(128.0))>>Js(8.0)))
                                    var.put('v3', var.get('t'))
                                    var.put('t', (((var.get('v4')-var.get('v6'))+Js(1.0))>>Js(1.0)))
                                    var.put('v4', (((var.get('v4')+var.get('v6'))+Js(1.0))>>Js(1.0)))
                                    var.put('v6', var.get('t'))
                                    var.put('t', (((var.get('v7')+var.get('v5'))+Js(1.0))>>Js(1.0)))
                                    var.put('v5', (((var.get('v7')-var.get('v5'))+Js(1.0))>>Js(1.0)))
                                    var.put('v7', var.get('t'))
                                    var.put('t', (((var.get('v0')-var.get('v3'))+Js(1.0))>>Js(1.0)))
                                    var.put('v0', (((var.get('v0')+var.get('v3'))+Js(1.0))>>Js(1.0)))
                                    var.put('v3', var.get('t'))
                                    var.put('t', (((var.get('v1')-var.get('v2'))+Js(1.0))>>Js(1.0)))
                                    var.put('v1', (((var.get('v1')+var.get('v2'))+Js(1.0))>>Js(1.0)))
                                    var.put('v2', var.get('t'))
                                    var.put('t', ((((var.get('v4')*var.get('dctSin3'))+(var.get('v7')*var.get('dctCos3')))+Js(2048.0))>>Js(12.0)))
                                    var.put('v4', ((((var.get('v4')*var.get('dctCos3'))-(var.get('v7')*var.get('dctSin3')))+Js(2048.0))>>Js(12.0)))
                                    var.put('v7', var.get('t'))
                                    var.put('t', ((((var.get('v5')*var.get('dctSin1'))+(var.get('v6')*var.get('dctCos1')))+Js(2048.0))>>Js(12.0)))
                                    var.put('v5', ((((var.get('v5')*var.get('dctCos1'))-(var.get('v6')*var.get('dctSin1')))+Js(2048.0))>>Js(12.0)))
                                    var.put('v6', var.get('t'))
                                    var.get('p').put((Js(0.0)+var.get('row')), (var.get('v0')+var.get('v7')))
                                    var.get('p').put((Js(7.0)+var.get('row')), (var.get('v0')-var.get('v7')))
                                    var.get('p').put((Js(1.0)+var.get('row')), (var.get('v1')+var.get('v6')))
                                    var.get('p').put((Js(6.0)+var.get('row')), (var.get('v1')-var.get('v6')))
                                    var.get('p').put((Js(2.0)+var.get('row')), (var.get('v2')+var.get('v5')))
                                    var.get('p').put((Js(5.0)+var.get('row')), (var.get('v2')-var.get('v5')))
                                    var.get('p').put((Js(3.0)+var.get('row')), (var.get('v3')+var.get('v4')))
                                    var.get('p').put((Js(4.0)+var.get('row')), (var.get('v3')-var.get('v4')))
                                finally:
                                        var.put('i',Js(var.get('i').to_number())+Js(1))
                            #for JS loop
                            var.put('i', Js(0.0))
                            while (var.get('i')<Js(8.0)):
                                try:
                                    var.put('col', var.get('i'))
                                    def PyJs_LONG_2030_(var=var):
                                        return ((((((var.get('p').get(((Js(1.0)*Js(8.0))+var.get('col')))==Js(0.0)) and (var.get('p').get(((Js(2.0)*Js(8.0))+var.get('col')))==Js(0.0))) and (var.get('p').get(((Js(3.0)*Js(8.0))+var.get('col')))==Js(0.0))) and (var.get('p').get(((Js(4.0)*Js(8.0))+var.get('col')))==Js(0.0))) and (var.get('p').get(((Js(5.0)*Js(8.0))+var.get('col')))==Js(0.0))) and (var.get('p').get(((Js(6.0)*Js(8.0))+var.get('col')))==Js(0.0)))
                                    if (PyJs_LONG_2030_() and (var.get('p').get(((Js(7.0)*Js(8.0))+var.get('col')))==Js(0.0))):
                                        var.put('t', (((var.get('dctSqrt2')*var.get('dataIn').get((var.get('i')+Js(0.0))))+Js(8192.0))>>Js(14.0)))
                                        var.get('p').put(((Js(0.0)*Js(8.0))+var.get('col')), var.get('t'))
                                        var.get('p').put(((Js(1.0)*Js(8.0))+var.get('col')), var.get('t'))
                                        var.get('p').put(((Js(2.0)*Js(8.0))+var.get('col')), var.get('t'))
                                        var.get('p').put(((Js(3.0)*Js(8.0))+var.get('col')), var.get('t'))
                                        var.get('p').put(((Js(4.0)*Js(8.0))+var.get('col')), var.get('t'))
                                        var.get('p').put(((Js(5.0)*Js(8.0))+var.get('col')), var.get('t'))
                                        var.get('p').put(((Js(6.0)*Js(8.0))+var.get('col')), var.get('t'))
                                        var.get('p').put(((Js(7.0)*Js(8.0))+var.get('col')), var.get('t'))
                                        continue
                                    var.put('v0', (((var.get('dctSqrt2')*var.get('p').get(((Js(0.0)*Js(8.0))+var.get('col'))))+Js(2048.0))>>Js(12.0)))
                                    var.put('v1', (((var.get('dctSqrt2')*var.get('p').get(((Js(4.0)*Js(8.0))+var.get('col'))))+Js(2048.0))>>Js(12.0)))
                                    var.put('v2', var.get('p').get(((Js(2.0)*Js(8.0))+var.get('col'))))
                                    var.put('v3', var.get('p').get(((Js(6.0)*Js(8.0))+var.get('col'))))
                                    var.put('v4', (((var.get('dctSqrt1d2')*(var.get('p').get(((Js(1.0)*Js(8.0))+var.get('col')))-var.get('p').get(((Js(7.0)*Js(8.0))+var.get('col')))))+Js(2048.0))>>Js(12.0)))
                                    var.put('v7', (((var.get('dctSqrt1d2')*(var.get('p').get(((Js(1.0)*Js(8.0))+var.get('col')))+var.get('p').get(((Js(7.0)*Js(8.0))+var.get('col')))))+Js(2048.0))>>Js(12.0)))
                                    var.put('v5', var.get('p').get(((Js(3.0)*Js(8.0))+var.get('col'))))
                                    var.put('v6', var.get('p').get(((Js(5.0)*Js(8.0))+var.get('col'))))
                                    var.put('t', (((var.get('v0')-var.get('v1'))+Js(1.0))>>Js(1.0)))
                                    var.put('v0', (((var.get('v0')+var.get('v1'))+Js(1.0))>>Js(1.0)))
                                    var.put('v1', var.get('t'))
                                    var.put('t', ((((var.get('v2')*var.get('dctSin6'))+(var.get('v3')*var.get('dctCos6')))+Js(2048.0))>>Js(12.0)))
                                    var.put('v2', ((((var.get('v2')*var.get('dctCos6'))-(var.get('v3')*var.get('dctSin6')))+Js(2048.0))>>Js(12.0)))
                                    var.put('v3', var.get('t'))
                                    var.put('t', (((var.get('v4')-var.get('v6'))+Js(1.0))>>Js(1.0)))
                                    var.put('v4', (((var.get('v4')+var.get('v6'))+Js(1.0))>>Js(1.0)))
                                    var.put('v6', var.get('t'))
                                    var.put('t', (((var.get('v7')+var.get('v5'))+Js(1.0))>>Js(1.0)))
                                    var.put('v5', (((var.get('v7')-var.get('v5'))+Js(1.0))>>Js(1.0)))
                                    var.put('v7', var.get('t'))
                                    var.put('t', (((var.get('v0')-var.get('v3'))+Js(1.0))>>Js(1.0)))
                                    var.put('v0', (((var.get('v0')+var.get('v3'))+Js(1.0))>>Js(1.0)))
                                    var.put('v3', var.get('t'))
                                    var.put('t', (((var.get('v1')-var.get('v2'))+Js(1.0))>>Js(1.0)))
                                    var.put('v1', (((var.get('v1')+var.get('v2'))+Js(1.0))>>Js(1.0)))
                                    var.put('v2', var.get('t'))
                                    var.put('t', ((((var.get('v4')*var.get('dctSin3'))+(var.get('v7')*var.get('dctCos3')))+Js(2048.0))>>Js(12.0)))
                                    var.put('v4', ((((var.get('v4')*var.get('dctCos3'))-(var.get('v7')*var.get('dctSin3')))+Js(2048.0))>>Js(12.0)))
                                    var.put('v7', var.get('t'))
                                    var.put('t', ((((var.get('v5')*var.get('dctSin1'))+(var.get('v6')*var.get('dctCos1')))+Js(2048.0))>>Js(12.0)))
                                    var.put('v5', ((((var.get('v5')*var.get('dctCos1'))-(var.get('v6')*var.get('dctSin1')))+Js(2048.0))>>Js(12.0)))
                                    var.put('v6', var.get('t'))
                                    var.get('p').put(((Js(0.0)*Js(8.0))+var.get('col')), (var.get('v0')+var.get('v7')))
                                    var.get('p').put(((Js(7.0)*Js(8.0))+var.get('col')), (var.get('v0')-var.get('v7')))
                                    var.get('p').put(((Js(1.0)*Js(8.0))+var.get('col')), (var.get('v1')+var.get('v6')))
                                    var.get('p').put(((Js(6.0)*Js(8.0))+var.get('col')), (var.get('v1')-var.get('v6')))
                                    var.get('p').put(((Js(2.0)*Js(8.0))+var.get('col')), (var.get('v2')+var.get('v5')))
                                    var.get('p').put(((Js(5.0)*Js(8.0))+var.get('col')), (var.get('v2')-var.get('v5')))
                                    var.get('p').put(((Js(3.0)*Js(8.0))+var.get('col')), (var.get('v3')+var.get('v4')))
                                    var.get('p').put(((Js(4.0)*Js(8.0))+var.get('col')), (var.get('v3')-var.get('v4')))
                                finally:
                                        var.put('i',Js(var.get('i').to_number())+Js(1))
                            #for JS loop
                            var.put('i', Js(0.0))
                            while (var.get('i')<Js(64.0)):
                                try:
                                    var.put('sample', (Js(128.0)+((var.get('p').get(var.get('i'))+Js(8.0))>>Js(4.0))))
                                    var.get('dataOut').put(var.get('i'), (Js(0.0) if (var.get('sample')<Js(0.0)) else (Js(255) if (var.get('sample')>Js(255)) else var.get('sample'))))
                                finally:
                                        var.put('i',Js(var.get('i').to_number())+Js(1))
                        PyJsHoisted_quantizeAndInverse_.func_name = 'quantizeAndInverse'
                        var.put('quantizeAndInverse', PyJsHoisted_quantizeAndInverse_)
                        var.put('lines', Js([]))
                        var.put('blocksPerLine', var.get('component').get('blocksPerLine'))
                        var.put('blocksPerColumn', var.get('component').get('blocksPerColumn'))
                        var.put('samplesPerLine', (var.get('blocksPerLine')<<Js(3.0)))
                        var.put('R', var.get('Int32Array').create(Js(64.0)))
                        var.put('r', var.get('Uint8Array').create(Js(64.0)))
                        pass
                        pass
                        #for JS loop
                        var.put('blockRow', Js(0.0))
                        while (var.get('blockRow')<var.get('blocksPerColumn')):
                            try:
                                var.put('scanLine', (var.get('blockRow')<<Js(3.0)))
                                #for JS loop
                                var.put('i', Js(0.0))
                                while (var.get('i')<Js(8.0)):
                                    try:
                                        var.get('lines').callprop('push', var.get('Uint8Array').create(var.get('samplesPerLine')))
                                    finally:
                                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                                #for JS loop
                                var.put('blockCol', Js(0.0))
                                while (var.get('blockCol')<var.get('blocksPerLine')):
                                    try:
                                        var.get('quantizeAndInverse')(var.get('component').get('blocks').get(var.get('blockRow')).get(var.get('blockCol')), var.get('r'), var.get('R'))
                                        var.put('offset', Js(0.0))
                                        var.put('sample', (var.get('blockCol')<<Js(3.0)))
                                        #for JS loop
                                        var.put('j', Js(0.0))
                                        while (var.get('j')<Js(8.0)):
                                            try:
                                                var.put('line', var.get('lines').get((var.get('scanLine')+var.get('j'))))
                                                #for JS loop
                                                var.put('i', Js(0.0))
                                                while (var.get('i')<Js(8.0)):
                                                    try:
                                                        var.get('line').put((var.get('sample')+var.get('i')), var.get('r').get((var.put('offset',Js(var.get('offset').to_number())+Js(1))-Js(1))))
                                                    finally:
                                                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                                            finally:
                                                    (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                                    finally:
                                            (var.put('blockCol',Js(var.get('blockCol').to_number())+Js(1))-Js(1))
                            finally:
                                    (var.put('blockRow',Js(var.get('blockRow').to_number())+Js(1))-Js(1))
                        return var.get('lines')
                    PyJsHoisted_buildComponentData_.func_name = 'buildComponentData'
                    var.put('buildComponentData', PyJsHoisted_buildComponentData_)
                    @Js
                    def PyJsHoisted_clampTo8bit_(a, this, arguments, var=var):
                        var = Scope({'a':a, 'this':this, 'arguments':arguments}, var)
                        var.registers(['a'])
                        return (Js(0.0) if (var.get('a')<Js(0.0)) else (Js(255.0) if (var.get('a')>Js(255.0)) else var.get('a')))
                    PyJsHoisted_clampTo8bit_.func_name = 'clampTo8bit'
                    var.put('clampTo8bit', PyJsHoisted_clampTo8bit_)
                    Js('use strict')
                    def PyJs_LONG_2028_(var=var):
                        return var.get('Int32Array').create(Js([Js(0.0), Js(1.0), Js(8.0), Js(16.0), Js(9.0), Js(2.0), Js(3.0), Js(10.0), Js(17.0), Js(24.0), Js(32.0), Js(25.0), Js(18.0), Js(11.0), Js(4.0), Js(5.0), Js(12.0), Js(19.0), Js(26.0), Js(33.0), Js(40.0), Js(48.0), Js(41.0), Js(34.0), Js(27.0), Js(20.0), Js(13.0), Js(6.0), Js(7.0), Js(14.0), Js(21.0), Js(28.0), Js(35.0), Js(42.0), Js(49.0), Js(56.0), Js(57.0), Js(50.0), Js(43.0), Js(36.0), Js(29.0), Js(22.0), Js(15.0), Js(23.0), Js(30.0), Js(37.0), Js(44.0), Js(51.0), Js(58.0), Js(59.0), Js(52.0), Js(45.0), Js(38.0), Js(31.0), Js(39.0), Js(46.0), Js(53.0), Js(60.0), Js(61.0), Js(54.0), Js(47.0), Js(55.0), Js(62.0), Js(63.0)]))
                    var.put('dctZigZag', PyJs_LONG_2028_())
                    var.put('dctCos1', Js(4017.0))
                    var.put('dctSin1', Js(799.0))
                    var.put('dctCos3', Js(3406.0))
                    var.put('dctSin3', Js(2276.0))
                    var.put('dctCos6', Js(1567.0))
                    var.put('dctSin6', Js(3784.0))
                    var.put('dctSqrt2', Js(5793.0))
                    var.put('dctSqrt1d2', Js(2896.0))
                    pass
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_load_2031_(path, this, arguments, var=var):
                        var = Scope({'path':path, 'this':this, 'arguments':arguments, 'load':PyJs_load_2031_}, var)
                        var.registers(['path', 'xhr'])
                        var.put('xhr', var.get('XMLHttpRequest').create())
                        var.get('xhr').callprop('open', Js('GET'), var.get('path'), Js(True))
                        var.get('xhr').put('responseType', Js('arraybuffer'))
                        @Js
                        def PyJs_anonymous_2032_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers(['data'])
                            var.put('data', var.get('Uint8Array').create((var.get('xhr').get('response') or var.get('xhr').get('mozResponseArrayBuffer'))))
                            var.get(u"this").callprop('parse', var.get('data'))
                            if var.get(u"this").get('onload'):
                                var.get(u"this").callprop('onload')
                        PyJs_anonymous_2032_._set_name('anonymous')
                        var.get('xhr').put('onload', PyJs_anonymous_2032_.callprop('bind', var.get(u"this")))
                        var.get('xhr').callprop('send', var.get(u"null"))
                    PyJs_load_2031_._set_name('load')
                    @Js
                    def PyJs_parse_2033_(data, this, arguments, var=var):
                        var = Scope({'data':data, 'this':this, 'arguments':arguments, 'parse':PyJs_parse_2033_}, var)
                        var.registers(['successiveApproximation', 'quantizationTables', 'i', 'frames', 'components', 'readDataBlock', 'resetInterval', 'h', 'scanLength', 'componentId', 'offset', 'v', 'huffmanLength', 'maxV', 'huffmanValues', 'processed', 'readUint16', 'j', 'huffmanTableSpec', 'jfif', 'adobe', 'spectralStart', 'quantizationTablesEnd', 'maxH', 'huffmanTablesDC', 'prepareComponents', 'quantizationTableSpec', 'codeLengths', 'qId', 'quantizationTablesLength', 'codeLengthSum', 'cp', 'l', 'length', 'data', 'z', 'spectralEnd', 'componentsCount', 'appData', 'fileMarker', 'tableData', 'huffmanTablesAC', 'component', 'tableSpec', 'pixels', 'selectorsCount', 'frame'])
                        @Js
                        def PyJsHoisted_readUint16_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers(['value'])
                            var.put('value', ((var.get('data').get(var.get('offset'))<<Js(8.0))|var.get('data').get((var.get('offset')+Js(1.0)))))
                            var.put('offset', Js(2.0), '+')
                            return var.get('value')
                        PyJsHoisted_readUint16_.func_name = 'readUint16'
                        var.put('readUint16', PyJsHoisted_readUint16_)
                        @Js
                        def PyJsHoisted_readDataBlock_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers(['length', 'array'])
                            var.put('length', var.get('readUint16')())
                            var.put('array', var.get('data').callprop('subarray', var.get('offset'), ((var.get('offset')+var.get('length'))-Js(2.0))))
                            var.put('offset', var.get('array').get('length'), '+')
                            return var.get('array')
                        PyJsHoisted_readDataBlock_.func_name = 'readDataBlock'
                        var.put('readDataBlock', PyJsHoisted_readDataBlock_)
                        @Js
                        def PyJsHoisted_prepareComponents_(frame, this, arguments, var=var):
                            var = Scope({'frame':frame, 'this':this, 'arguments':arguments}, var)
                            var.registers(['i', 'row', 'mcusPerLine', 'blocksPerColumnForMcu', 'blocksPerLine', 'component', 'maxH', 'frame', 'componentId', 'blocksPerColumn', 'blocksPerLineForMcu', 'maxV', 'blocks', 'mcusPerColumn', 'j'])
                            var.put('maxH', Js(0.0))
                            var.put('maxV', Js(0.0))
                            pass
                            for PyJsTemp in var.get('frame').get('components'):
                                var.put('componentId', PyJsTemp)
                                if var.get('frame').get('components').callprop('hasOwnProperty', var.get('componentId')):
                                    var.put('component', var.get('frame').get('components').get(var.get('componentId')))
                                    if (var.get('maxH')<var.get('component').get('h')):
                                        var.put('maxH', var.get('component').get('h'))
                                    if (var.get('maxV')<var.get('component').get('v')):
                                        var.put('maxV', var.get('component').get('v'))
                            var.put('mcusPerLine', var.get('Math').callprop('ceil', ((var.get('frame').get('samplesPerLine')/Js(8.0))/var.get('maxH'))))
                            var.put('mcusPerColumn', var.get('Math').callprop('ceil', ((var.get('frame').get('scanLines')/Js(8.0))/var.get('maxV'))))
                            for PyJsTemp in var.get('frame').get('components'):
                                var.put('componentId', PyJsTemp)
                                if var.get('frame').get('components').callprop('hasOwnProperty', var.get('componentId')):
                                    var.put('component', var.get('frame').get('components').get(var.get('componentId')))
                                    var.put('blocksPerLine', var.get('Math').callprop('ceil', ((var.get('Math').callprop('ceil', (var.get('frame').get('samplesPerLine')/Js(8.0)))*var.get('component').get('h'))/var.get('maxH'))))
                                    var.put('blocksPerColumn', var.get('Math').callprop('ceil', ((var.get('Math').callprop('ceil', (var.get('frame').get('scanLines')/Js(8.0)))*var.get('component').get('v'))/var.get('maxV'))))
                                    var.put('blocksPerLineForMcu', (var.get('mcusPerLine')*var.get('component').get('h')))
                                    var.put('blocksPerColumnForMcu', (var.get('mcusPerColumn')*var.get('component').get('v')))
                                    var.put('blocks', Js([]))
                                    #for JS loop
                                    var.put('i', Js(0.0))
                                    while (var.get('i')<var.get('blocksPerColumnForMcu')):
                                        try:
                                            var.put('row', Js([]))
                                            #for JS loop
                                            var.put('j', Js(0.0))
                                            while (var.get('j')<var.get('blocksPerLineForMcu')):
                                                try:
                                                    var.get('row').callprop('push', var.get('Int32Array').create(Js(64.0)))
                                                finally:
                                                        (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                                            var.get('blocks').callprop('push', var.get('row'))
                                        finally:
                                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                                    var.get('component').put('blocksPerLine', var.get('blocksPerLine'))
                                    var.get('component').put('blocksPerColumn', var.get('blocksPerColumn'))
                                    var.get('component').put('blocks', var.get('blocks'))
                            var.get('frame').put('maxH', var.get('maxH'))
                            var.get('frame').put('maxV', var.get('maxV'))
                            var.get('frame').put('mcusPerLine', var.get('mcusPerLine'))
                            var.get('frame').put('mcusPerColumn', var.get('mcusPerColumn'))
                        PyJsHoisted_prepareComponents_.func_name = 'prepareComponents'
                        var.put('prepareComponents', PyJsHoisted_prepareComponents_)
                        var.put('offset', Js(0.0))
                        var.put('length', var.get('data').get('length'))
                        pass
                        pass
                        pass
                        var.put('jfif', var.get(u"null"))
                        var.put('adobe', var.get(u"null"))
                        var.put('pixels', var.get(u"null"))
                        pass
                        var.put('quantizationTables', Js([]))
                        var.put('frames', Js([]))
                        var.put('huffmanTablesAC', Js([]))
                        var.put('huffmanTablesDC', Js([]))
                        var.put('fileMarker', var.get('readUint16')())
                        if (var.get('fileMarker')!=Js(65496)):
                            PyJsTempException = JsToPyException(var.get('Error').create(Js('SOI not found')))
                            raise PyJsTempException
                        var.put('fileMarker', var.get('readUint16')())
                        while (var.get('fileMarker')!=Js(65497)):
                            pass
                            while 1:
                                SWITCHED = False
                                CONDITION = (var.get('fileMarker'))
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(65280)):
                                    SWITCHED = True
                                    break
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(65504)):
                                    SWITCHED = True
                                    pass
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(65505)):
                                    SWITCHED = True
                                    pass
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(65506)):
                                    SWITCHED = True
                                    pass
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(65507)):
                                    SWITCHED = True
                                    pass
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(65508)):
                                    SWITCHED = True
                                    pass
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(65509)):
                                    SWITCHED = True
                                    pass
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(65510)):
                                    SWITCHED = True
                                    pass
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(65511)):
                                    SWITCHED = True
                                    pass
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(65512)):
                                    SWITCHED = True
                                    pass
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(65513)):
                                    SWITCHED = True
                                    pass
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(65514)):
                                    SWITCHED = True
                                    pass
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(65515)):
                                    SWITCHED = True
                                    pass
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(65516)):
                                    SWITCHED = True
                                    pass
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(65517)):
                                    SWITCHED = True
                                    pass
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(65518)):
                                    SWITCHED = True
                                    pass
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(65519)):
                                    SWITCHED = True
                                    pass
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(65534)):
                                    SWITCHED = True
                                    var.put('appData', var.get('readDataBlock')())
                                    if PyJsStrictEq(var.get('fileMarker'),Js(65504)):
                                        if ((((PyJsStrictEq(var.get('appData').get('0'),Js(74)) and PyJsStrictEq(var.get('appData').get('1'),Js(70))) and PyJsStrictEq(var.get('appData').get('2'),Js(73))) and PyJsStrictEq(var.get('appData').get('3'),Js(70))) and PyJsStrictEq(var.get('appData').get('4'),Js(0.0))):
                                            def PyJs_LONG_2034_(var=var):
                                                return var.put('jfif', Js({'version':Js({'major':var.get('appData').get('5'),'minor':var.get('appData').get('6')}),'densityUnits':var.get('appData').get('7'),'xDensity':((var.get('appData').get('8')<<Js(8.0))|var.get('appData').get('9')),'yDensity':((var.get('appData').get('10')<<Js(8.0))|var.get('appData').get('11')),'thumbWidth':var.get('appData').get('12'),'thumbHeight':var.get('appData').get('13'),'thumbData':var.get('appData').callprop('subarray', Js(14.0), (Js(14.0)+((Js(3.0)*var.get('appData').get('12'))*var.get('appData').get('13'))))}))
                                            PyJs_LONG_2034_()
                                    if PyJsStrictEq(var.get('fileMarker'),Js(65518)):
                                        if (((((PyJsStrictEq(var.get('appData').get('0'),Js(65)) and PyJsStrictEq(var.get('appData').get('1'),Js(100))) and PyJsStrictEq(var.get('appData').get('2'),Js(111))) and PyJsStrictEq(var.get('appData').get('3'),Js(98))) and PyJsStrictEq(var.get('appData').get('4'),Js(101))) and PyJsStrictEq(var.get('appData').get('5'),Js(0.0))):
                                            var.put('adobe', Js({'version':var.get('appData').get('6'),'flags0':((var.get('appData').get('7')<<Js(8.0))|var.get('appData').get('8')),'flags1':((var.get('appData').get('9')<<Js(8.0))|var.get('appData').get('10')),'transformCode':var.get('appData').get('11')}))
                                    break
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(65499)):
                                    SWITCHED = True
                                    var.put('quantizationTablesLength', var.get('readUint16')())
                                    var.put('quantizationTablesEnd', ((var.get('quantizationTablesLength')+var.get('offset'))-Js(2.0)))
                                    while (var.get('offset')<var.get('quantizationTablesEnd')):
                                        var.put('quantizationTableSpec', var.get('data').get((var.put('offset',Js(var.get('offset').to_number())+Js(1))-Js(1))))
                                        var.put('tableData', var.get('Int32Array').create(Js(64.0)))
                                        if PyJsStrictEq((var.get('quantizationTableSpec')>>Js(4.0)),Js(0.0)):
                                            #for JS loop
                                            var.put('j', Js(0.0))
                                            while (var.get('j')<Js(64.0)):
                                                try:
                                                    var.put('z', var.get('dctZigZag').get(var.get('j')))
                                                    var.get('tableData').put(var.get('z'), var.get('data').get((var.put('offset',Js(var.get('offset').to_number())+Js(1))-Js(1))))
                                                finally:
                                                        (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                                        else:
                                            if PyJsStrictEq((var.get('quantizationTableSpec')>>Js(4.0)),Js(1.0)):
                                                #for JS loop
                                                var.put('j', Js(0.0))
                                                while (var.get('j')<Js(64.0)):
                                                    try:
                                                        var.put('z', var.get('dctZigZag').get(var.get('j')))
                                                        var.get('tableData').put(var.get('z'), var.get('readUint16')())
                                                    finally:
                                                            (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                                            else:
                                                PyJsTempException = JsToPyException(var.get('Error').create(Js('DQT: invalid table spec')))
                                                raise PyJsTempException
                                        var.get('quantizationTables').put((var.get('quantizationTableSpec')&Js(15.0)), var.get('tableData'))
                                    break
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(65472)):
                                    SWITCHED = True
                                    pass
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(65473)):
                                    SWITCHED = True
                                    pass
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(65474)):
                                    SWITCHED = True
                                    var.get('readUint16')()
                                    var.put('frame', Js({}))
                                    var.get('frame').put('extended', PyJsStrictEq(var.get('fileMarker'),Js(65473)))
                                    var.get('frame').put('progressive', PyJsStrictEq(var.get('fileMarker'),Js(65474)))
                                    var.get('frame').put('precision', var.get('data').get((var.put('offset',Js(var.get('offset').to_number())+Js(1))-Js(1))))
                                    var.get('frame').put('scanLines', var.get('readUint16')())
                                    var.get('frame').put('samplesPerLine', var.get('readUint16')())
                                    var.get('frame').put('components', Js({}))
                                    var.get('frame').put('componentsOrder', Js([]))
                                    var.put('componentsCount', var.get('data').get((var.put('offset',Js(var.get('offset').to_number())+Js(1))-Js(1))))
                                    var.put('maxH', Js(0.0))
                                    var.put('maxV', Js(0.0))
                                    #for JS loop
                                    var.put('i', Js(0.0))
                                    while (var.get('i')<var.get('componentsCount')):
                                        try:
                                            var.put('componentId', var.get('data').get(var.get('offset')))
                                            var.put('h', (var.get('data').get((var.get('offset')+Js(1.0)))>>Js(4.0)))
                                            var.put('v', (var.get('data').get((var.get('offset')+Js(1.0)))&Js(15.0)))
                                            var.put('qId', var.get('data').get((var.get('offset')+Js(2.0))))
                                            var.get('frame').get('componentsOrder').callprop('push', var.get('componentId'))
                                            var.get('frame').get('components').put(var.get('componentId'), Js({'h':var.get('h'),'v':var.get('v'),'quantizationIdx':var.get('qId')}))
                                            var.put('offset', Js(3.0), '+')
                                        finally:
                                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                                    var.get('prepareComponents')(var.get('frame'))
                                    var.get('frames').callprop('push', var.get('frame'))
                                    break
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(65476)):
                                    SWITCHED = True
                                    var.put('huffmanLength', var.get('readUint16')())
                                    #for JS loop
                                    var.put('i', Js(2.0))
                                    while (var.get('i')<var.get('huffmanLength')):
                                        var.put('huffmanTableSpec', var.get('data').get((var.put('offset',Js(var.get('offset').to_number())+Js(1))-Js(1))))
                                        var.put('codeLengths', var.get('Uint8Array').create(Js(16.0)))
                                        var.put('codeLengthSum', Js(0.0))
                                        #for JS loop
                                        var.put('j', Js(0.0))
                                        while (var.get('j')<Js(16.0)):
                                            try:
                                                var.put('codeLengthSum', var.get('codeLengths').put(var.get('j'), var.get('data').get(var.get('offset'))), '+')
                                            finally:
                                                    PyJsComma((var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1)),(var.put('offset',Js(var.get('offset').to_number())+Js(1))-Js(1)))
                                        var.put('huffmanValues', var.get('Uint8Array').create(var.get('codeLengthSum')))
                                        #for JS loop
                                        var.put('j', Js(0.0))
                                        while (var.get('j')<var.get('codeLengthSum')):
                                            try:
                                                var.get('huffmanValues').put(var.get('j'), var.get('data').get(var.get('offset')))
                                            finally:
                                                    PyJsComma((var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1)),(var.put('offset',Js(var.get('offset').to_number())+Js(1))-Js(1)))
                                        var.put('i', (Js(17.0)+var.get('codeLengthSum')), '+')
                                        (var.get('huffmanTablesDC') if PyJsStrictEq((var.get('huffmanTableSpec')>>Js(4.0)),Js(0.0)) else var.get('huffmanTablesAC')).put((var.get('huffmanTableSpec')&Js(15.0)), var.get('buildHuffmanTable')(var.get('codeLengths'), var.get('huffmanValues')))
                                    
                                    break
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(65501)):
                                    SWITCHED = True
                                    var.get('readUint16')()
                                    var.put('resetInterval', var.get('readUint16')())
                                    break
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(65498)):
                                    SWITCHED = True
                                    var.put('scanLength', var.get('readUint16')())
                                    var.put('selectorsCount', var.get('data').get((var.put('offset',Js(var.get('offset').to_number())+Js(1))-Js(1))))
                                    var.put('components', Js([]))
                                    #for JS loop
                                    var.put('i', Js(0.0))
                                    while (var.get('i')<var.get('selectorsCount')):
                                        try:
                                            var.put('component', var.get('frame').get('components').get(var.get('data').get((var.put('offset',Js(var.get('offset').to_number())+Js(1))-Js(1)))))
                                            var.put('tableSpec', var.get('data').get((var.put('offset',Js(var.get('offset').to_number())+Js(1))-Js(1))))
                                            var.get('component').put('huffmanTableDC', var.get('huffmanTablesDC').get((var.get('tableSpec')>>Js(4.0))))
                                            var.get('component').put('huffmanTableAC', var.get('huffmanTablesAC').get((var.get('tableSpec')&Js(15.0))))
                                            var.get('components').callprop('push', var.get('component'))
                                        finally:
                                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                                    var.put('spectralStart', var.get('data').get((var.put('offset',Js(var.get('offset').to_number())+Js(1))-Js(1))))
                                    var.put('spectralEnd', var.get('data').get((var.put('offset',Js(var.get('offset').to_number())+Js(1))-Js(1))))
                                    var.put('successiveApproximation', var.get('data').get((var.put('offset',Js(var.get('offset').to_number())+Js(1))-Js(1))))
                                    var.put('processed', var.get('decodeScan')(var.get('data'), var.get('offset'), var.get('frame'), var.get('components'), var.get('resetInterval'), var.get('spectralStart'), var.get('spectralEnd'), (var.get('successiveApproximation')>>Js(4.0)), (var.get('successiveApproximation')&Js(15.0))))
                                    var.put('offset', var.get('processed'), '+')
                                    break
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(65535)):
                                    SWITCHED = True
                                    if PyJsStrictNeq(var.get('data').get(var.get('offset')),Js(255)):
                                        (var.put('offset',Js(var.get('offset').to_number())-Js(1))+Js(1))
                                    break
                                if True:
                                    SWITCHED = True
                                    if (((var.get('data').get((var.get('offset')-Js(3.0)))==Js(255)) and (var.get('data').get((var.get('offset')-Js(2.0)))>=Js(192))) and (var.get('data').get((var.get('offset')-Js(2.0)))<=Js(254))):
                                        var.put('offset', Js(3.0), '-')
                                        break
                                    PyJsTempException = JsToPyException(var.get('Error').create((Js('unknown JPEG marker ')+var.get('fileMarker').callprop('toString', Js(16.0)))))
                                    raise PyJsTempException
                                SWITCHED = True
                                break
                            var.put('fileMarker', var.get('readUint16')())
                        if (var.get('frames').get('length')!=Js(1.0)):
                            PyJsTempException = JsToPyException(var.get('Error').create(Js('only single frame JPEGs supported')))
                            raise PyJsTempException
                        #for JS loop
                        var.put('i', Js(0.0))
                        while (var.get('i')<var.get('frames').get('length')):
                            try:
                                var.put('cp', var.get('frames').get(var.get('i')).get('components'))
                                for PyJsTemp in var.get('cp'):
                                    var.put('j', PyJsTemp)
                                    var.get('cp').get(var.get('j')).put('quantizationTable', var.get('quantizationTables').get(var.get('cp').get(var.get('j')).get('quantizationIdx')))
                                    var.get('cp').get(var.get('j')).delete('quantizationIdx')
                            finally:
                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                        var.get(u"this").put('width', var.get('frame').get('samplesPerLine'))
                        var.get(u"this").put('height', var.get('frame').get('scanLines'))
                        var.get(u"this").put('jfif', var.get('jfif'))
                        var.get(u"this").put('adobe', var.get('adobe'))
                        var.get(u"this").put('components', Js([]))
                        #for JS loop
                        var.put('i', Js(0.0))
                        while (var.get('i')<var.get('frame').get('componentsOrder').get('length')):
                            try:
                                var.put('component', var.get('frame').get('components').get(var.get('frame').get('componentsOrder').get(var.get('i'))))
                                var.get(u"this").get('components').callprop('push', Js({'lines':var.get('buildComponentData')(var.get('frame'), var.get('component')),'scaleX':(var.get('component').get('h')/var.get('frame').get('maxH')),'scaleY':(var.get('component').get('v')/var.get('frame').get('maxV'))}))
                            finally:
                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    PyJs_parse_2033_._set_name('parse')
                    @Js
                    def PyJs_getData_2035_(width, height, this, arguments, var=var):
                        var = Scope({'width':width, 'height':height, 'this':this, 'arguments':arguments, 'getData':PyJs_getData_2035_}, var)
                        var.registers(['component2Line', 'K', 'R', 'M', 'component4', 'B', 'offset', 'Ye', 'Y', 'y', 'component3Line', 'scaleX', 'width', 'component4Line', 'data', 'C', 'Cr', 'component2', 'component1', 'scaleY', 'colorTransform', 'x', 'height', 'Cb', 'component1Line', 'component3', 'G', 'dataLength'])
                        var.put('scaleX', (var.get(u"this").get('width')/var.get('width')))
                        var.put('scaleY', (var.get(u"this").get('height')/var.get('height')))
                        pass
                        pass
                        pass
                        var.put('offset', Js(0.0))
                        pass
                        pass
                        var.put('dataLength', ((var.get('width')*var.get('height'))*var.get(u"this").get('components').get('length')))
                        var.put('data', var.get('Uint8Array').create(var.get('dataLength')))
                        while 1:
                            SWITCHED = False
                            CONDITION = (var.get(u"this").get('components').get('length'))
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(1.0)):
                                SWITCHED = True
                                var.put('component1', var.get(u"this").get('components').get('0'))
                                #for JS loop
                                var.put('y', Js(0.0))
                                while (var.get('y')<var.get('height')):
                                    try:
                                        var.put('component1Line', var.get('component1').get('lines').get((Js(0.0)|((var.get('y')*var.get('component1').get('scaleY'))*var.get('scaleY')))))
                                        #for JS loop
                                        var.put('x', Js(0.0))
                                        while (var.get('x')<var.get('width')):
                                            try:
                                                var.put('Y', var.get('component1Line').get((Js(0.0)|((var.get('x')*var.get('component1').get('scaleX'))*var.get('scaleX')))))
                                                var.get('data').put((var.put('offset',Js(var.get('offset').to_number())+Js(1))-Js(1)), var.get('Y'))
                                            finally:
                                                    (var.put('x',Js(var.get('x').to_number())+Js(1))-Js(1))
                                    finally:
                                            (var.put('y',Js(var.get('y').to_number())+Js(1))-Js(1))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(2.0)):
                                SWITCHED = True
                                var.put('component1', var.get(u"this").get('components').get('0'))
                                var.put('component2', var.get(u"this").get('components').get('1'))
                                #for JS loop
                                var.put('y', Js(0.0))
                                while (var.get('y')<var.get('height')):
                                    try:
                                        var.put('component1Line', var.get('component1').get('lines').get((Js(0.0)|((var.get('y')*var.get('component1').get('scaleY'))*var.get('scaleY')))))
                                        var.put('component2Line', var.get('component2').get('lines').get((Js(0.0)|((var.get('y')*var.get('component2').get('scaleY'))*var.get('scaleY')))))
                                        #for JS loop
                                        var.put('x', Js(0.0))
                                        while (var.get('x')<var.get('width')):
                                            try:
                                                var.put('Y', var.get('component1Line').get((Js(0.0)|((var.get('x')*var.get('component1').get('scaleX'))*var.get('scaleX')))))
                                                var.get('data').put((var.put('offset',Js(var.get('offset').to_number())+Js(1))-Js(1)), var.get('Y'))
                                                var.put('Y', var.get('component2Line').get((Js(0.0)|((var.get('x')*var.get('component2').get('scaleX'))*var.get('scaleX')))))
                                                var.get('data').put((var.put('offset',Js(var.get('offset').to_number())+Js(1))-Js(1)), var.get('Y'))
                                            finally:
                                                    (var.put('x',Js(var.get('x').to_number())+Js(1))-Js(1))
                                    finally:
                                            (var.put('y',Js(var.get('y').to_number())+Js(1))-Js(1))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(3.0)):
                                SWITCHED = True
                                var.put('colorTransform', Js(True))
                                if (var.get(u"this").get('adobe') and var.get(u"this").get('adobe').get('transformCode')):
                                    var.put('colorTransform', Js(True))
                                else:
                                    if PyJsStrictNeq(var.get(u"this").get('colorTransform').typeof(),Js('undefined')):
                                        var.put('colorTransform', var.get(u"this").get('colorTransform').neg().neg())
                                var.put('component1', var.get(u"this").get('components').get('0'))
                                var.put('component2', var.get(u"this").get('components').get('1'))
                                var.put('component3', var.get(u"this").get('components').get('2'))
                                #for JS loop
                                var.put('y', Js(0.0))
                                while (var.get('y')<var.get('height')):
                                    try:
                                        var.put('component1Line', var.get('component1').get('lines').get((Js(0.0)|((var.get('y')*var.get('component1').get('scaleY'))*var.get('scaleY')))))
                                        var.put('component2Line', var.get('component2').get('lines').get((Js(0.0)|((var.get('y')*var.get('component2').get('scaleY'))*var.get('scaleY')))))
                                        var.put('component3Line', var.get('component3').get('lines').get((Js(0.0)|((var.get('y')*var.get('component3').get('scaleY'))*var.get('scaleY')))))
                                        #for JS loop
                                        var.put('x', Js(0.0))
                                        while (var.get('x')<var.get('width')):
                                            try:
                                                if var.get('colorTransform').neg():
                                                    var.put('R', var.get('component1Line').get((Js(0.0)|((var.get('x')*var.get('component1').get('scaleX'))*var.get('scaleX')))))
                                                    var.put('G', var.get('component2Line').get((Js(0.0)|((var.get('x')*var.get('component2').get('scaleX'))*var.get('scaleX')))))
                                                    var.put('B', var.get('component3Line').get((Js(0.0)|((var.get('x')*var.get('component3').get('scaleX'))*var.get('scaleX')))))
                                                else:
                                                    var.put('Y', var.get('component1Line').get((Js(0.0)|((var.get('x')*var.get('component1').get('scaleX'))*var.get('scaleX')))))
                                                    var.put('Cb', var.get('component2Line').get((Js(0.0)|((var.get('x')*var.get('component2').get('scaleX'))*var.get('scaleX')))))
                                                    var.put('Cr', var.get('component3Line').get((Js(0.0)|((var.get('x')*var.get('component3').get('scaleX'))*var.get('scaleX')))))
                                                    var.put('R', var.get('clampTo8bit')((var.get('Y')+(Js(1.402)*(var.get('Cr')-Js(128.0))))))
                                                    var.put('G', var.get('clampTo8bit')(((var.get('Y')-(Js(0.3441363)*(var.get('Cb')-Js(128.0))))-(Js(0.71413636)*(var.get('Cr')-Js(128.0))))))
                                                    var.put('B', var.get('clampTo8bit')((var.get('Y')+(Js(1.772)*(var.get('Cb')-Js(128.0))))))
                                                var.get('data').put((var.put('offset',Js(var.get('offset').to_number())+Js(1))-Js(1)), var.get('R'))
                                                var.get('data').put((var.put('offset',Js(var.get('offset').to_number())+Js(1))-Js(1)), var.get('G'))
                                                var.get('data').put((var.put('offset',Js(var.get('offset').to_number())+Js(1))-Js(1)), var.get('B'))
                                            finally:
                                                    (var.put('x',Js(var.get('x').to_number())+Js(1))-Js(1))
                                    finally:
                                            (var.put('y',Js(var.get('y').to_number())+Js(1))-Js(1))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(4.0)):
                                SWITCHED = True
                                if var.get(u"this").get('adobe').neg():
                                    PyJsTempException = JsToPyException(var.get('Error').create(Js('Unsupported color mode (4 components)')))
                                    raise PyJsTempException
                                var.put('colorTransform', Js(False))
                                if (var.get(u"this").get('adobe') and var.get(u"this").get('adobe').get('transformCode')):
                                    var.put('colorTransform', Js(True))
                                else:
                                    if PyJsStrictNeq(var.get(u"this").get('colorTransform').typeof(),Js('undefined')):
                                        var.put('colorTransform', var.get(u"this").get('colorTransform').neg().neg())
                                var.put('component1', var.get(u"this").get('components').get('0'))
                                var.put('component2', var.get(u"this").get('components').get('1'))
                                var.put('component3', var.get(u"this").get('components').get('2'))
                                var.put('component4', var.get(u"this").get('components').get('3'))
                                #for JS loop
                                var.put('y', Js(0.0))
                                while (var.get('y')<var.get('height')):
                                    try:
                                        var.put('component1Line', var.get('component1').get('lines').get((Js(0.0)|((var.get('y')*var.get('component1').get('scaleY'))*var.get('scaleY')))))
                                        var.put('component2Line', var.get('component2').get('lines').get((Js(0.0)|((var.get('y')*var.get('component2').get('scaleY'))*var.get('scaleY')))))
                                        var.put('component3Line', var.get('component3').get('lines').get((Js(0.0)|((var.get('y')*var.get('component3').get('scaleY'))*var.get('scaleY')))))
                                        var.put('component4Line', var.get('component4').get('lines').get((Js(0.0)|((var.get('y')*var.get('component4').get('scaleY'))*var.get('scaleY')))))
                                        #for JS loop
                                        var.put('x', Js(0.0))
                                        while (var.get('x')<var.get('width')):
                                            try:
                                                if var.get('colorTransform').neg():
                                                    var.put('C', var.get('component1Line').get((Js(0.0)|((var.get('x')*var.get('component1').get('scaleX'))*var.get('scaleX')))))
                                                    var.put('M', var.get('component2Line').get((Js(0.0)|((var.get('x')*var.get('component2').get('scaleX'))*var.get('scaleX')))))
                                                    var.put('Ye', var.get('component3Line').get((Js(0.0)|((var.get('x')*var.get('component3').get('scaleX'))*var.get('scaleX')))))
                                                    var.put('K', var.get('component4Line').get((Js(0.0)|((var.get('x')*var.get('component4').get('scaleX'))*var.get('scaleX')))))
                                                else:
                                                    var.put('Y', var.get('component1Line').get((Js(0.0)|((var.get('x')*var.get('component1').get('scaleX'))*var.get('scaleX')))))
                                                    var.put('Cb', var.get('component2Line').get((Js(0.0)|((var.get('x')*var.get('component2').get('scaleX'))*var.get('scaleX')))))
                                                    var.put('Cr', var.get('component3Line').get((Js(0.0)|((var.get('x')*var.get('component3').get('scaleX'))*var.get('scaleX')))))
                                                    var.put('K', var.get('component4Line').get((Js(0.0)|((var.get('x')*var.get('component4').get('scaleX'))*var.get('scaleX')))))
                                                    var.put('C', (Js(255.0)-var.get('clampTo8bit')((var.get('Y')+(Js(1.402)*(var.get('Cr')-Js(128.0)))))))
                                                    var.put('M', (Js(255.0)-var.get('clampTo8bit')(((var.get('Y')-(Js(0.3441363)*(var.get('Cb')-Js(128.0))))-(Js(0.71413636)*(var.get('Cr')-Js(128.0)))))))
                                                    var.put('Ye', (Js(255.0)-var.get('clampTo8bit')((var.get('Y')+(Js(1.772)*(var.get('Cb')-Js(128.0)))))))
                                                var.get('data').put((var.put('offset',Js(var.get('offset').to_number())+Js(1))-Js(1)), (Js(255.0)-var.get('C')))
                                                var.get('data').put((var.put('offset',Js(var.get('offset').to_number())+Js(1))-Js(1)), (Js(255.0)-var.get('M')))
                                                var.get('data').put((var.put('offset',Js(var.get('offset').to_number())+Js(1))-Js(1)), (Js(255.0)-var.get('Ye')))
                                                var.get('data').put((var.put('offset',Js(var.get('offset').to_number())+Js(1))-Js(1)), (Js(255.0)-var.get('K')))
                                            finally:
                                                    (var.put('x',Js(var.get('x').to_number())+Js(1))-Js(1))
                                    finally:
                                            (var.put('y',Js(var.get('y').to_number())+Js(1))-Js(1))
                                break
                            if True:
                                SWITCHED = True
                                PyJsTempException = JsToPyException(var.get('Error').create(Js('Unsupported color mode')))
                                raise PyJsTempException
                            SWITCHED = True
                            break
                        return var.get('data')
                    PyJs_getData_2035_._set_name('getData')
                    @Js
                    def PyJs_copyToImageData_2036_(imageData, formatAsRGBA, this, arguments, var=var):
                        var = Scope({'imageData':imageData, 'formatAsRGBA':formatAsRGBA, 'this':this, 'arguments':arguments, 'copyToImageData':PyJs_copyToImageData_2036_}, var)
                        var.registers(['y', 'K', 'x', 'i', 'height', 'imageData', 'formatAsRGBA', 'width', 'R', 'M', 'data', 'Y', 'G', 'C', 'B', 'imageDataArray', 'j'])
                        var.put('width', var.get('imageData').get('width'))
                        var.put('height', var.get('imageData').get('height'))
                        var.put('imageDataArray', var.get('imageData').get('data'))
                        var.put('data', var.get(u"this").callprop('getData', var.get('width'), var.get('height')))
                        var.put('i', Js(0.0))
                        var.put('j', Js(0.0))
                        pass
                        while 1:
                            SWITCHED = False
                            CONDITION = (var.get(u"this").get('components').get('length'))
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(1.0)):
                                SWITCHED = True
                                #for JS loop
                                var.put('y', Js(0.0))
                                while (var.get('y')<var.get('height')):
                                    try:
                                        #for JS loop
                                        var.put('x', Js(0.0))
                                        while (var.get('x')<var.get('width')):
                                            try:
                                                var.put('Y', var.get('data').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))
                                                var.get('imageDataArray').put((var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1)), var.get('Y'))
                                                var.get('imageDataArray').put((var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1)), var.get('Y'))
                                                var.get('imageDataArray').put((var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1)), var.get('Y'))
                                                if var.get('formatAsRGBA'):
                                                    var.get('imageDataArray').put((var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1)), Js(255.0))
                                            finally:
                                                    (var.put('x',Js(var.get('x').to_number())+Js(1))-Js(1))
                                    finally:
                                            (var.put('y',Js(var.get('y').to_number())+Js(1))-Js(1))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(3.0)):
                                SWITCHED = True
                                #for JS loop
                                var.put('y', Js(0.0))
                                while (var.get('y')<var.get('height')):
                                    try:
                                        #for JS loop
                                        var.put('x', Js(0.0))
                                        while (var.get('x')<var.get('width')):
                                            try:
                                                var.put('R', var.get('data').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))
                                                var.put('G', var.get('data').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))
                                                var.put('B', var.get('data').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))
                                                var.get('imageDataArray').put((var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1)), var.get('R'))
                                                var.get('imageDataArray').put((var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1)), var.get('G'))
                                                var.get('imageDataArray').put((var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1)), var.get('B'))
                                                if var.get('formatAsRGBA'):
                                                    var.get('imageDataArray').put((var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1)), Js(255.0))
                                            finally:
                                                    (var.put('x',Js(var.get('x').to_number())+Js(1))-Js(1))
                                    finally:
                                            (var.put('y',Js(var.get('y').to_number())+Js(1))-Js(1))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(4.0)):
                                SWITCHED = True
                                #for JS loop
                                var.put('y', Js(0.0))
                                while (var.get('y')<var.get('height')):
                                    try:
                                        #for JS loop
                                        var.put('x', Js(0.0))
                                        while (var.get('x')<var.get('width')):
                                            try:
                                                var.put('C', var.get('data').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))
                                                var.put('M', var.get('data').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))
                                                var.put('Y', var.get('data').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))
                                                var.put('K', var.get('data').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))
                                                var.put('R', (Js(255.0)-var.get('clampTo8bit')(((var.get('C')*(Js(1.0)-(var.get('K')/Js(255.0))))+var.get('K')))))
                                                var.put('G', (Js(255.0)-var.get('clampTo8bit')(((var.get('M')*(Js(1.0)-(var.get('K')/Js(255.0))))+var.get('K')))))
                                                var.put('B', (Js(255.0)-var.get('clampTo8bit')(((var.get('Y')*(Js(1.0)-(var.get('K')/Js(255.0))))+var.get('K')))))
                                                var.get('imageDataArray').put((var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1)), var.get('R'))
                                                var.get('imageDataArray').put((var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1)), var.get('G'))
                                                var.get('imageDataArray').put((var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1)), var.get('B'))
                                                if var.get('formatAsRGBA'):
                                                    var.get('imageDataArray').put((var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1)), Js(255.0))
                                            finally:
                                                    (var.put('x',Js(var.get('x').to_number())+Js(1))-Js(1))
                                    finally:
                                            (var.put('y',Js(var.get('y').to_number())+Js(1))-Js(1))
                                break
                            if True:
                                SWITCHED = True
                                PyJsTempException = JsToPyException(var.get('Error').create(Js('Unsupported color mode')))
                                raise PyJsTempException
                            SWITCHED = True
                            break
                    PyJs_copyToImageData_2036_._set_name('copyToImageData')
                    var.get('constructor').put('prototype', Js({'load':PyJs_load_2031_,'parse':PyJs_parse_2033_,'getData':PyJs_getData_2035_,'copyToImageData':PyJs_copyToImageData_2036_}))
                    return var.get('constructor')
                PyJs_jpegImage_2027_._set_name('jpegImage')
                var.put('JpegImage', PyJs_jpegImage_2027_())
                var.get('module').put('exports', var.get('decode'))
                pass
            PyJs_anonymous_2026_._set_name('anonymous')
            PyJs_anonymous_2026_.callprop('call', var.get(u"this"))
        PyJs_anonymous_2025_._set_name('anonymous')
        PyJs_anonymous_2025_.callprop('call', var.get(u"this"), var.get('require')(Js('buffer')).get('Buffer'))
    PyJs_anonymous_2024_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2038_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_2039_(Buffer, this, arguments, var=var):
            var = Scope({'Buffer':Buffer, 'this':this, 'arguments':arguments}, var)
            var.registers(['Buffer'])
            @Js
            def PyJs_anonymous_2040_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['btoa', 'encode', 'getImageDataFromImage', 'JPEGEncoder'])
                @Js
                def PyJsHoisted_JPEGEncoder_(quality, this, arguments, var=var):
                    var = Scope({'quality':quality, 'this':this, 'arguments':arguments}, var)
                    var.registers(['setQuality', 'fdtbl_UV', 'bytepos', 'self', 'ZigZag', 'std_ac_chrominance_values', 'std_ac_luminance_values', 'computeHuffmanTbl', 'bitcode', 'VDU', 'clt', 'writeWord', 'UVTable', 'quality', 'currentQuality', 'UVAC_HT', 'std_dc_chrominance_nrcodes', 'UDU', 'YTable', 'std_dc_chrominance_values', 'initCategoryNumber', 'YDC_HT', 'DU', 'fDCTQuant', 'std_ac_luminance_nrcodes', 'writeSOF0', 'initCharLookupTable', 'UVDC_HT', 'YDU', 'init', 'std_ac_chrominance_nrcodes', 'std_dc_luminance_nrcodes', 'writeDQT', 'initQuantTables', 'category', 'YAC_HT', 'writeBits', 'writeSOS', 'writeByte', 'fdtbl_Y', 'bytenew', 'processDU', 'RGB_YUV_TABLE', 'writeAPP0', 'std_dc_luminance_values', 'outputfDCTQuant', 'byteout', 'writeDHT', 'ffloor', 'fround', 'initHuffmanTbl', 'initRGBYUVTable'])
                    @Js
                    def PyJsHoisted_initQuantTables_(sf, this, arguments, var=var):
                        var = Scope({'sf':sf, 'this':this, 'arguments':arguments}, var)
                        var.registers(['i', 'row', 'UVQT', 'col', 'sf', 'YQT', 'k', 'u', 't', 'aasf', 'j'])
                        var.put('YQT', Js([Js(16.0), Js(11.0), Js(10.0), Js(16.0), Js(24.0), Js(40.0), Js(51.0), Js(61.0), Js(12.0), Js(12.0), Js(14.0), Js(19.0), Js(26.0), Js(58.0), Js(60.0), Js(55.0), Js(14.0), Js(13.0), Js(16.0), Js(24.0), Js(40.0), Js(57.0), Js(69.0), Js(56.0), Js(14.0), Js(17.0), Js(22.0), Js(29.0), Js(51.0), Js(87.0), Js(80.0), Js(62.0), Js(18.0), Js(22.0), Js(37.0), Js(56.0), Js(68.0), Js(109.0), Js(103.0), Js(77.0), Js(24.0), Js(35.0), Js(55.0), Js(64.0), Js(81.0), Js(104.0), Js(113.0), Js(92.0), Js(49.0), Js(64.0), Js(78.0), Js(87.0), Js(103.0), Js(121.0), Js(120.0), Js(101.0), Js(72.0), Js(92.0), Js(95.0), Js(98.0), Js(112.0), Js(100.0), Js(103.0), Js(99.0)]))
                        #for JS loop
                        var.put('i', Js(0.0))
                        while (var.get('i')<Js(64.0)):
                            try:
                                var.put('t', var.get('ffloor')((((var.get('YQT').get(var.get('i'))*var.get('sf'))+Js(50.0))/Js(100.0))))
                                if (var.get('t')<Js(1.0)):
                                    var.put('t', Js(1.0))
                                else:
                                    if (var.get('t')>Js(255.0)):
                                        var.put('t', Js(255.0))
                                var.get('YTable').put(var.get('ZigZag').get(var.get('i')), var.get('t'))
                            finally:
                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                        var.put('UVQT', Js([Js(17.0), Js(18.0), Js(24.0), Js(47.0), Js(99.0), Js(99.0), Js(99.0), Js(99.0), Js(18.0), Js(21.0), Js(26.0), Js(66.0), Js(99.0), Js(99.0), Js(99.0), Js(99.0), Js(24.0), Js(26.0), Js(56.0), Js(99.0), Js(99.0), Js(99.0), Js(99.0), Js(99.0), Js(47.0), Js(66.0), Js(99.0), Js(99.0), Js(99.0), Js(99.0), Js(99.0), Js(99.0), Js(99.0), Js(99.0), Js(99.0), Js(99.0), Js(99.0), Js(99.0), Js(99.0), Js(99.0), Js(99.0), Js(99.0), Js(99.0), Js(99.0), Js(99.0), Js(99.0), Js(99.0), Js(99.0), Js(99.0), Js(99.0), Js(99.0), Js(99.0), Js(99.0), Js(99.0), Js(99.0), Js(99.0), Js(99.0), Js(99.0), Js(99.0), Js(99.0), Js(99.0), Js(99.0), Js(99.0), Js(99.0)]))
                        #for JS loop
                        var.put('j', Js(0.0))
                        while (var.get('j')<Js(64.0)):
                            try:
                                var.put('u', var.get('ffloor')((((var.get('UVQT').get(var.get('j'))*var.get('sf'))+Js(50.0))/Js(100.0))))
                                if (var.get('u')<Js(1.0)):
                                    var.put('u', Js(1.0))
                                else:
                                    if (var.get('u')>Js(255.0)):
                                        var.put('u', Js(255.0))
                                var.get('UVTable').put(var.get('ZigZag').get(var.get('j')), var.get('u'))
                            finally:
                                    (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                        var.put('aasf', Js([Js(1.0), Js(1.387039845), Js(1.306562965), Js(1.175875602), Js(1.0), Js(0.785694958), Js(0.5411961), Js(0.275899379)]))
                        var.put('k', Js(0.0))
                        #for JS loop
                        var.put('row', Js(0.0))
                        while (var.get('row')<Js(8.0)):
                            try:
                                #for JS loop
                                var.put('col', Js(0.0))
                                while (var.get('col')<Js(8.0)):
                                    try:
                                        var.get('fdtbl_Y').put(var.get('k'), (Js(1.0)/(((var.get('YTable').get(var.get('ZigZag').get(var.get('k')))*var.get('aasf').get(var.get('row')))*var.get('aasf').get(var.get('col')))*Js(8.0))))
                                        var.get('fdtbl_UV').put(var.get('k'), (Js(1.0)/(((var.get('UVTable').get(var.get('ZigZag').get(var.get('k')))*var.get('aasf').get(var.get('row')))*var.get('aasf').get(var.get('col')))*Js(8.0))))
                                        (var.put('k',Js(var.get('k').to_number())+Js(1))-Js(1))
                                    finally:
                                            (var.put('col',Js(var.get('col').to_number())+Js(1))-Js(1))
                            finally:
                                    (var.put('row',Js(var.get('row').to_number())+Js(1))-Js(1))
                    PyJsHoisted_initQuantTables_.func_name = 'initQuantTables'
                    var.put('initQuantTables', PyJsHoisted_initQuantTables_)
                    @Js
                    def PyJsHoisted_computeHuffmanTbl_(nrcodes, std_table, this, arguments, var=var):
                        var = Scope({'nrcodes':nrcodes, 'std_table':std_table, 'this':this, 'arguments':arguments}, var)
                        var.registers(['HT', 'std_table', 'codevalue', 'k', 'nrcodes', 'pos_in_table', 'j'])
                        var.put('codevalue', Js(0.0))
                        var.put('pos_in_table', Js(0.0))
                        var.put('HT', var.get('Array').create())
                        #for JS loop
                        var.put('k', Js(1.0))
                        while (var.get('k')<=Js(16.0)):
                            try:
                                #for JS loop
                                var.put('j', Js(1.0))
                                while (var.get('j')<=var.get('nrcodes').get(var.get('k'))):
                                    try:
                                        var.get('HT').put(var.get('std_table').get(var.get('pos_in_table')), Js([]))
                                        var.get('HT').get(var.get('std_table').get(var.get('pos_in_table'))).put('0', var.get('codevalue'))
                                        var.get('HT').get(var.get('std_table').get(var.get('pos_in_table'))).put('1', var.get('k'))
                                        (var.put('pos_in_table',Js(var.get('pos_in_table').to_number())+Js(1))-Js(1))
                                        (var.put('codevalue',Js(var.get('codevalue').to_number())+Js(1))-Js(1))
                                    finally:
                                            (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                                var.put('codevalue', Js(2.0), '*')
                            finally:
                                    (var.put('k',Js(var.get('k').to_number())+Js(1))-Js(1))
                        return var.get('HT')
                    PyJsHoisted_computeHuffmanTbl_.func_name = 'computeHuffmanTbl'
                    var.put('computeHuffmanTbl', PyJsHoisted_computeHuffmanTbl_)
                    @Js
                    def PyJsHoisted_initHuffmanTbl_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        var.put('YDC_HT', var.get('computeHuffmanTbl')(var.get('std_dc_luminance_nrcodes'), var.get('std_dc_luminance_values')))
                        var.put('UVDC_HT', var.get('computeHuffmanTbl')(var.get('std_dc_chrominance_nrcodes'), var.get('std_dc_chrominance_values')))
                        var.put('YAC_HT', var.get('computeHuffmanTbl')(var.get('std_ac_luminance_nrcodes'), var.get('std_ac_luminance_values')))
                        var.put('UVAC_HT', var.get('computeHuffmanTbl')(var.get('std_ac_chrominance_nrcodes'), var.get('std_ac_chrominance_values')))
                    PyJsHoisted_initHuffmanTbl_.func_name = 'initHuffmanTbl'
                    var.put('initHuffmanTbl', PyJsHoisted_initHuffmanTbl_)
                    @Js
                    def PyJsHoisted_initCategoryNumber_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['cat', 'nrlower', 'nr', 'nrneg', 'nrupper'])
                        var.put('nrlower', Js(1.0))
                        var.put('nrupper', Js(2.0))
                        #for JS loop
                        var.put('cat', Js(1.0))
                        while (var.get('cat')<=Js(15.0)):
                            try:
                                #for JS loop
                                var.put('nr', var.get('nrlower'))
                                while (var.get('nr')<var.get('nrupper')):
                                    try:
                                        var.get('category').put((Js(32767.0)+var.get('nr')), var.get('cat'))
                                        var.get('bitcode').put((Js(32767.0)+var.get('nr')), Js([]))
                                        var.get('bitcode').get((Js(32767.0)+var.get('nr'))).put('1', var.get('cat'))
                                        var.get('bitcode').get((Js(32767.0)+var.get('nr'))).put('0', var.get('nr'))
                                    finally:
                                            (var.put('nr',Js(var.get('nr').to_number())+Js(1))-Js(1))
                                #for JS loop
                                var.put('nrneg', (-(var.get('nrupper')-Js(1.0))))
                                while (var.get('nrneg')<=(-var.get('nrlower'))):
                                    try:
                                        var.get('category').put((Js(32767.0)+var.get('nrneg')), var.get('cat'))
                                        var.get('bitcode').put((Js(32767.0)+var.get('nrneg')), Js([]))
                                        var.get('bitcode').get((Js(32767.0)+var.get('nrneg'))).put('1', var.get('cat'))
                                        var.get('bitcode').get((Js(32767.0)+var.get('nrneg'))).put('0', ((var.get('nrupper')-Js(1.0))+var.get('nrneg')))
                                    finally:
                                            (var.put('nrneg',Js(var.get('nrneg').to_number())+Js(1))-Js(1))
                                var.put('nrlower', Js(1.0), '<<')
                                var.put('nrupper', Js(1.0), '<<')
                            finally:
                                    (var.put('cat',Js(var.get('cat').to_number())+Js(1))-Js(1))
                    PyJsHoisted_initCategoryNumber_.func_name = 'initCategoryNumber'
                    var.put('initCategoryNumber', PyJsHoisted_initCategoryNumber_)
                    @Js
                    def PyJsHoisted_initRGBYUVTable_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['i'])
                        #for JS loop
                        var.put('i', Js(0.0))
                        while (var.get('i')<Js(256.0)):
                            try:
                                var.get('RGB_YUV_TABLE').put(var.get('i'), (Js(19595.0)*var.get('i')))
                                var.get('RGB_YUV_TABLE').put(((var.get('i')+Js(256.0))>>Js(0.0)), (Js(38470.0)*var.get('i')))
                                var.get('RGB_YUV_TABLE').put(((var.get('i')+Js(512.0))>>Js(0.0)), ((Js(7471.0)*var.get('i'))+Js(32768)))
                                var.get('RGB_YUV_TABLE').put(((var.get('i')+Js(768.0))>>Js(0.0)), ((-Js(11059.0))*var.get('i')))
                                var.get('RGB_YUV_TABLE').put(((var.get('i')+Js(1024.0))>>Js(0.0)), ((-Js(21709.0))*var.get('i')))
                                var.get('RGB_YUV_TABLE').put(((var.get('i')+Js(1280.0))>>Js(0.0)), ((Js(32768.0)*var.get('i'))+Js(8421375)))
                                var.get('RGB_YUV_TABLE').put(((var.get('i')+Js(1536.0))>>Js(0.0)), ((-Js(27439.0))*var.get('i')))
                                var.get('RGB_YUV_TABLE').put(((var.get('i')+Js(1792.0))>>Js(0.0)), ((-Js(5329.0))*var.get('i')))
                            finally:
                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    PyJsHoisted_initRGBYUVTable_.func_name = 'initRGBYUVTable'
                    var.put('initRGBYUVTable', PyJsHoisted_initRGBYUVTable_)
                    @Js
                    def PyJsHoisted_writeBits_(bs, this, arguments, var=var):
                        var = Scope({'bs':bs, 'this':this, 'arguments':arguments}, var)
                        var.registers(['posval', 'value', 'bs'])
                        var.put('value', var.get('bs').get('0'))
                        var.put('posval', (var.get('bs').get('1')-Js(1.0)))
                        while (var.get('posval')>=Js(0.0)):
                            if (var.get('value')&(Js(1.0)<<var.get('posval'))):
                                var.put('bytenew', (Js(1.0)<<var.get('bytepos')), '|')
                            (var.put('posval',Js(var.get('posval').to_number())-Js(1))+Js(1))
                            (var.put('bytepos',Js(var.get('bytepos').to_number())-Js(1))+Js(1))
                            if (var.get('bytepos')<Js(0.0)):
                                if (var.get('bytenew')==Js(255)):
                                    var.get('writeByte')(Js(255))
                                    var.get('writeByte')(Js(0.0))
                                else:
                                    var.get('writeByte')(var.get('bytenew'))
                                var.put('bytepos', Js(7.0))
                                var.put('bytenew', Js(0.0))
                    PyJsHoisted_writeBits_.func_name = 'writeBits'
                    var.put('writeBits', PyJsHoisted_writeBits_)
                    @Js
                    def PyJsHoisted_writeByte_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        var.get('byteout').callprop('push', var.get('value'))
                    PyJsHoisted_writeByte_.func_name = 'writeByte'
                    var.put('writeByte', PyJsHoisted_writeByte_)
                    @Js
                    def PyJsHoisted_writeWord_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        var.get('writeByte')(((var.get('value')>>Js(8.0))&Js(255)))
                        var.get('writeByte')((var.get('value')&Js(255)))
                    PyJsHoisted_writeWord_.func_name = 'writeWord'
                    var.put('writeWord', PyJsHoisted_writeWord_)
                    @Js
                    def PyJsHoisted_fDCTQuant_(data, fdtbl, this, arguments, var=var):
                        var = Scope({'data':data, 'fdtbl':fdtbl, 'this':this, 'arguments':arguments}, var)
                        var.registers(['tmp5', 'z13p2', 'i', 'd6', 'tmp7', 'tmp12', 'd5', 'tmp3', 'z1', 'tmp4p2', 'tmp0', 'tmp13p2', 'd0', 'fDCTQuant', 'I64', 'tmp1', 'd3', 'tmp6p2', 'z5', 'tmp5p2', 'z11', 'z1p2', 'tmp1p2', 'z3', 'tmp13', 'd4', 'tmp10', 'z13', 'z4p2', 'z3p2', 'z5p2', 'data', 'tmp2', 'tmp0p2', 'z2', 'tmp4', 'z4', 'tmp10p2', 'tmp12p2', 'd2', 'z2p2', 'd1', 'tmp11', 'tmp11p2', 'tmp6', 'dataOff', 'tmp2p2', 'tmp7p2', 'fdtbl', 'z11p2', 'tmp3p2', 'I8', 'd7'])
                        pass
                        var.put('dataOff', Js(0.0))
                        pass
                        var.put('I8', Js(8.0))
                        var.put('I64', Js(64.0))
                        #for JS loop
                        var.put('i', Js(0.0))
                        while (var.get('i')<var.get('I8')):
                            try:
                                var.put('d0', var.get('data').get(var.get('dataOff')))
                                var.put('d1', var.get('data').get((var.get('dataOff')+Js(1.0))))
                                var.put('d2', var.get('data').get((var.get('dataOff')+Js(2.0))))
                                var.put('d3', var.get('data').get((var.get('dataOff')+Js(3.0))))
                                var.put('d4', var.get('data').get((var.get('dataOff')+Js(4.0))))
                                var.put('d5', var.get('data').get((var.get('dataOff')+Js(5.0))))
                                var.put('d6', var.get('data').get((var.get('dataOff')+Js(6.0))))
                                var.put('d7', var.get('data').get((var.get('dataOff')+Js(7.0))))
                                var.put('tmp0', (var.get('d0')+var.get('d7')))
                                var.put('tmp7', (var.get('d0')-var.get('d7')))
                                var.put('tmp1', (var.get('d1')+var.get('d6')))
                                var.put('tmp6', (var.get('d1')-var.get('d6')))
                                var.put('tmp2', (var.get('d2')+var.get('d5')))
                                var.put('tmp5', (var.get('d2')-var.get('d5')))
                                var.put('tmp3', (var.get('d3')+var.get('d4')))
                                var.put('tmp4', (var.get('d3')-var.get('d4')))
                                var.put('tmp10', (var.get('tmp0')+var.get('tmp3')))
                                var.put('tmp13', (var.get('tmp0')-var.get('tmp3')))
                                var.put('tmp11', (var.get('tmp1')+var.get('tmp2')))
                                var.put('tmp12', (var.get('tmp1')-var.get('tmp2')))
                                var.get('data').put(var.get('dataOff'), (var.get('tmp10')+var.get('tmp11')))
                                var.get('data').put((var.get('dataOff')+Js(4.0)), (var.get('tmp10')-var.get('tmp11')))
                                var.put('z1', ((var.get('tmp12')+var.get('tmp13'))*Js(0.707106781)))
                                var.get('data').put((var.get('dataOff')+Js(2.0)), (var.get('tmp13')+var.get('z1')))
                                var.get('data').put((var.get('dataOff')+Js(6.0)), (var.get('tmp13')-var.get('z1')))
                                var.put('tmp10', (var.get('tmp4')+var.get('tmp5')))
                                var.put('tmp11', (var.get('tmp5')+var.get('tmp6')))
                                var.put('tmp12', (var.get('tmp6')+var.get('tmp7')))
                                var.put('z5', ((var.get('tmp10')-var.get('tmp12'))*Js(0.382683433)))
                                var.put('z2', ((Js(0.5411961)*var.get('tmp10'))+var.get('z5')))
                                var.put('z4', ((Js(1.306562965)*var.get('tmp12'))+var.get('z5')))
                                var.put('z3', (var.get('tmp11')*Js(0.707106781)))
                                var.put('z11', (var.get('tmp7')+var.get('z3')))
                                var.put('z13', (var.get('tmp7')-var.get('z3')))
                                var.get('data').put((var.get('dataOff')+Js(5.0)), (var.get('z13')+var.get('z2')))
                                var.get('data').put((var.get('dataOff')+Js(3.0)), (var.get('z13')-var.get('z2')))
                                var.get('data').put((var.get('dataOff')+Js(1.0)), (var.get('z11')+var.get('z4')))
                                var.get('data').put((var.get('dataOff')+Js(7.0)), (var.get('z11')-var.get('z4')))
                                var.put('dataOff', Js(8.0), '+')
                            finally:
                                    var.put('i',Js(var.get('i').to_number())+Js(1))
                        var.put('dataOff', Js(0.0))
                        #for JS loop
                        var.put('i', Js(0.0))
                        while (var.get('i')<var.get('I8')):
                            try:
                                var.put('d0', var.get('data').get(var.get('dataOff')))
                                var.put('d1', var.get('data').get((var.get('dataOff')+Js(8.0))))
                                var.put('d2', var.get('data').get((var.get('dataOff')+Js(16.0))))
                                var.put('d3', var.get('data').get((var.get('dataOff')+Js(24.0))))
                                var.put('d4', var.get('data').get((var.get('dataOff')+Js(32.0))))
                                var.put('d5', var.get('data').get((var.get('dataOff')+Js(40.0))))
                                var.put('d6', var.get('data').get((var.get('dataOff')+Js(48.0))))
                                var.put('d7', var.get('data').get((var.get('dataOff')+Js(56.0))))
                                var.put('tmp0p2', (var.get('d0')+var.get('d7')))
                                var.put('tmp7p2', (var.get('d0')-var.get('d7')))
                                var.put('tmp1p2', (var.get('d1')+var.get('d6')))
                                var.put('tmp6p2', (var.get('d1')-var.get('d6')))
                                var.put('tmp2p2', (var.get('d2')+var.get('d5')))
                                var.put('tmp5p2', (var.get('d2')-var.get('d5')))
                                var.put('tmp3p2', (var.get('d3')+var.get('d4')))
                                var.put('tmp4p2', (var.get('d3')-var.get('d4')))
                                var.put('tmp10p2', (var.get('tmp0p2')+var.get('tmp3p2')))
                                var.put('tmp13p2', (var.get('tmp0p2')-var.get('tmp3p2')))
                                var.put('tmp11p2', (var.get('tmp1p2')+var.get('tmp2p2')))
                                var.put('tmp12p2', (var.get('tmp1p2')-var.get('tmp2p2')))
                                var.get('data').put(var.get('dataOff'), (var.get('tmp10p2')+var.get('tmp11p2')))
                                var.get('data').put((var.get('dataOff')+Js(32.0)), (var.get('tmp10p2')-var.get('tmp11p2')))
                                var.put('z1p2', ((var.get('tmp12p2')+var.get('tmp13p2'))*Js(0.707106781)))
                                var.get('data').put((var.get('dataOff')+Js(16.0)), (var.get('tmp13p2')+var.get('z1p2')))
                                var.get('data').put((var.get('dataOff')+Js(48.0)), (var.get('tmp13p2')-var.get('z1p2')))
                                var.put('tmp10p2', (var.get('tmp4p2')+var.get('tmp5p2')))
                                var.put('tmp11p2', (var.get('tmp5p2')+var.get('tmp6p2')))
                                var.put('tmp12p2', (var.get('tmp6p2')+var.get('tmp7p2')))
                                var.put('z5p2', ((var.get('tmp10p2')-var.get('tmp12p2'))*Js(0.382683433)))
                                var.put('z2p2', ((Js(0.5411961)*var.get('tmp10p2'))+var.get('z5p2')))
                                var.put('z4p2', ((Js(1.306562965)*var.get('tmp12p2'))+var.get('z5p2')))
                                var.put('z3p2', (var.get('tmp11p2')*Js(0.707106781)))
                                var.put('z11p2', (var.get('tmp7p2')+var.get('z3p2')))
                                var.put('z13p2', (var.get('tmp7p2')-var.get('z3p2')))
                                var.get('data').put((var.get('dataOff')+Js(40.0)), (var.get('z13p2')+var.get('z2p2')))
                                var.get('data').put((var.get('dataOff')+Js(24.0)), (var.get('z13p2')-var.get('z2p2')))
                                var.get('data').put((var.get('dataOff')+Js(8.0)), (var.get('z11p2')+var.get('z4p2')))
                                var.get('data').put((var.get('dataOff')+Js(56.0)), (var.get('z11p2')-var.get('z4p2')))
                                (var.put('dataOff',Js(var.get('dataOff').to_number())+Js(1))-Js(1))
                            finally:
                                    var.put('i',Js(var.get('i').to_number())+Js(1))
                        pass
                        #for JS loop
                        var.put('i', Js(0.0))
                        while (var.get('i')<var.get('I64')):
                            try:
                                var.put('fDCTQuant', (var.get('data').get(var.get('i'))*var.get('fdtbl').get(var.get('i'))))
                                var.get('outputfDCTQuant').put(var.get('i'), (((var.get('fDCTQuant')+Js(0.5))|Js(0.0)) if (var.get('fDCTQuant')>Js(0.0)) else ((var.get('fDCTQuant')-Js(0.5))|Js(0.0))))
                            finally:
                                    var.put('i',Js(var.get('i').to_number())+Js(1))
                        return var.get('outputfDCTQuant')
                    PyJsHoisted_fDCTQuant_.func_name = 'fDCTQuant'
                    var.put('fDCTQuant', PyJsHoisted_fDCTQuant_)
                    @Js
                    def PyJsHoisted_writeAPP0_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        var.get('writeWord')(Js(65504))
                        var.get('writeWord')(Js(16.0))
                        var.get('writeByte')(Js(74))
                        var.get('writeByte')(Js(70))
                        var.get('writeByte')(Js(73))
                        var.get('writeByte')(Js(70))
                        var.get('writeByte')(Js(0.0))
                        var.get('writeByte')(Js(1.0))
                        var.get('writeByte')(Js(1.0))
                        var.get('writeByte')(Js(0.0))
                        var.get('writeWord')(Js(1.0))
                        var.get('writeWord')(Js(1.0))
                        var.get('writeByte')(Js(0.0))
                        var.get('writeByte')(Js(0.0))
                    PyJsHoisted_writeAPP0_.func_name = 'writeAPP0'
                    var.put('writeAPP0', PyJsHoisted_writeAPP0_)
                    @Js
                    def PyJsHoisted_writeSOF0_(width, height, this, arguments, var=var):
                        var = Scope({'width':width, 'height':height, 'this':this, 'arguments':arguments}, var)
                        var.registers(['width', 'height'])
                        var.get('writeWord')(Js(65472))
                        var.get('writeWord')(Js(17.0))
                        var.get('writeByte')(Js(8.0))
                        var.get('writeWord')(var.get('height'))
                        var.get('writeWord')(var.get('width'))
                        var.get('writeByte')(Js(3.0))
                        var.get('writeByte')(Js(1.0))
                        var.get('writeByte')(Js(17))
                        var.get('writeByte')(Js(0.0))
                        var.get('writeByte')(Js(2.0))
                        var.get('writeByte')(Js(17))
                        var.get('writeByte')(Js(1.0))
                        var.get('writeByte')(Js(3.0))
                        var.get('writeByte')(Js(17))
                        var.get('writeByte')(Js(1.0))
                    PyJsHoisted_writeSOF0_.func_name = 'writeSOF0'
                    var.put('writeSOF0', PyJsHoisted_writeSOF0_)
                    @Js
                    def PyJsHoisted_writeDQT_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['i', 'j'])
                        var.get('writeWord')(Js(65499))
                        var.get('writeWord')(Js(132.0))
                        var.get('writeByte')(Js(0.0))
                        #for JS loop
                        var.put('i', Js(0.0))
                        while (var.get('i')<Js(64.0)):
                            try:
                                var.get('writeByte')(var.get('YTable').get(var.get('i')))
                            finally:
                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                        var.get('writeByte')(Js(1.0))
                        #for JS loop
                        var.put('j', Js(0.0))
                        while (var.get('j')<Js(64.0)):
                            try:
                                var.get('writeByte')(var.get('UVTable').get(var.get('j')))
                            finally:
                                    (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                    PyJsHoisted_writeDQT_.func_name = 'writeDQT'
                    var.put('writeDQT', PyJsHoisted_writeDQT_)
                    @Js
                    def PyJsHoisted_writeDHT_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['n', 'p', 'i', 'm', 'l', 'o', 'k', 'j'])
                        var.get('writeWord')(Js(65476))
                        var.get('writeWord')(Js(418))
                        var.get('writeByte')(Js(0.0))
                        #for JS loop
                        var.put('i', Js(0.0))
                        while (var.get('i')<Js(16.0)):
                            try:
                                var.get('writeByte')(var.get('std_dc_luminance_nrcodes').get((var.get('i')+Js(1.0))))
                            finally:
                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                        #for JS loop
                        var.put('j', Js(0.0))
                        while (var.get('j')<=Js(11.0)):
                            try:
                                var.get('writeByte')(var.get('std_dc_luminance_values').get(var.get('j')))
                            finally:
                                    (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                        var.get('writeByte')(Js(16))
                        #for JS loop
                        var.put('k', Js(0.0))
                        while (var.get('k')<Js(16.0)):
                            try:
                                var.get('writeByte')(var.get('std_ac_luminance_nrcodes').get((var.get('k')+Js(1.0))))
                            finally:
                                    (var.put('k',Js(var.get('k').to_number())+Js(1))-Js(1))
                        #for JS loop
                        var.put('l', Js(0.0))
                        while (var.get('l')<=Js(161.0)):
                            try:
                                var.get('writeByte')(var.get('std_ac_luminance_values').get(var.get('l')))
                            finally:
                                    (var.put('l',Js(var.get('l').to_number())+Js(1))-Js(1))
                        var.get('writeByte')(Js(1.0))
                        #for JS loop
                        var.put('m', Js(0.0))
                        while (var.get('m')<Js(16.0)):
                            try:
                                var.get('writeByte')(var.get('std_dc_chrominance_nrcodes').get((var.get('m')+Js(1.0))))
                            finally:
                                    (var.put('m',Js(var.get('m').to_number())+Js(1))-Js(1))
                        #for JS loop
                        var.put('n', Js(0.0))
                        while (var.get('n')<=Js(11.0)):
                            try:
                                var.get('writeByte')(var.get('std_dc_chrominance_values').get(var.get('n')))
                            finally:
                                    (var.put('n',Js(var.get('n').to_number())+Js(1))-Js(1))
                        var.get('writeByte')(Js(17))
                        #for JS loop
                        var.put('o', Js(0.0))
                        while (var.get('o')<Js(16.0)):
                            try:
                                var.get('writeByte')(var.get('std_ac_chrominance_nrcodes').get((var.get('o')+Js(1.0))))
                            finally:
                                    (var.put('o',Js(var.get('o').to_number())+Js(1))-Js(1))
                        #for JS loop
                        var.put('p', Js(0.0))
                        while (var.get('p')<=Js(161.0)):
                            try:
                                var.get('writeByte')(var.get('std_ac_chrominance_values').get(var.get('p')))
                            finally:
                                    (var.put('p',Js(var.get('p').to_number())+Js(1))-Js(1))
                    PyJsHoisted_writeDHT_.func_name = 'writeDHT'
                    var.put('writeDHT', PyJsHoisted_writeDHT_)
                    @Js
                    def PyJsHoisted_writeSOS_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        var.get('writeWord')(Js(65498))
                        var.get('writeWord')(Js(12.0))
                        var.get('writeByte')(Js(3.0))
                        var.get('writeByte')(Js(1.0))
                        var.get('writeByte')(Js(0.0))
                        var.get('writeByte')(Js(2.0))
                        var.get('writeByte')(Js(17))
                        var.get('writeByte')(Js(3.0))
                        var.get('writeByte')(Js(17))
                        var.get('writeByte')(Js(0.0))
                        var.get('writeByte')(Js(63))
                        var.get('writeByte')(Js(0.0))
                    PyJsHoisted_writeSOS_.func_name = 'writeSOS'
                    var.put('writeSOS', PyJsHoisted_writeSOS_)
                    @Js
                    def PyJsHoisted_processDU_(CDU, fdtbl, DC, HTDC, HTAC, this, arguments, var=var):
                        var = Scope({'CDU':CDU, 'fdtbl':fdtbl, 'DC':DC, 'HTDC':HTDC, 'HTAC':HTAC, 'this':this, 'arguments':arguments}, var)
                        var.registers(['i', 'Diff', 'I63', 'DU_DCT', 'CDU', 'j', 'HTAC', 'EOB', 'nrmarker', 'I64', 'HTDC', 'startpos', 'pos', 'DC', 'I16', 'M16zeroes', 'end0pos', 'nrzeroes', 'lng', 'fdtbl'])
                        var.put('EOB', var.get('HTAC').get('0'))
                        var.put('M16zeroes', var.get('HTAC').get('240'))
                        pass
                        var.put('I16', Js(16.0))
                        var.put('I63', Js(63.0))
                        var.put('I64', Js(64.0))
                        var.put('DU_DCT', var.get('fDCTQuant')(var.get('CDU'), var.get('fdtbl')))
                        #for JS loop
                        var.put('j', Js(0.0))
                        while (var.get('j')<var.get('I64')):
                            try:
                                var.get('DU').put(var.get('ZigZag').get(var.get('j')), var.get('DU_DCT').get(var.get('j')))
                            finally:
                                    var.put('j',Js(var.get('j').to_number())+Js(1))
                        var.put('Diff', (var.get('DU').get('0')-var.get('DC')))
                        var.put('DC', var.get('DU').get('0'))
                        if (var.get('Diff')==Js(0.0)):
                            var.get('writeBits')(var.get('HTDC').get('0'))
                        else:
                            var.put('pos', (Js(32767.0)+var.get('Diff')))
                            var.get('writeBits')(var.get('HTDC').get(var.get('category').get(var.get('pos'))))
                            var.get('writeBits')(var.get('bitcode').get(var.get('pos')))
                        var.put('end0pos', Js(63.0))
                        #for JS loop
                        
                        while ((var.get('end0pos')>Js(0.0)) and (var.get('DU').get(var.get('end0pos'))==Js(0.0))):
                            try:
                                pass
                            finally:
                                    (var.put('end0pos',Js(var.get('end0pos').to_number())-Js(1))+Js(1))
                        pass
                        if (var.get('end0pos')==Js(0.0)):
                            var.get('writeBits')(var.get('EOB'))
                            return var.get('DC')
                        var.put('i', Js(1.0))
                        pass
                        while (var.get('i')<=var.get('end0pos')):
                            var.put('startpos', var.get('i'))
                            #for JS loop
                            
                            while ((var.get('DU').get(var.get('i'))==Js(0.0)) and (var.get('i')<=var.get('end0pos'))):
                                try:
                                    pass
                                finally:
                                        var.put('i',Js(var.get('i').to_number())+Js(1))
                            var.put('nrzeroes', (var.get('i')-var.get('startpos')))
                            if (var.get('nrzeroes')>=var.get('I16')):
                                var.put('lng', (var.get('nrzeroes')>>Js(4.0)))
                                #for JS loop
                                var.put('nrmarker', Js(1.0))
                                while (var.get('nrmarker')<=var.get('lng')):
                                    try:
                                        var.get('writeBits')(var.get('M16zeroes'))
                                    finally:
                                            var.put('nrmarker',Js(var.get('nrmarker').to_number())+Js(1))
                                var.put('nrzeroes', (var.get('nrzeroes')&Js(15)))
                            var.put('pos', (Js(32767.0)+var.get('DU').get(var.get('i'))))
                            var.get('writeBits')(var.get('HTAC').get(((var.get('nrzeroes')<<Js(4.0))+var.get('category').get(var.get('pos')))))
                            var.get('writeBits')(var.get('bitcode').get(var.get('pos')))
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                        if (var.get('end0pos')!=var.get('I63')):
                            var.get('writeBits')(var.get('EOB'))
                        return var.get('DC')
                    PyJsHoisted_processDU_.func_name = 'processDU'
                    var.put('processDU', PyJsHoisted_processDU_)
                    @Js
                    def PyJsHoisted_initCharLookupTable_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['sfcc', 'i'])
                        var.put('sfcc', var.get('String').get('fromCharCode'))
                        #for JS loop
                        var.put('i', Js(0.0))
                        while (var.get('i')<Js(256.0)):
                            try:
                                var.get('clt').put(var.get('i'), var.get('sfcc')(var.get('i')))
                            finally:
                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    PyJsHoisted_initCharLookupTable_.func_name = 'initCharLookupTable'
                    var.put('initCharLookupTable', PyJsHoisted_initCharLookupTable_)
                    @Js
                    def PyJsHoisted_setQuality_(quality, this, arguments, var=var):
                        var = Scope({'quality':quality, 'this':this, 'arguments':arguments}, var)
                        var.registers(['quality', 'sf'])
                        if (var.get('quality')<=Js(0.0)):
                            var.put('quality', Js(1.0))
                        if (var.get('quality')>Js(100.0)):
                            var.put('quality', Js(100.0))
                        if (var.get('currentQuality')==var.get('quality')):
                            return var.get('undefined')
                        var.put('sf', Js(0.0))
                        if (var.get('quality')<Js(50.0)):
                            var.put('sf', var.get('Math').callprop('floor', (Js(5000.0)/var.get('quality'))))
                        else:
                            var.put('sf', var.get('Math').callprop('floor', (Js(200.0)-(var.get('quality')*Js(2.0)))))
                        var.get('initQuantTables')(var.get('sf'))
                        var.put('currentQuality', var.get('quality'))
                    PyJsHoisted_setQuality_.func_name = 'setQuality'
                    var.put('setQuality', PyJsHoisted_setQuality_)
                    @Js
                    def PyJsHoisted_init_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['time_start', 'duration'])
                        var.put('time_start', var.get('Date').create().callprop('getTime'))
                        if var.get('quality').neg():
                            var.put('quality', Js(50.0))
                        var.get('initCharLookupTable')()
                        var.get('initHuffmanTbl')()
                        var.get('initCategoryNumber')()
                        var.get('initRGBYUVTable')()
                        var.get('setQuality')(var.get('quality'))
                        var.put('duration', (var.get('Date').create().callprop('getTime')-var.get('time_start')))
                    PyJsHoisted_init_.func_name = 'init'
                    var.put('init', PyJsHoisted_init_)
                    var.put('self', var.get(u"this"))
                    var.put('fround', var.get('Math').get('round'))
                    var.put('ffloor', var.get('Math').get('floor'))
                    var.put('YTable', var.get('Array').create(Js(64.0)))
                    var.put('UVTable', var.get('Array').create(Js(64.0)))
                    var.put('fdtbl_Y', var.get('Array').create(Js(64.0)))
                    var.put('fdtbl_UV', var.get('Array').create(Js(64.0)))
                    pass
                    pass
                    pass
                    pass
                    var.put('bitcode', var.get('Array').create(Js(65535.0)))
                    var.put('category', var.get('Array').create(Js(65535.0)))
                    var.put('outputfDCTQuant', var.get('Array').create(Js(64.0)))
                    var.put('DU', var.get('Array').create(Js(64.0)))
                    var.put('byteout', Js([]))
                    var.put('bytenew', Js(0.0))
                    var.put('bytepos', Js(7.0))
                    var.put('YDU', var.get('Array').create(Js(64.0)))
                    var.put('UDU', var.get('Array').create(Js(64.0)))
                    var.put('VDU', var.get('Array').create(Js(64.0)))
                    var.put('clt', var.get('Array').create(Js(256.0)))
                    var.put('RGB_YUV_TABLE', var.get('Array').create(Js(2048.0)))
                    pass
                    var.put('ZigZag', Js([Js(0.0), Js(1.0), Js(5.0), Js(6.0), Js(14.0), Js(15.0), Js(27.0), Js(28.0), Js(2.0), Js(4.0), Js(7.0), Js(13.0), Js(16.0), Js(26.0), Js(29.0), Js(42.0), Js(3.0), Js(8.0), Js(12.0), Js(17.0), Js(25.0), Js(30.0), Js(41.0), Js(43.0), Js(9.0), Js(11.0), Js(18.0), Js(24.0), Js(31.0), Js(40.0), Js(44.0), Js(53.0), Js(10.0), Js(19.0), Js(23.0), Js(32.0), Js(39.0), Js(45.0), Js(52.0), Js(54.0), Js(20.0), Js(22.0), Js(33.0), Js(38.0), Js(46.0), Js(51.0), Js(55.0), Js(60.0), Js(21.0), Js(34.0), Js(37.0), Js(47.0), Js(50.0), Js(56.0), Js(59.0), Js(61.0), Js(35.0), Js(36.0), Js(48.0), Js(49.0), Js(57.0), Js(58.0), Js(62.0), Js(63.0)]))
                    var.put('std_dc_luminance_nrcodes', Js([Js(0.0), Js(0.0), Js(1.0), Js(5.0), Js(1.0), Js(1.0), Js(1.0), Js(1.0), Js(1.0), Js(1.0), Js(0.0), Js(0.0), Js(0.0), Js(0.0), Js(0.0), Js(0.0), Js(0.0)]))
                    var.put('std_dc_luminance_values', Js([Js(0.0), Js(1.0), Js(2.0), Js(3.0), Js(4.0), Js(5.0), Js(6.0), Js(7.0), Js(8.0), Js(9.0), Js(10.0), Js(11.0)]))
                    var.put('std_ac_luminance_nrcodes', Js([Js(0.0), Js(0.0), Js(2.0), Js(1.0), Js(3.0), Js(3.0), Js(2.0), Js(4.0), Js(3.0), Js(5.0), Js(5.0), Js(4.0), Js(4.0), Js(0.0), Js(0.0), Js(1.0), Js(125)]))
                    var.put('std_ac_luminance_values', Js([Js(1), Js(2), Js(3), Js(0), Js(4), Js(17), Js(5), Js(18), Js(33), Js(49), Js(65), Js(6), Js(19), Js(81), Js(97), Js(7), Js(34), Js(113), Js(20), Js(50), Js(129), Js(145), Js(161), Js(8), Js(35), Js(66), Js(177), Js(193), Js(21), Js(82), Js(209), Js(240), Js(36), Js(51), Js(98), Js(114), Js(130), Js(9), Js(10), Js(22), Js(23), Js(24), Js(25), Js(26), Js(37), Js(38), Js(39), Js(40), Js(41), Js(42), Js(52), Js(53), Js(54), Js(55), Js(56), Js(57), Js(58), Js(67), Js(68), Js(69), Js(70), Js(71), Js(72), Js(73), Js(74), Js(83), Js(84), Js(85), Js(86), Js(87), Js(88), Js(89), Js(90), Js(99), Js(100), Js(101), Js(102), Js(103), Js(104), Js(105), Js(106), Js(115), Js(116), Js(117), Js(118), Js(119), Js(120), Js(121), Js(122), Js(131), Js(132), Js(133), Js(134), Js(135), Js(136), Js(137), Js(138), Js(146), Js(147), Js(148), Js(149), Js(150), Js(151), Js(152), Js(153), Js(154), Js(162), Js(163), Js(164), Js(165), Js(166), Js(167), Js(168), Js(169), Js(170), Js(178), Js(179), Js(180), Js(181), Js(182), Js(183), Js(184), Js(185), Js(186), Js(194), Js(195), Js(196), Js(197), Js(198), Js(199), Js(200), Js(201), Js(202), Js(210), Js(211), Js(212), Js(213), Js(214), Js(215), Js(216), Js(217), Js(218), Js(225), Js(226), Js(227), Js(228), Js(229), Js(230), Js(231), Js(232), Js(233), Js(234), Js(241), Js(242), Js(243), Js(244), Js(245), Js(246), Js(247), Js(248), Js(249), Js(250)]))
                    var.put('std_dc_chrominance_nrcodes', Js([Js(0.0), Js(0.0), Js(3.0), Js(1.0), Js(1.0), Js(1.0), Js(1.0), Js(1.0), Js(1.0), Js(1.0), Js(1.0), Js(1.0), Js(0.0), Js(0.0), Js(0.0), Js(0.0), Js(0.0)]))
                    var.put('std_dc_chrominance_values', Js([Js(0.0), Js(1.0), Js(2.0), Js(3.0), Js(4.0), Js(5.0), Js(6.0), Js(7.0), Js(8.0), Js(9.0), Js(10.0), Js(11.0)]))
                    var.put('std_ac_chrominance_nrcodes', Js([Js(0.0), Js(0.0), Js(2.0), Js(1.0), Js(2.0), Js(4.0), Js(4.0), Js(3.0), Js(4.0), Js(7.0), Js(5.0), Js(4.0), Js(4.0), Js(0.0), Js(1.0), Js(2.0), Js(119)]))
                    var.put('std_ac_chrominance_values', Js([Js(0), Js(1), Js(2), Js(3), Js(17), Js(4), Js(5), Js(33), Js(49), Js(6), Js(18), Js(65), Js(81), Js(7), Js(97), Js(113), Js(19), Js(34), Js(50), Js(129), Js(8), Js(20), Js(66), Js(145), Js(161), Js(177), Js(193), Js(9), Js(35), Js(51), Js(82), Js(240), Js(21), Js(98), Js(114), Js(209), Js(10), Js(22), Js(36), Js(52), Js(225), Js(37), Js(241), Js(23), Js(24), Js(25), Js(26), Js(38), Js(39), Js(40), Js(41), Js(42), Js(53), Js(54), Js(55), Js(56), Js(57), Js(58), Js(67), Js(68), Js(69), Js(70), Js(71), Js(72), Js(73), Js(74), Js(83), Js(84), Js(85), Js(86), Js(87), Js(88), Js(89), Js(90), Js(99), Js(100), Js(101), Js(102), Js(103), Js(104), Js(105), Js(106), Js(115), Js(116), Js(117), Js(118), Js(119), Js(120), Js(121), Js(122), Js(130), Js(131), Js(132), Js(133), Js(134), Js(135), Js(136), Js(137), Js(138), Js(146), Js(147), Js(148), Js(149), Js(150), Js(151), Js(152), Js(153), Js(154), Js(162), Js(163), Js(164), Js(165), Js(166), Js(167), Js(168), Js(169), Js(170), Js(178), Js(179), Js(180), Js(181), Js(182), Js(183), Js(184), Js(185), Js(186), Js(194), Js(195), Js(196), Js(197), Js(198), Js(199), Js(200), Js(201), Js(202), Js(210), Js(211), Js(212), Js(213), Js(214), Js(215), Js(216), Js(217), Js(218), Js(226), Js(227), Js(228), Js(229), Js(230), Js(231), Js(232), Js(233), Js(234), Js(242), Js(243), Js(244), Js(245), Js(246), Js(247), Js(248), Js(249), Js(250)]))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_2042_(image, quality, this, arguments, var=var):
                        var = Scope({'image':image, 'quality':quality, 'this':this, 'arguments':arguments}, var)
                        var.registers(['b', 'row', 'start', 'quality', 'duration', 'quadWidth', 'DCV', 'tripleWidth', 'DCY', 'DCU', 'image', 'pos', 'y', 'p', 'jpegDataUri', 'width', 'time_start', 'col', 'g', 'r', 'x', 'height', 'imageData', 'fillbits'])
                        var.put('time_start', var.get('Date').create().callprop('getTime'))
                        if var.get('quality'):
                            var.get('setQuality')(var.get('quality'))
                        var.put('byteout', var.get('Array').create())
                        var.put('bytenew', Js(0.0))
                        var.put('bytepos', Js(7.0))
                        var.get('writeWord')(Js(65496))
                        var.get('writeAPP0')()
                        var.get('writeDQT')()
                        var.get('writeSOF0')(var.get('image').get('width'), var.get('image').get('height'))
                        var.get('writeDHT')()
                        var.get('writeSOS')()
                        var.put('DCY', Js(0.0))
                        var.put('DCU', Js(0.0))
                        var.put('DCV', Js(0.0))
                        var.put('bytenew', Js(0.0))
                        var.put('bytepos', Js(7.0))
                        var.get(u"this").get('encode').put('displayName', Js('_encode_'))
                        var.put('imageData', var.get('image').get('data'))
                        var.put('width', var.get('image').get('width'))
                        var.put('height', var.get('image').get('height'))
                        var.put('quadWidth', (var.get('width')*Js(4.0)))
                        var.put('tripleWidth', (var.get('width')*Js(3.0)))
                        var.put('y', Js(0.0))
                        pass
                        pass
                        while (var.get('y')<var.get('height')):
                            var.put('x', Js(0.0))
                            while (var.get('x')<var.get('quadWidth')):
                                var.put('start', ((var.get('quadWidth')*var.get('y'))+var.get('x')))
                                var.put('p', var.get('start'))
                                var.put('col', (-Js(1.0)))
                                var.put('row', Js(0.0))
                                #for JS loop
                                var.put('pos', Js(0.0))
                                while (var.get('pos')<Js(64.0)):
                                    try:
                                        var.put('row', (var.get('pos')>>Js(3.0)))
                                        var.put('col', ((var.get('pos')&Js(7.0))*Js(4.0)))
                                        var.put('p', ((var.get('start')+(var.get('row')*var.get('quadWidth')))+var.get('col')))
                                        if ((var.get('y')+var.get('row'))>=var.get('height')):
                                            var.put('p', (var.get('quadWidth')*(((var.get('y')+Js(1.0))+var.get('row'))-var.get('height'))), '-')
                                        if ((var.get('x')+var.get('col'))>=var.get('quadWidth')):
                                            var.put('p', (((var.get('x')+var.get('col'))-var.get('quadWidth'))+Js(4.0)), '-')
                                        var.put('r', var.get('imageData').get((var.put('p',Js(var.get('p').to_number())+Js(1))-Js(1))))
                                        var.put('g', var.get('imageData').get((var.put('p',Js(var.get('p').to_number())+Js(1))-Js(1))))
                                        var.put('b', var.get('imageData').get((var.put('p',Js(var.get('p').to_number())+Js(1))-Js(1))))
                                        var.get('YDU').put(var.get('pos'), ((((var.get('RGB_YUV_TABLE').get(var.get('r'))+var.get('RGB_YUV_TABLE').get(((var.get('g')+Js(256.0))>>Js(0.0))))+var.get('RGB_YUV_TABLE').get(((var.get('b')+Js(512.0))>>Js(0.0))))>>Js(16.0))-Js(128.0)))
                                        var.get('UDU').put(var.get('pos'), ((((var.get('RGB_YUV_TABLE').get(((var.get('r')+Js(768.0))>>Js(0.0)))+var.get('RGB_YUV_TABLE').get(((var.get('g')+Js(1024.0))>>Js(0.0))))+var.get('RGB_YUV_TABLE').get(((var.get('b')+Js(1280.0))>>Js(0.0))))>>Js(16.0))-Js(128.0)))
                                        var.get('VDU').put(var.get('pos'), ((((var.get('RGB_YUV_TABLE').get(((var.get('r')+Js(1280.0))>>Js(0.0)))+var.get('RGB_YUV_TABLE').get(((var.get('g')+Js(1536.0))>>Js(0.0))))+var.get('RGB_YUV_TABLE').get(((var.get('b')+Js(1792.0))>>Js(0.0))))>>Js(16.0))-Js(128.0)))
                                    finally:
                                            (var.put('pos',Js(var.get('pos').to_number())+Js(1))-Js(1))
                                var.put('DCY', var.get('processDU')(var.get('YDU'), var.get('fdtbl_Y'), var.get('DCY'), var.get('YDC_HT'), var.get('YAC_HT')))
                                var.put('DCU', var.get('processDU')(var.get('UDU'), var.get('fdtbl_UV'), var.get('DCU'), var.get('UVDC_HT'), var.get('UVAC_HT')))
                                var.put('DCV', var.get('processDU')(var.get('VDU'), var.get('fdtbl_UV'), var.get('DCV'), var.get('UVDC_HT'), var.get('UVAC_HT')))
                                var.put('x', Js(32.0), '+')
                            var.put('y', Js(8.0), '+')
                        if (var.get('bytepos')>=Js(0.0)):
                            var.put('fillbits', Js([]))
                            var.get('fillbits').put('1', (var.get('bytepos')+Js(1.0)))
                            var.get('fillbits').put('0', ((Js(1.0)<<(var.get('bytepos')+Js(1.0)))-Js(1.0)))
                            var.get('writeBits')(var.get('fillbits'))
                        var.get('writeWord')(Js(65497))
                        return var.get('Buffer').create(var.get('byteout'))
                        var.put('jpegDataUri', (Js('data:image/jpeg;base64,')+var.get('btoa')(var.get('byteout').callprop('join', Js('')))))
                        var.put('byteout', Js([]))
                        var.put('duration', (var.get('Date').create().callprop('getTime')-var.get('time_start')))
                        return var.get('jpegDataUri')
                    PyJs_anonymous_2042_._set_name('anonymous')
                    var.get(u"this").put('encode', PyJs_anonymous_2042_)
                    pass
                    pass
                    var.get('init')()
                PyJsHoisted_JPEGEncoder_.func_name = 'JPEGEncoder'
                var.put('JPEGEncoder', PyJsHoisted_JPEGEncoder_)
                @Js
                def PyJsHoisted_encode_(imgData, qu, this, arguments, var=var):
                    var = Scope({'imgData':imgData, 'qu':qu, 'this':this, 'arguments':arguments}, var)
                    var.registers(['qu', 'data', 'encoder', 'imgData'])
                    if PyJsStrictEq(var.get('qu',throw=False).typeof(),Js('undefined')):
                        var.put('qu', Js(50.0))
                    var.put('encoder', var.get('JPEGEncoder').create(var.get('qu')))
                    var.put('data', var.get('encoder').callprop('encode', var.get('imgData'), var.get('qu')))
                    return Js({'data':var.get('data'),'width':var.get('imgData').get('width'),'height':var.get('imgData').get('height')})
                PyJsHoisted_encode_.func_name = 'encode'
                var.put('encode', PyJsHoisted_encode_)
                @Js
                def PyJsHoisted_getImageDataFromImage_(idOrElement, this, arguments, var=var):
                    var = Scope({'idOrElement':idOrElement, 'this':this, 'arguments':arguments}, var)
                    var.registers(['ctx', 'cvs', 'idOrElement', 'theImg'])
                    var.put('theImg', (var.get('document').callprop('getElementById', var.get('idOrElement')) if (var.get('idOrElement',throw=False).typeof()==Js('string')) else var.get('idOrElement')))
                    var.put('cvs', var.get('document').callprop('createElement', Js('canvas')))
                    var.get('cvs').put('width', var.get('theImg').get('width'))
                    var.get('cvs').put('height', var.get('theImg').get('height'))
                    var.put('ctx', var.get('cvs').callprop('getContext', Js('2d')))
                    var.get('ctx').callprop('drawImage', var.get('theImg'), Js(0.0), Js(0.0))
                    return var.get('ctx').callprop('getImageData', Js(0.0), Js(0.0), var.get('cvs').get('width'), var.get('cvs').get('height'))
                PyJsHoisted_getImageDataFromImage_.func_name = 'getImageDataFromImage'
                var.put('getImageDataFromImage', PyJsHoisted_getImageDataFromImage_)
                @Js
                def PyJs_anonymous_2041_(buf, this, arguments, var=var):
                    var = Scope({'buf':buf, 'this':this, 'arguments':arguments}, var)
                    var.registers(['buf'])
                    return var.get('Buffer').create(var.get('buf')).callprop('toString', Js('base64'))
                PyJs_anonymous_2041_._set_name('anonymous')
                var.put('btoa', (var.get('btoa') or PyJs_anonymous_2041_))
                pass
                pass
                if PyJsStrictNeq((Js('undefined') if PyJsStrictEq(var.get('module',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('module'))),var.get('undefined')):
                    var.get('module').put('exports', var.get('encode'))
                pass
                pass
            PyJs_anonymous_2040_._set_name('anonymous')
            PyJs_anonymous_2040_.callprop('call', var.get(u"this"))
        PyJs_anonymous_2039_._set_name('anonymous')
        PyJs_anonymous_2039_.callprop('call', var.get(u"this"), var.get('require')(Js('buffer')).get('Buffer'))
    PyJs_anonymous_2038_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2043_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_2044_(Buffer, this, arguments, var=var):
            var = Scope({'Buffer':Buffer, 'this':this, 'arguments':arguments}, var)
            var.registers(['Buffer'])
            @Js
            def PyJs_anonymous_2045_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['writeFile', 'readFileSync', 'stringify', 'jsonfile', 'writeFileSync', 'stripBom', 'readFile', '_fs'])
                @Js
                def PyJsHoisted_readFile_(file, options, callback, this, arguments, var=var):
                    var = Scope({'file':file, 'options':options, 'callback':callback, 'this':this, 'arguments':arguments}, var)
                    var.registers(['callback', 'shouldThrow', 'options', 'fs', 'file'])
                    if (var.get('callback')==var.get(u"null")):
                        var.put('callback', var.get('options'))
                        var.put('options', Js({}))
                    if PyJsStrictEq(var.get('options',throw=False).typeof(),Js('string')):
                        var.put('options', Js({'encoding':var.get('options')}))
                    var.put('options', (var.get('options') or Js({})))
                    var.put('fs', (var.get('options').get('fs') or var.get('_fs')))
                    var.put('shouldThrow', Js(True))
                    if var.get('options').contains(Js('throws')):
                        var.put('shouldThrow', var.get('options').get('throws'))
                    @Js
                    def PyJs_anonymous_2046_(err, data, this, arguments, var=var):
                        var = Scope({'err':err, 'data':data, 'this':this, 'arguments':arguments}, var)
                        var.registers(['err', 'data', 'obj'])
                        if var.get('err'):
                            return var.get('callback')(var.get('err'))
                        var.put('data', var.get('stripBom')(var.get('data')))
                        pass
                        try:
                            var.put('obj', var.get('JSON').callprop('parse', var.get('data'), (var.get('options').get('reviver') if var.get('options') else var.get(u"null"))))
                        except PyJsException as PyJsTempException:
                            PyJsHolder_65727232_53749256 = var.own.get('err2')
                            var.force_own_put('err2', PyExceptionToJs(PyJsTempException))
                            try:
                                if var.get('shouldThrow'):
                                    var.get('err2').put('message', ((var.get('file')+Js(': '))+var.get('err2').get('message')))
                                    return var.get('callback')(var.get('err2'))
                                else:
                                    return var.get('callback')(var.get(u"null"), var.get(u"null"))
                            finally:
                                if PyJsHolder_65727232_53749256 is not None:
                                    var.own['err2'] = PyJsHolder_65727232_53749256
                                else:
                                    del var.own['err2']
                                del PyJsHolder_65727232_53749256
                        var.get('callback')(var.get(u"null"), var.get('obj'))
                    PyJs_anonymous_2046_._set_name('anonymous')
                    var.get('fs').callprop('readFile', var.get('file'), var.get('options'), PyJs_anonymous_2046_)
                PyJsHoisted_readFile_.func_name = 'readFile'
                var.put('readFile', PyJsHoisted_readFile_)
                @Js
                def PyJsHoisted_readFileSync_(file, options, this, arguments, var=var):
                    var = Scope({'file':file, 'options':options, 'this':this, 'arguments':arguments}, var)
                    var.registers(['shouldThrow', 'options', 'fs', 'file', 'content'])
                    var.put('options', (var.get('options') or Js({})))
                    if PyJsStrictEq(var.get('options',throw=False).typeof(),Js('string')):
                        var.put('options', Js({'encoding':var.get('options')}))
                    var.put('fs', (var.get('options').get('fs') or var.get('_fs')))
                    var.put('shouldThrow', Js(True))
                    if var.get('options').contains(Js('throws')):
                        var.put('shouldThrow', var.get('options').get('throws'))
                    try:
                        var.put('content', var.get('fs').callprop('readFileSync', var.get('file'), var.get('options')))
                        var.put('content', var.get('stripBom')(var.get('content')))
                        return var.get('JSON').callprop('parse', var.get('content'), var.get('options').get('reviver'))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_657272_67499130 = var.own.get('err')
                        var.force_own_put('err', PyExceptionToJs(PyJsTempException))
                        try:
                            if var.get('shouldThrow'):
                                var.get('err').put('message', ((var.get('file')+Js(': '))+var.get('err').get('message')))
                                PyJsTempException = JsToPyException(var.get('err'))
                                raise PyJsTempException
                            else:
                                return var.get(u"null")
                        finally:
                            if PyJsHolder_657272_67499130 is not None:
                                var.own['err'] = PyJsHolder_657272_67499130
                            else:
                                del var.own['err']
                            del PyJsHolder_657272_67499130
                PyJsHoisted_readFileSync_.func_name = 'readFileSync'
                var.put('readFileSync', PyJsHoisted_readFileSync_)
                @Js
                def PyJsHoisted_stringify_(obj, options, this, arguments, var=var):
                    var = Scope({'obj':obj, 'options':options, 'this':this, 'arguments':arguments}, var)
                    var.registers(['spaces', 'str', 'options', 'EOL', 'obj'])
                    pass
                    var.put('EOL', Js('\n'))
                    if (PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('options',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('options'))),Js('object')) and PyJsStrictNeq(var.get('options'),var.get(u"null"))):
                        if var.get('options').get('spaces'):
                            var.put('spaces', var.get('options').get('spaces'))
                        if var.get('options').get('EOL'):
                            var.put('EOL', var.get('options').get('EOL'))
                    var.put('str', var.get('JSON').callprop('stringify', var.get('obj'), (var.get('options').get('replacer') if var.get('options') else var.get(u"null")), var.get('spaces')))
                    return (var.get('str').callprop('replace', JsRegExp('/\\n/g'), var.get('EOL'))+var.get('EOL'))
                PyJsHoisted_stringify_.func_name = 'stringify'
                var.put('stringify', PyJsHoisted_stringify_)
                @Js
                def PyJsHoisted_writeFile_(file, obj, options, callback, this, arguments, var=var):
                    var = Scope({'file':file, 'obj':obj, 'options':options, 'callback':callback, 'this':this, 'arguments':arguments}, var)
                    var.registers(['callback', 'str', 'options', 'fs', 'file', 'obj'])
                    if (var.get('callback')==var.get(u"null")):
                        var.put('callback', var.get('options'))
                        var.put('options', Js({}))
                    var.put('options', (var.get('options') or Js({})))
                    var.put('fs', (var.get('options').get('fs') or var.get('_fs')))
                    var.put('str', Js(''))
                    try:
                        var.put('str', var.get('stringify')(var.get('obj'), var.get('options')))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_657272_77070144 = var.own.get('err')
                        var.force_own_put('err', PyExceptionToJs(PyJsTempException))
                        try:
                            if var.get('callback'):
                                var.get('callback')(var.get('err'), var.get(u"null"))
                            return var.get('undefined')
                        finally:
                            if PyJsHolder_657272_77070144 is not None:
                                var.own['err'] = PyJsHolder_657272_77070144
                            else:
                                del var.own['err']
                            del PyJsHolder_657272_77070144
                    var.get('fs').callprop('writeFile', var.get('file'), var.get('str'), var.get('options'), var.get('callback'))
                PyJsHoisted_writeFile_.func_name = 'writeFile'
                var.put('writeFile', PyJsHoisted_writeFile_)
                @Js
                def PyJsHoisted_writeFileSync_(file, obj, options, this, arguments, var=var):
                    var = Scope({'file':file, 'obj':obj, 'options':options, 'this':this, 'arguments':arguments}, var)
                    var.registers(['str', 'options', 'fs', 'file', 'obj'])
                    var.put('options', (var.get('options') or Js({})))
                    var.put('fs', (var.get('options').get('fs') or var.get('_fs')))
                    var.put('str', var.get('stringify')(var.get('obj'), var.get('options')))
                    return var.get('fs').callprop('writeFileSync', var.get('file'), var.get('str'), var.get('options'))
                PyJsHoisted_writeFileSync_.func_name = 'writeFileSync'
                var.put('writeFileSync', PyJsHoisted_writeFileSync_)
                @Js
                def PyJsHoisted_stripBom_(content, this, arguments, var=var):
                    var = Scope({'content':content, 'this':this, 'arguments':arguments}, var)
                    var.registers(['content'])
                    if var.get('Buffer').callprop('isBuffer', var.get('content')):
                        var.put('content', var.get('content').callprop('toString', Js('utf8')))
                    var.put('content', var.get('content').callprop('replace', JsRegExp('/^\\uFEFF/'), Js('')))
                    return var.get('content')
                PyJsHoisted_stripBom_.func_name = 'stripBom'
                var.put('stripBom', PyJsHoisted_stripBom_)
                pass
                try:
                    var.put('_fs', var.get('require')(Js('graceful-fs')))
                except PyJsException as PyJsTempException:
                    PyJsHolder_5f_8875423 = var.own.get('_')
                    var.force_own_put('_', PyExceptionToJs(PyJsTempException))
                    try:
                        var.put('_fs', var.get('require')(Js('fs')))
                    finally:
                        if PyJsHolder_5f_8875423 is not None:
                            var.own['_'] = PyJsHolder_5f_8875423
                        else:
                            del var.own['_']
                        del PyJsHolder_5f_8875423
                pass
                pass
                pass
                pass
                pass
                pass
                var.put('jsonfile', Js({'readFile':var.get('readFile'),'readFileSync':var.get('readFileSync'),'writeFile':var.get('writeFile'),'writeFileSync':var.get('writeFileSync')}))
                var.get('module').put('exports', var.get('jsonfile'))
            PyJs_anonymous_2045_._set_name('anonymous')
            PyJs_anonymous_2045_.callprop('call', var.get(u"this"))
        PyJs_anonymous_2044_._set_name('anonymous')
        PyJs_anonymous_2044_.callprop('call', var.get(u"this"), Js({'isBuffer':var.get('require')(Js('../is-buffer/index.js'))}))
    PyJs_anonymous_2043_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2047_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'Mime'])
        @Js
        def PyJsHoisted_Mime_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['i'])
            var.get(u"this").put('_types', var.get('Object').callprop('create', var.get(u"null")))
            var.get(u"this").put('_extensions', var.get('Object').callprop('create', var.get(u"null")))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('arguments').get('length')):
                try:
                    var.get(u"this").callprop('define', var.get('arguments').get(var.get('i')))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            var.get(u"this").put('define', var.get(u"this").get('define').callprop('bind', var.get(u"this")))
            var.get(u"this").put('getType', var.get(u"this").get('getType').callprop('bind', var.get(u"this")))
            var.get(u"this").put('getExtension', var.get(u"this").get('getExtension').callprop('bind', var.get(u"this")))
        PyJsHoisted_Mime_.func_name = 'Mime'
        var.put('Mime', PyJsHoisted_Mime_)
        Js('use strict')
        pass
        @Js
        def PyJs_anonymous_2048_(typeMap, force, this, arguments, var=var):
            var = Scope({'typeMap':typeMap, 'force':force, 'this':this, 'arguments':arguments}, var)
            var.registers(['ext', 'i', 'typeMap', 'force', 'extensions', 'type'])
            for PyJsTemp in var.get('typeMap'):
                var.put('type', PyJsTemp)
                @Js
                def PyJs_anonymous_2049_(t, this, arguments, var=var):
                    var = Scope({'t':t, 'this':this, 'arguments':arguments}, var)
                    var.registers(['t'])
                    return var.get('t').callprop('toLowerCase')
                PyJs_anonymous_2049_._set_name('anonymous')
                var.put('extensions', var.get('typeMap').get(var.get('type')).callprop('map', PyJs_anonymous_2049_))
                var.put('type', var.get('type').callprop('toLowerCase'))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('extensions').get('length')):
                    try:
                        var.put('ext', var.get('extensions').get(var.get('i')))
                        if (var.get('ext').get('0')==Js('*')):
                            continue
                        if (var.get('force').neg() and var.get(u"this").get('_types').contains(var.get('ext'))):
                            PyJsTempException = JsToPyException(var.get('Error').create(((((((((((Js('Attempt to change mapping for "')+var.get('ext'))+Js('" extension from "'))+var.get(u"this").get('_types').get(var.get('ext')))+Js('" to "'))+var.get('type'))+Js('". Pass `force=true` to allow this, otherwise remove "'))+var.get('ext'))+Js('" from the list of extensions for "'))+var.get('type'))+Js('".'))))
                            raise PyJsTempException
                        var.get(u"this").get('_types').put(var.get('ext'), var.get('type'))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                if (var.get('force') or var.get(u"this").get('_extensions').get(var.get('type')).neg()):
                    var.put('ext', var.get('extensions').get('0'))
                    var.get(u"this").get('_extensions').put(var.get('type'), (var.get('ext') if (var.get('ext').get('0')!=Js('*')) else var.get('ext').callprop('substr', Js(1.0))))
        PyJs_anonymous_2048_._set_name('anonymous')
        var.get('Mime').get('prototype').put('define', PyJs_anonymous_2048_)
        @Js
        def PyJs_anonymous_2050_(path, this, arguments, var=var):
            var = Scope({'path':path, 'this':this, 'arguments':arguments}, var)
            var.registers(['ext', 'last', 'path', 'hasPath', 'hasDot'])
            var.put('path', var.get('String')(var.get('path')))
            var.put('last', var.get('path').callprop('replace', JsRegExp('/^.*[/\\\\]/'), Js('')).callprop('toLowerCase'))
            var.put('ext', var.get('last').callprop('replace', JsRegExp('/^.*\\./'), Js('')).callprop('toLowerCase'))
            var.put('hasPath', (var.get('last').get('length')<var.get('path').get('length')))
            var.put('hasDot', (var.get('ext').get('length')<(var.get('last').get('length')-Js(1.0))))
            return (((var.get('hasDot') or var.get('hasPath').neg()) and var.get(u"this").get('_types').get(var.get('ext'))) or var.get(u"null"))
        PyJs_anonymous_2050_._set_name('anonymous')
        var.get('Mime').get('prototype').put('getType', PyJs_anonymous_2050_)
        @Js
        def PyJs_anonymous_2051_(type, this, arguments, var=var):
            var = Scope({'type':type, 'this':this, 'arguments':arguments}, var)
            var.registers(['type'])
            var.put('type', (JsRegExp('/^\\s*([^;\\s]*)/').callprop('test', var.get('type')) and var.get('RegExp').get('$1')))
            return ((var.get('type') and var.get(u"this").get('_extensions').get(var.get('type').callprop('toLowerCase'))) or var.get(u"null"))
        PyJs_anonymous_2051_._set_name('anonymous')
        var.get('Mime').get('prototype').put('getExtension', PyJs_anonymous_2051_)
        var.get('module').put('exports', var.get('Mime'))
    PyJs_anonymous_2047_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2052_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'Mime'])
        Js('use strict')
        var.put('Mime', var.get('require')(Js('./Mime')))
        var.get('module').put('exports', var.get('Mime').create(var.get('require')(Js('./types/standard')), var.get('require')(Js('./types/other'))))
    PyJs_anonymous_2052_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2053_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        def PyJs_LONG_2054_(var=var):
            return var.get('module').put('exports', Js({'application/prs.cww':Js([Js('cww')]),'application/vnd.1000minds.decision-model+xml':Js([Js('1km')]),'application/vnd.3gpp.pic-bw-large':Js([Js('plb')]),'application/vnd.3gpp.pic-bw-small':Js([Js('psb')]),'application/vnd.3gpp.pic-bw-var':Js([Js('pvb')]),'application/vnd.3gpp2.tcap':Js([Js('tcap')]),'application/vnd.3m.post-it-notes':Js([Js('pwn')]),'application/vnd.accpac.simply.aso':Js([Js('aso')]),'application/vnd.accpac.simply.imp':Js([Js('imp')]),'application/vnd.acucobol':Js([Js('acu')]),'application/vnd.acucorp':Js([Js('atc'), Js('acutc')]),'application/vnd.adobe.air-application-installer-package+zip':Js([Js('air')]),'application/vnd.adobe.formscentral.fcdt':Js([Js('fcdt')]),'application/vnd.adobe.fxp':Js([Js('fxp'), Js('fxpl')]),'application/vnd.adobe.xdp+xml':Js([Js('xdp')]),'application/vnd.adobe.xfdf':Js([Js('xfdf')]),'application/vnd.ahead.space':Js([Js('ahead')]),'application/vnd.airzip.filesecure.azf':Js([Js('azf')]),'application/vnd.airzip.filesecure.azs':Js([Js('azs')]),'application/vnd.amazon.ebook':Js([Js('azw')]),'application/vnd.americandynamics.acc':Js([Js('acc')]),'application/vnd.amiga.ami':Js([Js('ami')]),'application/vnd.android.package-archive':Js([Js('apk')]),'application/vnd.anser-web-certificate-issue-initiation':Js([Js('cii')]),'application/vnd.anser-web-funds-transfer-initiation':Js([Js('fti')]),'application/vnd.antix.game-component':Js([Js('atx')]),'application/vnd.apple.installer+xml':Js([Js('mpkg')]),'application/vnd.apple.keynote':Js([Js('keynote')]),'application/vnd.apple.mpegurl':Js([Js('m3u8')]),'application/vnd.apple.numbers':Js([Js('numbers')]),'application/vnd.apple.pages':Js([Js('pages')]),'application/vnd.apple.pkpass':Js([Js('pkpass')]),'application/vnd.aristanetworks.swi':Js([Js('swi')]),'application/vnd.astraea-software.iota':Js([Js('iota')]),'application/vnd.audiograph':Js([Js('aep')]),'application/vnd.balsamiq.bmml+xml':Js([Js('bmml')]),'application/vnd.blueice.multipass':Js([Js('mpm')]),'application/vnd.bmi':Js([Js('bmi')]),'application/vnd.businessobjects':Js([Js('rep')]),'application/vnd.chemdraw+xml':Js([Js('cdxml')]),'application/vnd.chipnuts.karaoke-mmd':Js([Js('mmd')]),'application/vnd.cinderella':Js([Js('cdy')]),'application/vnd.citationstyles.style+xml':Js([Js('csl')]),'application/vnd.claymore':Js([Js('cla')]),'application/vnd.cloanto.rp9':Js([Js('rp9')]),'application/vnd.clonk.c4group':Js([Js('c4g'), Js('c4d'), Js('c4f'), Js('c4p'), Js('c4u')]),'application/vnd.cluetrust.cartomobile-config':Js([Js('c11amc')]),'application/vnd.cluetrust.cartomobile-config-pkg':Js([Js('c11amz')]),'application/vnd.commonspace':Js([Js('csp')]),'application/vnd.contact.cmsg':Js([Js('cdbcmsg')]),'application/vnd.cosmocaller':Js([Js('cmc')]),'application/vnd.crick.clicker':Js([Js('clkx')]),'application/vnd.crick.clicker.keyboard':Js([Js('clkk')]),'application/vnd.crick.clicker.palette':Js([Js('clkp')]),'application/vnd.crick.clicker.template':Js([Js('clkt')]),'application/vnd.crick.clicker.wordbank':Js([Js('clkw')]),'application/vnd.criticaltools.wbs+xml':Js([Js('wbs')]),'application/vnd.ctc-posml':Js([Js('pml')]),'application/vnd.cups-ppd':Js([Js('ppd')]),'application/vnd.curl.car':Js([Js('car')]),'application/vnd.curl.pcurl':Js([Js('pcurl')]),'application/vnd.dart':Js([Js('dart')]),'application/vnd.data-vision.rdz':Js([Js('rdz')]),'application/vnd.dece.data':Js([Js('uvf'), Js('uvvf'), Js('uvd'), Js('uvvd')]),'application/vnd.dece.ttml+xml':Js([Js('uvt'), Js('uvvt')]),'application/vnd.dece.unspecified':Js([Js('uvx'), Js('uvvx')]),'application/vnd.dece.zip':Js([Js('uvz'), Js('uvvz')]),'application/vnd.denovo.fcselayout-link':Js([Js('fe_launch')]),'application/vnd.dna':Js([Js('dna')]),'application/vnd.dolby.mlp':Js([Js('mlp')]),'application/vnd.dpgraph':Js([Js('dpg')]),'application/vnd.dreamfactory':Js([Js('dfac')]),'application/vnd.ds-keypoint':Js([Js('kpxx')]),'application/vnd.dvb.ait':Js([Js('ait')]),'application/vnd.dvb.service':Js([Js('svc')]),'application/vnd.dynageo':Js([Js('geo')]),'application/vnd.ecowin.chart':Js([Js('mag')]),'application/vnd.enliven':Js([Js('nml')]),'application/vnd.epson.esf':Js([Js('esf')]),'application/vnd.epson.msf':Js([Js('msf')]),'application/vnd.epson.quickanime':Js([Js('qam')]),'application/vnd.epson.salt':Js([Js('slt')]),'application/vnd.epson.ssf':Js([Js('ssf')]),'application/vnd.eszigno3+xml':Js([Js('es3'), Js('et3')]),'application/vnd.ezpix-album':Js([Js('ez2')]),'application/vnd.ezpix-package':Js([Js('ez3')]),'application/vnd.fdf':Js([Js('fdf')]),'application/vnd.fdsn.mseed':Js([Js('mseed')]),'application/vnd.fdsn.seed':Js([Js('seed'), Js('dataless')]),'application/vnd.flographit':Js([Js('gph')]),'application/vnd.fluxtime.clip':Js([Js('ftc')]),'application/vnd.framemaker':Js([Js('fm'), Js('frame'), Js('maker'), Js('book')]),'application/vnd.frogans.fnc':Js([Js('fnc')]),'application/vnd.frogans.ltf':Js([Js('ltf')]),'application/vnd.fsc.weblaunch':Js([Js('fsc')]),'application/vnd.fujitsu.oasys':Js([Js('oas')]),'application/vnd.fujitsu.oasys2':Js([Js('oa2')]),'application/vnd.fujitsu.oasys3':Js([Js('oa3')]),'application/vnd.fujitsu.oasysgp':Js([Js('fg5')]),'application/vnd.fujitsu.oasysprs':Js([Js('bh2')]),'application/vnd.fujixerox.ddd':Js([Js('ddd')]),'application/vnd.fujixerox.docuworks':Js([Js('xdw')]),'application/vnd.fujixerox.docuworks.binder':Js([Js('xbd')]),'application/vnd.fuzzysheet':Js([Js('fzs')]),'application/vnd.genomatix.tuxedo':Js([Js('txd')]),'application/vnd.geogebra.file':Js([Js('ggb')]),'application/vnd.geogebra.tool':Js([Js('ggt')]),'application/vnd.geometry-explorer':Js([Js('gex'), Js('gre')]),'application/vnd.geonext':Js([Js('gxt')]),'application/vnd.geoplan':Js([Js('g2w')]),'application/vnd.geospace':Js([Js('g3w')]),'application/vnd.gmx':Js([Js('gmx')]),'application/vnd.google-apps.document':Js([Js('gdoc')]),'application/vnd.google-apps.presentation':Js([Js('gslides')]),'application/vnd.google-apps.spreadsheet':Js([Js('gsheet')]),'application/vnd.google-earth.kml+xml':Js([Js('kml')]),'application/vnd.google-earth.kmz':Js([Js('kmz')]),'application/vnd.grafeq':Js([Js('gqf'), Js('gqs')]),'application/vnd.groove-account':Js([Js('gac')]),'application/vnd.groove-help':Js([Js('ghf')]),'application/vnd.groove-identity-message':Js([Js('gim')]),'application/vnd.groove-injector':Js([Js('grv')]),'application/vnd.groove-tool-message':Js([Js('gtm')]),'application/vnd.groove-tool-template':Js([Js('tpl')]),'application/vnd.groove-vcard':Js([Js('vcg')]),'application/vnd.hal+xml':Js([Js('hal')]),'application/vnd.handheld-entertainment+xml':Js([Js('zmm')]),'application/vnd.hbci':Js([Js('hbci')]),'application/vnd.hhe.lesson-player':Js([Js('les')]),'application/vnd.hp-hpgl':Js([Js('hpgl')]),'application/vnd.hp-hpid':Js([Js('hpid')]),'application/vnd.hp-hps':Js([Js('hps')]),'application/vnd.hp-jlyt':Js([Js('jlt')]),'application/vnd.hp-pcl':Js([Js('pcl')]),'application/vnd.hp-pclxl':Js([Js('pclxl')]),'application/vnd.hydrostatix.sof-data':Js([Js('sfd-hdstx')]),'application/vnd.ibm.minipay':Js([Js('mpy')]),'application/vnd.ibm.modcap':Js([Js('afp'), Js('listafp'), Js('list3820')]),'application/vnd.ibm.rights-management':Js([Js('irm')]),'application/vnd.ibm.secure-container':Js([Js('sc')]),'application/vnd.iccprofile':Js([Js('icc'), Js('icm')]),'application/vnd.igloader':Js([Js('igl')]),'application/vnd.immervision-ivp':Js([Js('ivp')]),'application/vnd.immervision-ivu':Js([Js('ivu')]),'application/vnd.insors.igm':Js([Js('igm')]),'application/vnd.intercon.formnet':Js([Js('xpw'), Js('xpx')]),'application/vnd.intergeo':Js([Js('i2g')]),'application/vnd.intu.qbo':Js([Js('qbo')]),'application/vnd.intu.qfx':Js([Js('qfx')]),'application/vnd.ipunplugged.rcprofile':Js([Js('rcprofile')]),'application/vnd.irepository.package+xml':Js([Js('irp')]),'application/vnd.is-xpr':Js([Js('xpr')]),'application/vnd.isac.fcs':Js([Js('fcs')]),'application/vnd.jam':Js([Js('jam')]),'application/vnd.jcp.javame.midlet-rms':Js([Js('rms')]),'application/vnd.jisp':Js([Js('jisp')]),'application/vnd.joost.joda-archive':Js([Js('joda')]),'application/vnd.kahootz':Js([Js('ktz'), Js('ktr')]),'application/vnd.kde.karbon':Js([Js('karbon')]),'application/vnd.kde.kchart':Js([Js('chrt')]),'application/vnd.kde.kformula':Js([Js('kfo')]),'application/vnd.kde.kivio':Js([Js('flw')]),'application/vnd.kde.kontour':Js([Js('kon')]),'application/vnd.kde.kpresenter':Js([Js('kpr'), Js('kpt')]),'application/vnd.kde.kspread':Js([Js('ksp')]),'application/vnd.kde.kword':Js([Js('kwd'), Js('kwt')]),'application/vnd.kenameaapp':Js([Js('htke')]),'application/vnd.kidspiration':Js([Js('kia')]),'application/vnd.kinar':Js([Js('kne'), Js('knp')]),'application/vnd.koan':Js([Js('skp'), Js('skd'), Js('skt'), Js('skm')]),'application/vnd.kodak-descriptor':Js([Js('sse')]),'application/vnd.las.las+xml':Js([Js('lasxml')]),'application/vnd.llamagraphics.life-balance.desktop':Js([Js('lbd')]),'application/vnd.llamagraphics.life-balance.exchange+xml':Js([Js('lbe')]),'application/vnd.lotus-1-2-3':Js([Js('123')]),'application/vnd.lotus-approach':Js([Js('apr')]),'application/vnd.lotus-freelance':Js([Js('pre')]),'application/vnd.lotus-notes':Js([Js('nsf')]),'application/vnd.lotus-organizer':Js([Js('org')]),'application/vnd.lotus-screencam':Js([Js('scm')]),'application/vnd.lotus-wordpro':Js([Js('lwp')]),'application/vnd.macports.portpkg':Js([Js('portpkg')]),'application/vnd.mcd':Js([Js('mcd')]),'application/vnd.medcalcdata':Js([Js('mc1')]),'application/vnd.mediastation.cdkey':Js([Js('cdkey')]),'application/vnd.mfer':Js([Js('mwf')]),'application/vnd.mfmp':Js([Js('mfm')]),'application/vnd.micrografx.flo':Js([Js('flo')]),'application/vnd.micrografx.igx':Js([Js('igx')]),'application/vnd.mif':Js([Js('mif')]),'application/vnd.mobius.daf':Js([Js('daf')]),'application/vnd.mobius.dis':Js([Js('dis')]),'application/vnd.mobius.mbk':Js([Js('mbk')]),'application/vnd.mobius.mqy':Js([Js('mqy')]),'application/vnd.mobius.msl':Js([Js('msl')]),'application/vnd.mobius.plc':Js([Js('plc')]),'application/vnd.mobius.txf':Js([Js('txf')]),'application/vnd.mophun.application':Js([Js('mpn')]),'application/vnd.mophun.certificate':Js([Js('mpc')]),'application/vnd.mozilla.xul+xml':Js([Js('xul')]),'application/vnd.ms-artgalry':Js([Js('cil')]),'application/vnd.ms-cab-compressed':Js([Js('cab')]),'application/vnd.ms-excel':Js([Js('xls'), Js('xlm'), Js('xla'), Js('xlc'), Js('xlt'), Js('xlw')]),'application/vnd.ms-excel.addin.macroenabled.12':Js([Js('xlam')]),'application/vnd.ms-excel.sheet.binary.macroenabled.12':Js([Js('xlsb')]),'application/vnd.ms-excel.sheet.macroenabled.12':Js([Js('xlsm')]),'application/vnd.ms-excel.template.macroenabled.12':Js([Js('xltm')]),'application/vnd.ms-fontobject':Js([Js('eot')]),'application/vnd.ms-htmlhelp':Js([Js('chm')]),'application/vnd.ms-ims':Js([Js('ims')]),'application/vnd.ms-lrm':Js([Js('lrm')]),'application/vnd.ms-officetheme':Js([Js('thmx')]),'application/vnd.ms-outlook':Js([Js('msg')]),'application/vnd.ms-pki.seccat':Js([Js('cat')]),'application/vnd.ms-pki.stl':Js([Js('*stl')]),'application/vnd.ms-powerpoint':Js([Js('ppt'), Js('pps'), Js('pot')]),'application/vnd.ms-powerpoint.addin.macroenabled.12':Js([Js('ppam')]),'application/vnd.ms-powerpoint.presentation.macroenabled.12':Js([Js('pptm')]),'application/vnd.ms-powerpoint.slide.macroenabled.12':Js([Js('sldm')]),'application/vnd.ms-powerpoint.slideshow.macroenabled.12':Js([Js('ppsm')]),'application/vnd.ms-powerpoint.template.macroenabled.12':Js([Js('potm')]),'application/vnd.ms-project':Js([Js('mpp'), Js('mpt')]),'application/vnd.ms-word.document.macroenabled.12':Js([Js('docm')]),'application/vnd.ms-word.template.macroenabled.12':Js([Js('dotm')]),'application/vnd.ms-works':Js([Js('wps'), Js('wks'), Js('wcm'), Js('wdb')]),'application/vnd.ms-wpl':Js([Js('wpl')]),'application/vnd.ms-xpsdocument':Js([Js('xps')]),'application/vnd.mseq':Js([Js('mseq')]),'application/vnd.musician':Js([Js('mus')]),'application/vnd.muvee.style':Js([Js('msty')]),'application/vnd.mynfc':Js([Js('taglet')]),'application/vnd.neurolanguage.nlu':Js([Js('nlu')]),'application/vnd.nitf':Js([Js('ntf'), Js('nitf')]),'application/vnd.noblenet-directory':Js([Js('nnd')]),'application/vnd.noblenet-sealer':Js([Js('nns')]),'application/vnd.noblenet-web':Js([Js('nnw')]),'application/vnd.nokia.n-gage.ac+xml':Js([Js('*ac')]),'application/vnd.nokia.n-gage.data':Js([Js('ngdat')]),'application/vnd.nokia.n-gage.symbian.install':Js([Js('n-gage')]),'application/vnd.nokia.radio-preset':Js([Js('rpst')]),'application/vnd.nokia.radio-presets':Js([Js('rpss')]),'application/vnd.novadigm.edm':Js([Js('edm')]),'application/vnd.novadigm.edx':Js([Js('edx')]),'application/vnd.novadigm.ext':Js([Js('ext')]),'application/vnd.oasis.opendocument.chart':Js([Js('odc')]),'application/vnd.oasis.opendocument.chart-template':Js([Js('otc')]),'application/vnd.oasis.opendocument.database':Js([Js('odb')]),'application/vnd.oasis.opendocument.formula':Js([Js('odf')]),'application/vnd.oasis.opendocument.formula-template':Js([Js('odft')]),'application/vnd.oasis.opendocument.graphics':Js([Js('odg')]),'application/vnd.oasis.opendocument.graphics-template':Js([Js('otg')]),'application/vnd.oasis.opendocument.image':Js([Js('odi')]),'application/vnd.oasis.opendocument.image-template':Js([Js('oti')]),'application/vnd.oasis.opendocument.presentation':Js([Js('odp')]),'application/vnd.oasis.opendocument.presentation-template':Js([Js('otp')]),'application/vnd.oasis.opendocument.spreadsheet':Js([Js('ods')]),'application/vnd.oasis.opendocument.spreadsheet-template':Js([Js('ots')]),'application/vnd.oasis.opendocument.text':Js([Js('odt')]),'application/vnd.oasis.opendocument.text-master':Js([Js('odm')]),'application/vnd.oasis.opendocument.text-template':Js([Js('ott')]),'application/vnd.oasis.opendocument.text-web':Js([Js('oth')]),'application/vnd.olpc-sugar':Js([Js('xo')]),'application/vnd.oma.dd2+xml':Js([Js('dd2')]),'application/vnd.openblox.game+xml':Js([Js('obgx')]),'application/vnd.openofficeorg.extension':Js([Js('oxt')]),'application/vnd.openstreetmap.data+xml':Js([Js('osm')]),'application/vnd.openxmlformats-officedocument.presentationml.presentation':Js([Js('pptx')]),'application/vnd.openxmlformats-officedocument.presentationml.slide':Js([Js('sldx')]),'application/vnd.openxmlformats-officedocument.presentationml.slideshow':Js([Js('ppsx')]),'application/vnd.openxmlformats-officedocument.presentationml.template':Js([Js('potx')]),'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':Js([Js('xlsx')]),'application/vnd.openxmlformats-officedocument.spreadsheetml.template':Js([Js('xltx')]),'application/vnd.openxmlformats-officedocument.wordprocessingml.document':Js([Js('docx')]),'application/vnd.openxmlformats-officedocument.wordprocessingml.template':Js([Js('dotx')]),'application/vnd.osgeo.mapguide.package':Js([Js('mgp')]),'application/vnd.osgi.dp':Js([Js('dp')]),'application/vnd.osgi.subsystem':Js([Js('esa')]),'application/vnd.palm':Js([Js('pdb'), Js('pqa'), Js('oprc')]),'application/vnd.pawaafile':Js([Js('paw')]),'application/vnd.pg.format':Js([Js('str')]),'application/vnd.pg.osasli':Js([Js('ei6')]),'application/vnd.picsel':Js([Js('efif')]),'application/vnd.pmi.widget':Js([Js('wg')]),'application/vnd.pocketlearn':Js([Js('plf')]),'application/vnd.powerbuilder6':Js([Js('pbd')]),'application/vnd.previewsystems.box':Js([Js('box')]),'application/vnd.proteus.magazine':Js([Js('mgz')]),'application/vnd.publishare-delta-tree':Js([Js('qps')]),'application/vnd.pvi.ptid1':Js([Js('ptid')]),'application/vnd.quark.quarkxpress':Js([Js('qxd'), Js('qxt'), Js('qwd'), Js('qwt'), Js('qxl'), Js('qxb')]),'application/vnd.realvnc.bed':Js([Js('bed')]),'application/vnd.recordare.musicxml':Js([Js('mxl')]),'application/vnd.recordare.musicxml+xml':Js([Js('musicxml')]),'application/vnd.rig.cryptonote':Js([Js('cryptonote')]),'application/vnd.rim.cod':Js([Js('cod')]),'application/vnd.rn-realmedia':Js([Js('rm')]),'application/vnd.rn-realmedia-vbr':Js([Js('rmvb')]),'application/vnd.route66.link66+xml':Js([Js('link66')]),'application/vnd.sailingtracker.track':Js([Js('st')]),'application/vnd.seemail':Js([Js('see')]),'application/vnd.sema':Js([Js('sema')]),'application/vnd.semd':Js([Js('semd')]),'application/vnd.semf':Js([Js('semf')]),'application/vnd.shana.informed.formdata':Js([Js('ifm')]),'application/vnd.shana.informed.formtemplate':Js([Js('itp')]),'application/vnd.shana.informed.interchange':Js([Js('iif')]),'application/vnd.shana.informed.package':Js([Js('ipk')]),'application/vnd.simtech-mindmapper':Js([Js('twd'), Js('twds')]),'application/vnd.smaf':Js([Js('mmf')]),'application/vnd.smart.teacher':Js([Js('teacher')]),'application/vnd.software602.filler.form+xml':Js([Js('fo')]),'application/vnd.solent.sdkm+xml':Js([Js('sdkm'), Js('sdkd')]),'application/vnd.spotfire.dxp':Js([Js('dxp')]),'application/vnd.spotfire.sfs':Js([Js('sfs')]),'application/vnd.stardivision.calc':Js([Js('sdc')]),'application/vnd.stardivision.draw':Js([Js('sda')]),'application/vnd.stardivision.impress':Js([Js('sdd')]),'application/vnd.stardivision.math':Js([Js('smf')]),'application/vnd.stardivision.writer':Js([Js('sdw'), Js('vor')]),'application/vnd.stardivision.writer-global':Js([Js('sgl')]),'application/vnd.stepmania.package':Js([Js('smzip')]),'application/vnd.stepmania.stepchart':Js([Js('sm')]),'application/vnd.sun.wadl+xml':Js([Js('wadl')]),'application/vnd.sun.xml.calc':Js([Js('sxc')]),'application/vnd.sun.xml.calc.template':Js([Js('stc')]),'application/vnd.sun.xml.draw':Js([Js('sxd')]),'application/vnd.sun.xml.draw.template':Js([Js('std')]),'application/vnd.sun.xml.impress':Js([Js('sxi')]),'application/vnd.sun.xml.impress.template':Js([Js('sti')]),'application/vnd.sun.xml.math':Js([Js('sxm')]),'application/vnd.sun.xml.writer':Js([Js('sxw')]),'application/vnd.sun.xml.writer.global':Js([Js('sxg')]),'application/vnd.sun.xml.writer.template':Js([Js('stw')]),'application/vnd.sus-calendar':Js([Js('sus'), Js('susp')]),'application/vnd.svd':Js([Js('svd')]),'application/vnd.symbian.install':Js([Js('sis'), Js('sisx')]),'application/vnd.syncml+xml':Js([Js('xsm')]),'application/vnd.syncml.dm+wbxml':Js([Js('bdm')]),'application/vnd.syncml.dm+xml':Js([Js('xdm')]),'application/vnd.syncml.dmddf+xml':Js([Js('ddf')]),'application/vnd.tao.intent-module-archive':Js([Js('tao')]),'application/vnd.tcpdump.pcap':Js([Js('pcap'), Js('cap'), Js('dmp')]),'application/vnd.tmobile-livetv':Js([Js('tmo')]),'application/vnd.trid.tpt':Js([Js('tpt')]),'application/vnd.triscape.mxs':Js([Js('mxs')]),'application/vnd.trueapp':Js([Js('tra')]),'application/vnd.ufdl':Js([Js('ufd'), Js('ufdl')]),'application/vnd.uiq.theme':Js([Js('utz')]),'application/vnd.umajin':Js([Js('umj')]),'application/vnd.unity':Js([Js('unityweb')]),'application/vnd.uoml+xml':Js([Js('uoml')]),'application/vnd.vcx':Js([Js('vcx')]),'application/vnd.visio':Js([Js('vsd'), Js('vst'), Js('vss'), Js('vsw')]),'application/vnd.visionary':Js([Js('vis')]),'application/vnd.vsf':Js([Js('vsf')]),'application/vnd.wap.wbxml':Js([Js('wbxml')]),'application/vnd.wap.wmlc':Js([Js('wmlc')]),'application/vnd.wap.wmlscriptc':Js([Js('wmlsc')]),'application/vnd.webturbo':Js([Js('wtb')]),'application/vnd.wolfram.player':Js([Js('nbp')]),'application/vnd.wordperfect':Js([Js('wpd')]),'application/vnd.wqd':Js([Js('wqd')]),'application/vnd.wt.stf':Js([Js('stf')]),'application/vnd.xara':Js([Js('xar')]),'application/vnd.xfdl':Js([Js('xfdl')]),'application/vnd.yamaha.hv-dic':Js([Js('hvd')]),'application/vnd.yamaha.hv-script':Js([Js('hvs')]),'application/vnd.yamaha.hv-voice':Js([Js('hvp')]),'application/vnd.yamaha.openscoreformat':Js([Js('osf')]),'application/vnd.yamaha.openscoreformat.osfpvg+xml':Js([Js('osfpvg')]),'application/vnd.yamaha.smaf-audio':Js([Js('saf')]),'application/vnd.yamaha.smaf-phrase':Js([Js('spf')]),'application/vnd.yellowriver-custom-menu':Js([Js('cmp')]),'application/vnd.zul':Js([Js('zir'), Js('zirz')]),'application/vnd.zzazz.deck+xml':Js([Js('zaz')]),'application/x-7z-compressed':Js([Js('7z')]),'application/x-abiword':Js([Js('abw')]),'application/x-ace-compressed':Js([Js('ace')]),'application/x-apple-diskimage':Js([Js('*dmg')]),'application/x-arj':Js([Js('arj')]),'application/x-authorware-bin':Js([Js('aab'), Js('x32'), Js('u32'), Js('vox')]),'application/x-authorware-map':Js([Js('aam')]),'application/x-authorware-seg':Js([Js('aas')]),'application/x-bcpio':Js([Js('bcpio')]),'application/x-bdoc':Js([Js('*bdoc')]),'application/x-bittorrent':Js([Js('torrent')]),'application/x-blorb':Js([Js('blb'), Js('blorb')]),'application/x-bzip':Js([Js('bz')]),'application/x-bzip2':Js([Js('bz2'), Js('boz')]),'application/x-cbr':Js([Js('cbr'), Js('cba'), Js('cbt'), Js('cbz'), Js('cb7')]),'application/x-cdlink':Js([Js('vcd')]),'application/x-cfs-compressed':Js([Js('cfs')]),'application/x-chat':Js([Js('chat')]),'application/x-chess-pgn':Js([Js('pgn')]),'application/x-chrome-extension':Js([Js('crx')]),'application/x-cocoa':Js([Js('cco')]),'application/x-conference':Js([Js('nsc')]),'application/x-cpio':Js([Js('cpio')]),'application/x-csh':Js([Js('csh')]),'application/x-debian-package':Js([Js('*deb'), Js('udeb')]),'application/x-dgc-compressed':Js([Js('dgc')]),'application/x-director':Js([Js('dir'), Js('dcr'), Js('dxr'), Js('cst'), Js('cct'), Js('cxt'), Js('w3d'), Js('fgd'), Js('swa')]),'application/x-doom':Js([Js('wad')]),'application/x-dtbncx+xml':Js([Js('ncx')]),'application/x-dtbook+xml':Js([Js('dtb')]),'application/x-dtbresource+xml':Js([Js('res')]),'application/x-dvi':Js([Js('dvi')]),'application/x-envoy':Js([Js('evy')]),'application/x-eva':Js([Js('eva')]),'application/x-font-bdf':Js([Js('bdf')]),'application/x-font-ghostscript':Js([Js('gsf')]),'application/x-font-linux-psf':Js([Js('psf')]),'application/x-font-pcf':Js([Js('pcf')]),'application/x-font-snf':Js([Js('snf')]),'application/x-font-type1':Js([Js('pfa'), Js('pfb'), Js('pfm'), Js('afm')]),'application/x-freearc':Js([Js('arc')]),'application/x-futuresplash':Js([Js('spl')]),'application/x-gca-compressed':Js([Js('gca')]),'application/x-glulx':Js([Js('ulx')]),'application/x-gnumeric':Js([Js('gnumeric')]),'application/x-gramps-xml':Js([Js('gramps')]),'application/x-gtar':Js([Js('gtar')]),'application/x-hdf':Js([Js('hdf')]),'application/x-httpd-php':Js([Js('php')]),'application/x-install-instructions':Js([Js('install')]),'application/x-iso9660-image':Js([Js('*iso')]),'application/x-java-archive-diff':Js([Js('jardiff')]),'application/x-java-jnlp-file':Js([Js('jnlp')]),'application/x-keepass2':Js([Js('kdbx')]),'application/x-latex':Js([Js('latex')]),'application/x-lua-bytecode':Js([Js('luac')]),'application/x-lzh-compressed':Js([Js('lzh'), Js('lha')]),'application/x-makeself':Js([Js('run')]),'application/x-mie':Js([Js('mie')]),'application/x-mobipocket-ebook':Js([Js('prc'), Js('mobi')]),'application/x-ms-application':Js([Js('application')]),'application/x-ms-shortcut':Js([Js('lnk')]),'application/x-ms-wmd':Js([Js('wmd')]),'application/x-ms-wmz':Js([Js('wmz')]),'application/x-ms-xbap':Js([Js('xbap')]),'application/x-msaccess':Js([Js('mdb')]),'application/x-msbinder':Js([Js('obd')]),'application/x-mscardfile':Js([Js('crd')]),'application/x-msclip':Js([Js('clp')]),'application/x-msdos-program':Js([Js('*exe')]),'application/x-msdownload':Js([Js('*exe'), Js('*dll'), Js('com'), Js('bat'), Js('*msi')]),'application/x-msmediaview':Js([Js('mvb'), Js('m13'), Js('m14')]),'application/x-msmetafile':Js([Js('*wmf'), Js('*wmz'), Js('*emf'), Js('emz')]),'application/x-msmoney':Js([Js('mny')]),'application/x-mspublisher':Js([Js('pub')]),'application/x-msschedule':Js([Js('scd')]),'application/x-msterminal':Js([Js('trm')]),'application/x-mswrite':Js([Js('wri')]),'application/x-netcdf':Js([Js('nc'), Js('cdf')]),'application/x-ns-proxy-autoconfig':Js([Js('pac')]),'application/x-nzb':Js([Js('nzb')]),'application/x-perl':Js([Js('pl'), Js('pm')]),'application/x-pilot':Js([Js('*prc'), Js('*pdb')]),'application/x-pkcs12':Js([Js('p12'), Js('pfx')]),'application/x-pkcs7-certificates':Js([Js('p7b'), Js('spc')]),'application/x-pkcs7-certreqresp':Js([Js('p7r')]),'application/x-rar-compressed':Js([Js('rar')]),'application/x-redhat-package-manager':Js([Js('rpm')]),'application/x-research-info-systems':Js([Js('ris')]),'application/x-sea':Js([Js('sea')]),'application/x-sh':Js([Js('sh')]),'application/x-shar':Js([Js('shar')]),'application/x-shockwave-flash':Js([Js('swf')]),'application/x-silverlight-app':Js([Js('xap')]),'application/x-sql':Js([Js('sql')]),'application/x-stuffit':Js([Js('sit')]),'application/x-stuffitx':Js([Js('sitx')]),'application/x-subrip':Js([Js('srt')]),'application/x-sv4cpio':Js([Js('sv4cpio')]),'application/x-sv4crc':Js([Js('sv4crc')]),'application/x-t3vm-image':Js([Js('t3')]),'application/x-tads':Js([Js('gam')]),'application/x-tar':Js([Js('tar')]),'application/x-tcl':Js([Js('tcl'), Js('tk')]),'application/x-tex':Js([Js('tex')]),'application/x-tex-tfm':Js([Js('tfm')]),'application/x-texinfo':Js([Js('texinfo'), Js('texi')]),'application/x-tgif':Js([Js('*obj')]),'application/x-ustar':Js([Js('ustar')]),'application/x-virtualbox-hdd':Js([Js('hdd')]),'application/x-virtualbox-ova':Js([Js('ova')]),'application/x-virtualbox-ovf':Js([Js('ovf')]),'application/x-virtualbox-vbox':Js([Js('vbox')]),'application/x-virtualbox-vbox-extpack':Js([Js('vbox-extpack')]),'application/x-virtualbox-vdi':Js([Js('vdi')]),'application/x-virtualbox-vhd':Js([Js('vhd')]),'application/x-virtualbox-vmdk':Js([Js('vmdk')]),'application/x-wais-source':Js([Js('src')]),'application/x-web-app-manifest+json':Js([Js('webapp')]),'application/x-x509-ca-cert':Js([Js('der'), Js('crt'), Js('pem')]),'application/x-xfig':Js([Js('fig')]),'application/x-xliff+xml':Js([Js('*xlf')]),'application/x-xpinstall':Js([Js('xpi')]),'application/x-xz':Js([Js('xz')]),'application/x-zmachine':Js([Js('z1'), Js('z2'), Js('z3'), Js('z4'), Js('z5'), Js('z6'), Js('z7'), Js('z8')]),'audio/vnd.dece.audio':Js([Js('uva'), Js('uvva')]),'audio/vnd.digital-winds':Js([Js('eol')]),'audio/vnd.dra':Js([Js('dra')]),'audio/vnd.dts':Js([Js('dts')]),'audio/vnd.dts.hd':Js([Js('dtshd')]),'audio/vnd.lucent.voice':Js([Js('lvp')]),'audio/vnd.ms-playready.media.pya':Js([Js('pya')]),'audio/vnd.nuera.ecelp4800':Js([Js('ecelp4800')]),'audio/vnd.nuera.ecelp7470':Js([Js('ecelp7470')]),'audio/vnd.nuera.ecelp9600':Js([Js('ecelp9600')]),'audio/vnd.rip':Js([Js('rip')]),'audio/x-aac':Js([Js('aac')]),'audio/x-aiff':Js([Js('aif'), Js('aiff'), Js('aifc')]),'audio/x-caf':Js([Js('caf')]),'audio/x-flac':Js([Js('flac')]),'audio/x-m4a':Js([Js('*m4a')]),'audio/x-matroska':Js([Js('mka')]),'audio/x-mpegurl':Js([Js('m3u')]),'audio/x-ms-wax':Js([Js('wax')]),'audio/x-ms-wma':Js([Js('wma')]),'audio/x-pn-realaudio':Js([Js('ram'), Js('ra')]),'audio/x-pn-realaudio-plugin':Js([Js('rmp')]),'audio/x-realaudio':Js([Js('*ra')]),'audio/x-wav':Js([Js('*wav')]),'chemical/x-cdx':Js([Js('cdx')]),'chemical/x-cif':Js([Js('cif')]),'chemical/x-cmdf':Js([Js('cmdf')]),'chemical/x-cml':Js([Js('cml')]),'chemical/x-csml':Js([Js('csml')]),'chemical/x-xyz':Js([Js('xyz')]),'image/prs.btif':Js([Js('btif')]),'image/prs.pti':Js([Js('pti')]),'image/vnd.adobe.photoshop':Js([Js('psd')]),'image/vnd.airzip.accelerator.azv':Js([Js('azv')]),'image/vnd.dece.graphic':Js([Js('uvi'), Js('uvvi'), Js('uvg'), Js('uvvg')]),'image/vnd.djvu':Js([Js('djvu'), Js('djv')]),'image/vnd.dvb.subtitle':Js([Js('*sub')]),'image/vnd.dwg':Js([Js('dwg')]),'image/vnd.dxf':Js([Js('dxf')]),'image/vnd.fastbidsheet':Js([Js('fbs')]),'image/vnd.fpx':Js([Js('fpx')]),'image/vnd.fst':Js([Js('fst')]),'image/vnd.fujixerox.edmics-mmr':Js([Js('mmr')]),'image/vnd.fujixerox.edmics-rlc':Js([Js('rlc')]),'image/vnd.microsoft.icon':Js([Js('ico')]),'image/vnd.ms-dds':Js([Js('dds')]),'image/vnd.ms-modi':Js([Js('mdi')]),'image/vnd.ms-photo':Js([Js('wdp')]),'image/vnd.net-fpx':Js([Js('npx')]),'image/vnd.tencent.tap':Js([Js('tap')]),'image/vnd.valve.source.texture':Js([Js('vtf')]),'image/vnd.wap.wbmp':Js([Js('wbmp')]),'image/vnd.xiff':Js([Js('xif')]),'image/vnd.zbrush.pcx':Js([Js('pcx')]),'image/x-3ds':Js([Js('3ds')]),'image/x-cmu-raster':Js([Js('ras')]),'image/x-cmx':Js([Js('cmx')]),'image/x-freehand':Js([Js('fh'), Js('fhc'), Js('fh4'), Js('fh5'), Js('fh7')]),'image/x-icon':Js([Js('*ico')]),'image/x-jng':Js([Js('jng')]),'image/x-mrsid-image':Js([Js('sid')]),'image/x-ms-bmp':Js([Js('*bmp')]),'image/x-pcx':Js([Js('*pcx')]),'image/x-pict':Js([Js('pic'), Js('pct')]),'image/x-portable-anymap':Js([Js('pnm')]),'image/x-portable-bitmap':Js([Js('pbm')]),'image/x-portable-graymap':Js([Js('pgm')]),'image/x-portable-pixmap':Js([Js('ppm')]),'image/x-rgb':Js([Js('rgb')]),'image/x-tga':Js([Js('tga')]),'image/x-xbitmap':Js([Js('xbm')]),'image/x-xpixmap':Js([Js('xpm')]),'image/x-xwindowdump':Js([Js('xwd')]),'message/vnd.wfa.wsc':Js([Js('wsc')]),'model/vnd.collada+xml':Js([Js('dae')]),'model/vnd.dwf':Js([Js('dwf')]),'model/vnd.gdl':Js([Js('gdl')]),'model/vnd.gtw':Js([Js('gtw')]),'model/vnd.mts':Js([Js('mts')]),'model/vnd.opengex':Js([Js('ogex')]),'model/vnd.parasolid.transmit.binary':Js([Js('x_b')]),'model/vnd.parasolid.transmit.text':Js([Js('x_t')]),'model/vnd.usdz+zip':Js([Js('usdz')]),'model/vnd.valve.source.compiled-map':Js([Js('bsp')]),'model/vnd.vtu':Js([Js('vtu')]),'text/prs.lines.tag':Js([Js('dsc')]),'text/vnd.curl':Js([Js('curl')]),'text/vnd.curl.dcurl':Js([Js('dcurl')]),'text/vnd.curl.mcurl':Js([Js('mcurl')]),'text/vnd.curl.scurl':Js([Js('scurl')]),'text/vnd.dvb.subtitle':Js([Js('sub')]),'text/vnd.fly':Js([Js('fly')]),'text/vnd.fmi.flexstor':Js([Js('flx')]),'text/vnd.graphviz':Js([Js('gv')]),'text/vnd.in3d.3dml':Js([Js('3dml')]),'text/vnd.in3d.spot':Js([Js('spot')]),'text/vnd.sun.j2me.app-descriptor':Js([Js('jad')]),'text/vnd.wap.wml':Js([Js('wml')]),'text/vnd.wap.wmlscript':Js([Js('wmls')]),'text/x-asm':Js([Js('s'), Js('asm')]),'text/x-c':Js([Js('c'), Js('cc'), Js('cxx'), Js('cpp'), Js('h'), Js('hh'), Js('dic')]),'text/x-component':Js([Js('htc')]),'text/x-fortran':Js([Js('f'), Js('for'), Js('f77'), Js('f90')]),'text/x-handlebars-template':Js([Js('hbs')]),'text/x-java-source':Js([Js('java')]),'text/x-lua':Js([Js('lua')]),'text/x-markdown':Js([Js('mkd')]),'text/x-nfo':Js([Js('nfo')]),'text/x-opml':Js([Js('opml')]),'text/x-org':Js([Js('*org')]),'text/x-pascal':Js([Js('p'), Js('pas')]),'text/x-processing':Js([Js('pde')]),'text/x-sass':Js([Js('sass')]),'text/x-scss':Js([Js('scss')]),'text/x-setext':Js([Js('etx')]),'text/x-sfv':Js([Js('sfv')]),'text/x-suse-ymp':Js([Js('ymp')]),'text/x-uuencode':Js([Js('uu')]),'text/x-vcalendar':Js([Js('vcs')]),'text/x-vcard':Js([Js('vcf')]),'video/vnd.dece.hd':Js([Js('uvh'), Js('uvvh')]),'video/vnd.dece.mobile':Js([Js('uvm'), Js('uvvm')]),'video/vnd.dece.pd':Js([Js('uvp'), Js('uvvp')]),'video/vnd.dece.sd':Js([Js('uvs'), Js('uvvs')]),'video/vnd.dece.video':Js([Js('uvv'), Js('uvvv')]),'video/vnd.dvb.file':Js([Js('dvb')]),'video/vnd.fvt':Js([Js('fvt')]),'video/vnd.mpegurl':Js([Js('mxu'), Js('m4u')]),'video/vnd.ms-playready.media.pyv':Js([Js('pyv')]),'video/vnd.uvvu.mp4':Js([Js('uvu'), Js('uvvu')]),'video/vnd.vivo':Js([Js('viv')]),'video/x-f4v':Js([Js('f4v')]),'video/x-fli':Js([Js('fli')]),'video/x-flv':Js([Js('flv')]),'video/x-m4v':Js([Js('m4v')]),'video/x-matroska':Js([Js('mkv'), Js('mk3d'), Js('mks')]),'video/x-mng':Js([Js('mng')]),'video/x-ms-asf':Js([Js('asf'), Js('asx')]),'video/x-ms-vob':Js([Js('vob')]),'video/x-ms-wm':Js([Js('wm')]),'video/x-ms-wmv':Js([Js('wmv')]),'video/x-ms-wmx':Js([Js('wmx')]),'video/x-ms-wvx':Js([Js('wvx')]),'video/x-msvideo':Js([Js('avi')]),'video/x-sgi-movie':Js([Js('movie')]),'video/x-smv':Js([Js('smv')]),'x-conference/x-cooltalk':Js([Js('ice')])}))
        PyJs_LONG_2054_()
    PyJs_anonymous_2053_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2055_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        def PyJs_LONG_2056_(var=var):
            return var.get('module').put('exports', Js({'application/andrew-inset':Js([Js('ez')]),'application/applixware':Js([Js('aw')]),'application/atom+xml':Js([Js('atom')]),'application/atomcat+xml':Js([Js('atomcat')]),'application/atomdeleted+xml':Js([Js('atomdeleted')]),'application/atomsvc+xml':Js([Js('atomsvc')]),'application/atsc-dwd+xml':Js([Js('dwd')]),'application/atsc-held+xml':Js([Js('held')]),'application/atsc-rsat+xml':Js([Js('rsat')]),'application/bdoc':Js([Js('bdoc')]),'application/calendar+xml':Js([Js('xcs')]),'application/ccxml+xml':Js([Js('ccxml')]),'application/cdfx+xml':Js([Js('cdfx')]),'application/cdmi-capability':Js([Js('cdmia')]),'application/cdmi-container':Js([Js('cdmic')]),'application/cdmi-domain':Js([Js('cdmid')]),'application/cdmi-object':Js([Js('cdmio')]),'application/cdmi-queue':Js([Js('cdmiq')]),'application/cu-seeme':Js([Js('cu')]),'application/dash+xml':Js([Js('mpd')]),'application/davmount+xml':Js([Js('davmount')]),'application/docbook+xml':Js([Js('dbk')]),'application/dssc+der':Js([Js('dssc')]),'application/dssc+xml':Js([Js('xdssc')]),'application/ecmascript':Js([Js('ecma'), Js('es')]),'application/emma+xml':Js([Js('emma')]),'application/emotionml+xml':Js([Js('emotionml')]),'application/epub+zip':Js([Js('epub')]),'application/exi':Js([Js('exi')]),'application/fdt+xml':Js([Js('fdt')]),'application/font-tdpfr':Js([Js('pfr')]),'application/geo+json':Js([Js('geojson')]),'application/gml+xml':Js([Js('gml')]),'application/gpx+xml':Js([Js('gpx')]),'application/gxf':Js([Js('gxf')]),'application/gzip':Js([Js('gz')]),'application/hjson':Js([Js('hjson')]),'application/hyperstudio':Js([Js('stk')]),'application/inkml+xml':Js([Js('ink'), Js('inkml')]),'application/ipfix':Js([Js('ipfix')]),'application/its+xml':Js([Js('its')]),'application/java-archive':Js([Js('jar'), Js('war'), Js('ear')]),'application/java-serialized-object':Js([Js('ser')]),'application/java-vm':Js([Js('class')]),'application/javascript':Js([Js('js'), Js('mjs')]),'application/json':Js([Js('json'), Js('map')]),'application/json5':Js([Js('json5')]),'application/jsonml+json':Js([Js('jsonml')]),'application/ld+json':Js([Js('jsonld')]),'application/lgr+xml':Js([Js('lgr')]),'application/lost+xml':Js([Js('lostxml')]),'application/mac-binhex40':Js([Js('hqx')]),'application/mac-compactpro':Js([Js('cpt')]),'application/mads+xml':Js([Js('mads')]),'application/manifest+json':Js([Js('webmanifest')]),'application/marc':Js([Js('mrc')]),'application/marcxml+xml':Js([Js('mrcx')]),'application/mathematica':Js([Js('ma'), Js('nb'), Js('mb')]),'application/mathml+xml':Js([Js('mathml')]),'application/mbox':Js([Js('mbox')]),'application/mediaservercontrol+xml':Js([Js('mscml')]),'application/metalink+xml':Js([Js('metalink')]),'application/metalink4+xml':Js([Js('meta4')]),'application/mets+xml':Js([Js('mets')]),'application/mmt-aei+xml':Js([Js('maei')]),'application/mmt-usd+xml':Js([Js('musd')]),'application/mods+xml':Js([Js('mods')]),'application/mp21':Js([Js('m21'), Js('mp21')]),'application/mp4':Js([Js('mp4s'), Js('m4p')]),'application/mrb-consumer+xml':Js([Js('*xdf')]),'application/mrb-publish+xml':Js([Js('*xdf')]),'application/msword':Js([Js('doc'), Js('dot')]),'application/mxf':Js([Js('mxf')]),'application/n-quads':Js([Js('nq')]),'application/n-triples':Js([Js('nt')]),'application/node':Js([Js('cjs')]),'application/octet-stream':Js([Js('bin'), Js('dms'), Js('lrf'), Js('mar'), Js('so'), Js('dist'), Js('distz'), Js('pkg'), Js('bpk'), Js('dump'), Js('elc'), Js('deploy'), Js('exe'), Js('dll'), Js('deb'), Js('dmg'), Js('iso'), Js('img'), Js('msi'), Js('msp'), Js('msm'), Js('buffer')]),'application/oda':Js([Js('oda')]),'application/oebps-package+xml':Js([Js('opf')]),'application/ogg':Js([Js('ogx')]),'application/omdoc+xml':Js([Js('omdoc')]),'application/onenote':Js([Js('onetoc'), Js('onetoc2'), Js('onetmp'), Js('onepkg')]),'application/oxps':Js([Js('oxps')]),'application/p2p-overlay+xml':Js([Js('relo')]),'application/patch-ops-error+xml':Js([Js('*xer')]),'application/pdf':Js([Js('pdf')]),'application/pgp-encrypted':Js([Js('pgp')]),'application/pgp-signature':Js([Js('asc'), Js('sig')]),'application/pics-rules':Js([Js('prf')]),'application/pkcs10':Js([Js('p10')]),'application/pkcs7-mime':Js([Js('p7m'), Js('p7c')]),'application/pkcs7-signature':Js([Js('p7s')]),'application/pkcs8':Js([Js('p8')]),'application/pkix-attr-cert':Js([Js('ac')]),'application/pkix-cert':Js([Js('cer')]),'application/pkix-crl':Js([Js('crl')]),'application/pkix-pkipath':Js([Js('pkipath')]),'application/pkixcmp':Js([Js('pki')]),'application/pls+xml':Js([Js('pls')]),'application/postscript':Js([Js('ai'), Js('eps'), Js('ps')]),'application/provenance+xml':Js([Js('provx')]),'application/pskc+xml':Js([Js('pskcxml')]),'application/raml+yaml':Js([Js('raml')]),'application/rdf+xml':Js([Js('rdf'), Js('owl')]),'application/reginfo+xml':Js([Js('rif')]),'application/relax-ng-compact-syntax':Js([Js('rnc')]),'application/resource-lists+xml':Js([Js('rl')]),'application/resource-lists-diff+xml':Js([Js('rld')]),'application/rls-services+xml':Js([Js('rs')]),'application/route-apd+xml':Js([Js('rapd')]),'application/route-s-tsid+xml':Js([Js('sls')]),'application/route-usd+xml':Js([Js('rusd')]),'application/rpki-ghostbusters':Js([Js('gbr')]),'application/rpki-manifest':Js([Js('mft')]),'application/rpki-roa':Js([Js('roa')]),'application/rsd+xml':Js([Js('rsd')]),'application/rss+xml':Js([Js('rss')]),'application/rtf':Js([Js('rtf')]),'application/sbml+xml':Js([Js('sbml')]),'application/scvp-cv-request':Js([Js('scq')]),'application/scvp-cv-response':Js([Js('scs')]),'application/scvp-vp-request':Js([Js('spq')]),'application/scvp-vp-response':Js([Js('spp')]),'application/sdp':Js([Js('sdp')]),'application/senml+xml':Js([Js('senmlx')]),'application/sensml+xml':Js([Js('sensmlx')]),'application/set-payment-initiation':Js([Js('setpay')]),'application/set-registration-initiation':Js([Js('setreg')]),'application/shf+xml':Js([Js('shf')]),'application/sieve':Js([Js('siv'), Js('sieve')]),'application/smil+xml':Js([Js('smi'), Js('smil')]),'application/sparql-query':Js([Js('rq')]),'application/sparql-results+xml':Js([Js('srx')]),'application/srgs':Js([Js('gram')]),'application/srgs+xml':Js([Js('grxml')]),'application/sru+xml':Js([Js('sru')]),'application/ssdl+xml':Js([Js('ssdl')]),'application/ssml+xml':Js([Js('ssml')]),'application/swid+xml':Js([Js('swidtag')]),'application/tei+xml':Js([Js('tei'), Js('teicorpus')]),'application/thraud+xml':Js([Js('tfi')]),'application/timestamped-data':Js([Js('tsd')]),'application/toml':Js([Js('toml')]),'application/ttml+xml':Js([Js('ttml')]),'application/urc-ressheet+xml':Js([Js('rsheet')]),'application/voicexml+xml':Js([Js('vxml')]),'application/wasm':Js([Js('wasm')]),'application/widget':Js([Js('wgt')]),'application/winhlp':Js([Js('hlp')]),'application/wsdl+xml':Js([Js('wsdl')]),'application/wspolicy+xml':Js([Js('wspolicy')]),'application/xaml+xml':Js([Js('xaml')]),'application/xcap-att+xml':Js([Js('xav')]),'application/xcap-caps+xml':Js([Js('xca')]),'application/xcap-diff+xml':Js([Js('xdf')]),'application/xcap-el+xml':Js([Js('xel')]),'application/xcap-error+xml':Js([Js('xer')]),'application/xcap-ns+xml':Js([Js('xns')]),'application/xenc+xml':Js([Js('xenc')]),'application/xhtml+xml':Js([Js('xhtml'), Js('xht')]),'application/xliff+xml':Js([Js('xlf')]),'application/xml':Js([Js('xml'), Js('xsl'), Js('xsd'), Js('rng')]),'application/xml-dtd':Js([Js('dtd')]),'application/xop+xml':Js([Js('xop')]),'application/xproc+xml':Js([Js('xpl')]),'application/xslt+xml':Js([Js('xslt')]),'application/xspf+xml':Js([Js('xspf')]),'application/xv+xml':Js([Js('mxml'), Js('xhvml'), Js('xvml'), Js('xvm')]),'application/yang':Js([Js('yang')]),'application/yin+xml':Js([Js('yin')]),'application/zip':Js([Js('zip')]),'audio/3gpp':Js([Js('*3gpp')]),'audio/adpcm':Js([Js('adp')]),'audio/basic':Js([Js('au'), Js('snd')]),'audio/midi':Js([Js('mid'), Js('midi'), Js('kar'), Js('rmi')]),'audio/mobile-xmf':Js([Js('mxmf')]),'audio/mp3':Js([Js('*mp3')]),'audio/mp4':Js([Js('m4a'), Js('mp4a')]),'audio/mpeg':Js([Js('mpga'), Js('mp2'), Js('mp2a'), Js('mp3'), Js('m2a'), Js('m3a')]),'audio/ogg':Js([Js('oga'), Js('ogg'), Js('spx')]),'audio/s3m':Js([Js('s3m')]),'audio/silk':Js([Js('sil')]),'audio/wav':Js([Js('wav')]),'audio/wave':Js([Js('*wav')]),'audio/webm':Js([Js('weba')]),'audio/xm':Js([Js('xm')]),'font/collection':Js([Js('ttc')]),'font/otf':Js([Js('otf')]),'font/ttf':Js([Js('ttf')]),'font/woff':Js([Js('woff')]),'font/woff2':Js([Js('woff2')]),'image/aces':Js([Js('exr')]),'image/apng':Js([Js('apng')]),'image/bmp':Js([Js('bmp')]),'image/cgm':Js([Js('cgm')]),'image/dicom-rle':Js([Js('drle')]),'image/emf':Js([Js('emf')]),'image/fits':Js([Js('fits')]),'image/g3fax':Js([Js('g3')]),'image/gif':Js([Js('gif')]),'image/heic':Js([Js('heic')]),'image/heic-sequence':Js([Js('heics')]),'image/heif':Js([Js('heif')]),'image/heif-sequence':Js([Js('heifs')]),'image/hej2k':Js([Js('hej2')]),'image/hsj2':Js([Js('hsj2')]),'image/ief':Js([Js('ief')]),'image/jls':Js([Js('jls')]),'image/jp2':Js([Js('jp2'), Js('jpg2')]),'image/jpeg':Js([Js('jpeg'), Js('jpg'), Js('jpe')]),'image/jph':Js([Js('jph')]),'image/jphc':Js([Js('jhc')]),'image/jpm':Js([Js('jpm')]),'image/jpx':Js([Js('jpx'), Js('jpf')]),'image/jxr':Js([Js('jxr')]),'image/jxra':Js([Js('jxra')]),'image/jxrs':Js([Js('jxrs')]),'image/jxs':Js([Js('jxs')]),'image/jxsc':Js([Js('jxsc')]),'image/jxsi':Js([Js('jxsi')]),'image/jxss':Js([Js('jxss')]),'image/ktx':Js([Js('ktx')]),'image/png':Js([Js('png')]),'image/sgi':Js([Js('sgi')]),'image/svg+xml':Js([Js('svg'), Js('svgz')]),'image/t38':Js([Js('t38')]),'image/tiff':Js([Js('tif'), Js('tiff')]),'image/tiff-fx':Js([Js('tfx')]),'image/webp':Js([Js('webp')]),'image/wmf':Js([Js('wmf')]),'message/disposition-notification':Js([Js('disposition-notification')]),'message/global':Js([Js('u8msg')]),'message/global-delivery-status':Js([Js('u8dsn')]),'message/global-disposition-notification':Js([Js('u8mdn')]),'message/global-headers':Js([Js('u8hdr')]),'message/rfc822':Js([Js('eml'), Js('mime')]),'model/3mf':Js([Js('3mf')]),'model/gltf+json':Js([Js('gltf')]),'model/gltf-binary':Js([Js('glb')]),'model/iges':Js([Js('igs'), Js('iges')]),'model/mesh':Js([Js('msh'), Js('mesh'), Js('silo')]),'model/mtl':Js([Js('mtl')]),'model/obj':Js([Js('obj')]),'model/stl':Js([Js('stl')]),'model/vrml':Js([Js('wrl'), Js('vrml')]),'model/x3d+binary':Js([Js('*x3db'), Js('x3dbz')]),'model/x3d+fastinfoset':Js([Js('x3db')]),'model/x3d+vrml':Js([Js('*x3dv'), Js('x3dvz')]),'model/x3d+xml':Js([Js('x3d'), Js('x3dz')]),'model/x3d-vrml':Js([Js('x3dv')]),'text/cache-manifest':Js([Js('appcache'), Js('manifest')]),'text/calendar':Js([Js('ics'), Js('ifb')]),'text/coffeescript':Js([Js('coffee'), Js('litcoffee')]),'text/css':Js([Js('css')]),'text/csv':Js([Js('csv')]),'text/html':Js([Js('html'), Js('htm'), Js('shtml')]),'text/jade':Js([Js('jade')]),'text/jsx':Js([Js('jsx')]),'text/less':Js([Js('less')]),'text/markdown':Js([Js('markdown'), Js('md')]),'text/mathml':Js([Js('mml')]),'text/mdx':Js([Js('mdx')]),'text/n3':Js([Js('n3')]),'text/plain':Js([Js('txt'), Js('text'), Js('conf'), Js('def'), Js('list'), Js('log'), Js('in'), Js('ini')]),'text/richtext':Js([Js('rtx')]),'text/rtf':Js([Js('*rtf')]),'text/sgml':Js([Js('sgml'), Js('sgm')]),'text/shex':Js([Js('shex')]),'text/slim':Js([Js('slim'), Js('slm')]),'text/stylus':Js([Js('stylus'), Js('styl')]),'text/tab-separated-values':Js([Js('tsv')]),'text/troff':Js([Js('t'), Js('tr'), Js('roff'), Js('man'), Js('me'), Js('ms')]),'text/turtle':Js([Js('ttl')]),'text/uri-list':Js([Js('uri'), Js('uris'), Js('urls')]),'text/vcard':Js([Js('vcard')]),'text/vtt':Js([Js('vtt')]),'text/xml':Js([Js('*xml')]),'text/yaml':Js([Js('yaml'), Js('yml')]),'video/3gpp':Js([Js('3gp'), Js('3gpp')]),'video/3gpp2':Js([Js('3g2')]),'video/h261':Js([Js('h261')]),'video/h263':Js([Js('h263')]),'video/h264':Js([Js('h264')]),'video/jpeg':Js([Js('jpgv')]),'video/jpm':Js([Js('*jpm'), Js('jpgm')]),'video/mj2':Js([Js('mj2'), Js('mjp2')]),'video/mp2t':Js([Js('ts')]),'video/mp4':Js([Js('mp4'), Js('mp4v'), Js('mpg4')]),'video/mpeg':Js([Js('mpeg'), Js('mpg'), Js('mpe'), Js('m1v'), Js('m2v')]),'video/ogg':Js([Js('ogv')]),'video/quicktime':Js([Js('qt'), Js('mov')]),'video/webm':Js([Js('webm')])}))
        PyJs_LONG_2056_()
    PyJs_anonymous_2055_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2057_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        Js('use strict')
        var.get('module').put('exports', var.get('require')(Js('./lib/obj2gltf')))
    PyJs_anonymous_2057_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2058_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_2059_(Buffer, this, arguments, var=var):
            var = Scope({'Buffer':Buffer, 'this':this, 'arguments':arguments}, var)
            var.registers(['Buffer'])
            @Js
            def PyJs_anonymous_2060_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['doublingThreshold', 'sizeOfUint32', 'initialLength', 'Cesium', 'resize', 'sizeOfUint16', 'ArrayStorage', 'sizeOfFloat', 'fixedExpansionLength', 'ComponentDatatype'])
                @Js
                def PyJsHoisted_ArrayStorage_(componentDatatype, this, arguments, var=var):
                    var = Scope({'componentDatatype':componentDatatype, 'this':this, 'arguments':arguments}, var)
                    var.registers(['componentDatatype'])
                    var.get(u"this").put('componentDatatype', var.get('componentDatatype'))
                    var.get(u"this").put('typedArray', var.get('ComponentDatatype').callprop('createTypedArray', var.get('componentDatatype'), Js(0.0)))
                    var.get(u"this").put('length', Js(0.0))
                PyJsHoisted_ArrayStorage_.func_name = 'ArrayStorage'
                var.put('ArrayStorage', PyJsHoisted_ArrayStorage_)
                @Js
                def PyJsHoisted_resize_(storage, length, this, arguments, var=var):
                    var = Scope({'storage':storage, 'length':length, 'this':this, 'arguments':arguments}, var)
                    var.registers(['typedArray', 'length', 'storage'])
                    var.put('typedArray', var.get('ComponentDatatype').callprop('createTypedArray', var.get('storage').get('componentDatatype'), var.get('length')))
                    var.get('typedArray').callprop('set', var.get('storage').get('typedArray'))
                    var.get('storage').put('typedArray', var.get('typedArray'))
                PyJsHoisted_resize_.func_name = 'resize'
                var.put('resize', PyJsHoisted_resize_)
                Js('use strict')
                var.put('Cesium', var.get('require')(Js('cesium')))
                var.put('ComponentDatatype', var.get('Cesium').get('ComponentDatatype'))
                var.get('module').put('exports', var.get('ArrayStorage'))
                var.put('initialLength', Js(1024.0))
                var.put('doublingThreshold', Js(33554432.0))
                var.put('fixedExpansionLength', Js(33554432.0))
                pass
                pass
                @Js
                def PyJs_anonymous_2061_(value, this, arguments, var=var):
                    var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                    var.registers(['length', 'typedArrayLength', 'value'])
                    var.put('length', var.get(u"this").get('length'))
                    var.put('typedArrayLength', var.get(u"this").get('typedArray').get('length'))
                    if PyJsStrictEq(var.get('length'),Js(0.0)):
                        var.get('resize')(var.get(u"this"), var.get('initialLength'))
                    else:
                        if PyJsStrictEq(var.get('length'),var.get('typedArrayLength')):
                            if (var.get('length')<var.get('doublingThreshold')):
                                var.get('resize')(var.get(u"this"), (var.get('typedArrayLength')*Js(2.0)))
                            else:
                                var.get('resize')(var.get(u"this"), (var.get('typedArrayLength')+var.get('fixedExpansionLength')))
                    var.get(u"this").get('typedArray').put((var.get(u"this").put('length',Js(var.get(u"this").get('length').to_number())+Js(1))-Js(1)), var.get('value'))
                PyJs_anonymous_2061_._set_name('anonymous')
                var.get('ArrayStorage').get('prototype').put('push', PyJs_anonymous_2061_)
                @Js
                def PyJs_anonymous_2062_(index, this, arguments, var=var):
                    var = Scope({'index':index, 'this':this, 'arguments':arguments}, var)
                    var.registers(['index'])
                    return var.get(u"this").get('typedArray').get(var.get('index'))
                PyJs_anonymous_2062_._set_name('anonymous')
                var.get('ArrayStorage').get('prototype').put('get', PyJs_anonymous_2062_)
                var.put('sizeOfUint16', Js(2.0))
                var.put('sizeOfUint32', Js(4.0))
                var.put('sizeOfFloat', Js(4.0))
                @Js
                def PyJs_anonymous_2063_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers(['typedArray', 'i', 'buffer', 'length', 'paddedLength'])
                    var.put('length', var.get(u"this").get('length'))
                    var.put('typedArray', var.get(u"this").get('typedArray'))
                    var.put('paddedLength', (var.get('length')+(Js(0.0) if PyJsStrictEq((var.get('length')%Js(2.0)),Js(0.0)) else Js(1.0))))
                    var.put('buffer', var.get('Buffer').callprop('alloc', (var.get('paddedLength')*var.get('sizeOfUint16'))))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('length')):
                        try:
                            var.get('buffer').callprop('writeUInt16LE', var.get('typedArray').get(var.get('i')), (var.get('i')*var.get('sizeOfUint16')))
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    return var.get('buffer')
                PyJs_anonymous_2063_._set_name('anonymous')
                var.get('ArrayStorage').get('prototype').put('toUint16Buffer', PyJs_anonymous_2063_)
                @Js
                def PyJs_anonymous_2064_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers(['typedArray', 'length', 'buffer', 'i'])
                    var.put('length', var.get(u"this").get('length'))
                    var.put('typedArray', var.get(u"this").get('typedArray'))
                    var.put('buffer', var.get('Buffer').callprop('alloc', (var.get('length')*var.get('sizeOfUint32'))))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('length')):
                        try:
                            var.get('buffer').callprop('writeUInt32LE', var.get('typedArray').get(var.get('i')), (var.get('i')*var.get('sizeOfUint32')))
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    return var.get('buffer')
                PyJs_anonymous_2064_._set_name('anonymous')
                var.get('ArrayStorage').get('prototype').put('toUint32Buffer', PyJs_anonymous_2064_)
                @Js
                def PyJs_anonymous_2065_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers(['typedArray', 'length', 'buffer', 'i'])
                    var.put('length', var.get(u"this").get('length'))
                    var.put('typedArray', var.get(u"this").get('typedArray'))
                    var.put('buffer', var.get('Buffer').callprop('alloc', (var.get('length')*var.get('sizeOfFloat'))))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('length')):
                        try:
                            var.get('buffer').callprop('writeFloatLE', var.get('typedArray').get(var.get('i')), (var.get('i')*var.get('sizeOfFloat')))
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    return var.get('buffer')
                PyJs_anonymous_2065_._set_name('anonymous')
                var.get('ArrayStorage').get('prototype').put('toFloatBuffer', PyJs_anonymous_2065_)
                @Js
                def PyJs_anonymous_2066_(components, this, arguments, var=var):
                    var = Scope({'components':components, 'this':this, 'arguments':arguments}, var)
                    var.registers(['typedArray', 'i', 'components', 'count', 'max', 'min', 'length', 'index', 'value', 'j'])
                    var.put('length', var.get(u"this").get('length'))
                    var.put('typedArray', var.get(u"this").get('typedArray'))
                    var.put('count', (var.get('length')/var.get('components')))
                    var.put('min', var.get('Array').create(var.get('components')).callprop('fill', var.get('Number').get('POSITIVE_INFINITY')))
                    var.put('max', var.get('Array').create(var.get('components')).callprop('fill', var.get('Number').get('NEGATIVE_INFINITY')))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('count')):
                        try:
                            #for JS loop
                            var.put('j', Js(0.0))
                            while (var.get('j')<var.get('components')):
                                try:
                                    var.put('index', ((var.get('i')*var.get('components'))+var.get('j')))
                                    var.put('value', var.get('typedArray').get(var.get('index')))
                                    var.get('min').put(var.get('j'), var.get('Math').callprop('min', var.get('min').get(var.get('j')), var.get('value')))
                                    var.get('max').put(var.get('j'), var.get('Math').callprop('max', var.get('max').get(var.get('j')), var.get('value')))
                                finally:
                                        var.put('j',Js(var.get('j').to_number())+Js(1))
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    return Js({'min':var.get('min'),'max':var.get('max')})
                PyJs_anonymous_2066_._set_name('anonymous')
                var.get('ArrayStorage').get('prototype').put('getMinMax', PyJs_anonymous_2066_)
            PyJs_anonymous_2060_._set_name('anonymous')
            PyJs_anonymous_2060_.callprop('call', var.get(u"this"))
        PyJs_anonymous_2059_._set_name('anonymous')
        PyJs_anonymous_2059_.callprop('call', var.get(u"this"), var.get('require')(Js('buffer')).get('Buffer'))
    PyJs_anonymous_2058_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2067_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['Texture', 'module', 'require', 'exports'])
        @Js
        def PyJsHoisted_Texture_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").put('transparent', Js(False))
            var.get(u"this").put('source', var.get('undefined'))
            var.get(u"this").put('name', var.get('undefined'))
            var.get(u"this").put('extension', var.get('undefined'))
            var.get(u"this").put('path', var.get('undefined'))
            var.get(u"this").put('pixels', var.get('undefined'))
            var.get(u"this").put('width', var.get('undefined'))
            var.get(u"this").put('height', var.get('undefined'))
        PyJsHoisted_Texture_.func_name = 'Texture'
        var.put('Texture', PyJsHoisted_Texture_)
        Js('use strict')
        var.get('module').put('exports', var.get('Texture'))
        pass
    PyJs_anonymous_2067_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2068_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_2069_(Buffer, this, arguments, var=var):
            var = Scope({'Buffer':Buffer, 'this':this, 'arguments':arguments}, var)
            var.registers(['Buffer'])
            @Js
            def PyJs_anonymous_2070_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['addGltfMaterial', 'Texture', 'BUFFER_MAX_BYTE_LENGTH', 'addCombinedBuffers', 'addBuffers', 'getTexture', 'defined', 'addMesh', 'getMaterialIndex', 'createGltf', 'getOrCreateGltfMaterial', 'Cesium', 'requiresUint32Indices', 'addPrimitive', 'getBufferPadded', 'WebGLConstants', 'defaultValue', 'addSeparateBufferView', 'addVertexAttribute', 'addIndexArray', 'addSeparateBufferViews', 'primitiveInfoMatch', 'addCombinedBufferView', 'addNode', 'cloneMaterial', 'getDefaultMaterial', 'getSplitMaterialName', 'splitIncompatibleMaterials', 'addSeparateBuffers', 'getMaterialByName', 'addTexture', 'resolveTextures'])
                @Js
                def PyJsHoisted_createGltf_(objData, options, this, arguments, var=var):
                    var = Scope({'objData':objData, 'options':options, 'this':this, 'arguments':arguments}, var)
                    var.registers(['_meshIndex', 'objData', 'gltf', 'nodesLength', 'i', 'meshIndex', 'uint32Indices', 'parentIndex', 'meshes', 'name', 'meshesLength', 'options', 'nodes', 'mesh', 'materials', 'node', 'bufferState', 'j'])
                    var.put('nodes', var.get('objData').get('nodes'))
                    var.put('materials', var.get('objData').get('materials'))
                    var.put('name', var.get('objData').get('name'))
                    var.put('materials', var.get('splitIncompatibleMaterials')(var.get('nodes'), var.get('materials'), var.get('options')))
                    var.put('gltf', Js({'accessors':Js([]),'asset':Js({}),'buffers':Js([]),'bufferViews':Js([]),'extensionsUsed':Js([]),'extensionsRequired':Js([]),'images':Js([]),'materials':Js([]),'meshes':Js([]),'nodes':Js([]),'samplers':Js([]),'scene':Js(0.0),'scenes':Js([]),'textures':Js([])}))
                    var.get('gltf').put('asset', Js({'generator':Js('obj2gltf'),'version':Js('2.0')}))
                    var.get('gltf').get('scenes').callprop('push', Js({'nodes':Js([])}))
                    var.put('bufferState', Js({'positionBuffers':Js([]),'normalBuffers':Js([]),'uvBuffers':Js([]),'indexBuffers':Js([]),'positionAccessors':Js([]),'normalAccessors':Js([]),'uvAccessors':Js([]),'indexAccessors':Js([])}))
                    var.put('uint32Indices', var.get('requiresUint32Indices')(var.get('nodes')))
                    var.put('nodesLength', var.get('nodes').get('length'))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('nodesLength')):
                        try:
                            var.put('node', var.get('nodes').get(var.get('i')))
                            var.put('meshes', var.get('node').get('meshes'))
                            var.put('meshesLength', var.get('meshes').get('length'))
                            if PyJsStrictEq(var.get('meshesLength'),Js(1.0)):
                                var.put('meshIndex', var.get('addMesh')(var.get('gltf'), var.get('materials'), var.get('bufferState'), var.get('uint32Indices'), var.get('meshes').get('0'), var.get('options')))
                                var.get('addNode')(var.get('gltf'), var.get('node').get('name'), var.get('meshIndex'), var.get('undefined'))
                            else:
                                var.put('parentIndex', var.get('addNode')(var.get('gltf'), var.get('node').get('name')))
                                #for JS loop
                                var.put('j', Js(0.0))
                                while (var.get('j')<var.get('meshesLength')):
                                    try:
                                        var.put('mesh', var.get('meshes').get(var.get('j')))
                                        var.put('_meshIndex', var.get('addMesh')(var.get('gltf'), var.get('materials'), var.get('bufferState'), var.get('uint32Indices'), var.get('mesh'), var.get('options')))
                                        var.get('addNode')(var.get('gltf'), var.get('mesh').get('name'), var.get('_meshIndex'), var.get('parentIndex'))
                                    finally:
                                            var.put('j',Js(var.get('j').to_number())+Js(1))
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    if (var.get('gltf').get('images').get('length')>Js(0.0)):
                        var.get('gltf').get('samplers').callprop('push', Js({'magFilter':var.get('WebGLConstants').get('LINEAR'),'minFilter':var.get('WebGLConstants').get('NEAREST_MIPMAP_LINEAR'),'wrapS':var.get('WebGLConstants').get('REPEAT'),'wrapT':var.get('WebGLConstants').get('REPEAT')}))
                    var.get('addBuffers')(var.get('gltf'), var.get('bufferState'), var.get('name'), var.get('options').get('separate'))
                    if var.get('options').get('specularGlossiness'):
                        var.get('gltf').get('extensionsUsed').callprop('push', Js('KHR_materials_pbrSpecularGlossiness'))
                        var.get('gltf').get('extensionsRequired').callprop('push', Js('KHR_materials_pbrSpecularGlossiness'))
                    if var.get('options').get('unlit'):
                        var.get('gltf').get('extensionsUsed').callprop('push', Js('KHR_materials_unlit'))
                        var.get('gltf').get('extensionsRequired').callprop('push', Js('KHR_materials_unlit'))
                    return var.get('gltf')
                PyJsHoisted_createGltf_.func_name = 'createGltf'
                var.put('createGltf', PyJsHoisted_createGltf_)
                @Js
                def PyJsHoisted_addCombinedBufferView_(gltf, buffers, accessors, byteStride, target, this, arguments, var=var):
                    var = Scope({'gltf':gltf, 'buffers':buffers, 'accessors':accessors, 'byteStride':byteStride, 'target':target, 'this':this, 'arguments':arguments}, var)
                    var.registers(['previousBufferView', 'byteLength', 'byteOffset', 'gltf', 'i', 'target', 'accessors', 'buffers', 'bufferViewIndex', 'length', 'accessor', 'byteStride'])
                    var.put('length', var.get('buffers').get('length'))
                    if PyJsStrictEq(var.get('length'),Js(0.0)):
                        return var.get('undefined')
                    var.put('bufferViewIndex', var.get('gltf').get('bufferViews').get('length'))
                    var.put('previousBufferView', var.get('gltf').get('bufferViews').get((var.get('bufferViewIndex')-Js(1.0))))
                    var.put('byteOffset', ((var.get('previousBufferView').get('byteOffset')+var.get('previousBufferView').get('byteLength')) if var.get('defined')(var.get('previousBufferView')) else Js(0.0)))
                    var.put('byteLength', Js(0.0))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('length')):
                        try:
                            var.put('accessor', var.get('gltf').get('accessors').get(var.get('accessors').get(var.get('i'))))
                            var.get('accessor').put('bufferView', var.get('bufferViewIndex'))
                            var.get('accessor').put('byteOffset', var.get('byteLength'))
                            var.put('byteLength', var.get('buffers').get(var.get('i')).get('length'), '+')
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    var.get('gltf').get('bufferViews').callprop('push', Js({'name':(Js('bufferView_')+var.get('bufferViewIndex')),'buffer':Js(0.0),'byteLength':var.get('byteLength'),'byteOffset':var.get('byteOffset'),'byteStride':var.get('byteStride'),'target':var.get('target')}))
                PyJsHoisted_addCombinedBufferView_.func_name = 'addCombinedBufferView'
                var.put('addCombinedBufferView', PyJsHoisted_addCombinedBufferView_)
                @Js
                def PyJsHoisted_addCombinedBuffers_(gltf, bufferState, name, this, arguments, var=var):
                    var = Scope({'gltf':gltf, 'bufferState':bufferState, 'name':name, 'this':this, 'arguments':arguments}, var)
                    var.registers(['gltf', 'buffer', 'buffers', 'name', 'bufferState'])
                    var.get('addCombinedBufferView')(var.get('gltf'), var.get('bufferState').get('positionBuffers'), var.get('bufferState').get('positionAccessors'), Js(12.0), var.get('WebGLConstants').get('ARRAY_BUFFER'))
                    var.get('addCombinedBufferView')(var.get('gltf'), var.get('bufferState').get('normalBuffers'), var.get('bufferState').get('normalAccessors'), Js(12.0), var.get('WebGLConstants').get('ARRAY_BUFFER'))
                    var.get('addCombinedBufferView')(var.get('gltf'), var.get('bufferState').get('uvBuffers'), var.get('bufferState').get('uvAccessors'), Js(8.0), var.get('WebGLConstants').get('ARRAY_BUFFER'))
                    var.get('addCombinedBufferView')(var.get('gltf'), var.get('bufferState').get('indexBuffers'), var.get('bufferState').get('indexAccessors'), var.get('undefined'), var.get('WebGLConstants').get('ELEMENT_ARRAY_BUFFER'))
                    var.put('buffers', Js([]))
                    var.put('buffers', var.get('buffers').callprop('concat', var.get('bufferState').get('positionBuffers'), var.get('bufferState').get('normalBuffers'), var.get('bufferState').get('uvBuffers'), var.get('bufferState').get('indexBuffers')))
                    var.put('buffer', var.get('getBufferPadded')(var.get('Buffer').callprop('concat', var.get('buffers'))))
                    var.get('gltf').get('buffers').callprop('push', Js({'name':var.get('name'),'byteLength':var.get('buffer').get('length'),'extras':Js({'_obj2gltf':Js({'source':var.get('buffer')})})}))
                PyJsHoisted_addCombinedBuffers_.func_name = 'addCombinedBuffers'
                var.put('addCombinedBuffers', PyJsHoisted_addCombinedBuffers_)
                @Js
                def PyJsHoisted_addSeparateBufferView_(gltf, buffer, accessor, byteStride, target, name, this, arguments, var=var):
                    var = Scope({'gltf':gltf, 'buffer':buffer, 'accessor':accessor, 'byteStride':byteStride, 'target':target, 'name':name, 'this':this, 'arguments':arguments}, var)
                    var.registers(['gltf', 'bufferIndex', 'buffer', 'target', 'name', 'bufferViewIndex', 'accessor', 'byteStride'])
                    var.put('bufferIndex', var.get('gltf').get('buffers').get('length'))
                    var.put('bufferViewIndex', var.get('gltf').get('bufferViews').get('length'))
                    var.get('gltf').get('buffers').callprop('push', Js({'name':((var.get('name')+Js('_'))+var.get('bufferIndex')),'byteLength':var.get('buffer').get('length'),'extras':Js({'_obj2gltf':Js({'source':var.get('buffer')})})}))
                    var.get('gltf').get('bufferViews').callprop('push', Js({'buffer':var.get('bufferIndex'),'byteLength':var.get('buffer').get('length'),'byteOffset':Js(0.0),'byteStride':var.get('byteStride'),'target':var.get('target')}))
                    var.get('gltf').get('accessors').get(var.get('accessor')).put('bufferView', var.get('bufferViewIndex'))
                    var.get('gltf').get('accessors').get(var.get('accessor')).put('byteOffset', Js(0.0))
                PyJsHoisted_addSeparateBufferView_.func_name = 'addSeparateBufferView'
                var.put('addSeparateBufferView', PyJsHoisted_addSeparateBufferView_)
                @Js
                def PyJsHoisted_addSeparateBufferViews_(gltf, buffers, accessors, byteStride, target, name, this, arguments, var=var):
                    var = Scope({'gltf':gltf, 'buffers':buffers, 'accessors':accessors, 'byteStride':byteStride, 'target':target, 'name':name, 'this':this, 'arguments':arguments}, var)
                    var.registers(['gltf', 'i', 'target', 'accessors', 'buffers', 'name', 'length', 'byteStride'])
                    var.put('length', var.get('buffers').get('length'))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('length')):
                        try:
                            var.get('addSeparateBufferView')(var.get('gltf'), var.get('buffers').get(var.get('i')), var.get('accessors').get(var.get('i')), var.get('byteStride'), var.get('target'), var.get('name'))
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                PyJsHoisted_addSeparateBufferViews_.func_name = 'addSeparateBufferViews'
                var.put('addSeparateBufferViews', PyJsHoisted_addSeparateBufferViews_)
                @Js
                def PyJsHoisted_addSeparateBuffers_(gltf, bufferState, name, this, arguments, var=var):
                    var = Scope({'gltf':gltf, 'bufferState':bufferState, 'name':name, 'this':this, 'arguments':arguments}, var)
                    var.registers(['gltf', 'bufferState', 'name'])
                    var.get('addSeparateBufferViews')(var.get('gltf'), var.get('bufferState').get('positionBuffers'), var.get('bufferState').get('positionAccessors'), Js(12.0), var.get('WebGLConstants').get('ARRAY_BUFFER'), var.get('name'))
                    var.get('addSeparateBufferViews')(var.get('gltf'), var.get('bufferState').get('normalBuffers'), var.get('bufferState').get('normalAccessors'), Js(12.0), var.get('WebGLConstants').get('ARRAY_BUFFER'), var.get('name'))
                    var.get('addSeparateBufferViews')(var.get('gltf'), var.get('bufferState').get('uvBuffers'), var.get('bufferState').get('uvAccessors'), Js(8.0), var.get('WebGLConstants').get('ARRAY_BUFFER'), var.get('name'))
                    var.get('addSeparateBufferViews')(var.get('gltf'), var.get('bufferState').get('indexBuffers'), var.get('bufferState').get('indexAccessors'), var.get('undefined'), var.get('WebGLConstants').get('ELEMENT_ARRAY_BUFFER'), var.get('name'))
                PyJsHoisted_addSeparateBuffers_.func_name = 'addSeparateBuffers'
                var.put('addSeparateBuffers', PyJsHoisted_addSeparateBuffers_)
                @Js
                def PyJsHoisted_addBuffers_(gltf, bufferState, name, separate, this, arguments, var=var):
                    var = Scope({'gltf':gltf, 'bufferState':bufferState, 'name':name, 'separate':separate, 'this':this, 'arguments':arguments}, var)
                    var.registers(['gltf', 'i', 'buffers', 'buffersLength', 'name', 'separate', 'buffersByteLength', 'bufferState'])
                    var.put('buffers', var.get('bufferState').get('positionBuffers').callprop('concat', var.get('bufferState').get('normalBuffers'), var.get('bufferState').get('uvBuffers'), var.get('bufferState').get('indexBuffers')))
                    var.put('buffersLength', var.get('buffers').get('length'))
                    var.put('buffersByteLength', Js(0.0))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('buffersLength')):
                        try:
                            var.put('buffersByteLength', var.get('buffers').get(var.get('i')).get('length'), '+')
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    if (var.get('separate') and (var.get('buffersByteLength')>var.get('createGltf').callprop('_getBufferMaxByteLength'))):
                        var.get('addSeparateBuffers')(var.get('gltf'), var.get('bufferState'), var.get('name'))
                    else:
                        var.get('addCombinedBuffers')(var.get('gltf'), var.get('bufferState'), var.get('name'))
                PyJsHoisted_addBuffers_.func_name = 'addBuffers'
                var.put('addBuffers', PyJsHoisted_addBuffers_)
                @Js
                def PyJsHoisted_addTexture_(gltf, texture, this, arguments, var=var):
                    var = Scope({'gltf':gltf, 'texture':texture, 'this':this, 'arguments':arguments}, var)
                    var.registers(['gltf', 'imageIndex', 'textureName', 'texture', 'textureIndex', 'imageName'])
                    var.put('imageName', var.get('texture').get('name'))
                    var.put('textureName', var.get('texture').get('name'))
                    var.put('imageIndex', var.get('gltf').get('images').get('length'))
                    var.put('textureIndex', var.get('gltf').get('textures').get('length'))
                    var.get('gltf').get('images').callprop('push', Js({'name':var.get('imageName'),'extras':Js({'_obj2gltf':var.get('texture')})}))
                    var.get('gltf').get('textures').callprop('push', Js({'name':var.get('textureName'),'sampler':Js(0.0),'source':var.get('imageIndex')}))
                    return var.get('textureIndex')
                PyJsHoisted_addTexture_.func_name = 'addTexture'
                var.put('addTexture', PyJsHoisted_addTexture_)
                @Js
                def PyJsHoisted_getTexture_(gltf, texture, this, arguments, var=var):
                    var = Scope({'gltf':gltf, 'texture':texture, 'this':this, 'arguments':arguments}, var)
                    var.registers(['gltf', 'i', 'images', 'length', 'texture', 'textureIndex'])
                    var.put('textureIndex', PyJsComma(Js(0.0), Js(None)))
                    var.put('images', var.get('gltf').get('images'))
                    var.put('length', var.get('images').get('length'))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('length')):
                        try:
                            if PyJsStrictEq(var.get('images').get(var.get('i')).get('extras').get('_obj2gltf'),var.get('texture')):
                                var.put('textureIndex', var.get('i'))
                                break
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    if var.get('defined')(var.get('textureIndex')).neg():
                        var.put('textureIndex', var.get('addTexture')(var.get('gltf'), var.get('texture')))
                    return Js({'index':var.get('textureIndex')})
                PyJsHoisted_getTexture_.func_name = 'getTexture'
                var.put('getTexture', PyJsHoisted_getTexture_)
                @Js
                def PyJsHoisted_cloneMaterial_(material, removeTextures, this, arguments, var=var):
                    var = Scope({'material':material, 'removeTextures':removeTextures, 'this':this, 'arguments':arguments}, var)
                    var.registers(['i', 'removeTextures', 'name', 'clonedObject', 'length', 'clonedArray', 'material'])
                    if PyJsStrictNeq((Js('undefined') if PyJsStrictEq(var.get('material',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('material'))),Js('object')):
                        return var.get('material')
                    else:
                        if var.get('material').instanceof(var.get('Texture')):
                            if var.get('removeTextures'):
                                return var.get('undefined')
                            return var.get('material')
                        else:
                            if var.get('Array').callprop('isArray', var.get('material')):
                                var.put('length', var.get('material').get('length'))
                                var.put('clonedArray', var.get('Array').create(var.get('length')))
                                #for JS loop
                                var.put('i', Js(0.0))
                                while (var.get('i')<var.get('length')):
                                    try:
                                        var.get('clonedArray').put(var.get('i'), var.get('cloneMaterial')(var.get('material').get(var.get('i')), var.get('removeTextures')))
                                    finally:
                                            var.put('i',Js(var.get('i').to_number())+Js(1))
                                return var.get('clonedArray')
                    var.put('clonedObject', Js({}))
                    for PyJsTemp in var.get('material'):
                        var.put('name', PyJsTemp)
                        if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('material'), var.get('name')):
                            var.get('clonedObject').put(var.get('name'), var.get('cloneMaterial')(var.get('material').get(var.get('name')), var.get('removeTextures')))
                    return var.get('clonedObject')
                PyJsHoisted_cloneMaterial_.func_name = 'cloneMaterial'
                var.put('cloneMaterial', PyJsHoisted_cloneMaterial_)
                @Js
                def PyJsHoisted_resolveTextures_(gltf, material, this, arguments, var=var):
                    var = Scope({'gltf':gltf, 'material':material, 'this':this, 'arguments':arguments}, var)
                    var.registers(['property', 'gltf', 'material', 'name'])
                    for PyJsTemp in var.get('material'):
                        var.put('name', PyJsTemp)
                        if var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('material'), var.get('name')):
                            var.put('property', var.get('material').get(var.get('name')))
                            if var.get('property').instanceof(var.get('Texture')):
                                var.get('material').put(var.get('name'), var.get('getTexture')(var.get('gltf'), var.get('property')))
                            else:
                                if (var.get('Array').callprop('isArray', var.get('property')).neg() and PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('property',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('property'))),Js('object'))):
                                    var.get('resolveTextures')(var.get('gltf'), var.get('property'))
                PyJsHoisted_resolveTextures_.func_name = 'resolveTextures'
                var.put('resolveTextures', PyJsHoisted_resolveTextures_)
                @Js
                def PyJsHoisted_addGltfMaterial_(gltf, material, options, this, arguments, var=var):
                    var = Scope({'gltf':gltf, 'material':material, 'options':options, 'this':this, 'arguments':arguments}, var)
                    var.registers(['options', 'material', 'gltf', 'materialIndex'])
                    var.get('resolveTextures')(var.get('gltf'), var.get('material'))
                    var.put('materialIndex', var.get('gltf').get('materials').get('length'))
                    if var.get('options').get('unlit'):
                        if var.get('defined')(var.get('material').get('extensions')).neg():
                            var.get('material').put('extensions', Js({}))
                        var.get('material').get('extensions').put('KHR_materials_unlit', Js({}))
                    var.get('gltf').get('materials').callprop('push', var.get('material'))
                    return var.get('materialIndex')
                PyJsHoisted_addGltfMaterial_.func_name = 'addGltfMaterial'
                var.put('addGltfMaterial', PyJsHoisted_addGltfMaterial_)
                @Js
                def PyJsHoisted_getMaterialByName_(materials, materialName, this, arguments, var=var):
                    var = Scope({'materials':materials, 'materialName':materialName, 'this':this, 'arguments':arguments}, var)
                    var.registers(['materials', 'materialsLength', 'materialName', 'i'])
                    var.put('materialsLength', var.get('materials').get('length'))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('materialsLength')):
                        try:
                            if PyJsStrictEq(var.get('materials').get(var.get('i')).get('name'),var.get('materialName')):
                                return var.get('materials').get(var.get('i'))
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                PyJsHoisted_getMaterialByName_.func_name = 'getMaterialByName'
                var.put('getMaterialByName', PyJsHoisted_getMaterialByName_)
                @Js
                def PyJsHoisted_getMaterialIndex_(materials, materialName, this, arguments, var=var):
                    var = Scope({'materials':materials, 'materialName':materialName, 'this':this, 'arguments':arguments}, var)
                    var.registers(['materials', 'materialsLength', 'materialName', 'i'])
                    var.put('materialsLength', var.get('materials').get('length'))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('materialsLength')):
                        try:
                            if PyJsStrictEq(var.get('materials').get(var.get('i')).get('name'),var.get('materialName')):
                                return var.get('i')
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                PyJsHoisted_getMaterialIndex_.func_name = 'getMaterialIndex'
                var.put('getMaterialIndex', PyJsHoisted_getMaterialIndex_)
                @Js
                def PyJsHoisted_getOrCreateGltfMaterial_(gltf, materials, materialName, options, this, arguments, var=var):
                    var = Scope({'gltf':gltf, 'materials':materials, 'materialName':materialName, 'options':options, 'this':this, 'arguments':arguments}, var)
                    var.registers(['gltf', 'options', 'materials', 'materialName', 'material', 'materialIndex'])
                    var.put('material', var.get('getMaterialByName')(var.get('materials'), var.get('materialName')))
                    var.put('materialIndex', var.get('getMaterialIndex')(var.get('gltf').get('materials'), var.get('materialName')))
                    if var.get('defined')(var.get('materialIndex')).neg():
                        var.put('materialIndex', var.get('addGltfMaterial')(var.get('gltf'), var.get('material'), var.get('options')))
                    return var.get('materialIndex')
                PyJsHoisted_getOrCreateGltfMaterial_.func_name = 'getOrCreateGltfMaterial'
                var.put('getOrCreateGltfMaterial', PyJsHoisted_getOrCreateGltfMaterial_)
                @Js
                def PyJsHoisted_primitiveInfoMatch_(a, b, this, arguments, var=var):
                    var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments}, var)
                    var.registers(['a', 'b'])
                    return (PyJsStrictEq(var.get('a').get('hasUvs'),var.get('b').get('hasUvs')) and PyJsStrictEq(var.get('a').get('hasNormals'),var.get('b').get('hasNormals')))
                PyJsHoisted_primitiveInfoMatch_.func_name = 'primitiveInfoMatch'
                var.put('primitiveInfoMatch', PyJsHoisted_primitiveInfoMatch_)
                @Js
                def PyJsHoisted_getSplitMaterialName_(originalMaterialName, primitiveInfo, primitiveInfoByMaterial, this, arguments, var=var):
                    var = Scope({'originalMaterialName':originalMaterialName, 'primitiveInfo':primitiveInfo, 'primitiveInfoByMaterial':primitiveInfoByMaterial, 'this':this, 'arguments':arguments}, var)
                    var.registers(['suffix', 'splitMaterialName', 'originalMaterialName', 'primitiveInfo', 'primitiveInfoByMaterial'])
                    var.put('splitMaterialName', var.get('originalMaterialName'))
                    var.put('suffix', Js(2.0))
                    while var.get('defined')(var.get('primitiveInfoByMaterial').get(var.get('splitMaterialName'))):
                        if var.get('primitiveInfoMatch')(var.get('primitiveInfo'), var.get('primitiveInfoByMaterial').get(var.get('splitMaterialName'))):
                            break
                        var.put('splitMaterialName', ((var.get('originalMaterialName')+Js('-'))+(var.put('suffix',Js(var.get('suffix').to_number())+Js(1))-Js(1))))
                    return var.get('splitMaterialName')
                PyJsHoisted_getSplitMaterialName_.func_name = 'getSplitMaterialName'
                var.put('getSplitMaterialName', PyJsHoisted_getSplitMaterialName_)
                @Js
                def PyJsHoisted_splitIncompatibleMaterials_(nodes, materials, options, this, arguments, var=var):
                    var = Scope({'nodes':nodes, 'materials':materials, 'options':options, 'this':this, 'arguments':arguments}, var)
                    var.registers(['i', 'primitive', 'originalMaterialName', 'hasNormals', 'j', 'splitMaterialName', 'meshesLength', 'options', 'materials', 'originalMaterial', 'primitiveInfoByMaterial', 'primitives', 'hasUvs', 'nodesLength', 'meshes', 'nodes', 'primitivesLength', 'k', 'splitMaterial', 'splitMaterials', 'primitiveInfo'])
                    var.put('splitMaterials', Js([]))
                    var.put('primitiveInfoByMaterial', Js({}))
                    var.put('nodesLength', var.get('nodes').get('length'))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('nodesLength')):
                        try:
                            var.put('meshes', var.get('nodes').get(var.get('i')).get('meshes'))
                            var.put('meshesLength', var.get('meshes').get('length'))
                            #for JS loop
                            var.put('j', Js(0.0))
                            while (var.get('j')<var.get('meshesLength')):
                                try:
                                    var.put('primitives', var.get('meshes').get(var.get('j')).get('primitives'))
                                    var.put('primitivesLength', var.get('primitives').get('length'))
                                    #for JS loop
                                    var.put('k', Js(0.0))
                                    while (var.get('k')<var.get('primitivesLength')):
                                        try:
                                            var.put('primitive', var.get('primitives').get(var.get('k')))
                                            var.put('hasUvs', (var.get('primitive').get('uvs').get('length')>Js(0.0)))
                                            var.put('hasNormals', (var.get('primitive').get('normals').get('length')>Js(0.0)))
                                            var.put('primitiveInfo', Js({'hasUvs':var.get('hasUvs'),'hasNormals':var.get('hasNormals')}))
                                            var.put('originalMaterialName', var.get('defaultValue')(var.get('primitive').get('material'), Js('default')))
                                            var.put('splitMaterialName', var.get('getSplitMaterialName')(var.get('originalMaterialName'), var.get('primitiveInfo'), var.get('primitiveInfoByMaterial')))
                                            var.get('primitive').put('material', var.get('splitMaterialName'))
                                            var.get('primitiveInfoByMaterial').put(var.get('splitMaterialName'), var.get('primitiveInfo'))
                                            var.put('splitMaterial', var.get('getMaterialByName')(var.get('splitMaterials'), var.get('splitMaterialName')))
                                            if var.get('defined')(var.get('splitMaterial')):
                                                continue
                                            var.put('originalMaterial', var.get('getMaterialByName')(var.get('materials'), var.get('originalMaterialName')))
                                            if var.get('defined')(var.get('originalMaterial')):
                                                var.put('splitMaterial', var.get('cloneMaterial')(var.get('originalMaterial'), var.get('hasUvs').neg()))
                                            else:
                                                var.put('splitMaterial', var.get('getDefaultMaterial')(var.get('options')))
                                            var.get('splitMaterial').put('name', var.get('splitMaterialName'))
                                            var.get('splitMaterials').callprop('push', var.get('splitMaterial'))
                                        finally:
                                                var.put('k',Js(var.get('k').to_number())+Js(1))
                                finally:
                                        var.put('j',Js(var.get('j').to_number())+Js(1))
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    return var.get('splitMaterials')
                PyJsHoisted_splitIncompatibleMaterials_.func_name = 'splitIncompatibleMaterials'
                var.put('splitIncompatibleMaterials', PyJsHoisted_splitIncompatibleMaterials_)
                @Js
                def PyJsHoisted_addVertexAttribute_(gltf, array, components, name, this, arguments, var=var):
                    var = Scope({'gltf':gltf, 'array':array, 'components':components, 'name':name, 'this':this, 'arguments':arguments}, var)
                    var.registers(['minMax', 'gltf', 'accessorIndex', 'components', 'count', 'name', 'type', 'array', 'accessor'])
                    var.put('count', (var.get('array').get('length')/var.get('components')))
                    var.put('minMax', var.get('array').callprop('getMinMax', var.get('components')))
                    var.put('type', (Js('VEC3') if PyJsStrictEq(var.get('components'),Js(3.0)) else Js('VEC2')))
                    var.put('accessor', Js({'name':var.get('name'),'componentType':var.get('WebGLConstants').get('FLOAT'),'count':var.get('count'),'min':var.get('minMax').get('min'),'max':var.get('minMax').get('max'),'type':var.get('type')}))
                    var.put('accessorIndex', var.get('gltf').get('accessors').get('length'))
                    var.get('gltf').get('accessors').callprop('push', var.get('accessor'))
                    return var.get('accessorIndex')
                PyJsHoisted_addVertexAttribute_.func_name = 'addVertexAttribute'
                var.put('addVertexAttribute', PyJsHoisted_addVertexAttribute_)
                @Js
                def PyJsHoisted_addIndexArray_(gltf, array, uint32Indices, name, this, arguments, var=var):
                    var = Scope({'gltf':gltf, 'array':array, 'uint32Indices':uint32Indices, 'name':name, 'this':this, 'arguments':arguments}, var)
                    var.registers(['minMax', 'gltf', 'accessorIndex', 'uint32Indices', 'count', 'componentType', 'name', 'array', 'accessor'])
                    var.put('componentType', (var.get('WebGLConstants').get('UNSIGNED_INT') if var.get('uint32Indices') else var.get('WebGLConstants').get('UNSIGNED_SHORT')))
                    var.put('count', var.get('array').get('length'))
                    var.put('minMax', var.get('array').callprop('getMinMax', Js(1.0)))
                    var.put('accessor', Js({'name':var.get('name'),'componentType':var.get('componentType'),'count':var.get('count'),'min':var.get('minMax').get('min'),'max':var.get('minMax').get('max'),'type':Js('SCALAR')}))
                    var.put('accessorIndex', var.get('gltf').get('accessors').get('length'))
                    var.get('gltf').get('accessors').callprop('push', var.get('accessor'))
                    return var.get('accessorIndex')
                PyJsHoisted_addIndexArray_.func_name = 'addIndexArray'
                var.put('addIndexArray', PyJsHoisted_addIndexArray_)
                @Js
                def PyJsHoisted_requiresUint32Indices_(nodes, this, arguments, var=var):
                    var = Scope({'nodes':nodes, 'this':this, 'arguments':arguments}, var)
                    var.registers(['nodesLength', 'i', 'meshesLength', 'meshes', 'nodes', 'primitivesLength', 'k', 'vertexCount', 'primitives', 'j'])
                    var.put('nodesLength', var.get('nodes').get('length'))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('nodesLength')):
                        try:
                            var.put('meshes', var.get('nodes').get(var.get('i')).get('meshes'))
                            var.put('meshesLength', var.get('meshes').get('length'))
                            #for JS loop
                            var.put('j', Js(0.0))
                            while (var.get('j')<var.get('meshesLength')):
                                try:
                                    var.put('primitives', var.get('meshes').get(var.get('j')).get('primitives'))
                                    var.put('primitivesLength', var.get('primitives').get('length'))
                                    #for JS loop
                                    var.put('k', Js(0.0))
                                    while (var.get('k')<var.get('primitivesLength')):
                                        try:
                                            var.put('vertexCount', (var.get('primitives').get(var.get('k')).get('positions').get('length')/Js(3.0)))
                                            if (var.get('vertexCount')>Js(65534.0)):
                                                return Js(True)
                                        finally:
                                                var.put('k',Js(var.get('k').to_number())+Js(1))
                                finally:
                                        var.put('j',Js(var.get('j').to_number())+Js(1))
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    return Js(False)
                PyJsHoisted_requiresUint32Indices_.func_name = 'requiresUint32Indices'
                var.put('requiresUint32Indices', PyJsHoisted_requiresUint32Indices_)
                @Js
                def PyJsHoisted_addPrimitive_(gltf, materials, bufferState, uint32Indices, mesh, primitive, index, options, this, arguments, var=var):
                    var = Scope({'gltf':gltf, 'materials':materials, 'bufferState':bufferState, 'uint32Indices':uint32Indices, 'mesh':mesh, 'primitive':primitive, 'index':index, 'options':options, 'this':this, 'arguments':arguments}, var)
                    var.registers(['attributes', '_accessorIndex2', 'accessorIndex', 'gltf', 'bufferState', 'uint32Indices', 'primitive', 'index', 'options', 'indexAccessorIndex', 'mesh', '_accessorIndex', 'materials', 'hasNormals', 'indexBuffer', 'hasUVs', 'materialIndex', 'hasPositions'])
                    var.put('hasPositions', (var.get('primitive').get('positions').get('length')>Js(0.0)))
                    var.put('hasNormals', (var.get('primitive').get('normals').get('length')>Js(0.0)))
                    var.put('hasUVs', (var.get('primitive').get('uvs').get('length')>Js(0.0)))
                    var.put('attributes', Js({}))
                    if var.get('hasPositions'):
                        var.put('accessorIndex', var.get('addVertexAttribute')(var.get('gltf'), var.get('primitive').get('positions'), Js(3.0), (((var.get('mesh').get('name')+Js('_'))+var.get('index'))+Js('_positions'))))
                        var.get('attributes').put('POSITION', var.get('accessorIndex'))
                        var.get('bufferState').get('positionBuffers').callprop('push', var.get('primitive').get('positions').callprop('toFloatBuffer'))
                        var.get('bufferState').get('positionAccessors').callprop('push', var.get('accessorIndex'))
                    if var.get('hasNormals'):
                        var.put('_accessorIndex', var.get('addVertexAttribute')(var.get('gltf'), var.get('primitive').get('normals'), Js(3.0), (((var.get('mesh').get('name')+Js('_'))+var.get('index'))+Js('_normals'))))
                        var.get('attributes').put('NORMAL', var.get('_accessorIndex'))
                        var.get('bufferState').get('normalBuffers').callprop('push', var.get('primitive').get('normals').callprop('toFloatBuffer'))
                        var.get('bufferState').get('normalAccessors').callprop('push', var.get('_accessorIndex'))
                    if var.get('hasUVs'):
                        var.put('_accessorIndex2', var.get('addVertexAttribute')(var.get('gltf'), var.get('primitive').get('uvs'), Js(2.0), (((var.get('mesh').get('name')+Js('_'))+var.get('index'))+Js('_texcoords'))))
                        var.get('attributes').put('TEXCOORD_0', var.get('_accessorIndex2'))
                        var.get('bufferState').get('uvBuffers').callprop('push', var.get('primitive').get('uvs').callprop('toFloatBuffer'))
                        var.get('bufferState').get('uvAccessors').callprop('push', var.get('_accessorIndex2'))
                    var.put('indexAccessorIndex', var.get('addIndexArray')(var.get('gltf'), var.get('primitive').get('indices'), var.get('uint32Indices'), (((var.get('mesh').get('name')+Js('_'))+var.get('index'))+Js('_indices'))))
                    var.put('indexBuffer', (var.get('primitive').get('indices').callprop('toUint32Buffer') if var.get('uint32Indices') else var.get('primitive').get('indices').callprop('toUint16Buffer')))
                    var.get('bufferState').get('indexBuffers').callprop('push', var.get('indexBuffer'))
                    var.get('bufferState').get('indexAccessors').callprop('push', var.get('indexAccessorIndex'))
                    var.get('primitive').put('positions', var.get('undefined'))
                    var.get('primitive').put('normals', var.get('undefined'))
                    var.get('primitive').put('uvs', var.get('undefined'))
                    var.get('primitive').put('indices', var.get('undefined'))
                    var.put('materialIndex', var.get('getOrCreateGltfMaterial')(var.get('gltf'), var.get('materials'), var.get('primitive').get('material'), var.get('options')))
                    return Js({'attributes':var.get('attributes'),'indices':var.get('indexAccessorIndex'),'material':var.get('materialIndex'),'mode':var.get('WebGLConstants').get('TRIANGLES')})
                PyJsHoisted_addPrimitive_.func_name = 'addPrimitive'
                var.put('addPrimitive', PyJsHoisted_addPrimitive_)
                @Js
                def PyJsHoisted_addMesh_(gltf, materials, bufferState, uint32Indices, mesh, options, this, arguments, var=var):
                    var = Scope({'gltf':gltf, 'materials':materials, 'bufferState':bufferState, 'uint32Indices':uint32Indices, 'mesh':mesh, 'options':options, 'this':this, 'arguments':arguments}, var)
                    var.registers(['gltf', 'i', 'meshIndex', 'uint32Indices', 'options', 'gltfMesh', 'primitivesLength', 'mesh', 'materials', 'gltfPrimitives', 'bufferState', 'primitives'])
                    var.put('gltfPrimitives', Js([]))
                    var.put('primitives', var.get('mesh').get('primitives'))
                    var.put('primitivesLength', var.get('primitives').get('length'))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('primitivesLength')):
                        try:
                            var.get('gltfPrimitives').callprop('push', var.get('addPrimitive')(var.get('gltf'), var.get('materials'), var.get('bufferState'), var.get('uint32Indices'), var.get('mesh'), var.get('primitives').get(var.get('i')), var.get('i'), var.get('options')))
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    var.put('gltfMesh', Js({'name':var.get('mesh').get('name'),'primitives':var.get('gltfPrimitives')}))
                    var.put('meshIndex', var.get('gltf').get('meshes').get('length'))
                    var.get('gltf').get('meshes').callprop('push', var.get('gltfMesh'))
                    return var.get('meshIndex')
                PyJsHoisted_addMesh_.func_name = 'addMesh'
                var.put('addMesh', PyJsHoisted_addMesh_)
                @Js
                def PyJsHoisted_addNode_(gltf, name, meshIndex, parentIndex, this, arguments, var=var):
                    var = Scope({'gltf':gltf, 'name':name, 'meshIndex':meshIndex, 'parentIndex':parentIndex, 'this':this, 'arguments':arguments}, var)
                    var.registers(['nodeIndex', 'parentNode', 'gltf', 'meshIndex', 'parentIndex', 'name', 'node'])
                    var.put('node', Js({'name':var.get('name'),'mesh':var.get('meshIndex')}))
                    var.put('nodeIndex', var.get('gltf').get('nodes').get('length'))
                    var.get('gltf').get('nodes').callprop('push', var.get('node'))
                    if var.get('defined')(var.get('parentIndex')):
                        var.put('parentNode', var.get('gltf').get('nodes').get(var.get('parentIndex')))
                        if var.get('defined')(var.get('parentNode').get('children')).neg():
                            var.get('parentNode').put('children', Js([]))
                        var.get('parentNode').get('children').callprop('push', var.get('nodeIndex'))
                    else:
                        var.get('gltf').get('scenes').get(var.get('gltf').get('scene')).get('nodes').callprop('push', var.get('nodeIndex'))
                    return var.get('nodeIndex')
                PyJsHoisted_addNode_.func_name = 'addNode'
                var.put('addNode', PyJsHoisted_addNode_)
                Js('use strict')
                var.put('BUFFER_MAX_BYTE_LENGTH', var.get('require')(Js('buffer')).get('constants').get('MAX_LENGTH'))
                var.put('Cesium', var.get('require')(Js('cesium')))
                var.put('getBufferPadded', var.get('require')(Js('./getBufferPadded')))
                var.put('getDefaultMaterial', var.get('require')(Js('./loadMtl')).get('getDefaultMaterial'))
                var.put('Texture', var.get('require')(Js('./Texture')))
                var.put('defaultValue', var.get('Cesium').get('defaultValue'))
                var.put('defined', var.get('Cesium').get('defined'))
                var.put('WebGLConstants', var.get('Cesium').get('WebGLConstants'))
                var.get('module').put('exports', var.get('createGltf'))
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                @Js
                def PyJs_anonymous_2071_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    return var.get('BUFFER_MAX_BYTE_LENGTH')
                PyJs_anonymous_2071_._set_name('anonymous')
                var.get('createGltf').put('_getBufferMaxByteLength', PyJs_anonymous_2071_)
            PyJs_anonymous_2070_._set_name('anonymous')
            PyJs_anonymous_2070_.callprop('call', var.get(u"this"))
        PyJs_anonymous_2069_._set_name('anonymous')
        PyJs_anonymous_2069_.callprop('call', var.get(u"this"), var.get('require')(Js('buffer')).get('Buffer'))
    PyJs_anonymous_2068_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2072_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_2073_(Buffer, this, arguments, var=var):
            var = Scope({'Buffer':Buffer, 'this':this, 'arguments':arguments}, var)
            var.registers(['Buffer'])
            @Js
            def PyJs_anonymous_2074_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['getBufferPadded'])
                @Js
                def PyJsHoisted_getBufferPadded_(buffer, this, arguments, var=var):
                    var = Scope({'buffer':buffer, 'this':this, 'arguments':arguments}, var)
                    var.registers(['byteLength', 'remainder', 'buffer', 'emptyBuffer', 'boundary', 'padding'])
                    var.put('boundary', Js(4.0))
                    var.put('byteLength', var.get('buffer').get('length'))
                    var.put('remainder', (var.get('byteLength')%var.get('boundary')))
                    if PyJsStrictEq(var.get('remainder'),Js(0.0)):
                        return var.get('buffer')
                    var.put('padding', (Js(0.0) if PyJsStrictEq(var.get('remainder'),Js(0.0)) else (var.get('boundary')-var.get('remainder'))))
                    var.put('emptyBuffer', var.get('Buffer').callprop('alloc', var.get('padding')))
                    return var.get('Buffer').callprop('concat', Js([var.get('buffer'), var.get('emptyBuffer')]))
                PyJsHoisted_getBufferPadded_.func_name = 'getBufferPadded'
                var.put('getBufferPadded', PyJsHoisted_getBufferPadded_)
                Js('use strict')
                var.get('module').put('exports', var.get('getBufferPadded'))
                pass
            PyJs_anonymous_2074_._set_name('anonymous')
            PyJs_anonymous_2074_.callprop('call', var.get(u"this"))
        PyJs_anonymous_2073_._set_name('anonymous')
        PyJs_anonymous_2073_.callprop('call', var.get(u"this"), var.get('require')(Js('buffer')).get('Buffer'))
    PyJs_anonymous_2072_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2075_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_2076_(Buffer, this, arguments, var=var):
            var = Scope({'Buffer':Buffer, 'this':this, 'arguments':arguments}, var)
            var.registers(['Buffer'])
            @Js
            def PyJs_anonymous_2077_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['getJsonBufferPadded'])
                @Js
                def PyJsHoisted_getJsonBufferPadded_(json, this, arguments, var=var):
                    var = Scope({'json':json, 'this':this, 'arguments':arguments}, var)
                    var.registers(['byteLength', 'remainder', 'i', 'json', 'boundary', 'padding', 'string', 'whitespace'])
                    var.put('string', var.get('JSON').callprop('stringify', var.get('json')))
                    var.put('boundary', Js(4.0))
                    var.put('byteLength', var.get('Buffer').callprop('byteLength', var.get('string')))
                    var.put('remainder', (var.get('byteLength')%var.get('boundary')))
                    var.put('padding', (Js(0.0) if PyJsStrictEq(var.get('remainder'),Js(0.0)) else (var.get('boundary')-var.get('remainder'))))
                    var.put('whitespace', Js(''))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('padding')):
                        try:
                            var.put('whitespace', Js(' '), '+')
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    var.put('string', var.get('whitespace'), '+')
                    return var.get('Buffer').callprop('from', var.get('string'))
                PyJsHoisted_getJsonBufferPadded_.func_name = 'getJsonBufferPadded'
                var.put('getJsonBufferPadded', PyJsHoisted_getJsonBufferPadded_)
                Js('use strict')
                var.get('module').put('exports', var.get('getJsonBufferPadded'))
                pass
            PyJs_anonymous_2077_._set_name('anonymous')
            PyJs_anonymous_2077_.callprop('call', var.get(u"this"))
        PyJs_anonymous_2076_._set_name('anonymous')
        PyJs_anonymous_2076_.callprop('call', var.get(u"this"), var.get('require')(Js('buffer')).get('Buffer'))
    PyJs_anonymous_2075_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2078_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_2079_(Buffer, this, arguments, var=var):
            var = Scope({'Buffer':Buffer, 'this':this, 'arguments':arguments}, var)
            var.registers(['Buffer'])
            @Js
            def PyJs_anonymous_2080_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['gltfToGlb', 'defined', 'getJsonBufferPadded', 'Cesium'])
                @Js
                def PyJsHoisted_gltfToGlb_(gltf, binaryBuffer, this, arguments, var=var):
                    var = Scope({'gltf':gltf, 'binaryBuffer':binaryBuffer, 'this':this, 'arguments':arguments}, var)
                    var.registers(['byteOffset', 'gltf', 'buffer', 'jsonBuffer', 'glb', 'glbLength', 'binaryBuffer'])
                    var.put('buffer', var.get('gltf').get('buffers').get('0'))
                    if var.get('defined')(var.get('buffer').get('uri')):
                        var.put('binaryBuffer', var.get('Buffer').callprop('alloc', Js(0.0)))
                    var.put('jsonBuffer', var.get('getJsonBufferPadded')(var.get('gltf')))
                    var.put('glbLength', ((((Js(12.0)+Js(8.0))+var.get('jsonBuffer').get('length'))+Js(8.0))+var.get('binaryBuffer').get('length')))
                    var.put('glb', var.get('Buffer').callprop('alloc', var.get('glbLength')))
                    var.put('byteOffset', Js(0.0))
                    var.get('glb').callprop('writeUInt32LE', Js(1179937895), var.get('byteOffset'))
                    var.put('byteOffset', Js(4.0), '+')
                    var.get('glb').callprop('writeUInt32LE', Js(2.0), var.get('byteOffset'))
                    var.put('byteOffset', Js(4.0), '+')
                    var.get('glb').callprop('writeUInt32LE', var.get('glbLength'), var.get('byteOffset'))
                    var.put('byteOffset', Js(4.0), '+')
                    var.get('glb').callprop('writeUInt32LE', var.get('jsonBuffer').get('length'), var.get('byteOffset'))
                    var.put('byteOffset', Js(4.0), '+')
                    var.get('glb').callprop('writeUInt32LE', Js(1313821514), var.get('byteOffset'))
                    var.put('byteOffset', Js(4.0), '+')
                    var.get('jsonBuffer').callprop('copy', var.get('glb'), var.get('byteOffset'))
                    var.put('byteOffset', var.get('jsonBuffer').get('length'), '+')
                    var.get('glb').callprop('writeUInt32LE', var.get('binaryBuffer').get('length'), var.get('byteOffset'))
                    var.put('byteOffset', Js(4.0), '+')
                    var.get('glb').callprop('writeUInt32LE', Js(5130562), var.get('byteOffset'))
                    var.put('byteOffset', Js(4.0), '+')
                    var.get('binaryBuffer').callprop('copy', var.get('glb'), var.get('byteOffset'))
                    return var.get('glb')
                PyJsHoisted_gltfToGlb_.func_name = 'gltfToGlb'
                var.put('gltfToGlb', PyJsHoisted_gltfToGlb_)
                Js('use strict')
                var.put('Cesium', var.get('require')(Js('cesium')))
                var.put('getJsonBufferPadded', var.get('require')(Js('./getJsonBufferPadded')))
                var.put('defined', var.get('Cesium').get('defined'))
                var.get('module').put('exports', var.get('gltfToGlb'))
                pass
            PyJs_anonymous_2080_._set_name('anonymous')
            PyJs_anonymous_2080_.callprop('call', var.get(u"this"))
        PyJs_anonymous_2079_._set_name('anonymous')
        PyJs_anonymous_2079_.callprop('call', var.get(u"this"), var.get('require')(Js('buffer')).get('Buffer'))
    PyJs_anonymous_2078_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2081_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_2082_(Buffer, this, arguments, var=var):
            var = Scope({'Buffer':Buffer, 'this':this, 'arguments':arguments}, var)
            var.registers(['Buffer'])
            @Js
            def PyJs_anonymous_2083_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['loadMaterialTexture', 'Texture', 'writeChannel', 'createSpecularGlossinessTexture', 'getTextureChannel', 'defined', 'luminance', 'convertTraditionalToMetallicRoughness', 'createSpecularGlossinessMaterial', 'resizeChannel', 'Material', 'clone', 'Cesium', 'createDiffuseAlphaTexture', 'createMetallicRoughnessTexture', 'defaultValue', 'convertMaterials', 'getMinimumDimensions', 'scratchResizeChannel', 'path', 'createMetallicRoughnessMaterial', 'convertMaterial', 'readLines', 'loadMtl', 'correctAlpha', 'outsideDirectory', 'isChannelSingleColor', 'combine', 'Promise', 'CesiumMath', 'loadTexture'])
                @Js
                def PyJsHoisted_loadMtl_(mtlPath, options, this, arguments, var=var):
                    var = Scope({'mtlPath':mtlPath, 'options':options, 'this':this, 'arguments':arguments}, var)
                    var.registers(['specularShinessTextureOptions', 'ambientTextureOptions', 'createMaterial', 'emissiveTextureOptions', 'normalizeTexturePath', 'material', 'decodeOptions', 'overridingNormalTexture', 'loadMaterialTextures', 'overridingEmissiveTexture', 'normalTextureOptions', 'overridingAmbientTexture', 'mtlDirectory', 'mtlPath', 'overridingSpecularTexture', 'texturePromises', 'values', 'overridingTextures', 'diffuseTextureOptions', 'texturePromiseMap', 'materials', 'alphaTextureOptions', 'options', 'overridingAlphaTexture', 'overridingDiffuseTexture', 'parseLine', 'specularTextureOptions', 'overridingSpecularShininessTexture', 'value'])
                    @Js
                    def PyJsHoisted_createMaterial_(name, this, arguments, var=var):
                        var = Scope({'name':name, 'this':this, 'arguments':arguments}, var)
                        var.registers(['name'])
                        var.put('material', var.get('Material').create())
                        var.get('material').put('name', var.get('name'))
                        var.get('material').put('specularShininess', (Js(1.0) if var.get('options').get('metallicRoughness') else Js(0.0)))
                        var.get('material').put('specularTexture', var.get('overridingSpecularTexture'))
                        var.get('material').put('specularShininessTexture', var.get('overridingSpecularShininessTexture'))
                        var.get('material').put('diffuseTexture', var.get('overridingDiffuseTexture'))
                        var.get('material').put('ambientTexture', var.get('overridingAmbientTexture'))
                        var.get('material').put('normalTexture', var.get('overridingNormalTexture'))
                        var.get('material').put('emissiveTexture', var.get('overridingEmissiveTexture'))
                        var.get('material').put('alphaTexture', var.get('overridingAlphaTexture'))
                        var.get('materials').callprop('push', var.get('material'))
                    PyJsHoisted_createMaterial_.func_name = 'createMaterial'
                    var.put('createMaterial', PyJsHoisted_createMaterial_)
                    @Js
                    def PyJsHoisted_normalizeTexturePath_(texturePath, mtlDirectory, this, arguments, var=var):
                        var = Scope({'texturePath':texturePath, 'mtlDirectory':mtlDirectory, 'this':this, 'arguments':arguments}, var)
                        var.registers(['re', 'mtlDirectory', 'texturePath'])
                        var.put('re', JsRegExp('/-(bm|t|s|o|blendu|blendv|boost|mm|texres|clamp|imfchan|type)/'))
                        if var.get('re').callprop('test', var.get('texturePath')):
                            var.put('texturePath', var.get('texturePath').callprop('split', JsRegExp('/\\s+/')).callprop('pop'))
                        var.put('texturePath', var.get('texturePath').callprop('replace', JsRegExp('/\\\\/g'), Js('/')))
                        return var.get('path').callprop('normalize', var.get('path').callprop('resolve', var.get('mtlDirectory'), var.get('texturePath')))
                    PyJsHoisted_normalizeTexturePath_.func_name = 'normalizeTexturePath'
                    var.put('normalizeTexturePath', PyJsHoisted_normalizeTexturePath_)
                    @Js
                    def PyJsHoisted_parseLine_(line, this, arguments, var=var):
                        var = Scope({'line':line, 'this':this, 'arguments':arguments}, var)
                        var.registers(['line', 'name'])
                        var.put('line', var.get('line').callprop('trim'))
                        if JsRegExp('/^newmtl/i').callprop('test', var.get('line')):
                            var.put('name', var.get('line').callprop('substring', Js(7.0)).callprop('trim'))
                            var.get('createMaterial')(var.get('name'))
                        else:
                            if JsRegExp('/^Ka /i').callprop('test', var.get('line')):
                                var.put('values', var.get('line').callprop('substring', Js(3.0)).callprop('trim').callprop('split', Js(' ')))
                                var.get('material').put('ambientColor', Js([var.get('parseFloat')(var.get('values').get('0')), var.get('parseFloat')(var.get('values').get('1')), var.get('parseFloat')(var.get('values').get('2')), Js(1.0)]))
                            else:
                                if JsRegExp('/^Ke /i').callprop('test', var.get('line')):
                                    var.put('values', var.get('line').callprop('substring', Js(3.0)).callprop('trim').callprop('split', Js(' ')))
                                    var.get('material').put('emissiveColor', Js([var.get('parseFloat')(var.get('values').get('0')), var.get('parseFloat')(var.get('values').get('1')), var.get('parseFloat')(var.get('values').get('2')), Js(1.0)]))
                                else:
                                    if JsRegExp('/^Kd /i').callprop('test', var.get('line')):
                                        var.put('values', var.get('line').callprop('substring', Js(3.0)).callprop('trim').callprop('split', Js(' ')))
                                        var.get('material').put('diffuseColor', Js([var.get('parseFloat')(var.get('values').get('0')), var.get('parseFloat')(var.get('values').get('1')), var.get('parseFloat')(var.get('values').get('2')), Js(1.0)]))
                                    else:
                                        if JsRegExp('/^Ks /i').callprop('test', var.get('line')):
                                            var.put('values', var.get('line').callprop('substring', Js(3.0)).callprop('trim').callprop('split', Js(' ')))
                                            var.get('material').put('specularColor', Js([var.get('parseFloat')(var.get('values').get('0')), var.get('parseFloat')(var.get('values').get('1')), var.get('parseFloat')(var.get('values').get('2')), Js(1.0)]))
                                        else:
                                            if JsRegExp('/^Ns /i').callprop('test', var.get('line')):
                                                var.put('value', var.get('line').callprop('substring', Js(3.0)).callprop('trim'))
                                                var.get('material').put('specularShininess', var.get('parseFloat')(var.get('value')))
                                            else:
                                                if JsRegExp('/^d /i').callprop('test', var.get('line')):
                                                    var.put('value', var.get('line').callprop('substring', Js(2.0)).callprop('trim'))
                                                    var.get('material').put('alpha', var.get('correctAlpha')(var.get('parseFloat')(var.get('value'))))
                                                else:
                                                    if JsRegExp('/^Tr /i').callprop('test', var.get('line')):
                                                        var.put('value', var.get('line').callprop('substring', Js(3.0)).callprop('trim'))
                                                        var.get('material').put('alpha', var.get('correctAlpha')((Js(1.0)-var.get('parseFloat')(var.get('value')))))
                                                    else:
                                                        if JsRegExp('/^map_Ka /i').callprop('test', var.get('line')):
                                                            if var.get('defined')(var.get('overridingAmbientTexture')).neg():
                                                                var.get('material').put('ambientTexture', var.get('normalizeTexturePath')(var.get('line').callprop('substring', Js(7.0)).callprop('trim'), var.get('mtlDirectory')))
                                                        else:
                                                            if JsRegExp('/^map_Ke /i').callprop('test', var.get('line')):
                                                                if var.get('defined')(var.get('overridingEmissiveTexture')).neg():
                                                                    var.get('material').put('emissiveTexture', var.get('normalizeTexturePath')(var.get('line').callprop('substring', Js(7.0)).callprop('trim'), var.get('mtlDirectory')))
                                                            else:
                                                                if JsRegExp('/^map_Kd /i').callprop('test', var.get('line')):
                                                                    if var.get('defined')(var.get('overridingDiffuseTexture')).neg():
                                                                        var.get('material').put('diffuseTexture', var.get('normalizeTexturePath')(var.get('line').callprop('substring', Js(7.0)).callprop('trim'), var.get('mtlDirectory')))
                                                                else:
                                                                    if JsRegExp('/^map_Ks /i').callprop('test', var.get('line')):
                                                                        if var.get('defined')(var.get('overridingSpecularTexture')).neg():
                                                                            var.get('material').put('specularTexture', var.get('normalizeTexturePath')(var.get('line').callprop('substring', Js(7.0)).callprop('trim'), var.get('mtlDirectory')))
                                                                    else:
                                                                        if JsRegExp('/^map_Ns /i').callprop('test', var.get('line')):
                                                                            if var.get('defined')(var.get('overridingSpecularShininessTexture')).neg():
                                                                                var.get('material').put('specularShininessTexture', var.get('normalizeTexturePath')(var.get('line').callprop('substring', Js(7.0)).callprop('trim'), var.get('mtlDirectory')))
                                                                        else:
                                                                            if JsRegExp('/^map_Bump /i').callprop('test', var.get('line')):
                                                                                if var.get('defined')(var.get('overridingNormalTexture')).neg():
                                                                                    var.get('material').put('normalTexture', var.get('normalizeTexturePath')(var.get('line').callprop('substring', Js(9.0)).callprop('trim'), var.get('mtlDirectory')))
                                                                            else:
                                                                                if JsRegExp('/^map_d /i').callprop('test', var.get('line')):
                                                                                    if var.get('defined')(var.get('overridingAlphaTexture')).neg():
                                                                                        var.get('material').put('alphaTexture', var.get('normalizeTexturePath')(var.get('line').callprop('substring', Js(6.0)).callprop('trim'), var.get('mtlDirectory')))
                    PyJsHoisted_parseLine_.func_name = 'parseLine'
                    var.put('parseLine', PyJsHoisted_parseLine_)
                    @Js
                    def PyJsHoisted_loadMaterialTextures_(material, this, arguments, var=var):
                        var = Scope({'material':material, 'this':this, 'arguments':arguments}, var)
                        var.registers(['sharedOptions', 'diffuseAlphaTextureOptions', 'textureNames', 'material', 'textureOptions'])
                        var.put('diffuseAlphaTextureOptions', (var.get('alphaTextureOptions') if var.get('defined')(var.get('material').get('alphaTexture')) else var.get('diffuseTextureOptions')))
                        if PyJsStrictEq(var.get('material').get('diffuseTexture'),var.get('material').get('ambientTexture')):
                            var.get('material').put('ambientTexture', var.get('undefined'))
                        var.put('textureNames', Js([Js('diffuseTexture'), Js('ambientTexture'), Js('emissiveTexture'), Js('specularTexture'), Js('specularShininessTexture'), Js('normalTexture'), Js('alphaTexture')]))
                        var.put('textureOptions', Js([var.get('diffuseAlphaTextureOptions'), var.get('ambientTextureOptions'), var.get('emissiveTextureOptions'), var.get('specularTextureOptions'), var.get('specularShinessTextureOptions'), var.get('normalTextureOptions'), var.get('alphaTextureOptions')]))
                        var.put('sharedOptions', Js({}))
                        @Js
                        def PyJs_anonymous_2084_(name, index, this, arguments, var=var):
                            var = Scope({'name':name, 'index':index, 'this':this, 'arguments':arguments}, var)
                            var.registers(['name', '_options', 'texturePath', 'originalOptions', 'index'])
                            var.put('texturePath', var.get('material').get(var.get('name')))
                            var.put('originalOptions', var.get('textureOptions').get(var.get('index')))
                            if (var.get('defined')(var.get('texturePath')) and var.get('defined')(var.get('originalOptions'))):
                                if var.get('defined')(var.get('sharedOptions').get(var.get('texturePath'))).neg():
                                    var.get('sharedOptions').put(var.get('texturePath'), var.get('clone')(var.get('originalOptions')))
                                var.put('_options', var.get('sharedOptions').get(var.get('texturePath')))
                                var.get('_options').put('checkTransparency', (var.get('_options').get('checkTransparency') or var.get('originalOptions').get('checkTransparency')))
                                var.get('_options').put('decode', (var.get('_options').get('decode') or var.get('originalOptions').get('decode')))
                                var.get('_options').put('keepSource', ((var.get('_options').get('keepSource') or var.get('originalOptions').get('decode').neg()) or var.get('originalOptions').get('checkTransparency').neg()))
                        PyJs_anonymous_2084_._set_name('anonymous')
                        var.get('textureNames').callprop('forEach', PyJs_anonymous_2084_)
                        @Js
                        def PyJs_anonymous_2085_(name, this, arguments, var=var):
                            var = Scope({'name':name, 'this':this, 'arguments':arguments}, var)
                            var.registers(['texturePath', 'name'])
                            var.put('texturePath', var.get('material').get(var.get('name')))
                            if var.get('defined')(var.get('texturePath')):
                                var.get('loadMaterialTexture')(var.get('material'), var.get('name'), var.get('sharedOptions').get(var.get('texturePath')), var.get('mtlDirectory'), var.get('texturePromiseMap'), var.get('texturePromises'), var.get('options'))
                        PyJs_anonymous_2085_._set_name('anonymous')
                        var.get('textureNames').callprop('forEach', PyJs_anonymous_2085_)
                    PyJsHoisted_loadMaterialTextures_.func_name = 'loadMaterialTextures'
                    var.put('loadMaterialTextures', PyJsHoisted_loadMaterialTextures_)
                    var.put('material', PyJsComma(Js(0.0), Js(None)))
                    var.put('values', PyJsComma(Js(0.0), Js(None)))
                    var.put('value', PyJsComma(Js(0.0), Js(None)))
                    var.put('mtlDirectory', var.get('path').callprop('dirname', var.get('mtlPath')))
                    var.put('materials', Js([]))
                    var.put('texturePromiseMap', Js({}))
                    var.put('texturePromises', Js([]))
                    var.put('overridingTextures', var.get('options').get('overridingTextures'))
                    var.put('overridingSpecularTexture', var.get('defaultValue')(var.get('overridingTextures').get('metallicRoughnessOcclusionTexture'), var.get('overridingTextures').get('specularGlossinessTexture')))
                    var.put('overridingSpecularShininessTexture', var.get('defaultValue')(var.get('overridingTextures').get('metallicRoughnessOcclusionTexture'), var.get('overridingTextures').get('specularGlossinessTexture')))
                    var.put('overridingAmbientTexture', var.get('defaultValue')(var.get('overridingTextures').get('metallicRoughnessOcclusionTexture'), var.get('overridingTextures').get('occlusionTexture')))
                    var.put('overridingNormalTexture', var.get('overridingTextures').get('normalTexture'))
                    var.put('overridingDiffuseTexture', var.get('overridingTextures').get('baseColorTexture'))
                    var.put('overridingEmissiveTexture', var.get('overridingTextures').get('emissiveTexture'))
                    var.put('overridingAlphaTexture', var.get('overridingTextures').get('alphaTexture'))
                    var.put('decodeOptions', Js({'decode':Js(True)}))
                    var.put('diffuseTextureOptions', Js({'checkTransparency':var.get('options').get('checkTransparency')}))
                    var.put('ambientTextureOptions', (var.get('undefined') if var.get('defined')(var.get('overridingAmbientTexture')) else (var.get('decodeOptions') if var.get('options').get('packOcclusion') else var.get('undefined'))))
                    var.put('specularTextureOptions', (var.get('undefined') if var.get('defined')(var.get('overridingSpecularTexture')) else var.get('decodeOptions')))
                    var.put('specularShinessTextureOptions', (var.get('undefined') if var.get('defined')(var.get('overridingSpecularShininessTexture')) else var.get('decodeOptions')))
                    var.put('emissiveTextureOptions', var.get('undefined'))
                    var.put('normalTextureOptions', var.get('undefined'))
                    var.put('alphaTextureOptions', Js({'decode':Js(True)}))
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_2086_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return var.get('convertMaterials')(var.get('materials'), var.get('options'))
                    PyJs_anonymous_2086_._set_name('anonymous')
                    @Js
                    def PyJs_anonymous_2087_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['length', 'i'])
                        var.put('length', var.get('materials').get('length'))
                        #for JS loop
                        var.put('i', Js(0.0))
                        while (var.get('i')<var.get('length')):
                            try:
                                var.get('loadMaterialTextures')(var.get('materials').get(var.get('i')))
                            finally:
                                    var.put('i',Js(var.get('i').to_number())+Js(1))
                        return var.get('Promise').callprop('all', var.get('texturePromises'))
                    PyJs_anonymous_2087_._set_name('anonymous')
                    return var.get('readLines')(var.get('mtlPath'), var.get('parseLine')).callprop('then', PyJs_anonymous_2087_).callprop('then', PyJs_anonymous_2086_)
                PyJsHoisted_loadMtl_.func_name = 'loadMtl'
                var.put('loadMtl', PyJsHoisted_loadMtl_)
                @Js
                def PyJsHoisted_correctAlpha_(alpha, this, arguments, var=var):
                    var = Scope({'alpha':alpha, 'this':this, 'arguments':arguments}, var)
                    var.registers(['alpha'])
                    return (Js(1.0) if PyJsStrictEq(var.get('alpha'),Js(0.0)) else var.get('alpha'))
                PyJsHoisted_correctAlpha_.func_name = 'correctAlpha'
                var.put('correctAlpha', PyJsHoisted_correctAlpha_)
                @Js
                def PyJsHoisted_Material_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.get(u"this").put('name', var.get('undefined'))
                    var.get(u"this").put('ambientColor', Js([Js(0.0), Js(0.0), Js(0.0), Js(1.0)]))
                    var.get(u"this").put('emissiveColor', Js([Js(0.0), Js(0.0), Js(0.0), Js(1.0)]))
                    var.get(u"this").put('diffuseColor', Js([Js(0.5), Js(0.5), Js(0.5), Js(1.0)]))
                    var.get(u"this").put('specularColor', Js([Js(0.0), Js(0.0), Js(0.0), Js(1.0)]))
                    var.get(u"this").put('specularShininess', Js(0.0))
                    var.get(u"this").put('alpha', Js(1.0))
                    var.get(u"this").put('ambientTexture', var.get('undefined'))
                    var.get(u"this").put('emissiveTexture', var.get('undefined'))
                    var.get(u"this").put('diffuseTexture', var.get('undefined'))
                    var.get(u"this").put('specularTexture', var.get('undefined'))
                    var.get(u"this").put('specularShininessTexture', var.get('undefined'))
                    var.get(u"this").put('normalTexture', var.get('undefined'))
                    var.get(u"this").put('alphaTexture', var.get('undefined'))
                PyJsHoisted_Material_.func_name = 'Material'
                var.put('Material', PyJsHoisted_Material_)
                @Js
                def PyJsHoisted_loadMaterialTexture_(material, name, textureOptions, mtlDirectory, texturePromiseMap, texturePromises, options, this, arguments, var=var):
                    var = Scope({'material':material, 'name':name, 'textureOptions':textureOptions, 'mtlDirectory':mtlDirectory, 'texturePromiseMap':texturePromiseMap, 'texturePromises':texturePromises, 'options':options, 'this':this, 'arguments':arguments}, var)
                    var.registers(['mtlDirectory', 'texturePromise', 'name', 'texturePromises', 'options', 'texturePath', 'texturePromiseMap', 'material', 'textureOptions', 'shallowPath'])
                    var.put('texturePath', var.get('material').get(var.get('name')))
                    if var.get('defined')(var.get('texturePath')).neg():
                        return var.get('undefined')
                    var.put('texturePromise', var.get('texturePromiseMap').get(var.get('texturePath')))
                    if var.get('defined')(var.get('texturePromise')).neg():
                        var.put('shallowPath', var.get('path').callprop('join', var.get('mtlDirectory'), var.get('path').callprop('basename', var.get('texturePath'))))
                        if (var.get('options').get('secure') and var.get('outsideDirectory')(var.get('texturePath'), var.get('mtlDirectory'))):
                            var.get('options').callprop('logger', Js('Texture file is outside of the mtl directory and the secure flag is true. Attempting to read the texture file from within the obj directory instead.'))
                            @Js
                            def PyJs_anonymous_2090_(error, this, arguments, var=var):
                                var = Scope({'error':error, 'this':this, 'arguments':arguments}, var)
                                var.registers(['error'])
                                var.get('options').callprop('logger', var.get('error').get('message'))
                                var.get('options').callprop('logger', ((Js('Could not read texture file at ')+var.get('shallowPath'))+Js('. This texture will be ignored')))
                            PyJs_anonymous_2090_._set_name('anonymous')
                            var.put('texturePromise', var.get('loadTexture')(var.get('shallowPath'), var.get('textureOptions')).callprop('catch', PyJs_anonymous_2090_))
                        else:
                            @Js
                            def PyJs_anonymous_2091_(error, this, arguments, var=var):
                                var = Scope({'error':error, 'this':this, 'arguments':arguments}, var)
                                var.registers(['error'])
                                var.get('options').callprop('logger', var.get('error').get('message'))
                                var.get('options').callprop('logger', ((Js('Could not read texture file at ')+var.get('shallowPath'))+Js('. This texture will be ignored.')))
                            PyJs_anonymous_2091_._set_name('anonymous')
                            @Js
                            def PyJs_anonymous_2092_(error, this, arguments, var=var):
                                var = Scope({'error':error, 'this':this, 'arguments':arguments}, var)
                                var.registers(['error'])
                                var.get('options').callprop('logger', var.get('error').get('message'))
                                var.get('options').callprop('logger', ((Js('Could not read texture file at ')+var.get('texturePath'))+Js('. Attempting to read the texture file from within the obj directory instead.')))
                                return var.get('loadTexture')(var.get('shallowPath'), var.get('textureOptions'))
                            PyJs_anonymous_2092_._set_name('anonymous')
                            var.put('texturePromise', var.get('loadTexture')(var.get('texturePath'), var.get('textureOptions')).callprop('catch', PyJs_anonymous_2092_).callprop('catch', PyJs_anonymous_2091_))
                        var.get('texturePromiseMap').put(var.get('texturePath'), var.get('texturePromise'))
                    @Js
                    def PyJs_anonymous_2093_(texture, this, arguments, var=var):
                        var = Scope({'texture':texture, 'this':this, 'arguments':arguments}, var)
                        var.registers(['texture'])
                        var.get('material').put(var.get('name'), var.get('texture'))
                    PyJs_anonymous_2093_._set_name('anonymous')
                    var.get('texturePromises').callprop('push', var.get('texturePromise').callprop('then', PyJs_anonymous_2093_))
                PyJsHoisted_loadMaterialTexture_.func_name = 'loadMaterialTexture'
                var.put('loadMaterialTexture', PyJsHoisted_loadMaterialTexture_)
                @Js
                def PyJsHoisted_convertMaterial_(material, options, this, arguments, var=var):
                    var = Scope({'material':material, 'options':options, 'this':this, 'arguments':arguments}, var)
                    var.registers(['options', 'material'])
                    if var.get('options').get('specularGlossiness'):
                        return var.get('createSpecularGlossinessMaterial')(var.get('material'), var.get('options'))
                    else:
                        if var.get('options').get('metallicRoughness'):
                            return var.get('createMetallicRoughnessMaterial')(var.get('material'), var.get('options'))
                    var.get('convertTraditionalToMetallicRoughness')(var.get('material'))
                    return var.get('createMetallicRoughnessMaterial')(var.get('material'), var.get('options'))
                PyJsHoisted_convertMaterial_.func_name = 'convertMaterial'
                var.put('convertMaterial', PyJsHoisted_convertMaterial_)
                @Js
                def PyJsHoisted_convertMaterials_(materials, options, this, arguments, var=var):
                    var = Scope({'materials':materials, 'options':options, 'this':this, 'arguments':arguments}, var)
                    var.registers(['options', 'materials'])
                    @Js
                    def PyJs_anonymous_2094_(material, this, arguments, var=var):
                        var = Scope({'material':material, 'this':this, 'arguments':arguments}, var)
                        var.registers(['material'])
                        return var.get('convertMaterial')(var.get('material'), var.get('options'))
                    PyJs_anonymous_2094_._set_name('anonymous')
                    return var.get('materials').callprop('map', PyJs_anonymous_2094_)
                PyJsHoisted_convertMaterials_.func_name = 'convertMaterials'
                var.put('convertMaterials', PyJsHoisted_convertMaterials_)
                @Js
                def PyJsHoisted_resizeChannel_(sourcePixels, sourceWidth, sourceHeight, targetPixels, targetWidth, targetHeight, this, arguments, var=var):
                    var = Scope({'sourcePixels':sourcePixels, 'sourceWidth':sourceWidth, 'sourceHeight':sourceHeight, 'targetPixels':targetPixels, 'targetWidth':targetWidth, 'targetHeight':targetHeight, 'this':this, 'arguments':arguments}, var)
                    var.registers(['y', 'x', 'sourceValue', 'widthRatio', 'sourceY', 'sourcePixels', 'sourceX', 'targetPixels', 'targetHeight', 'targetIndex', 'sourceHeight', 'targetWidth', 'sourceIndex', 'heightRatio', 'sourceWidth'])
                    var.put('widthRatio', (var.get('sourceWidth')/var.get('targetWidth')))
                    var.put('heightRatio', (var.get('sourceHeight')/var.get('targetHeight')))
                    #for JS loop
                    var.put('y', Js(0.0))
                    while (var.get('y')<var.get('targetHeight')):
                        try:
                            #for JS loop
                            var.put('x', Js(0.0))
                            while (var.get('x')<var.get('targetWidth')):
                                try:
                                    var.put('targetIndex', ((var.get('y')*var.get('targetWidth'))+var.get('x')))
                                    var.put('sourceY', var.get('Math').callprop('round', (var.get('y')*var.get('heightRatio'))))
                                    var.put('sourceX', var.get('Math').callprop('round', (var.get('x')*var.get('widthRatio'))))
                                    var.put('sourceIndex', ((var.get('sourceY')*var.get('sourceWidth'))+var.get('sourceX')))
                                    var.put('sourceValue', var.get('sourcePixels').callprop('readUInt8', var.get('sourceIndex')))
                                    var.get('targetPixels').callprop('writeUInt8', var.get('sourceValue'), var.get('targetIndex'))
                                finally:
                                        var.put('x',Js(var.get('x').to_number())+Js(1))
                        finally:
                                var.put('y',Js(var.get('y').to_number())+Js(1))
                    return var.get('targetPixels')
                PyJsHoisted_resizeChannel_.func_name = 'resizeChannel'
                var.put('resizeChannel', PyJsHoisted_resizeChannel_)
                @Js
                def PyJsHoisted_getTextureChannel_(texture, index, targetWidth, targetHeight, targetChannel, this, arguments, var=var):
                    var = Scope({'texture':texture, 'index':index, 'targetWidth':targetWidth, 'targetHeight':targetHeight, 'targetChannel':targetChannel, 'this':this, 'arguments':arguments}, var)
                    var.registers(['i', 'sourceChannel', 'texture', 'targetHeight', 'sourceHeight', 'targetChannel', 'sourcePixelsLength', 'value', 'targetWidth', 'pixels', 'index', 'targetPixelsLength', 'sourceWidth'])
                    var.put('pixels', var.get('texture').get('pixels'))
                    var.put('sourceWidth', var.get('texture').get('width'))
                    var.put('sourceHeight', var.get('texture').get('height'))
                    var.put('sourcePixelsLength', (var.get('sourceWidth')*var.get('sourceHeight')))
                    var.put('targetPixelsLength', (var.get('targetWidth')*var.get('targetHeight')))
                    var.put('sourceChannel', var.get('targetChannel'))
                    if (var.get('sourcePixelsLength')>var.get('targetPixelsLength')):
                        if (var.get('defined')(var.get('scratchResizeChannel')).neg() or (var.get('sourcePixelsLength')>var.get('scratchResizeChannel').get('length'))):
                            var.put('scratchResizeChannel', var.get('Buffer').callprop('alloc', var.get('sourcePixelsLength')))
                        var.put('sourceChannel', var.get('scratchResizeChannel'))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('sourcePixelsLength')):
                        try:
                            var.put('value', var.get('pixels').callprop('readUInt8', ((var.get('i')*Js(4.0))+var.get('index'))))
                            var.get('sourceChannel').callprop('writeUInt8', var.get('value'), var.get('i'))
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    if (var.get('sourcePixelsLength')>var.get('targetPixelsLength')):
                        var.get('resizeChannel')(var.get('sourceChannel'), var.get('sourceWidth'), var.get('sourceHeight'), var.get('targetChannel'), var.get('targetWidth'), var.get('targetHeight'))
                    return var.get('targetChannel')
                PyJsHoisted_getTextureChannel_.func_name = 'getTextureChannel'
                var.put('getTextureChannel', PyJsHoisted_getTextureChannel_)
                @Js
                def PyJsHoisted_writeChannel_(pixels, channel, index, this, arguments, var=var):
                    var = Scope({'pixels':pixels, 'channel':channel, 'index':index, 'this':this, 'arguments':arguments}, var)
                    var.registers(['i', 'index', 'pixels', 'pixelsLength', 'value', 'channel'])
                    var.put('pixelsLength', (var.get('pixels').get('length')/Js(4.0)))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('pixelsLength')):
                        try:
                            var.put('value', var.get('channel').callprop('readUInt8', var.get('i')))
                            var.get('pixels').callprop('writeUInt8', var.get('value'), ((var.get('i')*Js(4.0))+var.get('index')))
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                PyJsHoisted_writeChannel_.func_name = 'writeChannel'
                var.put('writeChannel', PyJsHoisted_writeChannel_)
                @Js
                def PyJsHoisted_getMinimumDimensions_(textures, options, this, arguments, var=var):
                    var = Scope({'textures':textures, 'options':options, 'this':this, 'arguments':arguments}, var)
                    var.registers(['textures', 'i', 'height', '_i', 'width', 'options', 'length', 'texture', '_texture'])
                    var.put('width', var.get('Number').get('POSITIVE_INFINITY'))
                    var.put('height', var.get('Number').get('POSITIVE_INFINITY'))
                    var.put('length', var.get('textures').get('length'))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('length')):
                        try:
                            var.put('texture', var.get('textures').get(var.get('i')))
                            var.put('width', var.get('Math').callprop('min', var.get('texture').get('width'), var.get('width')))
                            var.put('height', var.get('Math').callprop('min', var.get('texture').get('height'), var.get('height')))
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    #for JS loop
                    var.put('_i', Js(0.0))
                    while (var.get('_i')<var.get('length')):
                        try:
                            var.put('_texture', var.get('textures').get(var.get('_i')))
                            if (PyJsStrictNeq(var.get('_texture').get('width'),var.get('width')) or PyJsStrictNeq(var.get('_texture').get('height'),var.get('height'))):
                                var.get('options').callprop('logger', ((((((((((Js('Texture ')+var.get('_texture').get('path'))+Js(' will be scaled from '))+var.get('_texture').get('width'))+Js('x'))+var.get('_texture').get('height'))+Js(' to '))+var.get('width'))+Js('x'))+var.get('height'))+Js('.')))
                        finally:
                                var.put('_i',Js(var.get('_i').to_number())+Js(1))
                    return Js([var.get('width'), var.get('height')])
                PyJsHoisted_getMinimumDimensions_.func_name = 'getMinimumDimensions'
                var.put('getMinimumDimensions', PyJsHoisted_getMinimumDimensions_)
                @Js
                def PyJsHoisted_isChannelSingleColor_(buffer, this, arguments, var=var):
                    var = Scope({'buffer':buffer, 'this':this, 'arguments':arguments}, var)
                    var.registers(['buffer', 'length', 'first', 'i'])
                    var.put('first', var.get('buffer').callprop('readUInt8', Js(0.0)))
                    var.put('length', var.get('buffer').get('length'))
                    #for JS loop
                    var.put('i', Js(1.0))
                    while (var.get('i')<var.get('length')):
                        try:
                            if PyJsStrictNeq(var.get('buffer').get(var.get('i')),var.get('first')):
                                return Js(False)
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    return Js(True)
                PyJsHoisted_isChannelSingleColor_.func_name = 'isChannelSingleColor'
                var.put('isChannelSingleColor', PyJsHoisted_isChannelSingleColor_)
                @Js
                def PyJsHoisted_createDiffuseAlphaTexture_(diffuseTexture, alphaTexture, options, this, arguments, var=var):
                    var = Scope({'diffuseTexture':diffuseTexture, 'alphaTexture':alphaTexture, 'options':options, 'this':this, 'arguments':arguments}, var)
                    var.registers(['packDiffuse', 'height', 'alphaTexture', 'pixels', 'packedTextures', 'width', 'texture', 'diffuseTexture', 'blueChannel', 'packAlpha', 'options', 'scratchChannel', 'alphaChannel', 'dimensions', 'redChannel', 'pixelsLength', 'greenChannel'])
                    var.put('packDiffuse', var.get('defined')(var.get('diffuseTexture')))
                    var.put('packAlpha', var.get('defined')(var.get('alphaTexture')))
                    if var.get('packDiffuse').neg():
                        return var.get('undefined')
                    if var.get('packAlpha').neg():
                        return var.get('diffuseTexture')
                    if PyJsStrictEq(var.get('diffuseTexture'),var.get('alphaTexture')):
                        return var.get('diffuseTexture')
                    if (var.get('defined')(var.get('diffuseTexture').get('pixels')).neg() or var.get('defined')(var.get('alphaTexture').get('pixels')).neg()):
                        var.get('options').callprop('logger', ((((Js('Could not get decoded texture data for ')+var.get('diffuseTexture').get('path'))+Js(' or '))+var.get('alphaTexture').get('path'))+Js('. The material will be created without an alpha texture.')))
                        return var.get('diffuseTexture')
                    var.put('packedTextures', Js([var.get('diffuseTexture'), var.get('alphaTexture')]))
                    var.put('dimensions', var.get('getMinimumDimensions')(var.get('packedTextures'), var.get('options')))
                    var.put('width', var.get('dimensions').get('0'))
                    var.put('height', var.get('dimensions').get('1'))
                    var.put('pixelsLength', (var.get('width')*var.get('height')))
                    var.put('pixels', var.get('Buffer').callprop('alloc', (var.get('pixelsLength')*Js(4.0)), Js(255)))
                    var.put('scratchChannel', var.get('Buffer').callprop('alloc', var.get('pixelsLength')))
                    var.put('redChannel', var.get('getTextureChannel')(var.get('diffuseTexture'), Js(0.0), var.get('width'), var.get('height'), var.get('scratchChannel')))
                    var.get('writeChannel')(var.get('pixels'), var.get('redChannel'), Js(0.0))
                    var.put('greenChannel', var.get('getTextureChannel')(var.get('diffuseTexture'), Js(1.0), var.get('width'), var.get('height'), var.get('scratchChannel')))
                    var.get('writeChannel')(var.get('pixels'), var.get('greenChannel'), Js(1.0))
                    var.put('blueChannel', var.get('getTextureChannel')(var.get('diffuseTexture'), Js(2.0), var.get('width'), var.get('height'), var.get('scratchChannel')))
                    var.get('writeChannel')(var.get('pixels'), var.get('blueChannel'), Js(2.0))
                    var.put('alphaChannel', var.get('getTextureChannel')(var.get('alphaTexture'), Js(3.0), var.get('width'), var.get('height'), var.get('scratchChannel')))
                    if var.get('isChannelSingleColor')(var.get('alphaChannel')):
                        var.put('alphaChannel', var.get('getTextureChannel')(var.get('alphaTexture'), Js(0.0), var.get('width'), var.get('height'), var.get('scratchChannel')))
                    var.get('writeChannel')(var.get('pixels'), var.get('alphaChannel'), Js(3.0))
                    var.put('texture', var.get('Texture').create())
                    var.get('texture').put('name', var.get('diffuseTexture').get('name'))
                    var.get('texture').put('extension', Js('.png'))
                    var.get('texture').put('pixels', var.get('pixels'))
                    var.get('texture').put('width', var.get('width'))
                    var.get('texture').put('height', var.get('height'))
                    var.get('texture').put('transparent', Js(True))
                    return var.get('texture')
                PyJsHoisted_createDiffuseAlphaTexture_.func_name = 'createDiffuseAlphaTexture'
                var.put('createDiffuseAlphaTexture', PyJsHoisted_createDiffuseAlphaTexture_)
                @Js
                def PyJsHoisted_createMetallicRoughnessTexture_(metallicTexture, roughnessTexture, occlusionTexture, options, this, arguments, var=var):
                    var = Scope({'metallicTexture':metallicTexture, 'roughnessTexture':roughnessTexture, 'occlusionTexture':occlusionTexture, 'options':options, 'this':this, 'arguments':arguments}, var)
                    var.registers(['i', 'packRoughness', 'roughnessTexture', 'scratchChannel', 'packedTextures', 'metallicChannel', 'texture', 'packOcclusion', 'pixelsLength', 'packMetallic', 'names', 'width', 'options', 'length', 'height', 'occlusionTexture', 'occlusionChannel', 'metallicTexture', 'name', 'dimensions', 'roughnessChannel', 'pixels'])
                    if var.get('defined')(var.get('options').get('overridingTextures').get('metallicRoughnessOcclusionTexture')):
                        return var.get('metallicTexture')
                    var.put('packMetallic', var.get('defined')(var.get('metallicTexture')))
                    var.put('packRoughness', var.get('defined')(var.get('roughnessTexture')))
                    var.put('packOcclusion', (var.get('defined')(var.get('occlusionTexture')) and var.get('options').get('packOcclusion')))
                    if (var.get('packMetallic').neg() and var.get('packRoughness').neg()):
                        return var.get('undefined')
                    if (var.get('packMetallic') and var.get('defined')(var.get('metallicTexture').get('pixels')).neg()):
                        var.get('options').callprop('logger', ((Js('Could not get decoded texture data for ')+var.get('metallicTexture').get('path'))+Js('. The material will be created without a metallicRoughness texture.')))
                        return var.get('undefined')
                    if (var.get('packRoughness') and var.get('defined')(var.get('roughnessTexture').get('pixels')).neg()):
                        var.get('options').callprop('logger', ((Js('Could not get decoded texture data for ')+var.get('roughnessTexture').get('path'))+Js('. The material will be created without a metallicRoughness texture.')))
                        return var.get('undefined')
                    if (var.get('packOcclusion') and var.get('defined')(var.get('occlusionTexture').get('pixels')).neg()):
                        var.get('options').callprop('logger', ((Js('Could not get decoded texture data for ')+var.get('occlusionTexture').get('path'))+Js('. The occlusion texture will not be packed in the metallicRoughness texture.')))
                        return var.get('undefined')
                    @Js
                    def PyJs_anonymous_2095_(texture, this, arguments, var=var):
                        var = Scope({'texture':texture, 'this':this, 'arguments':arguments}, var)
                        var.registers(['texture'])
                        return (var.get('defined')(var.get('texture')) and var.get('defined')(var.get('texture').get('pixels')))
                    PyJs_anonymous_2095_._set_name('anonymous')
                    var.put('packedTextures', Js([var.get('metallicTexture'), var.get('roughnessTexture'), var.get('occlusionTexture')]).callprop('filter', PyJs_anonymous_2095_))
                    var.put('dimensions', var.get('getMinimumDimensions')(var.get('packedTextures'), var.get('options')))
                    var.put('width', var.get('dimensions').get('0'))
                    var.put('height', var.get('dimensions').get('1'))
                    var.put('pixelsLength', (var.get('width')*var.get('height')))
                    var.put('pixels', var.get('Buffer').callprop('alloc', (var.get('pixelsLength')*Js(4.0)), Js(255)))
                    var.put('scratchChannel', var.get('Buffer').callprop('alloc', var.get('pixelsLength')))
                    if var.get('packMetallic'):
                        var.put('metallicChannel', var.get('getTextureChannel')(var.get('metallicTexture'), Js(0.0), var.get('width'), var.get('height'), var.get('scratchChannel')))
                        var.get('writeChannel')(var.get('pixels'), var.get('metallicChannel'), Js(2.0))
                    if var.get('packRoughness'):
                        var.put('roughnessChannel', var.get('getTextureChannel')(var.get('roughnessTexture'), Js(0.0), var.get('width'), var.get('height'), var.get('scratchChannel')))
                        var.get('writeChannel')(var.get('pixels'), var.get('roughnessChannel'), Js(1.0))
                    if var.get('packOcclusion'):
                        var.put('occlusionChannel', var.get('getTextureChannel')(var.get('occlusionTexture'), Js(0.0), var.get('width'), var.get('height'), var.get('scratchChannel')))
                        var.get('writeChannel')(var.get('pixels'), var.get('occlusionChannel'), Js(0.0))
                    var.put('length', var.get('packedTextures').get('length'))
                    var.put('names', var.get('Array').create(var.get('length')))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('length')):
                        try:
                            var.get('names').put(var.get('i'), var.get('packedTextures').get(var.get('i')).get('name'))
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    var.put('name', var.get('names').callprop('join', Js('_')))
                    var.put('texture', var.get('Texture').create())
                    var.get('texture').put('name', var.get('name'))
                    var.get('texture').put('extension', Js('.png'))
                    var.get('texture').put('pixels', var.get('pixels'))
                    var.get('texture').put('width', var.get('width'))
                    var.get('texture').put('height', var.get('height'))
                    return var.get('texture')
                PyJsHoisted_createMetallicRoughnessTexture_.func_name = 'createMetallicRoughnessTexture'
                var.put('createMetallicRoughnessTexture', PyJsHoisted_createMetallicRoughnessTexture_)
                @Js
                def PyJsHoisted_createSpecularGlossinessTexture_(specularTexture, glossinessTexture, options, this, arguments, var=var):
                    var = Scope({'specularTexture':specularTexture, 'glossinessTexture':glossinessTexture, 'options':options, 'this':this, 'arguments':arguments}, var)
                    var.registers(['glossinessTexture', 'i', 'packSpecular', 'packGlossiness', 'blueChannel', 'scratchChannel', 'greenChannel', 'packedTextures', 'texture', 'pixelsLength', 'glossinessChannel', 'names', 'width', 'specularTexture', 'options', 'length', 'height', 'name', 'dimensions', 'pixels', 'redChannel'])
                    if var.get('defined')(var.get('options').get('overridingTextures').get('specularGlossinessTexture')):
                        return var.get('specularTexture')
                    var.put('packSpecular', var.get('defined')(var.get('specularTexture')))
                    var.put('packGlossiness', var.get('defined')(var.get('glossinessTexture')))
                    if (var.get('packSpecular').neg() and var.get('packGlossiness').neg()):
                        return var.get('undefined')
                    if (var.get('packSpecular') and var.get('defined')(var.get('specularTexture').get('pixels')).neg()):
                        var.get('options').callprop('logger', ((Js('Could not get decoded texture data for ')+var.get('specularTexture').get('path'))+Js('. The material will be created without a specularGlossiness texture.')))
                        return var.get('undefined')
                    if (var.get('packGlossiness') and var.get('defined')(var.get('glossinessTexture').get('pixels')).neg()):
                        var.get('options').callprop('logger', ((Js('Could not get decoded texture data for ')+var.get('glossinessTexture').get('path'))+Js('. The material will be created without a specularGlossiness texture.')))
                        return var.get('undefined')
                    @Js
                    def PyJs_anonymous_2096_(texture, this, arguments, var=var):
                        var = Scope({'texture':texture, 'this':this, 'arguments':arguments}, var)
                        var.registers(['texture'])
                        return (var.get('defined')(var.get('texture')) and var.get('defined')(var.get('texture').get('pixels')))
                    PyJs_anonymous_2096_._set_name('anonymous')
                    var.put('packedTextures', Js([var.get('specularTexture'), var.get('glossinessTexture')]).callprop('filter', PyJs_anonymous_2096_))
                    var.put('dimensions', var.get('getMinimumDimensions')(var.get('packedTextures'), var.get('options')))
                    var.put('width', var.get('dimensions').get('0'))
                    var.put('height', var.get('dimensions').get('1'))
                    var.put('pixelsLength', (var.get('width')*var.get('height')))
                    var.put('pixels', var.get('Buffer').callprop('alloc', (var.get('pixelsLength')*Js(4.0)), Js(255)))
                    var.put('scratchChannel', var.get('Buffer').callprop('alloc', var.get('pixelsLength')))
                    if var.get('packSpecular'):
                        var.put('redChannel', var.get('getTextureChannel')(var.get('specularTexture'), Js(0.0), var.get('width'), var.get('height'), var.get('scratchChannel')))
                        var.get('writeChannel')(var.get('pixels'), var.get('redChannel'), Js(0.0))
                        var.put('greenChannel', var.get('getTextureChannel')(var.get('specularTexture'), Js(1.0), var.get('width'), var.get('height'), var.get('scratchChannel')))
                        var.get('writeChannel')(var.get('pixels'), var.get('greenChannel'), Js(1.0))
                        var.put('blueChannel', var.get('getTextureChannel')(var.get('specularTexture'), Js(2.0), var.get('width'), var.get('height'), var.get('scratchChannel')))
                        var.get('writeChannel')(var.get('pixels'), var.get('blueChannel'), Js(2.0))
                    if var.get('packGlossiness'):
                        var.put('glossinessChannel', var.get('getTextureChannel')(var.get('glossinessTexture'), Js(0.0), var.get('width'), var.get('height'), var.get('scratchChannel')))
                        var.get('writeChannel')(var.get('pixels'), var.get('glossinessChannel'), Js(3.0))
                    var.put('length', var.get('packedTextures').get('length'))
                    var.put('names', var.get('Array').create(var.get('length')))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('length')):
                        try:
                            var.get('names').put(var.get('i'), var.get('packedTextures').get(var.get('i')).get('name'))
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    var.put('name', var.get('names').callprop('join', Js('_')))
                    var.put('texture', var.get('Texture').create())
                    var.get('texture').put('name', var.get('name'))
                    var.get('texture').put('extension', Js('.png'))
                    var.get('texture').put('pixels', var.get('pixels'))
                    var.get('texture').put('width', var.get('width'))
                    var.get('texture').put('height', var.get('height'))
                    return var.get('texture')
                PyJsHoisted_createSpecularGlossinessTexture_.func_name = 'createSpecularGlossinessTexture'
                var.put('createSpecularGlossinessTexture', PyJsHoisted_createSpecularGlossinessTexture_)
                @Js
                def PyJsHoisted_createSpecularGlossinessMaterial_(material, options, this, arguments, var=var):
                    var = Scope({'material':material, 'options':options, 'this':this, 'arguments':arguments}, var)
                    var.registers(['glossinessTexture', 'alphaTexture', 'emissiveFactor', 'material', 'diffuseTexture', 'doubleSided', 'glossinessFactor', 'specularGlossinessTexture', 'transparent', 'specularTexture', 'options', 'alphaMode', 'diffuseAlphaTexture', 'alpha', 'normalTexture', 'emissiveTexture', 'occlusionTexture', 'diffuseFactor', 'specularFactor'])
                    var.put('emissiveTexture', var.get('material').get('emissiveTexture'))
                    var.put('normalTexture', var.get('material').get('normalTexture'))
                    var.put('occlusionTexture', var.get('material').get('ambientTexture'))
                    var.put('diffuseTexture', var.get('material').get('diffuseTexture'))
                    var.put('alphaTexture', var.get('material').get('alphaTexture'))
                    var.put('specularTexture', var.get('material').get('specularTexture'))
                    var.put('glossinessTexture', var.get('material').get('specularShininessTexture'))
                    var.put('specularGlossinessTexture', var.get('createSpecularGlossinessTexture')(var.get('specularTexture'), var.get('glossinessTexture'), var.get('options')))
                    var.put('diffuseAlphaTexture', var.get('createDiffuseAlphaTexture')(var.get('diffuseTexture'), var.get('alphaTexture'), var.get('options')))
                    var.put('emissiveFactor', var.get('material').get('emissiveColor').callprop('slice', Js(0.0), Js(3.0)))
                    var.put('diffuseFactor', var.get('material').get('diffuseColor'))
                    var.put('specularFactor', var.get('material').get('specularColor').callprop('slice', Js(0.0), Js(3.0)))
                    var.put('glossinessFactor', var.get('material').get('specularShininess'))
                    if var.get('defined')(var.get('emissiveTexture')):
                        var.put('emissiveFactor', Js([Js(1.0), Js(1.0), Js(1.0)]))
                    if var.get('defined')(var.get('diffuseTexture')):
                        var.put('diffuseFactor', Js([Js(1.0), Js(1.0), Js(1.0), Js(1.0)]))
                    if var.get('defined')(var.get('specularTexture')):
                        var.put('specularFactor', Js([Js(1.0), Js(1.0), Js(1.0)]))
                    if var.get('defined')(var.get('glossinessTexture')):
                        var.put('glossinessFactor', Js(1.0))
                    var.put('transparent', Js(False))
                    if var.get('defined')(var.get('alphaTexture')):
                        var.put('transparent', Js(True))
                    else:
                        var.put('alpha', var.get('material').get('alpha'))
                        var.get('diffuseFactor').put('3', var.get('alpha'))
                        var.put('transparent', (var.get('alpha')<Js(1.0)))
                    if var.get('defined')(var.get('diffuseTexture')):
                        var.put('transparent', (var.get('transparent') or var.get('diffuseTexture').get('transparent')))
                    var.put('doubleSided', var.get('transparent'))
                    var.put('alphaMode', (Js('BLEND') if var.get('transparent') else Js('OPAQUE')))
                    return Js({'name':var.get('material').get('name'),'extensions':Js({'KHR_materials_pbrSpecularGlossiness':Js({'diffuseTexture':var.get('diffuseAlphaTexture'),'specularGlossinessTexture':var.get('specularGlossinessTexture'),'diffuseFactor':var.get('diffuseFactor'),'specularFactor':var.get('specularFactor'),'glossinessFactor':var.get('glossinessFactor')})}),'emissiveTexture':var.get('emissiveTexture'),'normalTexture':var.get('normalTexture'),'occlusionTexture':var.get('occlusionTexture'),'emissiveFactor':var.get('emissiveFactor'),'alphaMode':var.get('alphaMode'),'doubleSided':var.get('doubleSided')})
                PyJsHoisted_createSpecularGlossinessMaterial_.func_name = 'createSpecularGlossinessMaterial'
                var.put('createSpecularGlossinessMaterial', PyJsHoisted_createSpecularGlossinessMaterial_)
                @Js
                def PyJsHoisted_createMetallicRoughnessMaterial_(material, options, this, arguments, var=var):
                    var = Scope({'material':material, 'options':options, 'this':this, 'arguments':arguments}, var)
                    var.registers(['baseColorTexture', 'alphaTexture', 'emissiveFactor', 'roughnessTexture', 'material', 'baseColorFactor', 'doubleSided', 'transparent', 'metallicFactor', 'options', 'alphaMode', 'diffuseAlphaTexture', 'alpha', 'roughnessFactor', 'normalTexture', 'emissiveTexture', 'occlusionTexture', 'metallicTexture', 'metallicRoughnessTexture'])
                    var.put('emissiveTexture', var.get('material').get('emissiveTexture'))
                    var.put('normalTexture', var.get('material').get('normalTexture'))
                    var.put('occlusionTexture', var.get('material').get('ambientTexture'))
                    var.put('baseColorTexture', var.get('material').get('diffuseTexture'))
                    var.put('alphaTexture', var.get('material').get('alphaTexture'))
                    var.put('metallicTexture', var.get('material').get('specularTexture'))
                    var.put('roughnessTexture', var.get('material').get('specularShininessTexture'))
                    var.put('metallicRoughnessTexture', var.get('createMetallicRoughnessTexture')(var.get('metallicTexture'), var.get('roughnessTexture'), var.get('occlusionTexture'), var.get('options')))
                    var.put('diffuseAlphaTexture', var.get('createDiffuseAlphaTexture')(var.get('baseColorTexture'), var.get('alphaTexture'), var.get('options')))
                    if var.get('options').get('packOcclusion'):
                        var.put('occlusionTexture', var.get('metallicRoughnessTexture'))
                    var.put('emissiveFactor', var.get('material').get('emissiveColor').callprop('slice', Js(0.0), Js(3.0)))
                    var.put('baseColorFactor', var.get('material').get('diffuseColor'))
                    var.put('metallicFactor', var.get('material').get('specularColor').get('0'))
                    var.put('roughnessFactor', var.get('material').get('specularShininess'))
                    if var.get('defined')(var.get('emissiveTexture')):
                        var.put('emissiveFactor', Js([Js(1.0), Js(1.0), Js(1.0)]))
                    if var.get('defined')(var.get('baseColorTexture')):
                        var.put('baseColorFactor', Js([Js(1.0), Js(1.0), Js(1.0), Js(1.0)]))
                    if var.get('defined')(var.get('metallicTexture')):
                        var.put('metallicFactor', Js(1.0))
                    if var.get('defined')(var.get('roughnessTexture')):
                        var.put('roughnessFactor', Js(1.0))
                    var.put('transparent', Js(False))
                    if var.get('defined')(var.get('alphaTexture')):
                        var.put('transparent', Js(True))
                    else:
                        var.put('alpha', var.get('material').get('alpha'))
                        var.get('baseColorFactor').put('3', var.get('alpha'))
                        var.put('transparent', (var.get('alpha')<Js(1.0)))
                    if var.get('defined')(var.get('baseColorTexture')):
                        var.put('transparent', (var.get('transparent') or var.get('baseColorTexture').get('transparent')))
                    var.put('doubleSided', var.get('transparent'))
                    var.put('alphaMode', (Js('BLEND') if var.get('transparent') else Js('OPAQUE')))
                    return Js({'name':var.get('material').get('name'),'pbrMetallicRoughness':Js({'baseColorTexture':var.get('diffuseAlphaTexture'),'metallicRoughnessTexture':var.get('metallicRoughnessTexture'),'baseColorFactor':var.get('baseColorFactor'),'metallicFactor':var.get('metallicFactor'),'roughnessFactor':var.get('roughnessFactor')}),'emissiveTexture':var.get('emissiveTexture'),'normalTexture':var.get('normalTexture'),'occlusionTexture':var.get('occlusionTexture'),'emissiveFactor':var.get('emissiveFactor'),'alphaMode':var.get('alphaMode'),'doubleSided':var.get('doubleSided')})
                PyJsHoisted_createMetallicRoughnessMaterial_.func_name = 'createMetallicRoughnessMaterial'
                var.put('createMetallicRoughnessMaterial', PyJsHoisted_createMetallicRoughnessMaterial_)
                @Js
                def PyJsHoisted_luminance_(color, this, arguments, var=var):
                    var = Scope({'color':color, 'this':this, 'arguments':arguments}, var)
                    var.registers(['color'])
                    return (((var.get('color').get('0')*Js(0.2125))+(var.get('color').get('1')*Js(0.7154)))+(var.get('color').get('2')*Js(0.0721)))
                PyJsHoisted_luminance_.func_name = 'luminance'
                var.put('luminance', PyJsHoisted_luminance_)
                @Js
                def PyJsHoisted_convertTraditionalToMetallicRoughness_(material, this, arguments, var=var):
                    var = Scope({'material':material, 'this':this, 'arguments':arguments}, var)
                    var.registers(['metallicFactor', 'specularIntensity', 'roughnessFactor', 'material'])
                    var.put('specularIntensity', var.get('luminance')(var.get('material').get('specularColor')))
                    var.put('roughnessFactor', var.get('material').get('specularShininess'))
                    var.put('roughnessFactor', (var.get('roughnessFactor')/Js(1000.0)))
                    var.put('roughnessFactor', (Js(1.0)-var.get('roughnessFactor')))
                    var.put('roughnessFactor', var.get('CesiumMath').callprop('clamp', var.get('roughnessFactor'), Js(0.0), Js(1.0)))
                    if (var.get('specularIntensity')<Js(0.1)):
                        var.put('roughnessFactor', (Js(1.0)-var.get('specularIntensity')), '*')
                    var.put('metallicFactor', Js(0.0))
                    var.get('material').put('specularColor', Js([var.get('metallicFactor'), var.get('metallicFactor'), var.get('metallicFactor'), Js(1.0)]))
                    var.get('material').put('specularShininess', var.get('roughnessFactor'))
                PyJsHoisted_convertTraditionalToMetallicRoughness_.func_name = 'convertTraditionalToMetallicRoughness'
                var.put('convertTraditionalToMetallicRoughness', PyJsHoisted_convertTraditionalToMetallicRoughness_)
                Js('use strict')
                var.put('Cesium', var.get('require')(Js('cesium')))
                var.put('path', var.get('require')(Js('path')))
                var.put('Promise', var.get('require')(Js('bluebird')))
                var.put('loadTexture', var.get('require')(Js('./loadTexture')))
                var.put('outsideDirectory', var.get('require')(Js('./outsideDirectory')))
                var.put('readLines', var.get('require')(Js('./readLines')))
                var.put('Texture', var.get('require')(Js('./Texture')))
                var.put('CesiumMath', var.get('Cesium').get('Math'))
                var.put('clone', var.get('Cesium').get('clone'))
                var.put('combine', var.get('Cesium').get('combine'))
                var.put('defaultValue', var.get('Cesium').get('defaultValue'))
                var.put('defined', var.get('Cesium').get('defined'))
                var.get('module').put('exports', var.get('loadMtl'))
                pass
                pass
                pass
                @Js
                def PyJs_anonymous_2088_(options, this, arguments, var=var):
                    var = Scope({'options':options, 'this':this, 'arguments':arguments}, var)
                    var.registers(['options'])
                    return var.get('convertMaterial')(var.get('Material').create(), var.get('options'))
                PyJs_anonymous_2088_._set_name('anonymous')
                var.get('loadMtl').put('getDefaultMaterial', PyJs_anonymous_2088_)
                @Js
                def PyJs_anonymous_2089_(materialOptions, options, this, arguments, var=var):
                    var = Scope({'materialOptions':materialOptions, 'options':options, 'this':this, 'arguments':arguments}, var)
                    var.registers(['options', 'materialOptions'])
                    return var.get('convertMaterial')(var.get('combine')(var.get('materialOptions'), var.get('Material').create()), var.get('options'))
                PyJs_anonymous_2089_._set_name('anonymous')
                var.get('loadMtl').put('_createMaterial', PyJs_anonymous_2089_)
                pass
                pass
                pass
                pass
                var.put('scratchResizeChannel', PyJsComma(Js(0.0), Js(None)))
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
            PyJs_anonymous_2083_._set_name('anonymous')
            PyJs_anonymous_2083_.callprop('call', var.get(u"this"))
        PyJs_anonymous_2082_._set_name('anonymous')
        PyJs_anonymous_2082_.callprop('call', var.get(u"this"), var.get('require')(Js('buffer')).get('Buffer'))
    PyJs_anonymous_2081_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2097_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['uvPattern', 'Mesh', 'meshesHaveNames', 'Node', 'defined', 'Primitive', 'removeEmptyNodes', 'setDefaults', 'Cartesian3', 'Cesium', 'Matrix4', 'PolygonPipeline', 'defaultValue', 'setDefaultNames', 'getAxisTransform', 'path', 'scratchCartesian', 'loadMtls', 'vertexPattern', 'Axis', 'readLines', 'finishLoading', 'loadMtl', 'removeEmptyMeshes', 'cleanNodes', 'ComponentDatatype', 'require', 'RuntimeError', 'loadObj', 'outsideDirectory', 'module', 'exports', 'normalPattern', 'assignUnnamedMaterial', 'facePattern', 'Promise', 'CoplanarPolygonGeometryLibrary', 'WindingOrder', 'ArrayStorage', 'normalizeMtlPath', 'getMtlPaths', 'assignDefaultMaterial'])
        @Js
        def PyJsHoisted_Node_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").put('name', var.get('undefined'))
            var.get(u"this").put('meshes', Js([]))
        PyJsHoisted_Node_.func_name = 'Node'
        var.put('Node', PyJsHoisted_Node_)
        @Js
        def PyJsHoisted_Mesh_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").put('name', var.get('undefined'))
            var.get(u"this").put('primitives', Js([]))
        PyJsHoisted_Mesh_.func_name = 'Mesh'
        var.put('Mesh', PyJsHoisted_Mesh_)
        @Js
        def PyJsHoisted_Primitive_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").put('material', var.get('undefined'))
            var.get(u"this").put('indices', var.get('ArrayStorage').create(var.get('ComponentDatatype').get('UNSIGNED_INT')))
            var.get(u"this").put('positions', var.get('ArrayStorage').create(var.get('ComponentDatatype').get('FLOAT')))
            var.get(u"this").put('normals', var.get('ArrayStorage').create(var.get('ComponentDatatype').get('FLOAT')))
            var.get(u"this").put('uvs', var.get('ArrayStorage').create(var.get('ComponentDatatype').get('FLOAT')))
        PyJsHoisted_Primitive_.func_name = 'Primitive'
        var.put('Primitive', PyJsHoisted_Primitive_)
        @Js
        def PyJsHoisted_loadObj_(objPath, options, this, arguments, var=var):
            var = Scope({'objPath':objPath, 'options':options, 'this':this, 'arguments':arguments}, var)
            var.registers(['checkWindingCorrect', 'facePositions', 'scratchAxis2', 'correctAttributeIndices', 'primitive', 'scratch3', 'scratchVertexIndices', 'mtlPaths', 'addMesh', 'globalPositions', 'scratchPositions', 'faceVertices', 'scratch2', 'scratchCenter', 'scratch4', 'scratchPoints', 'addPrimitive', 'correctVertices', 'getPosition', 'addTriangle', 'vertexCacheCount', 'vertexCacheLimit', 'node', 'vertexCache', 'getName', 'addVertex', 'scratchAxis1', 'globalNormals', 'faceUvs', 'addNode', 'faceNormals', 'faceAndPrimitiveMatch', 'activeMaterial', 'getIndexFromStart', 'addFace', 'options', 'mesh', 'reusePrimitive', 'vertexCount', 'objPath', 'parseLine', 'globalUvs', 'clearVertexCache', 'scratchNormal', 'checkPrimitive', 'scratch5', 'getNormal', 'createVertex', 'nodes', 'axisTransform', 'useMaterial', 'scratch1', 'lineBuffer'])
            @Js
            def PyJsHoisted_clearVertexCache_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.put('vertexCache', Js({}))
                var.put('vertexCacheCount', Js(0.0))
            PyJsHoisted_clearVertexCache_.func_name = 'clearVertexCache'
            var.put('clearVertexCache', PyJsHoisted_clearVertexCache_)
            @Js
            def PyJsHoisted_getName_(name, this, arguments, var=var):
                var = Scope({'name':name, 'this':this, 'arguments':arguments}, var)
                var.registers(['name'])
                return (var.get('undefined') if PyJsStrictEq(var.get('name'),Js('')) else var.get('name'))
            PyJsHoisted_getName_.func_name = 'getName'
            var.put('getName', PyJsHoisted_getName_)
            @Js
            def PyJsHoisted_addNode_(name, this, arguments, var=var):
                var = Scope({'name':name, 'this':this, 'arguments':arguments}, var)
                var.registers(['name'])
                var.put('node', var.get('Node').create())
                var.get('node').put('name', var.get('getName')(var.get('name')))
                var.get('nodes').callprop('push', var.get('node'))
                var.get('addMesh')()
            PyJsHoisted_addNode_.func_name = 'addNode'
            var.put('addNode', PyJsHoisted_addNode_)
            @Js
            def PyJsHoisted_addMesh_(name, this, arguments, var=var):
                var = Scope({'name':name, 'this':this, 'arguments':arguments}, var)
                var.registers(['name'])
                var.put('mesh', var.get('Mesh').create())
                var.get('mesh').put('name', var.get('getName')(var.get('name')))
                var.get('node').get('meshes').callprop('push', var.get('mesh'))
                var.get('addPrimitive')()
            PyJsHoisted_addMesh_.func_name = 'addMesh'
            var.put('addMesh', PyJsHoisted_addMesh_)
            @Js
            def PyJsHoisted_addPrimitive_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.put('primitive', var.get('Primitive').create())
                var.get('primitive').put('material', var.get('activeMaterial'))
                var.get('mesh').get('primitives').callprop('push', var.get('primitive'))
                var.get('clearVertexCache')()
                var.put('vertexCount', Js(0.0))
            PyJsHoisted_addPrimitive_.func_name = 'addPrimitive'
            var.put('addPrimitive', PyJsHoisted_addPrimitive_)
            @Js
            def PyJsHoisted_reusePrimitive_(callback, this, arguments, var=var):
                var = Scope({'callback':callback, 'this':this, 'arguments':arguments}, var)
                var.registers(['primitivesLength', 'callback', 'i', 'primitives'])
                var.put('primitives', var.get('mesh').get('primitives'))
                var.put('primitivesLength', var.get('primitives').get('length'))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('primitivesLength')):
                    try:
                        if PyJsStrictEq(var.get('primitives').get(var.get('i')).get('material'),var.get('activeMaterial')):
                            if (var.get('defined')(var.get('callback')).neg() or var.get('callback')(var.get('primitives').get(var.get('i')))):
                                var.put('primitive', var.get('primitives').get(var.get('i')))
                                var.get('clearVertexCache')()
                                var.put('vertexCount', (var.get('primitive').get('positions').get('length')/Js(3.0)))
                                return var.get('undefined')
                    finally:
                            var.put('i',Js(var.get('i').to_number())+Js(1))
                var.get('addPrimitive')()
            PyJsHoisted_reusePrimitive_.func_name = 'reusePrimitive'
            var.put('reusePrimitive', PyJsHoisted_reusePrimitive_)
            @Js
            def PyJsHoisted_useMaterial_(name, this, arguments, var=var):
                var = Scope({'name':name, 'this':this, 'arguments':arguments}, var)
                var.registers(['name'])
                var.put('activeMaterial', var.get('getName')(var.get('name')))
                var.get('reusePrimitive')()
            PyJsHoisted_useMaterial_.func_name = 'useMaterial'
            var.put('useMaterial', PyJsHoisted_useMaterial_)
            @Js
            def PyJsHoisted_faceAndPrimitiveMatch_(uvs, normals, primitive, this, arguments, var=var):
                var = Scope({'uvs':uvs, 'normals':normals, 'primitive':primitive, 'this':this, 'arguments':arguments}, var)
                var.registers(['faceHasNormals', 'normals', 'primitive', 'faceHasUvs', 'primitiveHasNormals', 'primitiveHasUvs', 'uvs'])
                var.put('faceHasUvs', var.get('defined')(var.get('uvs').get('0')))
                var.put('faceHasNormals', var.get('defined')(var.get('normals').get('0')))
                var.put('primitiveHasUvs', (var.get('primitive').get('uvs').get('length')>Js(0.0)))
                var.put('primitiveHasNormals', (var.get('primitive').get('normals').get('length')>Js(0.0)))
                return (PyJsStrictEq(var.get('primitiveHasUvs'),var.get('faceHasUvs')) and PyJsStrictEq(var.get('primitiveHasNormals'),var.get('faceHasNormals')))
            PyJsHoisted_faceAndPrimitiveMatch_.func_name = 'faceAndPrimitiveMatch'
            var.put('faceAndPrimitiveMatch', PyJsHoisted_faceAndPrimitiveMatch_)
            @Js
            def PyJsHoisted_checkPrimitive_(uvs, normals, this, arguments, var=var):
                var = Scope({'uvs':uvs, 'normals':normals, 'this':this, 'arguments':arguments}, var)
                var.registers(['normals', 'firstFace', 'uvs'])
                var.put('firstFace', PyJsStrictEq(var.get('primitive').get('indices').get('length'),Js(0.0)))
                if (var.get('firstFace').neg() and var.get('faceAndPrimitiveMatch')(var.get('uvs'), var.get('normals'), var.get('primitive')).neg()):
                    @Js
                    def PyJs_anonymous_2098_(primitive, this, arguments, var=var):
                        var = Scope({'primitive':primitive, 'this':this, 'arguments':arguments}, var)
                        var.registers(['primitive'])
                        return var.get('faceAndPrimitiveMatch')(var.get('uvs'), var.get('normals'), var.get('primitive'))
                    PyJs_anonymous_2098_._set_name('anonymous')
                    var.get('reusePrimitive')(PyJs_anonymous_2098_)
            PyJsHoisted_checkPrimitive_.func_name = 'checkPrimitive'
            var.put('checkPrimitive', PyJsHoisted_checkPrimitive_)
            @Js
            def PyJsHoisted_getIndexFromStart_(index, attributeData, components, this, arguments, var=var):
                var = Scope({'index':index, 'attributeData':attributeData, 'components':components, 'this':this, 'arguments':arguments}, var)
                var.registers(['components', 'index', 'i', 'attributeData'])
                var.put('i', var.get('parseInt')(var.get('index')))
                if (var.get('i')<Js(0.0)):
                    return ((var.get('attributeData').get('length')/var.get('components'))+var.get('i'))
                return (var.get('i')-Js(1.0))
            PyJsHoisted_getIndexFromStart_.func_name = 'getIndexFromStart'
            var.put('getIndexFromStart', PyJsHoisted_getIndexFromStart_)
            @Js
            def PyJsHoisted_correctAttributeIndices_(attributeIndices, attributeData, components, this, arguments, var=var):
                var = Scope({'attributeIndices':attributeIndices, 'attributeData':attributeData, 'components':components, 'this':this, 'arguments':arguments}, var)
                var.registers(['i', 'components', 'attributeData', 'length', 'attributeIndices'])
                var.put('length', var.get('attributeIndices').get('length'))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('length')):
                    try:
                        if PyJsStrictEq(var.get('attributeIndices').get(var.get('i')).get('length'),Js(0.0)):
                            var.get('attributeIndices').put(var.get('i'), var.get('undefined'))
                        else:
                            var.get('attributeIndices').put(var.get('i'), var.get('getIndexFromStart')(var.get('attributeIndices').get(var.get('i')), var.get('attributeData'), var.get('components')))
                    finally:
                            var.put('i',Js(var.get('i').to_number())+Js(1))
            PyJsHoisted_correctAttributeIndices_.func_name = 'correctAttributeIndices'
            var.put('correctAttributeIndices', PyJsHoisted_correctAttributeIndices_)
            @Js
            def PyJsHoisted_correctVertices_(vertices, positions, uvs, normals, this, arguments, var=var):
                var = Scope({'vertices':vertices, 'positions':positions, 'uvs':uvs, 'normals':normals, 'this':this, 'arguments':arguments}, var)
                var.registers(['i', 'normals', 'vertices', 'length', 'positions', 'uvs'])
                var.put('length', var.get('vertices').get('length'))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('length')):
                    try:
                        var.get('vertices').put(var.get('i'), ((((var.get('defaultValue')(var.get('positions').get(var.get('i')), Js(''))+Js('/'))+var.get('defaultValue')(var.get('uvs').get(var.get('i')), Js('')))+Js('/'))+var.get('defaultValue')(var.get('normals').get(var.get('i')), Js(''))))
                    finally:
                            var.put('i',Js(var.get('i').to_number())+Js(1))
            PyJsHoisted_correctVertices_.func_name = 'correctVertices'
            var.put('correctVertices', PyJsHoisted_correctVertices_)
            @Js
            def PyJsHoisted_createVertex_(p, u, n, this, arguments, var=var):
                var = Scope({'p':p, 'u':u, 'n':n, 'this':this, 'arguments':arguments}, var)
                var.registers(['ux', 'n', 'uy', 'px', 'p', 'nz', 'pz', 'nx', 'u', 'ny', 'py'])
                if (var.get('defined')(var.get('p')) and (var.get('globalPositions').get('length')>Js(0.0))):
                    if ((var.get('p')*Js(3.0))>=var.get('globalPositions').get('length')):
                        PyJsTempException = JsToPyException(var.get('RuntimeError').create(((Js('Position index ')+var.get('p'))+Js(' is out of bounds'))))
                        raise PyJsTempException
                    var.put('px', var.get('globalPositions').callprop('get', (var.get('p')*Js(3.0))))
                    var.put('py', var.get('globalPositions').callprop('get', ((var.get('p')*Js(3.0))+Js(1.0))))
                    var.put('pz', var.get('globalPositions').callprop('get', ((var.get('p')*Js(3.0))+Js(2.0))))
                    var.get('primitive').get('positions').callprop('push', var.get('px'))
                    var.get('primitive').get('positions').callprop('push', var.get('py'))
                    var.get('primitive').get('positions').callprop('push', var.get('pz'))
                if (var.get('defined')(var.get('n')) and (var.get('globalNormals').get('length')>Js(0.0))):
                    if ((var.get('n')*Js(3.0))>=var.get('globalNormals').get('length')):
                        PyJsTempException = JsToPyException(var.get('RuntimeError').create(((Js('Normal index ')+var.get('n'))+Js(' is out of bounds'))))
                        raise PyJsTempException
                    var.put('nx', var.get('globalNormals').callprop('get', (var.get('n')*Js(3.0))))
                    var.put('ny', var.get('globalNormals').callprop('get', ((var.get('n')*Js(3.0))+Js(1.0))))
                    var.put('nz', var.get('globalNormals').callprop('get', ((var.get('n')*Js(3.0))+Js(2.0))))
                    var.get('primitive').get('normals').callprop('push', var.get('nx'))
                    var.get('primitive').get('normals').callprop('push', var.get('ny'))
                    var.get('primitive').get('normals').callprop('push', var.get('nz'))
                if (var.get('defined')(var.get('u')) and (var.get('globalUvs').get('length')>Js(0.0))):
                    if ((var.get('u')*Js(2.0))>=var.get('globalUvs').get('length')):
                        PyJsTempException = JsToPyException(var.get('RuntimeError').create(((Js('UV index ')+var.get('u'))+Js(' is out of bounds'))))
                        raise PyJsTempException
                    var.put('ux', var.get('globalUvs').callprop('get', (var.get('u')*Js(2.0))))
                    var.put('uy', var.get('globalUvs').callprop('get', ((var.get('u')*Js(2.0))+Js(1.0))))
                    var.get('primitive').get('uvs').callprop('push', var.get('ux'))
                    var.get('primitive').get('uvs').callprop('push', var.get('uy'))
            PyJsHoisted_createVertex_.func_name = 'createVertex'
            var.put('createVertex', PyJsHoisted_createVertex_)
            @Js
            def PyJsHoisted_addVertex_(v, p, u, n, this, arguments, var=var):
                var = Scope({'v':v, 'p':p, 'u':u, 'n':n, 'this':this, 'arguments':arguments}, var)
                var.registers(['n', 'p', 'u', 'v', 'index'])
                var.put('index', var.get('vertexCache').get(var.get('v')))
                if var.get('defined')(var.get('index')).neg():
                    var.put('index', (var.put('vertexCount',Js(var.get('vertexCount').to_number())+Js(1))-Js(1)))
                    var.get('vertexCache').put(var.get('v'), var.get('index'))
                    var.get('createVertex')(var.get('p'), var.get('u'), var.get('n'))
                    (var.put('vertexCacheCount',Js(var.get('vertexCacheCount').to_number())+Js(1))-Js(1))
                    if (var.get('vertexCacheCount')>var.get('vertexCacheLimit')):
                        var.get('clearVertexCache')()
                return var.get('index')
            PyJsHoisted_addVertex_.func_name = 'addVertex'
            var.put('addVertex', PyJsHoisted_addVertex_)
            @Js
            def PyJsHoisted_getPosition_(index, result, this, arguments, var=var):
                var = Scope({'index':index, 'result':result, 'this':this, 'arguments':arguments}, var)
                var.registers(['px', 'pz', 'result', 'index', 'py'])
                var.put('px', var.get('globalPositions').callprop('get', (var.get('index')*Js(3.0))))
                var.put('py', var.get('globalPositions').callprop('get', ((var.get('index')*Js(3.0))+Js(1.0))))
                var.put('pz', var.get('globalPositions').callprop('get', ((var.get('index')*Js(3.0))+Js(2.0))))
                return var.get('Cartesian3').callprop('fromElements', var.get('px'), var.get('py'), var.get('pz'), var.get('result'))
            PyJsHoisted_getPosition_.func_name = 'getPosition'
            var.put('getPosition', PyJsHoisted_getPosition_)
            @Js
            def PyJsHoisted_getNormal_(index, result, this, arguments, var=var):
                var = Scope({'index':index, 'result':result, 'this':this, 'arguments':arguments}, var)
                var.registers(['nx', 'nz', 'ny', 'result', 'index'])
                var.put('nx', var.get('globalNormals').callprop('get', (var.get('index')*Js(3.0))))
                var.put('ny', var.get('globalNormals').callprop('get', ((var.get('index')*Js(3.0))+Js(1.0))))
                var.put('nz', var.get('globalNormals').callprop('get', ((var.get('index')*Js(3.0))+Js(2.0))))
                return var.get('Cartesian3').callprop('fromElements', var.get('nx'), var.get('ny'), var.get('nz'), var.get('result'))
            PyJsHoisted_getNormal_.func_name = 'getNormal'
            var.put('getNormal', PyJsHoisted_getNormal_)
            @Js
            def PyJsHoisted_checkWindingCorrect_(positionIndex1, positionIndex2, positionIndex3, normalIndex, this, arguments, var=var):
                var = Scope({'positionIndex1':positionIndex1, 'positionIndex2':positionIndex2, 'positionIndex3':positionIndex3, 'normalIndex':normalIndex, 'this':this, 'arguments':arguments}, var)
                var.registers(['BA', 'CA', 'cross', 'positionIndex2', 'A', 'B', 'C', 'normalIndex', 'positionIndex1', 'normal', 'positionIndex3'])
                if var.get('defined')(var.get('normalIndex')).neg():
                    return Js(True)
                var.put('normal', var.get('getNormal')(var.get('normalIndex'), var.get('scratchNormal')))
                var.put('A', var.get('getPosition')(var.get('positionIndex1'), var.get('scratch1')))
                var.put('B', var.get('getPosition')(var.get('positionIndex2'), var.get('scratch2')))
                var.put('C', var.get('getPosition')(var.get('positionIndex3'), var.get('scratch3')))
                var.put('BA', var.get('Cartesian3').callprop('subtract', var.get('B'), var.get('A'), var.get('scratch4')))
                var.put('CA', var.get('Cartesian3').callprop('subtract', var.get('C'), var.get('A'), var.get('scratch5')))
                var.put('cross', var.get('Cartesian3').callprop('cross', var.get('BA'), var.get('CA'), var.get('scratch3')))
                return (var.get('Cartesian3').callprop('dot', var.get('normal'), var.get('cross'))>=Js(0.0))
            PyJsHoisted_checkWindingCorrect_.func_name = 'checkWindingCorrect'
            var.put('checkWindingCorrect', PyJsHoisted_checkWindingCorrect_)
            @Js
            def PyJsHoisted_addTriangle_(index1, index2, index3, correctWinding, this, arguments, var=var):
                var = Scope({'index1':index1, 'index2':index2, 'index3':index3, 'correctWinding':correctWinding, 'this':this, 'arguments':arguments}, var)
                var.registers(['index1', 'index3', 'correctWinding', 'index2'])
                if var.get('correctWinding'):
                    var.get('primitive').get('indices').callprop('push', var.get('index1'))
                    var.get('primitive').get('indices').callprop('push', var.get('index2'))
                    var.get('primitive').get('indices').callprop('push', var.get('index3'))
                else:
                    var.get('primitive').get('indices').callprop('push', var.get('index1'))
                    var.get('primitive').get('indices').callprop('push', var.get('index3'))
                    var.get('primitive').get('indices').callprop('push', var.get('index2'))
            PyJsHoisted_addTriangle_.func_name = 'addTriangle'
            var.put('addTriangle', PyJsHoisted_addTriangle_)
            @Js
            def PyJsHoisted_addFace_(vertices, positions, uvs, normals, this, arguments, var=var):
                var = Scope({'vertices':vertices, 'positions':positions, 'uvs':uvs, 'normals':normals, 'this':this, 'arguments':arguments}, var)
                var.registers(['_isWindingCorrect', 'index1', '_i2', 'points2D', 'i', 'validGeometry', 'normals', 'isWindingCorrect', 'vertices', 'points', 'positions', 'index2', 'projectPoints', 'indices', 'vertexIndices', 'index3', 'index', 'uvs'])
                var.get('correctAttributeIndices')(var.get('positions'), var.get('globalPositions'), Js(3.0))
                var.get('correctAttributeIndices')(var.get('normals'), var.get('globalNormals'), Js(3.0))
                var.get('correctAttributeIndices')(var.get('uvs'), var.get('globalUvs'), Js(2.0))
                var.get('correctVertices')(var.get('vertices'), var.get('positions'), var.get('uvs'), var.get('normals'))
                var.get('checkPrimitive')(var.get('uvs'), var.get('faceNormals'))
                if PyJsStrictEq(var.get('vertices').get('length'),Js(3.0)):
                    var.put('isWindingCorrect', var.get('checkWindingCorrect')(var.get('positions').get('0'), var.get('positions').get('1'), var.get('positions').get('2'), var.get('normals').get('0')))
                    var.put('index1', var.get('addVertex')(var.get('vertices').get('0'), var.get('positions').get('0'), var.get('uvs').get('0'), var.get('normals').get('0')))
                    var.put('index2', var.get('addVertex')(var.get('vertices').get('1'), var.get('positions').get('1'), var.get('uvs').get('1'), var.get('normals').get('1')))
                    var.put('index3', var.get('addVertex')(var.get('vertices').get('2'), var.get('positions').get('2'), var.get('uvs').get('2'), var.get('normals').get('2')))
                    var.get('addTriangle')(var.get('index1'), var.get('index2'), var.get('index3'), var.get('isWindingCorrect'))
                else:
                    var.put('points', var.get('scratchPoints'))
                    var.put('vertexIndices', var.get('scratchVertexIndices'))
                    var.get('points').put('length', Js(0.0))
                    var.get('vertexIndices').put('length', Js(0.0))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('vertices').get('length')):
                        try:
                            var.put('index', var.get('addVertex')(var.get('vertices').get(var.get('i')), var.get('positions').get(var.get('i')), var.get('uvs').get(var.get('i')), var.get('normals').get(var.get('i'))))
                            var.get('vertexIndices').callprop('push', var.get('index'))
                            if PyJsStrictEq(var.get('i'),var.get('scratchPositions').get('length')):
                                var.get('scratchPositions').callprop('push', var.get('Cartesian3').create())
                            var.get('points').callprop('push', var.get('getPosition')(var.get('positions').get(var.get('i')), var.get('scratchPositions').get(var.get('i'))))
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    var.put('validGeometry', var.get('CoplanarPolygonGeometryLibrary').callprop('computeProjectTo2DArguments', var.get('points'), var.get('scratchCenter'), var.get('scratchAxis1'), var.get('scratchAxis2')))
                    if var.get('validGeometry').neg():
                        return var.get('undefined')
                    var.put('projectPoints', var.get('CoplanarPolygonGeometryLibrary').callprop('createProjectPointsTo2DFunction', var.get('scratchCenter'), var.get('scratchAxis1'), var.get('scratchAxis2')))
                    var.put('points2D', var.get('projectPoints')(var.get('points')))
                    var.put('indices', var.get('PolygonPipeline').callprop('triangulate', var.get('points2D')))
                    var.put('_isWindingCorrect', PyJsStrictNeq(var.get('PolygonPipeline').callprop('computeWindingOrder2D', var.get('points2D')),var.get('WindingOrder').get('CLOCKWISE')))
                    #for JS loop
                    var.put('_i2', Js(0.0))
                    while (var.get('_i2')<(var.get('indices').get('length')-Js(2.0))):
                        try:
                            var.get('addTriangle')(var.get('vertexIndices').get(var.get('indices').get(var.get('_i2'))), var.get('vertexIndices').get(var.get('indices').get((var.get('_i2')+Js(1.0)))), var.get('vertexIndices').get(var.get('indices').get((var.get('_i2')+Js(2.0)))), var.get('_isWindingCorrect'))
                        finally:
                                var.put('_i2', Js(3.0), '+')
            PyJsHoisted_addFace_.func_name = 'addFace'
            var.put('addFace', PyJsHoisted_addFace_)
            @Js
            def PyJsHoisted_parseLine_(line, this, arguments, var=var):
                var = Scope({'line':line, 'this':this, 'arguments':arguments}, var)
                var.registers(['groupName', 'objectName', 'position', 'materialName', 'result', 'normal', 'line', 'mtllibLine'])
                var.put('line', var.get('line').callprop('trim'))
                var.put('result', PyJsComma(Js(0.0), Js(None)))
                if (PyJsStrictEq(var.get('line').get('length'),Js(0.0)) or PyJsStrictEq(var.get('line').callprop('charAt', Js(0.0)),Js('#'))):
                    pass
                else:
                    if JsRegExp('/^o\\s/i').callprop('test', var.get('line')):
                        var.put('objectName', var.get('line').callprop('substring', Js(2.0)).callprop('trim'))
                        var.get('addNode')(var.get('objectName'))
                    else:
                        if JsRegExp('/^g\\s/i').callprop('test', var.get('line')):
                            var.put('groupName', var.get('line').callprop('substring', Js(2.0)).callprop('trim'))
                            var.get('addMesh')(var.get('groupName'))
                        else:
                            if JsRegExp('/^usemtl/i').callprop('test', var.get('line')):
                                var.put('materialName', var.get('line').callprop('substring', Js(7.0)).callprop('trim'))
                                var.get('useMaterial')(var.get('materialName'))
                            else:
                                if JsRegExp('/^mtllib/i').callprop('test', var.get('line')):
                                    var.put('mtllibLine', var.get('line').callprop('substring', Js(7.0)).callprop('trim'))
                                    var.put('mtlPaths', var.get('mtlPaths').callprop('concat', var.get('getMtlPaths')(var.get('mtllibLine'))))
                                else:
                                    if PyJsStrictNeq(var.put('result', var.get('vertexPattern').callprop('exec', var.get('line'))),var.get(u"null")):
                                        var.put('position', var.get('scratchCartesian'))
                                        var.get('position').put('x', var.get('parseFloat')(var.get('result').get('1')))
                                        var.get('position').put('y', var.get('parseFloat')(var.get('result').get('2')))
                                        var.get('position').put('z', var.get('parseFloat')(var.get('result').get('3')))
                                        if var.get('defined')(var.get('axisTransform')):
                                            var.get('Matrix4').callprop('multiplyByPoint', var.get('axisTransform'), var.get('position'), var.get('position'))
                                        var.get('globalPositions').callprop('push', var.get('position').get('x'))
                                        var.get('globalPositions').callprop('push', var.get('position').get('y'))
                                        var.get('globalPositions').callprop('push', var.get('position').get('z'))
                                    else:
                                        if PyJsStrictNeq(var.put('result', var.get('normalPattern').callprop('exec', var.get('line'))),var.get(u"null")):
                                            var.put('normal', var.get('Cartesian3').callprop('fromElements', var.get('parseFloat')(var.get('result').get('1')), var.get('parseFloat')(var.get('result').get('2')), var.get('parseFloat')(var.get('result').get('3')), var.get('scratchNormal')))
                                            if var.get('Cartesian3').callprop('equals', var.get('normal'), var.get('Cartesian3').get('ZERO')):
                                                var.get('Cartesian3').callprop('clone', var.get('Cartesian3').get('UNIT_Z'), var.get('normal'))
                                            else:
                                                var.get('Cartesian3').callprop('normalize', var.get('normal'), var.get('normal'))
                                            if var.get('defined')(var.get('axisTransform')):
                                                var.get('Matrix4').callprop('multiplyByPointAsVector', var.get('axisTransform'), var.get('normal'), var.get('normal'))
                                            var.get('globalNormals').callprop('push', var.get('normal').get('x'))
                                            var.get('globalNormals').callprop('push', var.get('normal').get('y'))
                                            var.get('globalNormals').callprop('push', var.get('normal').get('z'))
                                        else:
                                            if PyJsStrictNeq(var.put('result', var.get('uvPattern').callprop('exec', var.get('line'))),var.get(u"null")):
                                                var.get('globalUvs').callprop('push', var.get('parseFloat')(var.get('result').get('1')))
                                                var.get('globalUvs').callprop('push', (Js(1.0)-var.get('parseFloat')(var.get('result').get('2'))))
                                            else:
                                                if PyJsStrictEq(var.get('line').callprop('slice', (-Js(1.0))),Js('\\')):
                                                    var.put('lineBuffer', var.get('line').callprop('substring', Js(0.0), (var.get('line').get('length')-Js(1.0))), '+')
                                                    return var.get('undefined')
                                                var.put('lineBuffer', var.get('line'), '+')
                                                if PyJsStrictEq(var.get('lineBuffer').callprop('substring', Js(0.0), Js(2.0)),Js('f ')):
                                                    while PyJsStrictNeq(var.put('result', var.get('facePattern').callprop('exec', var.get('lineBuffer'))),var.get(u"null")):
                                                        var.get('faceVertices').callprop('push', var.get('result').get('0'))
                                                        var.get('facePositions').callprop('push', var.get('result').get('1'))
                                                        var.get('faceUvs').callprop('push', var.get('result').get('2'))
                                                        var.get('faceNormals').callprop('push', var.get('result').get('3'))
                                                    if (var.get('faceVertices').get('length')>Js(2.0)):
                                                        var.get('addFace')(var.get('faceVertices'), var.get('facePositions'), var.get('faceUvs'), var.get('faceNormals'))
                                                    var.get('faceVertices').put('length', Js(0.0))
                                                    var.get('facePositions').put('length', Js(0.0))
                                                    var.get('faceNormals').put('length', Js(0.0))
                                                    var.get('faceUvs').put('length', Js(0.0))
                                                var.put('lineBuffer', Js(''))
            PyJsHoisted_parseLine_.func_name = 'parseLine'
            var.put('parseLine', PyJsHoisted_parseLine_)
            var.put('axisTransform', var.get('getAxisTransform')(var.get('options').get('inputUpAxis'), var.get('options').get('outputUpAxis')))
            var.put('globalPositions', var.get('ArrayStorage').create(var.get('ComponentDatatype').get('FLOAT')))
            var.put('globalNormals', var.get('ArrayStorage').create(var.get('ComponentDatatype').get('FLOAT')))
            var.put('globalUvs', var.get('ArrayStorage').create(var.get('ComponentDatatype').get('FLOAT')))
            var.put('node', PyJsComma(Js(0.0), Js(None)))
            var.put('mesh', PyJsComma(Js(0.0), Js(None)))
            var.put('primitive', PyJsComma(Js(0.0), Js(None)))
            var.put('activeMaterial', PyJsComma(Js(0.0), Js(None)))
            var.put('nodes', Js([]))
            var.put('vertexCache', Js({}))
            var.put('vertexCacheLimit', Js(1000000.0))
            var.put('vertexCacheCount', Js(0.0))
            var.put('vertexCount', Js(0.0))
            var.put('mtlPaths', Js([]))
            var.put('lineBuffer', Js(''))
            var.put('faceVertices', Js([]))
            var.put('facePositions', Js([]))
            var.put('faceUvs', Js([]))
            var.put('faceNormals', Js([]))
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            var.put('scratch1', var.get('Cartesian3').create())
            var.put('scratch2', var.get('Cartesian3').create())
            var.put('scratch3', var.get('Cartesian3').create())
            var.put('scratch4', var.get('Cartesian3').create())
            var.put('scratch5', var.get('Cartesian3').create())
            var.put('scratchCenter', var.get('Cartesian3').create())
            var.put('scratchAxis1', var.get('Cartesian3').create())
            var.put('scratchAxis2', var.get('Cartesian3').create())
            var.put('scratchNormal', var.get('Cartesian3').create())
            var.put('scratchPositions', Js([var.get('Cartesian3').create(), var.get('Cartesian3').create(), var.get('Cartesian3').create(), var.get('Cartesian3').create()]))
            var.put('scratchVertexIndices', Js([]))
            var.put('scratchPoints', Js([]))
            pass
            pass
            pass
            pass
            var.get('addNode')()
            @Js
            def PyJs_anonymous_2099_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.put('globalPositions', var.get('undefined'))
                var.put('globalNormals', var.get('undefined'))
                var.put('globalUvs', var.get('undefined'))
                return var.get('finishLoading')(var.get('nodes'), var.get('mtlPaths'), var.get('objPath'), var.get('defined')(var.get('activeMaterial')), var.get('options'))
            PyJs_anonymous_2099_._set_name('anonymous')
            return var.get('readLines')(var.get('objPath'), var.get('parseLine')).callprop('then', PyJs_anonymous_2099_)
        PyJsHoisted_loadObj_.func_name = 'loadObj'
        var.put('loadObj', PyJsHoisted_loadObj_)
        @Js
        def PyJsHoisted_getMtlPaths_(mtllibLine, this, arguments, var=var):
            var = Scope({'mtllibLine':mtllibLine, 'this':this, 'arguments':arguments}, var)
            var.registers(['mtlPath', 'i', 'length', 'splits', 'mtlPaths', 'startIndex', 'mtllibLine'])
            var.put('mtlPaths', Js([]))
            var.put('splits', var.get('mtllibLine').callprop('split', Js(' ')))
            var.put('length', var.get('splits').get('length'))
            var.put('startIndex', Js(0.0))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('length')):
                try:
                    if PyJsStrictNeq(var.get('path').callprop('extname', var.get('splits').get(var.get('i'))),Js('.mtl')):
                        continue
                    var.put('mtlPath', var.get('splits').callprop('slice', var.get('startIndex'), (var.get('i')+Js(1.0))).callprop('join', Js(' ')))
                    var.get('mtlPaths').callprop('push', var.get('mtlPath'))
                    var.put('startIndex', (var.get('i')+Js(1.0)))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            return var.get('mtlPaths')
        PyJsHoisted_getMtlPaths_.func_name = 'getMtlPaths'
        var.put('getMtlPaths', PyJsHoisted_getMtlPaths_)
        @Js
        def PyJsHoisted_finishLoading_(nodes, mtlPaths, objPath, usesMaterials, options, this, arguments, var=var):
            var = Scope({'nodes':nodes, 'mtlPaths':mtlPaths, 'objPath':objPath, 'usesMaterials':usesMaterials, 'options':options, 'this':this, 'arguments':arguments}, var)
            var.registers(['usesMaterials', 'name', 'options', 'nodes', 'mtlPaths', 'objPath'])
            var.put('nodes', var.get('cleanNodes')(var.get('nodes')))
            if PyJsStrictEq(var.get('nodes').get('length'),Js(0.0)):
                PyJsTempException = JsToPyException(var.get('RuntimeError').create((var.get('objPath')+Js(' does not have any geometry data'))))
                raise PyJsTempException
            var.put('name', var.get('path').callprop('basename', var.get('objPath'), var.get('path').callprop('extname', var.get('objPath'))))
            @Js
            def PyJs_anonymous_2100_(materials, this, arguments, var=var):
                var = Scope({'materials':materials, 'this':this, 'arguments':arguments}, var)
                var.registers(['materials'])
                if ((var.get('materials').get('length')>Js(0.0)) and var.get('usesMaterials').neg()):
                    var.get('assignDefaultMaterial')(var.get('nodes'), var.get('materials'), var.get('usesMaterials'))
                var.get('assignUnnamedMaterial')(var.get('nodes'), var.get('materials'))
                return Js({'nodes':var.get('nodes'),'materials':var.get('materials'),'name':var.get('name')})
            PyJs_anonymous_2100_._set_name('anonymous')
            return var.get('loadMtls')(var.get('mtlPaths'), var.get('objPath'), var.get('options')).callprop('then', PyJs_anonymous_2100_)
        PyJsHoisted_finishLoading_.func_name = 'finishLoading'
        var.put('finishLoading', PyJsHoisted_finishLoading_)
        @Js
        def PyJsHoisted_normalizeMtlPath_(mtlPath, objDirectory, this, arguments, var=var):
            var = Scope({'mtlPath':mtlPath, 'objDirectory':objDirectory, 'this':this, 'arguments':arguments}, var)
            var.registers(['objDirectory', 'mtlPath'])
            var.put('mtlPath', var.get('mtlPath').callprop('replace', JsRegExp('/\\\\/g'), Js('/')))
            return var.get('path').callprop('normalize', var.get('path').callprop('resolve', var.get('objDirectory'), var.get('mtlPath')))
        PyJsHoisted_normalizeMtlPath_.func_name = 'normalizeMtlPath'
        var.put('normalizeMtlPath', PyJsHoisted_normalizeMtlPath_)
        @Js
        def PyJsHoisted_loadMtls_(mtlPaths, objPath, options, this, arguments, var=var):
            var = Scope({'mtlPaths':mtlPaths, 'objPath':objPath, 'options':options, 'this':this, 'arguments':arguments}, var)
            var.registers(['objDirectory', 'options', 'mtlPaths', 'materials', 'objPath'])
            var.put('objDirectory', var.get('path').callprop('dirname', var.get('objPath')))
            var.put('materials', Js([]))
            @Js
            def PyJs_anonymous_2101_(value, index, self, this, arguments, var=var):
                var = Scope({'value':value, 'index':index, 'self':self, 'this':this, 'arguments':arguments}, var)
                var.registers(['self', 'index', 'value'])
                return PyJsStrictEq(var.get('self').callprop('indexOf', var.get('value')),var.get('index'))
            PyJs_anonymous_2101_._set_name('anonymous')
            var.put('mtlPaths', var.get('mtlPaths').callprop('filter', PyJs_anonymous_2101_))
            @Js
            def PyJs_anonymous_2102_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return var.get('materials')
            PyJs_anonymous_2102_._set_name('anonymous')
            @Js
            def PyJs_anonymous_2103_(mtlPath, this, arguments, var=var):
                var = Scope({'mtlPath':mtlPath, 'this':this, 'arguments':arguments}, var)
                var.registers(['mtlPath', 'shallowPath'])
                var.put('mtlPath', var.get('normalizeMtlPath')(var.get('mtlPath'), var.get('objDirectory')))
                var.put('shallowPath', var.get('path').callprop('join', var.get('objDirectory'), var.get('path').callprop('basename', var.get('mtlPath'))))
                if (var.get('options').get('secure') and var.get('outsideDirectory')(var.get('mtlPath'), var.get('objDirectory'))):
                    var.get('options').callprop('logger', Js('The material file is outside of the obj directory and the secure flag is true. Attempting to read the material file from within the obj directory instead.'))
                    @Js
                    def PyJs_anonymous_2104_(error, this, arguments, var=var):
                        var = Scope({'error':error, 'this':this, 'arguments':arguments}, var)
                        var.registers(['error'])
                        var.get('options').callprop('logger', var.get('error').get('message'))
                        var.get('options').callprop('logger', ((Js('Could not read material file at ')+var.get('shallowPath'))+Js('. Using default material instead.')))
                    PyJs_anonymous_2104_._set_name('anonymous')
                    @Js
                    def PyJs_anonymous_2105_(materialsInMtl, this, arguments, var=var):
                        var = Scope({'materialsInMtl':materialsInMtl, 'this':this, 'arguments':arguments}, var)
                        var.registers(['materialsInMtl'])
                        var.put('materials', var.get('materials').callprop('concat', var.get('materialsInMtl')))
                    PyJs_anonymous_2105_._set_name('anonymous')
                    return var.get('loadMtl')(var.get('shallowPath'), var.get('options')).callprop('then', PyJs_anonymous_2105_).callprop('catch', PyJs_anonymous_2104_)
                @Js
                def PyJs_anonymous_2106_(error, this, arguments, var=var):
                    var = Scope({'error':error, 'this':this, 'arguments':arguments}, var)
                    var.registers(['error'])
                    var.get('options').callprop('logger', var.get('error').get('message'))
                    var.get('options').callprop('logger', ((Js('Could not read material file at ')+var.get('shallowPath'))+Js('. Using default material instead.')))
                PyJs_anonymous_2106_._set_name('anonymous')
                @Js
                def PyJs_anonymous_2107_(materialsInMtl, this, arguments, var=var):
                    var = Scope({'materialsInMtl':materialsInMtl, 'this':this, 'arguments':arguments}, var)
                    var.registers(['materialsInMtl'])
                    var.put('materials', var.get('materials').callprop('concat', var.get('materialsInMtl')))
                PyJs_anonymous_2107_._set_name('anonymous')
                @Js
                def PyJs_anonymous_2108_(error, this, arguments, var=var):
                    var = Scope({'error':error, 'this':this, 'arguments':arguments}, var)
                    var.registers(['error'])
                    var.get('options').callprop('logger', var.get('error').get('message'))
                    var.get('options').callprop('logger', ((Js('Could not read material file at ')+var.get('mtlPath'))+Js('. Attempting to read the material file from within the obj directory instead.')))
                    return var.get('loadMtl')(var.get('shallowPath'), var.get('options'))
                PyJs_anonymous_2108_._set_name('anonymous')
                return var.get('loadMtl')(var.get('mtlPath'), var.get('options')).callprop('catch', PyJs_anonymous_2108_).callprop('then', PyJs_anonymous_2107_).callprop('catch', PyJs_anonymous_2106_)
            PyJs_anonymous_2103_._set_name('anonymous')
            return var.get('Promise').callprop('map', var.get('mtlPaths'), PyJs_anonymous_2103_, Js({'concurrency':Js(10.0)})).callprop('then', PyJs_anonymous_2102_)
        PyJsHoisted_loadMtls_.func_name = 'loadMtls'
        var.put('loadMtls', PyJsHoisted_loadMtls_)
        @Js
        def PyJsHoisted_assignDefaultMaterial_(nodes, materials, this, arguments, var=var):
            var = Scope({'nodes':nodes, 'materials':materials, 'this':this, 'arguments':arguments}, var)
            var.registers(['nodesLength', 'i', 'defaultMaterial', 'primitive', 'meshes', 'meshesLength', 'nodes', 'primitivesLength', 'k', 'materials', 'primitives', 'j'])
            var.put('defaultMaterial', var.get('materials').get('0').get('name'))
            var.put('nodesLength', var.get('nodes').get('length'))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('nodesLength')):
                try:
                    var.put('meshes', var.get('nodes').get(var.get('i')).get('meshes'))
                    var.put('meshesLength', var.get('meshes').get('length'))
                    #for JS loop
                    var.put('j', Js(0.0))
                    while (var.get('j')<var.get('meshesLength')):
                        try:
                            var.put('primitives', var.get('meshes').get(var.get('j')).get('primitives'))
                            var.put('primitivesLength', var.get('primitives').get('length'))
                            #for JS loop
                            var.put('k', Js(0.0))
                            while (var.get('k')<var.get('primitivesLength')):
                                try:
                                    var.put('primitive', var.get('primitives').get(var.get('k')))
                                    var.get('primitive').put('material', var.get('defaultValue')(var.get('primitive').get('material'), var.get('defaultMaterial')))
                                finally:
                                        var.put('k',Js(var.get('k').to_number())+Js(1))
                        finally:
                                var.put('j',Js(var.get('j').to_number())+Js(1))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
        PyJsHoisted_assignDefaultMaterial_.func_name = 'assignDefaultMaterial'
        var.put('assignDefaultMaterial', PyJsHoisted_assignDefaultMaterial_)
        @Js
        def PyJsHoisted_assignUnnamedMaterial_(nodes, materials, this, arguments, var=var):
            var = Scope({'nodes':nodes, 'materials':materials, 'this':this, 'arguments':arguments}, var)
            var.registers(['nodesLength', 'i', 'unnamedMaterial', 'primitive', 'meshes', 'meshesLength', 'nodes', 'primitivesLength', 'k', 'materials', 'primitives', 'j'])
            @Js
            def PyJs_anonymous_2109_(material, this, arguments, var=var):
                var = Scope({'material':material, 'this':this, 'arguments':arguments}, var)
                var.registers(['material'])
                return PyJsStrictEq(var.get('material').get('name').get('length'),Js(0.0))
            PyJs_anonymous_2109_._set_name('anonymous')
            var.put('unnamedMaterial', var.get('materials').callprop('find', PyJs_anonymous_2109_))
            if var.get('defined')(var.get('unnamedMaterial')).neg():
                return var.get('undefined')
            var.put('nodesLength', var.get('nodes').get('length'))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('nodesLength')):
                try:
                    var.put('meshes', var.get('nodes').get(var.get('i')).get('meshes'))
                    var.put('meshesLength', var.get('meshes').get('length'))
                    #for JS loop
                    var.put('j', Js(0.0))
                    while (var.get('j')<var.get('meshesLength')):
                        try:
                            var.put('primitives', var.get('meshes').get(var.get('j')).get('primitives'))
                            var.put('primitivesLength', var.get('primitives').get('length'))
                            #for JS loop
                            var.put('k', Js(0.0))
                            while (var.get('k')<var.get('primitivesLength')):
                                try:
                                    var.put('primitive', var.get('primitives').get(var.get('k')))
                                    if var.get('defined')(var.get('primitive').get('material')).neg():
                                        var.get('primitive').put('material', var.get('unnamedMaterial').get('name'))
                                finally:
                                        var.put('k',Js(var.get('k').to_number())+Js(1))
                        finally:
                                var.put('j',Js(var.get('j').to_number())+Js(1))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
        PyJsHoisted_assignUnnamedMaterial_.func_name = 'assignUnnamedMaterial'
        var.put('assignUnnamedMaterial', PyJsHoisted_assignUnnamedMaterial_)
        @Js
        def PyJsHoisted_removeEmptyMeshes_(meshes, this, arguments, var=var):
            var = Scope({'meshes':meshes, 'this':this, 'arguments':arguments}, var)
            var.registers(['meshes'])
            @Js
            def PyJs_anonymous_2110_(mesh, this, arguments, var=var):
                var = Scope({'mesh':mesh, 'this':this, 'arguments':arguments}, var)
                var.registers(['mesh'])
                @Js
                def PyJs_anonymous_2111_(primitive, this, arguments, var=var):
                    var = Scope({'primitive':primitive, 'this':this, 'arguments':arguments}, var)
                    var.registers(['primitive'])
                    return ((var.get('primitive').get('indices').get('length')>Js(0.0)) and (var.get('primitive').get('positions').get('length')>Js(0.0)))
                PyJs_anonymous_2111_._set_name('anonymous')
                var.get('mesh').put('primitives', var.get('mesh').get('primitives').callprop('filter', PyJs_anonymous_2111_))
                return (var.get('mesh').get('primitives').get('length')>Js(0.0))
            PyJs_anonymous_2110_._set_name('anonymous')
            return var.get('meshes').callprop('filter', PyJs_anonymous_2110_)
        PyJsHoisted_removeEmptyMeshes_.func_name = 'removeEmptyMeshes'
        var.put('removeEmptyMeshes', PyJsHoisted_removeEmptyMeshes_)
        @Js
        def PyJsHoisted_meshesHaveNames_(meshes, this, arguments, var=var):
            var = Scope({'meshes':meshes, 'this':this, 'arguments':arguments}, var)
            var.registers(['meshes', 'meshesLength', 'i'])
            var.put('meshesLength', var.get('meshes').get('length'))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('meshesLength')):
                try:
                    if var.get('defined')(var.get('meshes').get(var.get('i')).get('name')):
                        return Js(True)
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            return Js(False)
        PyJsHoisted_meshesHaveNames_.func_name = 'meshesHaveNames'
        var.put('meshesHaveNames', PyJsHoisted_meshesHaveNames_)
        @Js
        def PyJsHoisted_removeEmptyNodes_(nodes, this, arguments, var=var):
            var = Scope({'nodes':nodes, 'this':this, 'arguments':arguments}, var)
            var.registers(['nodesLength', 'final', 'i', 'meshes', 'meshesLength', 'convertedNode', 'nodes', 'mesh', 'node', 'j'])
            var.put('final', Js([]))
            var.put('nodesLength', var.get('nodes').get('length'))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('nodesLength')):
                try:
                    var.put('node', var.get('nodes').get(var.get('i')))
                    var.put('meshes', var.get('removeEmptyMeshes')(var.get('node').get('meshes')))
                    if PyJsStrictEq(var.get('meshes').get('length'),Js(0.0)):
                        continue
                    var.get('node').put('meshes', var.get('meshes'))
                    if (var.get('defined')(var.get('node').get('name')).neg() and var.get('meshesHaveNames')(var.get('meshes'))):
                        var.put('meshesLength', var.get('meshes').get('length'))
                        #for JS loop
                        var.put('j', Js(0.0))
                        while (var.get('j')<var.get('meshesLength')):
                            try:
                                var.put('mesh', var.get('meshes').get(var.get('j')))
                                var.put('convertedNode', var.get('Node').create())
                                var.get('convertedNode').put('name', var.get('mesh').get('name'))
                                var.get('convertedNode').put('meshes', Js([var.get('mesh')]))
                                var.get('final').callprop('push', var.get('convertedNode'))
                            finally:
                                    var.put('j',Js(var.get('j').to_number())+Js(1))
                    else:
                        var.get('final').callprop('push', var.get('node'))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            return var.get('final')
        PyJsHoisted_removeEmptyNodes_.func_name = 'removeEmptyNodes'
        var.put('removeEmptyNodes', PyJsHoisted_removeEmptyNodes_)
        @Js
        def PyJsHoisted_setDefaultNames_(items, defaultName, usedNames, this, arguments, var=var):
            var = Scope({'items':items, 'defaultName':defaultName, 'usedNames':usedNames, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'items', 'name', 'item', 'defaultName', 'itemsLength', 'usedNames', 'occurrences'])
            var.put('itemsLength', var.get('items').get('length'))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('itemsLength')):
                try:
                    var.put('item', var.get('items').get(var.get('i')))
                    var.put('name', var.get('defaultValue')(var.get('item').get('name'), var.get('defaultName')))
                    var.put('occurrences', var.get('usedNames').get(var.get('name')))
                    if var.get('defined')(var.get('occurrences')):
                        (var.get('usedNames').put(var.get('name'),Js(var.get('usedNames').get(var.get('name')).to_number())+Js(1))-Js(1))
                        var.put('name', ((var.get('name')+Js('_'))+var.get('occurrences')))
                    else:
                        var.get('usedNames').put(var.get('name'), Js(1.0))
                    var.get('item').put('name', var.get('name'))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
        PyJsHoisted_setDefaultNames_.func_name = 'setDefaultNames'
        var.put('setDefaultNames', PyJsHoisted_setDefaultNames_)
        @Js
        def PyJsHoisted_setDefaults_(nodes, this, arguments, var=var):
            var = Scope({'nodes':nodes, 'this':this, 'arguments':arguments}, var)
            var.registers(['nodesLength', 'i', 'nodes', 'usedNames', 'node'])
            var.put('usedNames', Js({}))
            var.get('setDefaultNames')(var.get('nodes'), Js('Node'), var.get('usedNames'))
            var.put('nodesLength', var.get('nodes').get('length'))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('nodesLength')):
                try:
                    var.put('node', var.get('nodes').get(var.get('i')))
                    var.get('setDefaultNames')(var.get('node').get('meshes'), (var.get('node').get('name')+Js('-Mesh')), var.get('usedNames'))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
        PyJsHoisted_setDefaults_.func_name = 'setDefaults'
        var.put('setDefaults', PyJsHoisted_setDefaults_)
        @Js
        def PyJsHoisted_cleanNodes_(nodes, this, arguments, var=var):
            var = Scope({'nodes':nodes, 'this':this, 'arguments':arguments}, var)
            var.registers(['nodes'])
            var.put('nodes', var.get('removeEmptyNodes')(var.get('nodes')))
            var.get('setDefaults')(var.get('nodes'))
            return var.get('nodes')
        PyJsHoisted_cleanNodes_.func_name = 'cleanNodes'
        var.put('cleanNodes', PyJsHoisted_cleanNodes_)
        @Js
        def PyJsHoisted_getAxisTransform_(inputUpAxis, outputUpAxis, this, arguments, var=var):
            var = Scope({'inputUpAxis':inputUpAxis, 'outputUpAxis':outputUpAxis, 'this':this, 'arguments':arguments}, var)
            var.registers(['outputUpAxis', 'inputUpAxis'])
            if (PyJsStrictEq(var.get('inputUpAxis'),Js('X')) and PyJsStrictEq(var.get('outputUpAxis'),Js('Y'))):
                return var.get('Axis').get('X_UP_TO_Y_UP')
            else:
                if (PyJsStrictEq(var.get('inputUpAxis'),Js('X')) and PyJsStrictEq(var.get('outputUpAxis'),Js('Z'))):
                    return var.get('Axis').get('X_UP_TO_Z_UP')
                else:
                    if (PyJsStrictEq(var.get('inputUpAxis'),Js('Y')) and PyJsStrictEq(var.get('outputUpAxis'),Js('X'))):
                        return var.get('Axis').get('Y_UP_TO_X_UP')
                    else:
                        if (PyJsStrictEq(var.get('inputUpAxis'),Js('Y')) and PyJsStrictEq(var.get('outputUpAxis'),Js('Z'))):
                            return var.get('Axis').get('Y_UP_TO_Z_UP')
                        else:
                            if (PyJsStrictEq(var.get('inputUpAxis'),Js('Z')) and PyJsStrictEq(var.get('outputUpAxis'),Js('X'))):
                                return var.get('Axis').get('Z_UP_TO_X_UP')
                            else:
                                if (PyJsStrictEq(var.get('inputUpAxis'),Js('Z')) and PyJsStrictEq(var.get('outputUpAxis'),Js('Y'))):
                                    return var.get('Axis').get('Z_UP_TO_Y_UP')
        PyJsHoisted_getAxisTransform_.func_name = 'getAxisTransform'
        var.put('getAxisTransform', PyJsHoisted_getAxisTransform_)
        Js('use strict')
        var.put('Cesium', var.get('require')(Js('cesium')))
        var.put('path', var.get('require')(Js('path')))
        var.put('Promise', var.get('require')(Js('bluebird')))
        var.put('ArrayStorage', var.get('require')(Js('./ArrayStorage')))
        var.put('loadMtl', var.get('require')(Js('./loadMtl')))
        var.put('outsideDirectory', var.get('require')(Js('./outsideDirectory')))
        var.put('readLines', var.get('require')(Js('./readLines')))
        var.put('Axis', var.get('Cesium').get('Axis'))
        var.put('Cartesian3', var.get('Cesium').get('Cartesian3'))
        var.put('ComponentDatatype', var.get('Cesium').get('ComponentDatatype'))
        var.put('CoplanarPolygonGeometryLibrary', var.get('Cesium').get('CoplanarPolygonGeometryLibrary'))
        var.put('defaultValue', var.get('Cesium').get('defaultValue'))
        var.put('defined', var.get('Cesium').get('defined'))
        var.put('PolygonPipeline', var.get('Cesium').get('PolygonPipeline'))
        var.put('RuntimeError', var.get('Cesium').get('RuntimeError'))
        var.put('WindingOrder', var.get('Cesium').get('WindingOrder'))
        var.put('Matrix4', var.get('Cesium').get('Matrix4'))
        var.get('module').put('exports', var.get('loadObj'))
        pass
        pass
        pass
        var.put('vertexPattern', JsRegExp('/v( +[\\d|\\.|\\+|\\-|e|E]+)( +[\\d|\\.|\\+|\\-|e|E]+)( +[\\d|\\.|\\+|\\-|e|E]+)/'))
        var.put('normalPattern', JsRegExp('/vn( +[\\d|\\.|\\+|\\-|e|E]+)( +[\\d|\\.|\\+|\\-|e|E]+)( +[\\d|\\.|\\+|\\-|e|E]+)/'))
        var.put('uvPattern', JsRegExp('/vt( +[\\d|\\.|\\+|\\-|e|E]+)( +[\\d|\\.|\\+|\\-|e|E]+)/'))
        var.put('facePattern', JsRegExp('/(-?\\d+)\\/?(-?\\d*)\\/?(-?\\d*)/g'))
        var.put('scratchCartesian', var.get('Cartesian3').create())
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
    PyJs_anonymous_2097_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2112_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['Texture', 'hasTransparency', 'getChannels', 'module', 'path', 'exports', 'jpeg', 'Cesium', 'Promise', 'defined', 'defaultValue', 'fsExtra', 'decodeJpeg', 'decodePng', 'parsePng', 'loadTexture', 'require', 'PNG'])
        @Js
        def PyJsHoisted_loadTexture_(texturePath, options, this, arguments, var=var):
            var = Scope({'texturePath':texturePath, 'options':options, 'this':this, 'arguments':arguments}, var)
            var.registers(['options', 'texturePath'])
            var.put('options', var.get('defaultValue')(var.get('options'), Js({})))
            var.get('options').put('checkTransparency', var.get('defaultValue')(var.get('options').get('checkTransparency'), Js(False)))
            var.get('options').put('decode', var.get('defaultValue')(var.get('options').get('decode'), Js(False)))
            var.get('options').put('keepSource', var.get('defaultValue')(var.get('options').get('keepSource'), Js(False)))
            @Js
            def PyJs_anonymous_2113_(source, this, arguments, var=var):
                var = Scope({'source':source, 'this':this, 'arguments':arguments}, var)
                var.registers(['extension', 'source', 'texture', 'name', 'decodePromise'])
                var.put('name', var.get('path').callprop('basename', var.get('texturePath'), var.get('path').callprop('extname', var.get('texturePath'))))
                var.put('extension', var.get('path').callprop('extname', var.get('texturePath')).callprop('toLowerCase'))
                var.put('texture', var.get('Texture').create())
                var.get('texture').put('source', var.get('source'))
                var.get('texture').put('name', var.get('name'))
                var.get('texture').put('extension', var.get('extension'))
                var.get('texture').put('path', var.get('texturePath'))
                var.put('decodePromise', PyJsComma(Js(0.0), Js(None)))
                if PyJsStrictEq(var.get('extension'),Js('.png')):
                    var.put('decodePromise', var.get('decodePng')(var.get('texture'), var.get('options')))
                else:
                    if (PyJsStrictEq(var.get('extension'),Js('.jpg')) or PyJsStrictEq(var.get('extension'),Js('.jpeg'))):
                        var.put('decodePromise', var.get('decodeJpeg')(var.get('texture'), var.get('options')))
                if var.get('defined')(var.get('decodePromise')):
                    @Js
                    def PyJs_anonymous_2114_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return var.get('texture')
                    PyJs_anonymous_2114_._set_name('anonymous')
                    return var.get('decodePromise').callprop('then', PyJs_anonymous_2114_)
                return var.get('texture')
            PyJs_anonymous_2113_._set_name('anonymous')
            return var.get('fsExtra').callprop('readFile', var.get('texturePath')).callprop('then', PyJs_anonymous_2113_)
        PyJsHoisted_loadTexture_.func_name = 'loadTexture'
        var.put('loadTexture', PyJsHoisted_loadTexture_)
        @Js
        def PyJsHoisted_hasTransparency_(pixels, this, arguments, var=var):
            var = Scope({'pixels':pixels, 'this':this, 'arguments':arguments}, var)
            var.registers(['pixels', 'pixelsLength', 'i'])
            var.put('pixelsLength', (var.get('pixels').get('length')/Js(4.0)))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('pixelsLength')):
                try:
                    if (var.get('pixels').get(((var.get('i')*Js(4.0))+Js(3.0)))<Js(255.0)):
                        return Js(True)
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            return Js(False)
        PyJsHoisted_hasTransparency_.func_name = 'hasTransparency'
        var.put('hasTransparency', PyJsHoisted_hasTransparency_)
        @Js
        def PyJsHoisted_getChannels_(colorType, this, arguments, var=var):
            var = Scope({'colorType':colorType, 'this':this, 'arguments':arguments}, var)
            var.registers(['colorType'])
            while 1:
                SWITCHED = False
                CONDITION = (var.get('colorType'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(0.0)):
                    SWITCHED = True
                    return Js(1.0)
                if SWITCHED or PyJsStrictEq(CONDITION, Js(2.0)):
                    SWITCHED = True
                    return Js(3.0)
                if SWITCHED or PyJsStrictEq(CONDITION, Js(4.0)):
                    SWITCHED = True
                    return Js(2.0)
                if SWITCHED or PyJsStrictEq(CONDITION, Js(6.0)):
                    SWITCHED = True
                    return Js(4.0)
                if True:
                    SWITCHED = True
                    return Js(3.0)
                SWITCHED = True
                break
        PyJsHoisted_getChannels_.func_name = 'getChannels'
        var.put('getChannels', PyJsHoisted_getChannels_)
        @Js
        def PyJsHoisted_parsePng_(data, this, arguments, var=var):
            var = Scope({'data':data, 'this':this, 'arguments':arguments}, var)
            var.registers(['data'])
            @Js
            def PyJs_anonymous_2115_(resolve, reject, this, arguments, var=var):
                var = Scope({'resolve':resolve, 'reject':reject, 'this':this, 'arguments':arguments}, var)
                var.registers(['resolve', 'reject'])
                @Js
                def PyJs_anonymous_2116_(error, decodedResults, this, arguments, var=var):
                    var = Scope({'error':error, 'decodedResults':decodedResults, 'this':this, 'arguments':arguments}, var)
                    var.registers(['decodedResults', 'error'])
                    if var.get('defined')(var.get('error')):
                        var.get('reject')(var.get('error'))
                        return var.get('undefined')
                    var.get('resolve')(var.get('decodedResults'))
                PyJs_anonymous_2116_._set_name('anonymous')
                var.get('PNG').create().callprop('parse', var.get('data'), PyJs_anonymous_2116_)
            PyJs_anonymous_2115_._set_name('anonymous')
            return var.get('Promise').create(PyJs_anonymous_2115_)
        PyJsHoisted_parsePng_.func_name = 'parsePng'
        var.put('parsePng', PyJsHoisted_parsePng_)
        @Js
        def PyJsHoisted_decodePng_(texture, options, this, arguments, var=var):
            var = Scope({'texture':texture, 'options':options, 'this':this, 'arguments':arguments}, var)
            var.registers(['source', 'checkTransparency', 'colorType', 'options', 'channels', 'texture', 'decode'])
            var.put('source', var.get('texture').get('source'))
            var.put('colorType', var.get('source').get('25'))
            var.put('channels', var.get('getChannels')(var.get('colorType')))
            var.put('checkTransparency', (PyJsStrictEq(var.get('channels'),Js(4.0)) and var.get('options').get('checkTransparency')))
            var.put('decode', (var.get('options').get('decode') or var.get('checkTransparency')))
            if var.get('decode'):
                @Js
                def PyJs_anonymous_2117_(decodedResults, this, arguments, var=var):
                    var = Scope({'decodedResults':decodedResults, 'this':this, 'arguments':arguments}, var)
                    var.registers(['decodedResults'])
                    if var.get('options').get('checkTransparency'):
                        var.get('texture').put('transparent', var.get('hasTransparency')(var.get('decodedResults').get('data')))
                    if var.get('options').get('decode'):
                        var.get('texture').put('pixels', var.get('decodedResults').get('data'))
                        var.get('texture').put('width', var.get('decodedResults').get('width'))
                        var.get('texture').put('height', var.get('decodedResults').get('height'))
                        if var.get('options').get('keepSource').neg():
                            var.get('texture').put('source', var.get('undefined'))
                PyJs_anonymous_2117_._set_name('anonymous')
                return var.get('parsePng')(var.get('source')).callprop('then', PyJs_anonymous_2117_)
        PyJsHoisted_decodePng_.func_name = 'decodePng'
        var.put('decodePng', PyJsHoisted_decodePng_)
        @Js
        def PyJsHoisted_decodeJpeg_(texture, options, this, arguments, var=var):
            var = Scope({'texture':texture, 'options':options, 'this':this, 'arguments':arguments}, var)
            var.registers(['options', 'source', 'texture', 'decodedResults'])
            if var.get('options').get('decode'):
                var.put('source', var.get('texture').get('source'))
                var.put('decodedResults', var.get('jpeg').callprop('decode', var.get('source')))
                var.get('texture').put('pixels', var.get('decodedResults').get('data'))
                var.get('texture').put('width', var.get('decodedResults').get('width'))
                var.get('texture').put('height', var.get('decodedResults').get('height'))
                if var.get('options').get('keepSource').neg():
                    var.get('texture').put('source', var.get('undefined'))
        PyJsHoisted_decodeJpeg_.func_name = 'decodeJpeg'
        var.put('decodeJpeg', PyJsHoisted_decodeJpeg_)
        Js('use strict')
        var.put('Cesium', var.get('require')(Js('cesium')))
        var.put('fsExtra', var.get('require')(Js('fs-extra')))
        var.put('jpeg', var.get('require')(Js('jpeg-js')))
        var.put('path', var.get('require')(Js('path')))
        var.put('PNG', var.get('require')(Js('pngjs')).get('PNG'))
        var.put('Promise', var.get('require')(Js('bluebird')))
        var.put('Texture', var.get('require')(Js('./Texture')))
        var.put('defaultValue', var.get('Cesium').get('defaultValue'))
        var.put('defined', var.get('Cesium').get('defined'))
        var.get('module').put('exports', var.get('loadTexture'))
        pass
        pass
        pass
        pass
        pass
        pass
    PyJs_anonymous_2112_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2118_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['loadObj', 'module', 'path', 'exports', 'getDefaultWriter', 'createGltf', 'Cesium', 'DeveloperError', 'obj2gltf', 'defined', 'defaultValue', 'fsExtra', 'getDefaultLogger', 'require', 'writeGltf'])
        @Js
        def PyJsHoisted_obj2gltf_(objPath, options, this, arguments, var=var):
            var = Scope({'objPath':objPath, 'options':options, 'this':this, 'arguments':arguments}, var)
            var.registers(['options', 'defaults', 'objPath'])
            var.put('defaults', var.get('obj2gltf').get('defaults'))
            var.put('options', var.get('defaultValue')(var.get('options'), Js({})))
            var.get('options').put('binary', var.get('defaultValue')(var.get('options').get('binary'), var.get('defaults').get('binary')))
            var.get('options').put('separate', var.get('defaultValue')(var.get('options').get('separate'), var.get('defaults').get('separate')))
            var.get('options').put('separateTextures', (var.get('defaultValue')(var.get('options').get('separateTextures'), var.get('defaults').get('separateTextures')) or var.get('options').get('separate')))
            var.get('options').put('checkTransparency', var.get('defaultValue')(var.get('options').get('checkTransparency'), var.get('defaults').get('checkTransparency')))
            var.get('options').put('secure', var.get('defaultValue')(var.get('options').get('secure'), var.get('defaults').get('secure')))
            var.get('options').put('packOcclusion', var.get('defaultValue')(var.get('options').get('packOcclusion'), var.get('defaults').get('packOcclusion')))
            var.get('options').put('metallicRoughness', var.get('defaultValue')(var.get('options').get('metallicRoughness'), var.get('defaults').get('metallicRoughness')))
            var.get('options').put('specularGlossiness', var.get('defaultValue')(var.get('options').get('specularGlossiness'), var.get('defaults').get('specularGlossiness')))
            var.get('options').put('unlit', var.get('defaultValue')(var.get('options').get('unlit'), var.get('defaults').get('unlit')))
            var.get('options').put('overridingTextures', var.get('defaultValue')(var.get('options').get('overridingTextures'), var.get('defaultValue').get('EMPTY_OBJECT')))
            var.get('options').put('logger', var.get('defaultValue')(var.get('options').get('logger'), var.get('getDefaultLogger')()))
            var.get('options').put('writer', var.get('defaultValue')(var.get('options').get('writer'), var.get('getDefaultWriter')(var.get('options').get('outputDirectory'))))
            var.get('options').put('inputUpAxis', var.get('defaultValue')(var.get('options').get('inputUpAxis'), var.get('defaults').get('inputUpAxis')))
            var.get('options').put('outputUpAxis', var.get('defaultValue')(var.get('options').get('outputUpAxis'), var.get('defaults').get('outputUpAxis')))
            if var.get('defined')(var.get('objPath')).neg():
                PyJsTempException = JsToPyException(var.get('DeveloperError').create(Js('objPath is required')))
                raise PyJsTempException
            if (var.get('options').get('separateTextures') and var.get('defined')(var.get('options').get('writer')).neg()):
                PyJsTempException = JsToPyException(var.get('DeveloperError').create(Js('Either options.writer or options.outputDirectory must be defined when writing separate resources.')))
                raise PyJsTempException
            if (((var.get('options').get('metallicRoughness')+var.get('options').get('specularGlossiness'))+var.get('options').get('unlit'))>Js(1.0)):
                PyJsTempException = JsToPyException(var.get('DeveloperError').create(Js('Only one material type may be set from [metallicRoughness, specularGlossiness, unlit].')))
                raise PyJsTempException
            if (var.get('defined')(var.get('options').get('overridingTextures').get('metallicRoughnessOcclusionTexture')) and var.get('defined')(var.get('options').get('overridingTextures').get('specularGlossinessTexture'))):
                PyJsTempException = JsToPyException(var.get('DeveloperError').create(Js('metallicRoughnessOcclusionTexture and specularGlossinessTexture cannot both be defined.')))
                raise PyJsTempException
            if var.get('defined')(var.get('options').get('overridingTextures').get('metallicRoughnessOcclusionTexture')):
                var.get('options').put('metallicRoughness', Js(True))
                var.get('options').put('specularGlossiness', Js(False))
                var.get('options').put('packOcclusion', Js(True))
            if var.get('defined')(var.get('options').get('overridingTextures').get('specularGlossinessTexture')):
                var.get('options').put('metallicRoughness', Js(False))
                var.get('options').put('specularGlossiness', Js(True))
            @Js
            def PyJs_anonymous_2119_(gltf, this, arguments, var=var):
                var = Scope({'gltf':gltf, 'this':this, 'arguments':arguments}, var)
                var.registers(['gltf'])
                return var.get('writeGltf')(var.get('gltf'), var.get('options'))
            PyJs_anonymous_2119_._set_name('anonymous')
            @Js
            def PyJs_anonymous_2120_(objData, this, arguments, var=var):
                var = Scope({'objData':objData, 'this':this, 'arguments':arguments}, var)
                var.registers(['objData'])
                return var.get('createGltf')(var.get('objData'), var.get('options'))
            PyJs_anonymous_2120_._set_name('anonymous')
            return var.get('loadObj')(var.get('objPath'), var.get('options')).callprop('then', PyJs_anonymous_2120_).callprop('then', PyJs_anonymous_2119_)
        PyJsHoisted_obj2gltf_.func_name = 'obj2gltf'
        var.put('obj2gltf', PyJsHoisted_obj2gltf_)
        @Js
        def PyJsHoisted_getDefaultLogger_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_anonymous_2121_(message, this, arguments, var=var):
                var = Scope({'message':message, 'this':this, 'arguments':arguments}, var)
                var.registers(['message'])
                var.get('console').callprop('log', var.get('message'))
            PyJs_anonymous_2121_._set_name('anonymous')
            return PyJs_anonymous_2121_
        PyJsHoisted_getDefaultLogger_.func_name = 'getDefaultLogger'
        var.put('getDefaultLogger', PyJsHoisted_getDefaultLogger_)
        @Js
        def PyJsHoisted_getDefaultWriter_(outputDirectory, this, arguments, var=var):
            var = Scope({'outputDirectory':outputDirectory, 'this':this, 'arguments':arguments}, var)
            var.registers(['outputDirectory'])
            if var.get('defined')(var.get('outputDirectory')):
                @Js
                def PyJs_anonymous_2122_(file, data, this, arguments, var=var):
                    var = Scope({'file':file, 'data':data, 'this':this, 'arguments':arguments}, var)
                    var.registers(['outputFile', 'data', 'file'])
                    var.put('outputFile', var.get('path').callprop('join', var.get('outputDirectory'), var.get('file')))
                    return var.get('fsExtra').callprop('outputFile', var.get('outputFile'), var.get('data'))
                PyJs_anonymous_2122_._set_name('anonymous')
                return PyJs_anonymous_2122_
        PyJsHoisted_getDefaultWriter_.func_name = 'getDefaultWriter'
        var.put('getDefaultWriter', PyJsHoisted_getDefaultWriter_)
        Js('use strict')
        var.put('Cesium', var.get('require')(Js('cesium')))
        var.put('fsExtra', var.get('require')(Js('fs-extra')))
        var.put('path', var.get('require')(Js('path')))
        var.put('createGltf', var.get('require')(Js('./createGltf')))
        var.put('loadObj', var.get('require')(Js('./loadObj')))
        var.put('writeGltf', var.get('require')(Js('./writeGltf')))
        var.put('defaultValue', var.get('Cesium').get('defaultValue'))
        var.put('defined', var.get('Cesium').get('defined'))
        var.put('DeveloperError', var.get('Cesium').get('DeveloperError'))
        var.get('module').put('exports', var.get('obj2gltf'))
        pass
        pass
        pass
        var.get('obj2gltf').put('defaults', Js({'binary':Js(False),'separate':Js(False),'separateTextures':Js(False),'checkTransparency':Js(False),'secure':Js(False),'packOcclusion':Js(False),'metallicRoughness':Js(False),'specularGlossiness':Js(False),'unlit':Js(False),'inputUpAxis':Js('Y'),'outputUpAxis':Js('Y')}))
    PyJs_anonymous_2118_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2123_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'outsideDirectory', 'path', 'exports', 'require'])
        @Js
        def PyJsHoisted_outsideDirectory_(file, directory, this, arguments, var=var):
            var = Scope({'file':file, 'directory':directory, 'this':this, 'arguments':arguments}, var)
            var.registers(['directory', 'file'])
            return PyJsStrictEq(var.get('path').callprop('relative', var.get('directory'), var.get('file')).callprop('indexOf', Js('..')),Js(0.0))
        PyJsHoisted_outsideDirectory_.func_name = 'outsideDirectory'
        var.put('outsideDirectory', PyJsHoisted_outsideDirectory_)
        Js('use strict')
        var.put('path', var.get('require')(Js('path')))
        var.get('module').put('exports', var.get('outsideDirectory'))
        pass
    PyJs_anonymous_2123_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2124_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'Promise', 'readLines', 'fsExtra', 'require', 'readline'])
        @Js
        def PyJsHoisted_readLines_(path, callback, this, arguments, var=var):
            var = Scope({'path':path, 'callback':callback, 'this':this, 'arguments':arguments}, var)
            var.registers(['callback', 'path'])
            @Js
            def PyJs_anonymous_2125_(resolve, reject, this, arguments, var=var):
                var = Scope({'resolve':resolve, 'reject':reject, 'this':this, 'arguments':arguments}, var)
                var.registers(['lineReader', 'stream', 'resolve', 'reject', 'callbackWrapper'])
                var.put('stream', var.get('fsExtra').callprop('createReadStream', var.get('path')))
                var.get('stream').callprop('on', Js('error'), var.get('reject'))
                var.get('stream').callprop('on', Js('end'), var.get('resolve'))
                var.put('lineReader', var.get('readline').callprop('createInterface', Js({'input':var.get('stream')})))
                @Js
                def PyJs_callbackWrapper_2126_(line, this, arguments, var=var):
                    var = Scope({'line':line, 'this':this, 'arguments':arguments, 'callbackWrapper':PyJs_callbackWrapper_2126_}, var)
                    var.registers(['line'])
                    try:
                        var.get('callback')(var.get('line'))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_6572726f72_78428945 = var.own.get('error')
                        var.force_own_put('error', PyExceptionToJs(PyJsTempException))
                        try:
                            var.get('reject')(var.get('error'))
                        finally:
                            if PyJsHolder_6572726f72_78428945 is not None:
                                var.own['error'] = PyJsHolder_6572726f72_78428945
                            else:
                                del var.own['error']
                            del PyJsHolder_6572726f72_78428945
                PyJs_callbackWrapper_2126_._set_name('callbackWrapper')
                var.put('callbackWrapper', PyJs_callbackWrapper_2126_)
                var.get('lineReader').callprop('on', Js('line'), var.get('callbackWrapper'))
            PyJs_anonymous_2125_._set_name('anonymous')
            return var.get('Promise').create(PyJs_anonymous_2125_)
        PyJsHoisted_readLines_.func_name = 'readLines'
        var.put('readLines', PyJsHoisted_readLines_)
        Js('use strict')
        var.put('fsExtra', var.get('require')(Js('fs-extra')))
        var.put('Promise', var.get('require')(Js('bluebird')))
        var.put('readline', var.get('require')(Js('readline')))
        var.get('module').put('exports', var.get('readLines'))
        pass
    PyJs_anonymous_2124_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2127_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_2128_(Buffer, this, arguments, var=var):
            var = Scope({'Buffer':Buffer, 'this':this, 'arguments':arguments}, var)
            var.registers(['Buffer'])
            @Js
            def PyJs_anonymous_2129_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['RuntimeError', 'writeEmbeddedTextures', 'encodePng', 'deleteExtras', 'writeSeparateBuffers', 'Cesium', 'gltfToGlb', 'mime', 'getBufferPadded', 'Promise', 'defined', 'encodeTexture', 'writeSeparateTextures', 'writeEmbeddedBuffer', 'encodeTextures', 'removeEmpty', 'writeGltf', 'PNG'])
                @Js
                def PyJsHoisted_writeGltf_(gltf, options, this, arguments, var=var):
                    var = Scope({'gltf':gltf, 'options':options, 'this':this, 'arguments':arguments}, var)
                    var.registers(['options', 'gltf'])
                    @Js
                    def PyJs_anonymous_2130_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['separateTextures', 'promises', 'separate', 'binaryBuffer', 'binary'])
                        var.put('binary', var.get('options').get('binary'))
                        var.put('separate', var.get('options').get('separate'))
                        var.put('separateTextures', var.get('options').get('separateTextures'))
                        var.put('promises', Js([]))
                        if var.get('separateTextures'):
                            var.get('promises').callprop('push', var.get('writeSeparateTextures')(var.get('gltf'), var.get('options')))
                        else:
                            var.get('writeEmbeddedTextures')(var.get('gltf'))
                        if var.get('separate'):
                            var.get('promises').callprop('push', var.get('writeSeparateBuffers')(var.get('gltf'), var.get('options')))
                        else:
                            if var.get('binary').neg():
                                var.get('writeEmbeddedBuffer')(var.get('gltf'))
                        var.put('binaryBuffer', var.get('gltf').get('buffers').get('0').get('extras').get('_obj2gltf').get('source'))
                        @Js
                        def PyJs_anonymous_2131_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers([])
                            var.get('deleteExtras')(var.get('gltf'))
                            var.get('removeEmpty')(var.get('gltf'))
                            if var.get('binary'):
                                return var.get('gltfToGlb')(var.get('gltf'), var.get('binaryBuffer'))
                            return var.get('gltf')
                        PyJs_anonymous_2131_._set_name('anonymous')
                        return var.get('Promise').callprop('all', var.get('promises')).callprop('then', PyJs_anonymous_2131_)
                    PyJs_anonymous_2130_._set_name('anonymous')
                    return var.get('encodeTextures')(var.get('gltf')).callprop('then', PyJs_anonymous_2130_)
                PyJsHoisted_writeGltf_.func_name = 'writeGltf'
                var.put('writeGltf', PyJsHoisted_writeGltf_)
                @Js
                def PyJsHoisted_encodePng_(texture, this, arguments, var=var):
                    var = Scope({'texture':texture, 'this':this, 'arguments':arguments}, var)
                    var.registers(['png', 'rgbColorType', 'rgbaColorType', 'texture'])
                    var.put('rgbColorType', Js(2.0))
                    var.put('rgbaColorType', Js(6.0))
                    var.put('png', var.get('PNG').create(Js({'width':var.get('texture').get('width'),'height':var.get('texture').get('height'),'colorType':(var.get('rgbaColorType') if var.get('texture').get('transparent') else var.get('rgbColorType')),'inputColorType':var.get('rgbaColorType'),'inputHasAlpha':Js(True)})))
                    var.get('png').put('data', var.get('texture').get('pixels'))
                    @Js
                    def PyJs_anonymous_2132_(resolve, reject, this, arguments, var=var):
                        var = Scope({'resolve':resolve, 'reject':reject, 'this':this, 'arguments':arguments}, var)
                        var.registers(['resolve', 'reject', 'chunks', 'stream'])
                        var.put('chunks', Js([]))
                        var.put('stream', var.get('png').callprop('pack'))
                        @Js
                        def PyJs_anonymous_2133_(chunk, this, arguments, var=var):
                            var = Scope({'chunk':chunk, 'this':this, 'arguments':arguments}, var)
                            var.registers(['chunk'])
                            var.get('chunks').callprop('push', var.get('chunk'))
                        PyJs_anonymous_2133_._set_name('anonymous')
                        var.get('stream').callprop('on', Js('data'), PyJs_anonymous_2133_)
                        @Js
                        def PyJs_anonymous_2134_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers([])
                            var.get('resolve')(var.get('Buffer').callprop('concat', var.get('chunks')))
                        PyJs_anonymous_2134_._set_name('anonymous')
                        var.get('stream').callprop('on', Js('end'), PyJs_anonymous_2134_)
                        var.get('stream').callprop('on', Js('error'), var.get('reject'))
                    PyJs_anonymous_2132_._set_name('anonymous')
                    return var.get('Promise').create(PyJs_anonymous_2132_)
                PyJsHoisted_encodePng_.func_name = 'encodePng'
                var.put('encodePng', PyJsHoisted_encodePng_)
                @Js
                def PyJsHoisted_encodeTexture_(texture, this, arguments, var=var):
                    var = Scope({'texture':texture, 'this':this, 'arguments':arguments}, var)
                    var.registers(['texture'])
                    if ((var.get('defined')(var.get('texture').get('source')).neg() and var.get('defined')(var.get('texture').get('pixels'))) and PyJsStrictEq(var.get('texture').get('extension'),Js('.png'))):
                        @Js
                        def PyJs_anonymous_2135_(encoded, this, arguments, var=var):
                            var = Scope({'encoded':encoded, 'this':this, 'arguments':arguments}, var)
                            var.registers(['encoded'])
                            var.get('texture').put('source', var.get('encoded'))
                        PyJs_anonymous_2135_._set_name('anonymous')
                        return var.get('encodePng')(var.get('texture')).callprop('then', PyJs_anonymous_2135_)
                PyJsHoisted_encodeTexture_.func_name = 'encodeTexture'
                var.put('encodeTexture', PyJsHoisted_encodeTexture_)
                @Js
                def PyJsHoisted_encodeTextures_(gltf, this, arguments, var=var):
                    var = Scope({'gltf':gltf, 'this':this, 'arguments':arguments}, var)
                    var.registers(['encodePromises', 'gltf', 'i', 'images', 'length'])
                    var.put('encodePromises', Js([]))
                    var.put('images', var.get('gltf').get('images'))
                    var.put('length', var.get('images').get('length'))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('length')):
                        try:
                            var.get('encodePromises').callprop('push', var.get('encodeTexture')(var.get('images').get(var.get('i')).get('extras').get('_obj2gltf')))
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    return var.get('Promise').callprop('all', var.get('encodePromises'))
                PyJsHoisted_encodeTextures_.func_name = 'encodeTextures'
                var.put('encodeTextures', PyJsHoisted_encodeTextures_)
                @Js
                def PyJsHoisted_deleteExtras_(gltf, this, arguments, var=var):
                    var = Scope({'gltf':gltf, 'this':this, 'arguments':arguments}, var)
                    var.registers(['gltf', 'i', 'imagesLength', 'images', 'buffers', 'buffersLength', '_i3'])
                    var.put('buffers', var.get('gltf').get('buffers'))
                    var.put('buffersLength', var.get('buffers').get('length'))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('buffersLength')):
                        try:
                            var.get('buffers').get(var.get('i')).delete('extras')
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    var.put('images', var.get('gltf').get('images'))
                    var.put('imagesLength', var.get('images').get('length'))
                    #for JS loop
                    var.put('_i3', Js(0.0))
                    while (var.get('_i3')<var.get('imagesLength')):
                        try:
                            var.get('images').get(var.get('_i3')).delete('extras')
                        finally:
                                var.put('_i3',Js(var.get('_i3').to_number())+Js(1))
                PyJsHoisted_deleteExtras_.func_name = 'deleteExtras'
                var.put('deleteExtras', PyJsHoisted_deleteExtras_)
                @Js
                def PyJsHoisted_removeEmpty_(json, this, arguments, var=var):
                    var = Scope({'json':json, 'this':this, 'arguments':arguments}, var)
                    var.registers(['json'])
                    @Js
                    def PyJs_anonymous_2136_(key, this, arguments, var=var):
                        var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key'])
                        if (var.get('defined')(var.get('json').get(var.get('key'))).neg() or (var.get('Array').callprop('isArray', var.get('json').get(var.get('key'))) and PyJsStrictEq(var.get('json').get(var.get('key')).get('length'),Js(0.0)))):
                            var.get('json').delete(var.get('key'))
                        else:
                            if PyJsStrictEq(var.get('_typeof')(var.get('json').get(var.get('key'))),Js('object')):
                                var.get('removeEmpty')(var.get('json').get(var.get('key')))
                    PyJs_anonymous_2136_._set_name('anonymous')
                    var.get('Object').callprop('keys', var.get('json')).callprop('forEach', PyJs_anonymous_2136_)
                PyJsHoisted_removeEmpty_.func_name = 'removeEmpty'
                var.put('removeEmpty', PyJsHoisted_removeEmpty_)
                @Js
                def PyJsHoisted_writeSeparateBuffers_(gltf, options, this, arguments, var=var):
                    var = Scope({'gltf':gltf, 'options':options, 'this':this, 'arguments':arguments}, var)
                    var.registers(['options', 'gltf', 'buffers'])
                    var.put('buffers', var.get('gltf').get('buffers'))
                    @Js
                    def PyJs_anonymous_2137_(buffer, this, arguments, var=var):
                        var = Scope({'buffer':buffer, 'this':this, 'arguments':arguments}, var)
                        var.registers(['buffer', 'source', 'bufferUri'])
                        var.put('source', var.get('buffer').get('extras').get('_obj2gltf').get('source'))
                        var.put('bufferUri', (var.get('buffer').get('name')+Js('.bin')))
                        var.get('buffer').put('uri', var.get('bufferUri'))
                        return var.get('options').callprop('writer', var.get('bufferUri'), var.get('source'))
                    PyJs_anonymous_2137_._set_name('anonymous')
                    return var.get('Promise').callprop('map', var.get('buffers'), PyJs_anonymous_2137_, Js({'concurrency':Js(10.0)}))
                PyJsHoisted_writeSeparateBuffers_.func_name = 'writeSeparateBuffers'
                var.put('writeSeparateBuffers', PyJsHoisted_writeSeparateBuffers_)
                @Js
                def PyJsHoisted_writeSeparateTextures_(gltf, options, this, arguments, var=var):
                    var = Scope({'gltf':gltf, 'options':options, 'this':this, 'arguments':arguments}, var)
                    var.registers(['options', 'images', 'gltf'])
                    var.put('images', var.get('gltf').get('images'))
                    @Js
                    def PyJs_anonymous_2138_(image, this, arguments, var=var):
                        var = Scope({'image':image, 'this':this, 'arguments':arguments}, var)
                        var.registers(['imageUri', 'image', 'texture'])
                        var.put('texture', var.get('image').get('extras').get('_obj2gltf'))
                        var.put('imageUri', (var.get('image').get('name')+var.get('texture').get('extension')))
                        var.get('image').put('uri', var.get('imageUri'))
                        return var.get('options').callprop('writer', var.get('imageUri'), var.get('texture').get('source'))
                    PyJs_anonymous_2138_._set_name('anonymous')
                    return var.get('Promise').callprop('map', var.get('images'), PyJs_anonymous_2138_, Js({'concurrency':Js(10.0)}))
                PyJsHoisted_writeSeparateTextures_.func_name = 'writeSeparateTextures'
                var.put('writeSeparateTextures', PyJsHoisted_writeSeparateTextures_)
                @Js
                def PyJsHoisted_writeEmbeddedBuffer_(gltf, this, arguments, var=var):
                    var = Scope({'gltf':gltf, 'this':this, 'arguments':arguments}, var)
                    var.registers(['buffer', 'gltf', 'source'])
                    var.put('buffer', var.get('gltf').get('buffers').get('0'))
                    var.put('source', var.get('buffer').get('extras').get('_obj2gltf').get('source'))
                    if (var.get('source').get('length')>Js(201326580.0)):
                        PyJsTempException = JsToPyException(var.get('RuntimeError').create(Js('Buffer is too large to embed in the glTF. Use the --separate flag instead.')))
                        raise PyJsTempException
                    var.get('buffer').put('uri', (Js('data:application/octet-stream;base64,')+var.get('source').callprop('toString', Js('base64'))))
                PyJsHoisted_writeEmbeddedBuffer_.func_name = 'writeEmbeddedBuffer'
                var.put('writeEmbeddedBuffer', PyJsHoisted_writeEmbeddedBuffer_)
                @Js
                def PyJsHoisted_writeEmbeddedTextures_(gltf, this, arguments, var=var):
                    var = Scope({'gltf':gltf, 'this':this, 'arguments':arguments}, var)
                    var.registers(['textureSource', 'byteOffset', 'gltf', 'i', 'imagesLength', 'source', 'buffer', 'images', 'sources', 'textureByteLength', 'bufferSource', 'image', 'texture', 'bufferExtras'])
                    var.put('buffer', var.get('gltf').get('buffers').get('0'))
                    var.put('bufferExtras', var.get('buffer').get('extras').get('_obj2gltf'))
                    var.put('bufferSource', var.get('bufferExtras').get('source'))
                    var.put('images', var.get('gltf').get('images'))
                    var.put('imagesLength', var.get('images').get('length'))
                    var.put('sources', Js([var.get('bufferSource')]))
                    var.put('byteOffset', var.get('bufferSource').get('length'))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('imagesLength')):
                        try:
                            var.put('image', var.get('images').get(var.get('i')))
                            var.put('texture', var.get('image').get('extras').get('_obj2gltf'))
                            var.put('textureSource', var.get('texture').get('source'))
                            var.put('textureByteLength', var.get('textureSource').get('length'))
                            var.get('image').put('mimeType', var.get('mime').callprop('getType', var.get('texture').get('extension')))
                            var.get('image').put('bufferView', var.get('gltf').get('bufferViews').get('length'))
                            var.get('gltf').get('bufferViews').callprop('push', Js({'buffer':Js(0.0),'byteOffset':var.get('byteOffset'),'byteLength':var.get('textureByteLength')}))
                            var.put('byteOffset', var.get('textureByteLength'), '+')
                            var.get('sources').callprop('push', var.get('textureSource'))
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    var.put('source', var.get('getBufferPadded')(var.get('Buffer').callprop('concat', var.get('sources'))))
                    var.get('bufferExtras').put('source', var.get('source'))
                    var.get('buffer').put('byteLength', var.get('source').get('length'))
                PyJsHoisted_writeEmbeddedTextures_.func_name = 'writeEmbeddedTextures'
                var.put('writeEmbeddedTextures', PyJsHoisted_writeEmbeddedTextures_)
                Js('use strict')
                var.put('Cesium', var.get('require')(Js('cesium')))
                var.put('mime', var.get('require')(Js('mime')))
                var.put('PNG', var.get('require')(Js('pngjs')).get('PNG'))
                var.put('Promise', var.get('require')(Js('bluebird')))
                var.put('getBufferPadded', var.get('require')(Js('./getBufferPadded')))
                var.put('gltfToGlb', var.get('require')(Js('./gltfToGlb')))
                var.put('defined', var.get('Cesium').get('defined'))
                var.put('RuntimeError', var.get('Cesium').get('RuntimeError'))
                var.get('module').put('exports', var.get('writeGltf'))
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
            PyJs_anonymous_2129_._set_name('anonymous')
            PyJs_anonymous_2129_.callprop('call', var.get(u"this"))
        PyJs_anonymous_2128_._set_name('anonymous')
        PyJs_anonymous_2128_.callprop('call', var.get(u"this"), var.get('require')(Js('buffer')).get('Buffer'))
    PyJs_anonymous_2127_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2139_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['toObject', 'module', 'exports', 'getOwnPropertySymbols', 'shouldUseNative', 'propIsEnumerable', 'hasOwnProperty', 'require'])
        @Js
        def PyJsHoisted_toObject_(val, this, arguments, var=var):
            var = Scope({'val':val, 'this':this, 'arguments':arguments}, var)
            var.registers(['val'])
            if (PyJsStrictEq(var.get('val'),var.get(u"null")) or PyJsStrictEq(var.get('val'),var.get('undefined'))):
                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Object.assign cannot be called with null or undefined')))
                raise PyJsTempException
            return var.get('Object')(var.get('val'))
        PyJsHoisted_toObject_.func_name = 'toObject'
        var.put('toObject', PyJsHoisted_toObject_)
        @Js
        def PyJsHoisted_shouldUseNative_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['order2', 'test2', 'i', 'test3', 'test1'])
            try:
                if var.get('Object').get('assign').neg():
                    return Js(False)
                var.put('test1', var.get('String').create(Js('abc')))
                var.get('test1').put('5', Js('de'))
                if PyJsStrictEq(var.get('Object').callprop('getOwnPropertyNames', var.get('test1')).get('0'),Js('5')):
                    return Js(False)
                var.put('test2', Js({}))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<Js(10.0)):
                    try:
                        var.get('test2').put((Js('_')+var.get('String').callprop('fromCharCode', var.get('i'))), var.get('i'))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                @Js
                def PyJs_anonymous_2140_(n, this, arguments, var=var):
                    var = Scope({'n':n, 'this':this, 'arguments':arguments}, var)
                    var.registers(['n'])
                    return var.get('test2').get(var.get('n'))
                PyJs_anonymous_2140_._set_name('anonymous')
                var.put('order2', var.get('Object').callprop('getOwnPropertyNames', var.get('test2')).callprop('map', PyJs_anonymous_2140_))
                if PyJsStrictNeq(var.get('order2').callprop('join', Js('')),Js('0123456789')):
                    return Js(False)
                var.put('test3', Js({}))
                @Js
                def PyJs_anonymous_2141_(letter, this, arguments, var=var):
                    var = Scope({'letter':letter, 'this':this, 'arguments':arguments}, var)
                    var.registers(['letter'])
                    var.get('test3').put(var.get('letter'), var.get('letter'))
                PyJs_anonymous_2141_._set_name('anonymous')
                Js('abcdefghijklmnopqrst').callprop('split', Js('')).callprop('forEach', PyJs_anonymous_2141_)
                if PyJsStrictNeq(var.get('Object').callprop('keys', var.get('Object').callprop('assign', Js({}), var.get('test3'))).callprop('join', Js('')),Js('abcdefghijklmnopqrst')):
                    return Js(False)
                return Js(True)
            except PyJsException as PyJsTempException:
                PyJsHolder_657272_82416727 = var.own.get('err')
                var.force_own_put('err', PyExceptionToJs(PyJsTempException))
                try:
                    return Js(False)
                finally:
                    if PyJsHolder_657272_82416727 is not None:
                        var.own['err'] = PyJsHolder_657272_82416727
                    else:
                        del var.own['err']
                    del PyJsHolder_657272_82416727
        PyJsHoisted_shouldUseNative_.func_name = 'shouldUseNative'
        var.put('shouldUseNative', PyJsHoisted_shouldUseNative_)
        Js('use strict')
        var.put('getOwnPropertySymbols', var.get('Object').get('getOwnPropertySymbols'))
        var.put('hasOwnProperty', var.get('Object').get('prototype').get('hasOwnProperty'))
        var.put('propIsEnumerable', var.get('Object').get('prototype').get('propertyIsEnumerable'))
        pass
        pass
        @Js
        def PyJs_anonymous_2142_(target, source, this, arguments, var=var):
            var = Scope({'target':target, 'source':source, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 's', 'source', 'key', 'target', 'from', 'to', 'symbols'])
            pass
            var.put('to', var.get('toObject')(var.get('target')))
            pass
            #for JS loop
            var.put('s', Js(1.0))
            while (var.get('s')<var.get('arguments').get('length')):
                try:
                    var.put('from', var.get('Object')(var.get('arguments').get(var.get('s'))))
                    for PyJsTemp in var.get('from'):
                        var.put('key', PyJsTemp)
                        if var.get('hasOwnProperty').callprop('call', var.get('from'), var.get('key')):
                            var.get('to').put(var.get('key'), var.get('from').get(var.get('key')))
                    if var.get('getOwnPropertySymbols'):
                        var.put('symbols', var.get('getOwnPropertySymbols')(var.get('from')))
                        #for JS loop
                        var.put('i', Js(0.0))
                        while (var.get('i')<var.get('symbols').get('length')):
                            try:
                                if var.get('propIsEnumerable').callprop('call', var.get('from'), var.get('symbols').get(var.get('i'))):
                                    var.get('to').put(var.get('symbols').get(var.get('i')), var.get('from').get(var.get('symbols').get(var.get('i'))))
                            finally:
                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                finally:
                        (var.put('s',Js(var.get('s').to_number())+Js(1))-Js(1))
            return var.get('to')
        PyJs_anonymous_2142_._set_name('anonymous')
        var.get('module').put('exports', (var.get('Object').get('assign') if var.get('shouldUseNative')() else PyJs_anonymous_2142_))
    PyJs_anonymous_2139_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2143_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_2144_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return Js('LE')
        PyJs_anonymous_2144_._set_name('anonymous')
        var.get('exports').put('endianness', PyJs_anonymous_2144_)
        @Js
        def PyJs_anonymous_2145_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            if PyJsStrictNeq(var.get('location',throw=False).typeof(),Js('undefined')):
                return var.get('location').get('hostname')
            else:
                return Js('')
        PyJs_anonymous_2145_._set_name('anonymous')
        var.get('exports').put('hostname', PyJs_anonymous_2145_)
        @Js
        def PyJs_anonymous_2146_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return Js([])
        PyJs_anonymous_2146_._set_name('anonymous')
        var.get('exports').put('loadavg', PyJs_anonymous_2146_)
        @Js
        def PyJs_anonymous_2147_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return Js(0.0)
        PyJs_anonymous_2147_._set_name('anonymous')
        var.get('exports').put('uptime', PyJs_anonymous_2147_)
        @Js
        def PyJs_anonymous_2148_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get('Number').get('MAX_VALUE')
        PyJs_anonymous_2148_._set_name('anonymous')
        var.get('exports').put('freemem', PyJs_anonymous_2148_)
        @Js
        def PyJs_anonymous_2149_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get('Number').get('MAX_VALUE')
        PyJs_anonymous_2149_._set_name('anonymous')
        var.get('exports').put('totalmem', PyJs_anonymous_2149_)
        @Js
        def PyJs_anonymous_2150_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return Js([])
        PyJs_anonymous_2150_._set_name('anonymous')
        var.get('exports').put('cpus', PyJs_anonymous_2150_)
        @Js
        def PyJs_anonymous_2151_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return Js('Browser')
        PyJs_anonymous_2151_._set_name('anonymous')
        var.get('exports').put('type', PyJs_anonymous_2151_)
        @Js
        def PyJs_anonymous_2152_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            if PyJsStrictNeq(var.get('navigator',throw=False).typeof(),Js('undefined')):
                return var.get('navigator').get('appVersion')
            return Js('')
        PyJs_anonymous_2152_._set_name('anonymous')
        var.get('exports').put('release', PyJs_anonymous_2152_)
        @Js
        def PyJs_anonymous_2153_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return Js({})
        PyJs_anonymous_2153_._set_name('anonymous')
        var.get('exports').put('networkInterfaces', var.get('exports').put('getNetworkInterfaces', PyJs_anonymous_2153_))
        @Js
        def PyJs_anonymous_2154_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return Js('javascript')
        PyJs_anonymous_2154_._set_name('anonymous')
        var.get('exports').put('arch', PyJs_anonymous_2154_)
        @Js
        def PyJs_anonymous_2155_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return Js('browser')
        PyJs_anonymous_2155_._set_name('anonymous')
        var.get('exports').put('platform', PyJs_anonymous_2155_)
        @Js
        def PyJs_anonymous_2156_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return Js('/tmp')
        PyJs_anonymous_2156_._set_name('anonymous')
        var.get('exports').put('tmpdir', var.get('exports').put('tmpDir', PyJs_anonymous_2156_))
        var.get('exports').put('EOL', Js('\n'))
        @Js
        def PyJs_anonymous_2157_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return Js('/')
        PyJs_anonymous_2157_._set_name('anonymous')
        var.get('exports').put('homedir', PyJs_anonymous_2157_)
    PyJs_anonymous_2143_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2158_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['_has', 'module', 'exports', 'fnTyped', 'fnUntyped', 'require', 'TYPED_OK'])
        @Js
        def PyJsHoisted__has_(obj, key, this, arguments, var=var):
            var = Scope({'obj':obj, 'key':key, 'this':this, 'arguments':arguments}, var)
            var.registers(['key', 'obj'])
            return var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('key'))
        PyJsHoisted__has_.func_name = '_has'
        var.put('_has', PyJsHoisted__has_)
        Js('use strict')
        var.put('TYPED_OK', ((PyJsStrictNeq(var.get('Uint8Array',throw=False).typeof(),Js('undefined')) and PyJsStrictNeq(var.get('Uint16Array',throw=False).typeof(),Js('undefined'))) and PyJsStrictNeq(var.get('Int32Array',throw=False).typeof(),Js('undefined'))))
        pass
        @Js
        def PyJs_anonymous_2159_(obj, this, arguments, var=var):
            var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
            var.registers(['sources', 'p', 'source', 'obj'])
            var.put('sources', var.get('Array').get('prototype').get('slice').callprop('call', var.get('arguments'), Js(1.0)))
            while var.get('sources').get('length'):
                var.put('source', var.get('sources').callprop('shift'))
                if var.get('source').neg():
                    continue
                if PyJsStrictNeq((Js('undefined') if PyJsStrictEq(var.get('source',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('source'))),Js('object')):
                    PyJsTempException = JsToPyException(var.get('TypeError').create((var.get('source')+Js('must be non-object'))))
                    raise PyJsTempException
                for PyJsTemp in var.get('source'):
                    var.put('p', PyJsTemp)
                    if var.get('_has')(var.get('source'), var.get('p')):
                        var.get('obj').put(var.get('p'), var.get('source').get(var.get('p')))
            return var.get('obj')
        PyJs_anonymous_2159_._set_name('anonymous')
        var.get('exports').put('assign', PyJs_anonymous_2159_)
        @Js
        def PyJs_anonymous_2160_(buf, size, this, arguments, var=var):
            var = Scope({'buf':buf, 'size':size, 'this':this, 'arguments':arguments}, var)
            var.registers(['buf', 'size'])
            if PyJsStrictEq(var.get('buf').get('length'),var.get('size')):
                return var.get('buf')
            if var.get('buf').get('subarray'):
                return var.get('buf').callprop('subarray', Js(0.0), var.get('size'))
            var.get('buf').put('length', var.get('size'))
            return var.get('buf')
        PyJs_anonymous_2160_._set_name('anonymous')
        var.get('exports').put('shrinkBuf', PyJs_anonymous_2160_)
        @Js
        def PyJs_arraySet_2161_(dest, src, src_offs, len, dest_offs, this, arguments, var=var):
            var = Scope({'dest':dest, 'src':src, 'src_offs':src_offs, 'len':len, 'dest_offs':dest_offs, 'this':this, 'arguments':arguments, 'arraySet':PyJs_arraySet_2161_}, var)
            var.registers(['len', 'i', 'src_offs', 'dest_offs', 'dest', 'src'])
            if (var.get('src').get('subarray') and var.get('dest').get('subarray')):
                var.get('dest').callprop('set', var.get('src').callprop('subarray', var.get('src_offs'), (var.get('src_offs')+var.get('len'))), var.get('dest_offs'))
                return var.get('undefined')
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('len')):
                try:
                    var.get('dest').put((var.get('dest_offs')+var.get('i')), var.get('src').get((var.get('src_offs')+var.get('i'))))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        PyJs_arraySet_2161_._set_name('arraySet')
        @Js
        def PyJs_flattenChunks_2162_(chunks, this, arguments, var=var):
            var = Scope({'chunks':chunks, 'this':this, 'arguments':arguments, 'flattenChunks':PyJs_flattenChunks_2162_}, var)
            var.registers(['pos', 'len', 'i', 'chunks', 'l', 'chunk', 'result'])
            pass
            var.put('len', Js(0.0))
            #for JS loop
            PyJsComma(var.put('i', Js(0.0)),var.put('l', var.get('chunks').get('length')))
            while (var.get('i')<var.get('l')):
                try:
                    var.put('len', var.get('chunks').get(var.get('i')).get('length'), '+')
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            var.put('result', var.get('Uint8Array').create(var.get('len')))
            var.put('pos', Js(0.0))
            #for JS loop
            PyJsComma(var.put('i', Js(0.0)),var.put('l', var.get('chunks').get('length')))
            while (var.get('i')<var.get('l')):
                try:
                    var.put('chunk', var.get('chunks').get(var.get('i')))
                    var.get('result').callprop('set', var.get('chunk'), var.get('pos'))
                    var.put('pos', var.get('chunk').get('length'), '+')
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('result')
        PyJs_flattenChunks_2162_._set_name('flattenChunks')
        var.put('fnTyped', Js({'arraySet':PyJs_arraySet_2161_,'flattenChunks':PyJs_flattenChunks_2162_}))
        @Js
        def PyJs_arraySet_2163_(dest, src, src_offs, len, dest_offs, this, arguments, var=var):
            var = Scope({'dest':dest, 'src':src, 'src_offs':src_offs, 'len':len, 'dest_offs':dest_offs, 'this':this, 'arguments':arguments, 'arraySet':PyJs_arraySet_2163_}, var)
            var.registers(['len', 'i', 'src_offs', 'dest_offs', 'dest', 'src'])
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('len')):
                try:
                    var.get('dest').put((var.get('dest_offs')+var.get('i')), var.get('src').get((var.get('src_offs')+var.get('i'))))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        PyJs_arraySet_2163_._set_name('arraySet')
        @Js
        def PyJs_flattenChunks_2164_(chunks, this, arguments, var=var):
            var = Scope({'chunks':chunks, 'this':this, 'arguments':arguments, 'flattenChunks':PyJs_flattenChunks_2164_}, var)
            var.registers(['chunks'])
            return Js([]).get('concat').callprop('apply', Js([]), var.get('chunks'))
        PyJs_flattenChunks_2164_._set_name('flattenChunks')
        var.put('fnUntyped', Js({'arraySet':PyJs_arraySet_2163_,'flattenChunks':PyJs_flattenChunks_2164_}))
        @Js
        def PyJs_anonymous_2165_(on, this, arguments, var=var):
            var = Scope({'on':on, 'this':this, 'arguments':arguments}, var)
            var.registers(['on'])
            if var.get('on'):
                var.get('exports').put('Buf8', var.get('Uint8Array'))
                var.get('exports').put('Buf16', var.get('Uint16Array'))
                var.get('exports').put('Buf32', var.get('Int32Array'))
                var.get('exports').callprop('assign', var.get('exports'), var.get('fnTyped'))
            else:
                var.get('exports').put('Buf8', var.get('Array'))
                var.get('exports').put('Buf16', var.get('Array'))
                var.get('exports').put('Buf32', var.get('Array'))
                var.get('exports').callprop('assign', var.get('exports'), var.get('fnUntyped'))
        PyJs_anonymous_2165_._set_name('anonymous')
        var.get('exports').put('setTyped', PyJs_anonymous_2165_)
        var.get('exports').callprop('setTyped', var.get('TYPED_OK'))
    PyJs_anonymous_2158_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2166_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'adler32', 'exports'])
        @Js
        def PyJsHoisted_adler32_(adler, buf, len, pos, this, arguments, var=var):
            var = Scope({'adler':adler, 'buf':buf, 'len':len, 'pos':pos, 'this':this, 'arguments':arguments}, var)
            var.registers(['pos', 'n', 'len', 'buf', 's1', 's2', 'adler'])
            var.put('s1', ((var.get('adler')&Js(65535))|Js(0.0)))
            var.put('s2', ((PyJsBshift(var.get('adler'),Js(16.0))&Js(65535))|Js(0.0)))
            var.put('n', Js(0.0))
            while PyJsStrictNeq(var.get('len'),Js(0.0)):
                var.put('n', (Js(2000.0) if (var.get('len')>Js(2000.0)) else var.get('len')))
                var.put('len', var.get('n'), '-')
                while 1:
                    var.put('s1', ((var.get('s1')+var.get('buf').get((var.put('pos',Js(var.get('pos').to_number())+Js(1))-Js(1))))|Js(0.0)))
                    var.put('s2', ((var.get('s2')+var.get('s1'))|Js(0.0)))
                    if not var.put('n',Js(var.get('n').to_number())-Js(1)):
                        break
                var.put('s1', Js(65521.0), '%')
                var.put('s2', Js(65521.0), '%')
            return ((var.get('s1')|(var.get('s2')<<Js(16.0)))|Js(0.0))
        PyJsHoisted_adler32_.func_name = 'adler32'
        var.put('adler32', PyJsHoisted_adler32_)
        Js('use strict')
        pass
        var.get('module').put('exports', var.get('adler32'))
    PyJs_anonymous_2166_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2167_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        Js('use strict')
        def PyJs_LONG_2168_(var=var):
            return var.get('module').put('exports', Js({'Z_NO_FLUSH':Js(0.0),'Z_PARTIAL_FLUSH':Js(1.0),'Z_SYNC_FLUSH':Js(2.0),'Z_FULL_FLUSH':Js(3.0),'Z_FINISH':Js(4.0),'Z_BLOCK':Js(5.0),'Z_TREES':Js(6.0),'Z_OK':Js(0.0),'Z_STREAM_END':Js(1.0),'Z_NEED_DICT':Js(2.0),'Z_ERRNO':(-Js(1.0)),'Z_STREAM_ERROR':(-Js(2.0)),'Z_DATA_ERROR':(-Js(3.0)),'Z_BUF_ERROR':(-Js(5.0)),'Z_NO_COMPRESSION':Js(0.0),'Z_BEST_SPEED':Js(1.0),'Z_BEST_COMPRESSION':Js(9.0),'Z_DEFAULT_COMPRESSION':(-Js(1.0)),'Z_FILTERED':Js(1.0),'Z_HUFFMAN_ONLY':Js(2.0),'Z_RLE':Js(3.0),'Z_FIXED':Js(4.0),'Z_DEFAULT_STRATEGY':Js(0.0),'Z_BINARY':Js(0.0),'Z_TEXT':Js(1.0),'Z_UNKNOWN':Js(2.0),'Z_DEFLATED':Js(8.0)}))
        PyJs_LONG_2168_()
    PyJs_anonymous_2167_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2169_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'crcTable', 'makeTable', 'exports', 'crc32', 'require'])
        @Js
        def PyJsHoisted_makeTable_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['c', 'n', 'k', 'table'])
            var.put('table', Js([]))
            #for JS loop
            var.put('n', Js(0.0))
            while (var.get('n')<Js(256.0)):
                try:
                    var.put('c', var.get('n'))
                    #for JS loop
                    var.put('k', Js(0.0))
                    while (var.get('k')<Js(8.0)):
                        try:
                            var.put('c', ((Js(3988292384)^PyJsBshift(var.get('c'),Js(1.0))) if (var.get('c')&Js(1.0)) else PyJsBshift(var.get('c'),Js(1.0))))
                        finally:
                                (var.put('k',Js(var.get('k').to_number())+Js(1))-Js(1))
                    var.get('table').put(var.get('n'), var.get('c'))
                finally:
                        (var.put('n',Js(var.get('n').to_number())+Js(1))-Js(1))
            return var.get('table')
        PyJsHoisted_makeTable_.func_name = 'makeTable'
        var.put('makeTable', PyJsHoisted_makeTable_)
        @Js
        def PyJsHoisted_crc32_(crc, buf, len, pos, this, arguments, var=var):
            var = Scope({'crc':crc, 'buf':buf, 'len':len, 'pos':pos, 'this':this, 'arguments':arguments}, var)
            var.registers(['pos', 'len', 'buf', 'i', 'end', 'crc', 't'])
            var.put('t', var.get('crcTable'))
            var.put('end', (var.get('pos')+var.get('len')))
            var.put('crc', (-Js(1.0)), '^')
            #for JS loop
            var.put('i', var.get('pos'))
            while (var.get('i')<var.get('end')):
                try:
                    var.put('crc', (PyJsBshift(var.get('crc'),Js(8.0))^var.get('t').get(((var.get('crc')^var.get('buf').get(var.get('i')))&Js(255)))))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return (var.get('crc')^(-Js(1.0)))
        PyJsHoisted_crc32_.func_name = 'crc32'
        var.put('crc32', PyJsHoisted_crc32_)
        Js('use strict')
        pass
        var.put('crcTable', var.get('makeTable')())
        pass
        var.get('module').put('exports', var.get('crc32'))
    PyJs_anonymous_2169_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2170_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['DEF_MEM_LEVEL', 'MAX_WBITS', 'MIN_LOOKAHEAD', 'BS_FINISH_DONE', 'Z_NO_FLUSH', 'Z_HUFFMAN_ONLY', 'Z_BLOCK', 'Z_RLE', 'Z_FILTERED', 'HCRC_STATE', 'msg', 'FINISH_STATE', 'BS_BLOCK_DONE', 'flush_block_only', 'trees', 'deflate_rle', 'LENGTH_CODES', 'OS_CODE', 'L_CODES', 'deflateResetKeep', 'deflate_fast', 'deflateInit2', 'utils', 'DeflateState', 'Z_DEFAULT_COMPRESSION', 'put_byte', 'BS_FINISH_STARTED', 'Z_FULL_FLUSH', 'EXTRA_STATE', 'deflateSetDictionary', 'adler32', 'Z_BUF_ERROR', 'BUSY_STATE', 'deflate_slow', 'configuration_table', 'Config', 'Z_PARTIAL_FLUSH', 'deflateInit', 'Z_OK', 'deflate', 'Z_STREAM_ERROR', 'Z_DEFAULT_STRATEGY', 'deflateSetHeader', 'PRESET_DICT', 'read_buf', 'MAX_MEM_LEVEL', 'INIT_STATE', 'crc32', 'HEAP_SIZE', 'Z_DEFLATED', 'COMMENT_STATE', 'deflate_huff', 'BS_NEED_MORE', 'zero', 'lm_init', 'Z_STREAM_END', 'LITERALS', 'exports', 'err', 'rank', 'NAME_STATE', 'longest_match', 'Z_UNKNOWN', 'deflate_stored', 'MIN_MATCH', 'flush_pending', 'MAX_MATCH', 'fill_window', 'D_CODES', 'Z_FINISH', 'MAX_BITS', 'deflateReset', 'require', 'deflateEnd', 'module', 'Z_DATA_ERROR', 'Z_FIXED', 'BL_CODES', 'putShortMSB'])
        @Js
        def PyJsHoisted_err_(strm, errorCode, this, arguments, var=var):
            var = Scope({'strm':strm, 'errorCode':errorCode, 'this':this, 'arguments':arguments}, var)
            var.registers(['errorCode', 'strm'])
            var.get('strm').put('msg', var.get('msg').get(var.get('errorCode')))
            return var.get('errorCode')
        PyJsHoisted_err_.func_name = 'err'
        var.put('err', PyJsHoisted_err_)
        @Js
        def PyJsHoisted_rank_(f, this, arguments, var=var):
            var = Scope({'f':f, 'this':this, 'arguments':arguments}, var)
            var.registers(['f'])
            return ((var.get('f')<<Js(1.0))-(Js(9.0) if (var.get('f')>Js(4.0)) else Js(0.0)))
        PyJsHoisted_rank_.func_name = 'rank'
        var.put('rank', PyJsHoisted_rank_)
        @Js
        def PyJsHoisted_zero_(buf, this, arguments, var=var):
            var = Scope({'buf':buf, 'this':this, 'arguments':arguments}, var)
            var.registers(['len', 'buf'])
            var.put('len', var.get('buf').get('length'))
            while (var.put('len',Js(var.get('len').to_number())-Js(1))>=Js(0.0)):
                var.get('buf').put(var.get('len'), Js(0.0))
        PyJsHoisted_zero_.func_name = 'zero'
        var.put('zero', PyJsHoisted_zero_)
        @Js
        def PyJsHoisted_flush_pending_(strm, this, arguments, var=var):
            var = Scope({'strm':strm, 'this':this, 'arguments':arguments}, var)
            var.registers(['len', 's', 'strm'])
            var.put('s', var.get('strm').get('state'))
            var.put('len', var.get('s').get('pending'))
            if (var.get('len')>var.get('strm').get('avail_out')):
                var.put('len', var.get('strm').get('avail_out'))
            if PyJsStrictEq(var.get('len'),Js(0.0)):
                return var.get('undefined')
            var.get('utils').callprop('arraySet', var.get('strm').get('output'), var.get('s').get('pending_buf'), var.get('s').get('pending_out'), var.get('len'), var.get('strm').get('next_out'))
            var.get('strm').put('next_out', var.get('len'), '+')
            var.get('s').put('pending_out', var.get('len'), '+')
            var.get('strm').put('total_out', var.get('len'), '+')
            var.get('strm').put('avail_out', var.get('len'), '-')
            var.get('s').put('pending', var.get('len'), '-')
            if PyJsStrictEq(var.get('s').get('pending'),Js(0.0)):
                var.get('s').put('pending_out', Js(0.0))
        PyJsHoisted_flush_pending_.func_name = 'flush_pending'
        var.put('flush_pending', PyJsHoisted_flush_pending_)
        @Js
        def PyJsHoisted_flush_block_only_(s, last, this, arguments, var=var):
            var = Scope({'s':s, 'last':last, 'this':this, 'arguments':arguments}, var)
            var.registers(['last', 's'])
            var.get('trees').callprop('_tr_flush_block', var.get('s'), (var.get('s').get('block_start') if (var.get('s').get('block_start')>=Js(0.0)) else (-Js(1.0))), (var.get('s').get('strstart')-var.get('s').get('block_start')), var.get('last'))
            var.get('s').put('block_start', var.get('s').get('strstart'))
            var.get('flush_pending')(var.get('s').get('strm'))
        PyJsHoisted_flush_block_only_.func_name = 'flush_block_only'
        var.put('flush_block_only', PyJsHoisted_flush_block_only_)
        @Js
        def PyJsHoisted_put_byte_(s, b, this, arguments, var=var):
            var = Scope({'s':s, 'b':b, 'this':this, 'arguments':arguments}, var)
            var.registers(['b', 's'])
            var.get('s').get('pending_buf').put((var.get('s').put('pending',Js(var.get('s').get('pending').to_number())+Js(1))-Js(1)), var.get('b'))
        PyJsHoisted_put_byte_.func_name = 'put_byte'
        var.put('put_byte', PyJsHoisted_put_byte_)
        @Js
        def PyJsHoisted_putShortMSB_(s, b, this, arguments, var=var):
            var = Scope({'s':s, 'b':b, 'this':this, 'arguments':arguments}, var)
            var.registers(['b', 's'])
            var.get('s').get('pending_buf').put((var.get('s').put('pending',Js(var.get('s').get('pending').to_number())+Js(1))-Js(1)), (PyJsBshift(var.get('b'),Js(8.0))&Js(255)))
            var.get('s').get('pending_buf').put((var.get('s').put('pending',Js(var.get('s').get('pending').to_number())+Js(1))-Js(1)), (var.get('b')&Js(255)))
        PyJsHoisted_putShortMSB_.func_name = 'putShortMSB'
        var.put('putShortMSB', PyJsHoisted_putShortMSB_)
        @Js
        def PyJsHoisted_read_buf_(strm, buf, start, size, this, arguments, var=var):
            var = Scope({'strm':strm, 'buf':buf, 'start':start, 'size':size, 'this':this, 'arguments':arguments}, var)
            var.registers(['len', 'buf', 'size', 'start', 'strm'])
            var.put('len', var.get('strm').get('avail_in'))
            if (var.get('len')>var.get('size')):
                var.put('len', var.get('size'))
            if PyJsStrictEq(var.get('len'),Js(0.0)):
                return Js(0.0)
            var.get('strm').put('avail_in', var.get('len'), '-')
            var.get('utils').callprop('arraySet', var.get('buf'), var.get('strm').get('input'), var.get('strm').get('next_in'), var.get('len'), var.get('start'))
            if PyJsStrictEq(var.get('strm').get('state').get('wrap'),Js(1.0)):
                var.get('strm').put('adler', var.get('adler32')(var.get('strm').get('adler'), var.get('buf'), var.get('len'), var.get('start')))
            else:
                if PyJsStrictEq(var.get('strm').get('state').get('wrap'),Js(2.0)):
                    var.get('strm').put('adler', var.get('crc32')(var.get('strm').get('adler'), var.get('buf'), var.get('len'), var.get('start')))
            var.get('strm').put('next_in', var.get('len'), '+')
            var.get('strm').put('total_in', var.get('len'), '+')
            return var.get('len')
        PyJsHoisted_read_buf_.func_name = 'read_buf'
        var.put('read_buf', PyJsHoisted_read_buf_)
        @Js
        def PyJsHoisted_longest_match_(s, cur_match, this, arguments, var=var):
            var = Scope({'s':s, 'cur_match':cur_match, 'this':this, 'arguments':arguments}, var)
            var.registers(['prev', 'strend', 'len', 's', 'match', 'scan_end', 'scan', 'wmask', 'nice_match', '_win', 'limit', 'best_len', 'scan_end1', 'chain_length', 'cur_match'])
            var.put('chain_length', var.get('s').get('max_chain_length'))
            var.put('scan', var.get('s').get('strstart'))
            pass
            pass
            var.put('best_len', var.get('s').get('prev_length'))
            var.put('nice_match', var.get('s').get('nice_match'))
            var.put('limit', ((var.get('s').get('strstart')-(var.get('s').get('w_size')-var.get('MIN_LOOKAHEAD'))) if (var.get('s').get('strstart')>(var.get('s').get('w_size')-var.get('MIN_LOOKAHEAD'))) else Js(0.0)))
            var.put('_win', var.get('s').get('window'))
            var.put('wmask', var.get('s').get('w_mask'))
            var.put('prev', var.get('s').get('prev'))
            var.put('strend', (var.get('s').get('strstart')+var.get('MAX_MATCH')))
            var.put('scan_end1', var.get('_win').get(((var.get('scan')+var.get('best_len'))-Js(1.0))))
            var.put('scan_end', var.get('_win').get((var.get('scan')+var.get('best_len'))))
            if (var.get('s').get('prev_length')>=var.get('s').get('good_match')):
                var.put('chain_length', Js(2.0), '>>')
            if (var.get('nice_match')>var.get('s').get('lookahead')):
                var.put('nice_match', var.get('s').get('lookahead'))
            while 1:
                var.put('match', var.get('cur_match'))
                def PyJs_LONG_2171_(var=var):
                    return (((PyJsStrictNeq(var.get('_win').get((var.get('match')+var.get('best_len'))),var.get('scan_end')) or PyJsStrictNeq(var.get('_win').get(((var.get('match')+var.get('best_len'))-Js(1.0))),var.get('scan_end1'))) or PyJsStrictNeq(var.get('_win').get(var.get('match')),var.get('_win').get(var.get('scan')))) or PyJsStrictNeq(var.get('_win').get(var.put('match',Js(var.get('match').to_number())+Js(1))),var.get('_win').get((var.get('scan')+Js(1.0)))))
                if PyJs_LONG_2171_():
                    continue
                var.put('scan', Js(2.0), '+')
                (var.put('match',Js(var.get('match').to_number())+Js(1))-Js(1))
                while 1:
                    pass
                    def PyJs_LONG_2174_(var=var):
                        def PyJs_LONG_2173_(var=var):
                            def PyJs_LONG_2172_(var=var):
                                return ((PyJsStrictEq(var.get('_win').get(var.put('scan',Js(var.get('scan').to_number())+Js(1))),var.get('_win').get(var.put('match',Js(var.get('match').to_number())+Js(1)))) and PyJsStrictEq(var.get('_win').get(var.put('scan',Js(var.get('scan').to_number())+Js(1))),var.get('_win').get(var.put('match',Js(var.get('match').to_number())+Js(1))))) and PyJsStrictEq(var.get('_win').get(var.put('scan',Js(var.get('scan').to_number())+Js(1))),var.get('_win').get(var.put('match',Js(var.get('match').to_number())+Js(1)))))
                            return (((PyJs_LONG_2172_() and PyJsStrictEq(var.get('_win').get(var.put('scan',Js(var.get('scan').to_number())+Js(1))),var.get('_win').get(var.put('match',Js(var.get('match').to_number())+Js(1))))) and PyJsStrictEq(var.get('_win').get(var.put('scan',Js(var.get('scan').to_number())+Js(1))),var.get('_win').get(var.put('match',Js(var.get('match').to_number())+Js(1))))) and PyJsStrictEq(var.get('_win').get(var.put('scan',Js(var.get('scan').to_number())+Js(1))),var.get('_win').get(var.put('match',Js(var.get('match').to_number())+Js(1)))))
                        return (((PyJs_LONG_2173_() and PyJsStrictEq(var.get('_win').get(var.put('scan',Js(var.get('scan').to_number())+Js(1))),var.get('_win').get(var.put('match',Js(var.get('match').to_number())+Js(1))))) and PyJsStrictEq(var.get('_win').get(var.put('scan',Js(var.get('scan').to_number())+Js(1))),var.get('_win').get(var.put('match',Js(var.get('match').to_number())+Js(1))))) and (var.get('scan')<var.get('strend')))
                    if not PyJs_LONG_2174_():
                        break
                var.put('len', (var.get('MAX_MATCH')-(var.get('strend')-var.get('scan'))))
                var.put('scan', (var.get('strend')-var.get('MAX_MATCH')))
                if (var.get('len')>var.get('best_len')):
                    var.get('s').put('match_start', var.get('cur_match'))
                    var.put('best_len', var.get('len'))
                    if (var.get('len')>=var.get('nice_match')):
                        break
                    var.put('scan_end1', var.get('_win').get(((var.get('scan')+var.get('best_len'))-Js(1.0))))
                    var.put('scan_end', var.get('_win').get((var.get('scan')+var.get('best_len'))))
                if not ((var.put('cur_match', var.get('prev').get((var.get('cur_match')&var.get('wmask'))))>var.get('limit')) and PyJsStrictNeq(var.put('chain_length',Js(var.get('chain_length').to_number())-Js(1)),Js(0.0))):
                    break
            if (var.get('best_len')<=var.get('s').get('lookahead')):
                return var.get('best_len')
            return var.get('s').get('lookahead')
        PyJsHoisted_longest_match_.func_name = 'longest_match'
        var.put('longest_match', PyJsHoisted_longest_match_)
        @Js
        def PyJsHoisted_fill_window_(s, this, arguments, var=var):
            var = Scope({'s':s, 'this':this, 'arguments':arguments}, var)
            var.registers(['_w_size', 'n', 'more', 'p', 's', 'str', 'm'])
            var.put('_w_size', var.get('s').get('w_size'))
            pass
            while 1:
                var.put('more', ((var.get('s').get('window_size')-var.get('s').get('lookahead'))-var.get('s').get('strstart')))
                if (var.get('s').get('strstart')>=(var.get('_w_size')+(var.get('_w_size')-var.get('MIN_LOOKAHEAD')))):
                    var.get('utils').callprop('arraySet', var.get('s').get('window'), var.get('s').get('window'), var.get('_w_size'), var.get('_w_size'), Js(0.0))
                    var.get('s').put('match_start', var.get('_w_size'), '-')
                    var.get('s').put('strstart', var.get('_w_size'), '-')
                    var.get('s').put('block_start', var.get('_w_size'), '-')
                    var.put('n', var.get('s').get('hash_size'))
                    var.put('p', var.get('n'))
                    while 1:
                        var.put('m', var.get('s').get('head').get(var.put('p',Js(var.get('p').to_number())-Js(1))))
                        var.get('s').get('head').put(var.get('p'), ((var.get('m')-var.get('_w_size')) if (var.get('m')>=var.get('_w_size')) else Js(0.0)))
                        if not var.put('n',Js(var.get('n').to_number())-Js(1)):
                            break
                    var.put('n', var.get('_w_size'))
                    var.put('p', var.get('n'))
                    while 1:
                        var.put('m', var.get('s').get('prev').get(var.put('p',Js(var.get('p').to_number())-Js(1))))
                        var.get('s').get('prev').put(var.get('p'), ((var.get('m')-var.get('_w_size')) if (var.get('m')>=var.get('_w_size')) else Js(0.0)))
                        if not var.put('n',Js(var.get('n').to_number())-Js(1)):
                            break
                    var.put('more', var.get('_w_size'), '+')
                if PyJsStrictEq(var.get('s').get('strm').get('avail_in'),Js(0.0)):
                    break
                var.put('n', var.get('read_buf')(var.get('s').get('strm'), var.get('s').get('window'), (var.get('s').get('strstart')+var.get('s').get('lookahead')), var.get('more')))
                var.get('s').put('lookahead', var.get('n'), '+')
                if ((var.get('s').get('lookahead')+var.get('s').get('insert'))>=var.get('MIN_MATCH')):
                    var.put('str', (var.get('s').get('strstart')-var.get('s').get('insert')))
                    var.get('s').put('ins_h', var.get('s').get('window').get(var.get('str')))
                    var.get('s').put('ins_h', (((var.get('s').get('ins_h')<<var.get('s').get('hash_shift'))^var.get('s').get('window').get((var.get('str')+Js(1.0))))&var.get('s').get('hash_mask')))
                    while var.get('s').get('insert'):
                        var.get('s').put('ins_h', (((var.get('s').get('ins_h')<<var.get('s').get('hash_shift'))^var.get('s').get('window').get(((var.get('str')+var.get('MIN_MATCH'))-Js(1.0))))&var.get('s').get('hash_mask')))
                        var.get('s').get('prev').put((var.get('str')&var.get('s').get('w_mask')), var.get('s').get('head').get(var.get('s').get('ins_h')))
                        var.get('s').get('head').put(var.get('s').get('ins_h'), var.get('str'))
                        (var.put('str',Js(var.get('str').to_number())+Js(1))-Js(1))
                        (var.get('s').put('insert',Js(var.get('s').get('insert').to_number())-Js(1))+Js(1))
                        if ((var.get('s').get('lookahead')+var.get('s').get('insert'))<var.get('MIN_MATCH')):
                            break
                if not ((var.get('s').get('lookahead')<var.get('MIN_LOOKAHEAD')) and PyJsStrictNeq(var.get('s').get('strm').get('avail_in'),Js(0.0))):
                    break
        PyJsHoisted_fill_window_.func_name = 'fill_window'
        var.put('fill_window', PyJsHoisted_fill_window_)
        @Js
        def PyJsHoisted_deflate_stored_(s, flush, this, arguments, var=var):
            var = Scope({'s':s, 'flush':flush, 'this':this, 'arguments':arguments}, var)
            var.registers(['flush', 'max_start', 's', 'max_block_size'])
            var.put('max_block_size', Js(65535))
            if (var.get('max_block_size')>(var.get('s').get('pending_buf_size')-Js(5.0))):
                var.put('max_block_size', (var.get('s').get('pending_buf_size')-Js(5.0)))
            #for JS loop
            
            while 1:
                if (var.get('s').get('lookahead')<=Js(1.0)):
                    var.get('fill_window')(var.get('s'))
                    if (PyJsStrictEq(var.get('s').get('lookahead'),Js(0.0)) and PyJsStrictEq(var.get('flush'),var.get('Z_NO_FLUSH'))):
                        return var.get('BS_NEED_MORE')
                    if PyJsStrictEq(var.get('s').get('lookahead'),Js(0.0)):
                        break
                var.get('s').put('strstart', var.get('s').get('lookahead'), '+')
                var.get('s').put('lookahead', Js(0.0))
                var.put('max_start', (var.get('s').get('block_start')+var.get('max_block_size')))
                if (PyJsStrictEq(var.get('s').get('strstart'),Js(0.0)) or (var.get('s').get('strstart')>=var.get('max_start'))):
                    var.get('s').put('lookahead', (var.get('s').get('strstart')-var.get('max_start')))
                    var.get('s').put('strstart', var.get('max_start'))
                    var.get('flush_block_only')(var.get('s'), Js(False))
                    if PyJsStrictEq(var.get('s').get('strm').get('avail_out'),Js(0.0)):
                        return var.get('BS_NEED_MORE')
                if ((var.get('s').get('strstart')-var.get('s').get('block_start'))>=(var.get('s').get('w_size')-var.get('MIN_LOOKAHEAD'))):
                    var.get('flush_block_only')(var.get('s'), Js(False))
                    if PyJsStrictEq(var.get('s').get('strm').get('avail_out'),Js(0.0)):
                        return var.get('BS_NEED_MORE')
            
            var.get('s').put('insert', Js(0.0))
            if PyJsStrictEq(var.get('flush'),var.get('Z_FINISH')):
                var.get('flush_block_only')(var.get('s'), Js(True))
                if PyJsStrictEq(var.get('s').get('strm').get('avail_out'),Js(0.0)):
                    return var.get('BS_FINISH_STARTED')
                return var.get('BS_FINISH_DONE')
            if (var.get('s').get('strstart')>var.get('s').get('block_start')):
                var.get('flush_block_only')(var.get('s'), Js(False))
                if PyJsStrictEq(var.get('s').get('strm').get('avail_out'),Js(0.0)):
                    return var.get('BS_NEED_MORE')
            return var.get('BS_NEED_MORE')
        PyJsHoisted_deflate_stored_.func_name = 'deflate_stored'
        var.put('deflate_stored', PyJsHoisted_deflate_stored_)
        @Js
        def PyJsHoisted_deflate_fast_(s, flush, this, arguments, var=var):
            var = Scope({'s':s, 'flush':flush, 'this':this, 'arguments':arguments}, var)
            var.registers(['flush', 's', 'hash_head', 'bflush'])
            pass
            pass
            #for JS loop
            
            while 1:
                if (var.get('s').get('lookahead')<var.get('MIN_LOOKAHEAD')):
                    var.get('fill_window')(var.get('s'))
                    if ((var.get('s').get('lookahead')<var.get('MIN_LOOKAHEAD')) and PyJsStrictEq(var.get('flush'),var.get('Z_NO_FLUSH'))):
                        return var.get('BS_NEED_MORE')
                    if PyJsStrictEq(var.get('s').get('lookahead'),Js(0.0)):
                        break
                var.put('hash_head', Js(0.0))
                if (var.get('s').get('lookahead')>=var.get('MIN_MATCH')):
                    var.get('s').put('ins_h', (((var.get('s').get('ins_h')<<var.get('s').get('hash_shift'))^var.get('s').get('window').get(((var.get('s').get('strstart')+var.get('MIN_MATCH'))-Js(1.0))))&var.get('s').get('hash_mask')))
                    var.put('hash_head', var.get('s').get('prev').put((var.get('s').get('strstart')&var.get('s').get('w_mask')), var.get('s').get('head').get(var.get('s').get('ins_h'))))
                    var.get('s').get('head').put(var.get('s').get('ins_h'), var.get('s').get('strstart'))
                if (PyJsStrictNeq(var.get('hash_head'),Js(0.0)) and ((var.get('s').get('strstart')-var.get('hash_head'))<=(var.get('s').get('w_size')-var.get('MIN_LOOKAHEAD')))):
                    var.get('s').put('match_length', var.get('longest_match')(var.get('s'), var.get('hash_head')))
                if (var.get('s').get('match_length')>=var.get('MIN_MATCH')):
                    var.put('bflush', var.get('trees').callprop('_tr_tally', var.get('s'), (var.get('s').get('strstart')-var.get('s').get('match_start')), (var.get('s').get('match_length')-var.get('MIN_MATCH'))))
                    var.get('s').put('lookahead', var.get('s').get('match_length'), '-')
                    if ((var.get('s').get('match_length')<=var.get('s').get('max_lazy_match')) and (var.get('s').get('lookahead')>=var.get('MIN_MATCH'))):
                        (var.get('s').put('match_length',Js(var.get('s').get('match_length').to_number())-Js(1))+Js(1))
                        while 1:
                            (var.get('s').put('strstart',Js(var.get('s').get('strstart').to_number())+Js(1))-Js(1))
                            var.get('s').put('ins_h', (((var.get('s').get('ins_h')<<var.get('s').get('hash_shift'))^var.get('s').get('window').get(((var.get('s').get('strstart')+var.get('MIN_MATCH'))-Js(1.0))))&var.get('s').get('hash_mask')))
                            var.put('hash_head', var.get('s').get('prev').put((var.get('s').get('strstart')&var.get('s').get('w_mask')), var.get('s').get('head').get(var.get('s').get('ins_h'))))
                            var.get('s').get('head').put(var.get('s').get('ins_h'), var.get('s').get('strstart'))
                            if not PyJsStrictNeq(var.get('s').put('match_length',Js(var.get('s').get('match_length').to_number())-Js(1)),Js(0.0)):
                                break
                        (var.get('s').put('strstart',Js(var.get('s').get('strstart').to_number())+Js(1))-Js(1))
                    else:
                        var.get('s').put('strstart', var.get('s').get('match_length'), '+')
                        var.get('s').put('match_length', Js(0.0))
                        var.get('s').put('ins_h', var.get('s').get('window').get(var.get('s').get('strstart')))
                        var.get('s').put('ins_h', (((var.get('s').get('ins_h')<<var.get('s').get('hash_shift'))^var.get('s').get('window').get((var.get('s').get('strstart')+Js(1.0))))&var.get('s').get('hash_mask')))
                else:
                    var.put('bflush', var.get('trees').callprop('_tr_tally', var.get('s'), Js(0.0), var.get('s').get('window').get(var.get('s').get('strstart'))))
                    (var.get('s').put('lookahead',Js(var.get('s').get('lookahead').to_number())-Js(1))+Js(1))
                    (var.get('s').put('strstart',Js(var.get('s').get('strstart').to_number())+Js(1))-Js(1))
                if var.get('bflush'):
                    var.get('flush_block_only')(var.get('s'), Js(False))
                    if PyJsStrictEq(var.get('s').get('strm').get('avail_out'),Js(0.0)):
                        return var.get('BS_NEED_MORE')
            
            var.get('s').put('insert', (var.get('s').get('strstart') if (var.get('s').get('strstart')<(var.get('MIN_MATCH')-Js(1.0))) else (var.get('MIN_MATCH')-Js(1.0))))
            if PyJsStrictEq(var.get('flush'),var.get('Z_FINISH')):
                var.get('flush_block_only')(var.get('s'), Js(True))
                if PyJsStrictEq(var.get('s').get('strm').get('avail_out'),Js(0.0)):
                    return var.get('BS_FINISH_STARTED')
                return var.get('BS_FINISH_DONE')
            if var.get('s').get('last_lit'):
                var.get('flush_block_only')(var.get('s'), Js(False))
                if PyJsStrictEq(var.get('s').get('strm').get('avail_out'),Js(0.0)):
                    return var.get('BS_NEED_MORE')
            return var.get('BS_BLOCK_DONE')
        PyJsHoisted_deflate_fast_.func_name = 'deflate_fast'
        var.put('deflate_fast', PyJsHoisted_deflate_fast_)
        @Js
        def PyJsHoisted_deflate_slow_(s, flush, this, arguments, var=var):
            var = Scope({'s':s, 'flush':flush, 'this':this, 'arguments':arguments}, var)
            var.registers(['s', 'bflush', 'max_insert', 'hash_head', 'flush'])
            pass
            pass
            pass
            #for JS loop
            
            while 1:
                if (var.get('s').get('lookahead')<var.get('MIN_LOOKAHEAD')):
                    var.get('fill_window')(var.get('s'))
                    if ((var.get('s').get('lookahead')<var.get('MIN_LOOKAHEAD')) and PyJsStrictEq(var.get('flush'),var.get('Z_NO_FLUSH'))):
                        return var.get('BS_NEED_MORE')
                    if PyJsStrictEq(var.get('s').get('lookahead'),Js(0.0)):
                        break
                var.put('hash_head', Js(0.0))
                if (var.get('s').get('lookahead')>=var.get('MIN_MATCH')):
                    var.get('s').put('ins_h', (((var.get('s').get('ins_h')<<var.get('s').get('hash_shift'))^var.get('s').get('window').get(((var.get('s').get('strstart')+var.get('MIN_MATCH'))-Js(1.0))))&var.get('s').get('hash_mask')))
                    var.put('hash_head', var.get('s').get('prev').put((var.get('s').get('strstart')&var.get('s').get('w_mask')), var.get('s').get('head').get(var.get('s').get('ins_h'))))
                    var.get('s').get('head').put(var.get('s').get('ins_h'), var.get('s').get('strstart'))
                var.get('s').put('prev_length', var.get('s').get('match_length'))
                var.get('s').put('prev_match', var.get('s').get('match_start'))
                var.get('s').put('match_length', (var.get('MIN_MATCH')-Js(1.0)))
                if ((PyJsStrictNeq(var.get('hash_head'),Js(0.0)) and (var.get('s').get('prev_length')<var.get('s').get('max_lazy_match'))) and ((var.get('s').get('strstart')-var.get('hash_head'))<=(var.get('s').get('w_size')-var.get('MIN_LOOKAHEAD')))):
                    var.get('s').put('match_length', var.get('longest_match')(var.get('s'), var.get('hash_head')))
                    if ((var.get('s').get('match_length')<=Js(5.0)) and (PyJsStrictEq(var.get('s').get('strategy'),var.get('Z_FILTERED')) or (PyJsStrictEq(var.get('s').get('match_length'),var.get('MIN_MATCH')) and ((var.get('s').get('strstart')-var.get('s').get('match_start'))>Js(4096.0))))):
                        var.get('s').put('match_length', (var.get('MIN_MATCH')-Js(1.0)))
                if ((var.get('s').get('prev_length')>=var.get('MIN_MATCH')) and (var.get('s').get('match_length')<=var.get('s').get('prev_length'))):
                    var.put('max_insert', ((var.get('s').get('strstart')+var.get('s').get('lookahead'))-var.get('MIN_MATCH')))
                    var.put('bflush', var.get('trees').callprop('_tr_tally', var.get('s'), ((var.get('s').get('strstart')-Js(1.0))-var.get('s').get('prev_match')), (var.get('s').get('prev_length')-var.get('MIN_MATCH'))))
                    var.get('s').put('lookahead', (var.get('s').get('prev_length')-Js(1.0)), '-')
                    var.get('s').put('prev_length', Js(2.0), '-')
                    while 1:
                        if (var.get('s').put('strstart',Js(var.get('s').get('strstart').to_number())+Js(1))<=var.get('max_insert')):
                            var.get('s').put('ins_h', (((var.get('s').get('ins_h')<<var.get('s').get('hash_shift'))^var.get('s').get('window').get(((var.get('s').get('strstart')+var.get('MIN_MATCH'))-Js(1.0))))&var.get('s').get('hash_mask')))
                            var.put('hash_head', var.get('s').get('prev').put((var.get('s').get('strstart')&var.get('s').get('w_mask')), var.get('s').get('head').get(var.get('s').get('ins_h'))))
                            var.get('s').get('head').put(var.get('s').get('ins_h'), var.get('s').get('strstart'))
                        if not PyJsStrictNeq(var.get('s').put('prev_length',Js(var.get('s').get('prev_length').to_number())-Js(1)),Js(0.0)):
                            break
                    var.get('s').put('match_available', Js(0.0))
                    var.get('s').put('match_length', (var.get('MIN_MATCH')-Js(1.0)))
                    (var.get('s').put('strstart',Js(var.get('s').get('strstart').to_number())+Js(1))-Js(1))
                    if var.get('bflush'):
                        var.get('flush_block_only')(var.get('s'), Js(False))
                        if PyJsStrictEq(var.get('s').get('strm').get('avail_out'),Js(0.0)):
                            return var.get('BS_NEED_MORE')
                else:
                    if var.get('s').get('match_available'):
                        var.put('bflush', var.get('trees').callprop('_tr_tally', var.get('s'), Js(0.0), var.get('s').get('window').get((var.get('s').get('strstart')-Js(1.0)))))
                        if var.get('bflush'):
                            var.get('flush_block_only')(var.get('s'), Js(False))
                        (var.get('s').put('strstart',Js(var.get('s').get('strstart').to_number())+Js(1))-Js(1))
                        (var.get('s').put('lookahead',Js(var.get('s').get('lookahead').to_number())-Js(1))+Js(1))
                        if PyJsStrictEq(var.get('s').get('strm').get('avail_out'),Js(0.0)):
                            return var.get('BS_NEED_MORE')
                    else:
                        var.get('s').put('match_available', Js(1.0))
                        (var.get('s').put('strstart',Js(var.get('s').get('strstart').to_number())+Js(1))-Js(1))
                        (var.get('s').put('lookahead',Js(var.get('s').get('lookahead').to_number())-Js(1))+Js(1))
            
            if var.get('s').get('match_available'):
                var.put('bflush', var.get('trees').callprop('_tr_tally', var.get('s'), Js(0.0), var.get('s').get('window').get((var.get('s').get('strstart')-Js(1.0)))))
                var.get('s').put('match_available', Js(0.0))
            var.get('s').put('insert', (var.get('s').get('strstart') if (var.get('s').get('strstart')<(var.get('MIN_MATCH')-Js(1.0))) else (var.get('MIN_MATCH')-Js(1.0))))
            if PyJsStrictEq(var.get('flush'),var.get('Z_FINISH')):
                var.get('flush_block_only')(var.get('s'), Js(True))
                if PyJsStrictEq(var.get('s').get('strm').get('avail_out'),Js(0.0)):
                    return var.get('BS_FINISH_STARTED')
                return var.get('BS_FINISH_DONE')
            if var.get('s').get('last_lit'):
                var.get('flush_block_only')(var.get('s'), Js(False))
                if PyJsStrictEq(var.get('s').get('strm').get('avail_out'),Js(0.0)):
                    return var.get('BS_NEED_MORE')
            return var.get('BS_BLOCK_DONE')
        PyJsHoisted_deflate_slow_.func_name = 'deflate_slow'
        var.put('deflate_slow', PyJsHoisted_deflate_slow_)
        @Js
        def PyJsHoisted_deflate_rle_(s, flush, this, arguments, var=var):
            var = Scope({'s':s, 'flush':flush, 'this':this, 'arguments':arguments}, var)
            var.registers(['prev', 's', 'scan', 'bflush', '_win', 'flush', 'strend'])
            pass
            pass
            pass
            var.put('_win', var.get('s').get('window'))
            #for JS loop
            
            while 1:
                if (var.get('s').get('lookahead')<=var.get('MAX_MATCH')):
                    var.get('fill_window')(var.get('s'))
                    if ((var.get('s').get('lookahead')<=var.get('MAX_MATCH')) and PyJsStrictEq(var.get('flush'),var.get('Z_NO_FLUSH'))):
                        return var.get('BS_NEED_MORE')
                    if PyJsStrictEq(var.get('s').get('lookahead'),Js(0.0)):
                        break
                var.get('s').put('match_length', Js(0.0))
                if ((var.get('s').get('lookahead')>=var.get('MIN_MATCH')) and (var.get('s').get('strstart')>Js(0.0))):
                    var.put('scan', (var.get('s').get('strstart')-Js(1.0)))
                    var.put('prev', var.get('_win').get(var.get('scan')))
                    if ((PyJsStrictEq(var.get('prev'),var.get('_win').get(var.put('scan',Js(var.get('scan').to_number())+Js(1)))) and PyJsStrictEq(var.get('prev'),var.get('_win').get(var.put('scan',Js(var.get('scan').to_number())+Js(1))))) and PyJsStrictEq(var.get('prev'),var.get('_win').get(var.put('scan',Js(var.get('scan').to_number())+Js(1))))):
                        var.put('strend', (var.get('s').get('strstart')+var.get('MAX_MATCH')))
                        while 1:
                            pass
                            def PyJs_LONG_2176_(var=var):
                                def PyJs_LONG_2175_(var=var):
                                    return (((PyJsStrictEq(var.get('prev'),var.get('_win').get(var.put('scan',Js(var.get('scan').to_number())+Js(1)))) and PyJsStrictEq(var.get('prev'),var.get('_win').get(var.put('scan',Js(var.get('scan').to_number())+Js(1))))) and PyJsStrictEq(var.get('prev'),var.get('_win').get(var.put('scan',Js(var.get('scan').to_number())+Js(1))))) and PyJsStrictEq(var.get('prev'),var.get('_win').get(var.put('scan',Js(var.get('scan').to_number())+Js(1)))))
                                return ((((PyJs_LONG_2175_() and PyJsStrictEq(var.get('prev'),var.get('_win').get(var.put('scan',Js(var.get('scan').to_number())+Js(1))))) and PyJsStrictEq(var.get('prev'),var.get('_win').get(var.put('scan',Js(var.get('scan').to_number())+Js(1))))) and PyJsStrictEq(var.get('prev'),var.get('_win').get(var.put('scan',Js(var.get('scan').to_number())+Js(1))))) and PyJsStrictEq(var.get('prev'),var.get('_win').get(var.put('scan',Js(var.get('scan').to_number())+Js(1)))))
                            if not (PyJs_LONG_2176_() and (var.get('scan')<var.get('strend'))):
                                break
                        var.get('s').put('match_length', (var.get('MAX_MATCH')-(var.get('strend')-var.get('scan'))))
                        if (var.get('s').get('match_length')>var.get('s').get('lookahead')):
                            var.get('s').put('match_length', var.get('s').get('lookahead'))
                if (var.get('s').get('match_length')>=var.get('MIN_MATCH')):
                    var.put('bflush', var.get('trees').callprop('_tr_tally', var.get('s'), Js(1.0), (var.get('s').get('match_length')-var.get('MIN_MATCH'))))
                    var.get('s').put('lookahead', var.get('s').get('match_length'), '-')
                    var.get('s').put('strstart', var.get('s').get('match_length'), '+')
                    var.get('s').put('match_length', Js(0.0))
                else:
                    var.put('bflush', var.get('trees').callprop('_tr_tally', var.get('s'), Js(0.0), var.get('s').get('window').get(var.get('s').get('strstart'))))
                    (var.get('s').put('lookahead',Js(var.get('s').get('lookahead').to_number())-Js(1))+Js(1))
                    (var.get('s').put('strstart',Js(var.get('s').get('strstart').to_number())+Js(1))-Js(1))
                if var.get('bflush'):
                    var.get('flush_block_only')(var.get('s'), Js(False))
                    if PyJsStrictEq(var.get('s').get('strm').get('avail_out'),Js(0.0)):
                        return var.get('BS_NEED_MORE')
            
            var.get('s').put('insert', Js(0.0))
            if PyJsStrictEq(var.get('flush'),var.get('Z_FINISH')):
                var.get('flush_block_only')(var.get('s'), Js(True))
                if PyJsStrictEq(var.get('s').get('strm').get('avail_out'),Js(0.0)):
                    return var.get('BS_FINISH_STARTED')
                return var.get('BS_FINISH_DONE')
            if var.get('s').get('last_lit'):
                var.get('flush_block_only')(var.get('s'), Js(False))
                if PyJsStrictEq(var.get('s').get('strm').get('avail_out'),Js(0.0)):
                    return var.get('BS_NEED_MORE')
            return var.get('BS_BLOCK_DONE')
        PyJsHoisted_deflate_rle_.func_name = 'deflate_rle'
        var.put('deflate_rle', PyJsHoisted_deflate_rle_)
        @Js
        def PyJsHoisted_deflate_huff_(s, flush, this, arguments, var=var):
            var = Scope({'s':s, 'flush':flush, 'this':this, 'arguments':arguments}, var)
            var.registers(['flush', 's', 'bflush'])
            pass
            #for JS loop
            
            while 1:
                if PyJsStrictEq(var.get('s').get('lookahead'),Js(0.0)):
                    var.get('fill_window')(var.get('s'))
                    if PyJsStrictEq(var.get('s').get('lookahead'),Js(0.0)):
                        if PyJsStrictEq(var.get('flush'),var.get('Z_NO_FLUSH')):
                            return var.get('BS_NEED_MORE')
                        break
                var.get('s').put('match_length', Js(0.0))
                var.put('bflush', var.get('trees').callprop('_tr_tally', var.get('s'), Js(0.0), var.get('s').get('window').get(var.get('s').get('strstart'))))
                (var.get('s').put('lookahead',Js(var.get('s').get('lookahead').to_number())-Js(1))+Js(1))
                (var.get('s').put('strstart',Js(var.get('s').get('strstart').to_number())+Js(1))-Js(1))
                if var.get('bflush'):
                    var.get('flush_block_only')(var.get('s'), Js(False))
                    if PyJsStrictEq(var.get('s').get('strm').get('avail_out'),Js(0.0)):
                        return var.get('BS_NEED_MORE')
            
            var.get('s').put('insert', Js(0.0))
            if PyJsStrictEq(var.get('flush'),var.get('Z_FINISH')):
                var.get('flush_block_only')(var.get('s'), Js(True))
                if PyJsStrictEq(var.get('s').get('strm').get('avail_out'),Js(0.0)):
                    return var.get('BS_FINISH_STARTED')
                return var.get('BS_FINISH_DONE')
            if var.get('s').get('last_lit'):
                var.get('flush_block_only')(var.get('s'), Js(False))
                if PyJsStrictEq(var.get('s').get('strm').get('avail_out'),Js(0.0)):
                    return var.get('BS_NEED_MORE')
            return var.get('BS_BLOCK_DONE')
        PyJsHoisted_deflate_huff_.func_name = 'deflate_huff'
        var.put('deflate_huff', PyJsHoisted_deflate_huff_)
        @Js
        def PyJsHoisted_Config_(good_length, max_lazy, nice_length, max_chain, func, this, arguments, var=var):
            var = Scope({'good_length':good_length, 'max_lazy':max_lazy, 'nice_length':nice_length, 'max_chain':max_chain, 'func':func, 'this':this, 'arguments':arguments}, var)
            var.registers(['max_lazy', 'good_length', 'func', 'nice_length', 'max_chain'])
            var.get(u"this").put('good_length', var.get('good_length'))
            var.get(u"this").put('max_lazy', var.get('max_lazy'))
            var.get(u"this").put('nice_length', var.get('nice_length'))
            var.get(u"this").put('max_chain', var.get('max_chain'))
            var.get(u"this").put('func', var.get('func'))
        PyJsHoisted_Config_.func_name = 'Config'
        var.put('Config', PyJsHoisted_Config_)
        @Js
        def PyJsHoisted_lm_init_(s, this, arguments, var=var):
            var = Scope({'s':s, 'this':this, 'arguments':arguments}, var)
            var.registers(['s'])
            var.get('s').put('window_size', (Js(2.0)*var.get('s').get('w_size')))
            var.get('zero')(var.get('s').get('head'))
            var.get('s').put('max_lazy_match', var.get('configuration_table').get(var.get('s').get('level')).get('max_lazy'))
            var.get('s').put('good_match', var.get('configuration_table').get(var.get('s').get('level')).get('good_length'))
            var.get('s').put('nice_match', var.get('configuration_table').get(var.get('s').get('level')).get('nice_length'))
            var.get('s').put('max_chain_length', var.get('configuration_table').get(var.get('s').get('level')).get('max_chain'))
            var.get('s').put('strstart', Js(0.0))
            var.get('s').put('block_start', Js(0.0))
            var.get('s').put('lookahead', Js(0.0))
            var.get('s').put('insert', Js(0.0))
            var.get('s').put('match_length', var.get('s').put('prev_length', (var.get('MIN_MATCH')-Js(1.0))))
            var.get('s').put('match_available', Js(0.0))
            var.get('s').put('ins_h', Js(0.0))
        PyJsHoisted_lm_init_.func_name = 'lm_init'
        var.put('lm_init', PyJsHoisted_lm_init_)
        @Js
        def PyJsHoisted_DeflateState_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").put('strm', var.get(u"null"))
            var.get(u"this").put('status', Js(0.0))
            var.get(u"this").put('pending_buf', var.get(u"null"))
            var.get(u"this").put('pending_buf_size', Js(0.0))
            var.get(u"this").put('pending_out', Js(0.0))
            var.get(u"this").put('pending', Js(0.0))
            var.get(u"this").put('wrap', Js(0.0))
            var.get(u"this").put('gzhead', var.get(u"null"))
            var.get(u"this").put('gzindex', Js(0.0))
            var.get(u"this").put('method', var.get('Z_DEFLATED'))
            var.get(u"this").put('last_flush', (-Js(1.0)))
            var.get(u"this").put('w_size', Js(0.0))
            var.get(u"this").put('w_bits', Js(0.0))
            var.get(u"this").put('w_mask', Js(0.0))
            var.get(u"this").put('window', var.get(u"null"))
            var.get(u"this").put('window_size', Js(0.0))
            var.get(u"this").put('prev', var.get(u"null"))
            var.get(u"this").put('head', var.get(u"null"))
            var.get(u"this").put('ins_h', Js(0.0))
            var.get(u"this").put('hash_size', Js(0.0))
            var.get(u"this").put('hash_bits', Js(0.0))
            var.get(u"this").put('hash_mask', Js(0.0))
            var.get(u"this").put('hash_shift', Js(0.0))
            var.get(u"this").put('block_start', Js(0.0))
            var.get(u"this").put('match_length', Js(0.0))
            var.get(u"this").put('prev_match', Js(0.0))
            var.get(u"this").put('match_available', Js(0.0))
            var.get(u"this").put('strstart', Js(0.0))
            var.get(u"this").put('match_start', Js(0.0))
            var.get(u"this").put('lookahead', Js(0.0))
            var.get(u"this").put('prev_length', Js(0.0))
            var.get(u"this").put('max_chain_length', Js(0.0))
            var.get(u"this").put('max_lazy_match', Js(0.0))
            var.get(u"this").put('level', Js(0.0))
            var.get(u"this").put('strategy', Js(0.0))
            var.get(u"this").put('good_match', Js(0.0))
            var.get(u"this").put('nice_match', Js(0.0))
            var.get(u"this").put('dyn_ltree', var.get('utils').get('Buf16').create((var.get('HEAP_SIZE')*Js(2.0))))
            var.get(u"this").put('dyn_dtree', var.get('utils').get('Buf16').create((((Js(2.0)*var.get('D_CODES'))+Js(1.0))*Js(2.0))))
            var.get(u"this").put('bl_tree', var.get('utils').get('Buf16').create((((Js(2.0)*var.get('BL_CODES'))+Js(1.0))*Js(2.0))))
            var.get('zero')(var.get(u"this").get('dyn_ltree'))
            var.get('zero')(var.get(u"this").get('dyn_dtree'))
            var.get('zero')(var.get(u"this").get('bl_tree'))
            var.get(u"this").put('l_desc', var.get(u"null"))
            var.get(u"this").put('d_desc', var.get(u"null"))
            var.get(u"this").put('bl_desc', var.get(u"null"))
            var.get(u"this").put('bl_count', var.get('utils').get('Buf16').create((var.get('MAX_BITS')+Js(1.0))))
            var.get(u"this").put('heap', var.get('utils').get('Buf16').create(((Js(2.0)*var.get('L_CODES'))+Js(1.0))))
            var.get('zero')(var.get(u"this").get('heap'))
            var.get(u"this").put('heap_len', Js(0.0))
            var.get(u"this").put('heap_max', Js(0.0))
            var.get(u"this").put('depth', var.get('utils').get('Buf16').create(((Js(2.0)*var.get('L_CODES'))+Js(1.0))))
            var.get('zero')(var.get(u"this").get('depth'))
            var.get(u"this").put('l_buf', Js(0.0))
            var.get(u"this").put('lit_bufsize', Js(0.0))
            var.get(u"this").put('last_lit', Js(0.0))
            var.get(u"this").put('d_buf', Js(0.0))
            var.get(u"this").put('opt_len', Js(0.0))
            var.get(u"this").put('static_len', Js(0.0))
            var.get(u"this").put('matches', Js(0.0))
            var.get(u"this").put('insert', Js(0.0))
            var.get(u"this").put('bi_buf', Js(0.0))
            var.get(u"this").put('bi_valid', Js(0.0))
        PyJsHoisted_DeflateState_.func_name = 'DeflateState'
        var.put('DeflateState', PyJsHoisted_DeflateState_)
        @Js
        def PyJsHoisted_deflateResetKeep_(strm, this, arguments, var=var):
            var = Scope({'strm':strm, 'this':this, 'arguments':arguments}, var)
            var.registers(['s', 'strm'])
            pass
            if (var.get('strm').neg() or var.get('strm').get('state').neg()):
                return var.get('err')(var.get('strm'), var.get('Z_STREAM_ERROR'))
            var.get('strm').put('total_in', var.get('strm').put('total_out', Js(0.0)))
            var.get('strm').put('data_type', var.get('Z_UNKNOWN'))
            var.put('s', var.get('strm').get('state'))
            var.get('s').put('pending', Js(0.0))
            var.get('s').put('pending_out', Js(0.0))
            if (var.get('s').get('wrap')<Js(0.0)):
                var.get('s').put('wrap', (-var.get('s').get('wrap')))
            var.get('s').put('status', (var.get('INIT_STATE') if var.get('s').get('wrap') else var.get('BUSY_STATE')))
            var.get('strm').put('adler', (Js(0.0) if PyJsStrictEq(var.get('s').get('wrap'),Js(2.0)) else Js(1.0)))
            var.get('s').put('last_flush', var.get('Z_NO_FLUSH'))
            var.get('trees').callprop('_tr_init', var.get('s'))
            return var.get('Z_OK')
        PyJsHoisted_deflateResetKeep_.func_name = 'deflateResetKeep'
        var.put('deflateResetKeep', PyJsHoisted_deflateResetKeep_)
        @Js
        def PyJsHoisted_deflateReset_(strm, this, arguments, var=var):
            var = Scope({'strm':strm, 'this':this, 'arguments':arguments}, var)
            var.registers(['strm', 'ret'])
            var.put('ret', var.get('deflateResetKeep')(var.get('strm')))
            if PyJsStrictEq(var.get('ret'),var.get('Z_OK')):
                var.get('lm_init')(var.get('strm').get('state'))
            return var.get('ret')
        PyJsHoisted_deflateReset_.func_name = 'deflateReset'
        var.put('deflateReset', PyJsHoisted_deflateReset_)
        @Js
        def PyJsHoisted_deflateSetHeader_(strm, head, this, arguments, var=var):
            var = Scope({'strm':strm, 'head':head, 'this':this, 'arguments':arguments}, var)
            var.registers(['head', 'strm'])
            if (var.get('strm').neg() or var.get('strm').get('state').neg()):
                return var.get('Z_STREAM_ERROR')
            if PyJsStrictNeq(var.get('strm').get('state').get('wrap'),Js(2.0)):
                return var.get('Z_STREAM_ERROR')
            var.get('strm').get('state').put('gzhead', var.get('head'))
            return var.get('Z_OK')
        PyJsHoisted_deflateSetHeader_.func_name = 'deflateSetHeader'
        var.put('deflateSetHeader', PyJsHoisted_deflateSetHeader_)
        @Js
        def PyJsHoisted_deflateInit2_(strm, level, method, windowBits, memLevel, strategy, this, arguments, var=var):
            var = Scope({'strm':strm, 'level':level, 'method':method, 'windowBits':windowBits, 'memLevel':memLevel, 'strategy':strategy, 'this':this, 'arguments':arguments}, var)
            var.registers(['level', 'windowBits', 's', 'strategy', 'wrap', 'memLevel', 'method', 'strm'])
            if var.get('strm').neg():
                return var.get('Z_STREAM_ERROR')
            var.put('wrap', Js(1.0))
            if PyJsStrictEq(var.get('level'),var.get('Z_DEFAULT_COMPRESSION')):
                var.put('level', Js(6.0))
            if (var.get('windowBits')<Js(0.0)):
                var.put('wrap', Js(0.0))
                var.put('windowBits', (-var.get('windowBits')))
            else:
                if (var.get('windowBits')>Js(15.0)):
                    var.put('wrap', Js(2.0))
                    var.put('windowBits', Js(16.0), '-')
            if (((((((((var.get('memLevel')<Js(1.0)) or (var.get('memLevel')>var.get('MAX_MEM_LEVEL'))) or PyJsStrictNeq(var.get('method'),var.get('Z_DEFLATED'))) or (var.get('windowBits')<Js(8.0))) or (var.get('windowBits')>Js(15.0))) or (var.get('level')<Js(0.0))) or (var.get('level')>Js(9.0))) or (var.get('strategy')<Js(0.0))) or (var.get('strategy')>var.get('Z_FIXED'))):
                return var.get('err')(var.get('strm'), var.get('Z_STREAM_ERROR'))
            if PyJsStrictEq(var.get('windowBits'),Js(8.0)):
                var.put('windowBits', Js(9.0))
            var.put('s', var.get('DeflateState').create())
            var.get('strm').put('state', var.get('s'))
            var.get('s').put('strm', var.get('strm'))
            var.get('s').put('wrap', var.get('wrap'))
            var.get('s').put('gzhead', var.get(u"null"))
            var.get('s').put('w_bits', var.get('windowBits'))
            var.get('s').put('w_size', (Js(1.0)<<var.get('s').get('w_bits')))
            var.get('s').put('w_mask', (var.get('s').get('w_size')-Js(1.0)))
            var.get('s').put('hash_bits', (var.get('memLevel')+Js(7.0)))
            var.get('s').put('hash_size', (Js(1.0)<<var.get('s').get('hash_bits')))
            var.get('s').put('hash_mask', (var.get('s').get('hash_size')-Js(1.0)))
            var.get('s').put('hash_shift', (~(~(((var.get('s').get('hash_bits')+var.get('MIN_MATCH'))-Js(1.0))/var.get('MIN_MATCH')))))
            var.get('s').put('window', var.get('utils').get('Buf8').create((var.get('s').get('w_size')*Js(2.0))))
            var.get('s').put('head', var.get('utils').get('Buf16').create(var.get('s').get('hash_size')))
            var.get('s').put('prev', var.get('utils').get('Buf16').create(var.get('s').get('w_size')))
            var.get('s').put('lit_bufsize', (Js(1.0)<<(var.get('memLevel')+Js(6.0))))
            var.get('s').put('pending_buf_size', (var.get('s').get('lit_bufsize')*Js(4.0)))
            var.get('s').put('pending_buf', var.get('utils').get('Buf8').create(var.get('s').get('pending_buf_size')))
            var.get('s').put('d_buf', (Js(1.0)*var.get('s').get('lit_bufsize')))
            var.get('s').put('l_buf', ((Js(1.0)+Js(2.0))*var.get('s').get('lit_bufsize')))
            var.get('s').put('level', var.get('level'))
            var.get('s').put('strategy', var.get('strategy'))
            var.get('s').put('method', var.get('method'))
            return var.get('deflateReset')(var.get('strm'))
        PyJsHoisted_deflateInit2_.func_name = 'deflateInit2'
        var.put('deflateInit2', PyJsHoisted_deflateInit2_)
        @Js
        def PyJsHoisted_deflateInit_(strm, level, this, arguments, var=var):
            var = Scope({'strm':strm, 'level':level, 'this':this, 'arguments':arguments}, var)
            var.registers(['level', 'strm'])
            return var.get('deflateInit2')(var.get('strm'), var.get('level'), var.get('Z_DEFLATED'), var.get('MAX_WBITS'), var.get('DEF_MEM_LEVEL'), var.get('Z_DEFAULT_STRATEGY'))
        PyJsHoisted_deflateInit_.func_name = 'deflateInit'
        var.put('deflateInit', PyJsHoisted_deflateInit_)
        @Js
        def PyJsHoisted_deflate_(strm, flush, this, arguments, var=var):
            var = Scope({'strm':strm, 'flush':flush, 'this':this, 'arguments':arguments}, var)
            var.registers(['val', 's', 'bstate', 'flush', 'strm', 'old_flush', 'beg', 'level_flags', 'header'])
            pass
            pass
            if (((var.get('strm').neg() or var.get('strm').get('state').neg()) or (var.get('flush')>var.get('Z_BLOCK'))) or (var.get('flush')<Js(0.0))):
                return (var.get('err')(var.get('strm'), var.get('Z_STREAM_ERROR')) if var.get('strm') else var.get('Z_STREAM_ERROR'))
            var.put('s', var.get('strm').get('state'))
            if ((var.get('strm').get('output').neg() or (var.get('strm').get('input').neg() and PyJsStrictNeq(var.get('strm').get('avail_in'),Js(0.0)))) or (PyJsStrictEq(var.get('s').get('status'),var.get('FINISH_STATE')) and PyJsStrictNeq(var.get('flush'),var.get('Z_FINISH')))):
                return var.get('err')(var.get('strm'), (var.get('Z_BUF_ERROR') if PyJsStrictEq(var.get('strm').get('avail_out'),Js(0.0)) else var.get('Z_STREAM_ERROR')))
            var.get('s').put('strm', var.get('strm'))
            var.put('old_flush', var.get('s').get('last_flush'))
            var.get('s').put('last_flush', var.get('flush'))
            if PyJsStrictEq(var.get('s').get('status'),var.get('INIT_STATE')):
                if PyJsStrictEq(var.get('s').get('wrap'),Js(2.0)):
                    var.get('strm').put('adler', Js(0.0))
                    var.get('put_byte')(var.get('s'), Js(31.0))
                    var.get('put_byte')(var.get('s'), Js(139.0))
                    var.get('put_byte')(var.get('s'), Js(8.0))
                    if var.get('s').get('gzhead').neg():
                        var.get('put_byte')(var.get('s'), Js(0.0))
                        var.get('put_byte')(var.get('s'), Js(0.0))
                        var.get('put_byte')(var.get('s'), Js(0.0))
                        var.get('put_byte')(var.get('s'), Js(0.0))
                        var.get('put_byte')(var.get('s'), Js(0.0))
                        var.get('put_byte')(var.get('s'), (Js(2.0) if PyJsStrictEq(var.get('s').get('level'),Js(9.0)) else (Js(4.0) if ((var.get('s').get('strategy')>=var.get('Z_HUFFMAN_ONLY')) or (var.get('s').get('level')<Js(2.0))) else Js(0.0))))
                        var.get('put_byte')(var.get('s'), var.get('OS_CODE'))
                        var.get('s').put('status', var.get('BUSY_STATE'))
                    else:
                        var.get('put_byte')(var.get('s'), (((((Js(1.0) if var.get('s').get('gzhead').get('text') else Js(0.0))+(Js(2.0) if var.get('s').get('gzhead').get('hcrc') else Js(0.0)))+(Js(0.0) if var.get('s').get('gzhead').get('extra').neg() else Js(4.0)))+(Js(0.0) if var.get('s').get('gzhead').get('name').neg() else Js(8.0)))+(Js(0.0) if var.get('s').get('gzhead').get('comment').neg() else Js(16.0))))
                        var.get('put_byte')(var.get('s'), (var.get('s').get('gzhead').get('time')&Js(255)))
                        var.get('put_byte')(var.get('s'), ((var.get('s').get('gzhead').get('time')>>Js(8.0))&Js(255)))
                        var.get('put_byte')(var.get('s'), ((var.get('s').get('gzhead').get('time')>>Js(16.0))&Js(255)))
                        var.get('put_byte')(var.get('s'), ((var.get('s').get('gzhead').get('time')>>Js(24.0))&Js(255)))
                        var.get('put_byte')(var.get('s'), (Js(2.0) if PyJsStrictEq(var.get('s').get('level'),Js(9.0)) else (Js(4.0) if ((var.get('s').get('strategy')>=var.get('Z_HUFFMAN_ONLY')) or (var.get('s').get('level')<Js(2.0))) else Js(0.0))))
                        var.get('put_byte')(var.get('s'), (var.get('s').get('gzhead').get('os')&Js(255)))
                        if (var.get('s').get('gzhead').get('extra') and var.get('s').get('gzhead').get('extra').get('length')):
                            var.get('put_byte')(var.get('s'), (var.get('s').get('gzhead').get('extra').get('length')&Js(255)))
                            var.get('put_byte')(var.get('s'), ((var.get('s').get('gzhead').get('extra').get('length')>>Js(8.0))&Js(255)))
                        if var.get('s').get('gzhead').get('hcrc'):
                            var.get('strm').put('adler', var.get('crc32')(var.get('strm').get('adler'), var.get('s').get('pending_buf'), var.get('s').get('pending'), Js(0.0)))
                        var.get('s').put('gzindex', Js(0.0))
                        var.get('s').put('status', var.get('EXTRA_STATE'))
                else:
                    var.put('header', ((var.get('Z_DEFLATED')+((var.get('s').get('w_bits')-Js(8.0))<<Js(4.0)))<<Js(8.0)))
                    var.put('level_flags', (-Js(1.0)))
                    if ((var.get('s').get('strategy')>=var.get('Z_HUFFMAN_ONLY')) or (var.get('s').get('level')<Js(2.0))):
                        var.put('level_flags', Js(0.0))
                    else:
                        if (var.get('s').get('level')<Js(6.0)):
                            var.put('level_flags', Js(1.0))
                        else:
                            if PyJsStrictEq(var.get('s').get('level'),Js(6.0)):
                                var.put('level_flags', Js(2.0))
                            else:
                                var.put('level_flags', Js(3.0))
                    var.put('header', (var.get('level_flags')<<Js(6.0)), '|')
                    if PyJsStrictNeq(var.get('s').get('strstart'),Js(0.0)):
                        var.put('header', var.get('PRESET_DICT'), '|')
                    var.put('header', (Js(31.0)-(var.get('header')%Js(31.0))), '+')
                    var.get('s').put('status', var.get('BUSY_STATE'))
                    var.get('putShortMSB')(var.get('s'), var.get('header'))
                    if PyJsStrictNeq(var.get('s').get('strstart'),Js(0.0)):
                        var.get('putShortMSB')(var.get('s'), PyJsBshift(var.get('strm').get('adler'),Js(16.0)))
                        var.get('putShortMSB')(var.get('s'), (var.get('strm').get('adler')&Js(65535)))
                    var.get('strm').put('adler', Js(1.0))
            if PyJsStrictEq(var.get('s').get('status'),var.get('EXTRA_STATE')):
                if var.get('s').get('gzhead').get('extra'):
                    var.put('beg', var.get('s').get('pending'))
                    while (var.get('s').get('gzindex')<(var.get('s').get('gzhead').get('extra').get('length')&Js(65535))):
                        if PyJsStrictEq(var.get('s').get('pending'),var.get('s').get('pending_buf_size')):
                            if (var.get('s').get('gzhead').get('hcrc') and (var.get('s').get('pending')>var.get('beg'))):
                                var.get('strm').put('adler', var.get('crc32')(var.get('strm').get('adler'), var.get('s').get('pending_buf'), (var.get('s').get('pending')-var.get('beg')), var.get('beg')))
                            var.get('flush_pending')(var.get('strm'))
                            var.put('beg', var.get('s').get('pending'))
                            if PyJsStrictEq(var.get('s').get('pending'),var.get('s').get('pending_buf_size')):
                                break
                        var.get('put_byte')(var.get('s'), (var.get('s').get('gzhead').get('extra').get(var.get('s').get('gzindex'))&Js(255)))
                        (var.get('s').put('gzindex',Js(var.get('s').get('gzindex').to_number())+Js(1))-Js(1))
                    if (var.get('s').get('gzhead').get('hcrc') and (var.get('s').get('pending')>var.get('beg'))):
                        var.get('strm').put('adler', var.get('crc32')(var.get('strm').get('adler'), var.get('s').get('pending_buf'), (var.get('s').get('pending')-var.get('beg')), var.get('beg')))
                    if PyJsStrictEq(var.get('s').get('gzindex'),var.get('s').get('gzhead').get('extra').get('length')):
                        var.get('s').put('gzindex', Js(0.0))
                        var.get('s').put('status', var.get('NAME_STATE'))
                else:
                    var.get('s').put('status', var.get('NAME_STATE'))
            if PyJsStrictEq(var.get('s').get('status'),var.get('NAME_STATE')):
                if var.get('s').get('gzhead').get('name'):
                    var.put('beg', var.get('s').get('pending'))
                    while 1:
                        if PyJsStrictEq(var.get('s').get('pending'),var.get('s').get('pending_buf_size')):
                            if (var.get('s').get('gzhead').get('hcrc') and (var.get('s').get('pending')>var.get('beg'))):
                                var.get('strm').put('adler', var.get('crc32')(var.get('strm').get('adler'), var.get('s').get('pending_buf'), (var.get('s').get('pending')-var.get('beg')), var.get('beg')))
                            var.get('flush_pending')(var.get('strm'))
                            var.put('beg', var.get('s').get('pending'))
                            if PyJsStrictEq(var.get('s').get('pending'),var.get('s').get('pending_buf_size')):
                                var.put('val', Js(1.0))
                                break
                        if (var.get('s').get('gzindex')<var.get('s').get('gzhead').get('name').get('length')):
                            var.put('val', (var.get('s').get('gzhead').get('name').callprop('charCodeAt', (var.get('s').put('gzindex',Js(var.get('s').get('gzindex').to_number())+Js(1))-Js(1)))&Js(255)))
                        else:
                            var.put('val', Js(0.0))
                        var.get('put_byte')(var.get('s'), var.get('val'))
                        if not PyJsStrictNeq(var.get('val'),Js(0.0)):
                            break
                    if (var.get('s').get('gzhead').get('hcrc') and (var.get('s').get('pending')>var.get('beg'))):
                        var.get('strm').put('adler', var.get('crc32')(var.get('strm').get('adler'), var.get('s').get('pending_buf'), (var.get('s').get('pending')-var.get('beg')), var.get('beg')))
                    if PyJsStrictEq(var.get('val'),Js(0.0)):
                        var.get('s').put('gzindex', Js(0.0))
                        var.get('s').put('status', var.get('COMMENT_STATE'))
                else:
                    var.get('s').put('status', var.get('COMMENT_STATE'))
            if PyJsStrictEq(var.get('s').get('status'),var.get('COMMENT_STATE')):
                if var.get('s').get('gzhead').get('comment'):
                    var.put('beg', var.get('s').get('pending'))
                    while 1:
                        if PyJsStrictEq(var.get('s').get('pending'),var.get('s').get('pending_buf_size')):
                            if (var.get('s').get('gzhead').get('hcrc') and (var.get('s').get('pending')>var.get('beg'))):
                                var.get('strm').put('adler', var.get('crc32')(var.get('strm').get('adler'), var.get('s').get('pending_buf'), (var.get('s').get('pending')-var.get('beg')), var.get('beg')))
                            var.get('flush_pending')(var.get('strm'))
                            var.put('beg', var.get('s').get('pending'))
                            if PyJsStrictEq(var.get('s').get('pending'),var.get('s').get('pending_buf_size')):
                                var.put('val', Js(1.0))
                                break
                        if (var.get('s').get('gzindex')<var.get('s').get('gzhead').get('comment').get('length')):
                            var.put('val', (var.get('s').get('gzhead').get('comment').callprop('charCodeAt', (var.get('s').put('gzindex',Js(var.get('s').get('gzindex').to_number())+Js(1))-Js(1)))&Js(255)))
                        else:
                            var.put('val', Js(0.0))
                        var.get('put_byte')(var.get('s'), var.get('val'))
                        if not PyJsStrictNeq(var.get('val'),Js(0.0)):
                            break
                    if (var.get('s').get('gzhead').get('hcrc') and (var.get('s').get('pending')>var.get('beg'))):
                        var.get('strm').put('adler', var.get('crc32')(var.get('strm').get('adler'), var.get('s').get('pending_buf'), (var.get('s').get('pending')-var.get('beg')), var.get('beg')))
                    if PyJsStrictEq(var.get('val'),Js(0.0)):
                        var.get('s').put('status', var.get('HCRC_STATE'))
                else:
                    var.get('s').put('status', var.get('HCRC_STATE'))
            if PyJsStrictEq(var.get('s').get('status'),var.get('HCRC_STATE')):
                if var.get('s').get('gzhead').get('hcrc'):
                    if ((var.get('s').get('pending')+Js(2.0))>var.get('s').get('pending_buf_size')):
                        var.get('flush_pending')(var.get('strm'))
                    if ((var.get('s').get('pending')+Js(2.0))<=var.get('s').get('pending_buf_size')):
                        var.get('put_byte')(var.get('s'), (var.get('strm').get('adler')&Js(255)))
                        var.get('put_byte')(var.get('s'), ((var.get('strm').get('adler')>>Js(8.0))&Js(255)))
                        var.get('strm').put('adler', Js(0.0))
                        var.get('s').put('status', var.get('BUSY_STATE'))
                else:
                    var.get('s').put('status', var.get('BUSY_STATE'))
            if PyJsStrictNeq(var.get('s').get('pending'),Js(0.0)):
                var.get('flush_pending')(var.get('strm'))
                if PyJsStrictEq(var.get('strm').get('avail_out'),Js(0.0)):
                    var.get('s').put('last_flush', (-Js(1.0)))
                    return var.get('Z_OK')
            else:
                if ((PyJsStrictEq(var.get('strm').get('avail_in'),Js(0.0)) and (var.get('rank')(var.get('flush'))<=var.get('rank')(var.get('old_flush')))) and PyJsStrictNeq(var.get('flush'),var.get('Z_FINISH'))):
                    return var.get('err')(var.get('strm'), var.get('Z_BUF_ERROR'))
            if (PyJsStrictEq(var.get('s').get('status'),var.get('FINISH_STATE')) and PyJsStrictNeq(var.get('strm').get('avail_in'),Js(0.0))):
                return var.get('err')(var.get('strm'), var.get('Z_BUF_ERROR'))
            if ((PyJsStrictNeq(var.get('strm').get('avail_in'),Js(0.0)) or PyJsStrictNeq(var.get('s').get('lookahead'),Js(0.0))) or (PyJsStrictNeq(var.get('flush'),var.get('Z_NO_FLUSH')) and PyJsStrictNeq(var.get('s').get('status'),var.get('FINISH_STATE')))):
                var.put('bstate', (var.get('deflate_huff')(var.get('s'), var.get('flush')) if PyJsStrictEq(var.get('s').get('strategy'),var.get('Z_HUFFMAN_ONLY')) else (var.get('deflate_rle')(var.get('s'), var.get('flush')) if PyJsStrictEq(var.get('s').get('strategy'),var.get('Z_RLE')) else var.get('configuration_table').get(var.get('s').get('level')).callprop('func', var.get('s'), var.get('flush')))))
                if (PyJsStrictEq(var.get('bstate'),var.get('BS_FINISH_STARTED')) or PyJsStrictEq(var.get('bstate'),var.get('BS_FINISH_DONE'))):
                    var.get('s').put('status', var.get('FINISH_STATE'))
                if (PyJsStrictEq(var.get('bstate'),var.get('BS_NEED_MORE')) or PyJsStrictEq(var.get('bstate'),var.get('BS_FINISH_STARTED'))):
                    if PyJsStrictEq(var.get('strm').get('avail_out'),Js(0.0)):
                        var.get('s').put('last_flush', (-Js(1.0)))
                    return var.get('Z_OK')
                if PyJsStrictEq(var.get('bstate'),var.get('BS_BLOCK_DONE')):
                    if PyJsStrictEq(var.get('flush'),var.get('Z_PARTIAL_FLUSH')):
                        var.get('trees').callprop('_tr_align', var.get('s'))
                    else:
                        if PyJsStrictNeq(var.get('flush'),var.get('Z_BLOCK')):
                            var.get('trees').callprop('_tr_stored_block', var.get('s'), Js(0.0), Js(0.0), Js(False))
                            if PyJsStrictEq(var.get('flush'),var.get('Z_FULL_FLUSH')):
                                var.get('zero')(var.get('s').get('head'))
                                if PyJsStrictEq(var.get('s').get('lookahead'),Js(0.0)):
                                    var.get('s').put('strstart', Js(0.0))
                                    var.get('s').put('block_start', Js(0.0))
                                    var.get('s').put('insert', Js(0.0))
                    var.get('flush_pending')(var.get('strm'))
                    if PyJsStrictEq(var.get('strm').get('avail_out'),Js(0.0)):
                        var.get('s').put('last_flush', (-Js(1.0)))
                        return var.get('Z_OK')
            if PyJsStrictNeq(var.get('flush'),var.get('Z_FINISH')):
                return var.get('Z_OK')
            if (var.get('s').get('wrap')<=Js(0.0)):
                return var.get('Z_STREAM_END')
            if PyJsStrictEq(var.get('s').get('wrap'),Js(2.0)):
                var.get('put_byte')(var.get('s'), (var.get('strm').get('adler')&Js(255)))
                var.get('put_byte')(var.get('s'), ((var.get('strm').get('adler')>>Js(8.0))&Js(255)))
                var.get('put_byte')(var.get('s'), ((var.get('strm').get('adler')>>Js(16.0))&Js(255)))
                var.get('put_byte')(var.get('s'), ((var.get('strm').get('adler')>>Js(24.0))&Js(255)))
                var.get('put_byte')(var.get('s'), (var.get('strm').get('total_in')&Js(255)))
                var.get('put_byte')(var.get('s'), ((var.get('strm').get('total_in')>>Js(8.0))&Js(255)))
                var.get('put_byte')(var.get('s'), ((var.get('strm').get('total_in')>>Js(16.0))&Js(255)))
                var.get('put_byte')(var.get('s'), ((var.get('strm').get('total_in')>>Js(24.0))&Js(255)))
            else:
                var.get('putShortMSB')(var.get('s'), PyJsBshift(var.get('strm').get('adler'),Js(16.0)))
                var.get('putShortMSB')(var.get('s'), (var.get('strm').get('adler')&Js(65535)))
            var.get('flush_pending')(var.get('strm'))
            if (var.get('s').get('wrap')>Js(0.0)):
                var.get('s').put('wrap', (-var.get('s').get('wrap')))
            return (var.get('Z_OK') if PyJsStrictNeq(var.get('s').get('pending'),Js(0.0)) else var.get('Z_STREAM_END'))
        PyJsHoisted_deflate_.func_name = 'deflate'
        var.put('deflate', PyJsHoisted_deflate_)
        @Js
        def PyJsHoisted_deflateEnd_(strm, this, arguments, var=var):
            var = Scope({'strm':strm, 'this':this, 'arguments':arguments}, var)
            var.registers(['status', 'strm'])
            pass
            if (var.get('strm').neg() or var.get('strm').get('state').neg()):
                return var.get('Z_STREAM_ERROR')
            var.put('status', var.get('strm').get('state').get('status'))
            def PyJs_LONG_2178_(var=var):
                return ((((((PyJsStrictNeq(var.get('status'),var.get('INIT_STATE')) and PyJsStrictNeq(var.get('status'),var.get('EXTRA_STATE'))) and PyJsStrictNeq(var.get('status'),var.get('NAME_STATE'))) and PyJsStrictNeq(var.get('status'),var.get('COMMENT_STATE'))) and PyJsStrictNeq(var.get('status'),var.get('HCRC_STATE'))) and PyJsStrictNeq(var.get('status'),var.get('BUSY_STATE'))) and PyJsStrictNeq(var.get('status'),var.get('FINISH_STATE')))
            if PyJs_LONG_2178_():
                return var.get('err')(var.get('strm'), var.get('Z_STREAM_ERROR'))
            var.get('strm').put('state', var.get(u"null"))
            return (var.get('err')(var.get('strm'), var.get('Z_DATA_ERROR')) if PyJsStrictEq(var.get('status'),var.get('BUSY_STATE')) else var.get('Z_OK'))
        PyJsHoisted_deflateEnd_.func_name = 'deflateEnd'
        var.put('deflateEnd', PyJsHoisted_deflateEnd_)
        @Js
        def PyJsHoisted_deflateSetDictionary_(strm, dictionary, this, arguments, var=var):
            var = Scope({'strm':strm, 'dictionary':dictionary, 'this':this, 'arguments':arguments}, var)
            var.registers(['n', 'dictLength', 's', 'str', 'avail', 'input', 'wrap', 'dictionary', 'next', 'tmpDict', 'strm'])
            var.put('dictLength', var.get('dictionary').get('length'))
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            if (var.get('strm').neg() or var.get('strm').get('state').neg()):
                return var.get('Z_STREAM_ERROR')
            var.put('s', var.get('strm').get('state'))
            var.put('wrap', var.get('s').get('wrap'))
            if ((PyJsStrictEq(var.get('wrap'),Js(2.0)) or (PyJsStrictEq(var.get('wrap'),Js(1.0)) and PyJsStrictNeq(var.get('s').get('status'),var.get('INIT_STATE')))) or var.get('s').get('lookahead')):
                return var.get('Z_STREAM_ERROR')
            if PyJsStrictEq(var.get('wrap'),Js(1.0)):
                var.get('strm').put('adler', var.get('adler32')(var.get('strm').get('adler'), var.get('dictionary'), var.get('dictLength'), Js(0.0)))
            var.get('s').put('wrap', Js(0.0))
            if (var.get('dictLength')>=var.get('s').get('w_size')):
                if PyJsStrictEq(var.get('wrap'),Js(0.0)):
                    var.get('zero')(var.get('s').get('head'))
                    var.get('s').put('strstart', Js(0.0))
                    var.get('s').put('block_start', Js(0.0))
                    var.get('s').put('insert', Js(0.0))
                var.put('tmpDict', var.get('utils').get('Buf8').create(var.get('s').get('w_size')))
                var.get('utils').callprop('arraySet', var.get('tmpDict'), var.get('dictionary'), (var.get('dictLength')-var.get('s').get('w_size')), var.get('s').get('w_size'), Js(0.0))
                var.put('dictionary', var.get('tmpDict'))
                var.put('dictLength', var.get('s').get('w_size'))
            var.put('avail', var.get('strm').get('avail_in'))
            var.put('next', var.get('strm').get('next_in'))
            var.put('input', var.get('strm').get('input'))
            var.get('strm').put('avail_in', var.get('dictLength'))
            var.get('strm').put('next_in', Js(0.0))
            var.get('strm').put('input', var.get('dictionary'))
            var.get('fill_window')(var.get('s'))
            while (var.get('s').get('lookahead')>=var.get('MIN_MATCH')):
                var.put('str', var.get('s').get('strstart'))
                var.put('n', (var.get('s').get('lookahead')-(var.get('MIN_MATCH')-Js(1.0))))
                while 1:
                    var.get('s').put('ins_h', (((var.get('s').get('ins_h')<<var.get('s').get('hash_shift'))^var.get('s').get('window').get(((var.get('str')+var.get('MIN_MATCH'))-Js(1.0))))&var.get('s').get('hash_mask')))
                    var.get('s').get('prev').put((var.get('str')&var.get('s').get('w_mask')), var.get('s').get('head').get(var.get('s').get('ins_h')))
                    var.get('s').get('head').put(var.get('s').get('ins_h'), var.get('str'))
                    (var.put('str',Js(var.get('str').to_number())+Js(1))-Js(1))
                    if not var.put('n',Js(var.get('n').to_number())-Js(1)):
                        break
                var.get('s').put('strstart', var.get('str'))
                var.get('s').put('lookahead', (var.get('MIN_MATCH')-Js(1.0)))
                var.get('fill_window')(var.get('s'))
            var.get('s').put('strstart', var.get('s').get('lookahead'), '+')
            var.get('s').put('block_start', var.get('s').get('strstart'))
            var.get('s').put('insert', var.get('s').get('lookahead'))
            var.get('s').put('lookahead', Js(0.0))
            var.get('s').put('match_length', var.get('s').put('prev_length', (var.get('MIN_MATCH')-Js(1.0))))
            var.get('s').put('match_available', Js(0.0))
            var.get('strm').put('next_in', var.get('next'))
            var.get('strm').put('input', var.get('input'))
            var.get('strm').put('avail_in', var.get('avail'))
            var.get('s').put('wrap', var.get('wrap'))
            return var.get('Z_OK')
        PyJsHoisted_deflateSetDictionary_.func_name = 'deflateSetDictionary'
        var.put('deflateSetDictionary', PyJsHoisted_deflateSetDictionary_)
        Js('use strict')
        var.put('utils', var.get('require')(Js('../utils/common')))
        var.put('trees', var.get('require')(Js('./trees')))
        var.put('adler32', var.get('require')(Js('./adler32')))
        var.put('crc32', var.get('require')(Js('./crc32')))
        var.put('msg', var.get('require')(Js('./messages')))
        var.put('Z_NO_FLUSH', Js(0.0))
        var.put('Z_PARTIAL_FLUSH', Js(1.0))
        var.put('Z_FULL_FLUSH', Js(3.0))
        var.put('Z_FINISH', Js(4.0))
        var.put('Z_BLOCK', Js(5.0))
        var.put('Z_OK', Js(0.0))
        var.put('Z_STREAM_END', Js(1.0))
        var.put('Z_STREAM_ERROR', (-Js(2.0)))
        var.put('Z_DATA_ERROR', (-Js(3.0)))
        var.put('Z_BUF_ERROR', (-Js(5.0)))
        var.put('Z_DEFAULT_COMPRESSION', (-Js(1.0)))
        var.put('Z_FILTERED', Js(1.0))
        var.put('Z_HUFFMAN_ONLY', Js(2.0))
        var.put('Z_RLE', Js(3.0))
        var.put('Z_FIXED', Js(4.0))
        var.put('Z_DEFAULT_STRATEGY', Js(0.0))
        var.put('Z_UNKNOWN', Js(2.0))
        var.put('Z_DEFLATED', Js(8.0))
        var.put('MAX_MEM_LEVEL', Js(9.0))
        var.put('MAX_WBITS', Js(15.0))
        var.put('DEF_MEM_LEVEL', Js(8.0))
        var.put('LENGTH_CODES', Js(29.0))
        var.put('LITERALS', Js(256.0))
        var.put('L_CODES', ((var.get('LITERALS')+Js(1.0))+var.get('LENGTH_CODES')))
        var.put('D_CODES', Js(30.0))
        var.put('BL_CODES', Js(19.0))
        var.put('HEAP_SIZE', ((Js(2.0)*var.get('L_CODES'))+Js(1.0)))
        var.put('MAX_BITS', Js(15.0))
        var.put('MIN_MATCH', Js(3.0))
        var.put('MAX_MATCH', Js(258.0))
        var.put('MIN_LOOKAHEAD', ((var.get('MAX_MATCH')+var.get('MIN_MATCH'))+Js(1.0)))
        var.put('PRESET_DICT', Js(32))
        var.put('INIT_STATE', Js(42.0))
        var.put('EXTRA_STATE', Js(69.0))
        var.put('NAME_STATE', Js(73.0))
        var.put('COMMENT_STATE', Js(91.0))
        var.put('HCRC_STATE', Js(103.0))
        var.put('BUSY_STATE', Js(113.0))
        var.put('FINISH_STATE', Js(666.0))
        var.put('BS_NEED_MORE', Js(1.0))
        var.put('BS_BLOCK_DONE', Js(2.0))
        var.put('BS_FINISH_STARTED', Js(3.0))
        var.put('BS_FINISH_DONE', Js(4.0))
        var.put('OS_CODE', Js(3))
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        def PyJs_LONG_2177_(var=var):
            return var.put('configuration_table', Js([var.get('Config').create(Js(0.0), Js(0.0), Js(0.0), Js(0.0), var.get('deflate_stored')), var.get('Config').create(Js(4.0), Js(4.0), Js(8.0), Js(4.0), var.get('deflate_fast')), var.get('Config').create(Js(4.0), Js(5.0), Js(16.0), Js(8.0), var.get('deflate_fast')), var.get('Config').create(Js(4.0), Js(6.0), Js(32.0), Js(32.0), var.get('deflate_fast')), var.get('Config').create(Js(4.0), Js(4.0), Js(16.0), Js(16.0), var.get('deflate_slow')), var.get('Config').create(Js(8.0), Js(16.0), Js(32.0), Js(32.0), var.get('deflate_slow')), var.get('Config').create(Js(8.0), Js(16.0), Js(128.0), Js(128.0), var.get('deflate_slow')), var.get('Config').create(Js(8.0), Js(32.0), Js(128.0), Js(256.0), var.get('deflate_slow')), var.get('Config').create(Js(32.0), Js(128.0), Js(258.0), Js(1024.0), var.get('deflate_slow')), var.get('Config').create(Js(32.0), Js(258.0), Js(258.0), Js(4096.0), var.get('deflate_slow'))]))
        PyJs_LONG_2177_()
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        var.get('exports').put('deflateInit', var.get('deflateInit'))
        var.get('exports').put('deflateInit2', var.get('deflateInit2'))
        var.get('exports').put('deflateReset', var.get('deflateReset'))
        var.get('exports').put('deflateResetKeep', var.get('deflateResetKeep'))
        var.get('exports').put('deflateSetHeader', var.get('deflateSetHeader'))
        var.get('exports').put('deflate', var.get('deflate'))
        var.get('exports').put('deflateEnd', var.get('deflateEnd'))
        var.get('exports').put('deflateSetDictionary', var.get('deflateSetDictionary'))
        var.get('exports').put('deflateInfo', Js('pako deflate (from Nodeca project)'))
    PyJs_anonymous_2170_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2179_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['BAD', 'module', 'exports', 'TYPE', 'require'])
        Js('use strict')
        var.put('BAD', Js(30.0))
        var.put('TYPE', Js(12.0))
        @Js
        def PyJs_inflate_fast_2180_(strm, start, this, arguments, var=var):
            var = Scope({'strm':strm, 'start':start, 'this':this, 'arguments':arguments, 'inflate_fast':PyJs_inflate_fast_2180_}, var)
            var.registers(['start', 'op', 'from_source', 'lmask', 'whave', 'hold', 'dmask', 'last', 'state', 'bits', '_in', 'input', 'here', 'dist', 'dmax', 'beg', 'wnext', 'lcode', 'output', 'len', 'end', 'wsize', 'strm', '_out', 'dcode', 'from', 's_window'])
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            var.put('state', var.get('strm').get('state'))
            var.put('_in', var.get('strm').get('next_in'))
            var.put('input', var.get('strm').get('input'))
            var.put('last', (var.get('_in')+(var.get('strm').get('avail_in')-Js(5.0))))
            var.put('_out', var.get('strm').get('next_out'))
            var.put('output', var.get('strm').get('output'))
            var.put('beg', (var.get('_out')-(var.get('start')-var.get('strm').get('avail_out'))))
            var.put('end', (var.get('_out')+(var.get('strm').get('avail_out')-Js(257.0))))
            var.put('dmax', var.get('state').get('dmax'))
            var.put('wsize', var.get('state').get('wsize'))
            var.put('whave', var.get('state').get('whave'))
            var.put('wnext', var.get('state').get('wnext'))
            var.put('s_window', var.get('state').get('window'))
            var.put('hold', var.get('state').get('hold'))
            var.put('bits', var.get('state').get('bits'))
            var.put('lcode', var.get('state').get('lencode'))
            var.put('dcode', var.get('state').get('distcode'))
            var.put('lmask', ((Js(1.0)<<var.get('state').get('lenbits'))-Js(1.0)))
            var.put('dmask', ((Js(1.0)<<var.get('state').get('distbits'))-Js(1.0)))
            class JS_CONTINUE_LABEL_746f70(Exception): pass
            class JS_BREAK_LABEL_746f70(Exception): pass
            try:
                while 1:
                    try:
                        if (var.get('bits')<Js(15.0)):
                            var.put('hold', (var.get('input').get((var.put('_in',Js(var.get('_in').to_number())+Js(1))-Js(1)))<<var.get('bits')), '+')
                            var.put('bits', Js(8.0), '+')
                            var.put('hold', (var.get('input').get((var.put('_in',Js(var.get('_in').to_number())+Js(1))-Js(1)))<<var.get('bits')), '+')
                            var.put('bits', Js(8.0), '+')
                        var.put('here', var.get('lcode').get((var.get('hold')&var.get('lmask'))))
                        class JS_CONTINUE_LABEL_646f6c656e(Exception): pass
                        class JS_BREAK_LABEL_646f6c656e(Exception): pass
                        try:
                            #for JS loop
                            
                            while 1:
                                try:
                                    var.put('op', PyJsBshift(var.get('here'),Js(24.0)))
                                    var.put('hold', var.get('op'), '>>>')
                                    var.put('bits', var.get('op'), '-')
                                    var.put('op', (PyJsBshift(var.get('here'),Js(16.0))&Js(255)))
                                    if PyJsStrictEq(var.get('op'),Js(0.0)):
                                        var.get('output').put((var.put('_out',Js(var.get('_out').to_number())+Js(1))-Js(1)), (var.get('here')&Js(65535)))
                                    else:
                                        if (var.get('op')&Js(16.0)):
                                            var.put('len', (var.get('here')&Js(65535)))
                                            var.put('op', Js(15.0), '&')
                                            if var.get('op'):
                                                if (var.get('bits')<var.get('op')):
                                                    var.put('hold', (var.get('input').get((var.put('_in',Js(var.get('_in').to_number())+Js(1))-Js(1)))<<var.get('bits')), '+')
                                                    var.put('bits', Js(8.0), '+')
                                                var.put('len', (var.get('hold')&((Js(1.0)<<var.get('op'))-Js(1.0))), '+')
                                                var.put('hold', var.get('op'), '>>>')
                                                var.put('bits', var.get('op'), '-')
                                            if (var.get('bits')<Js(15.0)):
                                                var.put('hold', (var.get('input').get((var.put('_in',Js(var.get('_in').to_number())+Js(1))-Js(1)))<<var.get('bits')), '+')
                                                var.put('bits', Js(8.0), '+')
                                                var.put('hold', (var.get('input').get((var.put('_in',Js(var.get('_in').to_number())+Js(1))-Js(1)))<<var.get('bits')), '+')
                                                var.put('bits', Js(8.0), '+')
                                            var.put('here', var.get('dcode').get((var.get('hold')&var.get('dmask'))))
                                            class JS_CONTINUE_LABEL_646f64697374(Exception): pass
                                            class JS_BREAK_LABEL_646f64697374(Exception): pass
                                            try:
                                                #for JS loop
                                                
                                                while 1:
                                                    try:
                                                        var.put('op', PyJsBshift(var.get('here'),Js(24.0)))
                                                        var.put('hold', var.get('op'), '>>>')
                                                        var.put('bits', var.get('op'), '-')
                                                        var.put('op', (PyJsBshift(var.get('here'),Js(16.0))&Js(255)))
                                                        if (var.get('op')&Js(16.0)):
                                                            var.put('dist', (var.get('here')&Js(65535)))
                                                            var.put('op', Js(15.0), '&')
                                                            if (var.get('bits')<var.get('op')):
                                                                var.put('hold', (var.get('input').get((var.put('_in',Js(var.get('_in').to_number())+Js(1))-Js(1)))<<var.get('bits')), '+')
                                                                var.put('bits', Js(8.0), '+')
                                                                if (var.get('bits')<var.get('op')):
                                                                    var.put('hold', (var.get('input').get((var.put('_in',Js(var.get('_in').to_number())+Js(1))-Js(1)))<<var.get('bits')), '+')
                                                                    var.put('bits', Js(8.0), '+')
                                                            var.put('dist', (var.get('hold')&((Js(1.0)<<var.get('op'))-Js(1.0))), '+')
                                                            if (var.get('dist')>var.get('dmax')):
                                                                var.get('strm').put('msg', Js('invalid distance too far back'))
                                                                var.get('state').put('mode', var.get('BAD'))
                                                                raise JS_BREAK_LABEL_746f70("Breaked")
                                                            var.put('hold', var.get('op'), '>>>')
                                                            var.put('bits', var.get('op'), '-')
                                                            var.put('op', (var.get('_out')-var.get('beg')))
                                                            if (var.get('dist')>var.get('op')):
                                                                var.put('op', (var.get('dist')-var.get('op')))
                                                                if (var.get('op')>var.get('whave')):
                                                                    if var.get('state').get('sane'):
                                                                        var.get('strm').put('msg', Js('invalid distance too far back'))
                                                                        var.get('state').put('mode', var.get('BAD'))
                                                                        raise JS_BREAK_LABEL_746f70("Breaked")
                                                                var.put('from', Js(0.0))
                                                                var.put('from_source', var.get('s_window'))
                                                                if PyJsStrictEq(var.get('wnext'),Js(0.0)):
                                                                    var.put('from', (var.get('wsize')-var.get('op')), '+')
                                                                    if (var.get('op')<var.get('len')):
                                                                        var.put('len', var.get('op'), '-')
                                                                        while 1:
                                                                            var.get('output').put((var.put('_out',Js(var.get('_out').to_number())+Js(1))-Js(1)), var.get('s_window').get((var.put('from',Js(var.get('from').to_number())+Js(1))-Js(1))))
                                                                            if not var.put('op',Js(var.get('op').to_number())-Js(1)):
                                                                                break
                                                                        var.put('from', (var.get('_out')-var.get('dist')))
                                                                        var.put('from_source', var.get('output'))
                                                                else:
                                                                    if (var.get('wnext')<var.get('op')):
                                                                        var.put('from', ((var.get('wsize')+var.get('wnext'))-var.get('op')), '+')
                                                                        var.put('op', var.get('wnext'), '-')
                                                                        if (var.get('op')<var.get('len')):
                                                                            var.put('len', var.get('op'), '-')
                                                                            while 1:
                                                                                var.get('output').put((var.put('_out',Js(var.get('_out').to_number())+Js(1))-Js(1)), var.get('s_window').get((var.put('from',Js(var.get('from').to_number())+Js(1))-Js(1))))
                                                                                if not var.put('op',Js(var.get('op').to_number())-Js(1)):
                                                                                    break
                                                                            var.put('from', Js(0.0))
                                                                            if (var.get('wnext')<var.get('len')):
                                                                                var.put('op', var.get('wnext'))
                                                                                var.put('len', var.get('op'), '-')
                                                                                while 1:
                                                                                    var.get('output').put((var.put('_out',Js(var.get('_out').to_number())+Js(1))-Js(1)), var.get('s_window').get((var.put('from',Js(var.get('from').to_number())+Js(1))-Js(1))))
                                                                                    if not var.put('op',Js(var.get('op').to_number())-Js(1)):
                                                                                        break
                                                                                var.put('from', (var.get('_out')-var.get('dist')))
                                                                                var.put('from_source', var.get('output'))
                                                                    else:
                                                                        var.put('from', (var.get('wnext')-var.get('op')), '+')
                                                                        if (var.get('op')<var.get('len')):
                                                                            var.put('len', var.get('op'), '-')
                                                                            while 1:
                                                                                var.get('output').put((var.put('_out',Js(var.get('_out').to_number())+Js(1))-Js(1)), var.get('s_window').get((var.put('from',Js(var.get('from').to_number())+Js(1))-Js(1))))
                                                                                if not var.put('op',Js(var.get('op').to_number())-Js(1)):
                                                                                    break
                                                                            var.put('from', (var.get('_out')-var.get('dist')))
                                                                            var.put('from_source', var.get('output'))
                                                                while (var.get('len')>Js(2.0)):
                                                                    var.get('output').put((var.put('_out',Js(var.get('_out').to_number())+Js(1))-Js(1)), var.get('from_source').get((var.put('from',Js(var.get('from').to_number())+Js(1))-Js(1))))
                                                                    var.get('output').put((var.put('_out',Js(var.get('_out').to_number())+Js(1))-Js(1)), var.get('from_source').get((var.put('from',Js(var.get('from').to_number())+Js(1))-Js(1))))
                                                                    var.get('output').put((var.put('_out',Js(var.get('_out').to_number())+Js(1))-Js(1)), var.get('from_source').get((var.put('from',Js(var.get('from').to_number())+Js(1))-Js(1))))
                                                                    var.put('len', Js(3.0), '-')
                                                                if var.get('len'):
                                                                    var.get('output').put((var.put('_out',Js(var.get('_out').to_number())+Js(1))-Js(1)), var.get('from_source').get((var.put('from',Js(var.get('from').to_number())+Js(1))-Js(1))))
                                                                    if (var.get('len')>Js(1.0)):
                                                                        var.get('output').put((var.put('_out',Js(var.get('_out').to_number())+Js(1))-Js(1)), var.get('from_source').get((var.put('from',Js(var.get('from').to_number())+Js(1))-Js(1))))
                                                            else:
                                                                var.put('from', (var.get('_out')-var.get('dist')))
                                                                while 1:
                                                                    var.get('output').put((var.put('_out',Js(var.get('_out').to_number())+Js(1))-Js(1)), var.get('output').get((var.put('from',Js(var.get('from').to_number())+Js(1))-Js(1))))
                                                                    var.get('output').put((var.put('_out',Js(var.get('_out').to_number())+Js(1))-Js(1)), var.get('output').get((var.put('from',Js(var.get('from').to_number())+Js(1))-Js(1))))
                                                                    var.get('output').put((var.put('_out',Js(var.get('_out').to_number())+Js(1))-Js(1)), var.get('output').get((var.put('from',Js(var.get('from').to_number())+Js(1))-Js(1))))
                                                                    var.put('len', Js(3.0), '-')
                                                                    if not (var.get('len')>Js(2.0)):
                                                                        break
                                                                if var.get('len'):
                                                                    var.get('output').put((var.put('_out',Js(var.get('_out').to_number())+Js(1))-Js(1)), var.get('output').get((var.put('from',Js(var.get('from').to_number())+Js(1))-Js(1))))
                                                                    if (var.get('len')>Js(1.0)):
                                                                        var.get('output').put((var.put('_out',Js(var.get('_out').to_number())+Js(1))-Js(1)), var.get('output').get((var.put('from',Js(var.get('from').to_number())+Js(1))-Js(1))))
                                                        else:
                                                            if PyJsStrictEq((var.get('op')&Js(64.0)),Js(0.0)):
                                                                var.put('here', var.get('dcode').get(((var.get('here')&Js(65535))+(var.get('hold')&((Js(1.0)<<var.get('op'))-Js(1.0))))))
                                                                raise JS_CONTINUE_LABEL_646f64697374("Continued")
                                                            else:
                                                                var.get('strm').put('msg', Js('invalid distance code'))
                                                                var.get('state').put('mode', var.get('BAD'))
                                                                raise JS_BREAK_LABEL_746f70("Breaked")
                                                        break
                                                    
                                                    except JS_CONTINUE_LABEL_646f64697374:
                                                        pass
                                            except JS_BREAK_LABEL_646f64697374:
                                                pass
                                        else:
                                            if PyJsStrictEq((var.get('op')&Js(64.0)),Js(0.0)):
                                                var.put('here', var.get('lcode').get(((var.get('here')&Js(65535))+(var.get('hold')&((Js(1.0)<<var.get('op'))-Js(1.0))))))
                                                raise JS_CONTINUE_LABEL_646f6c656e("Continued")
                                            else:
                                                if (var.get('op')&Js(32.0)):
                                                    var.get('state').put('mode', var.get('TYPE'))
                                                    raise JS_BREAK_LABEL_746f70("Breaked")
                                                else:
                                                    var.get('strm').put('msg', Js('invalid literal/length code'))
                                                    var.get('state').put('mode', var.get('BAD'))
                                                    raise JS_BREAK_LABEL_746f70("Breaked")
                                    break
                                
                                except JS_CONTINUE_LABEL_646f6c656e:
                                    pass
                        except JS_BREAK_LABEL_646f6c656e:
                            pass
                        if not ((var.get('_in')<var.get('last')) and (var.get('_out')<var.get('end'))):
                            break
                    except JS_CONTINUE_LABEL_746f70:
                        pass
            except JS_BREAK_LABEL_746f70:
                pass
            var.put('len', (var.get('bits')>>Js(3.0)))
            var.put('_in', var.get('len'), '-')
            var.put('bits', (var.get('len')<<Js(3.0)), '-')
            var.put('hold', ((Js(1.0)<<var.get('bits'))-Js(1.0)), '&')
            var.get('strm').put('next_in', var.get('_in'))
            var.get('strm').put('next_out', var.get('_out'))
            var.get('strm').put('avail_in', ((Js(5.0)+(var.get('last')-var.get('_in'))) if (var.get('_in')<var.get('last')) else (Js(5.0)-(var.get('_in')-var.get('last')))))
            var.get('strm').put('avail_out', ((Js(257.0)+(var.get('end')-var.get('_out'))) if (var.get('_out')<var.get('end')) else (Js(257.0)-(var.get('_out')-var.get('end')))))
            var.get('state').put('hold', var.get('hold'))
            var.get('state').put('bits', var.get('bits'))
            return var.get('undefined')
        PyJs_inflate_fast_2180_._set_name('inflate_fast')
        var.get('module').put('exports', PyJs_inflate_fast_2180_)
    PyJs_anonymous_2179_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2181_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['inflateResetKeep', 'BAD', 'MAX_WBITS', 'lenfix', 'TABLE', 'virgin', 'crc32', 'TIME', 'inflate_table', 'inflateReset', 'Z_DEFLATED', 'LENS', 'utils', 'DIST', 'MATCH', 'EXLEN', 'DISTS', 'inflateInit2', 'ENOUGH_DISTS', 'LEN_', 'Z_BLOCK', 'MEM', 'inflateSetDictionary', 'adler32', 'LENLENS', 'CODELENS', 'LENEXT', 'STORED', 'CODES', 'OS', 'HCRC', 'TYPEDO', 'inflateEnd', 'Z_BUF_ERROR', 'FLAGS', 'LEN', 'Z_STREAM_END', 'SYNC', 'distfix', 'COPY_', 'inflateReset2', 'DONE', 'DEF_WBITS', 'inflate', 'NAME', 'Z_TREES', 'LIT', 'zswap32', 'Z_FINISH', 'Z_NEED_DICT', 'require', 'inflateGetHeader', 'Z_MEM_ERROR', 'InflateState', 'CHECK', 'inflate_fast', 'module', 'Z_DATA_ERROR', 'DISTEXT', 'exports', 'DICTID', 'Z_OK', 'TYPE', 'updatewindow', 'LENGTH', 'COPY', 'inflateInit', 'HEAD', 'ENOUGH_LENS', 'Z_STREAM_ERROR', 'DICT', 'COMMENT', 'EXTRA', 'fixedtables'])
        @Js
        def PyJsHoisted_zswap32_(q, this, arguments, var=var):
            var = Scope({'q':q, 'this':this, 'arguments':arguments}, var)
            var.registers(['q'])
            return ((((PyJsBshift(var.get('q'),Js(24.0))&Js(255))+(PyJsBshift(var.get('q'),Js(8.0))&Js(65280)))+((var.get('q')&Js(65280))<<Js(8.0)))+((var.get('q')&Js(255))<<Js(24.0)))
        PyJsHoisted_zswap32_.func_name = 'zswap32'
        var.put('zswap32', PyJsHoisted_zswap32_)
        @Js
        def PyJsHoisted_InflateState_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").put('mode', Js(0.0))
            var.get(u"this").put('last', Js(False))
            var.get(u"this").put('wrap', Js(0.0))
            var.get(u"this").put('havedict', Js(False))
            var.get(u"this").put('flags', Js(0.0))
            var.get(u"this").put('dmax', Js(0.0))
            var.get(u"this").put('check', Js(0.0))
            var.get(u"this").put('total', Js(0.0))
            var.get(u"this").put('head', var.get(u"null"))
            var.get(u"this").put('wbits', Js(0.0))
            var.get(u"this").put('wsize', Js(0.0))
            var.get(u"this").put('whave', Js(0.0))
            var.get(u"this").put('wnext', Js(0.0))
            var.get(u"this").put('window', var.get(u"null"))
            var.get(u"this").put('hold', Js(0.0))
            var.get(u"this").put('bits', Js(0.0))
            var.get(u"this").put('length', Js(0.0))
            var.get(u"this").put('offset', Js(0.0))
            var.get(u"this").put('extra', Js(0.0))
            var.get(u"this").put('lencode', var.get(u"null"))
            var.get(u"this").put('distcode', var.get(u"null"))
            var.get(u"this").put('lenbits', Js(0.0))
            var.get(u"this").put('distbits', Js(0.0))
            var.get(u"this").put('ncode', Js(0.0))
            var.get(u"this").put('nlen', Js(0.0))
            var.get(u"this").put('ndist', Js(0.0))
            var.get(u"this").put('have', Js(0.0))
            var.get(u"this").put('next', var.get(u"null"))
            var.get(u"this").put('lens', var.get('utils').get('Buf16').create(Js(320.0)))
            var.get(u"this").put('work', var.get('utils').get('Buf16').create(Js(288.0)))
            var.get(u"this").put('lendyn', var.get(u"null"))
            var.get(u"this").put('distdyn', var.get(u"null"))
            var.get(u"this").put('sane', Js(0.0))
            var.get(u"this").put('back', Js(0.0))
            var.get(u"this").put('was', Js(0.0))
        PyJsHoisted_InflateState_.func_name = 'InflateState'
        var.put('InflateState', PyJsHoisted_InflateState_)
        @Js
        def PyJsHoisted_inflateResetKeep_(strm, this, arguments, var=var):
            var = Scope({'strm':strm, 'this':this, 'arguments':arguments}, var)
            var.registers(['state', 'strm'])
            pass
            if (var.get('strm').neg() or var.get('strm').get('state').neg()):
                return var.get('Z_STREAM_ERROR')
            var.put('state', var.get('strm').get('state'))
            var.get('strm').put('total_in', var.get('strm').put('total_out', var.get('state').put('total', Js(0.0))))
            var.get('strm').put('msg', Js(''))
            if var.get('state').get('wrap'):
                var.get('strm').put('adler', (var.get('state').get('wrap')&Js(1.0)))
            var.get('state').put('mode', var.get('HEAD'))
            var.get('state').put('last', Js(0.0))
            var.get('state').put('havedict', Js(0.0))
            var.get('state').put('dmax', Js(32768.0))
            var.get('state').put('head', var.get(u"null"))
            var.get('state').put('hold', Js(0.0))
            var.get('state').put('bits', Js(0.0))
            var.get('state').put('lencode', var.get('state').put('lendyn', var.get('utils').get('Buf32').create(var.get('ENOUGH_LENS'))))
            var.get('state').put('distcode', var.get('state').put('distdyn', var.get('utils').get('Buf32').create(var.get('ENOUGH_DISTS'))))
            var.get('state').put('sane', Js(1.0))
            var.get('state').put('back', (-Js(1.0)))
            return var.get('Z_OK')
        PyJsHoisted_inflateResetKeep_.func_name = 'inflateResetKeep'
        var.put('inflateResetKeep', PyJsHoisted_inflateResetKeep_)
        @Js
        def PyJsHoisted_inflateReset_(strm, this, arguments, var=var):
            var = Scope({'strm':strm, 'this':this, 'arguments':arguments}, var)
            var.registers(['state', 'strm'])
            pass
            if (var.get('strm').neg() or var.get('strm').get('state').neg()):
                return var.get('Z_STREAM_ERROR')
            var.put('state', var.get('strm').get('state'))
            var.get('state').put('wsize', Js(0.0))
            var.get('state').put('whave', Js(0.0))
            var.get('state').put('wnext', Js(0.0))
            return var.get('inflateResetKeep')(var.get('strm'))
        PyJsHoisted_inflateReset_.func_name = 'inflateReset'
        var.put('inflateReset', PyJsHoisted_inflateReset_)
        @Js
        def PyJsHoisted_inflateReset2_(strm, windowBits, this, arguments, var=var):
            var = Scope({'strm':strm, 'windowBits':windowBits, 'this':this, 'arguments':arguments}, var)
            var.registers(['state', 'windowBits', 'wrap', 'strm'])
            pass
            pass
            if (var.get('strm').neg() or var.get('strm').get('state').neg()):
                return var.get('Z_STREAM_ERROR')
            var.put('state', var.get('strm').get('state'))
            if (var.get('windowBits')<Js(0.0)):
                var.put('wrap', Js(0.0))
                var.put('windowBits', (-var.get('windowBits')))
            else:
                var.put('wrap', ((var.get('windowBits')>>Js(4.0))+Js(1.0)))
                if (var.get('windowBits')<Js(48.0)):
                    var.put('windowBits', Js(15.0), '&')
            if (var.get('windowBits') and ((var.get('windowBits')<Js(8.0)) or (var.get('windowBits')>Js(15.0)))):
                return var.get('Z_STREAM_ERROR')
            if (PyJsStrictNeq(var.get('state').get('window'),var.get(u"null")) and PyJsStrictNeq(var.get('state').get('wbits'),var.get('windowBits'))):
                var.get('state').put('window', var.get(u"null"))
            var.get('state').put('wrap', var.get('wrap'))
            var.get('state').put('wbits', var.get('windowBits'))
            return var.get('inflateReset')(var.get('strm'))
        PyJsHoisted_inflateReset2_.func_name = 'inflateReset2'
        var.put('inflateReset2', PyJsHoisted_inflateReset2_)
        @Js
        def PyJsHoisted_inflateInit2_(strm, windowBits, this, arguments, var=var):
            var = Scope({'strm':strm, 'windowBits':windowBits, 'this':this, 'arguments':arguments}, var)
            var.registers(['state', 'windowBits', 'strm', 'ret'])
            pass
            pass
            if var.get('strm').neg():
                return var.get('Z_STREAM_ERROR')
            var.put('state', var.get('InflateState').create())
            var.get('strm').put('state', var.get('state'))
            var.get('state').put('window', var.get(u"null"))
            var.put('ret', var.get('inflateReset2')(var.get('strm'), var.get('windowBits')))
            if PyJsStrictNeq(var.get('ret'),var.get('Z_OK')):
                var.get('strm').put('state', var.get(u"null"))
            return var.get('ret')
        PyJsHoisted_inflateInit2_.func_name = 'inflateInit2'
        var.put('inflateInit2', PyJsHoisted_inflateInit2_)
        @Js
        def PyJsHoisted_inflateInit_(strm, this, arguments, var=var):
            var = Scope({'strm':strm, 'this':this, 'arguments':arguments}, var)
            var.registers(['strm'])
            return var.get('inflateInit2')(var.get('strm'), var.get('DEF_WBITS'))
        PyJsHoisted_inflateInit_.func_name = 'inflateInit'
        var.put('inflateInit', PyJsHoisted_inflateInit_)
        @Js
        def PyJsHoisted_fixedtables_(state, this, arguments, var=var):
            var = Scope({'state':state, 'this':this, 'arguments':arguments}, var)
            var.registers(['state', 'sym'])
            if var.get('virgin'):
                pass
                var.put('lenfix', var.get('utils').get('Buf32').create(Js(512.0)))
                var.put('distfix', var.get('utils').get('Buf32').create(Js(32.0)))
                var.put('sym', Js(0.0))
                while (var.get('sym')<Js(144.0)):
                    var.get('state').get('lens').put((var.put('sym',Js(var.get('sym').to_number())+Js(1))-Js(1)), Js(8.0))
                while (var.get('sym')<Js(256.0)):
                    var.get('state').get('lens').put((var.put('sym',Js(var.get('sym').to_number())+Js(1))-Js(1)), Js(9.0))
                while (var.get('sym')<Js(280.0)):
                    var.get('state').get('lens').put((var.put('sym',Js(var.get('sym').to_number())+Js(1))-Js(1)), Js(7.0))
                while (var.get('sym')<Js(288.0)):
                    var.get('state').get('lens').put((var.put('sym',Js(var.get('sym').to_number())+Js(1))-Js(1)), Js(8.0))
                var.get('inflate_table')(var.get('LENS'), var.get('state').get('lens'), Js(0.0), Js(288.0), var.get('lenfix'), Js(0.0), var.get('state').get('work'), Js({'bits':Js(9.0)}))
                var.put('sym', Js(0.0))
                while (var.get('sym')<Js(32.0)):
                    var.get('state').get('lens').put((var.put('sym',Js(var.get('sym').to_number())+Js(1))-Js(1)), Js(5.0))
                var.get('inflate_table')(var.get('DISTS'), var.get('state').get('lens'), Js(0.0), Js(32.0), var.get('distfix'), Js(0.0), var.get('state').get('work'), Js({'bits':Js(5.0)}))
                var.put('virgin', Js(False))
            var.get('state').put('lencode', var.get('lenfix'))
            var.get('state').put('lenbits', Js(9.0))
            var.get('state').put('distcode', var.get('distfix'))
            var.get('state').put('distbits', Js(5.0))
        PyJsHoisted_fixedtables_.func_name = 'fixedtables'
        var.put('fixedtables', PyJsHoisted_fixedtables_)
        @Js
        def PyJsHoisted_updatewindow_(strm, src, end, copy, this, arguments, var=var):
            var = Scope({'strm':strm, 'src':src, 'end':end, 'copy':copy, 'this':this, 'arguments':arguments}, var)
            var.registers(['state', 'end', 'dist', 'copy', 'strm', 'src'])
            pass
            var.put('state', var.get('strm').get('state'))
            if PyJsStrictEq(var.get('state').get('window'),var.get(u"null")):
                var.get('state').put('wsize', (Js(1.0)<<var.get('state').get('wbits')))
                var.get('state').put('wnext', Js(0.0))
                var.get('state').put('whave', Js(0.0))
                var.get('state').put('window', var.get('utils').get('Buf8').create(var.get('state').get('wsize')))
            if (var.get('copy')>=var.get('state').get('wsize')):
                var.get('utils').callprop('arraySet', var.get('state').get('window'), var.get('src'), (var.get('end')-var.get('state').get('wsize')), var.get('state').get('wsize'), Js(0.0))
                var.get('state').put('wnext', Js(0.0))
                var.get('state').put('whave', var.get('state').get('wsize'))
            else:
                var.put('dist', (var.get('state').get('wsize')-var.get('state').get('wnext')))
                if (var.get('dist')>var.get('copy')):
                    var.put('dist', var.get('copy'))
                var.get('utils').callprop('arraySet', var.get('state').get('window'), var.get('src'), (var.get('end')-var.get('copy')), var.get('dist'), var.get('state').get('wnext'))
                var.put('copy', var.get('dist'), '-')
                if var.get('copy'):
                    var.get('utils').callprop('arraySet', var.get('state').get('window'), var.get('src'), (var.get('end')-var.get('copy')), var.get('copy'), Js(0.0))
                    var.get('state').put('wnext', var.get('copy'))
                    var.get('state').put('whave', var.get('state').get('wsize'))
                else:
                    var.get('state').put('wnext', var.get('dist'), '+')
                    if PyJsStrictEq(var.get('state').get('wnext'),var.get('state').get('wsize')):
                        var.get('state').put('wnext', Js(0.0))
                    if (var.get('state').get('whave')<var.get('state').get('wsize')):
                        var.get('state').put('whave', var.get('dist'), '+')
            return Js(0.0)
        PyJsHoisted_updatewindow_.func_name = 'updatewindow'
        var.put('updatewindow', PyJsHoisted_updatewindow_)
        @Js
        def PyJsHoisted_inflate_(strm, flush, this, arguments, var=var):
            var = Scope({'strm':strm, 'flush':flush, 'this':this, 'arguments':arguments}, var)
            var.registers(['n', 'ret', 'have', 'from_source', 'here_op', 'hold', 'state', 'hbuf', 'input', 'bits', '_in', 'here', 'last_val', 'output', 'len', 'last_bits', 'here_val', 'copy', 'flush', 'strm', 'order', '_out', 'put', 'next', 'from', 'opts', 'here_bits', 'left', 'last_op'])
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            var.put('here', Js(0.0))
            pass
            pass
            pass
            pass
            var.put('hbuf', var.get('utils').get('Buf8').create(Js(4.0)))
            pass
            pass
            var.put('order', Js([Js(16.0), Js(17.0), Js(18.0), Js(0.0), Js(8.0), Js(7.0), Js(9.0), Js(6.0), Js(10.0), Js(5.0), Js(11.0), Js(4.0), Js(12.0), Js(3.0), Js(13.0), Js(2.0), Js(14.0), Js(1.0), Js(15.0)]))
            if (((var.get('strm').neg() or var.get('strm').get('state').neg()) or var.get('strm').get('output').neg()) or (var.get('strm').get('input').neg() and PyJsStrictNeq(var.get('strm').get('avail_in'),Js(0.0)))):
                return var.get('Z_STREAM_ERROR')
            var.put('state', var.get('strm').get('state'))
            if PyJsStrictEq(var.get('state').get('mode'),var.get('TYPE')):
                var.get('state').put('mode', var.get('TYPEDO'))
            var.put('put', var.get('strm').get('next_out'))
            var.put('output', var.get('strm').get('output'))
            var.put('left', var.get('strm').get('avail_out'))
            var.put('next', var.get('strm').get('next_in'))
            var.put('input', var.get('strm').get('input'))
            var.put('have', var.get('strm').get('avail_in'))
            var.put('hold', var.get('state').get('hold'))
            var.put('bits', var.get('state').get('bits'))
            var.put('_in', var.get('have'))
            var.put('_out', var.get('left'))
            var.put('ret', var.get('Z_OK'))
            class JS_CONTINUE_LABEL_696e665f6c65617665(Exception): pass
            class JS_BREAK_LABEL_696e665f6c65617665(Exception): pass
            try:
                #for JS loop
                
                while 1:
                    try:
                        while 1:
                            SWITCHED = False
                            CONDITION = (var.get('state').get('mode'))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('HEAD')):
                                SWITCHED = True
                                if PyJsStrictEq(var.get('state').get('wrap'),Js(0.0)):
                                    var.get('state').put('mode', var.get('TYPEDO'))
                                    break
                                while (var.get('bits')<Js(16.0)):
                                    if PyJsStrictEq(var.get('have'),Js(0.0)):
                                        raise JS_BREAK_LABEL_696e665f6c65617665("Breaked")
                                    (var.put('have',Js(var.get('have').to_number())-Js(1))+Js(1))
                                    var.put('hold', (var.get('input').get((var.put('next',Js(var.get('next').to_number())+Js(1))-Js(1)))<<var.get('bits')), '+')
                                    var.put('bits', Js(8.0), '+')
                                if ((var.get('state').get('wrap')&Js(2.0)) and PyJsStrictEq(var.get('hold'),Js(35615))):
                                    var.get('state').put('check', Js(0.0))
                                    var.get('hbuf').put('0', (var.get('hold')&Js(255)))
                                    var.get('hbuf').put('1', (PyJsBshift(var.get('hold'),Js(8.0))&Js(255)))
                                    var.get('state').put('check', var.get('crc32')(var.get('state').get('check'), var.get('hbuf'), Js(2.0), Js(0.0)))
                                    var.put('hold', Js(0.0))
                                    var.put('bits', Js(0.0))
                                    var.get('state').put('mode', var.get('FLAGS'))
                                    break
                                var.get('state').put('flags', Js(0.0))
                                if var.get('state').get('head'):
                                    var.get('state').get('head').put('done', Js(False))
                                if ((var.get('state').get('wrap')&Js(1.0)).neg() or ((((var.get('hold')&Js(255))<<Js(8.0))+(var.get('hold')>>Js(8.0)))%Js(31.0))):
                                    var.get('strm').put('msg', Js('incorrect header check'))
                                    var.get('state').put('mode', var.get('BAD'))
                                    break
                                if PyJsStrictNeq((var.get('hold')&Js(15)),var.get('Z_DEFLATED')):
                                    var.get('strm').put('msg', Js('unknown compression method'))
                                    var.get('state').put('mode', var.get('BAD'))
                                    break
                                var.put('hold', Js(4.0), '>>>')
                                var.put('bits', Js(4.0), '-')
                                var.put('len', ((var.get('hold')&Js(15))+Js(8.0)))
                                if PyJsStrictEq(var.get('state').get('wbits'),Js(0.0)):
                                    var.get('state').put('wbits', var.get('len'))
                                else:
                                    if (var.get('len')>var.get('state').get('wbits')):
                                        var.get('strm').put('msg', Js('invalid window size'))
                                        var.get('state').put('mode', var.get('BAD'))
                                        break
                                var.get('state').put('dmax', (Js(1.0)<<var.get('len')))
                                var.get('strm').put('adler', var.get('state').put('check', Js(1.0)))
                                var.get('state').put('mode', (var.get('DICTID') if (var.get('hold')&Js(512)) else var.get('TYPE')))
                                var.put('hold', Js(0.0))
                                var.put('bits', Js(0.0))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('FLAGS')):
                                SWITCHED = True
                                while (var.get('bits')<Js(16.0)):
                                    if PyJsStrictEq(var.get('have'),Js(0.0)):
                                        raise JS_BREAK_LABEL_696e665f6c65617665("Breaked")
                                    (var.put('have',Js(var.get('have').to_number())-Js(1))+Js(1))
                                    var.put('hold', (var.get('input').get((var.put('next',Js(var.get('next').to_number())+Js(1))-Js(1)))<<var.get('bits')), '+')
                                    var.put('bits', Js(8.0), '+')
                                var.get('state').put('flags', var.get('hold'))
                                if PyJsStrictNeq((var.get('state').get('flags')&Js(255)),var.get('Z_DEFLATED')):
                                    var.get('strm').put('msg', Js('unknown compression method'))
                                    var.get('state').put('mode', var.get('BAD'))
                                    break
                                if (var.get('state').get('flags')&Js(57344)):
                                    var.get('strm').put('msg', Js('unknown header flags set'))
                                    var.get('state').put('mode', var.get('BAD'))
                                    break
                                if var.get('state').get('head'):
                                    var.get('state').get('head').put('text', ((var.get('hold')>>Js(8.0))&Js(1.0)))
                                if (var.get('state').get('flags')&Js(512)):
                                    var.get('hbuf').put('0', (var.get('hold')&Js(255)))
                                    var.get('hbuf').put('1', (PyJsBshift(var.get('hold'),Js(8.0))&Js(255)))
                                    var.get('state').put('check', var.get('crc32')(var.get('state').get('check'), var.get('hbuf'), Js(2.0), Js(0.0)))
                                var.put('hold', Js(0.0))
                                var.put('bits', Js(0.0))
                                var.get('state').put('mode', var.get('TIME'))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('TIME')):
                                SWITCHED = True
                                while (var.get('bits')<Js(32.0)):
                                    if PyJsStrictEq(var.get('have'),Js(0.0)):
                                        raise JS_BREAK_LABEL_696e665f6c65617665("Breaked")
                                    (var.put('have',Js(var.get('have').to_number())-Js(1))+Js(1))
                                    var.put('hold', (var.get('input').get((var.put('next',Js(var.get('next').to_number())+Js(1))-Js(1)))<<var.get('bits')), '+')
                                    var.put('bits', Js(8.0), '+')
                                if var.get('state').get('head'):
                                    var.get('state').get('head').put('time', var.get('hold'))
                                if (var.get('state').get('flags')&Js(512)):
                                    var.get('hbuf').put('0', (var.get('hold')&Js(255)))
                                    var.get('hbuf').put('1', (PyJsBshift(var.get('hold'),Js(8.0))&Js(255)))
                                    var.get('hbuf').put('2', (PyJsBshift(var.get('hold'),Js(16.0))&Js(255)))
                                    var.get('hbuf').put('3', (PyJsBshift(var.get('hold'),Js(24.0))&Js(255)))
                                    var.get('state').put('check', var.get('crc32')(var.get('state').get('check'), var.get('hbuf'), Js(4.0), Js(0.0)))
                                var.put('hold', Js(0.0))
                                var.put('bits', Js(0.0))
                                var.get('state').put('mode', var.get('OS'))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('OS')):
                                SWITCHED = True
                                while (var.get('bits')<Js(16.0)):
                                    if PyJsStrictEq(var.get('have'),Js(0.0)):
                                        raise JS_BREAK_LABEL_696e665f6c65617665("Breaked")
                                    (var.put('have',Js(var.get('have').to_number())-Js(1))+Js(1))
                                    var.put('hold', (var.get('input').get((var.put('next',Js(var.get('next').to_number())+Js(1))-Js(1)))<<var.get('bits')), '+')
                                    var.put('bits', Js(8.0), '+')
                                if var.get('state').get('head'):
                                    var.get('state').get('head').put('xflags', (var.get('hold')&Js(255)))
                                    var.get('state').get('head').put('os', (var.get('hold')>>Js(8.0)))
                                if (var.get('state').get('flags')&Js(512)):
                                    var.get('hbuf').put('0', (var.get('hold')&Js(255)))
                                    var.get('hbuf').put('1', (PyJsBshift(var.get('hold'),Js(8.0))&Js(255)))
                                    var.get('state').put('check', var.get('crc32')(var.get('state').get('check'), var.get('hbuf'), Js(2.0), Js(0.0)))
                                var.put('hold', Js(0.0))
                                var.put('bits', Js(0.0))
                                var.get('state').put('mode', var.get('EXLEN'))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('EXLEN')):
                                SWITCHED = True
                                if (var.get('state').get('flags')&Js(1024)):
                                    while (var.get('bits')<Js(16.0)):
                                        if PyJsStrictEq(var.get('have'),Js(0.0)):
                                            raise JS_BREAK_LABEL_696e665f6c65617665("Breaked")
                                        (var.put('have',Js(var.get('have').to_number())-Js(1))+Js(1))
                                        var.put('hold', (var.get('input').get((var.put('next',Js(var.get('next').to_number())+Js(1))-Js(1)))<<var.get('bits')), '+')
                                        var.put('bits', Js(8.0), '+')
                                    var.get('state').put('length', var.get('hold'))
                                    if var.get('state').get('head'):
                                        var.get('state').get('head').put('extra_len', var.get('hold'))
                                    if (var.get('state').get('flags')&Js(512)):
                                        var.get('hbuf').put('0', (var.get('hold')&Js(255)))
                                        var.get('hbuf').put('1', (PyJsBshift(var.get('hold'),Js(8.0))&Js(255)))
                                        var.get('state').put('check', var.get('crc32')(var.get('state').get('check'), var.get('hbuf'), Js(2.0), Js(0.0)))
                                    var.put('hold', Js(0.0))
                                    var.put('bits', Js(0.0))
                                else:
                                    if var.get('state').get('head'):
                                        var.get('state').get('head').put('extra', var.get(u"null"))
                                var.get('state').put('mode', var.get('EXTRA'))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('EXTRA')):
                                SWITCHED = True
                                if (var.get('state').get('flags')&Js(1024)):
                                    var.put('copy', var.get('state').get('length'))
                                    if (var.get('copy')>var.get('have')):
                                        var.put('copy', var.get('have'))
                                    if var.get('copy'):
                                        if var.get('state').get('head'):
                                            var.put('len', (var.get('state').get('head').get('extra_len')-var.get('state').get('length')))
                                            if var.get('state').get('head').get('extra').neg():
                                                var.get('state').get('head').put('extra', var.get('Array').create(var.get('state').get('head').get('extra_len')))
                                            var.get('utils').callprop('arraySet', var.get('state').get('head').get('extra'), var.get('input'), var.get('next'), var.get('copy'), var.get('len'))
                                        if (var.get('state').get('flags')&Js(512)):
                                            var.get('state').put('check', var.get('crc32')(var.get('state').get('check'), var.get('input'), var.get('copy'), var.get('next')))
                                        var.put('have', var.get('copy'), '-')
                                        var.put('next', var.get('copy'), '+')
                                        var.get('state').put('length', var.get('copy'), '-')
                                    if var.get('state').get('length'):
                                        raise JS_BREAK_LABEL_696e665f6c65617665("Breaked")
                                var.get('state').put('length', Js(0.0))
                                var.get('state').put('mode', var.get('NAME'))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('NAME')):
                                SWITCHED = True
                                if (var.get('state').get('flags')&Js(2048)):
                                    if PyJsStrictEq(var.get('have'),Js(0.0)):
                                        raise JS_BREAK_LABEL_696e665f6c65617665("Breaked")
                                    var.put('copy', Js(0.0))
                                    while 1:
                                        var.put('len', var.get('input').get((var.get('next')+(var.put('copy',Js(var.get('copy').to_number())+Js(1))-Js(1)))))
                                        if ((var.get('state').get('head') and var.get('len')) and (var.get('state').get('length')<Js(65536.0))):
                                            var.get('state').get('head').put('name', var.get('String').callprop('fromCharCode', var.get('len')), '+')
                                        if not (var.get('len') and (var.get('copy')<var.get('have'))):
                                            break
                                    if (var.get('state').get('flags')&Js(512)):
                                        var.get('state').put('check', var.get('crc32')(var.get('state').get('check'), var.get('input'), var.get('copy'), var.get('next')))
                                    var.put('have', var.get('copy'), '-')
                                    var.put('next', var.get('copy'), '+')
                                    if var.get('len'):
                                        raise JS_BREAK_LABEL_696e665f6c65617665("Breaked")
                                else:
                                    if var.get('state').get('head'):
                                        var.get('state').get('head').put('name', var.get(u"null"))
                                var.get('state').put('length', Js(0.0))
                                var.get('state').put('mode', var.get('COMMENT'))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('COMMENT')):
                                SWITCHED = True
                                if (var.get('state').get('flags')&Js(4096)):
                                    if PyJsStrictEq(var.get('have'),Js(0.0)):
                                        raise JS_BREAK_LABEL_696e665f6c65617665("Breaked")
                                    var.put('copy', Js(0.0))
                                    while 1:
                                        var.put('len', var.get('input').get((var.get('next')+(var.put('copy',Js(var.get('copy').to_number())+Js(1))-Js(1)))))
                                        if ((var.get('state').get('head') and var.get('len')) and (var.get('state').get('length')<Js(65536.0))):
                                            var.get('state').get('head').put('comment', var.get('String').callprop('fromCharCode', var.get('len')), '+')
                                        if not (var.get('len') and (var.get('copy')<var.get('have'))):
                                            break
                                    if (var.get('state').get('flags')&Js(512)):
                                        var.get('state').put('check', var.get('crc32')(var.get('state').get('check'), var.get('input'), var.get('copy'), var.get('next')))
                                    var.put('have', var.get('copy'), '-')
                                    var.put('next', var.get('copy'), '+')
                                    if var.get('len'):
                                        raise JS_BREAK_LABEL_696e665f6c65617665("Breaked")
                                else:
                                    if var.get('state').get('head'):
                                        var.get('state').get('head').put('comment', var.get(u"null"))
                                var.get('state').put('mode', var.get('HCRC'))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('HCRC')):
                                SWITCHED = True
                                if (var.get('state').get('flags')&Js(512)):
                                    while (var.get('bits')<Js(16.0)):
                                        if PyJsStrictEq(var.get('have'),Js(0.0)):
                                            raise JS_BREAK_LABEL_696e665f6c65617665("Breaked")
                                        (var.put('have',Js(var.get('have').to_number())-Js(1))+Js(1))
                                        var.put('hold', (var.get('input').get((var.put('next',Js(var.get('next').to_number())+Js(1))-Js(1)))<<var.get('bits')), '+')
                                        var.put('bits', Js(8.0), '+')
                                    if PyJsStrictNeq(var.get('hold'),(var.get('state').get('check')&Js(65535))):
                                        var.get('strm').put('msg', Js('header crc mismatch'))
                                        var.get('state').put('mode', var.get('BAD'))
                                        break
                                    var.put('hold', Js(0.0))
                                    var.put('bits', Js(0.0))
                                if var.get('state').get('head'):
                                    var.get('state').get('head').put('hcrc', ((var.get('state').get('flags')>>Js(9.0))&Js(1.0)))
                                    var.get('state').get('head').put('done', Js(True))
                                var.get('strm').put('adler', var.get('state').put('check', Js(0.0)))
                                var.get('state').put('mode', var.get('TYPE'))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('DICTID')):
                                SWITCHED = True
                                while (var.get('bits')<Js(32.0)):
                                    if PyJsStrictEq(var.get('have'),Js(0.0)):
                                        raise JS_BREAK_LABEL_696e665f6c65617665("Breaked")
                                    (var.put('have',Js(var.get('have').to_number())-Js(1))+Js(1))
                                    var.put('hold', (var.get('input').get((var.put('next',Js(var.get('next').to_number())+Js(1))-Js(1)))<<var.get('bits')), '+')
                                    var.put('bits', Js(8.0), '+')
                                var.get('strm').put('adler', var.get('state').put('check', var.get('zswap32')(var.get('hold'))))
                                var.put('hold', Js(0.0))
                                var.put('bits', Js(0.0))
                                var.get('state').put('mode', var.get('DICT'))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('DICT')):
                                SWITCHED = True
                                if PyJsStrictEq(var.get('state').get('havedict'),Js(0.0)):
                                    var.get('strm').put('next_out', var.get('put'))
                                    var.get('strm').put('avail_out', var.get('left'))
                                    var.get('strm').put('next_in', var.get('next'))
                                    var.get('strm').put('avail_in', var.get('have'))
                                    var.get('state').put('hold', var.get('hold'))
                                    var.get('state').put('bits', var.get('bits'))
                                    return var.get('Z_NEED_DICT')
                                var.get('strm').put('adler', var.get('state').put('check', Js(1.0)))
                                var.get('state').put('mode', var.get('TYPE'))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('TYPE')):
                                SWITCHED = True
                                if (PyJsStrictEq(var.get('flush'),var.get('Z_BLOCK')) or PyJsStrictEq(var.get('flush'),var.get('Z_TREES'))):
                                    raise JS_BREAK_LABEL_696e665f6c65617665("Breaked")
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('TYPEDO')):
                                SWITCHED = True
                                if var.get('state').get('last'):
                                    var.put('hold', (var.get('bits')&Js(7.0)), '>>>')
                                    var.put('bits', (var.get('bits')&Js(7.0)), '-')
                                    var.get('state').put('mode', var.get('CHECK'))
                                    break
                                while (var.get('bits')<Js(3.0)):
                                    if PyJsStrictEq(var.get('have'),Js(0.0)):
                                        raise JS_BREAK_LABEL_696e665f6c65617665("Breaked")
                                    (var.put('have',Js(var.get('have').to_number())-Js(1))+Js(1))
                                    var.put('hold', (var.get('input').get((var.put('next',Js(var.get('next').to_number())+Js(1))-Js(1)))<<var.get('bits')), '+')
                                    var.put('bits', Js(8.0), '+')
                                var.get('state').put('last', (var.get('hold')&Js(1)))
                                var.put('hold', Js(1.0), '>>>')
                                var.put('bits', Js(1.0), '-')
                                while 1:
                                    SWITCHED = False
                                    CONDITION = ((var.get('hold')&Js(3)))
                                    if SWITCHED or PyJsStrictEq(CONDITION, Js(0.0)):
                                        SWITCHED = True
                                        var.get('state').put('mode', var.get('STORED'))
                                        break
                                    if SWITCHED or PyJsStrictEq(CONDITION, Js(1.0)):
                                        SWITCHED = True
                                        var.get('fixedtables')(var.get('state'))
                                        var.get('state').put('mode', var.get('LEN_'))
                                        if PyJsStrictEq(var.get('flush'),var.get('Z_TREES')):
                                            var.put('hold', Js(2.0), '>>>')
                                            var.put('bits', Js(2.0), '-')
                                            raise JS_BREAK_LABEL_696e665f6c65617665("Breaked")
                                        break
                                    if SWITCHED or PyJsStrictEq(CONDITION, Js(2.0)):
                                        SWITCHED = True
                                        var.get('state').put('mode', var.get('TABLE'))
                                        break
                                    if SWITCHED or PyJsStrictEq(CONDITION, Js(3.0)):
                                        SWITCHED = True
                                        var.get('strm').put('msg', Js('invalid block type'))
                                        var.get('state').put('mode', var.get('BAD'))
                                    SWITCHED = True
                                    break
                                var.put('hold', Js(2.0), '>>>')
                                var.put('bits', Js(2.0), '-')
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('STORED')):
                                SWITCHED = True
                                var.put('hold', (var.get('bits')&Js(7.0)), '>>>')
                                var.put('bits', (var.get('bits')&Js(7.0)), '-')
                                while (var.get('bits')<Js(32.0)):
                                    if PyJsStrictEq(var.get('have'),Js(0.0)):
                                        raise JS_BREAK_LABEL_696e665f6c65617665("Breaked")
                                    (var.put('have',Js(var.get('have').to_number())-Js(1))+Js(1))
                                    var.put('hold', (var.get('input').get((var.put('next',Js(var.get('next').to_number())+Js(1))-Js(1)))<<var.get('bits')), '+')
                                    var.put('bits', Js(8.0), '+')
                                if PyJsStrictNeq((var.get('hold')&Js(65535)),(PyJsBshift(var.get('hold'),Js(16.0))^Js(65535))):
                                    var.get('strm').put('msg', Js('invalid stored block lengths'))
                                    var.get('state').put('mode', var.get('BAD'))
                                    break
                                var.get('state').put('length', (var.get('hold')&Js(65535)))
                                var.put('hold', Js(0.0))
                                var.put('bits', Js(0.0))
                                var.get('state').put('mode', var.get('COPY_'))
                                if PyJsStrictEq(var.get('flush'),var.get('Z_TREES')):
                                    raise JS_BREAK_LABEL_696e665f6c65617665("Breaked")
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('COPY_')):
                                SWITCHED = True
                                var.get('state').put('mode', var.get('COPY'))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('COPY')):
                                SWITCHED = True
                                var.put('copy', var.get('state').get('length'))
                                if var.get('copy'):
                                    if (var.get('copy')>var.get('have')):
                                        var.put('copy', var.get('have'))
                                    if (var.get('copy')>var.get('left')):
                                        var.put('copy', var.get('left'))
                                    if PyJsStrictEq(var.get('copy'),Js(0.0)):
                                        raise JS_BREAK_LABEL_696e665f6c65617665("Breaked")
                                    var.get('utils').callprop('arraySet', var.get('output'), var.get('input'), var.get('next'), var.get('copy'), var.get('put'))
                                    var.put('have', var.get('copy'), '-')
                                    var.put('next', var.get('copy'), '+')
                                    var.put('left', var.get('copy'), '-')
                                    var.put('put', var.get('copy'), '+')
                                    var.get('state').put('length', var.get('copy'), '-')
                                    break
                                var.get('state').put('mode', var.get('TYPE'))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('TABLE')):
                                SWITCHED = True
                                while (var.get('bits')<Js(14.0)):
                                    if PyJsStrictEq(var.get('have'),Js(0.0)):
                                        raise JS_BREAK_LABEL_696e665f6c65617665("Breaked")
                                    (var.put('have',Js(var.get('have').to_number())-Js(1))+Js(1))
                                    var.put('hold', (var.get('input').get((var.put('next',Js(var.get('next').to_number())+Js(1))-Js(1)))<<var.get('bits')), '+')
                                    var.put('bits', Js(8.0), '+')
                                var.get('state').put('nlen', ((var.get('hold')&Js(31))+Js(257.0)))
                                var.put('hold', Js(5.0), '>>>')
                                var.put('bits', Js(5.0), '-')
                                var.get('state').put('ndist', ((var.get('hold')&Js(31))+Js(1.0)))
                                var.put('hold', Js(5.0), '>>>')
                                var.put('bits', Js(5.0), '-')
                                var.get('state').put('ncode', ((var.get('hold')&Js(15))+Js(4.0)))
                                var.put('hold', Js(4.0), '>>>')
                                var.put('bits', Js(4.0), '-')
                                if ((var.get('state').get('nlen')>Js(286.0)) or (var.get('state').get('ndist')>Js(30.0))):
                                    var.get('strm').put('msg', Js('too many length or distance symbols'))
                                    var.get('state').put('mode', var.get('BAD'))
                                    break
                                var.get('state').put('have', Js(0.0))
                                var.get('state').put('mode', var.get('LENLENS'))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('LENLENS')):
                                SWITCHED = True
                                while (var.get('state').get('have')<var.get('state').get('ncode')):
                                    while (var.get('bits')<Js(3.0)):
                                        if PyJsStrictEq(var.get('have'),Js(0.0)):
                                            raise JS_BREAK_LABEL_696e665f6c65617665("Breaked")
                                        (var.put('have',Js(var.get('have').to_number())-Js(1))+Js(1))
                                        var.put('hold', (var.get('input').get((var.put('next',Js(var.get('next').to_number())+Js(1))-Js(1)))<<var.get('bits')), '+')
                                        var.put('bits', Js(8.0), '+')
                                    var.get('state').get('lens').put(var.get('order').get((var.get('state').put('have',Js(var.get('state').get('have').to_number())+Js(1))-Js(1))), (var.get('hold')&Js(7)))
                                    var.put('hold', Js(3.0), '>>>')
                                    var.put('bits', Js(3.0), '-')
                                while (var.get('state').get('have')<Js(19.0)):
                                    var.get('state').get('lens').put(var.get('order').get((var.get('state').put('have',Js(var.get('state').get('have').to_number())+Js(1))-Js(1))), Js(0.0))
                                var.get('state').put('lencode', var.get('state').get('lendyn'))
                                var.get('state').put('lenbits', Js(7.0))
                                var.put('opts', Js({'bits':var.get('state').get('lenbits')}))
                                var.put('ret', var.get('inflate_table')(var.get('CODES'), var.get('state').get('lens'), Js(0.0), Js(19.0), var.get('state').get('lencode'), Js(0.0), var.get('state').get('work'), var.get('opts')))
                                var.get('state').put('lenbits', var.get('opts').get('bits'))
                                if var.get('ret'):
                                    var.get('strm').put('msg', Js('invalid code lengths set'))
                                    var.get('state').put('mode', var.get('BAD'))
                                    break
                                var.get('state').put('have', Js(0.0))
                                var.get('state').put('mode', var.get('CODELENS'))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('CODELENS')):
                                SWITCHED = True
                                while (var.get('state').get('have')<(var.get('state').get('nlen')+var.get('state').get('ndist'))):
                                    #for JS loop
                                    
                                    while 1:
                                        var.put('here', var.get('state').get('lencode').get((var.get('hold')&((Js(1.0)<<var.get('state').get('lenbits'))-Js(1.0)))))
                                        var.put('here_bits', PyJsBshift(var.get('here'),Js(24.0)))
                                        var.put('here_op', (PyJsBshift(var.get('here'),Js(16.0))&Js(255)))
                                        var.put('here_val', (var.get('here')&Js(65535)))
                                        if (var.get('here_bits')<=var.get('bits')):
                                            break
                                        if PyJsStrictEq(var.get('have'),Js(0.0)):
                                            raise JS_BREAK_LABEL_696e665f6c65617665("Breaked")
                                        (var.put('have',Js(var.get('have').to_number())-Js(1))+Js(1))
                                        var.put('hold', (var.get('input').get((var.put('next',Js(var.get('next').to_number())+Js(1))-Js(1)))<<var.get('bits')), '+')
                                        var.put('bits', Js(8.0), '+')
                                    
                                    if (var.get('here_val')<Js(16.0)):
                                        var.put('hold', var.get('here_bits'), '>>>')
                                        var.put('bits', var.get('here_bits'), '-')
                                        var.get('state').get('lens').put((var.get('state').put('have',Js(var.get('state').get('have').to_number())+Js(1))-Js(1)), var.get('here_val'))
                                    else:
                                        if PyJsStrictEq(var.get('here_val'),Js(16.0)):
                                            var.put('n', (var.get('here_bits')+Js(2.0)))
                                            while (var.get('bits')<var.get('n')):
                                                if PyJsStrictEq(var.get('have'),Js(0.0)):
                                                    raise JS_BREAK_LABEL_696e665f6c65617665("Breaked")
                                                (var.put('have',Js(var.get('have').to_number())-Js(1))+Js(1))
                                                var.put('hold', (var.get('input').get((var.put('next',Js(var.get('next').to_number())+Js(1))-Js(1)))<<var.get('bits')), '+')
                                                var.put('bits', Js(8.0), '+')
                                            var.put('hold', var.get('here_bits'), '>>>')
                                            var.put('bits', var.get('here_bits'), '-')
                                            if PyJsStrictEq(var.get('state').get('have'),Js(0.0)):
                                                var.get('strm').put('msg', Js('invalid bit length repeat'))
                                                var.get('state').put('mode', var.get('BAD'))
                                                break
                                            var.put('len', var.get('state').get('lens').get((var.get('state').get('have')-Js(1.0))))
                                            var.put('copy', (Js(3.0)+(var.get('hold')&Js(3))))
                                            var.put('hold', Js(2.0), '>>>')
                                            var.put('bits', Js(2.0), '-')
                                        else:
                                            if PyJsStrictEq(var.get('here_val'),Js(17.0)):
                                                var.put('n', (var.get('here_bits')+Js(3.0)))
                                                while (var.get('bits')<var.get('n')):
                                                    if PyJsStrictEq(var.get('have'),Js(0.0)):
                                                        raise JS_BREAK_LABEL_696e665f6c65617665("Breaked")
                                                    (var.put('have',Js(var.get('have').to_number())-Js(1))+Js(1))
                                                    var.put('hold', (var.get('input').get((var.put('next',Js(var.get('next').to_number())+Js(1))-Js(1)))<<var.get('bits')), '+')
                                                    var.put('bits', Js(8.0), '+')
                                                var.put('hold', var.get('here_bits'), '>>>')
                                                var.put('bits', var.get('here_bits'), '-')
                                                var.put('len', Js(0.0))
                                                var.put('copy', (Js(3.0)+(var.get('hold')&Js(7))))
                                                var.put('hold', Js(3.0), '>>>')
                                                var.put('bits', Js(3.0), '-')
                                            else:
                                                var.put('n', (var.get('here_bits')+Js(7.0)))
                                                while (var.get('bits')<var.get('n')):
                                                    if PyJsStrictEq(var.get('have'),Js(0.0)):
                                                        raise JS_BREAK_LABEL_696e665f6c65617665("Breaked")
                                                    (var.put('have',Js(var.get('have').to_number())-Js(1))+Js(1))
                                                    var.put('hold', (var.get('input').get((var.put('next',Js(var.get('next').to_number())+Js(1))-Js(1)))<<var.get('bits')), '+')
                                                    var.put('bits', Js(8.0), '+')
                                                var.put('hold', var.get('here_bits'), '>>>')
                                                var.put('bits', var.get('here_bits'), '-')
                                                var.put('len', Js(0.0))
                                                var.put('copy', (Js(11.0)+(var.get('hold')&Js(127))))
                                                var.put('hold', Js(7.0), '>>>')
                                                var.put('bits', Js(7.0), '-')
                                        if ((var.get('state').get('have')+var.get('copy'))>(var.get('state').get('nlen')+var.get('state').get('ndist'))):
                                            var.get('strm').put('msg', Js('invalid bit length repeat'))
                                            var.get('state').put('mode', var.get('BAD'))
                                            break
                                        while (var.put('copy',Js(var.get('copy').to_number())-Js(1))+Js(1)):
                                            var.get('state').get('lens').put((var.get('state').put('have',Js(var.get('state').get('have').to_number())+Js(1))-Js(1)), var.get('len'))
                                if PyJsStrictEq(var.get('state').get('mode'),var.get('BAD')):
                                    break
                                if PyJsStrictEq(var.get('state').get('lens').get('256'),Js(0.0)):
                                    var.get('strm').put('msg', Js('invalid code -- missing end-of-block'))
                                    var.get('state').put('mode', var.get('BAD'))
                                    break
                                var.get('state').put('lenbits', Js(9.0))
                                var.put('opts', Js({'bits':var.get('state').get('lenbits')}))
                                var.put('ret', var.get('inflate_table')(var.get('LENS'), var.get('state').get('lens'), Js(0.0), var.get('state').get('nlen'), var.get('state').get('lencode'), Js(0.0), var.get('state').get('work'), var.get('opts')))
                                var.get('state').put('lenbits', var.get('opts').get('bits'))
                                if var.get('ret'):
                                    var.get('strm').put('msg', Js('invalid literal/lengths set'))
                                    var.get('state').put('mode', var.get('BAD'))
                                    break
                                var.get('state').put('distbits', Js(6.0))
                                var.get('state').put('distcode', var.get('state').get('distdyn'))
                                var.put('opts', Js({'bits':var.get('state').get('distbits')}))
                                var.put('ret', var.get('inflate_table')(var.get('DISTS'), var.get('state').get('lens'), var.get('state').get('nlen'), var.get('state').get('ndist'), var.get('state').get('distcode'), Js(0.0), var.get('state').get('work'), var.get('opts')))
                                var.get('state').put('distbits', var.get('opts').get('bits'))
                                if var.get('ret'):
                                    var.get('strm').put('msg', Js('invalid distances set'))
                                    var.get('state').put('mode', var.get('BAD'))
                                    break
                                var.get('state').put('mode', var.get('LEN_'))
                                if PyJsStrictEq(var.get('flush'),var.get('Z_TREES')):
                                    raise JS_BREAK_LABEL_696e665f6c65617665("Breaked")
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('LEN_')):
                                SWITCHED = True
                                var.get('state').put('mode', var.get('LEN'))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('LEN')):
                                SWITCHED = True
                                if ((var.get('have')>=Js(6.0)) and (var.get('left')>=Js(258.0))):
                                    var.get('strm').put('next_out', var.get('put'))
                                    var.get('strm').put('avail_out', var.get('left'))
                                    var.get('strm').put('next_in', var.get('next'))
                                    var.get('strm').put('avail_in', var.get('have'))
                                    var.get('state').put('hold', var.get('hold'))
                                    var.get('state').put('bits', var.get('bits'))
                                    var.get('inflate_fast')(var.get('strm'), var.get('_out'))
                                    var.put('put', var.get('strm').get('next_out'))
                                    var.put('output', var.get('strm').get('output'))
                                    var.put('left', var.get('strm').get('avail_out'))
                                    var.put('next', var.get('strm').get('next_in'))
                                    var.put('input', var.get('strm').get('input'))
                                    var.put('have', var.get('strm').get('avail_in'))
                                    var.put('hold', var.get('state').get('hold'))
                                    var.put('bits', var.get('state').get('bits'))
                                    if PyJsStrictEq(var.get('state').get('mode'),var.get('TYPE')):
                                        var.get('state').put('back', (-Js(1.0)))
                                    break
                                var.get('state').put('back', Js(0.0))
                                #for JS loop
                                
                                while 1:
                                    var.put('here', var.get('state').get('lencode').get((var.get('hold')&((Js(1.0)<<var.get('state').get('lenbits'))-Js(1.0)))))
                                    var.put('here_bits', PyJsBshift(var.get('here'),Js(24.0)))
                                    var.put('here_op', (PyJsBshift(var.get('here'),Js(16.0))&Js(255)))
                                    var.put('here_val', (var.get('here')&Js(65535)))
                                    if (var.get('here_bits')<=var.get('bits')):
                                        break
                                    if PyJsStrictEq(var.get('have'),Js(0.0)):
                                        raise JS_BREAK_LABEL_696e665f6c65617665("Breaked")
                                    (var.put('have',Js(var.get('have').to_number())-Js(1))+Js(1))
                                    var.put('hold', (var.get('input').get((var.put('next',Js(var.get('next').to_number())+Js(1))-Js(1)))<<var.get('bits')), '+')
                                    var.put('bits', Js(8.0), '+')
                                
                                if (var.get('here_op') and PyJsStrictEq((var.get('here_op')&Js(240)),Js(0.0))):
                                    var.put('last_bits', var.get('here_bits'))
                                    var.put('last_op', var.get('here_op'))
                                    var.put('last_val', var.get('here_val'))
                                    #for JS loop
                                    
                                    while 1:
                                        var.put('here', var.get('state').get('lencode').get((var.get('last_val')+((var.get('hold')&((Js(1.0)<<(var.get('last_bits')+var.get('last_op')))-Js(1.0)))>>var.get('last_bits')))))
                                        var.put('here_bits', PyJsBshift(var.get('here'),Js(24.0)))
                                        var.put('here_op', (PyJsBshift(var.get('here'),Js(16.0))&Js(255)))
                                        var.put('here_val', (var.get('here')&Js(65535)))
                                        if ((var.get('last_bits')+var.get('here_bits'))<=var.get('bits')):
                                            break
                                        if PyJsStrictEq(var.get('have'),Js(0.0)):
                                            raise JS_BREAK_LABEL_696e665f6c65617665("Breaked")
                                        (var.put('have',Js(var.get('have').to_number())-Js(1))+Js(1))
                                        var.put('hold', (var.get('input').get((var.put('next',Js(var.get('next').to_number())+Js(1))-Js(1)))<<var.get('bits')), '+')
                                        var.put('bits', Js(8.0), '+')
                                    
                                    var.put('hold', var.get('last_bits'), '>>>')
                                    var.put('bits', var.get('last_bits'), '-')
                                    var.get('state').put('back', var.get('last_bits'), '+')
                                var.put('hold', var.get('here_bits'), '>>>')
                                var.put('bits', var.get('here_bits'), '-')
                                var.get('state').put('back', var.get('here_bits'), '+')
                                var.get('state').put('length', var.get('here_val'))
                                if PyJsStrictEq(var.get('here_op'),Js(0.0)):
                                    var.get('state').put('mode', var.get('LIT'))
                                    break
                                if (var.get('here_op')&Js(32.0)):
                                    var.get('state').put('back', (-Js(1.0)))
                                    var.get('state').put('mode', var.get('TYPE'))
                                    break
                                if (var.get('here_op')&Js(64.0)):
                                    var.get('strm').put('msg', Js('invalid literal/length code'))
                                    var.get('state').put('mode', var.get('BAD'))
                                    break
                                var.get('state').put('extra', (var.get('here_op')&Js(15.0)))
                                var.get('state').put('mode', var.get('LENEXT'))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('LENEXT')):
                                SWITCHED = True
                                if var.get('state').get('extra'):
                                    var.put('n', var.get('state').get('extra'))
                                    while (var.get('bits')<var.get('n')):
                                        if PyJsStrictEq(var.get('have'),Js(0.0)):
                                            raise JS_BREAK_LABEL_696e665f6c65617665("Breaked")
                                        (var.put('have',Js(var.get('have').to_number())-Js(1))+Js(1))
                                        var.put('hold', (var.get('input').get((var.put('next',Js(var.get('next').to_number())+Js(1))-Js(1)))<<var.get('bits')), '+')
                                        var.put('bits', Js(8.0), '+')
                                    var.get('state').put('length', (var.get('hold')&((Js(1.0)<<var.get('state').get('extra'))-Js(1.0))), '+')
                                    var.put('hold', var.get('state').get('extra'), '>>>')
                                    var.put('bits', var.get('state').get('extra'), '-')
                                    var.get('state').put('back', var.get('state').get('extra'), '+')
                                var.get('state').put('was', var.get('state').get('length'))
                                var.get('state').put('mode', var.get('DIST'))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('DIST')):
                                SWITCHED = True
                                #for JS loop
                                
                                while 1:
                                    var.put('here', var.get('state').get('distcode').get((var.get('hold')&((Js(1.0)<<var.get('state').get('distbits'))-Js(1.0)))))
                                    var.put('here_bits', PyJsBshift(var.get('here'),Js(24.0)))
                                    var.put('here_op', (PyJsBshift(var.get('here'),Js(16.0))&Js(255)))
                                    var.put('here_val', (var.get('here')&Js(65535)))
                                    if (var.get('here_bits')<=var.get('bits')):
                                        break
                                    if PyJsStrictEq(var.get('have'),Js(0.0)):
                                        raise JS_BREAK_LABEL_696e665f6c65617665("Breaked")
                                    (var.put('have',Js(var.get('have').to_number())-Js(1))+Js(1))
                                    var.put('hold', (var.get('input').get((var.put('next',Js(var.get('next').to_number())+Js(1))-Js(1)))<<var.get('bits')), '+')
                                    var.put('bits', Js(8.0), '+')
                                
                                if PyJsStrictEq((var.get('here_op')&Js(240)),Js(0.0)):
                                    var.put('last_bits', var.get('here_bits'))
                                    var.put('last_op', var.get('here_op'))
                                    var.put('last_val', var.get('here_val'))
                                    #for JS loop
                                    
                                    while 1:
                                        var.put('here', var.get('state').get('distcode').get((var.get('last_val')+((var.get('hold')&((Js(1.0)<<(var.get('last_bits')+var.get('last_op')))-Js(1.0)))>>var.get('last_bits')))))
                                        var.put('here_bits', PyJsBshift(var.get('here'),Js(24.0)))
                                        var.put('here_op', (PyJsBshift(var.get('here'),Js(16.0))&Js(255)))
                                        var.put('here_val', (var.get('here')&Js(65535)))
                                        if ((var.get('last_bits')+var.get('here_bits'))<=var.get('bits')):
                                            break
                                        if PyJsStrictEq(var.get('have'),Js(0.0)):
                                            raise JS_BREAK_LABEL_696e665f6c65617665("Breaked")
                                        (var.put('have',Js(var.get('have').to_number())-Js(1))+Js(1))
                                        var.put('hold', (var.get('input').get((var.put('next',Js(var.get('next').to_number())+Js(1))-Js(1)))<<var.get('bits')), '+')
                                        var.put('bits', Js(8.0), '+')
                                    
                                    var.put('hold', var.get('last_bits'), '>>>')
                                    var.put('bits', var.get('last_bits'), '-')
                                    var.get('state').put('back', var.get('last_bits'), '+')
                                var.put('hold', var.get('here_bits'), '>>>')
                                var.put('bits', var.get('here_bits'), '-')
                                var.get('state').put('back', var.get('here_bits'), '+')
                                if (var.get('here_op')&Js(64.0)):
                                    var.get('strm').put('msg', Js('invalid distance code'))
                                    var.get('state').put('mode', var.get('BAD'))
                                    break
                                var.get('state').put('offset', var.get('here_val'))
                                var.get('state').put('extra', (var.get('here_op')&Js(15.0)))
                                var.get('state').put('mode', var.get('DISTEXT'))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('DISTEXT')):
                                SWITCHED = True
                                if var.get('state').get('extra'):
                                    var.put('n', var.get('state').get('extra'))
                                    while (var.get('bits')<var.get('n')):
                                        if PyJsStrictEq(var.get('have'),Js(0.0)):
                                            raise JS_BREAK_LABEL_696e665f6c65617665("Breaked")
                                        (var.put('have',Js(var.get('have').to_number())-Js(1))+Js(1))
                                        var.put('hold', (var.get('input').get((var.put('next',Js(var.get('next').to_number())+Js(1))-Js(1)))<<var.get('bits')), '+')
                                        var.put('bits', Js(8.0), '+')
                                    var.get('state').put('offset', (var.get('hold')&((Js(1.0)<<var.get('state').get('extra'))-Js(1.0))), '+')
                                    var.put('hold', var.get('state').get('extra'), '>>>')
                                    var.put('bits', var.get('state').get('extra'), '-')
                                    var.get('state').put('back', var.get('state').get('extra'), '+')
                                if (var.get('state').get('offset')>var.get('state').get('dmax')):
                                    var.get('strm').put('msg', Js('invalid distance too far back'))
                                    var.get('state').put('mode', var.get('BAD'))
                                    break
                                var.get('state').put('mode', var.get('MATCH'))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('MATCH')):
                                SWITCHED = True
                                if PyJsStrictEq(var.get('left'),Js(0.0)):
                                    raise JS_BREAK_LABEL_696e665f6c65617665("Breaked")
                                var.put('copy', (var.get('_out')-var.get('left')))
                                if (var.get('state').get('offset')>var.get('copy')):
                                    var.put('copy', (var.get('state').get('offset')-var.get('copy')))
                                    if (var.get('copy')>var.get('state').get('whave')):
                                        if var.get('state').get('sane'):
                                            var.get('strm').put('msg', Js('invalid distance too far back'))
                                            var.get('state').put('mode', var.get('BAD'))
                                            break
                                    if (var.get('copy')>var.get('state').get('wnext')):
                                        var.put('copy', var.get('state').get('wnext'), '-')
                                        var.put('from', (var.get('state').get('wsize')-var.get('copy')))
                                    else:
                                        var.put('from', (var.get('state').get('wnext')-var.get('copy')))
                                    if (var.get('copy')>var.get('state').get('length')):
                                        var.put('copy', var.get('state').get('length'))
                                    var.put('from_source', var.get('state').get('window'))
                                else:
                                    var.put('from_source', var.get('output'))
                                    var.put('from', (var.get('put')-var.get('state').get('offset')))
                                    var.put('copy', var.get('state').get('length'))
                                if (var.get('copy')>var.get('left')):
                                    var.put('copy', var.get('left'))
                                var.put('left', var.get('copy'), '-')
                                var.get('state').put('length', var.get('copy'), '-')
                                while 1:
                                    var.get('output').put((var.put('put',Js(var.get('put').to_number())+Js(1))-Js(1)), var.get('from_source').get((var.put('from',Js(var.get('from').to_number())+Js(1))-Js(1))))
                                    if not var.put('copy',Js(var.get('copy').to_number())-Js(1)):
                                        break
                                if PyJsStrictEq(var.get('state').get('length'),Js(0.0)):
                                    var.get('state').put('mode', var.get('LEN'))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('LIT')):
                                SWITCHED = True
                                if PyJsStrictEq(var.get('left'),Js(0.0)):
                                    raise JS_BREAK_LABEL_696e665f6c65617665("Breaked")
                                var.get('output').put((var.put('put',Js(var.get('put').to_number())+Js(1))-Js(1)), var.get('state').get('length'))
                                (var.put('left',Js(var.get('left').to_number())-Js(1))+Js(1))
                                var.get('state').put('mode', var.get('LEN'))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('CHECK')):
                                SWITCHED = True
                                if var.get('state').get('wrap'):
                                    while (var.get('bits')<Js(32.0)):
                                        if PyJsStrictEq(var.get('have'),Js(0.0)):
                                            raise JS_BREAK_LABEL_696e665f6c65617665("Breaked")
                                        (var.put('have',Js(var.get('have').to_number())-Js(1))+Js(1))
                                        var.put('hold', (var.get('input').get((var.put('next',Js(var.get('next').to_number())+Js(1))-Js(1)))<<var.get('bits')), '|')
                                        var.put('bits', Js(8.0), '+')
                                    var.put('_out', var.get('left'), '-')
                                    var.get('strm').put('total_out', var.get('_out'), '+')
                                    var.get('state').put('total', var.get('_out'), '+')
                                    if var.get('_out'):
                                        var.get('strm').put('adler', var.get('state').put('check', (var.get('crc32')(var.get('state').get('check'), var.get('output'), var.get('_out'), (var.get('put')-var.get('_out'))) if var.get('state').get('flags') else var.get('adler32')(var.get('state').get('check'), var.get('output'), var.get('_out'), (var.get('put')-var.get('_out'))))))
                                    var.put('_out', var.get('left'))
                                    if PyJsStrictNeq((var.get('hold') if var.get('state').get('flags') else var.get('zswap32')(var.get('hold'))),var.get('state').get('check')):
                                        var.get('strm').put('msg', Js('incorrect data check'))
                                        var.get('state').put('mode', var.get('BAD'))
                                        break
                                    var.put('hold', Js(0.0))
                                    var.put('bits', Js(0.0))
                                var.get('state').put('mode', var.get('LENGTH'))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('LENGTH')):
                                SWITCHED = True
                                if (var.get('state').get('wrap') and var.get('state').get('flags')):
                                    while (var.get('bits')<Js(32.0)):
                                        if PyJsStrictEq(var.get('have'),Js(0.0)):
                                            raise JS_BREAK_LABEL_696e665f6c65617665("Breaked")
                                        (var.put('have',Js(var.get('have').to_number())-Js(1))+Js(1))
                                        var.put('hold', (var.get('input').get((var.put('next',Js(var.get('next').to_number())+Js(1))-Js(1)))<<var.get('bits')), '+')
                                        var.put('bits', Js(8.0), '+')
                                    if PyJsStrictNeq(var.get('hold'),(var.get('state').get('total')&Js(4294967295))):
                                        var.get('strm').put('msg', Js('incorrect length check'))
                                        var.get('state').put('mode', var.get('BAD'))
                                        break
                                    var.put('hold', Js(0.0))
                                    var.put('bits', Js(0.0))
                                var.get('state').put('mode', var.get('DONE'))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('DONE')):
                                SWITCHED = True
                                var.put('ret', var.get('Z_STREAM_END'))
                                raise JS_BREAK_LABEL_696e665f6c65617665("Breaked")
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('BAD')):
                                SWITCHED = True
                                var.put('ret', var.get('Z_DATA_ERROR'))
                                raise JS_BREAK_LABEL_696e665f6c65617665("Breaked")
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('MEM')):
                                SWITCHED = True
                                return var.get('Z_MEM_ERROR')
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('SYNC')):
                                SWITCHED = True
                                pass
                            if True:
                                SWITCHED = True
                                return var.get('Z_STREAM_ERROR')
                            SWITCHED = True
                            break
                    
                    except JS_CONTINUE_LABEL_696e665f6c65617665:
                        pass
            except JS_BREAK_LABEL_696e665f6c65617665:
                pass
            var.get('strm').put('next_out', var.get('put'))
            var.get('strm').put('avail_out', var.get('left'))
            var.get('strm').put('next_in', var.get('next'))
            var.get('strm').put('avail_in', var.get('have'))
            var.get('state').put('hold', var.get('hold'))
            var.get('state').put('bits', var.get('bits'))
            if (var.get('state').get('wsize') or ((PyJsStrictNeq(var.get('_out'),var.get('strm').get('avail_out')) and (var.get('state').get('mode')<var.get('BAD'))) and ((var.get('state').get('mode')<var.get('CHECK')) or PyJsStrictNeq(var.get('flush'),var.get('Z_FINISH'))))):
                if var.get('updatewindow')(var.get('strm'), var.get('strm').get('output'), var.get('strm').get('next_out'), (var.get('_out')-var.get('strm').get('avail_out'))):
                    var.get('state').put('mode', var.get('MEM'))
                    return var.get('Z_MEM_ERROR')
            var.put('_in', var.get('strm').get('avail_in'), '-')
            var.put('_out', var.get('strm').get('avail_out'), '-')
            var.get('strm').put('total_in', var.get('_in'), '+')
            var.get('strm').put('total_out', var.get('_out'), '+')
            var.get('state').put('total', var.get('_out'), '+')
            if (var.get('state').get('wrap') and var.get('_out')):
                var.get('strm').put('adler', var.get('state').put('check', (var.get('crc32')(var.get('state').get('check'), var.get('output'), var.get('_out'), (var.get('strm').get('next_out')-var.get('_out'))) if var.get('state').get('flags') else var.get('adler32')(var.get('state').get('check'), var.get('output'), var.get('_out'), (var.get('strm').get('next_out')-var.get('_out'))))))
            var.get('strm').put('data_type', (((var.get('state').get('bits')+(Js(64.0) if var.get('state').get('last') else Js(0.0)))+(Js(128.0) if PyJsStrictEq(var.get('state').get('mode'),var.get('TYPE')) else Js(0.0)))+(Js(256.0) if (PyJsStrictEq(var.get('state').get('mode'),var.get('LEN_')) or PyJsStrictEq(var.get('state').get('mode'),var.get('COPY_'))) else Js(0.0))))
            if (((PyJsStrictEq(var.get('_in'),Js(0.0)) and PyJsStrictEq(var.get('_out'),Js(0.0))) or PyJsStrictEq(var.get('flush'),var.get('Z_FINISH'))) and PyJsStrictEq(var.get('ret'),var.get('Z_OK'))):
                var.put('ret', var.get('Z_BUF_ERROR'))
            return var.get('ret')
        PyJsHoisted_inflate_.func_name = 'inflate'
        var.put('inflate', PyJsHoisted_inflate_)
        @Js
        def PyJsHoisted_inflateEnd_(strm, this, arguments, var=var):
            var = Scope({'strm':strm, 'this':this, 'arguments':arguments}, var)
            var.registers(['state', 'strm'])
            if (var.get('strm').neg() or var.get('strm').get('state').neg()):
                return var.get('Z_STREAM_ERROR')
            var.put('state', var.get('strm').get('state'))
            if var.get('state').get('window'):
                var.get('state').put('window', var.get(u"null"))
            var.get('strm').put('state', var.get(u"null"))
            return var.get('Z_OK')
        PyJsHoisted_inflateEnd_.func_name = 'inflateEnd'
        var.put('inflateEnd', PyJsHoisted_inflateEnd_)
        @Js
        def PyJsHoisted_inflateGetHeader_(strm, head, this, arguments, var=var):
            var = Scope({'strm':strm, 'head':head, 'this':this, 'arguments':arguments}, var)
            var.registers(['state', 'head', 'strm'])
            pass
            if (var.get('strm').neg() or var.get('strm').get('state').neg()):
                return var.get('Z_STREAM_ERROR')
            var.put('state', var.get('strm').get('state'))
            if PyJsStrictEq((var.get('state').get('wrap')&Js(2.0)),Js(0.0)):
                return var.get('Z_STREAM_ERROR')
            var.get('state').put('head', var.get('head'))
            var.get('head').put('done', Js(False))
            return var.get('Z_OK')
        PyJsHoisted_inflateGetHeader_.func_name = 'inflateGetHeader'
        var.put('inflateGetHeader', PyJsHoisted_inflateGetHeader_)
        @Js
        def PyJsHoisted_inflateSetDictionary_(strm, dictionary, this, arguments, var=var):
            var = Scope({'strm':strm, 'dictionary':dictionary, 'this':this, 'arguments':arguments}, var)
            var.registers(['dictLength', 'ret', 'state', 'dictionary', 'dictid', 'strm'])
            var.put('dictLength', var.get('dictionary').get('length'))
            pass
            pass
            pass
            if (var.get('strm').neg() or var.get('strm').get('state').neg()):
                return var.get('Z_STREAM_ERROR')
            var.put('state', var.get('strm').get('state'))
            if (PyJsStrictNeq(var.get('state').get('wrap'),Js(0.0)) and PyJsStrictNeq(var.get('state').get('mode'),var.get('DICT'))):
                return var.get('Z_STREAM_ERROR')
            if PyJsStrictEq(var.get('state').get('mode'),var.get('DICT')):
                var.put('dictid', Js(1.0))
                var.put('dictid', var.get('adler32')(var.get('dictid'), var.get('dictionary'), var.get('dictLength'), Js(0.0)))
                if PyJsStrictNeq(var.get('dictid'),var.get('state').get('check')):
                    return var.get('Z_DATA_ERROR')
            var.put('ret', var.get('updatewindow')(var.get('strm'), var.get('dictionary'), var.get('dictLength'), var.get('dictLength')))
            if var.get('ret'):
                var.get('state').put('mode', var.get('MEM'))
                return var.get('Z_MEM_ERROR')
            var.get('state').put('havedict', Js(1.0))
            return var.get('Z_OK')
        PyJsHoisted_inflateSetDictionary_.func_name = 'inflateSetDictionary'
        var.put('inflateSetDictionary', PyJsHoisted_inflateSetDictionary_)
        Js('use strict')
        var.put('utils', var.get('require')(Js('../utils/common')))
        var.put('adler32', var.get('require')(Js('./adler32')))
        var.put('crc32', var.get('require')(Js('./crc32')))
        var.put('inflate_fast', var.get('require')(Js('./inffast')))
        var.put('inflate_table', var.get('require')(Js('./inftrees')))
        var.put('CODES', Js(0.0))
        var.put('LENS', Js(1.0))
        var.put('DISTS', Js(2.0))
        var.put('Z_FINISH', Js(4.0))
        var.put('Z_BLOCK', Js(5.0))
        var.put('Z_TREES', Js(6.0))
        var.put('Z_OK', Js(0.0))
        var.put('Z_STREAM_END', Js(1.0))
        var.put('Z_NEED_DICT', Js(2.0))
        var.put('Z_STREAM_ERROR', (-Js(2.0)))
        var.put('Z_DATA_ERROR', (-Js(3.0)))
        var.put('Z_MEM_ERROR', (-Js(4.0)))
        var.put('Z_BUF_ERROR', (-Js(5.0)))
        var.put('Z_DEFLATED', Js(8.0))
        var.put('HEAD', Js(1.0))
        var.put('FLAGS', Js(2.0))
        var.put('TIME', Js(3.0))
        var.put('OS', Js(4.0))
        var.put('EXLEN', Js(5.0))
        var.put('EXTRA', Js(6.0))
        var.put('NAME', Js(7.0))
        var.put('COMMENT', Js(8.0))
        var.put('HCRC', Js(9.0))
        var.put('DICTID', Js(10.0))
        var.put('DICT', Js(11.0))
        var.put('TYPE', Js(12.0))
        var.put('TYPEDO', Js(13.0))
        var.put('STORED', Js(14.0))
        var.put('COPY_', Js(15.0))
        var.put('COPY', Js(16.0))
        var.put('TABLE', Js(17.0))
        var.put('LENLENS', Js(18.0))
        var.put('CODELENS', Js(19.0))
        var.put('LEN_', Js(20.0))
        var.put('LEN', Js(21.0))
        var.put('LENEXT', Js(22.0))
        var.put('DIST', Js(23.0))
        var.put('DISTEXT', Js(24.0))
        var.put('MATCH', Js(25.0))
        var.put('LIT', Js(26.0))
        var.put('CHECK', Js(27.0))
        var.put('LENGTH', Js(28.0))
        var.put('DONE', Js(29.0))
        var.put('BAD', Js(30.0))
        var.put('MEM', Js(31.0))
        var.put('SYNC', Js(32.0))
        var.put('ENOUGH_LENS', Js(852.0))
        var.put('ENOUGH_DISTS', Js(592.0))
        var.put('MAX_WBITS', Js(15.0))
        var.put('DEF_WBITS', var.get('MAX_WBITS'))
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        var.put('virgin', Js(True))
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        var.get('exports').put('inflateReset', var.get('inflateReset'))
        var.get('exports').put('inflateReset2', var.get('inflateReset2'))
        var.get('exports').put('inflateResetKeep', var.get('inflateResetKeep'))
        var.get('exports').put('inflateInit', var.get('inflateInit'))
        var.get('exports').put('inflateInit2', var.get('inflateInit2'))
        var.get('exports').put('inflate', var.get('inflate'))
        var.get('exports').put('inflateEnd', var.get('inflateEnd'))
        var.get('exports').put('inflateGetHeader', var.get('inflateGetHeader'))
        var.get('exports').put('inflateSetDictionary', var.get('inflateSetDictionary'))
        var.get('exports').put('inflateInfo', Js('pako inflate (from Nodeca project)'))
    PyJs_anonymous_2181_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2182_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['DISTS', 'module', 'ENOUGH_DISTS', 'utils', 'exports', 'dext', 'ENOUGH_LENS', 'LENS', 'MAXBITS', 'CODES', 'lext', 'require', 'dbase', 'lbase'])
        Js('use strict')
        var.put('utils', var.get('require')(Js('../utils/common')))
        var.put('MAXBITS', Js(15.0))
        var.put('ENOUGH_LENS', Js(852.0))
        var.put('ENOUGH_DISTS', Js(592.0))
        var.put('CODES', Js(0.0))
        var.put('LENS', Js(1.0))
        var.put('DISTS', Js(2.0))
        var.put('lbase', Js([Js(3.0), Js(4.0), Js(5.0), Js(6.0), Js(7.0), Js(8.0), Js(9.0), Js(10.0), Js(11.0), Js(13.0), Js(15.0), Js(17.0), Js(19.0), Js(23.0), Js(27.0), Js(31.0), Js(35.0), Js(43.0), Js(51.0), Js(59.0), Js(67.0), Js(83.0), Js(99.0), Js(115.0), Js(131.0), Js(163.0), Js(195.0), Js(227.0), Js(258.0), Js(0.0), Js(0.0)]))
        var.put('lext', Js([Js(16.0), Js(16.0), Js(16.0), Js(16.0), Js(16.0), Js(16.0), Js(16.0), Js(16.0), Js(17.0), Js(17.0), Js(17.0), Js(17.0), Js(18.0), Js(18.0), Js(18.0), Js(18.0), Js(19.0), Js(19.0), Js(19.0), Js(19.0), Js(20.0), Js(20.0), Js(20.0), Js(20.0), Js(21.0), Js(21.0), Js(21.0), Js(21.0), Js(16.0), Js(72.0), Js(78.0)]))
        var.put('dbase', Js([Js(1.0), Js(2.0), Js(3.0), Js(4.0), Js(5.0), Js(7.0), Js(9.0), Js(13.0), Js(17.0), Js(25.0), Js(33.0), Js(49.0), Js(65.0), Js(97.0), Js(129.0), Js(193.0), Js(257.0), Js(385.0), Js(513.0), Js(769.0), Js(1025.0), Js(1537.0), Js(2049.0), Js(3073.0), Js(4097.0), Js(6145.0), Js(8193.0), Js(12289.0), Js(16385.0), Js(24577.0), Js(0.0), Js(0.0)]))
        var.put('dext', Js([Js(16.0), Js(16.0), Js(16.0), Js(16.0), Js(17.0), Js(17.0), Js(18.0), Js(18.0), Js(19.0), Js(19.0), Js(20.0), Js(20.0), Js(21.0), Js(21.0), Js(22.0), Js(22.0), Js(23.0), Js(23.0), Js(24.0), Js(24.0), Js(25.0), Js(25.0), Js(26.0), Js(26.0), Js(27.0), Js(27.0), Js(28.0), Js(28.0), Js(29.0), Js(29.0), Js(64.0), Js(64.0)]))
        @Js
        def PyJs_inflate_table_2183_(type, lens, lens_index, codes, table, table_index, work, opts, this, arguments, var=var):
            var = Scope({'type':type, 'lens':lens, 'lens_index':lens_index, 'codes':codes, 'table':table, 'table_index':table_index, 'work':work, 'opts':opts, 'this':this, 'arguments':arguments, 'inflate_table':PyJs_inflate_table_2183_}, var)
            var.registers(['sym', 'table', 'base_index', 'count', 'root', 'low', 'extra_index', 'fill', 'here_op', 'offs', 'work', 'max', 'bits', 'extra', 'lens', 'base', 'mask', 'len', 'end', 'huff', 'incr', 'here_val', 'lens_index', 'curr', 'used', 'table_index', 'min', 'next', 'type', 'opts', 'here_bits', 'left', 'codes', 'drop'])
            var.put('bits', var.get('opts').get('bits'))
            var.put('len', Js(0.0))
            var.put('sym', Js(0.0))
            var.put('min', Js(0.0))
            var.put('max', Js(0.0))
            var.put('root', Js(0.0))
            var.put('curr', Js(0.0))
            var.put('drop', Js(0.0))
            var.put('left', Js(0.0))
            var.put('used', Js(0.0))
            var.put('huff', Js(0.0))
            pass
            pass
            pass
            pass
            pass
            var.put('base', var.get(u"null"))
            var.put('base_index', Js(0.0))
            pass
            var.put('count', var.get('utils').get('Buf16').create((var.get('MAXBITS')+Js(1.0))))
            var.put('offs', var.get('utils').get('Buf16').create((var.get('MAXBITS')+Js(1.0))))
            var.put('extra', var.get(u"null"))
            var.put('extra_index', Js(0.0))
            pass
            #for JS loop
            var.put('len', Js(0.0))
            while (var.get('len')<=var.get('MAXBITS')):
                try:
                    var.get('count').put(var.get('len'), Js(0.0))
                finally:
                        (var.put('len',Js(var.get('len').to_number())+Js(1))-Js(1))
            #for JS loop
            var.put('sym', Js(0.0))
            while (var.get('sym')<var.get('codes')):
                try:
                    (var.get('count').put(var.get('lens').get((var.get('lens_index')+var.get('sym'))),Js(var.get('count').get(var.get('lens').get((var.get('lens_index')+var.get('sym')))).to_number())+Js(1))-Js(1))
                finally:
                        (var.put('sym',Js(var.get('sym').to_number())+Js(1))-Js(1))
            var.put('root', var.get('bits'))
            #for JS loop
            var.put('max', var.get('MAXBITS'))
            while (var.get('max')>=Js(1.0)):
                try:
                    if PyJsStrictNeq(var.get('count').get(var.get('max')),Js(0.0)):
                        break
                finally:
                        (var.put('max',Js(var.get('max').to_number())-Js(1))+Js(1))
            if (var.get('root')>var.get('max')):
                var.put('root', var.get('max'))
            if PyJsStrictEq(var.get('max'),Js(0.0)):
                var.get('table').put((var.put('table_index',Js(var.get('table_index').to_number())+Js(1))-Js(1)), (((Js(1.0)<<Js(24.0))|(Js(64.0)<<Js(16.0)))|Js(0.0)))
                var.get('table').put((var.put('table_index',Js(var.get('table_index').to_number())+Js(1))-Js(1)), (((Js(1.0)<<Js(24.0))|(Js(64.0)<<Js(16.0)))|Js(0.0)))
                var.get('opts').put('bits', Js(1.0))
                return Js(0.0)
            #for JS loop
            var.put('min', Js(1.0))
            while (var.get('min')<var.get('max')):
                try:
                    if PyJsStrictNeq(var.get('count').get(var.get('min')),Js(0.0)):
                        break
                finally:
                        (var.put('min',Js(var.get('min').to_number())+Js(1))-Js(1))
            if (var.get('root')<var.get('min')):
                var.put('root', var.get('min'))
            var.put('left', Js(1.0))
            #for JS loop
            var.put('len', Js(1.0))
            while (var.get('len')<=var.get('MAXBITS')):
                try:
                    var.put('left', Js(1.0), '<<')
                    var.put('left', var.get('count').get(var.get('len')), '-')
                    if (var.get('left')<Js(0.0)):
                        return (-Js(1.0))
                finally:
                        (var.put('len',Js(var.get('len').to_number())+Js(1))-Js(1))
            if ((var.get('left')>Js(0.0)) and (PyJsStrictEq(var.get('type'),var.get('CODES')) or PyJsStrictNeq(var.get('max'),Js(1.0)))):
                return (-Js(1.0))
            var.get('offs').put('1', Js(0.0))
            #for JS loop
            var.put('len', Js(1.0))
            while (var.get('len')<var.get('MAXBITS')):
                try:
                    var.get('offs').put((var.get('len')+Js(1.0)), (var.get('offs').get(var.get('len'))+var.get('count').get(var.get('len'))))
                finally:
                        (var.put('len',Js(var.get('len').to_number())+Js(1))-Js(1))
            #for JS loop
            var.put('sym', Js(0.0))
            while (var.get('sym')<var.get('codes')):
                try:
                    if PyJsStrictNeq(var.get('lens').get((var.get('lens_index')+var.get('sym'))),Js(0.0)):
                        var.get('work').put((var.get('offs').put(var.get('lens').get((var.get('lens_index')+var.get('sym'))),Js(var.get('offs').get(var.get('lens').get((var.get('lens_index')+var.get('sym')))).to_number())+Js(1))-Js(1)), var.get('sym'))
                finally:
                        (var.put('sym',Js(var.get('sym').to_number())+Js(1))-Js(1))
            if PyJsStrictEq(var.get('type'),var.get('CODES')):
                var.put('base', var.put('extra', var.get('work')))
                var.put('end', Js(19.0))
            else:
                if PyJsStrictEq(var.get('type'),var.get('LENS')):
                    var.put('base', var.get('lbase'))
                    var.put('base_index', Js(257.0), '-')
                    var.put('extra', var.get('lext'))
                    var.put('extra_index', Js(257.0), '-')
                    var.put('end', Js(256.0))
                else:
                    var.put('base', var.get('dbase'))
                    var.put('extra', var.get('dext'))
                    var.put('end', (-Js(1.0)))
            var.put('huff', Js(0.0))
            var.put('sym', Js(0.0))
            var.put('len', var.get('min'))
            var.put('next', var.get('table_index'))
            var.put('curr', var.get('root'))
            var.put('drop', Js(0.0))
            var.put('low', (-Js(1.0)))
            var.put('used', (Js(1.0)<<var.get('root')))
            var.put('mask', (var.get('used')-Js(1.0)))
            if ((PyJsStrictEq(var.get('type'),var.get('LENS')) and (var.get('used')>var.get('ENOUGH_LENS'))) or (PyJsStrictEq(var.get('type'),var.get('DISTS')) and (var.get('used')>var.get('ENOUGH_DISTS')))):
                return Js(1.0)
            #for JS loop
            
            while 1:
                var.put('here_bits', (var.get('len')-var.get('drop')))
                if (var.get('work').get(var.get('sym'))<var.get('end')):
                    var.put('here_op', Js(0.0))
                    var.put('here_val', var.get('work').get(var.get('sym')))
                else:
                    if (var.get('work').get(var.get('sym'))>var.get('end')):
                        var.put('here_op', var.get('extra').get((var.get('extra_index')+var.get('work').get(var.get('sym')))))
                        var.put('here_val', var.get('base').get((var.get('base_index')+var.get('work').get(var.get('sym')))))
                    else:
                        var.put('here_op', (Js(32.0)+Js(64.0)))
                        var.put('here_val', Js(0.0))
                var.put('incr', (Js(1.0)<<(var.get('len')-var.get('drop'))))
                var.put('fill', (Js(1.0)<<var.get('curr')))
                var.put('min', var.get('fill'))
                while 1:
                    var.put('fill', var.get('incr'), '-')
                    var.get('table').put(((var.get('next')+(var.get('huff')>>var.get('drop')))+var.get('fill')), ((((var.get('here_bits')<<Js(24.0))|(var.get('here_op')<<Js(16.0)))|var.get('here_val'))|Js(0.0)))
                    if not PyJsStrictNeq(var.get('fill'),Js(0.0)):
                        break
                var.put('incr', (Js(1.0)<<(var.get('len')-Js(1.0))))
                while (var.get('huff')&var.get('incr')):
                    var.put('incr', Js(1.0), '>>')
                if PyJsStrictNeq(var.get('incr'),Js(0.0)):
                    var.put('huff', (var.get('incr')-Js(1.0)), '&')
                    var.put('huff', var.get('incr'), '+')
                else:
                    var.put('huff', Js(0.0))
                (var.put('sym',Js(var.get('sym').to_number())+Js(1))-Js(1))
                if PyJsStrictEq(var.get('count').put(var.get('len'),Js(var.get('count').get(var.get('len')).to_number())-Js(1)),Js(0.0)):
                    if PyJsStrictEq(var.get('len'),var.get('max')):
                        break
                    var.put('len', var.get('lens').get((var.get('lens_index')+var.get('work').get(var.get('sym')))))
                if ((var.get('len')>var.get('root')) and PyJsStrictNeq((var.get('huff')&var.get('mask')),var.get('low'))):
                    if PyJsStrictEq(var.get('drop'),Js(0.0)):
                        var.put('drop', var.get('root'))
                    var.put('next', var.get('min'), '+')
                    var.put('curr', (var.get('len')-var.get('drop')))
                    var.put('left', (Js(1.0)<<var.get('curr')))
                    while ((var.get('curr')+var.get('drop'))<var.get('max')):
                        var.put('left', var.get('count').get((var.get('curr')+var.get('drop'))), '-')
                        if (var.get('left')<=Js(0.0)):
                            break
                        (var.put('curr',Js(var.get('curr').to_number())+Js(1))-Js(1))
                        var.put('left', Js(1.0), '<<')
                    var.put('used', (Js(1.0)<<var.get('curr')), '+')
                    if ((PyJsStrictEq(var.get('type'),var.get('LENS')) and (var.get('used')>var.get('ENOUGH_LENS'))) or (PyJsStrictEq(var.get('type'),var.get('DISTS')) and (var.get('used')>var.get('ENOUGH_DISTS')))):
                        return Js(1.0)
                    var.put('low', (var.get('huff')&var.get('mask')))
                    var.get('table').put(var.get('low'), ((((var.get('root')<<Js(24.0))|(var.get('curr')<<Js(16.0)))|(var.get('next')-var.get('table_index')))|Js(0.0)))
            
            if PyJsStrictNeq(var.get('huff'),Js(0.0)):
                var.get('table').put((var.get('next')+var.get('huff')), ((((var.get('len')-var.get('drop'))<<Js(24.0))|(Js(64.0)<<Js(16.0)))|Js(0.0)))
            var.get('opts').put('bits', var.get('root'))
            return Js(0.0)
        PyJs_inflate_table_2183_._set_name('inflate_table')
        var.get('module').put('exports', PyJs_inflate_table_2183_)
    PyJs_anonymous_2182_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2184_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        Js('use strict')
        var.get('module').put('exports', Js({'2':Js('need dictionary'),'1':Js('stream end'),'0':Js(''),'-1':Js('file error'),'-2':Js('stream error'),'-3':Js('data error'),'-4':Js('insufficient memory'),'-5':Js('buffer error'),'-6':Js('incompatible version')}))
    PyJs_anonymous_2184_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2185_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['L_CODES', 'base_length', '_tr_align', 'Z_UNKNOWN', 'd_code', 'static_d_desc', 'HEAP_SIZE', 'DYN_TREES', 'send_tree', 'utils', 'extra_blbits', 'MIN_MATCH', 'detect_data_type', 'compress_block', 'TreeDesc', 'REPZ_3_10', 'exports', 'scan_tree', 'MAX_MATCH', 'Z_BINARY', 'zero', 'DIST_CODE_LEN', 'bi_reverse', '_tr_init', 'pqdownheap', '_tr_flush_block', 'copy_block', 'smaller', 'send_all_trees', 'send_code', '_tr_stored_block', 'D_CODES', 'END_BLOCK', 'static_ltree', 'gen_codes', '_tr_tally', 'tr_static_init', 'static_init_done', 'base_dist', 'MAX_BITS', 'extra_lbits', 'init_block', 'LITERALS', 'build_tree', 'require', 'STORED_BLOCK', '_length_code', 'StaticTreeDesc', '_dist_code', 'module', 'Z_FIXED', 'BL_CODES', 'bi_flush', 'LENGTH_CODES', 'MAX_BL_BITS', 'bl_order', 'REP_3_6', 'static_l_desc', 'put_short', 'static_dtree', 'extra_dbits', 'send_bits', 'build_bl_tree', 'STATIC_TREES', 'gen_bitlen', 'bi_windup', 'Buf_size', 'static_bl_desc', 'Z_TEXT', 'REPZ_11_138'])
        @Js
        def PyJsHoisted_zero_(buf, this, arguments, var=var):
            var = Scope({'buf':buf, 'this':this, 'arguments':arguments}, var)
            var.registers(['len', 'buf'])
            var.put('len', var.get('buf').get('length'))
            while (var.put('len',Js(var.get('len').to_number())-Js(1))>=Js(0.0)):
                var.get('buf').put(var.get('len'), Js(0.0))
        PyJsHoisted_zero_.func_name = 'zero'
        var.put('zero', PyJsHoisted_zero_)
        @Js
        def PyJsHoisted_StaticTreeDesc_(static_tree, extra_bits, extra_base, elems, max_length, this, arguments, var=var):
            var = Scope({'static_tree':static_tree, 'extra_bits':extra_bits, 'extra_base':extra_base, 'elems':elems, 'max_length':max_length, 'this':this, 'arguments':arguments}, var)
            var.registers(['elems', 'max_length', 'extra_bits', 'extra_base', 'static_tree'])
            var.get(u"this").put('static_tree', var.get('static_tree'))
            var.get(u"this").put('extra_bits', var.get('extra_bits'))
            var.get(u"this").put('extra_base', var.get('extra_base'))
            var.get(u"this").put('elems', var.get('elems'))
            var.get(u"this").put('max_length', var.get('max_length'))
            var.get(u"this").put('has_stree', (var.get('static_tree') and var.get('static_tree').get('length')))
        PyJsHoisted_StaticTreeDesc_.func_name = 'StaticTreeDesc'
        var.put('StaticTreeDesc', PyJsHoisted_StaticTreeDesc_)
        @Js
        def PyJsHoisted_TreeDesc_(dyn_tree, stat_desc, this, arguments, var=var):
            var = Scope({'dyn_tree':dyn_tree, 'stat_desc':stat_desc, 'this':this, 'arguments':arguments}, var)
            var.registers(['dyn_tree', 'stat_desc'])
            var.get(u"this").put('dyn_tree', var.get('dyn_tree'))
            var.get(u"this").put('max_code', Js(0.0))
            var.get(u"this").put('stat_desc', var.get('stat_desc'))
        PyJsHoisted_TreeDesc_.func_name = 'TreeDesc'
        var.put('TreeDesc', PyJsHoisted_TreeDesc_)
        @Js
        def PyJsHoisted_d_code_(dist, this, arguments, var=var):
            var = Scope({'dist':dist, 'this':this, 'arguments':arguments}, var)
            var.registers(['dist'])
            return (var.get('_dist_code').get(var.get('dist')) if (var.get('dist')<Js(256.0)) else var.get('_dist_code').get((Js(256.0)+PyJsBshift(var.get('dist'),Js(7.0)))))
        PyJsHoisted_d_code_.func_name = 'd_code'
        var.put('d_code', PyJsHoisted_d_code_)
        @Js
        def PyJsHoisted_put_short_(s, w, this, arguments, var=var):
            var = Scope({'s':s, 'w':w, 'this':this, 'arguments':arguments}, var)
            var.registers(['w', 's'])
            var.get('s').get('pending_buf').put((var.get('s').put('pending',Js(var.get('s').get('pending').to_number())+Js(1))-Js(1)), (var.get('w')&Js(255)))
            var.get('s').get('pending_buf').put((var.get('s').put('pending',Js(var.get('s').get('pending').to_number())+Js(1))-Js(1)), (PyJsBshift(var.get('w'),Js(8.0))&Js(255)))
        PyJsHoisted_put_short_.func_name = 'put_short'
        var.put('put_short', PyJsHoisted_put_short_)
        @Js
        def PyJsHoisted_send_bits_(s, value, length, this, arguments, var=var):
            var = Scope({'s':s, 'value':value, 'length':length, 'this':this, 'arguments':arguments}, var)
            var.registers(['length', 's', 'value'])
            if (var.get('s').get('bi_valid')>(var.get('Buf_size')-var.get('length'))):
                var.get('s').put('bi_buf', ((var.get('value')<<var.get('s').get('bi_valid'))&Js(65535)), '|')
                var.get('put_short')(var.get('s'), var.get('s').get('bi_buf'))
                var.get('s').put('bi_buf', (var.get('value')>>(var.get('Buf_size')-var.get('s').get('bi_valid'))))
                var.get('s').put('bi_valid', (var.get('length')-var.get('Buf_size')), '+')
            else:
                var.get('s').put('bi_buf', ((var.get('value')<<var.get('s').get('bi_valid'))&Js(65535)), '|')
                var.get('s').put('bi_valid', var.get('length'), '+')
        PyJsHoisted_send_bits_.func_name = 'send_bits'
        var.put('send_bits', PyJsHoisted_send_bits_)
        @Js
        def PyJsHoisted_send_code_(s, c, tree, this, arguments, var=var):
            var = Scope({'s':s, 'c':c, 'tree':tree, 'this':this, 'arguments':arguments}, var)
            var.registers(['c', 'tree', 's'])
            var.get('send_bits')(var.get('s'), var.get('tree').get((var.get('c')*Js(2.0))), var.get('tree').get(((var.get('c')*Js(2.0))+Js(1.0))))
        PyJsHoisted_send_code_.func_name = 'send_code'
        var.put('send_code', PyJsHoisted_send_code_)
        @Js
        def PyJsHoisted_bi_reverse_(code, len, this, arguments, var=var):
            var = Scope({'code':code, 'len':len, 'this':this, 'arguments':arguments}, var)
            var.registers(['len', 'res', 'code'])
            var.put('res', Js(0.0))
            while 1:
                var.put('res', (var.get('code')&Js(1.0)), '|')
                var.put('code', Js(1.0), '>>>')
                var.put('res', Js(1.0), '<<')
                if not (var.put('len',Js(var.get('len').to_number())-Js(1))>Js(0.0)):
                    break
            return PyJsBshift(var.get('res'),Js(1.0))
        PyJsHoisted_bi_reverse_.func_name = 'bi_reverse'
        var.put('bi_reverse', PyJsHoisted_bi_reverse_)
        @Js
        def PyJsHoisted_bi_flush_(s, this, arguments, var=var):
            var = Scope({'s':s, 'this':this, 'arguments':arguments}, var)
            var.registers(['s'])
            if PyJsStrictEq(var.get('s').get('bi_valid'),Js(16.0)):
                var.get('put_short')(var.get('s'), var.get('s').get('bi_buf'))
                var.get('s').put('bi_buf', Js(0.0))
                var.get('s').put('bi_valid', Js(0.0))
            else:
                if (var.get('s').get('bi_valid')>=Js(8.0)):
                    var.get('s').get('pending_buf').put((var.get('s').put('pending',Js(var.get('s').get('pending').to_number())+Js(1))-Js(1)), (var.get('s').get('bi_buf')&Js(255)))
                    var.get('s').put('bi_buf', Js(8.0), '>>')
                    var.get('s').put('bi_valid', Js(8.0), '-')
        PyJsHoisted_bi_flush_.func_name = 'bi_flush'
        var.put('bi_flush', PyJsHoisted_bi_flush_)
        @Js
        def PyJsHoisted_gen_bitlen_(s, desc, this, arguments, var=var):
            var = Scope({'s':s, 'desc':desc, 'this':this, 'arguments':arguments}, var)
            var.registers(['n', 'has_stree', 's', 'max_length', 'stree', 'bits', 'desc', 'h', 'extra', 'tree', 'm', 'xbits', 'max_code', 'base', 'f', 'overflow'])
            var.put('tree', var.get('desc').get('dyn_tree'))
            var.put('max_code', var.get('desc').get('max_code'))
            var.put('stree', var.get('desc').get('stat_desc').get('static_tree'))
            var.put('has_stree', var.get('desc').get('stat_desc').get('has_stree'))
            var.put('extra', var.get('desc').get('stat_desc').get('extra_bits'))
            var.put('base', var.get('desc').get('stat_desc').get('extra_base'))
            var.put('max_length', var.get('desc').get('stat_desc').get('max_length'))
            pass
            pass
            pass
            pass
            pass
            var.put('overflow', Js(0.0))
            #for JS loop
            var.put('bits', Js(0.0))
            while (var.get('bits')<=var.get('MAX_BITS')):
                try:
                    var.get('s').get('bl_count').put(var.get('bits'), Js(0.0))
                finally:
                        (var.put('bits',Js(var.get('bits').to_number())+Js(1))-Js(1))
            var.get('tree').put(((var.get('s').get('heap').get(var.get('s').get('heap_max'))*Js(2.0))+Js(1.0)), Js(0.0))
            #for JS loop
            var.put('h', (var.get('s').get('heap_max')+Js(1.0)))
            while (var.get('h')<var.get('HEAP_SIZE')):
                try:
                    var.put('n', var.get('s').get('heap').get(var.get('h')))
                    var.put('bits', (var.get('tree').get(((var.get('tree').get(((var.get('n')*Js(2.0))+Js(1.0)))*Js(2.0))+Js(1.0)))+Js(1.0)))
                    if (var.get('bits')>var.get('max_length')):
                        var.put('bits', var.get('max_length'))
                        (var.put('overflow',Js(var.get('overflow').to_number())+Js(1))-Js(1))
                    var.get('tree').put(((var.get('n')*Js(2.0))+Js(1.0)), var.get('bits'))
                    if (var.get('n')>var.get('max_code')):
                        continue
                    (var.get('s').get('bl_count').put(var.get('bits'),Js(var.get('s').get('bl_count').get(var.get('bits')).to_number())+Js(1))-Js(1))
                    var.put('xbits', Js(0.0))
                    if (var.get('n')>=var.get('base')):
                        var.put('xbits', var.get('extra').get((var.get('n')-var.get('base'))))
                    var.put('f', var.get('tree').get((var.get('n')*Js(2.0))))
                    var.get('s').put('opt_len', (var.get('f')*(var.get('bits')+var.get('xbits'))), '+')
                    if var.get('has_stree'):
                        var.get('s').put('static_len', (var.get('f')*(var.get('stree').get(((var.get('n')*Js(2.0))+Js(1.0)))+var.get('xbits'))), '+')
                finally:
                        (var.put('h',Js(var.get('h').to_number())+Js(1))-Js(1))
            if PyJsStrictEq(var.get('overflow'),Js(0.0)):
                return var.get('undefined')
            while 1:
                var.put('bits', (var.get('max_length')-Js(1.0)))
                while PyJsStrictEq(var.get('s').get('bl_count').get(var.get('bits')),Js(0.0)):
                    (var.put('bits',Js(var.get('bits').to_number())-Js(1))+Js(1))
                (var.get('s').get('bl_count').put(var.get('bits'),Js(var.get('s').get('bl_count').get(var.get('bits')).to_number())-Js(1))+Js(1))
                var.get('s').get('bl_count').put((var.get('bits')+Js(1.0)), Js(2.0), '+')
                (var.get('s').get('bl_count').put(var.get('max_length'),Js(var.get('s').get('bl_count').get(var.get('max_length')).to_number())-Js(1))+Js(1))
                var.put('overflow', Js(2.0), '-')
                if not (var.get('overflow')>Js(0.0)):
                    break
            #for JS loop
            var.put('bits', var.get('max_length'))
            while PyJsStrictNeq(var.get('bits'),Js(0.0)):
                try:
                    var.put('n', var.get('s').get('bl_count').get(var.get('bits')))
                    while PyJsStrictNeq(var.get('n'),Js(0.0)):
                        var.put('m', var.get('s').get('heap').get(var.put('h',Js(var.get('h').to_number())-Js(1))))
                        if (var.get('m')>var.get('max_code')):
                            continue
                        if PyJsStrictNeq(var.get('tree').get(((var.get('m')*Js(2.0))+Js(1.0))),var.get('bits')):
                            var.get('s').put('opt_len', ((var.get('bits')-var.get('tree').get(((var.get('m')*Js(2.0))+Js(1.0))))*var.get('tree').get((var.get('m')*Js(2.0)))), '+')
                            var.get('tree').put(((var.get('m')*Js(2.0))+Js(1.0)), var.get('bits'))
                        (var.put('n',Js(var.get('n').to_number())-Js(1))+Js(1))
                finally:
                        (var.put('bits',Js(var.get('bits').to_number())-Js(1))+Js(1))
        PyJsHoisted_gen_bitlen_.func_name = 'gen_bitlen'
        var.put('gen_bitlen', PyJsHoisted_gen_bitlen_)
        @Js
        def PyJsHoisted_gen_codes_(tree, max_code, bl_count, this, arguments, var=var):
            var = Scope({'tree':tree, 'max_code':max_code, 'bl_count':bl_count, 'this':this, 'arguments':arguments}, var)
            var.registers(['n', 'len', 'bl_count', 'bits', 'code', 'tree', 'max_code', 'next_code'])
            var.put('next_code', var.get('Array').create((var.get('MAX_BITS')+Js(1.0))))
            var.put('code', Js(0.0))
            pass
            pass
            #for JS loop
            var.put('bits', Js(1.0))
            while (var.get('bits')<=var.get('MAX_BITS')):
                try:
                    var.get('next_code').put(var.get('bits'), var.put('code', ((var.get('code')+var.get('bl_count').get((var.get('bits')-Js(1.0))))<<Js(1.0))))
                finally:
                        (var.put('bits',Js(var.get('bits').to_number())+Js(1))-Js(1))
            #for JS loop
            var.put('n', Js(0.0))
            while (var.get('n')<=var.get('max_code')):
                try:
                    var.put('len', var.get('tree').get(((var.get('n')*Js(2.0))+Js(1.0))))
                    if PyJsStrictEq(var.get('len'),Js(0.0)):
                        continue
                    var.get('tree').put((var.get('n')*Js(2.0)), var.get('bi_reverse')((var.get('next_code').put(var.get('len'),Js(var.get('next_code').get(var.get('len')).to_number())+Js(1))-Js(1)), var.get('len')))
                finally:
                        (var.put('n',Js(var.get('n').to_number())+Js(1))-Js(1))
        PyJsHoisted_gen_codes_.func_name = 'gen_codes'
        var.put('gen_codes', PyJsHoisted_gen_codes_)
        @Js
        def PyJsHoisted_tr_static_init_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['n', 'bl_count', 'bits', 'code', 'dist', 'length'])
            pass
            pass
            pass
            pass
            pass
            var.put('bl_count', var.get('Array').create((var.get('MAX_BITS')+Js(1.0))))
            var.put('length', Js(0.0))
            #for JS loop
            var.put('code', Js(0.0))
            while (var.get('code')<(var.get('LENGTH_CODES')-Js(1.0))):
                try:
                    var.get('base_length').put(var.get('code'), var.get('length'))
                    #for JS loop
                    var.put('n', Js(0.0))
                    while (var.get('n')<(Js(1.0)<<var.get('extra_lbits').get(var.get('code')))):
                        try:
                            var.get('_length_code').put((var.put('length',Js(var.get('length').to_number())+Js(1))-Js(1)), var.get('code'))
                        finally:
                                (var.put('n',Js(var.get('n').to_number())+Js(1))-Js(1))
                finally:
                        (var.put('code',Js(var.get('code').to_number())+Js(1))-Js(1))
            var.get('_length_code').put((var.get('length')-Js(1.0)), var.get('code'))
            var.put('dist', Js(0.0))
            #for JS loop
            var.put('code', Js(0.0))
            while (var.get('code')<Js(16.0)):
                try:
                    var.get('base_dist').put(var.get('code'), var.get('dist'))
                    #for JS loop
                    var.put('n', Js(0.0))
                    while (var.get('n')<(Js(1.0)<<var.get('extra_dbits').get(var.get('code')))):
                        try:
                            var.get('_dist_code').put((var.put('dist',Js(var.get('dist').to_number())+Js(1))-Js(1)), var.get('code'))
                        finally:
                                (var.put('n',Js(var.get('n').to_number())+Js(1))-Js(1))
                finally:
                        (var.put('code',Js(var.get('code').to_number())+Js(1))-Js(1))
            var.put('dist', Js(7.0), '>>')
            #for JS loop
            
            while (var.get('code')<var.get('D_CODES')):
                try:
                    var.get('base_dist').put(var.get('code'), (var.get('dist')<<Js(7.0)))
                    #for JS loop
                    var.put('n', Js(0.0))
                    while (var.get('n')<(Js(1.0)<<(var.get('extra_dbits').get(var.get('code'))-Js(7.0)))):
                        try:
                            var.get('_dist_code').put((Js(256.0)+(var.put('dist',Js(var.get('dist').to_number())+Js(1))-Js(1))), var.get('code'))
                        finally:
                                (var.put('n',Js(var.get('n').to_number())+Js(1))-Js(1))
                finally:
                        (var.put('code',Js(var.get('code').to_number())+Js(1))-Js(1))
            #for JS loop
            var.put('bits', Js(0.0))
            while (var.get('bits')<=var.get('MAX_BITS')):
                try:
                    var.get('bl_count').put(var.get('bits'), Js(0.0))
                finally:
                        (var.put('bits',Js(var.get('bits').to_number())+Js(1))-Js(1))
            var.put('n', Js(0.0))
            while (var.get('n')<=Js(143.0)):
                var.get('static_ltree').put(((var.get('n')*Js(2.0))+Js(1.0)), Js(8.0))
                (var.put('n',Js(var.get('n').to_number())+Js(1))-Js(1))
                (var.get('bl_count').put('8',Js(var.get('bl_count').get('8').to_number())+Js(1))-Js(1))
            while (var.get('n')<=Js(255.0)):
                var.get('static_ltree').put(((var.get('n')*Js(2.0))+Js(1.0)), Js(9.0))
                (var.put('n',Js(var.get('n').to_number())+Js(1))-Js(1))
                (var.get('bl_count').put('9',Js(var.get('bl_count').get('9').to_number())+Js(1))-Js(1))
            while (var.get('n')<=Js(279.0)):
                var.get('static_ltree').put(((var.get('n')*Js(2.0))+Js(1.0)), Js(7.0))
                (var.put('n',Js(var.get('n').to_number())+Js(1))-Js(1))
                (var.get('bl_count').put('7',Js(var.get('bl_count').get('7').to_number())+Js(1))-Js(1))
            while (var.get('n')<=Js(287.0)):
                var.get('static_ltree').put(((var.get('n')*Js(2.0))+Js(1.0)), Js(8.0))
                (var.put('n',Js(var.get('n').to_number())+Js(1))-Js(1))
                (var.get('bl_count').put('8',Js(var.get('bl_count').get('8').to_number())+Js(1))-Js(1))
            var.get('gen_codes')(var.get('static_ltree'), (var.get('L_CODES')+Js(1.0)), var.get('bl_count'))
            #for JS loop
            var.put('n', Js(0.0))
            while (var.get('n')<var.get('D_CODES')):
                try:
                    var.get('static_dtree').put(((var.get('n')*Js(2.0))+Js(1.0)), Js(5.0))
                    var.get('static_dtree').put((var.get('n')*Js(2.0)), var.get('bi_reverse')(var.get('n'), Js(5.0)))
                finally:
                        (var.put('n',Js(var.get('n').to_number())+Js(1))-Js(1))
            var.put('static_l_desc', var.get('StaticTreeDesc').create(var.get('static_ltree'), var.get('extra_lbits'), (var.get('LITERALS')+Js(1.0)), var.get('L_CODES'), var.get('MAX_BITS')))
            var.put('static_d_desc', var.get('StaticTreeDesc').create(var.get('static_dtree'), var.get('extra_dbits'), Js(0.0), var.get('D_CODES'), var.get('MAX_BITS')))
            var.put('static_bl_desc', var.get('StaticTreeDesc').create(var.get('Array').create(Js(0.0)), var.get('extra_blbits'), Js(0.0), var.get('BL_CODES'), var.get('MAX_BL_BITS')))
        PyJsHoisted_tr_static_init_.func_name = 'tr_static_init'
        var.put('tr_static_init', PyJsHoisted_tr_static_init_)
        @Js
        def PyJsHoisted_init_block_(s, this, arguments, var=var):
            var = Scope({'s':s, 'this':this, 'arguments':arguments}, var)
            var.registers(['n', 's'])
            pass
            #for JS loop
            var.put('n', Js(0.0))
            while (var.get('n')<var.get('L_CODES')):
                try:
                    var.get('s').get('dyn_ltree').put((var.get('n')*Js(2.0)), Js(0.0))
                finally:
                        (var.put('n',Js(var.get('n').to_number())+Js(1))-Js(1))
            #for JS loop
            var.put('n', Js(0.0))
            while (var.get('n')<var.get('D_CODES')):
                try:
                    var.get('s').get('dyn_dtree').put((var.get('n')*Js(2.0)), Js(0.0))
                finally:
                        (var.put('n',Js(var.get('n').to_number())+Js(1))-Js(1))
            #for JS loop
            var.put('n', Js(0.0))
            while (var.get('n')<var.get('BL_CODES')):
                try:
                    var.get('s').get('bl_tree').put((var.get('n')*Js(2.0)), Js(0.0))
                finally:
                        (var.put('n',Js(var.get('n').to_number())+Js(1))-Js(1))
            var.get('s').get('dyn_ltree').put((var.get('END_BLOCK')*Js(2.0)), Js(1.0))
            var.get('s').put('opt_len', var.get('s').put('static_len', Js(0.0)))
            var.get('s').put('last_lit', var.get('s').put('matches', Js(0.0)))
        PyJsHoisted_init_block_.func_name = 'init_block'
        var.put('init_block', PyJsHoisted_init_block_)
        @Js
        def PyJsHoisted_bi_windup_(s, this, arguments, var=var):
            var = Scope({'s':s, 'this':this, 'arguments':arguments}, var)
            var.registers(['s'])
            if (var.get('s').get('bi_valid')>Js(8.0)):
                var.get('put_short')(var.get('s'), var.get('s').get('bi_buf'))
            else:
                if (var.get('s').get('bi_valid')>Js(0.0)):
                    var.get('s').get('pending_buf').put((var.get('s').put('pending',Js(var.get('s').get('pending').to_number())+Js(1))-Js(1)), var.get('s').get('bi_buf'))
            var.get('s').put('bi_buf', Js(0.0))
            var.get('s').put('bi_valid', Js(0.0))
        PyJsHoisted_bi_windup_.func_name = 'bi_windup'
        var.put('bi_windup', PyJsHoisted_bi_windup_)
        @Js
        def PyJsHoisted_copy_block_(s, buf, len, header, this, arguments, var=var):
            var = Scope({'s':s, 'buf':buf, 'len':len, 'header':header, 'this':this, 'arguments':arguments}, var)
            var.registers(['len', 'buf', 's', 'header'])
            var.get('bi_windup')(var.get('s'))
            if var.get('header'):
                var.get('put_short')(var.get('s'), var.get('len'))
                var.get('put_short')(var.get('s'), (~var.get('len')))
            var.get('utils').callprop('arraySet', var.get('s').get('pending_buf'), var.get('s').get('window'), var.get('buf'), var.get('len'), var.get('s').get('pending'))
            var.get('s').put('pending', var.get('len'), '+')
        PyJsHoisted_copy_block_.func_name = 'copy_block'
        var.put('copy_block', PyJsHoisted_copy_block_)
        @Js
        def PyJsHoisted_smaller_(tree, n, m, depth, this, arguments, var=var):
            var = Scope({'tree':tree, 'n':n, 'm':m, 'depth':depth, 'this':this, 'arguments':arguments}, var)
            var.registers(['depth', 'n', 'm', '_m2', '_n2', 'tree'])
            var.put('_n2', (var.get('n')*Js(2.0)))
            var.put('_m2', (var.get('m')*Js(2.0)))
            return ((var.get('tree').get(var.get('_n2'))<var.get('tree').get(var.get('_m2'))) or (PyJsStrictEq(var.get('tree').get(var.get('_n2')),var.get('tree').get(var.get('_m2'))) and (var.get('depth').get(var.get('n'))<=var.get('depth').get(var.get('m')))))
        PyJsHoisted_smaller_.func_name = 'smaller'
        var.put('smaller', PyJsHoisted_smaller_)
        @Js
        def PyJsHoisted_pqdownheap_(s, tree, k, this, arguments, var=var):
            var = Scope({'s':s, 'tree':tree, 'k':k, 'this':this, 'arguments':arguments}, var)
            var.registers(['s', 'tree', 'k', 'v', 'j'])
            var.put('v', var.get('s').get('heap').get(var.get('k')))
            var.put('j', (var.get('k')<<Js(1.0)))
            while (var.get('j')<=var.get('s').get('heap_len')):
                if ((var.get('j')<var.get('s').get('heap_len')) and var.get('smaller')(var.get('tree'), var.get('s').get('heap').get((var.get('j')+Js(1.0))), var.get('s').get('heap').get(var.get('j')), var.get('s').get('depth'))):
                    (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                if var.get('smaller')(var.get('tree'), var.get('v'), var.get('s').get('heap').get(var.get('j')), var.get('s').get('depth')):
                    break
                var.get('s').get('heap').put(var.get('k'), var.get('s').get('heap').get(var.get('j')))
                var.put('k', var.get('j'))
                var.put('j', Js(1.0), '<<')
            var.get('s').get('heap').put(var.get('k'), var.get('v'))
        PyJsHoisted_pqdownheap_.func_name = 'pqdownheap'
        var.put('pqdownheap', PyJsHoisted_pqdownheap_)
        @Js
        def PyJsHoisted_compress_block_(s, ltree, dtree, this, arguments, var=var):
            var = Scope({'s':s, 'ltree':ltree, 'dtree':dtree, 'this':this, 'arguments':arguments}, var)
            var.registers(['lc', 's', 'dtree', 'code', 'extra', 'dist', 'lx', 'ltree'])
            pass
            pass
            var.put('lx', Js(0.0))
            pass
            pass
            if PyJsStrictNeq(var.get('s').get('last_lit'),Js(0.0)):
                while 1:
                    var.put('dist', ((var.get('s').get('pending_buf').get((var.get('s').get('d_buf')+(var.get('lx')*Js(2.0))))<<Js(8.0))|var.get('s').get('pending_buf').get(((var.get('s').get('d_buf')+(var.get('lx')*Js(2.0)))+Js(1.0)))))
                    var.put('lc', var.get('s').get('pending_buf').get((var.get('s').get('l_buf')+var.get('lx'))))
                    (var.put('lx',Js(var.get('lx').to_number())+Js(1))-Js(1))
                    if PyJsStrictEq(var.get('dist'),Js(0.0)):
                        var.get('send_code')(var.get('s'), var.get('lc'), var.get('ltree'))
                    else:
                        var.put('code', var.get('_length_code').get(var.get('lc')))
                        var.get('send_code')(var.get('s'), ((var.get('code')+var.get('LITERALS'))+Js(1.0)), var.get('ltree'))
                        var.put('extra', var.get('extra_lbits').get(var.get('code')))
                        if PyJsStrictNeq(var.get('extra'),Js(0.0)):
                            var.put('lc', var.get('base_length').get(var.get('code')), '-')
                            var.get('send_bits')(var.get('s'), var.get('lc'), var.get('extra'))
                        (var.put('dist',Js(var.get('dist').to_number())-Js(1))+Js(1))
                        var.put('code', var.get('d_code')(var.get('dist')))
                        var.get('send_code')(var.get('s'), var.get('code'), var.get('dtree'))
                        var.put('extra', var.get('extra_dbits').get(var.get('code')))
                        if PyJsStrictNeq(var.get('extra'),Js(0.0)):
                            var.put('dist', var.get('base_dist').get(var.get('code')), '-')
                            var.get('send_bits')(var.get('s'), var.get('dist'), var.get('extra'))
                    if not (var.get('lx')<var.get('s').get('last_lit')):
                        break
            var.get('send_code')(var.get('s'), var.get('END_BLOCK'), var.get('ltree'))
        PyJsHoisted_compress_block_.func_name = 'compress_block'
        var.put('compress_block', PyJsHoisted_compress_block_)
        @Js
        def PyJsHoisted_build_tree_(s, desc, this, arguments, var=var):
            var = Scope({'s':s, 'desc':desc, 'this':this, 'arguments':arguments}, var)
            var.registers(['n', 'has_stree', 's', 'elems', 'stree', 'desc', 'm', 'tree', 'max_code', 'node'])
            var.put('tree', var.get('desc').get('dyn_tree'))
            var.put('stree', var.get('desc').get('stat_desc').get('static_tree'))
            var.put('has_stree', var.get('desc').get('stat_desc').get('has_stree'))
            var.put('elems', var.get('desc').get('stat_desc').get('elems'))
            pass
            var.put('max_code', (-Js(1.0)))
            pass
            var.get('s').put('heap_len', Js(0.0))
            var.get('s').put('heap_max', var.get('HEAP_SIZE'))
            #for JS loop
            var.put('n', Js(0.0))
            while (var.get('n')<var.get('elems')):
                try:
                    if PyJsStrictNeq(var.get('tree').get((var.get('n')*Js(2.0))),Js(0.0)):
                        var.get('s').get('heap').put(var.get('s').put('heap_len',Js(var.get('s').get('heap_len').to_number())+Js(1)), var.put('max_code', var.get('n')))
                        var.get('s').get('depth').put(var.get('n'), Js(0.0))
                    else:
                        var.get('tree').put(((var.get('n')*Js(2.0))+Js(1.0)), Js(0.0))
                finally:
                        (var.put('n',Js(var.get('n').to_number())+Js(1))-Js(1))
            while (var.get('s').get('heap_len')<Js(2.0)):
                var.put('node', var.get('s').get('heap').put(var.get('s').put('heap_len',Js(var.get('s').get('heap_len').to_number())+Js(1)), (var.put('max_code',Js(var.get('max_code').to_number())+Js(1)) if (var.get('max_code')<Js(2.0)) else Js(0.0))))
                var.get('tree').put((var.get('node')*Js(2.0)), Js(1.0))
                var.get('s').get('depth').put(var.get('node'), Js(0.0))
                (var.get('s').put('opt_len',Js(var.get('s').get('opt_len').to_number())-Js(1))+Js(1))
                if var.get('has_stree'):
                    var.get('s').put('static_len', var.get('stree').get(((var.get('node')*Js(2.0))+Js(1.0))), '-')
            var.get('desc').put('max_code', var.get('max_code'))
            #for JS loop
            var.put('n', (var.get('s').get('heap_len')>>Js(1.0)))
            while (var.get('n')>=Js(1.0)):
                try:
                    var.get('pqdownheap')(var.get('s'), var.get('tree'), var.get('n'))
                finally:
                        (var.put('n',Js(var.get('n').to_number())-Js(1))+Js(1))
            var.put('node', var.get('elems'))
            while 1:
                var.put('n', var.get('s').get('heap').get('1'))
                var.get('s').get('heap').put('1', var.get('s').get('heap').get((var.get('s').put('heap_len',Js(var.get('s').get('heap_len').to_number())-Js(1))+Js(1))))
                var.get('pqdownheap')(var.get('s'), var.get('tree'), Js(1.0))
                var.put('m', var.get('s').get('heap').get('1'))
                var.get('s').get('heap').put(var.get('s').put('heap_max',Js(var.get('s').get('heap_max').to_number())-Js(1)), var.get('n'))
                var.get('s').get('heap').put(var.get('s').put('heap_max',Js(var.get('s').get('heap_max').to_number())-Js(1)), var.get('m'))
                var.get('tree').put((var.get('node')*Js(2.0)), (var.get('tree').get((var.get('n')*Js(2.0)))+var.get('tree').get((var.get('m')*Js(2.0)))))
                var.get('s').get('depth').put(var.get('node'), ((var.get('s').get('depth').get(var.get('n')) if (var.get('s').get('depth').get(var.get('n'))>=var.get('s').get('depth').get(var.get('m'))) else var.get('s').get('depth').get(var.get('m')))+Js(1.0)))
                var.get('tree').put(((var.get('n')*Js(2.0))+Js(1.0)), var.get('tree').put(((var.get('m')*Js(2.0))+Js(1.0)), var.get('node')))
                var.get('s').get('heap').put('1', (var.put('node',Js(var.get('node').to_number())+Js(1))-Js(1)))
                var.get('pqdownheap')(var.get('s'), var.get('tree'), Js(1.0))
                if not (var.get('s').get('heap_len')>=Js(2.0)):
                    break
            var.get('s').get('heap').put(var.get('s').put('heap_max',Js(var.get('s').get('heap_max').to_number())-Js(1)), var.get('s').get('heap').get('1'))
            var.get('gen_bitlen')(var.get('s'), var.get('desc'))
            var.get('gen_codes')(var.get('tree'), var.get('max_code'), var.get('s').get('bl_count'))
        PyJsHoisted_build_tree_.func_name = 'build_tree'
        var.put('build_tree', PyJsHoisted_build_tree_)
        @Js
        def PyJsHoisted_scan_tree_(s, tree, max_code, this, arguments, var=var):
            var = Scope({'s':s, 'tree':tree, 'max_code':max_code, 'this':this, 'arguments':arguments}, var)
            var.registers(['n', 's', 'curlen', 'min_count', 'prevlen', 'count', 'tree', 'max_count', 'max_code', 'nextlen'])
            pass
            var.put('prevlen', (-Js(1.0)))
            pass
            var.put('nextlen', var.get('tree').get(((Js(0.0)*Js(2.0))+Js(1.0))))
            var.put('count', Js(0.0))
            var.put('max_count', Js(7.0))
            var.put('min_count', Js(4.0))
            if PyJsStrictEq(var.get('nextlen'),Js(0.0)):
                var.put('max_count', Js(138.0))
                var.put('min_count', Js(3.0))
            var.get('tree').put((((var.get('max_code')+Js(1.0))*Js(2.0))+Js(1.0)), Js(65535))
            #for JS loop
            var.put('n', Js(0.0))
            while (var.get('n')<=var.get('max_code')):
                try:
                    var.put('curlen', var.get('nextlen'))
                    var.put('nextlen', var.get('tree').get((((var.get('n')+Js(1.0))*Js(2.0))+Js(1.0))))
                    if ((var.put('count',Js(var.get('count').to_number())+Js(1))<var.get('max_count')) and PyJsStrictEq(var.get('curlen'),var.get('nextlen'))):
                        continue
                    else:
                        if (var.get('count')<var.get('min_count')):
                            var.get('s').get('bl_tree').put((var.get('curlen')*Js(2.0)), var.get('count'), '+')
                        else:
                            if PyJsStrictNeq(var.get('curlen'),Js(0.0)):
                                if PyJsStrictNeq(var.get('curlen'),var.get('prevlen')):
                                    (var.get('s').get('bl_tree').put((var.get('curlen')*Js(2.0)),Js(var.get('s').get('bl_tree').get((var.get('curlen')*Js(2.0))).to_number())+Js(1))-Js(1))
                                (var.get('s').get('bl_tree').put((var.get('REP_3_6')*Js(2.0)),Js(var.get('s').get('bl_tree').get((var.get('REP_3_6')*Js(2.0))).to_number())+Js(1))-Js(1))
                            else:
                                if (var.get('count')<=Js(10.0)):
                                    (var.get('s').get('bl_tree').put((var.get('REPZ_3_10')*Js(2.0)),Js(var.get('s').get('bl_tree').get((var.get('REPZ_3_10')*Js(2.0))).to_number())+Js(1))-Js(1))
                                else:
                                    (var.get('s').get('bl_tree').put((var.get('REPZ_11_138')*Js(2.0)),Js(var.get('s').get('bl_tree').get((var.get('REPZ_11_138')*Js(2.0))).to_number())+Js(1))-Js(1))
                    var.put('count', Js(0.0))
                    var.put('prevlen', var.get('curlen'))
                    if PyJsStrictEq(var.get('nextlen'),Js(0.0)):
                        var.put('max_count', Js(138.0))
                        var.put('min_count', Js(3.0))
                    else:
                        if PyJsStrictEq(var.get('curlen'),var.get('nextlen')):
                            var.put('max_count', Js(6.0))
                            var.put('min_count', Js(3.0))
                        else:
                            var.put('max_count', Js(7.0))
                            var.put('min_count', Js(4.0))
                finally:
                        (var.put('n',Js(var.get('n').to_number())+Js(1))-Js(1))
        PyJsHoisted_scan_tree_.func_name = 'scan_tree'
        var.put('scan_tree', PyJsHoisted_scan_tree_)
        @Js
        def PyJsHoisted_send_tree_(s, tree, max_code, this, arguments, var=var):
            var = Scope({'s':s, 'tree':tree, 'max_code':max_code, 'this':this, 'arguments':arguments}, var)
            var.registers(['n', 's', 'curlen', 'min_count', 'prevlen', 'count', 'tree', 'max_count', 'max_code', 'nextlen'])
            pass
            var.put('prevlen', (-Js(1.0)))
            pass
            var.put('nextlen', var.get('tree').get(((Js(0.0)*Js(2.0))+Js(1.0))))
            var.put('count', Js(0.0))
            var.put('max_count', Js(7.0))
            var.put('min_count', Js(4.0))
            if PyJsStrictEq(var.get('nextlen'),Js(0.0)):
                var.put('max_count', Js(138.0))
                var.put('min_count', Js(3.0))
            #for JS loop
            var.put('n', Js(0.0))
            while (var.get('n')<=var.get('max_code')):
                try:
                    var.put('curlen', var.get('nextlen'))
                    var.put('nextlen', var.get('tree').get((((var.get('n')+Js(1.0))*Js(2.0))+Js(1.0))))
                    if ((var.put('count',Js(var.get('count').to_number())+Js(1))<var.get('max_count')) and PyJsStrictEq(var.get('curlen'),var.get('nextlen'))):
                        continue
                    else:
                        if (var.get('count')<var.get('min_count')):
                            while 1:
                                var.get('send_code')(var.get('s'), var.get('curlen'), var.get('s').get('bl_tree'))
                                if not PyJsStrictNeq(var.put('count',Js(var.get('count').to_number())-Js(1)),Js(0.0)):
                                    break
                        else:
                            if PyJsStrictNeq(var.get('curlen'),Js(0.0)):
                                if PyJsStrictNeq(var.get('curlen'),var.get('prevlen')):
                                    var.get('send_code')(var.get('s'), var.get('curlen'), var.get('s').get('bl_tree'))
                                    (var.put('count',Js(var.get('count').to_number())-Js(1))+Js(1))
                                var.get('send_code')(var.get('s'), var.get('REP_3_6'), var.get('s').get('bl_tree'))
                                var.get('send_bits')(var.get('s'), (var.get('count')-Js(3.0)), Js(2.0))
                            else:
                                if (var.get('count')<=Js(10.0)):
                                    var.get('send_code')(var.get('s'), var.get('REPZ_3_10'), var.get('s').get('bl_tree'))
                                    var.get('send_bits')(var.get('s'), (var.get('count')-Js(3.0)), Js(3.0))
                                else:
                                    var.get('send_code')(var.get('s'), var.get('REPZ_11_138'), var.get('s').get('bl_tree'))
                                    var.get('send_bits')(var.get('s'), (var.get('count')-Js(11.0)), Js(7.0))
                    var.put('count', Js(0.0))
                    var.put('prevlen', var.get('curlen'))
                    if PyJsStrictEq(var.get('nextlen'),Js(0.0)):
                        var.put('max_count', Js(138.0))
                        var.put('min_count', Js(3.0))
                    else:
                        if PyJsStrictEq(var.get('curlen'),var.get('nextlen')):
                            var.put('max_count', Js(6.0))
                            var.put('min_count', Js(3.0))
                        else:
                            var.put('max_count', Js(7.0))
                            var.put('min_count', Js(4.0))
                finally:
                        (var.put('n',Js(var.get('n').to_number())+Js(1))-Js(1))
        PyJsHoisted_send_tree_.func_name = 'send_tree'
        var.put('send_tree', PyJsHoisted_send_tree_)
        @Js
        def PyJsHoisted_build_bl_tree_(s, this, arguments, var=var):
            var = Scope({'s':s, 'this':this, 'arguments':arguments}, var)
            var.registers(['max_blindex', 's'])
            pass
            var.get('scan_tree')(var.get('s'), var.get('s').get('dyn_ltree'), var.get('s').get('l_desc').get('max_code'))
            var.get('scan_tree')(var.get('s'), var.get('s').get('dyn_dtree'), var.get('s').get('d_desc').get('max_code'))
            var.get('build_tree')(var.get('s'), var.get('s').get('bl_desc'))
            #for JS loop
            var.put('max_blindex', (var.get('BL_CODES')-Js(1.0)))
            while (var.get('max_blindex')>=Js(3.0)):
                try:
                    if PyJsStrictNeq(var.get('s').get('bl_tree').get(((var.get('bl_order').get(var.get('max_blindex'))*Js(2.0))+Js(1.0))),Js(0.0)):
                        break
                finally:
                        (var.put('max_blindex',Js(var.get('max_blindex').to_number())-Js(1))+Js(1))
            var.get('s').put('opt_len', ((((Js(3.0)*(var.get('max_blindex')+Js(1.0)))+Js(5.0))+Js(5.0))+Js(4.0)), '+')
            return var.get('max_blindex')
        PyJsHoisted_build_bl_tree_.func_name = 'build_bl_tree'
        var.put('build_bl_tree', PyJsHoisted_build_bl_tree_)
        @Js
        def PyJsHoisted_send_all_trees_(s, lcodes, dcodes, blcodes, this, arguments, var=var):
            var = Scope({'s':s, 'lcodes':lcodes, 'dcodes':dcodes, 'blcodes':blcodes, 'this':this, 'arguments':arguments}, var)
            var.registers(['s', 'blcodes', 'lcodes', 'rank', 'dcodes'])
            pass
            var.get('send_bits')(var.get('s'), (var.get('lcodes')-Js(257.0)), Js(5.0))
            var.get('send_bits')(var.get('s'), (var.get('dcodes')-Js(1.0)), Js(5.0))
            var.get('send_bits')(var.get('s'), (var.get('blcodes')-Js(4.0)), Js(4.0))
            #for JS loop
            var.put('rank', Js(0.0))
            while (var.get('rank')<var.get('blcodes')):
                try:
                    var.get('send_bits')(var.get('s'), var.get('s').get('bl_tree').get(((var.get('bl_order').get(var.get('rank'))*Js(2.0))+Js(1.0))), Js(3.0))
                finally:
                        (var.put('rank',Js(var.get('rank').to_number())+Js(1))-Js(1))
            var.get('send_tree')(var.get('s'), var.get('s').get('dyn_ltree'), (var.get('lcodes')-Js(1.0)))
            var.get('send_tree')(var.get('s'), var.get('s').get('dyn_dtree'), (var.get('dcodes')-Js(1.0)))
        PyJsHoisted_send_all_trees_.func_name = 'send_all_trees'
        var.put('send_all_trees', PyJsHoisted_send_all_trees_)
        @Js
        def PyJsHoisted_detect_data_type_(s, this, arguments, var=var):
            var = Scope({'s':s, 'this':this, 'arguments':arguments}, var)
            var.registers(['n', 'black_mask', 's'])
            var.put('black_mask', Js(4093624447))
            pass
            #for JS loop
            var.put('n', Js(0.0))
            while (var.get('n')<=Js(31.0)):
                try:
                    if ((var.get('black_mask')&Js(1.0)) and PyJsStrictNeq(var.get('s').get('dyn_ltree').get((var.get('n')*Js(2.0))),Js(0.0))):
                        return var.get('Z_BINARY')
                finally:
                        PyJsComma((var.put('n',Js(var.get('n').to_number())+Js(1))-Js(1)),var.put('black_mask', Js(1.0), '>>>'))
            if ((PyJsStrictNeq(var.get('s').get('dyn_ltree').get((Js(9.0)*Js(2.0))),Js(0.0)) or PyJsStrictNeq(var.get('s').get('dyn_ltree').get((Js(10.0)*Js(2.0))),Js(0.0))) or PyJsStrictNeq(var.get('s').get('dyn_ltree').get((Js(13.0)*Js(2.0))),Js(0.0))):
                return var.get('Z_TEXT')
            #for JS loop
            var.put('n', Js(32.0))
            while (var.get('n')<var.get('LITERALS')):
                try:
                    if PyJsStrictNeq(var.get('s').get('dyn_ltree').get((var.get('n')*Js(2.0))),Js(0.0)):
                        return var.get('Z_TEXT')
                finally:
                        (var.put('n',Js(var.get('n').to_number())+Js(1))-Js(1))
            return var.get('Z_BINARY')
        PyJsHoisted_detect_data_type_.func_name = 'detect_data_type'
        var.put('detect_data_type', PyJsHoisted_detect_data_type_)
        @Js
        def PyJsHoisted__tr_init_(s, this, arguments, var=var):
            var = Scope({'s':s, 'this':this, 'arguments':arguments}, var)
            var.registers(['s'])
            if var.get('static_init_done').neg():
                var.get('tr_static_init')()
                var.put('static_init_done', Js(True))
            var.get('s').put('l_desc', var.get('TreeDesc').create(var.get('s').get('dyn_ltree'), var.get('static_l_desc')))
            var.get('s').put('d_desc', var.get('TreeDesc').create(var.get('s').get('dyn_dtree'), var.get('static_d_desc')))
            var.get('s').put('bl_desc', var.get('TreeDesc').create(var.get('s').get('bl_tree'), var.get('static_bl_desc')))
            var.get('s').put('bi_buf', Js(0.0))
            var.get('s').put('bi_valid', Js(0.0))
            var.get('init_block')(var.get('s'))
        PyJsHoisted__tr_init_.func_name = '_tr_init'
        var.put('_tr_init', PyJsHoisted__tr_init_)
        @Js
        def PyJsHoisted__tr_stored_block_(s, buf, stored_len, last, this, arguments, var=var):
            var = Scope({'s':s, 'buf':buf, 'stored_len':stored_len, 'last':last, 'this':this, 'arguments':arguments}, var)
            var.registers(['stored_len', 'last', 'buf', 's'])
            var.get('send_bits')(var.get('s'), ((var.get('STORED_BLOCK')<<Js(1.0))+(Js(1.0) if var.get('last') else Js(0.0))), Js(3.0))
            var.get('copy_block')(var.get('s'), var.get('buf'), var.get('stored_len'), Js(True))
        PyJsHoisted__tr_stored_block_.func_name = '_tr_stored_block'
        var.put('_tr_stored_block', PyJsHoisted__tr_stored_block_)
        @Js
        def PyJsHoisted__tr_align_(s, this, arguments, var=var):
            var = Scope({'s':s, 'this':this, 'arguments':arguments}, var)
            var.registers(['s'])
            var.get('send_bits')(var.get('s'), (var.get('STATIC_TREES')<<Js(1.0)), Js(3.0))
            var.get('send_code')(var.get('s'), var.get('END_BLOCK'), var.get('static_ltree'))
            var.get('bi_flush')(var.get('s'))
        PyJsHoisted__tr_align_.func_name = '_tr_align'
        var.put('_tr_align', PyJsHoisted__tr_align_)
        @Js
        def PyJsHoisted__tr_flush_block_(s, buf, stored_len, last, this, arguments, var=var):
            var = Scope({'s':s, 'buf':buf, 'stored_len':stored_len, 'last':last, 'this':this, 'arguments':arguments}, var)
            var.registers(['last', 'buf', 'static_lenb', 's', 'max_blindex', 'stored_len', 'opt_lenb'])
            pass
            var.put('max_blindex', Js(0.0))
            if (var.get('s').get('level')>Js(0.0)):
                if PyJsStrictEq(var.get('s').get('strm').get('data_type'),var.get('Z_UNKNOWN')):
                    var.get('s').get('strm').put('data_type', var.get('detect_data_type')(var.get('s')))
                var.get('build_tree')(var.get('s'), var.get('s').get('l_desc'))
                var.get('build_tree')(var.get('s'), var.get('s').get('d_desc'))
                var.put('max_blindex', var.get('build_bl_tree')(var.get('s')))
                var.put('opt_lenb', PyJsBshift(((var.get('s').get('opt_len')+Js(3.0))+Js(7.0)),Js(3.0)))
                var.put('static_lenb', PyJsBshift(((var.get('s').get('static_len')+Js(3.0))+Js(7.0)),Js(3.0)))
                if (var.get('static_lenb')<=var.get('opt_lenb')):
                    var.put('opt_lenb', var.get('static_lenb'))
            else:
                var.put('opt_lenb', var.put('static_lenb', (var.get('stored_len')+Js(5.0))))
            if (((var.get('stored_len')+Js(4.0))<=var.get('opt_lenb')) and PyJsStrictNeq(var.get('buf'),(-Js(1.0)))):
                var.get('_tr_stored_block')(var.get('s'), var.get('buf'), var.get('stored_len'), var.get('last'))
            else:
                if (PyJsStrictEq(var.get('s').get('strategy'),var.get('Z_FIXED')) or PyJsStrictEq(var.get('static_lenb'),var.get('opt_lenb'))):
                    var.get('send_bits')(var.get('s'), ((var.get('STATIC_TREES')<<Js(1.0))+(Js(1.0) if var.get('last') else Js(0.0))), Js(3.0))
                    var.get('compress_block')(var.get('s'), var.get('static_ltree'), var.get('static_dtree'))
                else:
                    var.get('send_bits')(var.get('s'), ((var.get('DYN_TREES')<<Js(1.0))+(Js(1.0) if var.get('last') else Js(0.0))), Js(3.0))
                    var.get('send_all_trees')(var.get('s'), (var.get('s').get('l_desc').get('max_code')+Js(1.0)), (var.get('s').get('d_desc').get('max_code')+Js(1.0)), (var.get('max_blindex')+Js(1.0)))
                    var.get('compress_block')(var.get('s'), var.get('s').get('dyn_ltree'), var.get('s').get('dyn_dtree'))
            var.get('init_block')(var.get('s'))
            if var.get('last'):
                var.get('bi_windup')(var.get('s'))
        PyJsHoisted__tr_flush_block_.func_name = '_tr_flush_block'
        var.put('_tr_flush_block', PyJsHoisted__tr_flush_block_)
        @Js
        def PyJsHoisted__tr_tally_(s, dist, lc, this, arguments, var=var):
            var = Scope({'s':s, 'dist':dist, 'lc':lc, 'this':this, 'arguments':arguments}, var)
            var.registers(['dist', 'lc', 's'])
            var.get('s').get('pending_buf').put((var.get('s').get('d_buf')+(var.get('s').get('last_lit')*Js(2.0))), (PyJsBshift(var.get('dist'),Js(8.0))&Js(255)))
            var.get('s').get('pending_buf').put(((var.get('s').get('d_buf')+(var.get('s').get('last_lit')*Js(2.0)))+Js(1.0)), (var.get('dist')&Js(255)))
            var.get('s').get('pending_buf').put((var.get('s').get('l_buf')+var.get('s').get('last_lit')), (var.get('lc')&Js(255)))
            (var.get('s').put('last_lit',Js(var.get('s').get('last_lit').to_number())+Js(1))-Js(1))
            if PyJsStrictEq(var.get('dist'),Js(0.0)):
                (var.get('s').get('dyn_ltree').put((var.get('lc')*Js(2.0)),Js(var.get('s').get('dyn_ltree').get((var.get('lc')*Js(2.0))).to_number())+Js(1))-Js(1))
            else:
                (var.get('s').put('matches',Js(var.get('s').get('matches').to_number())+Js(1))-Js(1))
                (var.put('dist',Js(var.get('dist').to_number())-Js(1))+Js(1))
                (var.get('s').get('dyn_ltree').put((((var.get('_length_code').get(var.get('lc'))+var.get('LITERALS'))+Js(1.0))*Js(2.0)),Js(var.get('s').get('dyn_ltree').get((((var.get('_length_code').get(var.get('lc'))+var.get('LITERALS'))+Js(1.0))*Js(2.0))).to_number())+Js(1))-Js(1))
                (var.get('s').get('dyn_dtree').put((var.get('d_code')(var.get('dist'))*Js(2.0)),Js(var.get('s').get('dyn_dtree').get((var.get('d_code')(var.get('dist'))*Js(2.0))).to_number())+Js(1))-Js(1))
            return PyJsStrictEq(var.get('s').get('last_lit'),(var.get('s').get('lit_bufsize')-Js(1.0)))
        PyJsHoisted__tr_tally_.func_name = '_tr_tally'
        var.put('_tr_tally', PyJsHoisted__tr_tally_)
        Js('use strict')
        var.put('utils', var.get('require')(Js('../utils/common')))
        var.put('Z_FIXED', Js(4.0))
        var.put('Z_BINARY', Js(0.0))
        var.put('Z_TEXT', Js(1.0))
        var.put('Z_UNKNOWN', Js(2.0))
        pass
        var.put('STORED_BLOCK', Js(0.0))
        var.put('STATIC_TREES', Js(1.0))
        var.put('DYN_TREES', Js(2.0))
        var.put('MIN_MATCH', Js(3.0))
        var.put('MAX_MATCH', Js(258.0))
        var.put('LENGTH_CODES', Js(29.0))
        var.put('LITERALS', Js(256.0))
        var.put('L_CODES', ((var.get('LITERALS')+Js(1.0))+var.get('LENGTH_CODES')))
        var.put('D_CODES', Js(30.0))
        var.put('BL_CODES', Js(19.0))
        var.put('HEAP_SIZE', ((Js(2.0)*var.get('L_CODES'))+Js(1.0)))
        var.put('MAX_BITS', Js(15.0))
        var.put('Buf_size', Js(16.0))
        var.put('MAX_BL_BITS', Js(7.0))
        var.put('END_BLOCK', Js(256.0))
        var.put('REP_3_6', Js(16.0))
        var.put('REPZ_3_10', Js(17.0))
        var.put('REPZ_11_138', Js(18.0))
        var.put('extra_lbits', Js([Js(0.0), Js(0.0), Js(0.0), Js(0.0), Js(0.0), Js(0.0), Js(0.0), Js(0.0), Js(1.0), Js(1.0), Js(1.0), Js(1.0), Js(2.0), Js(2.0), Js(2.0), Js(2.0), Js(3.0), Js(3.0), Js(3.0), Js(3.0), Js(4.0), Js(4.0), Js(4.0), Js(4.0), Js(5.0), Js(5.0), Js(5.0), Js(5.0), Js(0.0)]))
        var.put('extra_dbits', Js([Js(0.0), Js(0.0), Js(0.0), Js(0.0), Js(1.0), Js(1.0), Js(2.0), Js(2.0), Js(3.0), Js(3.0), Js(4.0), Js(4.0), Js(5.0), Js(5.0), Js(6.0), Js(6.0), Js(7.0), Js(7.0), Js(8.0), Js(8.0), Js(9.0), Js(9.0), Js(10.0), Js(10.0), Js(11.0), Js(11.0), Js(12.0), Js(12.0), Js(13.0), Js(13.0)]))
        var.put('extra_blbits', Js([Js(0.0), Js(0.0), Js(0.0), Js(0.0), Js(0.0), Js(0.0), Js(0.0), Js(0.0), Js(0.0), Js(0.0), Js(0.0), Js(0.0), Js(0.0), Js(0.0), Js(0.0), Js(0.0), Js(2.0), Js(3.0), Js(7.0)]))
        var.put('bl_order', Js([Js(16.0), Js(17.0), Js(18.0), Js(0.0), Js(8.0), Js(7.0), Js(9.0), Js(6.0), Js(10.0), Js(5.0), Js(11.0), Js(4.0), Js(12.0), Js(3.0), Js(13.0), Js(2.0), Js(14.0), Js(1.0), Js(15.0)]))
        var.put('DIST_CODE_LEN', Js(512.0))
        var.put('static_ltree', var.get('Array').create(((var.get('L_CODES')+Js(2.0))*Js(2.0))))
        var.get('zero')(var.get('static_ltree'))
        var.put('static_dtree', var.get('Array').create((var.get('D_CODES')*Js(2.0))))
        var.get('zero')(var.get('static_dtree'))
        var.put('_dist_code', var.get('Array').create(var.get('DIST_CODE_LEN')))
        var.get('zero')(var.get('_dist_code'))
        var.put('_length_code', var.get('Array').create(((var.get('MAX_MATCH')-var.get('MIN_MATCH'))+Js(1.0))))
        var.get('zero')(var.get('_length_code'))
        var.put('base_length', var.get('Array').create(var.get('LENGTH_CODES')))
        var.get('zero')(var.get('base_length'))
        var.put('base_dist', var.get('Array').create(var.get('D_CODES')))
        var.get('zero')(var.get('base_dist'))
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        var.put('static_init_done', Js(False))
        pass
        pass
        pass
        pass
        pass
        var.get('exports').put('_tr_init', var.get('_tr_init'))
        var.get('exports').put('_tr_stored_block', var.get('_tr_stored_block'))
        var.get('exports').put('_tr_flush_block', var.get('_tr_flush_block'))
        var.get('exports').put('_tr_tally', var.get('_tr_tally'))
        var.get('exports').put('_tr_align', var.get('_tr_align'))
    PyJs_anonymous_2185_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2186_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'ZStream', 'exports'])
        @Js
        def PyJsHoisted_ZStream_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").put('input', var.get(u"null"))
            var.get(u"this").put('next_in', Js(0.0))
            var.get(u"this").put('avail_in', Js(0.0))
            var.get(u"this").put('total_in', Js(0.0))
            var.get(u"this").put('output', var.get(u"null"))
            var.get(u"this").put('next_out', Js(0.0))
            var.get(u"this").put('avail_out', Js(0.0))
            var.get(u"this").put('total_out', Js(0.0))
            var.get(u"this").put('msg', Js(''))
            var.get(u"this").put('state', var.get(u"null"))
            var.get(u"this").put('data_type', Js(2.0))
            var.get(u"this").put('adler', Js(0.0))
        PyJsHoisted_ZStream_.func_name = 'ZStream'
        var.put('ZStream', PyJsHoisted_ZStream_)
        Js('use strict')
        pass
        var.get('module').put('exports', var.get('ZStream'))
    PyJs_anonymous_2186_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2187_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_2188_(process, this, arguments, var=var):
            var = Scope({'process':process, 'this':this, 'arguments':arguments}, var)
            var.registers(['process'])
            @Js
            def PyJs_anonymous_2189_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['assertPath', 'posix', '_format', 'normalizeStringPosix'])
                @Js
                def PyJsHoisted_assertPath_(path, this, arguments, var=var):
                    var = Scope({'path':path, 'this':this, 'arguments':arguments}, var)
                    var.registers(['path'])
                    if PyJsStrictNeq(var.get('path',throw=False).typeof(),Js('string')):
                        PyJsTempException = JsToPyException(var.get('TypeError').create((Js('Path must be a string. Received ')+var.get('JSON').callprop('stringify', var.get('path')))))
                        raise PyJsTempException
                PyJsHoisted_assertPath_.func_name = 'assertPath'
                var.put('assertPath', PyJsHoisted_assertPath_)
                @Js
                def PyJsHoisted_normalizeStringPosix_(path, allowAboveRoot, this, arguments, var=var):
                    var = Scope({'path':path, 'allowAboveRoot':allowAboveRoot, 'this':this, 'arguments':arguments}, var)
                    var.registers(['i', 'lastSegmentLength', 'path', 'allowAboveRoot', 'code', 'lastSlash', 'lastSlashIndex', 'dots', 'res'])
                    var.put('res', Js(''))
                    var.put('lastSegmentLength', Js(0.0))
                    var.put('lastSlash', (-Js(1.0)))
                    var.put('dots', Js(0.0))
                    pass
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<=var.get('path').get('length')):
                        try:
                            if (var.get('i')<var.get('path').get('length')):
                                var.put('code', var.get('path').callprop('charCodeAt', var.get('i')))
                            else:
                                if PyJsStrictEq(var.get('code'),Js(47.0)):
                                    break
                                else:
                                    var.put('code', Js(47.0))
                            if PyJsStrictEq(var.get('code'),Js(47.0)):
                                if (PyJsStrictEq(var.get('lastSlash'),(var.get('i')-Js(1.0))) or PyJsStrictEq(var.get('dots'),Js(1.0))):
                                    pass
                                else:
                                    if (PyJsStrictNeq(var.get('lastSlash'),(var.get('i')-Js(1.0))) and PyJsStrictEq(var.get('dots'),Js(2.0))):
                                        if ((((var.get('res').get('length')<Js(2.0)) or PyJsStrictNeq(var.get('lastSegmentLength'),Js(2.0))) or PyJsStrictNeq(var.get('res').callprop('charCodeAt', (var.get('res').get('length')-Js(1.0))),Js(46.0))) or PyJsStrictNeq(var.get('res').callprop('charCodeAt', (var.get('res').get('length')-Js(2.0))),Js(46.0))):
                                            if (var.get('res').get('length')>Js(2.0)):
                                                var.put('lastSlashIndex', var.get('res').callprop('lastIndexOf', Js('/')))
                                                if PyJsStrictNeq(var.get('lastSlashIndex'),(var.get('res').get('length')-Js(1.0))):
                                                    if PyJsStrictEq(var.get('lastSlashIndex'),(-Js(1.0))):
                                                        var.put('res', Js(''))
                                                        var.put('lastSegmentLength', Js(0.0))
                                                    else:
                                                        var.put('res', var.get('res').callprop('slice', Js(0.0), var.get('lastSlashIndex')))
                                                        var.put('lastSegmentLength', ((var.get('res').get('length')-Js(1.0))-var.get('res').callprop('lastIndexOf', Js('/'))))
                                                    var.put('lastSlash', var.get('i'))
                                                    var.put('dots', Js(0.0))
                                                    continue
                                            else:
                                                if (PyJsStrictEq(var.get('res').get('length'),Js(2.0)) or PyJsStrictEq(var.get('res').get('length'),Js(1.0))):
                                                    var.put('res', Js(''))
                                                    var.put('lastSegmentLength', Js(0.0))
                                                    var.put('lastSlash', var.get('i'))
                                                    var.put('dots', Js(0.0))
                                                    continue
                                        if var.get('allowAboveRoot'):
                                            if (var.get('res').get('length')>Js(0.0)):
                                                var.put('res', Js('/..'), '+')
                                            else:
                                                var.put('res', Js('..'))
                                            var.put('lastSegmentLength', Js(2.0))
                                    else:
                                        if (var.get('res').get('length')>Js(0.0)):
                                            var.put('res', (Js('/')+var.get('path').callprop('slice', (var.get('lastSlash')+Js(1.0)), var.get('i'))), '+')
                                        else:
                                            var.put('res', var.get('path').callprop('slice', (var.get('lastSlash')+Js(1.0)), var.get('i')))
                                        var.put('lastSegmentLength', ((var.get('i')-var.get('lastSlash'))-Js(1.0)))
                                var.put('lastSlash', var.get('i'))
                                var.put('dots', Js(0.0))
                            else:
                                if (PyJsStrictEq(var.get('code'),Js(46.0)) and PyJsStrictNeq(var.get('dots'),(-Js(1.0)))):
                                    var.put('dots',Js(var.get('dots').to_number())+Js(1))
                                else:
                                    var.put('dots', (-Js(1.0)))
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    return var.get('res')
                PyJsHoisted_normalizeStringPosix_.func_name = 'normalizeStringPosix'
                var.put('normalizeStringPosix', PyJsHoisted_normalizeStringPosix_)
                @Js
                def PyJsHoisted__format_(sep, pathObject, this, arguments, var=var):
                    var = Scope({'sep':sep, 'pathObject':pathObject, 'this':this, 'arguments':arguments}, var)
                    var.registers(['base', 'dir', 'sep', 'pathObject'])
                    var.put('dir', (var.get('pathObject').get('dir') or var.get('pathObject').get('root')))
                    var.put('base', (var.get('pathObject').get('base') or ((var.get('pathObject').get('name') or Js(''))+(var.get('pathObject').get('ext') or Js('')))))
                    if var.get('dir').neg():
                        return var.get('base')
                    if PyJsStrictEq(var.get('dir'),var.get('pathObject').get('root')):
                        return (var.get('dir')+var.get('base'))
                    return ((var.get('dir')+var.get('sep'))+var.get('base'))
                PyJsHoisted__format_.func_name = '_format'
                var.put('_format', PyJsHoisted__format_)
                Js('use strict')
                pass
                pass
                pass
                @Js
                def PyJs_resolve_2190_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'resolve':PyJs_resolve_2190_}, var)
                    var.registers(['i', 'path', 'cwd', 'resolvedPath', 'resolvedAbsolute'])
                    var.put('resolvedPath', Js(''))
                    var.put('resolvedAbsolute', Js(False))
                    pass
                    #for JS loop
                    var.put('i', (var.get('arguments').get('length')-Js(1.0)))
                    while ((var.get('i')>=(-Js(1.0))) and var.get('resolvedAbsolute').neg()):
                        try:
                            pass
                            if (var.get('i')>=Js(0.0)):
                                var.put('path', var.get('arguments').get(var.get('i')))
                            else:
                                if PyJsStrictEq(var.get('cwd'),var.get('undefined')):
                                    var.put('cwd', var.get('process').callprop('cwd'))
                                var.put('path', var.get('cwd'))
                            var.get('assertPath')(var.get('path'))
                            if PyJsStrictEq(var.get('path').get('length'),Js(0.0)):
                                continue
                            var.put('resolvedPath', ((var.get('path')+Js('/'))+var.get('resolvedPath')))
                            var.put('resolvedAbsolute', PyJsStrictEq(var.get('path').callprop('charCodeAt', Js(0.0)),Js(47.0)))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
                    var.put('resolvedPath', var.get('normalizeStringPosix')(var.get('resolvedPath'), var.get('resolvedAbsolute').neg()))
                    if var.get('resolvedAbsolute'):
                        if (var.get('resolvedPath').get('length')>Js(0.0)):
                            return (Js('/')+var.get('resolvedPath'))
                        else:
                            return Js('/')
                    else:
                        if (var.get('resolvedPath').get('length')>Js(0.0)):
                            return var.get('resolvedPath')
                        else:
                            return Js('.')
                PyJs_resolve_2190_._set_name('resolve')
                @Js
                def PyJs_normalize_2191_(path, this, arguments, var=var):
                    var = Scope({'path':path, 'this':this, 'arguments':arguments, 'normalize':PyJs_normalize_2191_}, var)
                    var.registers(['isAbsolute', 'trailingSeparator', 'path'])
                    var.get('assertPath')(var.get('path'))
                    if PyJsStrictEq(var.get('path').get('length'),Js(0.0)):
                        return Js('.')
                    var.put('isAbsolute', PyJsStrictEq(var.get('path').callprop('charCodeAt', Js(0.0)),Js(47.0)))
                    var.put('trailingSeparator', PyJsStrictEq(var.get('path').callprop('charCodeAt', (var.get('path').get('length')-Js(1.0))),Js(47.0)))
                    var.put('path', var.get('normalizeStringPosix')(var.get('path'), var.get('isAbsolute').neg()))
                    if (PyJsStrictEq(var.get('path').get('length'),Js(0.0)) and var.get('isAbsolute').neg()):
                        var.put('path', Js('.'))
                    if ((var.get('path').get('length')>Js(0.0)) and var.get('trailingSeparator')):
                        var.put('path', Js('/'), '+')
                    if var.get('isAbsolute'):
                        return (Js('/')+var.get('path'))
                    return var.get('path')
                PyJs_normalize_2191_._set_name('normalize')
                @Js
                def PyJs_isAbsolute_2192_(path, this, arguments, var=var):
                    var = Scope({'path':path, 'this':this, 'arguments':arguments, 'isAbsolute':PyJs_isAbsolute_2192_}, var)
                    var.registers(['path'])
                    var.get('assertPath')(var.get('path'))
                    return ((var.get('path').get('length')>Js(0.0)) and PyJsStrictEq(var.get('path').callprop('charCodeAt', Js(0.0)),Js(47.0)))
                PyJs_isAbsolute_2192_._set_name('isAbsolute')
                @Js
                def PyJs_join_2193_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'join':PyJs_join_2193_}, var)
                    var.registers(['joined', 'i', 'arg'])
                    if PyJsStrictEq(var.get('arguments').get('length'),Js(0.0)):
                        return Js('.')
                    pass
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('arguments').get('length')):
                        try:
                            var.put('arg', var.get('arguments').get(var.get('i')))
                            var.get('assertPath')(var.get('arg'))
                            if (var.get('arg').get('length')>Js(0.0)):
                                if PyJsStrictEq(var.get('joined'),var.get('undefined')):
                                    var.put('joined', var.get('arg'))
                                else:
                                    var.put('joined', (Js('/')+var.get('arg')), '+')
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    if PyJsStrictEq(var.get('joined'),var.get('undefined')):
                        return Js('.')
                    return var.get('posix').callprop('normalize', var.get('joined'))
                PyJs_join_2193_._set_name('join')
                @Js
                def PyJs_relative_2194_(PyJsArg_66726f6d_, to, this, arguments, var=var):
                    var = Scope({'from':PyJsArg_66726f6d_, 'to':to, 'this':this, 'arguments':arguments, 'relative':PyJs_relative_2194_}, var)
                    var.registers(['out', 'i', 'fromCode', 'fromLen', 'toCode', 'toStart', 'fromStart', 'lastCommonSep', 'length', 'from', 'to', 'toLen', 'toEnd', 'fromEnd'])
                    var.get('assertPath')(var.get('from'))
                    var.get('assertPath')(var.get('to'))
                    if PyJsStrictEq(var.get('from'),var.get('to')):
                        return Js('')
                    var.put('from', var.get('posix').callprop('resolve', var.get('from')))
                    var.put('to', var.get('posix').callprop('resolve', var.get('to')))
                    if PyJsStrictEq(var.get('from'),var.get('to')):
                        return Js('')
                    var.put('fromStart', Js(1.0))
                    #for JS loop
                    
                    while (var.get('fromStart')<var.get('from').get('length')):
                        try:
                            if PyJsStrictNeq(var.get('from').callprop('charCodeAt', var.get('fromStart')),Js(47.0)):
                                break
                        finally:
                                var.put('fromStart',Js(var.get('fromStart').to_number())+Js(1))
                    var.put('fromEnd', var.get('from').get('length'))
                    var.put('fromLen', (var.get('fromEnd')-var.get('fromStart')))
                    var.put('toStart', Js(1.0))
                    #for JS loop
                    
                    while (var.get('toStart')<var.get('to').get('length')):
                        try:
                            if PyJsStrictNeq(var.get('to').callprop('charCodeAt', var.get('toStart')),Js(47.0)):
                                break
                        finally:
                                var.put('toStart',Js(var.get('toStart').to_number())+Js(1))
                    var.put('toEnd', var.get('to').get('length'))
                    var.put('toLen', (var.get('toEnd')-var.get('toStart')))
                    var.put('length', (var.get('fromLen') if (var.get('fromLen')<var.get('toLen')) else var.get('toLen')))
                    var.put('lastCommonSep', (-Js(1.0)))
                    var.put('i', Js(0.0))
                    #for JS loop
                    
                    while (var.get('i')<=var.get('length')):
                        try:
                            if PyJsStrictEq(var.get('i'),var.get('length')):
                                if (var.get('toLen')>var.get('length')):
                                    if PyJsStrictEq(var.get('to').callprop('charCodeAt', (var.get('toStart')+var.get('i'))),Js(47.0)):
                                        return var.get('to').callprop('slice', ((var.get('toStart')+var.get('i'))+Js(1.0)))
                                    else:
                                        if PyJsStrictEq(var.get('i'),Js(0.0)):
                                            return var.get('to').callprop('slice', (var.get('toStart')+var.get('i')))
                                else:
                                    if (var.get('fromLen')>var.get('length')):
                                        if PyJsStrictEq(var.get('from').callprop('charCodeAt', (var.get('fromStart')+var.get('i'))),Js(47.0)):
                                            var.put('lastCommonSep', var.get('i'))
                                        else:
                                            if PyJsStrictEq(var.get('i'),Js(0.0)):
                                                var.put('lastCommonSep', Js(0.0))
                                break
                            var.put('fromCode', var.get('from').callprop('charCodeAt', (var.get('fromStart')+var.get('i'))))
                            var.put('toCode', var.get('to').callprop('charCodeAt', (var.get('toStart')+var.get('i'))))
                            if PyJsStrictNeq(var.get('fromCode'),var.get('toCode')):
                                break
                            else:
                                if PyJsStrictEq(var.get('fromCode'),Js(47.0)):
                                    var.put('lastCommonSep', var.get('i'))
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    var.put('out', Js(''))
                    #for JS loop
                    var.put('i', ((var.get('fromStart')+var.get('lastCommonSep'))+Js(1.0)))
                    while (var.get('i')<=var.get('fromEnd')):
                        try:
                            if (PyJsStrictEq(var.get('i'),var.get('fromEnd')) or PyJsStrictEq(var.get('from').callprop('charCodeAt', var.get('i')),Js(47.0))):
                                if PyJsStrictEq(var.get('out').get('length'),Js(0.0)):
                                    var.put('out', Js('..'), '+')
                                else:
                                    var.put('out', Js('/..'), '+')
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    if (var.get('out').get('length')>Js(0.0)):
                        return (var.get('out')+var.get('to').callprop('slice', (var.get('toStart')+var.get('lastCommonSep'))))
                    else:
                        var.put('toStart', var.get('lastCommonSep'), '+')
                        if PyJsStrictEq(var.get('to').callprop('charCodeAt', var.get('toStart')),Js(47.0)):
                            var.put('toStart',Js(var.get('toStart').to_number())+Js(1))
                        return var.get('to').callprop('slice', var.get('toStart'))
                PyJs_relative_2194_._set_name('relative')
                @Js
                def PyJs__makeLong_2195_(path, this, arguments, var=var):
                    var = Scope({'path':path, 'this':this, 'arguments':arguments, '_makeLong':PyJs__makeLong_2195_}, var)
                    var.registers(['path'])
                    return var.get('path')
                PyJs__makeLong_2195_._set_name('_makeLong')
                @Js
                def PyJs_dirname_2196_(path, this, arguments, var=var):
                    var = Scope({'path':path, 'this':this, 'arguments':arguments, 'dirname':PyJs_dirname_2196_}, var)
                    var.registers(['i', 'hasRoot', 'end', 'matchedSlash', 'path', 'code'])
                    var.get('assertPath')(var.get('path'))
                    if PyJsStrictEq(var.get('path').get('length'),Js(0.0)):
                        return Js('.')
                    var.put('code', var.get('path').callprop('charCodeAt', Js(0.0)))
                    var.put('hasRoot', PyJsStrictEq(var.get('code'),Js(47.0)))
                    var.put('end', (-Js(1.0)))
                    var.put('matchedSlash', Js(True))
                    #for JS loop
                    var.put('i', (var.get('path').get('length')-Js(1.0)))
                    while (var.get('i')>=Js(1.0)):
                        try:
                            var.put('code', var.get('path').callprop('charCodeAt', var.get('i')))
                            if PyJsStrictEq(var.get('code'),Js(47.0)):
                                if var.get('matchedSlash').neg():
                                    var.put('end', var.get('i'))
                                    break
                            else:
                                var.put('matchedSlash', Js(False))
                        finally:
                                var.put('i',Js(var.get('i').to_number())-Js(1))
                    if PyJsStrictEq(var.get('end'),(-Js(1.0))):
                        return (Js('/') if var.get('hasRoot') else Js('.'))
                    if (var.get('hasRoot') and PyJsStrictEq(var.get('end'),Js(1.0))):
                        return Js('//')
                    return var.get('path').callprop('slice', Js(0.0), var.get('end'))
                PyJs_dirname_2196_._set_name('dirname')
                @Js
                def PyJs_basename_2197_(path, ext, this, arguments, var=var):
                    var = Scope({'path':path, 'ext':ext, 'this':this, 'arguments':arguments, 'basename':PyJs_basename_2197_}, var)
                    var.registers(['ext', 'extIdx', 'i', 'start', 'end', 'matchedSlash', 'path', 'code', 'firstNonSlashEnd'])
                    if (PyJsStrictNeq(var.get('ext'),var.get('undefined')) and PyJsStrictNeq(var.get('ext',throw=False).typeof(),Js('string'))):
                        PyJsTempException = JsToPyException(var.get('TypeError').create(Js('"ext" argument must be a string')))
                        raise PyJsTempException
                    var.get('assertPath')(var.get('path'))
                    var.put('start', Js(0.0))
                    var.put('end', (-Js(1.0)))
                    var.put('matchedSlash', Js(True))
                    pass
                    if ((PyJsStrictNeq(var.get('ext'),var.get('undefined')) and (var.get('ext').get('length')>Js(0.0))) and (var.get('ext').get('length')<=var.get('path').get('length'))):
                        if (PyJsStrictEq(var.get('ext').get('length'),var.get('path').get('length')) and PyJsStrictEq(var.get('ext'),var.get('path'))):
                            return Js('')
                        var.put('extIdx', (var.get('ext').get('length')-Js(1.0)))
                        var.put('firstNonSlashEnd', (-Js(1.0)))
                        #for JS loop
                        var.put('i', (var.get('path').get('length')-Js(1.0)))
                        while (var.get('i')>=Js(0.0)):
                            try:
                                var.put('code', var.get('path').callprop('charCodeAt', var.get('i')))
                                if PyJsStrictEq(var.get('code'),Js(47.0)):
                                    if var.get('matchedSlash').neg():
                                        var.put('start', (var.get('i')+Js(1.0)))
                                        break
                                else:
                                    if PyJsStrictEq(var.get('firstNonSlashEnd'),(-Js(1.0))):
                                        var.put('matchedSlash', Js(False))
                                        var.put('firstNonSlashEnd', (var.get('i')+Js(1.0)))
                                    if (var.get('extIdx')>=Js(0.0)):
                                        if PyJsStrictEq(var.get('code'),var.get('ext').callprop('charCodeAt', var.get('extIdx'))):
                                            if PyJsStrictEq(var.put('extIdx',Js(var.get('extIdx').to_number())-Js(1)),(-Js(1.0))):
                                                var.put('end', var.get('i'))
                                        else:
                                            var.put('extIdx', (-Js(1.0)))
                                            var.put('end', var.get('firstNonSlashEnd'))
                            finally:
                                    var.put('i',Js(var.get('i').to_number())-Js(1))
                        if PyJsStrictEq(var.get('start'),var.get('end')):
                            var.put('end', var.get('firstNonSlashEnd'))
                        else:
                            if PyJsStrictEq(var.get('end'),(-Js(1.0))):
                                var.put('end', var.get('path').get('length'))
                        return var.get('path').callprop('slice', var.get('start'), var.get('end'))
                    else:
                        #for JS loop
                        var.put('i', (var.get('path').get('length')-Js(1.0)))
                        while (var.get('i')>=Js(0.0)):
                            try:
                                if PyJsStrictEq(var.get('path').callprop('charCodeAt', var.get('i')),Js(47.0)):
                                    if var.get('matchedSlash').neg():
                                        var.put('start', (var.get('i')+Js(1.0)))
                                        break
                                else:
                                    if PyJsStrictEq(var.get('end'),(-Js(1.0))):
                                        var.put('matchedSlash', Js(False))
                                        var.put('end', (var.get('i')+Js(1.0)))
                            finally:
                                    var.put('i',Js(var.get('i').to_number())-Js(1))
                        if PyJsStrictEq(var.get('end'),(-Js(1.0))):
                            return Js('')
                        return var.get('path').callprop('slice', var.get('start'), var.get('end'))
                PyJs_basename_2197_._set_name('basename')
                @Js
                def PyJs_extname_2198_(path, this, arguments, var=var):
                    var = Scope({'path':path, 'this':this, 'arguments':arguments, 'extname':PyJs_extname_2198_}, var)
                    var.registers(['i', 'path', 'end', 'matchedSlash', 'code', 'startDot', 'preDotState', 'startPart'])
                    var.get('assertPath')(var.get('path'))
                    var.put('startDot', (-Js(1.0)))
                    var.put('startPart', Js(0.0))
                    var.put('end', (-Js(1.0)))
                    var.put('matchedSlash', Js(True))
                    var.put('preDotState', Js(0.0))
                    #for JS loop
                    var.put('i', (var.get('path').get('length')-Js(1.0)))
                    while (var.get('i')>=Js(0.0)):
                        try:
                            var.put('code', var.get('path').callprop('charCodeAt', var.get('i')))
                            if PyJsStrictEq(var.get('code'),Js(47.0)):
                                if var.get('matchedSlash').neg():
                                    var.put('startPart', (var.get('i')+Js(1.0)))
                                    break
                                continue
                            if PyJsStrictEq(var.get('end'),(-Js(1.0))):
                                var.put('matchedSlash', Js(False))
                                var.put('end', (var.get('i')+Js(1.0)))
                            if PyJsStrictEq(var.get('code'),Js(46.0)):
                                if PyJsStrictEq(var.get('startDot'),(-Js(1.0))):
                                    var.put('startDot', var.get('i'))
                                else:
                                    if PyJsStrictNeq(var.get('preDotState'),Js(1.0)):
                                        var.put('preDotState', Js(1.0))
                            else:
                                if PyJsStrictNeq(var.get('startDot'),(-Js(1.0))):
                                    var.put('preDotState', (-Js(1.0)))
                        finally:
                                var.put('i',Js(var.get('i').to_number())-Js(1))
                    if (((PyJsStrictEq(var.get('startDot'),(-Js(1.0))) or PyJsStrictEq(var.get('end'),(-Js(1.0)))) or PyJsStrictEq(var.get('preDotState'),Js(0.0))) or ((PyJsStrictEq(var.get('preDotState'),Js(1.0)) and PyJsStrictEq(var.get('startDot'),(var.get('end')-Js(1.0)))) and PyJsStrictEq(var.get('startDot'),(var.get('startPart')+Js(1.0))))):
                        return Js('')
                    return var.get('path').callprop('slice', var.get('startDot'), var.get('end'))
                PyJs_extname_2198_._set_name('extname')
                @Js
                def PyJs_format_2199_(pathObject, this, arguments, var=var):
                    var = Scope({'pathObject':pathObject, 'this':this, 'arguments':arguments, 'format':PyJs_format_2199_}, var)
                    var.registers(['pathObject'])
                    if (PyJsStrictEq(var.get('pathObject'),var.get(u"null")) or PyJsStrictNeq((Js('undefined') if PyJsStrictEq(var.get('pathObject',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('pathObject'))),Js('object'))):
                        PyJsTempException = JsToPyException(var.get('TypeError').create((Js('The "pathObject" argument must be of type Object. Received type ')+(Js('undefined') if PyJsStrictEq(var.get('pathObject',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('pathObject'))))))
                        raise PyJsTempException
                    return var.get('_format')(Js('/'), var.get('pathObject'))
                PyJs_format_2199_._set_name('format')
                @Js
                def PyJs_parse_2200_(path, this, arguments, var=var):
                    var = Scope({'path':path, 'this':this, 'arguments':arguments, 'parse':PyJs_parse_2200_}, var)
                    var.registers(['i', 'start', 'ret', 'end', 'matchedSlash', 'path', 'code', 'isAbsolute', 'startDot', 'preDotState', 'startPart'])
                    var.get('assertPath')(var.get('path'))
                    var.put('ret', Js({'root':Js(''),'dir':Js(''),'base':Js(''),'ext':Js(''),'name':Js('')}))
                    if PyJsStrictEq(var.get('path').get('length'),Js(0.0)):
                        return var.get('ret')
                    var.put('code', var.get('path').callprop('charCodeAt', Js(0.0)))
                    var.put('isAbsolute', PyJsStrictEq(var.get('code'),Js(47.0)))
                    pass
                    if var.get('isAbsolute'):
                        var.get('ret').put('root', Js('/'))
                        var.put('start', Js(1.0))
                    else:
                        var.put('start', Js(0.0))
                    var.put('startDot', (-Js(1.0)))
                    var.put('startPart', Js(0.0))
                    var.put('end', (-Js(1.0)))
                    var.put('matchedSlash', Js(True))
                    var.put('i', (var.get('path').get('length')-Js(1.0)))
                    var.put('preDotState', Js(0.0))
                    #for JS loop
                    
                    while (var.get('i')>=var.get('start')):
                        try:
                            var.put('code', var.get('path').callprop('charCodeAt', var.get('i')))
                            if PyJsStrictEq(var.get('code'),Js(47.0)):
                                if var.get('matchedSlash').neg():
                                    var.put('startPart', (var.get('i')+Js(1.0)))
                                    break
                                continue
                            if PyJsStrictEq(var.get('end'),(-Js(1.0))):
                                var.put('matchedSlash', Js(False))
                                var.put('end', (var.get('i')+Js(1.0)))
                            if PyJsStrictEq(var.get('code'),Js(46.0)):
                                if PyJsStrictEq(var.get('startDot'),(-Js(1.0))):
                                    var.put('startDot', var.get('i'))
                                else:
                                    if PyJsStrictNeq(var.get('preDotState'),Js(1.0)):
                                        var.put('preDotState', Js(1.0))
                            else:
                                if PyJsStrictNeq(var.get('startDot'),(-Js(1.0))):
                                    var.put('preDotState', (-Js(1.0)))
                        finally:
                                var.put('i',Js(var.get('i').to_number())-Js(1))
                    if (((PyJsStrictEq(var.get('startDot'),(-Js(1.0))) or PyJsStrictEq(var.get('end'),(-Js(1.0)))) or PyJsStrictEq(var.get('preDotState'),Js(0.0))) or ((PyJsStrictEq(var.get('preDotState'),Js(1.0)) and PyJsStrictEq(var.get('startDot'),(var.get('end')-Js(1.0)))) and PyJsStrictEq(var.get('startDot'),(var.get('startPart')+Js(1.0))))):
                        if PyJsStrictNeq(var.get('end'),(-Js(1.0))):
                            if (PyJsStrictEq(var.get('startPart'),Js(0.0)) and var.get('isAbsolute')):
                                var.get('ret').put('base', var.get('ret').put('name', var.get('path').callprop('slice', Js(1.0), var.get('end'))))
                            else:
                                var.get('ret').put('base', var.get('ret').put('name', var.get('path').callprop('slice', var.get('startPart'), var.get('end'))))
                    else:
                        if (PyJsStrictEq(var.get('startPart'),Js(0.0)) and var.get('isAbsolute')):
                            var.get('ret').put('name', var.get('path').callprop('slice', Js(1.0), var.get('startDot')))
                            var.get('ret').put('base', var.get('path').callprop('slice', Js(1.0), var.get('end')))
                        else:
                            var.get('ret').put('name', var.get('path').callprop('slice', var.get('startPart'), var.get('startDot')))
                            var.get('ret').put('base', var.get('path').callprop('slice', var.get('startPart'), var.get('end')))
                        var.get('ret').put('ext', var.get('path').callprop('slice', var.get('startDot'), var.get('end')))
                    if (var.get('startPart')>Js(0.0)):
                        var.get('ret').put('dir', var.get('path').callprop('slice', Js(0.0), (var.get('startPart')-Js(1.0))))
                    else:
                        if var.get('isAbsolute'):
                            var.get('ret').put('dir', Js('/'))
                    return var.get('ret')
                PyJs_parse_2200_._set_name('parse')
                var.put('posix', Js({'resolve':PyJs_resolve_2190_,'normalize':PyJs_normalize_2191_,'isAbsolute':PyJs_isAbsolute_2192_,'join':PyJs_join_2193_,'relative':PyJs_relative_2194_,'_makeLong':PyJs__makeLong_2195_,'dirname':PyJs_dirname_2196_,'basename':PyJs_basename_2197_,'extname':PyJs_extname_2198_,'format':PyJs_format_2199_,'parse':PyJs_parse_2200_,'sep':Js('/'),'delimiter':Js(':'),'win32':var.get(u"null"),'posix':var.get(u"null")}))
                var.get('posix').put('posix', var.get('posix'))
                var.get('module').put('exports', var.get('posix'))
            PyJs_anonymous_2189_._set_name('anonymous')
            PyJs_anonymous_2189_.callprop('call', var.get(u"this"))
        PyJs_anonymous_2188_._set_name('anonymous')
        PyJs_anonymous_2188_.callprop('call', var.get(u"this"), var.get('require')(Js('_process')))
    PyJs_anonymous_2187_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2201_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_2202_(Buffer, this, arguments, var=var):
            var = Scope({'Buffer':Buffer, 'this':this, 'arguments':arguments}, var)
            var.registers(['Buffer'])
            @Js
            def PyJs_anonymous_2203_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['pixelBppMapper', 'interlaceUtils', 'mapImageCustomBit', 'pixelBppCustomMapper', 'bitRetriever', 'mapImage8Bit'])
                @Js
                def PyJsHoisted_bitRetriever_(data, depth, this, arguments, var=var):
                    var = Scope({'data':data, 'depth':depth, 'this':this, 'arguments':arguments}, var)
                    var.registers(['depth', 'i', 'split', 'data', 'leftOver'])
                    @Js
                    def PyJsHoisted_split_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['byte5', 'byte2', 'byte', 'byte7', 'byte3', 'byte4', 'byte1', 'byte6', 'byte8'])
                        if PyJsStrictEq(var.get('i'),var.get('data').get('length')):
                            PyJsTempException = JsToPyException(var.get('Error').create(Js('Ran out of data')))
                            raise PyJsTempException
                        var.put('byte', var.get('data').get(var.get('i')))
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                        pass
                        while 1:
                            SWITCHED = False
                            CONDITION = (var.get('depth'))
                            if True:
                                SWITCHED = True
                                PyJsTempException = JsToPyException(var.get('Error').create(Js('unrecognised depth')))
                                raise PyJsTempException
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(16.0)):
                                SWITCHED = True
                                var.put('byte2', var.get('data').get(var.get('i')))
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                                var.get('leftOver').callprop('push', ((var.get('byte')<<Js(8.0))+var.get('byte2')))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(4.0)):
                                SWITCHED = True
                                var.put('byte2', (var.get('byte')&Js(15)))
                                var.put('byte1', (var.get('byte')>>Js(4.0)))
                                var.get('leftOver').callprop('push', var.get('byte1'), var.get('byte2'))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(2.0)):
                                SWITCHED = True
                                var.put('byte4', (var.get('byte')&Js(3.0)))
                                var.put('byte3', ((var.get('byte')>>Js(2.0))&Js(3.0)))
                                var.put('byte2', ((var.get('byte')>>Js(4.0))&Js(3.0)))
                                var.put('byte1', ((var.get('byte')>>Js(6.0))&Js(3.0)))
                                var.get('leftOver').callprop('push', var.get('byte1'), var.get('byte2'), var.get('byte3'), var.get('byte4'))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(1.0)):
                                SWITCHED = True
                                var.put('byte8', (var.get('byte')&Js(1.0)))
                                var.put('byte7', ((var.get('byte')>>Js(1.0))&Js(1.0)))
                                var.put('byte6', ((var.get('byte')>>Js(2.0))&Js(1.0)))
                                var.put('byte5', ((var.get('byte')>>Js(3.0))&Js(1.0)))
                                var.put('byte4', ((var.get('byte')>>Js(4.0))&Js(1.0)))
                                var.put('byte3', ((var.get('byte')>>Js(5.0))&Js(1.0)))
                                var.put('byte2', ((var.get('byte')>>Js(6.0))&Js(1.0)))
                                var.put('byte1', ((var.get('byte')>>Js(7.0))&Js(1.0)))
                                var.get('leftOver').callprop('push', var.get('byte1'), var.get('byte2'), var.get('byte3'), var.get('byte4'), var.get('byte5'), var.get('byte6'), var.get('byte7'), var.get('byte8'))
                                break
                            SWITCHED = True
                            break
                    PyJsHoisted_split_.func_name = 'split'
                    var.put('split', PyJsHoisted_split_)
                    var.put('leftOver', Js([]))
                    var.put('i', Js(0.0))
                    pass
                    @Js
                    def PyJs_get_2214_(count, this, arguments, var=var):
                        var = Scope({'count':count, 'this':this, 'arguments':arguments, 'get':PyJs_get_2214_}, var)
                        var.registers(['count', 'returner'])
                        while (var.get('leftOver').get('length')<var.get('count')):
                            var.get('split')()
                        var.put('returner', var.get('leftOver').callprop('slice', Js(0.0), var.get('count')))
                        var.put('leftOver', var.get('leftOver').callprop('slice', var.get('count')))
                        return var.get('returner')
                    PyJs_get_2214_._set_name('get')
                    @Js
                    def PyJs_resetAfterLine_2215_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments, 'resetAfterLine':PyJs_resetAfterLine_2215_}, var)
                        var.registers([])
                        var.get('leftOver').put('length', Js(0.0))
                    PyJs_resetAfterLine_2215_._set_name('resetAfterLine')
                    @Js
                    def PyJs_end_2216_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments, 'end':PyJs_end_2216_}, var)
                        var.registers([])
                        if PyJsStrictNeq(var.get('i'),var.get('data').get('length')):
                            PyJsTempException = JsToPyException(var.get('Error').create(Js('extra data found')))
                            raise PyJsTempException
                    PyJs_end_2216_._set_name('end')
                    return Js({'get':PyJs_get_2214_,'resetAfterLine':PyJs_resetAfterLine_2215_,'end':PyJs_end_2216_})
                PyJsHoisted_bitRetriever_.func_name = 'bitRetriever'
                var.put('bitRetriever', PyJsHoisted_bitRetriever_)
                @Js
                def PyJsHoisted_mapImage8Bit_(image, pxData, getPxPos, bpp, data, rawPos, this, arguments, var=var):
                    var = Scope({'image':image, 'pxData':pxData, 'getPxPos':getPxPos, 'bpp':bpp, 'data':data, 'rawPos':rawPos, 'this':this, 'arguments':arguments}, var)
                    var.registers(['y', 'pxData', 'x', 'imageHeight', 'getPxPos', 'imageWidth', 'data', 'image', 'rawPos', 'pxPos', 'bpp', 'imagePass'])
                    var.put('imageWidth', var.get('image').get('width'))
                    var.put('imageHeight', var.get('image').get('height'))
                    var.put('imagePass', var.get('image').get('index'))
                    #for JS loop
                    var.put('y', Js(0.0))
                    while (var.get('y')<var.get('imageHeight')):
                        try:
                            #for JS loop
                            var.put('x', Js(0.0))
                            while (var.get('x')<var.get('imageWidth')):
                                try:
                                    var.put('pxPos', var.get('getPxPos')(var.get('x'), var.get('y'), var.get('imagePass')))
                                    var.get('pixelBppMapper').callprop(var.get('bpp'), var.get('pxData'), var.get('data'), var.get('pxPos'), var.get('rawPos'))
                                    var.put('rawPos', var.get('bpp'), '+')
                                finally:
                                        (var.put('x',Js(var.get('x').to_number())+Js(1))-Js(1))
                        finally:
                                (var.put('y',Js(var.get('y').to_number())+Js(1))-Js(1))
                    return var.get('rawPos')
                PyJsHoisted_mapImage8Bit_.func_name = 'mapImage8Bit'
                var.put('mapImage8Bit', PyJsHoisted_mapImage8Bit_)
                @Js
                def PyJsHoisted_mapImageCustomBit_(image, pxData, getPxPos, bpp, bits, maxBit, this, arguments, var=var):
                    var = Scope({'image':image, 'pxData':pxData, 'getPxPos':getPxPos, 'bpp':bpp, 'bits':bits, 'maxBit':maxBit, 'this':this, 'arguments':arguments}, var)
                    var.registers(['y', 'pxData', 'x', 'imageHeight', 'pixelData', 'getPxPos', 'bits', 'maxBit', 'imageWidth', 'image', 'pxPos', 'bpp', 'imagePass'])
                    var.put('imageWidth', var.get('image').get('width'))
                    var.put('imageHeight', var.get('image').get('height'))
                    var.put('imagePass', var.get('image').get('index'))
                    #for JS loop
                    var.put('y', Js(0.0))
                    while (var.get('y')<var.get('imageHeight')):
                        try:
                            #for JS loop
                            var.put('x', Js(0.0))
                            while (var.get('x')<var.get('imageWidth')):
                                try:
                                    var.put('pixelData', var.get('bits').callprop('get', var.get('bpp')))
                                    var.put('pxPos', var.get('getPxPos')(var.get('x'), var.get('y'), var.get('imagePass')))
                                    var.get('pixelBppCustomMapper').callprop(var.get('bpp'), var.get('pxData'), var.get('pixelData'), var.get('pxPos'), var.get('maxBit'))
                                finally:
                                        (var.put('x',Js(var.get('x').to_number())+Js(1))-Js(1))
                            var.get('bits').callprop('resetAfterLine')
                        finally:
                                (var.put('y',Js(var.get('y').to_number())+Js(1))-Js(1))
                PyJsHoisted_mapImageCustomBit_.func_name = 'mapImageCustomBit'
                var.put('mapImageCustomBit', PyJsHoisted_mapImageCustomBit_)
                Js('use strict')
                var.put('interlaceUtils', var.get('require')(Js('./interlace')))
                @Js
                def PyJs_anonymous_2204_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    pass
                PyJs_anonymous_2204_._set_name('anonymous')
                @Js
                def PyJs_anonymous_2205_(pxData, data, pxPos, rawPos, this, arguments, var=var):
                    var = Scope({'pxData':pxData, 'data':data, 'pxPos':pxPos, 'rawPos':rawPos, 'this':this, 'arguments':arguments}, var)
                    var.registers(['pxData', 'data', 'rawPos', 'pxPos', 'pixel'])
                    if PyJsStrictEq(var.get('rawPos'),var.get('data').get('length')):
                        PyJsTempException = JsToPyException(var.get('Error').create(Js('Ran out of data')))
                        raise PyJsTempException
                    var.put('pixel', var.get('data').get(var.get('rawPos')))
                    var.get('pxData').put(var.get('pxPos'), var.get('pixel'))
                    var.get('pxData').put((var.get('pxPos')+Js(1.0)), var.get('pixel'))
                    var.get('pxData').put((var.get('pxPos')+Js(2.0)), var.get('pixel'))
                    var.get('pxData').put((var.get('pxPos')+Js(3.0)), Js(255))
                PyJs_anonymous_2205_._set_name('anonymous')
                @Js
                def PyJs_anonymous_2206_(pxData, data, pxPos, rawPos, this, arguments, var=var):
                    var = Scope({'pxData':pxData, 'data':data, 'pxPos':pxPos, 'rawPos':rawPos, 'this':this, 'arguments':arguments}, var)
                    var.registers(['pxData', 'data', 'rawPos', 'pxPos', 'pixel'])
                    if ((var.get('rawPos')+Js(1.0))>=var.get('data').get('length')):
                        PyJsTempException = JsToPyException(var.get('Error').create(Js('Ran out of data')))
                        raise PyJsTempException
                    var.put('pixel', var.get('data').get(var.get('rawPos')))
                    var.get('pxData').put(var.get('pxPos'), var.get('pixel'))
                    var.get('pxData').put((var.get('pxPos')+Js(1.0)), var.get('pixel'))
                    var.get('pxData').put((var.get('pxPos')+Js(2.0)), var.get('pixel'))
                    var.get('pxData').put((var.get('pxPos')+Js(3.0)), var.get('data').get((var.get('rawPos')+Js(1.0))))
                PyJs_anonymous_2206_._set_name('anonymous')
                @Js
                def PyJs_anonymous_2207_(pxData, data, pxPos, rawPos, this, arguments, var=var):
                    var = Scope({'pxData':pxData, 'data':data, 'pxPos':pxPos, 'rawPos':rawPos, 'this':this, 'arguments':arguments}, var)
                    var.registers(['pxData', 'pxPos', 'data', 'rawPos'])
                    if ((var.get('rawPos')+Js(2.0))>=var.get('data').get('length')):
                        PyJsTempException = JsToPyException(var.get('Error').create(Js('Ran out of data')))
                        raise PyJsTempException
                    var.get('pxData').put(var.get('pxPos'), var.get('data').get(var.get('rawPos')))
                    var.get('pxData').put((var.get('pxPos')+Js(1.0)), var.get('data').get((var.get('rawPos')+Js(1.0))))
                    var.get('pxData').put((var.get('pxPos')+Js(2.0)), var.get('data').get((var.get('rawPos')+Js(2.0))))
                    var.get('pxData').put((var.get('pxPos')+Js(3.0)), Js(255))
                PyJs_anonymous_2207_._set_name('anonymous')
                @Js
                def PyJs_anonymous_2208_(pxData, data, pxPos, rawPos, this, arguments, var=var):
                    var = Scope({'pxData':pxData, 'data':data, 'pxPos':pxPos, 'rawPos':rawPos, 'this':this, 'arguments':arguments}, var)
                    var.registers(['pxData', 'pxPos', 'data', 'rawPos'])
                    if ((var.get('rawPos')+Js(3.0))>=var.get('data').get('length')):
                        PyJsTempException = JsToPyException(var.get('Error').create(Js('Ran out of data')))
                        raise PyJsTempException
                    var.get('pxData').put(var.get('pxPos'), var.get('data').get(var.get('rawPos')))
                    var.get('pxData').put((var.get('pxPos')+Js(1.0)), var.get('data').get((var.get('rawPos')+Js(1.0))))
                    var.get('pxData').put((var.get('pxPos')+Js(2.0)), var.get('data').get((var.get('rawPos')+Js(2.0))))
                    var.get('pxData').put((var.get('pxPos')+Js(3.0)), var.get('data').get((var.get('rawPos')+Js(3.0))))
                PyJs_anonymous_2208_._set_name('anonymous')
                var.put('pixelBppMapper', Js([PyJs_anonymous_2204_, PyJs_anonymous_2205_, PyJs_anonymous_2206_, PyJs_anonymous_2207_, PyJs_anonymous_2208_]))
                @Js
                def PyJs_anonymous_2209_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    pass
                PyJs_anonymous_2209_._set_name('anonymous')
                @Js
                def PyJs_anonymous_2210_(pxData, pixelData, pxPos, maxBit, this, arguments, var=var):
                    var = Scope({'pxData':pxData, 'pixelData':pixelData, 'pxPos':pxPos, 'maxBit':maxBit, 'this':this, 'arguments':arguments}, var)
                    var.registers(['pxData', 'pixelData', 'maxBit', 'pxPos', 'pixel'])
                    var.put('pixel', var.get('pixelData').get('0'))
                    var.get('pxData').put(var.get('pxPos'), var.get('pixel'))
                    var.get('pxData').put((var.get('pxPos')+Js(1.0)), var.get('pixel'))
                    var.get('pxData').put((var.get('pxPos')+Js(2.0)), var.get('pixel'))
                    var.get('pxData').put((var.get('pxPos')+Js(3.0)), var.get('maxBit'))
                PyJs_anonymous_2210_._set_name('anonymous')
                @Js
                def PyJs_anonymous_2211_(pxData, pixelData, pxPos, this, arguments, var=var):
                    var = Scope({'pxData':pxData, 'pixelData':pixelData, 'pxPos':pxPos, 'this':this, 'arguments':arguments}, var)
                    var.registers(['pixelData', 'pxData', 'pxPos', 'pixel'])
                    var.put('pixel', var.get('pixelData').get('0'))
                    var.get('pxData').put(var.get('pxPos'), var.get('pixel'))
                    var.get('pxData').put((var.get('pxPos')+Js(1.0)), var.get('pixel'))
                    var.get('pxData').put((var.get('pxPos')+Js(2.0)), var.get('pixel'))
                    var.get('pxData').put((var.get('pxPos')+Js(3.0)), var.get('pixelData').get('1'))
                PyJs_anonymous_2211_._set_name('anonymous')
                @Js
                def PyJs_anonymous_2212_(pxData, pixelData, pxPos, maxBit, this, arguments, var=var):
                    var = Scope({'pxData':pxData, 'pixelData':pixelData, 'pxPos':pxPos, 'maxBit':maxBit, 'this':this, 'arguments':arguments}, var)
                    var.registers(['maxBit', 'pxData', 'pxPos', 'pixelData'])
                    var.get('pxData').put(var.get('pxPos'), var.get('pixelData').get('0'))
                    var.get('pxData').put((var.get('pxPos')+Js(1.0)), var.get('pixelData').get('1'))
                    var.get('pxData').put((var.get('pxPos')+Js(2.0)), var.get('pixelData').get('2'))
                    var.get('pxData').put((var.get('pxPos')+Js(3.0)), var.get('maxBit'))
                PyJs_anonymous_2212_._set_name('anonymous')
                @Js
                def PyJs_anonymous_2213_(pxData, pixelData, pxPos, this, arguments, var=var):
                    var = Scope({'pxData':pxData, 'pixelData':pixelData, 'pxPos':pxPos, 'this':this, 'arguments':arguments}, var)
                    var.registers(['pxData', 'pxPos', 'pixelData'])
                    var.get('pxData').put(var.get('pxPos'), var.get('pixelData').get('0'))
                    var.get('pxData').put((var.get('pxPos')+Js(1.0)), var.get('pixelData').get('1'))
                    var.get('pxData').put((var.get('pxPos')+Js(2.0)), var.get('pixelData').get('2'))
                    var.get('pxData').put((var.get('pxPos')+Js(3.0)), var.get('pixelData').get('3'))
                PyJs_anonymous_2213_._set_name('anonymous')
                var.put('pixelBppCustomMapper', Js([PyJs_anonymous_2209_, PyJs_anonymous_2210_, PyJs_anonymous_2211_, PyJs_anonymous_2212_, PyJs_anonymous_2213_]))
                pass
                pass
                pass
                @Js
                def PyJs_anonymous_2217_(data, bitmapInfo, this, arguments, var=var):
                    var = Scope({'data':data, 'bitmapInfo':bitmapInfo, 'this':this, 'arguments':arguments}, var)
                    var.registers(['depth', 'pxData', 'interlace', 'height', 'imageIndex', 'images', 'bitmapInfo', 'width', 'bits', 'getPxPos', 'maxBit', 'data', 'rawPos', 'bpp', 'nonInterlacedPxPos'])
                    var.put('width', var.get('bitmapInfo').get('width'))
                    var.put('height', var.get('bitmapInfo').get('height'))
                    var.put('depth', var.get('bitmapInfo').get('depth'))
                    var.put('bpp', var.get('bitmapInfo').get('bpp'))
                    var.put('interlace', var.get('bitmapInfo').get('interlace'))
                    if PyJsStrictNeq(var.get('depth'),Js(8.0)):
                        var.put('bits', var.get('bitRetriever')(var.get('data'), var.get('depth')))
                    pass
                    if (var.get('depth')<=Js(8.0)):
                        var.put('pxData', var.get('Buffer').create(((var.get('width')*var.get('height'))*Js(4.0))))
                    else:
                        var.put('pxData', var.get('Uint16Array').create(((var.get('width')*var.get('height'))*Js(4.0))))
                    var.put('maxBit', (var.get('Math').callprop('pow', Js(2.0), var.get('depth'))-Js(1.0)))
                    var.put('rawPos', Js(0.0))
                    pass
                    pass
                    if var.get('interlace'):
                        var.put('images', var.get('interlaceUtils').callprop('getImagePasses', var.get('width'), var.get('height')))
                        var.put('getPxPos', var.get('interlaceUtils').callprop('getInterlaceIterator', var.get('width'), var.get('height')))
                    else:
                        var.put('nonInterlacedPxPos', Js(0.0))
                        @Js
                        def PyJs_getPxPos_2218_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments, 'getPxPos':PyJs_getPxPos_2218_}, var)
                            var.registers(['returner'])
                            var.put('returner', var.get('nonInterlacedPxPos'))
                            var.put('nonInterlacedPxPos', Js(4.0), '+')
                            return var.get('returner')
                        PyJs_getPxPos_2218_._set_name('getPxPos')
                        var.put('getPxPos', PyJs_getPxPos_2218_)
                        var.put('images', Js([Js({'width':var.get('width'),'height':var.get('height')})]))
                    #for JS loop
                    var.put('imageIndex', Js(0.0))
                    while (var.get('imageIndex')<var.get('images').get('length')):
                        try:
                            if PyJsStrictEq(var.get('depth'),Js(8.0)):
                                var.put('rawPos', var.get('mapImage8Bit')(var.get('images').get(var.get('imageIndex')), var.get('pxData'), var.get('getPxPos'), var.get('bpp'), var.get('data'), var.get('rawPos')))
                            else:
                                var.get('mapImageCustomBit')(var.get('images').get(var.get('imageIndex')), var.get('pxData'), var.get('getPxPos'), var.get('bpp'), var.get('bits'), var.get('maxBit'))
                        finally:
                                (var.put('imageIndex',Js(var.get('imageIndex').to_number())+Js(1))-Js(1))
                    if PyJsStrictEq(var.get('depth'),Js(8.0)):
                        if PyJsStrictNeq(var.get('rawPos'),var.get('data').get('length')):
                            PyJsTempException = JsToPyException(var.get('Error').create(Js('extra data found')))
                            raise PyJsTempException
                    else:
                        var.get('bits').callprop('end')
                    return var.get('pxData')
                PyJs_anonymous_2217_._set_name('anonymous')
                var.get('exports').put('dataToBitMap', PyJs_anonymous_2217_)
            PyJs_anonymous_2203_._set_name('anonymous')
            PyJs_anonymous_2203_.callprop('call', var.get(u"this"))
        PyJs_anonymous_2202_._set_name('anonymous')
        PyJs_anonymous_2202_.callprop('call', var.get(u"this"), var.get('require')(Js('buffer')).get('Buffer'))
    PyJs_anonymous_2201_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2219_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_2220_(Buffer, this, arguments, var=var):
            var = Scope({'Buffer':Buffer, 'this':this, 'arguments':arguments}, var)
            var.registers(['Buffer'])
            @Js
            def PyJs_anonymous_2221_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['constants'])
                Js('use strict')
                var.put('constants', var.get('require')(Js('./constants')))
                @Js
                def PyJs_anonymous_2222_(dataIn, width, height, options, this, arguments, var=var):
                    var = Scope({'dataIn':dataIn, 'width':width, 'height':height, 'options':options, 'this':this, 'arguments':arguments}, var)
                    var.registers(['maxValue', 'getRGBA', 'outData', 'dataIn', 'outHasAlpha', 'bigEndian', 'y', 'outIndex', 'width', 'options', 'data', 'inIndex', 'grayscale', 'x', 'outBpp', 'height', 'bgColor', 'rgba', 'inBpp'])
                    @Js
                    def PyJsHoisted_getRGBA_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['red', 'alpha', 'blue', 'green'])
                        pass
                        pass
                        pass
                        var.put('alpha', var.get('maxValue'))
                        while 1:
                            SWITCHED = False
                            CONDITION = (var.get('options').get('inputColorType'))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('constants').get('COLORTYPE_COLOR_ALPHA')):
                                SWITCHED = True
                                var.put('alpha', var.get('data').get((var.get('inIndex')+Js(3.0))))
                                var.put('red', var.get('data').get(var.get('inIndex')))
                                var.put('green', var.get('data').get((var.get('inIndex')+Js(1.0))))
                                var.put('blue', var.get('data').get((var.get('inIndex')+Js(2.0))))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('constants').get('COLORTYPE_COLOR')):
                                SWITCHED = True
                                var.put('red', var.get('data').get(var.get('inIndex')))
                                var.put('green', var.get('data').get((var.get('inIndex')+Js(1.0))))
                                var.put('blue', var.get('data').get((var.get('inIndex')+Js(2.0))))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('constants').get('COLORTYPE_ALPHA')):
                                SWITCHED = True
                                var.put('alpha', var.get('data').get((var.get('inIndex')+Js(1.0))))
                                var.put('red', var.get('data').get(var.get('inIndex')))
                                var.put('green', var.get('red'))
                                var.put('blue', var.get('red'))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('constants').get('COLORTYPE_GRAYSCALE')):
                                SWITCHED = True
                                var.put('red', var.get('data').get(var.get('inIndex')))
                                var.put('green', var.get('red'))
                                var.put('blue', var.get('red'))
                                break
                            if True:
                                SWITCHED = True
                                PyJsTempException = JsToPyException(var.get('Error').create(((Js('input color type:')+var.get('options').get('inputColorType'))+Js(' is not supported at present'))))
                                raise PyJsTempException
                            SWITCHED = True
                            break
                        if var.get('options').get('inputHasAlpha'):
                            if var.get('outHasAlpha').neg():
                                var.put('alpha', var.get('maxValue'), '/')
                                var.put('red', var.get('Math').callprop('min', var.get('Math').callprop('max', var.get('Math').callprop('round', (((Js(1.0)-var.get('alpha'))*var.get('bgColor').get('red'))+(var.get('alpha')*var.get('red')))), Js(0.0)), var.get('maxValue')))
                                var.put('green', var.get('Math').callprop('min', var.get('Math').callprop('max', var.get('Math').callprop('round', (((Js(1.0)-var.get('alpha'))*var.get('bgColor').get('green'))+(var.get('alpha')*var.get('green')))), Js(0.0)), var.get('maxValue')))
                                var.put('blue', var.get('Math').callprop('min', var.get('Math').callprop('max', var.get('Math').callprop('round', (((Js(1.0)-var.get('alpha'))*var.get('bgColor').get('blue'))+(var.get('alpha')*var.get('blue')))), Js(0.0)), var.get('maxValue')))
                        return Js({'red':var.get('red'),'green':var.get('green'),'blue':var.get('blue'),'alpha':var.get('alpha')})
                    PyJsHoisted_getRGBA_.func_name = 'getRGBA'
                    var.put('getRGBA', PyJsHoisted_getRGBA_)
                    var.put('outHasAlpha', PyJsStrictNeq(Js([var.get('constants').get('COLORTYPE_COLOR_ALPHA'), var.get('constants').get('COLORTYPE_ALPHA')]).callprop('indexOf', var.get('options').get('colorType')),(-Js(1.0))))
                    if PyJsStrictEq(var.get('options').get('colorType'),var.get('options').get('inputColorType')):
                        @Js
                        def PyJs_anonymous_2223_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers(['buffer'])
                            var.put('buffer', var.get('ArrayBuffer').create(Js(2.0)))
                            var.get('DataView').create(var.get('buffer')).callprop('setInt16', Js(0.0), Js(256.0), Js(True))
                            return PyJsStrictNeq(var.get('Int16Array').create(var.get('buffer')).get('0'),Js(256.0))
                        PyJs_anonymous_2223_._set_name('anonymous')
                        var.put('bigEndian', PyJs_anonymous_2223_())
                        if (PyJsStrictEq(var.get('options').get('bitDepth'),Js(8.0)) or (PyJsStrictEq(var.get('options').get('bitDepth'),Js(16.0)) and var.get('bigEndian'))):
                            return var.get('dataIn')
                    var.put('data', (var.get('dataIn') if PyJsStrictNeq(var.get('options').get('bitDepth'),Js(16.0)) else var.get('Uint16Array').create(var.get('dataIn').get('buffer'))))
                    var.put('maxValue', Js(255.0))
                    var.put('inBpp', var.get('constants').get('COLORTYPE_TO_BPP_MAP').get(var.get('options').get('inputColorType')))
                    if (PyJsStrictEq(var.get('inBpp'),Js(4.0)) and var.get('options').get('inputHasAlpha').neg()):
                        var.put('inBpp', Js(3.0))
                    var.put('outBpp', var.get('constants').get('COLORTYPE_TO_BPP_MAP').get(var.get('options').get('colorType')))
                    if PyJsStrictEq(var.get('options').get('bitDepth'),Js(16.0)):
                        var.put('maxValue', Js(65535.0))
                        var.put('outBpp', Js(2.0), '*')
                    var.put('outData', var.get('Buffer').create(((var.get('width')*var.get('height'))*var.get('outBpp'))))
                    var.put('inIndex', Js(0.0))
                    var.put('outIndex', Js(0.0))
                    var.put('bgColor', (var.get('options').get('bgColor') or Js({})))
                    if PyJsStrictEq(var.get('bgColor').get('red'),var.get('undefined')):
                        var.get('bgColor').put('red', var.get('maxValue'))
                    if PyJsStrictEq(var.get('bgColor').get('green'),var.get('undefined')):
                        var.get('bgColor').put('green', var.get('maxValue'))
                    if PyJsStrictEq(var.get('bgColor').get('blue'),var.get('undefined')):
                        var.get('bgColor').put('blue', var.get('maxValue'))
                    pass
                    #for JS loop
                    var.put('y', Js(0.0))
                    while (var.get('y')<var.get('height')):
                        try:
                            #for JS loop
                            var.put('x', Js(0.0))
                            while (var.get('x')<var.get('width')):
                                try:
                                    var.put('rgba', var.get('getRGBA')(var.get('data'), var.get('inIndex')))
                                    while 1:
                                        SWITCHED = False
                                        CONDITION = (var.get('options').get('colorType'))
                                        if SWITCHED or PyJsStrictEq(CONDITION, var.get('constants').get('COLORTYPE_COLOR_ALPHA')):
                                            SWITCHED = True
                                            pass
                                        if SWITCHED or PyJsStrictEq(CONDITION, var.get('constants').get('COLORTYPE_COLOR')):
                                            SWITCHED = True
                                            if PyJsStrictEq(var.get('options').get('bitDepth'),Js(8.0)):
                                                var.get('outData').put(var.get('outIndex'), var.get('rgba').get('red'))
                                                var.get('outData').put((var.get('outIndex')+Js(1.0)), var.get('rgba').get('green'))
                                                var.get('outData').put((var.get('outIndex')+Js(2.0)), var.get('rgba').get('blue'))
                                                if var.get('outHasAlpha'):
                                                    var.get('outData').put((var.get('outIndex')+Js(3.0)), var.get('rgba').get('alpha'))
                                            else:
                                                var.get('outData').callprop('writeUInt16BE', var.get('rgba').get('red'), var.get('outIndex'))
                                                var.get('outData').callprop('writeUInt16BE', var.get('rgba').get('green'), (var.get('outIndex')+Js(2.0)))
                                                var.get('outData').callprop('writeUInt16BE', var.get('rgba').get('blue'), (var.get('outIndex')+Js(4.0)))
                                                if var.get('outHasAlpha'):
                                                    var.get('outData').callprop('writeUInt16BE', var.get('rgba').get('alpha'), (var.get('outIndex')+Js(6.0)))
                                            break
                                        if SWITCHED or PyJsStrictEq(CONDITION, var.get('constants').get('COLORTYPE_ALPHA')):
                                            SWITCHED = True
                                            pass
                                        if SWITCHED or PyJsStrictEq(CONDITION, var.get('constants').get('COLORTYPE_GRAYSCALE')):
                                            SWITCHED = True
                                            var.put('grayscale', (((var.get('rgba').get('red')+var.get('rgba').get('green'))+var.get('rgba').get('blue'))/Js(3.0)))
                                            if PyJsStrictEq(var.get('options').get('bitDepth'),Js(8.0)):
                                                var.get('outData').put(var.get('outIndex'), var.get('grayscale'))
                                                if var.get('outHasAlpha'):
                                                    var.get('outData').put((var.get('outIndex')+Js(1.0)), var.get('rgba').get('alpha'))
                                            else:
                                                var.get('outData').callprop('writeUInt16BE', var.get('grayscale'), var.get('outIndex'))
                                                if var.get('outHasAlpha'):
                                                    var.get('outData').callprop('writeUInt16BE', var.get('rgba').get('alpha'), (var.get('outIndex')+Js(2.0)))
                                            break
                                        if True:
                                            SWITCHED = True
                                            PyJsTempException = JsToPyException(var.get('Error').create((Js('unrecognised color Type ')+var.get('options').get('colorType'))))
                                            raise PyJsTempException
                                        SWITCHED = True
                                        break
                                    var.put('inIndex', var.get('inBpp'), '+')
                                    var.put('outIndex', var.get('outBpp'), '+')
                                finally:
                                        (var.put('x',Js(var.get('x').to_number())+Js(1))-Js(1))
                        finally:
                                (var.put('y',Js(var.get('y').to_number())+Js(1))-Js(1))
                    return var.get('outData')
                PyJs_anonymous_2222_._set_name('anonymous')
                var.get('module').put('exports', PyJs_anonymous_2222_)
            PyJs_anonymous_2221_._set_name('anonymous')
            PyJs_anonymous_2221_.callprop('call', var.get(u"this"))
        PyJs_anonymous_2220_._set_name('anonymous')
        PyJs_anonymous_2220_.callprop('call', var.get(u"this"), var.get('require')(Js('buffer')).get('Buffer'))
    PyJs_anonymous_2219_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2224_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_2225_(process, Buffer, this, arguments, var=var):
            var = Scope({'process':process, 'Buffer':Buffer, 'this':this, 'arguments':arguments}, var)
            var.registers(['Buffer', 'process'])
            @Js
            def PyJs_anonymous_2226_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['ChunkStream', 'Stream', 'util'])
                Js('use strict')
                var.put('util', var.get('require')(Js('util')))
                var.put('Stream', var.get('require')(Js('stream')))
                @Js
                def PyJs_anonymous_2227_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.get('Stream').callprop('call', var.get(u"this"))
                    var.get(u"this").put('_buffers', Js([]))
                    var.get(u"this").put('_buffered', Js(0.0))
                    var.get(u"this").put('_reads', Js([]))
                    var.get(u"this").put('_paused', Js(False))
                    var.get(u"this").put('_encoding', Js('utf8'))
                    var.get(u"this").put('writable', Js(True))
                PyJs_anonymous_2227_._set_name('anonymous')
                var.put('ChunkStream', var.get('module').put('exports', PyJs_anonymous_2227_))
                var.get('util').callprop('inherits', var.get('ChunkStream'), var.get('Stream'))
                @Js
                def PyJs_anonymous_2228_(length, callback, this, arguments, var=var):
                    var = Scope({'length':length, 'callback':callback, 'this':this, 'arguments':arguments}, var)
                    var.registers(['length', 'callback'])
                    var.get(u"this").get('_reads').callprop('push', Js({'length':var.get('Math').callprop('abs', var.get('length')),'allowLess':(var.get('length')<Js(0.0)),'func':var.get('callback')}))
                    @Js
                    def PyJs_anonymous_2229_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        var.get(u"this").callprop('_process')
                        if (var.get(u"this").get('_paused') and (var.get(u"this").get('_reads').get('length')>Js(0.0))):
                            var.get(u"this").put('_paused', Js(False))
                            var.get(u"this").callprop('emit', Js('drain'))
                    PyJs_anonymous_2229_._set_name('anonymous')
                    var.get('process').callprop('nextTick', PyJs_anonymous_2229_.callprop('bind', var.get(u"this")))
                PyJs_anonymous_2228_._set_name('anonymous')
                var.get('ChunkStream').get('prototype').put('read', PyJs_anonymous_2228_)
                @Js
                def PyJs_anonymous_2230_(data, encoding, this, arguments, var=var):
                    var = Scope({'data':data, 'encoding':encoding, 'this':this, 'arguments':arguments}, var)
                    var.registers(['data', 'dataBuffer', 'encoding'])
                    if var.get(u"this").get('writable').neg():
                        var.get(u"this").callprop('emit', Js('error'), var.get('Error').create(Js('Stream not writable')))
                        return Js(False)
                    pass
                    if var.get('Buffer').callprop('isBuffer', var.get('data')):
                        var.put('dataBuffer', var.get('data'))
                    else:
                        var.put('dataBuffer', var.get('Buffer').create(var.get('data'), (var.get('encoding') or var.get(u"this").get('_encoding'))))
                    var.get(u"this").get('_buffers').callprop('push', var.get('dataBuffer'))
                    var.get(u"this").put('_buffered', var.get('dataBuffer').get('length'), '+')
                    var.get(u"this").callprop('_process')
                    if (var.get(u"this").get('_reads') and PyJsStrictEq(var.get(u"this").get('_reads').get('length'),Js(0.0))):
                        var.get(u"this").put('_paused', Js(True))
                    return (var.get(u"this").get('writable') and var.get(u"this").get('_paused').neg())
                PyJs_anonymous_2230_._set_name('anonymous')
                var.get('ChunkStream').get('prototype').put('write', PyJs_anonymous_2230_)
                @Js
                def PyJs_anonymous_2231_(data, encoding, this, arguments, var=var):
                    var = Scope({'data':data, 'encoding':encoding, 'this':this, 'arguments':arguments}, var)
                    var.registers(['data', 'encoding'])
                    if var.get('data'):
                        var.get(u"this").callprop('write', var.get('data'), var.get('encoding'))
                    var.get(u"this").put('writable', Js(False))
                    if var.get(u"this").get('_buffers').neg():
                        return var.get('undefined')
                    if PyJsStrictEq(var.get(u"this").get('_buffers').get('length'),Js(0.0)):
                        var.get(u"this").callprop('_end')
                    else:
                        var.get(u"this").get('_buffers').callprop('push', var.get(u"null"))
                        var.get(u"this").callprop('_process')
                PyJs_anonymous_2231_._set_name('anonymous')
                var.get('ChunkStream').get('prototype').put('end', PyJs_anonymous_2231_)
                var.get('ChunkStream').get('prototype').put('destroySoon', var.get('ChunkStream').get('prototype').get('end'))
                @Js
                def PyJs_anonymous_2232_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    if (var.get(u"this").get('_reads').get('length')>Js(0.0)):
                        var.get(u"this").callprop('emit', Js('error'), var.get('Error').create(Js('Unexpected end of input')))
                    var.get(u"this").callprop('destroy')
                PyJs_anonymous_2232_._set_name('anonymous')
                var.get('ChunkStream').get('prototype').put('_end', PyJs_anonymous_2232_)
                @Js
                def PyJs_anonymous_2233_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    if var.get(u"this").get('_buffers').neg():
                        return var.get('undefined')
                    var.get(u"this").put('writable', Js(False))
                    var.get(u"this").put('_reads', var.get(u"null"))
                    var.get(u"this").put('_buffers', var.get(u"null"))
                    var.get(u"this").callprop('emit', Js('close'))
                PyJs_anonymous_2233_._set_name('anonymous')
                var.get('ChunkStream').get('prototype').put('destroy', PyJs_anonymous_2233_)
                @Js
                def PyJs_anonymous_2234_(read, this, arguments, var=var):
                    var = Scope({'read':read, 'this':this, 'arguments':arguments}, var)
                    var.registers(['smallerBuf', 'read'])
                    var.get(u"this").get('_reads').callprop('shift')
                    var.put('smallerBuf', var.get(u"this").get('_buffers').get('0'))
                    if (var.get('smallerBuf').get('length')>var.get('read').get('length')):
                        var.get(u"this").put('_buffered', var.get('read').get('length'), '-')
                        var.get(u"this").get('_buffers').put('0', var.get('smallerBuf').callprop('slice', var.get('read').get('length')))
                        var.get('read').get('func').callprop('call', var.get(u"this"), var.get('smallerBuf').callprop('slice', Js(0.0), var.get('read').get('length')))
                    else:
                        var.get(u"this").put('_buffered', var.get('smallerBuf').get('length'), '-')
                        var.get(u"this").get('_buffers').callprop('shift')
                        var.get('read').get('func').callprop('call', var.get(u"this"), var.get('smallerBuf'))
                PyJs_anonymous_2234_._set_name('anonymous')
                var.get('ChunkStream').get('prototype').put('_processReadAllowingLess', PyJs_anonymous_2234_)
                @Js
                def PyJs_anonymous_2235_(read, this, arguments, var=var):
                    var = Scope({'read':read, 'this':this, 'arguments':arguments}, var)
                    var.registers(['pos', 'len', 'buf', 'count', 'data', 'read'])
                    var.get(u"this").get('_reads').callprop('shift')
                    var.put('pos', Js(0.0))
                    var.put('count', Js(0.0))
                    var.put('data', var.get('Buffer').create(var.get('read').get('length')))
                    while (var.get('pos')<var.get('read').get('length')):
                        var.put('buf', var.get(u"this").get('_buffers').get((var.put('count',Js(var.get('count').to_number())+Js(1))-Js(1))))
                        var.put('len', var.get('Math').callprop('min', var.get('buf').get('length'), (var.get('read').get('length')-var.get('pos'))))
                        var.get('buf').callprop('copy', var.get('data'), var.get('pos'), Js(0.0), var.get('len'))
                        var.put('pos', var.get('len'), '+')
                        if PyJsStrictNeq(var.get('len'),var.get('buf').get('length')):
                            var.get(u"this").get('_buffers').put(var.put('count',Js(var.get('count').to_number())-Js(1)), var.get('buf').callprop('slice', var.get('len')))
                    if (var.get('count')>Js(0.0)):
                        var.get(u"this").get('_buffers').callprop('splice', Js(0.0), var.get('count'))
                    var.get(u"this").put('_buffered', var.get('read').get('length'), '-')
                    var.get('read').get('func').callprop('call', var.get(u"this"), var.get('data'))
                PyJs_anonymous_2235_._set_name('anonymous')
                var.get('ChunkStream').get('prototype').put('_processRead', PyJs_anonymous_2235_)
                @Js
                def PyJs_anonymous_2236_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers(['read'])
                    try:
                        while (((var.get(u"this").get('_buffered')>Js(0.0)) and var.get(u"this").get('_reads')) and (var.get(u"this").get('_reads').get('length')>Js(0.0))):
                            var.put('read', var.get(u"this").get('_reads').get('0'))
                            if var.get('read').get('allowLess'):
                                var.get(u"this").callprop('_processReadAllowingLess', var.get('read'))
                            else:
                                if (var.get(u"this").get('_buffered')>=var.get('read').get('length')):
                                    var.get(u"this").callprop('_processRead', var.get('read'))
                                else:
                                    break
                        if (var.get(u"this").get('_buffers') and var.get(u"this").get('writable').neg()):
                            var.get(u"this").callprop('_end')
                    except PyJsException as PyJsTempException:
                        PyJsHolder_6578_2454185 = var.own.get('ex')
                        var.force_own_put('ex', PyExceptionToJs(PyJsTempException))
                        try:
                            var.get(u"this").callprop('emit', Js('error'), var.get('ex'))
                        finally:
                            if PyJsHolder_6578_2454185 is not None:
                                var.own['ex'] = PyJsHolder_6578_2454185
                            else:
                                del var.own['ex']
                            del PyJsHolder_6578_2454185
                PyJs_anonymous_2236_._set_name('anonymous')
                var.get('ChunkStream').get('prototype').put('_process', PyJs_anonymous_2236_)
            PyJs_anonymous_2226_._set_name('anonymous')
            PyJs_anonymous_2226_.callprop('call', var.get(u"this"))
        PyJs_anonymous_2225_._set_name('anonymous')
        PyJs_anonymous_2225_.callprop('call', var.get(u"this"), var.get('require')(Js('_process')), var.get('require')(Js('buffer')).get('Buffer'))
    PyJs_anonymous_2224_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2237_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        Js('use strict')
        def PyJs_LONG_2238_(var=var):
            return var.get('module').put('exports', Js({'PNG_SIGNATURE':Js([Js(137), Js(80), Js(78), Js(71), Js(13), Js(10), Js(26), Js(10)]),'TYPE_IHDR':Js(1229472850),'TYPE_IEND':Js(1229278788),'TYPE_IDAT':Js(1229209940),'TYPE_PLTE':Js(1347179589),'TYPE_tRNS':Js(1951551059),'TYPE_gAMA':Js(1732332865),'COLORTYPE_GRAYSCALE':Js(0.0),'COLORTYPE_PALETTE':Js(1.0),'COLORTYPE_COLOR':Js(2.0),'COLORTYPE_ALPHA':Js(4.0),'COLORTYPE_PALETTE_COLOR':Js(3.0),'COLORTYPE_COLOR_ALPHA':Js(6.0),'COLORTYPE_TO_BPP_MAP':Js({'0':Js(1.0),'2':Js(3.0),'3':Js(1.0),'4':Js(2.0),'6':Js(4.0)}),'GAMMA_DIVISION':Js(100000.0)}))
        PyJs_LONG_2238_()
    PyJs_anonymous_2237_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2239_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'crcTable', 'CrcCalculator', 'exports', 'require'])
        Js('use strict')
        var.put('crcTable', Js([]))
        @Js
        def PyJs_anonymous_2240_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['currentCrc', 'i', 'j'])
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<Js(256.0)):
                try:
                    var.put('currentCrc', var.get('i'))
                    #for JS loop
                    var.put('j', Js(0.0))
                    while (var.get('j')<Js(8.0)):
                        try:
                            if (var.get('currentCrc')&Js(1.0)):
                                var.put('currentCrc', (Js(3988292384)^PyJsBshift(var.get('currentCrc'),Js(1.0))))
                            else:
                                var.put('currentCrc', PyJsBshift(var.get('currentCrc'),Js(1.0)))
                        finally:
                                (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                    var.get('crcTable').put(var.get('i'), var.get('currentCrc'))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        PyJs_anonymous_2240_._set_name('anonymous')
        PyJs_anonymous_2240_()
        @Js
        def PyJs_anonymous_2241_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").put('_crc', (-Js(1.0)))
        PyJs_anonymous_2241_._set_name('anonymous')
        var.put('CrcCalculator', var.get('module').put('exports', PyJs_anonymous_2241_))
        @Js
        def PyJs_anonymous_2242_(data, this, arguments, var=var):
            var = Scope({'data':data, 'this':this, 'arguments':arguments}, var)
            var.registers(['data', 'i'])
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('data').get('length')):
                try:
                    var.get(u"this").put('_crc', (var.get('crcTable').get(((var.get(u"this").get('_crc')^var.get('data').get(var.get('i')))&Js(255)))^PyJsBshift(var.get(u"this").get('_crc'),Js(8.0))))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return Js(True)
        PyJs_anonymous_2242_._set_name('anonymous')
        var.get('CrcCalculator').get('prototype').put('write', PyJs_anonymous_2242_)
        @Js
        def PyJs_anonymous_2243_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return (var.get(u"this").get('_crc')^(-Js(1.0)))
        PyJs_anonymous_2243_._set_name('anonymous')
        var.get('CrcCalculator').get('prototype').put('crc32', PyJs_anonymous_2243_)
        @Js
        def PyJs_anonymous_2244_(buf, this, arguments, var=var):
            var = Scope({'buf':buf, 'this':this, 'arguments':arguments}, var)
            var.registers(['buf', 'crc', 'i'])
            var.put('crc', (-Js(1.0)))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('buf').get('length')):
                try:
                    var.put('crc', (var.get('crcTable').get(((var.get('crc')^var.get('buf').get(var.get('i')))&Js(255)))^PyJsBshift(var.get('crc'),Js(8.0))))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return (var.get('crc')^(-Js(1.0)))
        PyJs_anonymous_2244_._set_name('anonymous')
        var.get('CrcCalculator').put('crc32', PyJs_anonymous_2244_)
    PyJs_anonymous_2239_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2245_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_2246_(Buffer, this, arguments, var=var):
            var = Scope({'Buffer':Buffer, 'this':this, 'arguments':arguments}, var)
            var.registers(['Buffer'])
            @Js
            def PyJs_anonymous_2247_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['filterSub', 'filterSumAvg', 'filterSumPaeth', 'paethPredictor', 'filterSumNone', 'filterSumUp', 'filterUp', 'filters', 'filterPaeth', 'filterNone', 'filterAvg', 'filterSums', 'filterSumSub'])
                @Js
                def PyJsHoisted_filterNone_(pxData, pxPos, byteWidth, rawData, rawPos, this, arguments, var=var):
                    var = Scope({'pxData':pxData, 'pxPos':pxPos, 'byteWidth':byteWidth, 'rawData':rawData, 'rawPos':rawPos, 'this':this, 'arguments':arguments}, var)
                    var.registers(['pxData', 'x', 'rawPos', 'pxPos', 'rawData', 'byteWidth'])
                    #for JS loop
                    var.put('x', Js(0.0))
                    while (var.get('x')<var.get('byteWidth')):
                        try:
                            var.get('rawData').put((var.get('rawPos')+var.get('x')), var.get('pxData').get((var.get('pxPos')+var.get('x'))))
                        finally:
                                (var.put('x',Js(var.get('x').to_number())+Js(1))-Js(1))
                PyJsHoisted_filterNone_.func_name = 'filterNone'
                var.put('filterNone', PyJsHoisted_filterNone_)
                @Js
                def PyJsHoisted_filterSumNone_(pxData, pxPos, byteWidth, this, arguments, var=var):
                    var = Scope({'pxData':pxData, 'pxPos':pxPos, 'byteWidth':byteWidth, 'this':this, 'arguments':arguments}, var)
                    var.registers(['pxData', 'i', 'length', 'sum', 'pxPos', 'byteWidth'])
                    var.put('sum', Js(0.0))
                    var.put('length', (var.get('pxPos')+var.get('byteWidth')))
                    #for JS loop
                    var.put('i', var.get('pxPos'))
                    while (var.get('i')<var.get('length')):
                        try:
                            var.put('sum', var.get('Math').callprop('abs', var.get('pxData').get(var.get('i'))), '+')
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    return var.get('sum')
                PyJsHoisted_filterSumNone_.func_name = 'filterSumNone'
                var.put('filterSumNone', PyJsHoisted_filterSumNone_)
                @Js
                def PyJsHoisted_filterSub_(pxData, pxPos, byteWidth, rawData, rawPos, bpp, this, arguments, var=var):
                    var = Scope({'pxData':pxData, 'pxPos':pxPos, 'byteWidth':byteWidth, 'rawData':rawData, 'rawPos':rawPos, 'bpp':bpp, 'this':this, 'arguments':arguments}, var)
                    var.registers(['pxData', 'x', 'val', 'rawData', 'rawPos', 'left', 'pxPos', 'bpp', 'byteWidth'])
                    #for JS loop
                    var.put('x', Js(0.0))
                    while (var.get('x')<var.get('byteWidth')):
                        try:
                            var.put('left', (var.get('pxData').get(((var.get('pxPos')+var.get('x'))-var.get('bpp'))) if (var.get('x')>=var.get('bpp')) else Js(0.0)))
                            var.put('val', (var.get('pxData').get((var.get('pxPos')+var.get('x')))-var.get('left')))
                            var.get('rawData').put((var.get('rawPos')+var.get('x')), var.get('val'))
                        finally:
                                (var.put('x',Js(var.get('x').to_number())+Js(1))-Js(1))
                PyJsHoisted_filterSub_.func_name = 'filterSub'
                var.put('filterSub', PyJsHoisted_filterSub_)
                @Js
                def PyJsHoisted_filterSumSub_(pxData, pxPos, byteWidth, bpp, this, arguments, var=var):
                    var = Scope({'pxData':pxData, 'pxPos':pxPos, 'byteWidth':byteWidth, 'bpp':bpp, 'this':this, 'arguments':arguments}, var)
                    var.registers(['pxData', 'x', 'val', 'sum', 'left', 'pxPos', 'bpp', 'byteWidth'])
                    var.put('sum', Js(0.0))
                    #for JS loop
                    var.put('x', Js(0.0))
                    while (var.get('x')<var.get('byteWidth')):
                        try:
                            var.put('left', (var.get('pxData').get(((var.get('pxPos')+var.get('x'))-var.get('bpp'))) if (var.get('x')>=var.get('bpp')) else Js(0.0)))
                            var.put('val', (var.get('pxData').get((var.get('pxPos')+var.get('x')))-var.get('left')))
                            var.put('sum', var.get('Math').callprop('abs', var.get('val')), '+')
                        finally:
                                (var.put('x',Js(var.get('x').to_number())+Js(1))-Js(1))
                    return var.get('sum')
                PyJsHoisted_filterSumSub_.func_name = 'filterSumSub'
                var.put('filterSumSub', PyJsHoisted_filterSumSub_)
                @Js
                def PyJsHoisted_filterUp_(pxData, pxPos, byteWidth, rawData, rawPos, this, arguments, var=var):
                    var = Scope({'pxData':pxData, 'pxPos':pxPos, 'byteWidth':byteWidth, 'rawData':rawData, 'rawPos':rawPos, 'this':this, 'arguments':arguments}, var)
                    var.registers(['pxData', 'x', 'val', 'up', 'rawData', 'rawPos', 'pxPos', 'byteWidth'])
                    #for JS loop
                    var.put('x', Js(0.0))
                    while (var.get('x')<var.get('byteWidth')):
                        try:
                            var.put('up', (var.get('pxData').get(((var.get('pxPos')+var.get('x'))-var.get('byteWidth'))) if (var.get('pxPos')>Js(0.0)) else Js(0.0)))
                            var.put('val', (var.get('pxData').get((var.get('pxPos')+var.get('x')))-var.get('up')))
                            var.get('rawData').put((var.get('rawPos')+var.get('x')), var.get('val'))
                        finally:
                                (var.put('x',Js(var.get('x').to_number())+Js(1))-Js(1))
                PyJsHoisted_filterUp_.func_name = 'filterUp'
                var.put('filterUp', PyJsHoisted_filterUp_)
                @Js
                def PyJsHoisted_filterSumUp_(pxData, pxPos, byteWidth, this, arguments, var=var):
                    var = Scope({'pxData':pxData, 'pxPos':pxPos, 'byteWidth':byteWidth, 'this':this, 'arguments':arguments}, var)
                    var.registers(['pxData', 'x', 'val', 'length', 'sum', 'up', 'pxPos', 'byteWidth'])
                    var.put('sum', Js(0.0))
                    var.put('length', (var.get('pxPos')+var.get('byteWidth')))
                    #for JS loop
                    var.put('x', var.get('pxPos'))
                    while (var.get('x')<var.get('length')):
                        try:
                            var.put('up', (var.get('pxData').get((var.get('x')-var.get('byteWidth'))) if (var.get('pxPos')>Js(0.0)) else Js(0.0)))
                            var.put('val', (var.get('pxData').get(var.get('x'))-var.get('up')))
                            var.put('sum', var.get('Math').callprop('abs', var.get('val')), '+')
                        finally:
                                (var.put('x',Js(var.get('x').to_number())+Js(1))-Js(1))
                    return var.get('sum')
                PyJsHoisted_filterSumUp_.func_name = 'filterSumUp'
                var.put('filterSumUp', PyJsHoisted_filterSumUp_)
                @Js
                def PyJsHoisted_filterAvg_(pxData, pxPos, byteWidth, rawData, rawPos, bpp, this, arguments, var=var):
                    var = Scope({'pxData':pxData, 'pxPos':pxPos, 'byteWidth':byteWidth, 'rawData':rawData, 'rawPos':rawPos, 'bpp':bpp, 'this':this, 'arguments':arguments}, var)
                    var.registers(['pxData', 'x', 'val', 'up', 'rawData', 'rawPos', 'left', 'pxPos', 'bpp', 'byteWidth'])
                    #for JS loop
                    var.put('x', Js(0.0))
                    while (var.get('x')<var.get('byteWidth')):
                        try:
                            var.put('left', (var.get('pxData').get(((var.get('pxPos')+var.get('x'))-var.get('bpp'))) if (var.get('x')>=var.get('bpp')) else Js(0.0)))
                            var.put('up', (var.get('pxData').get(((var.get('pxPos')+var.get('x'))-var.get('byteWidth'))) if (var.get('pxPos')>Js(0.0)) else Js(0.0)))
                            var.put('val', (var.get('pxData').get((var.get('pxPos')+var.get('x')))-((var.get('left')+var.get('up'))>>Js(1.0))))
                            var.get('rawData').put((var.get('rawPos')+var.get('x')), var.get('val'))
                        finally:
                                (var.put('x',Js(var.get('x').to_number())+Js(1))-Js(1))
                PyJsHoisted_filterAvg_.func_name = 'filterAvg'
                var.put('filterAvg', PyJsHoisted_filterAvg_)
                @Js
                def PyJsHoisted_filterSumAvg_(pxData, pxPos, byteWidth, bpp, this, arguments, var=var):
                    var = Scope({'pxData':pxData, 'pxPos':pxPos, 'byteWidth':byteWidth, 'bpp':bpp, 'this':this, 'arguments':arguments}, var)
                    var.registers(['pxData', 'x', 'val', 'sum', 'up', 'left', 'pxPos', 'bpp', 'byteWidth'])
                    var.put('sum', Js(0.0))
                    #for JS loop
                    var.put('x', Js(0.0))
                    while (var.get('x')<var.get('byteWidth')):
                        try:
                            var.put('left', (var.get('pxData').get(((var.get('pxPos')+var.get('x'))-var.get('bpp'))) if (var.get('x')>=var.get('bpp')) else Js(0.0)))
                            var.put('up', (var.get('pxData').get(((var.get('pxPos')+var.get('x'))-var.get('byteWidth'))) if (var.get('pxPos')>Js(0.0)) else Js(0.0)))
                            var.put('val', (var.get('pxData').get((var.get('pxPos')+var.get('x')))-((var.get('left')+var.get('up'))>>Js(1.0))))
                            var.put('sum', var.get('Math').callprop('abs', var.get('val')), '+')
                        finally:
                                (var.put('x',Js(var.get('x').to_number())+Js(1))-Js(1))
                    return var.get('sum')
                PyJsHoisted_filterSumAvg_.func_name = 'filterSumAvg'
                var.put('filterSumAvg', PyJsHoisted_filterSumAvg_)
                @Js
                def PyJsHoisted_filterPaeth_(pxData, pxPos, byteWidth, rawData, rawPos, bpp, this, arguments, var=var):
                    var = Scope({'pxData':pxData, 'pxPos':pxPos, 'byteWidth':byteWidth, 'rawData':rawData, 'rawPos':rawPos, 'bpp':bpp, 'this':this, 'arguments':arguments}, var)
                    var.registers(['pxData', 'upleft', 'x', 'val', 'up', 'rawData', 'rawPos', 'left', 'pxPos', 'bpp', 'byteWidth'])
                    #for JS loop
                    var.put('x', Js(0.0))
                    while (var.get('x')<var.get('byteWidth')):
                        try:
                            var.put('left', (var.get('pxData').get(((var.get('pxPos')+var.get('x'))-var.get('bpp'))) if (var.get('x')>=var.get('bpp')) else Js(0.0)))
                            var.put('up', (var.get('pxData').get(((var.get('pxPos')+var.get('x'))-var.get('byteWidth'))) if (var.get('pxPos')>Js(0.0)) else Js(0.0)))
                            var.put('upleft', (var.get('pxData').get(((var.get('pxPos')+var.get('x'))-(var.get('byteWidth')+var.get('bpp')))) if ((var.get('pxPos')>Js(0.0)) and (var.get('x')>=var.get('bpp'))) else Js(0.0)))
                            var.put('val', (var.get('pxData').get((var.get('pxPos')+var.get('x')))-var.get('paethPredictor')(var.get('left'), var.get('up'), var.get('upleft'))))
                            var.get('rawData').put((var.get('rawPos')+var.get('x')), var.get('val'))
                        finally:
                                (var.put('x',Js(var.get('x').to_number())+Js(1))-Js(1))
                PyJsHoisted_filterPaeth_.func_name = 'filterPaeth'
                var.put('filterPaeth', PyJsHoisted_filterPaeth_)
                @Js
                def PyJsHoisted_filterSumPaeth_(pxData, pxPos, byteWidth, bpp, this, arguments, var=var):
                    var = Scope({'pxData':pxData, 'pxPos':pxPos, 'byteWidth':byteWidth, 'bpp':bpp, 'this':this, 'arguments':arguments}, var)
                    var.registers(['pxData', 'upleft', 'x', 'val', 'sum', 'up', 'left', 'pxPos', 'bpp', 'byteWidth'])
                    var.put('sum', Js(0.0))
                    #for JS loop
                    var.put('x', Js(0.0))
                    while (var.get('x')<var.get('byteWidth')):
                        try:
                            var.put('left', (var.get('pxData').get(((var.get('pxPos')+var.get('x'))-var.get('bpp'))) if (var.get('x')>=var.get('bpp')) else Js(0.0)))
                            var.put('up', (var.get('pxData').get(((var.get('pxPos')+var.get('x'))-var.get('byteWidth'))) if (var.get('pxPos')>Js(0.0)) else Js(0.0)))
                            var.put('upleft', (var.get('pxData').get(((var.get('pxPos')+var.get('x'))-(var.get('byteWidth')+var.get('bpp')))) if ((var.get('pxPos')>Js(0.0)) and (var.get('x')>=var.get('bpp'))) else Js(0.0)))
                            var.put('val', (var.get('pxData').get((var.get('pxPos')+var.get('x')))-var.get('paethPredictor')(var.get('left'), var.get('up'), var.get('upleft'))))
                            var.put('sum', var.get('Math').callprop('abs', var.get('val')), '+')
                        finally:
                                (var.put('x',Js(var.get('x').to_number())+Js(1))-Js(1))
                    return var.get('sum')
                PyJsHoisted_filterSumPaeth_.func_name = 'filterSumPaeth'
                var.put('filterSumPaeth', PyJsHoisted_filterSumPaeth_)
                Js('use strict')
                var.put('paethPredictor', var.get('require')(Js('./paeth-predictor')))
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                var.put('filters', Js({'0':var.get('filterNone'),'1':var.get('filterSub'),'2':var.get('filterUp'),'3':var.get('filterAvg'),'4':var.get('filterPaeth')}))
                var.put('filterSums', Js({'0':var.get('filterSumNone'),'1':var.get('filterSumSub'),'2':var.get('filterSumUp'),'3':var.get('filterSumAvg'),'4':var.get('filterSumPaeth')}))
                @Js
                def PyJs_anonymous_2248_(pxData, width, height, options, bpp, this, arguments, var=var):
                    var = Scope({'pxData':pxData, 'width':width, 'height':height, 'options':options, 'bpp':bpp, 'this':this, 'arguments':arguments}, var)
                    var.registers(['y', 'pxData', 'i', 'height', 'filterTypes', 'width', 'min', 'options', 'rawData', 'sel', 'sum', 'rawPos', 'pxPos', 'bpp', 'byteWidth'])
                    pass
                    if (var.get('options').contains(Js('filterType')).neg() or PyJsStrictEq(var.get('options').get('filterType'),(-Js(1.0)))):
                        var.put('filterTypes', Js([Js(0.0), Js(1.0), Js(2.0), Js(3.0), Js(4.0)]))
                    else:
                        if PyJsStrictEq(var.get('options').get('filterType').typeof(),Js('number')):
                            var.put('filterTypes', Js([var.get('options').get('filterType')]))
                        else:
                            PyJsTempException = JsToPyException(var.get('Error').create(Js('unrecognised filter types')))
                            raise PyJsTempException
                    if PyJsStrictEq(var.get('options').get('bitDepth'),Js(16.0)):
                        var.put('bpp', Js(2.0), '*')
                    var.put('byteWidth', (var.get('width')*var.get('bpp')))
                    var.put('rawPos', Js(0.0))
                    var.put('pxPos', Js(0.0))
                    var.put('rawData', var.get('Buffer').create(((var.get('byteWidth')+Js(1.0))*var.get('height'))))
                    var.put('sel', var.get('filterTypes').get('0'))
                    #for JS loop
                    var.put('y', Js(0.0))
                    while (var.get('y')<var.get('height')):
                        try:
                            if (var.get('filterTypes').get('length')>Js(1.0)):
                                var.put('min', var.get('Infinity'))
                                #for JS loop
                                var.put('i', Js(0.0))
                                while (var.get('i')<var.get('filterTypes').get('length')):
                                    try:
                                        var.put('sum', var.get('filterSums').callprop(var.get('filterTypes').get(var.get('i')), var.get('pxData'), var.get('pxPos'), var.get('byteWidth'), var.get('bpp')))
                                        if (var.get('sum')<var.get('min')):
                                            var.put('sel', var.get('filterTypes').get(var.get('i')))
                                            var.put('min', var.get('sum'))
                                    finally:
                                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                            var.get('rawData').put(var.get('rawPos'), var.get('sel'))
                            (var.put('rawPos',Js(var.get('rawPos').to_number())+Js(1))-Js(1))
                            var.get('filters').callprop(var.get('sel'), var.get('pxData'), var.get('pxPos'), var.get('byteWidth'), var.get('rawData'), var.get('rawPos'), var.get('bpp'))
                            var.put('rawPos', var.get('byteWidth'), '+')
                            var.put('pxPos', var.get('byteWidth'), '+')
                        finally:
                                (var.put('y',Js(var.get('y').to_number())+Js(1))-Js(1))
                    return var.get('rawData')
                PyJs_anonymous_2248_._set_name('anonymous')
                var.get('module').put('exports', PyJs_anonymous_2248_)
            PyJs_anonymous_2247_._set_name('anonymous')
            PyJs_anonymous_2247_.callprop('call', var.get(u"this"))
        PyJs_anonymous_2246_._set_name('anonymous')
        PyJs_anonymous_2246_.callprop('call', var.get(u"this"), var.get('require')(Js('buffer')).get('Buffer'))
    PyJs_anonymous_2245_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2249_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_2250_(Buffer, this, arguments, var=var):
            var = Scope({'Buffer':Buffer, 'this':this, 'arguments':arguments}, var)
            var.registers(['Buffer'])
            @Js
            def PyJs_anonymous_2251_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['ChunkStream', 'Filter', 'util', 'FilterAsync'])
                Js('use strict')
                var.put('util', var.get('require')(Js('util')))
                var.put('ChunkStream', var.get('require')(Js('./chunkstream')))
                var.put('Filter', var.get('require')(Js('./filter-parse')))
                @Js
                def PyJs_anonymous_2252_(bitmapInfo, this, arguments, var=var):
                    var = Scope({'bitmapInfo':bitmapInfo, 'this':this, 'arguments':arguments}, var)
                    var.registers(['bitmapInfo', 'buffers', 'that'])
                    var.get('ChunkStream').callprop('call', var.get(u"this"))
                    var.put('buffers', Js([]))
                    var.put('that', var.get(u"this"))
                    @Js
                    def PyJs_write_2253_(buffer, this, arguments, var=var):
                        var = Scope({'buffer':buffer, 'this':this, 'arguments':arguments, 'write':PyJs_write_2253_}, var)
                        var.registers(['buffer'])
                        var.get('buffers').callprop('push', var.get('buffer'))
                    PyJs_write_2253_._set_name('write')
                    @Js
                    def PyJs_complete_2254_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments, 'complete':PyJs_complete_2254_}, var)
                        var.registers([])
                        var.get('that').callprop('emit', Js('complete'), var.get('Buffer').callprop('concat', var.get('buffers')))
                    PyJs_complete_2254_._set_name('complete')
                    var.get(u"this").put('_filter', var.get('Filter').create(var.get('bitmapInfo'), Js({'read':var.get(u"this").get('read').callprop('bind', var.get(u"this")),'write':PyJs_write_2253_,'complete':PyJs_complete_2254_})))
                    var.get(u"this").get('_filter').callprop('start')
                PyJs_anonymous_2252_._set_name('anonymous')
                var.put('FilterAsync', var.get('module').put('exports', PyJs_anonymous_2252_))
                var.get('util').callprop('inherits', var.get('FilterAsync'), var.get('ChunkStream'))
            PyJs_anonymous_2251_._set_name('anonymous')
            PyJs_anonymous_2251_.callprop('call', var.get(u"this"))
        PyJs_anonymous_2250_._set_name('anonymous')
        PyJs_anonymous_2250_.callprop('call', var.get(u"this"), var.get('require')(Js('buffer')).get('Buffer'))
    PyJs_anonymous_2249_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2255_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_2256_(Buffer, this, arguments, var=var):
            var = Scope({'Buffer':Buffer, 'this':this, 'arguments':arguments}, var)
            var.registers(['Buffer'])
            @Js
            def PyJs_anonymous_2257_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['SyncReader', 'Filter'])
                Js('use strict')
                var.put('SyncReader', var.get('require')(Js('./sync-reader')))
                var.put('Filter', var.get('require')(Js('./filter-parse')))
                @Js
                def PyJs_anonymous_2258_(inBuffer, bitmapInfo, this, arguments, var=var):
                    var = Scope({'inBuffer':inBuffer, 'bitmapInfo':bitmapInfo, 'this':this, 'arguments':arguments}, var)
                    var.registers(['reader', 'outBuffers', 'bitmapInfo', 'inBuffer', 'filter'])
                    var.put('outBuffers', Js([]))
                    var.put('reader', var.get('SyncReader').create(var.get('inBuffer')))
                    @Js
                    def PyJs_write_2259_(bufferPart, this, arguments, var=var):
                        var = Scope({'bufferPart':bufferPart, 'this':this, 'arguments':arguments, 'write':PyJs_write_2259_}, var)
                        var.registers(['bufferPart'])
                        var.get('outBuffers').callprop('push', var.get('bufferPart'))
                    PyJs_write_2259_._set_name('write')
                    @Js
                    def PyJs_complete_2260_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments, 'complete':PyJs_complete_2260_}, var)
                        var.registers([])
                        pass
                    PyJs_complete_2260_._set_name('complete')
                    var.put('filter', var.get('Filter').create(var.get('bitmapInfo'), Js({'read':var.get('reader').get('read').callprop('bind', var.get('reader')),'write':PyJs_write_2259_,'complete':PyJs_complete_2260_})))
                    var.get('filter').callprop('start')
                    var.get('reader').callprop('process')
                    return var.get('Buffer').callprop('concat', var.get('outBuffers'))
                PyJs_anonymous_2258_._set_name('anonymous')
                var.get('exports').put('process', PyJs_anonymous_2258_)
            PyJs_anonymous_2257_._set_name('anonymous')
            PyJs_anonymous_2257_.callprop('call', var.get(u"this"))
        PyJs_anonymous_2256_._set_name('anonymous')
        PyJs_anonymous_2256_.callprop('call', var.get(u"this"), var.get('require')(Js('buffer')).get('Buffer'))
    PyJs_anonymous_2255_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2261_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_2262_(Buffer, this, arguments, var=var):
            var = Scope({'Buffer':Buffer, 'this':this, 'arguments':arguments}, var)
            var.registers(['Buffer'])
            @Js
            def PyJs_anonymous_2263_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['Filter', 'getByteWidth', 'interlaceUtils', 'paethPredictor'])
                @Js
                def PyJsHoisted_getByteWidth_(width, bpp, depth, this, arguments, var=var):
                    var = Scope({'width':width, 'bpp':bpp, 'depth':depth, 'this':this, 'arguments':arguments}, var)
                    var.registers(['bpp', 'width', 'byteWidth', 'depth'])
                    var.put('byteWidth', (var.get('width')*var.get('bpp')))
                    if PyJsStrictNeq(var.get('depth'),Js(8.0)):
                        var.put('byteWidth', var.get('Math').callprop('ceil', (var.get('byteWidth')/(Js(8.0)/var.get('depth')))))
                    return var.get('byteWidth')
                PyJsHoisted_getByteWidth_.func_name = 'getByteWidth'
                var.put('getByteWidth', PyJsHoisted_getByteWidth_)
                Js('use strict')
                var.put('interlaceUtils', var.get('require')(Js('./interlace')))
                var.put('paethPredictor', var.get('require')(Js('./paeth-predictor')))
                pass
                @Js
                def PyJs_anonymous_2264_(bitmapInfo, dependencies, this, arguments, var=var):
                    var = Scope({'bitmapInfo':bitmapInfo, 'dependencies':dependencies, 'this':this, 'arguments':arguments}, var)
                    var.registers(['depth', 'interlace', 'i', 'height', 'bitmapInfo', 'width', 'passes', 'dependencies', 'bpp'])
                    var.put('width', var.get('bitmapInfo').get('width'))
                    var.put('height', var.get('bitmapInfo').get('height'))
                    var.put('interlace', var.get('bitmapInfo').get('interlace'))
                    var.put('bpp', var.get('bitmapInfo').get('bpp'))
                    var.put('depth', var.get('bitmapInfo').get('depth'))
                    var.get(u"this").put('read', var.get('dependencies').get('read'))
                    var.get(u"this").put('write', var.get('dependencies').get('write'))
                    var.get(u"this").put('complete', var.get('dependencies').get('complete'))
                    var.get(u"this").put('_imageIndex', Js(0.0))
                    var.get(u"this").put('_images', Js([]))
                    if var.get('interlace'):
                        var.put('passes', var.get('interlaceUtils').callprop('getImagePasses', var.get('width'), var.get('height')))
                        #for JS loop
                        var.put('i', Js(0.0))
                        while (var.get('i')<var.get('passes').get('length')):
                            try:
                                var.get(u"this").get('_images').callprop('push', Js({'byteWidth':var.get('getByteWidth')(var.get('passes').get(var.get('i')).get('width'), var.get('bpp'), var.get('depth')),'height':var.get('passes').get(var.get('i')).get('height'),'lineIndex':Js(0.0)}))
                            finally:
                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    else:
                        var.get(u"this").get('_images').callprop('push', Js({'byteWidth':var.get('getByteWidth')(var.get('width'), var.get('bpp'), var.get('depth')),'height':var.get('height'),'lineIndex':Js(0.0)}))
                    if PyJsStrictEq(var.get('depth'),Js(8.0)):
                        var.get(u"this").put('_xComparison', var.get('bpp'))
                    else:
                        if PyJsStrictEq(var.get('depth'),Js(16.0)):
                            var.get(u"this").put('_xComparison', (var.get('bpp')*Js(2.0)))
                        else:
                            var.get(u"this").put('_xComparison', Js(1.0))
                PyJs_anonymous_2264_._set_name('anonymous')
                var.put('Filter', var.get('module').put('exports', PyJs_anonymous_2264_))
                @Js
                def PyJs_anonymous_2265_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.get(u"this").callprop('read', (var.get(u"this").get('_images').get(var.get(u"this").get('_imageIndex')).get('byteWidth')+Js(1.0)), var.get(u"this").get('_reverseFilterLine').callprop('bind', var.get(u"this")))
                PyJs_anonymous_2265_._set_name('anonymous')
                var.get('Filter').get('prototype').put('start', PyJs_anonymous_2265_)
                @Js
                def PyJs_anonymous_2266_(rawData, unfilteredLine, byteWidth, this, arguments, var=var):
                    var = Scope({'rawData':rawData, 'unfilteredLine':unfilteredLine, 'byteWidth':byteWidth, 'this':this, 'arguments':arguments}, var)
                    var.registers(['unfilteredLine', 'x', 'f1Left', 'xComparison', 'xBiggerThan', 'rawByte', 'rawData', 'byteWidth'])
                    var.put('xComparison', var.get(u"this").get('_xComparison'))
                    var.put('xBiggerThan', (var.get('xComparison')-Js(1.0)))
                    #for JS loop
                    var.put('x', Js(0.0))
                    while (var.get('x')<var.get('byteWidth')):
                        try:
                            var.put('rawByte', var.get('rawData').get((Js(1.0)+var.get('x'))))
                            var.put('f1Left', (var.get('unfilteredLine').get((var.get('x')-var.get('xComparison'))) if (var.get('x')>var.get('xBiggerThan')) else Js(0.0)))
                            var.get('unfilteredLine').put(var.get('x'), (var.get('rawByte')+var.get('f1Left')))
                        finally:
                                (var.put('x',Js(var.get('x').to_number())+Js(1))-Js(1))
                PyJs_anonymous_2266_._set_name('anonymous')
                var.get('Filter').get('prototype').put('_unFilterType1', PyJs_anonymous_2266_)
                @Js
                def PyJs_anonymous_2267_(rawData, unfilteredLine, byteWidth, this, arguments, var=var):
                    var = Scope({'rawData':rawData, 'unfilteredLine':unfilteredLine, 'byteWidth':byteWidth, 'this':this, 'arguments':arguments}, var)
                    var.registers(['unfilteredLine', 'x', 'f2Up', 'lastLine', 'rawByte', 'rawData', 'byteWidth'])
                    var.put('lastLine', var.get(u"this").get('_lastLine'))
                    #for JS loop
                    var.put('x', Js(0.0))
                    while (var.get('x')<var.get('byteWidth')):
                        try:
                            var.put('rawByte', var.get('rawData').get((Js(1.0)+var.get('x'))))
                            var.put('f2Up', (var.get('lastLine').get(var.get('x')) if var.get('lastLine') else Js(0.0)))
                            var.get('unfilteredLine').put(var.get('x'), (var.get('rawByte')+var.get('f2Up')))
                        finally:
                                (var.put('x',Js(var.get('x').to_number())+Js(1))-Js(1))
                PyJs_anonymous_2267_._set_name('anonymous')
                var.get('Filter').get('prototype').put('_unFilterType2', PyJs_anonymous_2267_)
                @Js
                def PyJs_anonymous_2268_(rawData, unfilteredLine, byteWidth, this, arguments, var=var):
                    var = Scope({'rawData':rawData, 'unfilteredLine':unfilteredLine, 'byteWidth':byteWidth, 'this':this, 'arguments':arguments}, var)
                    var.registers(['unfilteredLine', 'x', 'xComparison', 'xBiggerThan', 'f3Left', 'lastLine', 'rawByte', 'f3Up', 'f3Add', 'rawData', 'byteWidth'])
                    var.put('xComparison', var.get(u"this").get('_xComparison'))
                    var.put('xBiggerThan', (var.get('xComparison')-Js(1.0)))
                    var.put('lastLine', var.get(u"this").get('_lastLine'))
                    #for JS loop
                    var.put('x', Js(0.0))
                    while (var.get('x')<var.get('byteWidth')):
                        try:
                            var.put('rawByte', var.get('rawData').get((Js(1.0)+var.get('x'))))
                            var.put('f3Up', (var.get('lastLine').get(var.get('x')) if var.get('lastLine') else Js(0.0)))
                            var.put('f3Left', (var.get('unfilteredLine').get((var.get('x')-var.get('xComparison'))) if (var.get('x')>var.get('xBiggerThan')) else Js(0.0)))
                            var.put('f3Add', var.get('Math').callprop('floor', ((var.get('f3Left')+var.get('f3Up'))/Js(2.0))))
                            var.get('unfilteredLine').put(var.get('x'), (var.get('rawByte')+var.get('f3Add')))
                        finally:
                                (var.put('x',Js(var.get('x').to_number())+Js(1))-Js(1))
                PyJs_anonymous_2268_._set_name('anonymous')
                var.get('Filter').get('prototype').put('_unFilterType3', PyJs_anonymous_2268_)
                @Js
                def PyJs_anonymous_2269_(rawData, unfilteredLine, byteWidth, this, arguments, var=var):
                    var = Scope({'rawData':rawData, 'unfilteredLine':unfilteredLine, 'byteWidth':byteWidth, 'this':this, 'arguments':arguments}, var)
                    var.registers(['f4Up', 'unfilteredLine', 'x', 'xComparison', 'f4Left', 'f4UpLeft', 'xBiggerThan', 'lastLine', 'rawByte', 'rawData', 'f4Add', 'byteWidth'])
                    var.put('xComparison', var.get(u"this").get('_xComparison'))
                    var.put('xBiggerThan', (var.get('xComparison')-Js(1.0)))
                    var.put('lastLine', var.get(u"this").get('_lastLine'))
                    #for JS loop
                    var.put('x', Js(0.0))
                    while (var.get('x')<var.get('byteWidth')):
                        try:
                            var.put('rawByte', var.get('rawData').get((Js(1.0)+var.get('x'))))
                            var.put('f4Up', (var.get('lastLine').get(var.get('x')) if var.get('lastLine') else Js(0.0)))
                            var.put('f4Left', (var.get('unfilteredLine').get((var.get('x')-var.get('xComparison'))) if (var.get('x')>var.get('xBiggerThan')) else Js(0.0)))
                            var.put('f4UpLeft', (var.get('lastLine').get((var.get('x')-var.get('xComparison'))) if ((var.get('x')>var.get('xBiggerThan')) and var.get('lastLine')) else Js(0.0)))
                            var.put('f4Add', var.get('paethPredictor')(var.get('f4Left'), var.get('f4Up'), var.get('f4UpLeft')))
                            var.get('unfilteredLine').put(var.get('x'), (var.get('rawByte')+var.get('f4Add')))
                        finally:
                                (var.put('x',Js(var.get('x').to_number())+Js(1))-Js(1))
                PyJs_anonymous_2269_._set_name('anonymous')
                var.get('Filter').get('prototype').put('_unFilterType4', PyJs_anonymous_2269_)
                @Js
                def PyJs_anonymous_2270_(rawData, this, arguments, var=var):
                    var = Scope({'rawData':rawData, 'this':this, 'arguments':arguments}, var)
                    var.registers(['unfilteredLine', 'currentImage', 'filter', 'rawData', 'byteWidth'])
                    var.put('filter', var.get('rawData').get('0'))
                    pass
                    var.put('currentImage', var.get(u"this").get('_images').get(var.get(u"this").get('_imageIndex')))
                    var.put('byteWidth', var.get('currentImage').get('byteWidth'))
                    if PyJsStrictEq(var.get('filter'),Js(0.0)):
                        var.put('unfilteredLine', var.get('rawData').callprop('slice', Js(1.0), (var.get('byteWidth')+Js(1.0))))
                    else:
                        var.put('unfilteredLine', var.get('Buffer').create(var.get('byteWidth')))
                        while 1:
                            SWITCHED = False
                            CONDITION = (var.get('filter'))
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(1.0)):
                                SWITCHED = True
                                var.get(u"this").callprop('_unFilterType1', var.get('rawData'), var.get('unfilteredLine'), var.get('byteWidth'))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(2.0)):
                                SWITCHED = True
                                var.get(u"this").callprop('_unFilterType2', var.get('rawData'), var.get('unfilteredLine'), var.get('byteWidth'))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(3.0)):
                                SWITCHED = True
                                var.get(u"this").callprop('_unFilterType3', var.get('rawData'), var.get('unfilteredLine'), var.get('byteWidth'))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(4.0)):
                                SWITCHED = True
                                var.get(u"this").callprop('_unFilterType4', var.get('rawData'), var.get('unfilteredLine'), var.get('byteWidth'))
                                break
                            if True:
                                SWITCHED = True
                                PyJsTempException = JsToPyException(var.get('Error').create((Js('Unrecognised filter type - ')+var.get('filter'))))
                                raise PyJsTempException
                            SWITCHED = True
                            break
                    var.get(u"this").callprop('write', var.get('unfilteredLine'))
                    (var.get('currentImage').put('lineIndex',Js(var.get('currentImage').get('lineIndex').to_number())+Js(1))-Js(1))
                    if (var.get('currentImage').get('lineIndex')>=var.get('currentImage').get('height')):
                        var.get(u"this").put('_lastLine', var.get(u"null"))
                        (var.get(u"this").put('_imageIndex',Js(var.get(u"this").get('_imageIndex').to_number())+Js(1))-Js(1))
                        var.put('currentImage', var.get(u"this").get('_images').get(var.get(u"this").get('_imageIndex')))
                    else:
                        var.get(u"this").put('_lastLine', var.get('unfilteredLine'))
                    if var.get('currentImage'):
                        var.get(u"this").callprop('read', (var.get('currentImage').get('byteWidth')+Js(1.0)), var.get(u"this").get('_reverseFilterLine').callprop('bind', var.get(u"this")))
                    else:
                        var.get(u"this").put('_lastLine', var.get(u"null"))
                        var.get(u"this").callprop('complete')
                PyJs_anonymous_2270_._set_name('anonymous')
                var.get('Filter').get('prototype').put('_reverseFilterLine', PyJs_anonymous_2270_)
            PyJs_anonymous_2263_._set_name('anonymous')
            PyJs_anonymous_2263_.callprop('call', var.get(u"this"))
        PyJs_anonymous_2262_._set_name('anonymous')
        PyJs_anonymous_2262_.callprop('call', var.get(u"this"), var.get('require')(Js('buffer')).get('Buffer'))
    PyJs_anonymous_2261_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2271_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_2272_(Buffer, this, arguments, var=var):
            var = Scope({'Buffer':Buffer, 'this':this, 'arguments':arguments}, var)
            var.registers(['Buffer'])
            @Js
            def PyJs_anonymous_2273_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['scaleDepth', 'replaceTransparentColor', 'dePalette'])
                @Js
                def PyJsHoisted_dePalette_(indata, outdata, width, height, palette, this, arguments, var=var):
                    var = Scope({'indata':indata, 'outdata':outdata, 'width':width, 'height':height, 'palette':palette, 'this':this, 'arguments':arguments}, var)
                    var.registers(['y', 'color', 'x', 'i', 'height', 'width', 'outdata', 'indata', 'palette', 'pxPos'])
                    var.put('pxPos', Js(0.0))
                    #for JS loop
                    var.put('y', Js(0.0))
                    while (var.get('y')<var.get('height')):
                        try:
                            #for JS loop
                            var.put('x', Js(0.0))
                            while (var.get('x')<var.get('width')):
                                try:
                                    var.put('color', var.get('palette').get(var.get('indata').get(var.get('pxPos'))))
                                    if var.get('color').neg():
                                        PyJsTempException = JsToPyException(var.get('Error').create(((Js('index ')+var.get('indata').get(var.get('pxPos')))+Js(' not in palette'))))
                                        raise PyJsTempException
                                    #for JS loop
                                    var.put('i', Js(0.0))
                                    while (var.get('i')<Js(4.0)):
                                        try:
                                            var.get('outdata').put((var.get('pxPos')+var.get('i')), var.get('color').get(var.get('i')))
                                        finally:
                                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                                    var.put('pxPos', Js(4.0), '+')
                                finally:
                                        (var.put('x',Js(var.get('x').to_number())+Js(1))-Js(1))
                        finally:
                                (var.put('y',Js(var.get('y').to_number())+Js(1))-Js(1))
                PyJsHoisted_dePalette_.func_name = 'dePalette'
                var.put('dePalette', PyJsHoisted_dePalette_)
                @Js
                def PyJsHoisted_replaceTransparentColor_(indata, outdata, width, height, transColor, this, arguments, var=var):
                    var = Scope({'indata':indata, 'outdata':outdata, 'width':width, 'height':height, 'transColor':transColor, 'this':this, 'arguments':arguments}, var)
                    var.registers(['y', 'x', 'i', 'height', 'makeTrans', 'width', 'outdata', 'indata', 'pxPos', 'transColor'])
                    var.put('pxPos', Js(0.0))
                    #for JS loop
                    var.put('y', Js(0.0))
                    while (var.get('y')<var.get('height')):
                        try:
                            #for JS loop
                            var.put('x', Js(0.0))
                            while (var.get('x')<var.get('width')):
                                try:
                                    var.put('makeTrans', Js(False))
                                    if PyJsStrictEq(var.get('transColor').get('length'),Js(1.0)):
                                        if PyJsStrictEq(var.get('transColor').get('0'),var.get('indata').get(var.get('pxPos'))):
                                            var.put('makeTrans', Js(True))
                                    else:
                                        if ((PyJsStrictEq(var.get('transColor').get('0'),var.get('indata').get(var.get('pxPos'))) and PyJsStrictEq(var.get('transColor').get('1'),var.get('indata').get((var.get('pxPos')+Js(1.0))))) and PyJsStrictEq(var.get('transColor').get('2'),var.get('indata').get((var.get('pxPos')+Js(2.0))))):
                                            var.put('makeTrans', Js(True))
                                    if var.get('makeTrans'):
                                        #for JS loop
                                        var.put('i', Js(0.0))
                                        while (var.get('i')<Js(4.0)):
                                            try:
                                                var.get('outdata').put((var.get('pxPos')+var.get('i')), Js(0.0))
                                            finally:
                                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                                    var.put('pxPos', Js(4.0), '+')
                                finally:
                                        (var.put('x',Js(var.get('x').to_number())+Js(1))-Js(1))
                        finally:
                                (var.put('y',Js(var.get('y').to_number())+Js(1))-Js(1))
                PyJsHoisted_replaceTransparentColor_.func_name = 'replaceTransparentColor'
                var.put('replaceTransparentColor', PyJsHoisted_replaceTransparentColor_)
                @Js
                def PyJsHoisted_scaleDepth_(indata, outdata, width, height, depth, this, arguments, var=var):
                    var = Scope({'indata':indata, 'outdata':outdata, 'width':width, 'height':height, 'depth':depth, 'this':this, 'arguments':arguments}, var)
                    var.registers(['depth', 'y', 'x', 'i', 'maxOutSample', 'height', 'width', 'outdata', 'indata', 'maxInSample', 'pxPos'])
                    var.put('maxOutSample', Js(255.0))
                    var.put('maxInSample', (var.get('Math').callprop('pow', Js(2.0), var.get('depth'))-Js(1.0)))
                    var.put('pxPos', Js(0.0))
                    #for JS loop
                    var.put('y', Js(0.0))
                    while (var.get('y')<var.get('height')):
                        try:
                            #for JS loop
                            var.put('x', Js(0.0))
                            while (var.get('x')<var.get('width')):
                                try:
                                    #for JS loop
                                    var.put('i', Js(0.0))
                                    while (var.get('i')<Js(4.0)):
                                        try:
                                            var.get('outdata').put((var.get('pxPos')+var.get('i')), var.get('Math').callprop('floor', (((var.get('indata').get((var.get('pxPos')+var.get('i')))*var.get('maxOutSample'))/var.get('maxInSample'))+Js(0.5))))
                                        finally:
                                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                                    var.put('pxPos', Js(4.0), '+')
                                finally:
                                        (var.put('x',Js(var.get('x').to_number())+Js(1))-Js(1))
                        finally:
                                (var.put('y',Js(var.get('y').to_number())+Js(1))-Js(1))
                PyJsHoisted_scaleDepth_.func_name = 'scaleDepth'
                var.put('scaleDepth', PyJsHoisted_scaleDepth_)
                Js('use strict')
                pass
                pass
                pass
                @Js
                def PyJs_anonymous_2274_(indata, imageData, this, arguments, var=var):
                    var = Scope({'indata':indata, 'imageData':imageData, 'this':this, 'arguments':arguments}, var)
                    var.registers(['depth', 'height', 'imageData', 'width', 'colorType', 'outdata', 'indata', 'palette', 'transColor'])
                    var.put('depth', var.get('imageData').get('depth'))
                    var.put('width', var.get('imageData').get('width'))
                    var.put('height', var.get('imageData').get('height'))
                    var.put('colorType', var.get('imageData').get('colorType'))
                    var.put('transColor', var.get('imageData').get('transColor'))
                    var.put('palette', var.get('imageData').get('palette'))
                    var.put('outdata', var.get('indata'))
                    if PyJsStrictEq(var.get('colorType'),Js(3.0)):
                        var.get('dePalette')(var.get('indata'), var.get('outdata'), var.get('width'), var.get('height'), var.get('palette'))
                    else:
                        if var.get('transColor'):
                            var.get('replaceTransparentColor')(var.get('indata'), var.get('outdata'), var.get('width'), var.get('height'), var.get('transColor'))
                        if PyJsStrictNeq(var.get('depth'),Js(8.0)):
                            if PyJsStrictEq(var.get('depth'),Js(16.0)):
                                var.put('outdata', var.get('Buffer').create(((var.get('width')*var.get('height'))*Js(4.0))))
                            var.get('scaleDepth')(var.get('indata'), var.get('outdata'), var.get('width'), var.get('height'), var.get('depth'))
                    return var.get('outdata')
                PyJs_anonymous_2274_._set_name('anonymous')
                var.get('module').put('exports', PyJs_anonymous_2274_)
            PyJs_anonymous_2273_._set_name('anonymous')
            PyJs_anonymous_2273_.callprop('call', var.get(u"this"))
        PyJs_anonymous_2272_._set_name('anonymous')
        PyJs_anonymous_2272_.callprop('call', var.get(u"this"), var.get('require')(Js('buffer')).get('Buffer'))
    PyJs_anonymous_2271_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2275_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['imagePasses', 'module', 'require', 'exports'])
        Js('use strict')
        var.put('imagePasses', Js([Js({'x':Js([Js(0.0)]),'y':Js([Js(0.0)])}), Js({'x':Js([Js(4.0)]),'y':Js([Js(0.0)])}), Js({'x':Js([Js(0.0), Js(4.0)]),'y':Js([Js(4.0)])}), Js({'x':Js([Js(2.0), Js(6.0)]),'y':Js([Js(0.0), Js(4.0)])}), Js({'x':Js([Js(0.0), Js(2.0), Js(4.0), Js(6.0)]),'y':Js([Js(2.0), Js(6.0)])}), Js({'x':Js([Js(1.0), Js(3.0), Js(5.0), Js(7.0)]),'y':Js([Js(0.0), Js(2.0), Js(4.0), Js(6.0)])}), Js({'x':Js([Js(0.0), Js(1.0), Js(2.0), Js(3.0), Js(4.0), Js(5.0), Js(6.0), Js(7.0)]),'y':Js([Js(1.0), Js(3.0), Js(5.0), Js(7.0)])})]))
        @Js
        def PyJs_anonymous_2276_(width, height, this, arguments, var=var):
            var = Scope({'width':width, 'height':height, 'this':this, 'arguments':arguments}, var)
            var.registers(['xRepeats', 'i', 'height', 'yRepeats', 'images', 'width', 'passWidth', 'yLeftOver', 'passHeight', 'pass', 'j', 'xLeftOver'])
            var.put('images', Js([]))
            var.put('xLeftOver', (var.get('width')%Js(8.0)))
            var.put('yLeftOver', (var.get('height')%Js(8.0)))
            var.put('xRepeats', ((var.get('width')-var.get('xLeftOver'))/Js(8.0)))
            var.put('yRepeats', ((var.get('height')-var.get('yLeftOver'))/Js(8.0)))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('imagePasses').get('length')):
                try:
                    var.put('pass', var.get('imagePasses').get(var.get('i')))
                    var.put('passWidth', (var.get('xRepeats')*var.get('pass').get('x').get('length')))
                    var.put('passHeight', (var.get('yRepeats')*var.get('pass').get('y').get('length')))
                    #for JS loop
                    var.put('j', Js(0.0))
                    while (var.get('j')<var.get('pass').get('x').get('length')):
                        try:
                            if (var.get('pass').get('x').get(var.get('j'))<var.get('xLeftOver')):
                                (var.put('passWidth',Js(var.get('passWidth').to_number())+Js(1))-Js(1))
                            else:
                                break
                        finally:
                                (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                    #for JS loop
                    var.put('j', Js(0.0))
                    while (var.get('j')<var.get('pass').get('y').get('length')):
                        try:
                            if (var.get('pass').get('y').get(var.get('j'))<var.get('yLeftOver')):
                                (var.put('passHeight',Js(var.get('passHeight').to_number())+Js(1))-Js(1))
                            else:
                                break
                        finally:
                                (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                    if ((var.get('passWidth')>Js(0.0)) and (var.get('passHeight')>Js(0.0))):
                        var.get('images').callprop('push', Js({'width':var.get('passWidth'),'height':var.get('passHeight'),'index':var.get('i')}))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('images')
        PyJs_anonymous_2276_._set_name('anonymous')
        var.get('exports').put('getImagePasses', PyJs_anonymous_2276_)
        @Js
        def PyJs_anonymous_2277_(width, this, arguments, var=var):
            var = Scope({'width':width, 'this':this, 'arguments':arguments}, var)
            var.registers(['width'])
            @Js
            def PyJs_anonymous_2278_(x, y, PyJsArg_70617373_, this, arguments, var=var):
                var = Scope({'x':x, 'y':y, 'pass':PyJsArg_70617373_, 'this':this, 'arguments':arguments}, var)
                var.registers(['y', 'x', 'outerY', 'outerYLeftOver', 'outerXLeftOver', 'outerX', 'pass'])
                var.put('outerXLeftOver', (var.get('x')%var.get('imagePasses').get(var.get('pass')).get('x').get('length')))
                var.put('outerX', ((((var.get('x')-var.get('outerXLeftOver'))/var.get('imagePasses').get(var.get('pass')).get('x').get('length'))*Js(8.0))+var.get('imagePasses').get(var.get('pass')).get('x').get(var.get('outerXLeftOver'))))
                var.put('outerYLeftOver', (var.get('y')%var.get('imagePasses').get(var.get('pass')).get('y').get('length')))
                var.put('outerY', ((((var.get('y')-var.get('outerYLeftOver'))/var.get('imagePasses').get(var.get('pass')).get('y').get('length'))*Js(8.0))+var.get('imagePasses').get(var.get('pass')).get('y').get(var.get('outerYLeftOver'))))
                return ((var.get('outerX')*Js(4.0))+((var.get('outerY')*var.get('width'))*Js(4.0)))
            PyJs_anonymous_2278_._set_name('anonymous')
            return PyJs_anonymous_2278_
        PyJs_anonymous_2277_._set_name('anonymous')
        var.get('exports').put('getInterlaceIterator', PyJs_anonymous_2277_)
    PyJs_anonymous_2275_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2279_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_2280_(Buffer, this, arguments, var=var):
            var = Scope({'Buffer':Buffer, 'this':this, 'arguments':arguments}, var)
            var.registers(['Buffer'])
            @Js
            def PyJs_anonymous_2281_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['util', 'Stream', 'PackerAsync', 'constants', 'Packer'])
                Js('use strict')
                var.put('util', var.get('require')(Js('util')))
                var.put('Stream', var.get('require')(Js('stream')))
                var.put('constants', var.get('require')(Js('./constants')))
                var.put('Packer', var.get('require')(Js('./packer')))
                @Js
                def PyJs_anonymous_2282_(opt, this, arguments, var=var):
                    var = Scope({'opt':opt, 'this':this, 'arguments':arguments}, var)
                    var.registers(['options', 'opt'])
                    var.get('Stream').callprop('call', var.get(u"this"))
                    var.put('options', (var.get('opt') or Js({})))
                    var.get(u"this").put('_packer', var.get('Packer').create(var.get('options')))
                    var.get(u"this").put('_deflate', var.get(u"this").get('_packer').callprop('createDeflate'))
                    var.get(u"this").put('readable', Js(True))
                PyJs_anonymous_2282_._set_name('anonymous')
                var.put('PackerAsync', var.get('module').put('exports', PyJs_anonymous_2282_))
                var.get('util').callprop('inherits', var.get('PackerAsync'), var.get('Stream'))
                @Js
                def PyJs_anonymous_2283_(data, width, height, gamma, this, arguments, var=var):
                    var = Scope({'data':data, 'width':width, 'height':height, 'gamma':gamma, 'this':this, 'arguments':arguments}, var)
                    var.registers(['height', 'width', 'filteredData', 'data', 'gamma'])
                    var.get(u"this").callprop('emit', Js('data'), var.get('Buffer').create(var.get('constants').get('PNG_SIGNATURE')))
                    var.get(u"this").callprop('emit', Js('data'), var.get(u"this").get('_packer').callprop('packIHDR', var.get('width'), var.get('height')))
                    if var.get('gamma'):
                        var.get(u"this").callprop('emit', Js('data'), var.get(u"this").get('_packer').callprop('packGAMA', var.get('gamma')))
                    var.put('filteredData', var.get(u"this").get('_packer').callprop('filterData', var.get('data'), var.get('width'), var.get('height')))
                    var.get(u"this").get('_deflate').callprop('on', Js('error'), var.get(u"this").get('emit').callprop('bind', var.get(u"this"), Js('error')))
                    @Js
                    def PyJs_anonymous_2284_(compressedData, this, arguments, var=var):
                        var = Scope({'compressedData':compressedData, 'this':this, 'arguments':arguments}, var)
                        var.registers(['compressedData'])
                        var.get(u"this").callprop('emit', Js('data'), var.get(u"this").get('_packer').callprop('packIDAT', var.get('compressedData')))
                    PyJs_anonymous_2284_._set_name('anonymous')
                    var.get(u"this").get('_deflate').callprop('on', Js('data'), PyJs_anonymous_2284_.callprop('bind', var.get(u"this")))
                    @Js
                    def PyJs_anonymous_2285_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        var.get(u"this").callprop('emit', Js('data'), var.get(u"this").get('_packer').callprop('packIEND'))
                        var.get(u"this").callprop('emit', Js('end'))
                    PyJs_anonymous_2285_._set_name('anonymous')
                    var.get(u"this").get('_deflate').callprop('on', Js('end'), PyJs_anonymous_2285_.callprop('bind', var.get(u"this")))
                    var.get(u"this").get('_deflate').callprop('end', var.get('filteredData'))
                PyJs_anonymous_2283_._set_name('anonymous')
                var.get('PackerAsync').get('prototype').put('pack', PyJs_anonymous_2283_)
            PyJs_anonymous_2281_._set_name('anonymous')
            PyJs_anonymous_2281_.callprop('call', var.get(u"this"))
        PyJs_anonymous_2280_._set_name('anonymous')
        PyJs_anonymous_2280_.callprop('call', var.get(u"this"), var.get('require')(Js('buffer')).get('Buffer'))
    PyJs_anonymous_2279_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2286_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_2287_(Buffer, this, arguments, var=var):
            var = Scope({'Buffer':Buffer, 'this':this, 'arguments':arguments}, var)
            var.registers(['Buffer'])
            @Js
            def PyJs_anonymous_2288_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['constants', 'zlib', 'hasSyncZlib', 'Packer'])
                Js('use strict')
                var.put('hasSyncZlib', Js(True))
                var.put('zlib', var.get('require')(Js('zlib')))
                if var.get('zlib').get('deflateSync').neg():
                    var.put('hasSyncZlib', Js(False))
                var.put('constants', var.get('require')(Js('./constants')))
                var.put('Packer', var.get('require')(Js('./packer')))
                @Js
                def PyJs_anonymous_2289_(metaData, opt, this, arguments, var=var):
                    var = Scope({'metaData':metaData, 'opt':opt, 'this':this, 'arguments':arguments}, var)
                    var.registers(['packer', 'filteredData', 'chunks', 'options', 'compressedData', 'metaData', 'opt'])
                    if var.get('hasSyncZlib').neg():
                        PyJsTempException = JsToPyException(var.get('Error').create(Js('To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0')))
                        raise PyJsTempException
                    var.put('options', (var.get('opt') or Js({})))
                    var.put('packer', var.get('Packer').create(var.get('options')))
                    var.put('chunks', Js([]))
                    var.get('chunks').callprop('push', var.get('Buffer').create(var.get('constants').get('PNG_SIGNATURE')))
                    var.get('chunks').callprop('push', var.get('packer').callprop('packIHDR', var.get('metaData').get('width'), var.get('metaData').get('height')))
                    if var.get('metaData').get('gamma'):
                        var.get('chunks').callprop('push', var.get('packer').callprop('packGAMA', var.get('metaData').get('gamma')))
                    var.put('filteredData', var.get('packer').callprop('filterData', var.get('metaData').get('data'), var.get('metaData').get('width'), var.get('metaData').get('height')))
                    var.put('compressedData', var.get('zlib').callprop('deflateSync', var.get('filteredData'), var.get('packer').callprop('getDeflateOptions')))
                    var.put('filteredData', var.get(u"null"))
                    if (var.get('compressedData').neg() or var.get('compressedData').get('length').neg()):
                        PyJsTempException = JsToPyException(var.get('Error').create(Js('bad png - invalid compressed data response')))
                        raise PyJsTempException
                    var.get('chunks').callprop('push', var.get('packer').callprop('packIDAT', var.get('compressedData')))
                    var.get('chunks').callprop('push', var.get('packer').callprop('packIEND'))
                    return var.get('Buffer').callprop('concat', var.get('chunks'))
                PyJs_anonymous_2289_._set_name('anonymous')
                var.get('module').put('exports', PyJs_anonymous_2289_)
            PyJs_anonymous_2288_._set_name('anonymous')
            PyJs_anonymous_2288_.callprop('call', var.get(u"this"))
        PyJs_anonymous_2287_._set_name('anonymous')
        PyJs_anonymous_2287_.callprop('call', var.get(u"this"), var.get('require')(Js('buffer')).get('Buffer'))
    PyJs_anonymous_2286_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2290_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_2291_(Buffer, this, arguments, var=var):
            var = Scope({'Buffer':Buffer, 'this':this, 'arguments':arguments}, var)
            var.registers(['Buffer'])
            @Js
            def PyJs_anonymous_2292_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['CrcStream', 'zlib', 'constants', 'bitPacker', 'Packer', 'filter'])
                Js('use strict')
                var.put('constants', var.get('require')(Js('./constants')))
                var.put('CrcStream', var.get('require')(Js('./crc')))
                var.put('bitPacker', var.get('require')(Js('./bitpacker')))
                var.put('filter', var.get('require')(Js('./filter-pack')))
                var.put('zlib', var.get('require')(Js('zlib')))
                @Js
                def PyJs_anonymous_2293_(options, this, arguments, var=var):
                    var = Scope({'options':options, 'this':this, 'arguments':arguments}, var)
                    var.registers(['options'])
                    var.get(u"this").put('_options', var.get('options'))
                    var.get('options').put('deflateChunkSize', (var.get('options').get('deflateChunkSize') or (Js(32.0)*Js(1024.0))))
                    var.get('options').put('deflateLevel', (var.get('options').get('deflateLevel') if (var.get('options').get('deflateLevel')!=var.get(u"null")) else Js(9.0)))
                    var.get('options').put('deflateStrategy', (var.get('options').get('deflateStrategy') if (var.get('options').get('deflateStrategy')!=var.get(u"null")) else Js(3.0)))
                    var.get('options').put('inputHasAlpha', (var.get('options').get('inputHasAlpha') if (var.get('options').get('inputHasAlpha')!=var.get(u"null")) else Js(True)))
                    var.get('options').put('deflateFactory', (var.get('options').get('deflateFactory') or var.get('zlib').get('createDeflate')))
                    var.get('options').put('bitDepth', (var.get('options').get('bitDepth') or Js(8.0)))
                    var.get('options').put('colorType', (var.get('options').get('colorType') if PyJsStrictEq(var.get('options').get('colorType').typeof(),Js('number')) else var.get('constants').get('COLORTYPE_COLOR_ALPHA')))
                    var.get('options').put('inputColorType', (var.get('options').get('inputColorType') if PyJsStrictEq(var.get('options').get('inputColorType').typeof(),Js('number')) else var.get('constants').get('COLORTYPE_COLOR_ALPHA')))
                    if PyJsStrictEq(Js([var.get('constants').get('COLORTYPE_GRAYSCALE'), var.get('constants').get('COLORTYPE_COLOR'), var.get('constants').get('COLORTYPE_COLOR_ALPHA'), var.get('constants').get('COLORTYPE_ALPHA')]).callprop('indexOf', var.get('options').get('colorType')),(-Js(1.0))):
                        PyJsTempException = JsToPyException(var.get('Error').create(((Js('option color type:')+var.get('options').get('colorType'))+Js(' is not supported at present'))))
                        raise PyJsTempException
                    if PyJsStrictEq(Js([var.get('constants').get('COLORTYPE_GRAYSCALE'), var.get('constants').get('COLORTYPE_COLOR'), var.get('constants').get('COLORTYPE_COLOR_ALPHA'), var.get('constants').get('COLORTYPE_ALPHA')]).callprop('indexOf', var.get('options').get('inputColorType')),(-Js(1.0))):
                        PyJsTempException = JsToPyException(var.get('Error').create(((Js('option input color type:')+var.get('options').get('inputColorType'))+Js(' is not supported at present'))))
                        raise PyJsTempException
                    if (PyJsStrictNeq(var.get('options').get('bitDepth'),Js(8.0)) and PyJsStrictNeq(var.get('options').get('bitDepth'),Js(16.0))):
                        PyJsTempException = JsToPyException(var.get('Error').create(((Js('option bit depth:')+var.get('options').get('bitDepth'))+Js(' is not supported at present'))))
                        raise PyJsTempException
                PyJs_anonymous_2293_._set_name('anonymous')
                var.put('Packer', var.get('module').put('exports', PyJs_anonymous_2293_))
                @Js
                def PyJs_anonymous_2294_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    return Js({'chunkSize':var.get(u"this").get('_options').get('deflateChunkSize'),'level':var.get(u"this").get('_options').get('deflateLevel'),'strategy':var.get(u"this").get('_options').get('deflateStrategy')})
                PyJs_anonymous_2294_._set_name('anonymous')
                var.get('Packer').get('prototype').put('getDeflateOptions', PyJs_anonymous_2294_)
                @Js
                def PyJs_anonymous_2295_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    return var.get(u"this").get('_options').callprop('deflateFactory', var.get(u"this").callprop('getDeflateOptions'))
                PyJs_anonymous_2295_._set_name('anonymous')
                var.get('Packer').get('prototype').put('createDeflate', PyJs_anonymous_2295_)
                @Js
                def PyJs_anonymous_2296_(data, width, height, this, arguments, var=var):
                    var = Scope({'data':data, 'width':width, 'height':height, 'this':this, 'arguments':arguments}, var)
                    var.registers(['height', 'width', 'filteredData', 'data', 'packedData', 'bpp'])
                    var.put('packedData', var.get('bitPacker')(var.get('data'), var.get('width'), var.get('height'), var.get(u"this").get('_options')))
                    var.put('bpp', var.get('constants').get('COLORTYPE_TO_BPP_MAP').get(var.get(u"this").get('_options').get('colorType')))
                    var.put('filteredData', var.get('filter')(var.get('packedData'), var.get('width'), var.get('height'), var.get(u"this").get('_options'), var.get('bpp')))
                    return var.get('filteredData')
                PyJs_anonymous_2296_._set_name('anonymous')
                var.get('Packer').get('prototype').put('filterData', PyJs_anonymous_2296_)
                @Js
                def PyJs_anonymous_2297_(type, data, this, arguments, var=var):
                    var = Scope({'type':type, 'data':data, 'this':this, 'arguments':arguments}, var)
                    var.registers(['len', 'buf', 'type', 'data'])
                    var.put('len', (var.get('data').get('length') if var.get('data') else Js(0.0)))
                    var.put('buf', var.get('Buffer').create((var.get('len')+Js(12.0))))
                    var.get('buf').callprop('writeUInt32BE', var.get('len'), Js(0.0))
                    var.get('buf').callprop('writeUInt32BE', var.get('type'), Js(4.0))
                    if var.get('data'):
                        var.get('data').callprop('copy', var.get('buf'), Js(8.0))
                    var.get('buf').callprop('writeInt32BE', var.get('CrcStream').callprop('crc32', var.get('buf').callprop('slice', Js(4.0), (var.get('buf').get('length')-Js(4.0)))), (var.get('buf').get('length')-Js(4.0)))
                    return var.get('buf')
                PyJs_anonymous_2297_._set_name('anonymous')
                var.get('Packer').get('prototype').put('_packChunk', PyJs_anonymous_2297_)
                @Js
                def PyJs_anonymous_2298_(gamma, this, arguments, var=var):
                    var = Scope({'gamma':gamma, 'this':this, 'arguments':arguments}, var)
                    var.registers(['buf', 'gamma'])
                    var.put('buf', var.get('Buffer').create(Js(4.0)))
                    var.get('buf').callprop('writeUInt32BE', var.get('Math').callprop('floor', (var.get('gamma')*var.get('constants').get('GAMMA_DIVISION'))), Js(0.0))
                    return var.get(u"this").callprop('_packChunk', var.get('constants').get('TYPE_gAMA'), var.get('buf'))
                PyJs_anonymous_2298_._set_name('anonymous')
                var.get('Packer').get('prototype').put('packGAMA', PyJs_anonymous_2298_)
                @Js
                def PyJs_anonymous_2299_(width, height, this, arguments, var=var):
                    var = Scope({'width':width, 'height':height, 'this':this, 'arguments':arguments}, var)
                    var.registers(['buf', 'width', 'height'])
                    var.put('buf', var.get('Buffer').create(Js(13.0)))
                    var.get('buf').callprop('writeUInt32BE', var.get('width'), Js(0.0))
                    var.get('buf').callprop('writeUInt32BE', var.get('height'), Js(4.0))
                    var.get('buf').put('8', var.get(u"this").get('_options').get('bitDepth'))
                    var.get('buf').put('9', var.get(u"this").get('_options').get('colorType'))
                    var.get('buf').put('10', Js(0.0))
                    var.get('buf').put('11', Js(0.0))
                    var.get('buf').put('12', Js(0.0))
                    return var.get(u"this").callprop('_packChunk', var.get('constants').get('TYPE_IHDR'), var.get('buf'))
                PyJs_anonymous_2299_._set_name('anonymous')
                var.get('Packer').get('prototype').put('packIHDR', PyJs_anonymous_2299_)
                @Js
                def PyJs_anonymous_2300_(data, this, arguments, var=var):
                    var = Scope({'data':data, 'this':this, 'arguments':arguments}, var)
                    var.registers(['data'])
                    return var.get(u"this").callprop('_packChunk', var.get('constants').get('TYPE_IDAT'), var.get('data'))
                PyJs_anonymous_2300_._set_name('anonymous')
                var.get('Packer').get('prototype').put('packIDAT', PyJs_anonymous_2300_)
                @Js
                def PyJs_anonymous_2301_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    return var.get(u"this").callprop('_packChunk', var.get('constants').get('TYPE_IEND'), var.get(u"null"))
                PyJs_anonymous_2301_._set_name('anonymous')
                var.get('Packer').get('prototype').put('packIEND', PyJs_anonymous_2301_)
            PyJs_anonymous_2292_._set_name('anonymous')
            PyJs_anonymous_2292_.callprop('call', var.get(u"this"))
        PyJs_anonymous_2291_._set_name('anonymous')
        PyJs_anonymous_2291_.callprop('call', var.get(u"this"), var.get('require')(Js('buffer')).get('Buffer'))
    PyJs_anonymous_2290_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2302_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        Js('use strict')
        @Js
        def PyJs_paethPredictor_2303_(left, above, upLeft, this, arguments, var=var):
            var = Scope({'left':left, 'above':above, 'upLeft':upLeft, 'this':this, 'arguments':arguments, 'paethPredictor':PyJs_paethPredictor_2303_}, var)
            var.registers(['above', 'left', 'upLeft', 'pAbove', 'paeth', 'pUpLeft', 'pLeft'])
            var.put('paeth', ((var.get('left')+var.get('above'))-var.get('upLeft')))
            var.put('pLeft', var.get('Math').callprop('abs', (var.get('paeth')-var.get('left'))))
            var.put('pAbove', var.get('Math').callprop('abs', (var.get('paeth')-var.get('above'))))
            var.put('pUpLeft', var.get('Math').callprop('abs', (var.get('paeth')-var.get('upLeft'))))
            if ((var.get('pLeft')<=var.get('pAbove')) and (var.get('pLeft')<=var.get('pUpLeft'))):
                return var.get('left')
            if (var.get('pAbove')<=var.get('pUpLeft')):
                return var.get('above')
            return var.get('upLeft')
        PyJs_paethPredictor_2303_._set_name('paethPredictor')
        var.get('module').put('exports', PyJs_paethPredictor_2303_)
    PyJs_anonymous_2302_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2304_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'bitmapper', 'Parser', 'ChunkStream', 'FilterAsync', 'exports', 'util', 'zlib', 'ParserAsync', 'formatNormaliser', 'require'])
        Js('use strict')
        var.put('util', var.get('require')(Js('util')))
        var.put('zlib', var.get('require')(Js('zlib')))
        var.put('ChunkStream', var.get('require')(Js('./chunkstream')))
        var.put('FilterAsync', var.get('require')(Js('./filter-parse-async')))
        var.put('Parser', var.get('require')(Js('./parser')))
        var.put('bitmapper', var.get('require')(Js('./bitmapper')))
        var.put('formatNormaliser', var.get('require')(Js('./format-normaliser')))
        @Js
        def PyJs_anonymous_2305_(options, this, arguments, var=var):
            var = Scope({'options':options, 'this':this, 'arguments':arguments}, var)
            var.registers(['options'])
            var.get('ChunkStream').callprop('call', var.get(u"this"))
            def PyJs_LONG_2306_(var=var):
                return var.get('Parser').create(var.get('options'), Js({'read':var.get(u"this").get('read').callprop('bind', var.get(u"this")),'error':var.get(u"this").get('_handleError').callprop('bind', var.get(u"this")),'metadata':var.get(u"this").get('_handleMetaData').callprop('bind', var.get(u"this")),'gamma':var.get(u"this").get('emit').callprop('bind', var.get(u"this"), Js('gamma')),'palette':var.get(u"this").get('_handlePalette').callprop('bind', var.get(u"this")),'transColor':var.get(u"this").get('_handleTransColor').callprop('bind', var.get(u"this")),'finished':var.get(u"this").get('_finished').callprop('bind', var.get(u"this")),'inflateData':var.get(u"this").get('_inflateData').callprop('bind', var.get(u"this")),'simpleTransparency':var.get(u"this").get('_simpleTransparency').callprop('bind', var.get(u"this")),'headersFinished':var.get(u"this").get('_headersFinished').callprop('bind', var.get(u"this"))}))
            var.get(u"this").put('_parser', PyJs_LONG_2306_())
            var.get(u"this").put('_options', var.get('options'))
            var.get(u"this").put('writable', Js(True))
            var.get(u"this").get('_parser').callprop('start')
        PyJs_anonymous_2305_._set_name('anonymous')
        var.put('ParserAsync', var.get('module').put('exports', PyJs_anonymous_2305_))
        var.get('util').callprop('inherits', var.get('ParserAsync'), var.get('ChunkStream'))
        @Js
        def PyJs_anonymous_2307_(err, this, arguments, var=var):
            var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
            var.registers(['err'])
            var.get(u"this").callprop('emit', Js('error'), var.get('err'))
            var.get(u"this").put('writable', Js(False))
            var.get(u"this").callprop('destroy')
            if (var.get(u"this").get('_inflate') and var.get(u"this").get('_inflate').get('destroy')):
                var.get(u"this").get('_inflate').callprop('destroy')
            if var.get(u"this").get('_filter'):
                var.get(u"this").get('_filter').callprop('destroy')
                @Js
                def PyJs_anonymous_2308_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    pass
                PyJs_anonymous_2308_._set_name('anonymous')
                var.get(u"this").get('_filter').callprop('on', Js('error'), PyJs_anonymous_2308_)
            var.get(u"this").put('errord', Js(True))
        PyJs_anonymous_2307_._set_name('anonymous')
        var.get('ParserAsync').get('prototype').put('_handleError', PyJs_anonymous_2307_)
        @Js
        def PyJs_anonymous_2309_(data, this, arguments, var=var):
            var = Scope({'data':data, 'this':this, 'arguments':arguments}, var)
            var.registers(['rowSize', 'leftToInflate', 'emitError', 'chunkSize', 'imageSize', 'data', 'filterWrite'])
            if var.get(u"this").get('_inflate').neg():
                if var.get(u"this").get('_bitmapInfo').get('interlace'):
                    var.get(u"this").put('_inflate', var.get('zlib').callprop('createInflate'))
                    var.get(u"this").get('_inflate').callprop('on', Js('error'), var.get(u"this").get('emit').callprop('bind', var.get(u"this"), Js('error')))
                    var.get(u"this").get('_filter').callprop('on', Js('complete'), var.get(u"this").get('_complete').callprop('bind', var.get(u"this")))
                    var.get(u"this").get('_inflate').callprop('pipe', var.get(u"this").get('_filter'))
                else:
                    var.put('rowSize', (((((var.get(u"this").get('_bitmapInfo').get('width')*var.get(u"this").get('_bitmapInfo').get('bpp'))*var.get(u"this").get('_bitmapInfo').get('depth'))+Js(7.0))>>Js(3.0))+Js(1.0)))
                    var.put('imageSize', (var.get('rowSize')*var.get(u"this").get('_bitmapInfo').get('height')))
                    var.put('chunkSize', var.get('Math').callprop('max', var.get('imageSize'), var.get('zlib').get('Z_MIN_CHUNK')))
                    var.get(u"this").put('_inflate', var.get('zlib').callprop('createInflate', Js({'chunkSize':var.get('chunkSize')})))
                    var.put('leftToInflate', var.get('imageSize'))
                    var.put('emitError', var.get(u"this").get('emit').callprop('bind', var.get(u"this"), Js('error')))
                    @Js
                    def PyJs_anonymous_2310_(err, this, arguments, var=var):
                        var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                        var.registers(['err'])
                        if var.get('leftToInflate').neg():
                            return var.get('undefined')
                        var.get('emitError')(var.get('err'))
                    PyJs_anonymous_2310_._set_name('anonymous')
                    var.get(u"this").get('_inflate').callprop('on', Js('error'), PyJs_anonymous_2310_)
                    var.get(u"this").get('_filter').callprop('on', Js('complete'), var.get(u"this").get('_complete').callprop('bind', var.get(u"this")))
                    var.put('filterWrite', var.get(u"this").get('_filter').get('write').callprop('bind', var.get(u"this").get('_filter')))
                    @Js
                    def PyJs_anonymous_2311_(chunk, this, arguments, var=var):
                        var = Scope({'chunk':chunk, 'this':this, 'arguments':arguments}, var)
                        var.registers(['chunk'])
                        if var.get('leftToInflate').neg():
                            return var.get('undefined')
                        if (var.get('chunk').get('length')>var.get('leftToInflate')):
                            var.put('chunk', var.get('chunk').callprop('slice', Js(0.0), var.get('leftToInflate')))
                        var.put('leftToInflate', var.get('chunk').get('length'), '-')
                        var.get('filterWrite')(var.get('chunk'))
                    PyJs_anonymous_2311_._set_name('anonymous')
                    var.get(u"this").get('_inflate').callprop('on', Js('data'), PyJs_anonymous_2311_)
                    var.get(u"this").get('_inflate').callprop('on', Js('end'), var.get(u"this").get('_filter').get('end').callprop('bind', var.get(u"this").get('_filter')))
            var.get(u"this").get('_inflate').callprop('write', var.get('data'))
        PyJs_anonymous_2309_._set_name('anonymous')
        var.get('ParserAsync').get('prototype').put('_inflateData', PyJs_anonymous_2309_)
        @Js
        def PyJs_anonymous_2312_(metaData, this, arguments, var=var):
            var = Scope({'metaData':metaData, 'this':this, 'arguments':arguments}, var)
            var.registers(['metaData'])
            var.get(u"this").put('_metaData', var.get('metaData'))
            var.get(u"this").put('_bitmapInfo', var.get('Object').callprop('create', var.get('metaData')))
            var.get(u"this").put('_filter', var.get('FilterAsync').create(var.get(u"this").get('_bitmapInfo')))
        PyJs_anonymous_2312_._set_name('anonymous')
        var.get('ParserAsync').get('prototype').put('_handleMetaData', PyJs_anonymous_2312_)
        @Js
        def PyJs_anonymous_2313_(transColor, this, arguments, var=var):
            var = Scope({'transColor':transColor, 'this':this, 'arguments':arguments}, var)
            var.registers(['transColor'])
            var.get(u"this").get('_bitmapInfo').put('transColor', var.get('transColor'))
        PyJs_anonymous_2313_._set_name('anonymous')
        var.get('ParserAsync').get('prototype').put('_handleTransColor', PyJs_anonymous_2313_)
        @Js
        def PyJs_anonymous_2314_(palette, this, arguments, var=var):
            var = Scope({'palette':palette, 'this':this, 'arguments':arguments}, var)
            var.registers(['palette'])
            var.get(u"this").get('_bitmapInfo').put('palette', var.get('palette'))
        PyJs_anonymous_2314_._set_name('anonymous')
        var.get('ParserAsync').get('prototype').put('_handlePalette', PyJs_anonymous_2314_)
        @Js
        def PyJs_anonymous_2315_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").get('_metaData').put('alpha', Js(True))
        PyJs_anonymous_2315_._set_name('anonymous')
        var.get('ParserAsync').get('prototype').put('_simpleTransparency', PyJs_anonymous_2315_)
        @Js
        def PyJs_anonymous_2316_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").callprop('emit', Js('metadata'), var.get(u"this").get('_metaData'))
        PyJs_anonymous_2316_._set_name('anonymous')
        var.get('ParserAsync').get('prototype').put('_headersFinished', PyJs_anonymous_2316_)
        @Js
        def PyJs_anonymous_2317_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            if var.get(u"this").get('errord'):
                return var.get('undefined')
            if var.get(u"this").get('_inflate').neg():
                var.get(u"this").callprop('emit', Js('error'), Js('No Inflate block'))
            else:
                var.get(u"this").get('_inflate').callprop('end')
            var.get(u"this").callprop('destroySoon')
        PyJs_anonymous_2317_._set_name('anonymous')
        var.get('ParserAsync').get('prototype').put('_finished', PyJs_anonymous_2317_)
        @Js
        def PyJs_anonymous_2318_(filteredData, this, arguments, var=var):
            var = Scope({'filteredData':filteredData, 'this':this, 'arguments':arguments}, var)
            var.registers(['normalisedBitmapData', 'bitmapData', 'filteredData'])
            if var.get(u"this").get('errord'):
                return var.get('undefined')
            try:
                var.put('bitmapData', var.get('bitmapper').callprop('dataToBitMap', var.get('filteredData'), var.get(u"this").get('_bitmapInfo')))
                var.put('normalisedBitmapData', var.get('formatNormaliser')(var.get('bitmapData'), var.get(u"this").get('_bitmapInfo')))
                var.put('bitmapData', var.get(u"null"))
            except PyJsException as PyJsTempException:
                PyJsHolder_6578_75070673 = var.own.get('ex')
                var.force_own_put('ex', PyExceptionToJs(PyJsTempException))
                try:
                    var.get(u"this").callprop('_handleError', var.get('ex'))
                    return var.get('undefined')
                finally:
                    if PyJsHolder_6578_75070673 is not None:
                        var.own['ex'] = PyJsHolder_6578_75070673
                    else:
                        del var.own['ex']
                    del PyJsHolder_6578_75070673
            var.get(u"this").callprop('emit', Js('parsed'), var.get('normalisedBitmapData'))
        PyJs_anonymous_2318_._set_name('anonymous')
        var.get('ParserAsync').get('prototype').put('_complete', PyJs_anonymous_2318_)
    PyJs_anonymous_2304_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2319_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_2320_(Buffer, this, arguments, var=var):
            var = Scope({'Buffer':Buffer, 'this':this, 'arguments':arguments}, var)
            var.registers(['Buffer'])
            @Js
            def PyJs_anonymous_2321_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['hasSyncZlib', 'bitmapper', 'Parser', 'FilterSync', 'zlib', 'SyncReader', 'formatNormaliser', 'inflateSync'])
                Js('use strict')
                var.put('hasSyncZlib', Js(True))
                var.put('zlib', var.get('require')(Js('zlib')))
                var.put('inflateSync', var.get('require')(Js('./sync-inflate')))
                if var.get('zlib').get('deflateSync').neg():
                    var.put('hasSyncZlib', Js(False))
                var.put('SyncReader', var.get('require')(Js('./sync-reader')))
                var.put('FilterSync', var.get('require')(Js('./filter-parse-sync')))
                var.put('Parser', var.get('require')(Js('./parser')))
                var.put('bitmapper', var.get('require')(Js('./bitmapper')))
                var.put('formatNormaliser', var.get('require')(Js('./format-normaliser')))
                @Js
                def PyJs_anonymous_2322_(buffer, options, this, arguments, var=var):
                    var = Scope({'buffer':buffer, 'options':options, 'this':this, 'arguments':arguments}, var)
                    var.registers(['rowSize', 'buffer', 'handlePalette', 'handleInflateData', 'parser', 'handleGamma', 'reader', 'unfilteredData', 'imageSize', 'inflatedData', 'handleError', 'inflateData', 'handleSimpleTransparency', 'options', 'metaData', 'gamma', 'normalisedBitmapData', 'err', 'handleMetaData', 'inflateDataList', 'bitmapData', 'handleTransColor'])
                    @Js
                    def PyJsHoisted_handleError_(_err_, this, arguments, var=var):
                        var = Scope({'_err_':_err_, 'this':this, 'arguments':arguments}, var)
                        var.registers(['_err_'])
                        var.put('err', var.get('_err_'))
                    PyJsHoisted_handleError_.func_name = 'handleError'
                    var.put('handleError', PyJsHoisted_handleError_)
                    @Js
                    def PyJsHoisted_handleMetaData_(_metaData_, this, arguments, var=var):
                        var = Scope({'_metaData_':_metaData_, 'this':this, 'arguments':arguments}, var)
                        var.registers(['_metaData_'])
                        var.put('metaData', var.get('_metaData_'))
                    PyJsHoisted_handleMetaData_.func_name = 'handleMetaData'
                    var.put('handleMetaData', PyJsHoisted_handleMetaData_)
                    @Js
                    def PyJsHoisted_handleTransColor_(transColor, this, arguments, var=var):
                        var = Scope({'transColor':transColor, 'this':this, 'arguments':arguments}, var)
                        var.registers(['transColor'])
                        var.get('metaData').put('transColor', var.get('transColor'))
                    PyJsHoisted_handleTransColor_.func_name = 'handleTransColor'
                    var.put('handleTransColor', PyJsHoisted_handleTransColor_)
                    @Js
                    def PyJsHoisted_handlePalette_(palette, this, arguments, var=var):
                        var = Scope({'palette':palette, 'this':this, 'arguments':arguments}, var)
                        var.registers(['palette'])
                        var.get('metaData').put('palette', var.get('palette'))
                    PyJsHoisted_handlePalette_.func_name = 'handlePalette'
                    var.put('handlePalette', PyJsHoisted_handlePalette_)
                    @Js
                    def PyJsHoisted_handleSimpleTransparency_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        var.get('metaData').put('alpha', Js(True))
                    PyJsHoisted_handleSimpleTransparency_.func_name = 'handleSimpleTransparency'
                    var.put('handleSimpleTransparency', PyJsHoisted_handleSimpleTransparency_)
                    @Js
                    def PyJsHoisted_handleGamma_(_gamma_, this, arguments, var=var):
                        var = Scope({'_gamma_':_gamma_, 'this':this, 'arguments':arguments}, var)
                        var.registers(['_gamma_'])
                        var.put('gamma', var.get('_gamma_'))
                    PyJsHoisted_handleGamma_.func_name = 'handleGamma'
                    var.put('handleGamma', PyJsHoisted_handleGamma_)
                    @Js
                    def PyJsHoisted_handleInflateData_(inflatedData, this, arguments, var=var):
                        var = Scope({'inflatedData':inflatedData, 'this':this, 'arguments':arguments}, var)
                        var.registers(['inflatedData'])
                        var.get('inflateDataList').callprop('push', var.get('inflatedData'))
                    PyJsHoisted_handleInflateData_.func_name = 'handleInflateData'
                    var.put('handleInflateData', PyJsHoisted_handleInflateData_)
                    if var.get('hasSyncZlib').neg():
                        PyJsTempException = JsToPyException(var.get('Error').create(Js('To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0')))
                        raise PyJsTempException
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    var.put('inflateDataList', Js([]))
                    pass
                    var.put('reader', var.get('SyncReader').create(var.get('buffer')))
                    var.put('parser', var.get('Parser').create(var.get('options'), Js({'read':var.get('reader').get('read').callprop('bind', var.get('reader')),'error':var.get('handleError'),'metadata':var.get('handleMetaData'),'gamma':var.get('handleGamma'),'palette':var.get('handlePalette'),'transColor':var.get('handleTransColor'),'inflateData':var.get('handleInflateData'),'simpleTransparency':var.get('handleSimpleTransparency')})))
                    var.get('parser').callprop('start')
                    var.get('reader').callprop('process')
                    if var.get('err'):
                        PyJsTempException = JsToPyException(var.get('err'))
                        raise PyJsTempException
                    var.put('inflateData', var.get('Buffer').callprop('concat', var.get('inflateDataList')))
                    var.get('inflateDataList').put('length', Js(0.0))
                    pass
                    if var.get('metaData').get('interlace'):
                        var.put('inflatedData', var.get('zlib').callprop('inflateSync', var.get('inflateData')))
                    else:
                        var.put('rowSize', (((((var.get('metaData').get('width')*var.get('metaData').get('bpp'))*var.get('metaData').get('depth'))+Js(7.0))>>Js(3.0))+Js(1.0)))
                        var.put('imageSize', (var.get('rowSize')*var.get('metaData').get('height')))
                        var.put('inflatedData', var.get('inflateSync')(var.get('inflateData'), Js({'chunkSize':var.get('imageSize'),'maxLength':var.get('imageSize')})))
                    var.put('inflateData', var.get(u"null"))
                    if (var.get('inflatedData').neg() or var.get('inflatedData').get('length').neg()):
                        PyJsTempException = JsToPyException(var.get('Error').create(Js('bad png - invalid inflate data response')))
                        raise PyJsTempException
                    var.put('unfilteredData', var.get('FilterSync').callprop('process', var.get('inflatedData'), var.get('metaData')))
                    var.put('inflateData', var.get(u"null"))
                    var.put('bitmapData', var.get('bitmapper').callprop('dataToBitMap', var.get('unfilteredData'), var.get('metaData')))
                    var.put('unfilteredData', var.get(u"null"))
                    var.put('normalisedBitmapData', var.get('formatNormaliser')(var.get('bitmapData'), var.get('metaData')))
                    var.get('metaData').put('data', var.get('normalisedBitmapData'))
                    var.get('metaData').put('gamma', (var.get('gamma') or Js(0.0)))
                    return var.get('metaData')
                PyJs_anonymous_2322_._set_name('anonymous')
                var.get('module').put('exports', PyJs_anonymous_2322_)
            PyJs_anonymous_2321_._set_name('anonymous')
            PyJs_anonymous_2321_.callprop('call', var.get(u"this"))
        PyJs_anonymous_2320_._set_name('anonymous')
        PyJs_anonymous_2320_.callprop('call', var.get(u"this"), var.get('require')(Js('buffer')).get('Buffer'))
    PyJs_anonymous_2319_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2323_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_2324_(Buffer, this, arguments, var=var):
            var = Scope({'Buffer':Buffer, 'this':this, 'arguments':arguments}, var)
            var.registers(['Buffer'])
            @Js
            def PyJs_anonymous_2325_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['Parser', 'constants', 'CrcCalculator'])
                Js('use strict')
                var.put('constants', var.get('require')(Js('./constants')))
                var.put('CrcCalculator', var.get('require')(Js('./crc')))
                @Js
                def PyJs_anonymous_2326_(options, dependencies, this, arguments, var=var):
                    var = Scope({'options':options, 'dependencies':dependencies, 'this':this, 'arguments':arguments}, var)
                    var.registers(['options', 'dependencies'])
                    var.get(u"this").put('_options', var.get('options'))
                    var.get('options').put('checkCRC', PyJsStrictNeq(var.get('options').get('checkCRC'),Js(False)))
                    var.get(u"this").put('_hasIHDR', Js(False))
                    var.get(u"this").put('_hasIEND', Js(False))
                    var.get(u"this").put('_emittedHeadersFinished', Js(False))
                    var.get(u"this").put('_palette', Js([]))
                    var.get(u"this").put('_colorType', Js(0.0))
                    var.get(u"this").put('_chunks', Js({}))
                    var.get(u"this").get('_chunks').put(var.get('constants').get('TYPE_IHDR'), var.get(u"this").get('_handleIHDR').callprop('bind', var.get(u"this")))
                    var.get(u"this").get('_chunks').put(var.get('constants').get('TYPE_IEND'), var.get(u"this").get('_handleIEND').callprop('bind', var.get(u"this")))
                    var.get(u"this").get('_chunks').put(var.get('constants').get('TYPE_IDAT'), var.get(u"this").get('_handleIDAT').callprop('bind', var.get(u"this")))
                    var.get(u"this").get('_chunks').put(var.get('constants').get('TYPE_PLTE'), var.get(u"this").get('_handlePLTE').callprop('bind', var.get(u"this")))
                    var.get(u"this").get('_chunks').put(var.get('constants').get('TYPE_tRNS'), var.get(u"this").get('_handleTRNS').callprop('bind', var.get(u"this")))
                    var.get(u"this").get('_chunks').put(var.get('constants').get('TYPE_gAMA'), var.get(u"this").get('_handleGAMA').callprop('bind', var.get(u"this")))
                    var.get(u"this").put('read', var.get('dependencies').get('read'))
                    var.get(u"this").put('error', var.get('dependencies').get('error'))
                    var.get(u"this").put('metadata', var.get('dependencies').get('metadata'))
                    var.get(u"this").put('gamma', var.get('dependencies').get('gamma'))
                    var.get(u"this").put('transColor', var.get('dependencies').get('transColor'))
                    var.get(u"this").put('palette', var.get('dependencies').get('palette'))
                    var.get(u"this").put('parsed', var.get('dependencies').get('parsed'))
                    var.get(u"this").put('inflateData', var.get('dependencies').get('inflateData'))
                    var.get(u"this").put('finished', var.get('dependencies').get('finished'))
                    var.get(u"this").put('simpleTransparency', var.get('dependencies').get('simpleTransparency'))
                    @Js
                    def PyJs_anonymous_2327_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        pass
                    PyJs_anonymous_2327_._set_name('anonymous')
                    var.get(u"this").put('headersFinished', (var.get('dependencies').get('headersFinished') or PyJs_anonymous_2327_))
                PyJs_anonymous_2326_._set_name('anonymous')
                var.put('Parser', var.get('module').put('exports', PyJs_anonymous_2326_))
                @Js
                def PyJs_anonymous_2328_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.get(u"this").callprop('read', var.get('constants').get('PNG_SIGNATURE').get('length'), var.get(u"this").get('_parseSignature').callprop('bind', var.get(u"this")))
                PyJs_anonymous_2328_._set_name('anonymous')
                var.get('Parser').get('prototype').put('start', PyJs_anonymous_2328_)
                @Js
                def PyJs_anonymous_2329_(data, this, arguments, var=var):
                    var = Scope({'data':data, 'this':this, 'arguments':arguments}, var)
                    var.registers(['data', 'i', 'signature'])
                    var.put('signature', var.get('constants').get('PNG_SIGNATURE'))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('signature').get('length')):
                        try:
                            if PyJsStrictNeq(var.get('data').get(var.get('i')),var.get('signature').get(var.get('i'))):
                                var.get(u"this").callprop('error', var.get('Error').create(Js('Invalid file signature')))
                                return var.get('undefined')
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    var.get(u"this").callprop('read', Js(8.0), var.get(u"this").get('_parseChunkBegin').callprop('bind', var.get(u"this")))
                PyJs_anonymous_2329_._set_name('anonymous')
                var.get('Parser').get('prototype').put('_parseSignature', PyJs_anonymous_2329_)
                @Js
                def PyJs_anonymous_2330_(data, this, arguments, var=var):
                    var = Scope({'data':data, 'this':this, 'arguments':arguments}, var)
                    var.registers(['i', 'name', 'length', 'type', 'data', 'ancillary'])
                    var.put('length', var.get('data').callprop('readUInt32BE', Js(0.0)))
                    var.put('type', var.get('data').callprop('readUInt32BE', Js(4.0)))
                    var.put('name', Js(''))
                    #for JS loop
                    var.put('i', Js(4.0))
                    while (var.get('i')<Js(8.0)):
                        try:
                            var.put('name', var.get('String').callprop('fromCharCode', var.get('data').get(var.get('i'))), '+')
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    var.put('ancillary', var.get('Boolean')((var.get('data').get('4')&Js(32))))
                    if (var.get(u"this").get('_hasIHDR').neg() and PyJsStrictNeq(var.get('type'),var.get('constants').get('TYPE_IHDR'))):
                        var.get(u"this").callprop('error', var.get('Error').create(Js('Expected IHDR on beggining')))
                        return var.get('undefined')
                    var.get(u"this").put('_crc', var.get('CrcCalculator').create())
                    var.get(u"this").get('_crc').callprop('write', var.get('Buffer').create(var.get('name')))
                    if var.get(u"this").get('_chunks').get(var.get('type')):
                        return var.get(u"this").get('_chunks').callprop(var.get('type'), var.get('length'))
                    if var.get('ancillary').neg():
                        var.get(u"this").callprop('error', var.get('Error').create((Js('Unsupported critical chunk type ')+var.get('name'))))
                        return var.get('undefined')
                    var.get(u"this").callprop('read', (var.get('length')+Js(4.0)), var.get(u"this").get('_skipChunk').callprop('bind', var.get(u"this")))
                PyJs_anonymous_2330_._set_name('anonymous')
                var.get('Parser').get('prototype').put('_parseChunkBegin', PyJs_anonymous_2330_)
                @Js
                def PyJs_anonymous_2331_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.get(u"this").callprop('read', Js(8.0), var.get(u"this").get('_parseChunkBegin').callprop('bind', var.get(u"this")))
                PyJs_anonymous_2331_._set_name('anonymous')
                var.get('Parser').get('prototype').put('_skipChunk', PyJs_anonymous_2331_)
                @Js
                def PyJs_anonymous_2332_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.get(u"this").callprop('read', Js(4.0), var.get(u"this").get('_parseChunkEnd').callprop('bind', var.get(u"this")))
                PyJs_anonymous_2332_._set_name('anonymous')
                var.get('Parser').get('prototype').put('_handleChunkEnd', PyJs_anonymous_2332_)
                @Js
                def PyJs_anonymous_2333_(data, this, arguments, var=var):
                    var = Scope({'data':data, 'this':this, 'arguments':arguments}, var)
                    var.registers(['data', 'calcCrc', 'fileCrc'])
                    var.put('fileCrc', var.get('data').callprop('readInt32BE', Js(0.0)))
                    var.put('calcCrc', var.get(u"this").get('_crc').callprop('crc32'))
                    if (var.get(u"this").get('_options').get('checkCRC') and PyJsStrictNeq(var.get('calcCrc'),var.get('fileCrc'))):
                        var.get(u"this").callprop('error', var.get('Error').create((((Js('Crc error - ')+var.get('fileCrc'))+Js(' - '))+var.get('calcCrc'))))
                        return var.get('undefined')
                    if var.get(u"this").get('_hasIEND').neg():
                        var.get(u"this").callprop('read', Js(8.0), var.get(u"this").get('_parseChunkBegin').callprop('bind', var.get(u"this")))
                PyJs_anonymous_2333_._set_name('anonymous')
                var.get('Parser').get('prototype').put('_parseChunkEnd', PyJs_anonymous_2333_)
                @Js
                def PyJs_anonymous_2334_(length, this, arguments, var=var):
                    var = Scope({'length':length, 'this':this, 'arguments':arguments}, var)
                    var.registers(['length'])
                    var.get(u"this").callprop('read', var.get('length'), var.get(u"this").get('_parseIHDR').callprop('bind', var.get(u"this")))
                PyJs_anonymous_2334_._set_name('anonymous')
                var.get('Parser').get('prototype').put('_handleIHDR', PyJs_anonymous_2334_)
                @Js
                def PyJs_anonymous_2335_(data, this, arguments, var=var):
                    var = Scope({'data':data, 'this':this, 'arguments':arguments}, var)
                    var.registers(['depth', 'interlace', 'height', 'width', 'colorType', 'data', 'filter', 'bpp', 'compr'])
                    var.get(u"this").get('_crc').callprop('write', var.get('data'))
                    var.put('width', var.get('data').callprop('readUInt32BE', Js(0.0)))
                    var.put('height', var.get('data').callprop('readUInt32BE', Js(4.0)))
                    var.put('depth', var.get('data').get('8'))
                    var.put('colorType', var.get('data').get('9'))
                    var.put('compr', var.get('data').get('10'))
                    var.put('filter', var.get('data').get('11'))
                    var.put('interlace', var.get('data').get('12'))
                    if ((((PyJsStrictNeq(var.get('depth'),Js(8.0)) and PyJsStrictNeq(var.get('depth'),Js(4.0))) and PyJsStrictNeq(var.get('depth'),Js(2.0))) and PyJsStrictNeq(var.get('depth'),Js(1.0))) and PyJsStrictNeq(var.get('depth'),Js(16.0))):
                        var.get(u"this").callprop('error', var.get('Error').create((Js('Unsupported bit depth ')+var.get('depth'))))
                        return var.get('undefined')
                    if var.get('constants').get('COLORTYPE_TO_BPP_MAP').contains(var.get('colorType')).neg():
                        var.get(u"this").callprop('error', var.get('Error').create(Js('Unsupported color type')))
                        return var.get('undefined')
                    if PyJsStrictNeq(var.get('compr'),Js(0.0)):
                        var.get(u"this").callprop('error', var.get('Error').create(Js('Unsupported compression method')))
                        return var.get('undefined')
                    if PyJsStrictNeq(var.get('filter'),Js(0.0)):
                        var.get(u"this").callprop('error', var.get('Error').create(Js('Unsupported filter method')))
                        return var.get('undefined')
                    if (PyJsStrictNeq(var.get('interlace'),Js(0.0)) and PyJsStrictNeq(var.get('interlace'),Js(1.0))):
                        var.get(u"this").callprop('error', var.get('Error').create(Js('Unsupported interlace method')))
                        return var.get('undefined')
                    var.get(u"this").put('_colorType', var.get('colorType'))
                    var.put('bpp', var.get('constants').get('COLORTYPE_TO_BPP_MAP').get(var.get(u"this").get('_colorType')))
                    var.get(u"this").put('_hasIHDR', Js(True))
                    def PyJs_LONG_2336_(var=var):
                        return var.get(u"this").callprop('metadata', Js({'width':var.get('width'),'height':var.get('height'),'depth':var.get('depth'),'interlace':var.get('Boolean')(var.get('interlace')),'palette':var.get('Boolean')((var.get('colorType')&var.get('constants').get('COLORTYPE_PALETTE'))),'color':var.get('Boolean')((var.get('colorType')&var.get('constants').get('COLORTYPE_COLOR'))),'alpha':var.get('Boolean')((var.get('colorType')&var.get('constants').get('COLORTYPE_ALPHA'))),'bpp':var.get('bpp'),'colorType':var.get('colorType')}))
                    PyJs_LONG_2336_()
                    var.get(u"this").callprop('_handleChunkEnd')
                PyJs_anonymous_2335_._set_name('anonymous')
                var.get('Parser').get('prototype').put('_parseIHDR', PyJs_anonymous_2335_)
                @Js
                def PyJs_anonymous_2337_(length, this, arguments, var=var):
                    var = Scope({'length':length, 'this':this, 'arguments':arguments}, var)
                    var.registers(['length'])
                    var.get(u"this").callprop('read', var.get('length'), var.get(u"this").get('_parsePLTE').callprop('bind', var.get(u"this")))
                PyJs_anonymous_2337_._set_name('anonymous')
                var.get('Parser').get('prototype').put('_handlePLTE', PyJs_anonymous_2337_)
                @Js
                def PyJs_anonymous_2338_(data, this, arguments, var=var):
                    var = Scope({'data':data, 'this':this, 'arguments':arguments}, var)
                    var.registers(['data', 'i', 'entries'])
                    var.get(u"this").get('_crc').callprop('write', var.get('data'))
                    var.put('entries', var.get('Math').callprop('floor', (var.get('data').get('length')/Js(3.0))))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('entries')):
                        try:
                            var.get(u"this").get('_palette').callprop('push', Js([var.get('data').get((var.get('i')*Js(3.0))), var.get('data').get(((var.get('i')*Js(3.0))+Js(1.0))), var.get('data').get(((var.get('i')*Js(3.0))+Js(2.0))), Js(255)]))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    var.get(u"this").callprop('palette', var.get(u"this").get('_palette'))
                    var.get(u"this").callprop('_handleChunkEnd')
                PyJs_anonymous_2338_._set_name('anonymous')
                var.get('Parser').get('prototype').put('_parsePLTE', PyJs_anonymous_2338_)
                @Js
                def PyJs_anonymous_2339_(length, this, arguments, var=var):
                    var = Scope({'length':length, 'this':this, 'arguments':arguments}, var)
                    var.registers(['length'])
                    var.get(u"this").callprop('simpleTransparency')
                    var.get(u"this").callprop('read', var.get('length'), var.get(u"this").get('_parseTRNS').callprop('bind', var.get(u"this")))
                PyJs_anonymous_2339_._set_name('anonymous')
                var.get('Parser').get('prototype').put('_handleTRNS', PyJs_anonymous_2339_)
                @Js
                def PyJs_anonymous_2340_(data, this, arguments, var=var):
                    var = Scope({'data':data, 'this':this, 'arguments':arguments}, var)
                    var.registers(['data', 'i'])
                    var.get(u"this").get('_crc').callprop('write', var.get('data'))
                    if PyJsStrictEq(var.get(u"this").get('_colorType'),var.get('constants').get('COLORTYPE_PALETTE_COLOR')):
                        if PyJsStrictEq(var.get(u"this").get('_palette').get('length'),Js(0.0)):
                            var.get(u"this").callprop('error', var.get('Error').create(Js('Transparency chunk must be after palette')))
                            return var.get('undefined')
                        if (var.get('data').get('length')>var.get(u"this").get('_palette').get('length')):
                            var.get(u"this").callprop('error', var.get('Error').create(Js('More transparent colors than palette size')))
                            return var.get('undefined')
                        #for JS loop
                        var.put('i', Js(0.0))
                        while (var.get('i')<var.get('data').get('length')):
                            try:
                                var.get(u"this").get('_palette').get(var.get('i')).put('3', var.get('data').get(var.get('i')))
                            finally:
                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                        var.get(u"this").callprop('palette', var.get(u"this").get('_palette'))
                    if PyJsStrictEq(var.get(u"this").get('_colorType'),var.get('constants').get('COLORTYPE_GRAYSCALE')):
                        var.get(u"this").callprop('transColor', Js([var.get('data').callprop('readUInt16BE', Js(0.0))]))
                    if PyJsStrictEq(var.get(u"this").get('_colorType'),var.get('constants').get('COLORTYPE_COLOR')):
                        var.get(u"this").callprop('transColor', Js([var.get('data').callprop('readUInt16BE', Js(0.0)), var.get('data').callprop('readUInt16BE', Js(2.0)), var.get('data').callprop('readUInt16BE', Js(4.0))]))
                    var.get(u"this").callprop('_handleChunkEnd')
                PyJs_anonymous_2340_._set_name('anonymous')
                var.get('Parser').get('prototype').put('_parseTRNS', PyJs_anonymous_2340_)
                @Js
                def PyJs_anonymous_2341_(length, this, arguments, var=var):
                    var = Scope({'length':length, 'this':this, 'arguments':arguments}, var)
                    var.registers(['length'])
                    var.get(u"this").callprop('read', var.get('length'), var.get(u"this").get('_parseGAMA').callprop('bind', var.get(u"this")))
                PyJs_anonymous_2341_._set_name('anonymous')
                var.get('Parser').get('prototype').put('_handleGAMA', PyJs_anonymous_2341_)
                @Js
                def PyJs_anonymous_2342_(data, this, arguments, var=var):
                    var = Scope({'data':data, 'this':this, 'arguments':arguments}, var)
                    var.registers(['data'])
                    var.get(u"this").get('_crc').callprop('write', var.get('data'))
                    var.get(u"this").callprop('gamma', (var.get('data').callprop('readUInt32BE', Js(0.0))/var.get('constants').get('GAMMA_DIVISION')))
                    var.get(u"this").callprop('_handleChunkEnd')
                PyJs_anonymous_2342_._set_name('anonymous')
                var.get('Parser').get('prototype').put('_parseGAMA', PyJs_anonymous_2342_)
                @Js
                def PyJs_anonymous_2343_(length, this, arguments, var=var):
                    var = Scope({'length':length, 'this':this, 'arguments':arguments}, var)
                    var.registers(['length'])
                    if var.get(u"this").get('_emittedHeadersFinished').neg():
                        var.get(u"this").put('_emittedHeadersFinished', Js(True))
                        var.get(u"this").callprop('headersFinished')
                    var.get(u"this").callprop('read', (-var.get('length')), var.get(u"this").get('_parseIDAT').callprop('bind', var.get(u"this"), var.get('length')))
                PyJs_anonymous_2343_._set_name('anonymous')
                var.get('Parser').get('prototype').put('_handleIDAT', PyJs_anonymous_2343_)
                @Js
                def PyJs_anonymous_2344_(length, data, this, arguments, var=var):
                    var = Scope({'length':length, 'data':data, 'this':this, 'arguments':arguments}, var)
                    var.registers(['data', 'length', 'leftOverLength'])
                    var.get(u"this").get('_crc').callprop('write', var.get('data'))
                    if (PyJsStrictEq(var.get(u"this").get('_colorType'),var.get('constants').get('COLORTYPE_PALETTE_COLOR')) and PyJsStrictEq(var.get(u"this").get('_palette').get('length'),Js(0.0))):
                        PyJsTempException = JsToPyException(var.get('Error').create(Js('Expected palette not found')))
                        raise PyJsTempException
                    var.get(u"this").callprop('inflateData', var.get('data'))
                    var.put('leftOverLength', (var.get('length')-var.get('data').get('length')))
                    if (var.get('leftOverLength')>Js(0.0)):
                        var.get(u"this").callprop('_handleIDAT', var.get('leftOverLength'))
                    else:
                        var.get(u"this").callprop('_handleChunkEnd')
                PyJs_anonymous_2344_._set_name('anonymous')
                var.get('Parser').get('prototype').put('_parseIDAT', PyJs_anonymous_2344_)
                @Js
                def PyJs_anonymous_2345_(length, this, arguments, var=var):
                    var = Scope({'length':length, 'this':this, 'arguments':arguments}, var)
                    var.registers(['length'])
                    var.get(u"this").callprop('read', var.get('length'), var.get(u"this").get('_parseIEND').callprop('bind', var.get(u"this")))
                PyJs_anonymous_2345_._set_name('anonymous')
                var.get('Parser').get('prototype').put('_handleIEND', PyJs_anonymous_2345_)
                @Js
                def PyJs_anonymous_2346_(data, this, arguments, var=var):
                    var = Scope({'data':data, 'this':this, 'arguments':arguments}, var)
                    var.registers(['data'])
                    var.get(u"this").get('_crc').callprop('write', var.get('data'))
                    var.get(u"this").put('_hasIEND', Js(True))
                    var.get(u"this").callprop('_handleChunkEnd')
                    if var.get(u"this").get('finished'):
                        var.get(u"this").callprop('finished')
                PyJs_anonymous_2346_._set_name('anonymous')
                var.get('Parser').get('prototype').put('_parseIEND', PyJs_anonymous_2346_)
            PyJs_anonymous_2325_._set_name('anonymous')
            PyJs_anonymous_2325_.callprop('call', var.get(u"this"))
        PyJs_anonymous_2324_._set_name('anonymous')
        PyJs_anonymous_2324_.callprop('call', var.get(u"this"), var.get('require')(Js('buffer')).get('Buffer'))
    PyJs_anonymous_2323_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2347_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['pack', 'module', 'exports', 'parse', 'require'])
        Js('use strict')
        var.put('parse', var.get('require')(Js('./parser-sync')))
        var.put('pack', var.get('require')(Js('./packer-sync')))
        @Js
        def PyJs_anonymous_2348_(buffer, options, this, arguments, var=var):
            var = Scope({'buffer':buffer, 'options':options, 'this':this, 'arguments':arguments}, var)
            var.registers(['buffer', 'options'])
            return var.get('parse')(var.get('buffer'), (var.get('options') or Js({})))
        PyJs_anonymous_2348_._set_name('anonymous')
        var.get('exports').put('read', PyJs_anonymous_2348_)
        @Js
        def PyJs_anonymous_2349_(png, options, this, arguments, var=var):
            var = Scope({'png':png, 'options':options, 'this':this, 'arguments':arguments}, var)
            var.registers(['options', 'png'])
            return var.get('pack')(var.get('png'), var.get('options'))
        PyJs_anonymous_2349_._set_name('anonymous')
        var.get('exports').put('write', PyJs_anonymous_2349_)
    PyJs_anonymous_2347_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2350_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_2351_(process, Buffer, this, arguments, var=var):
            var = Scope({'process':process, 'Buffer':Buffer, 'this':this, 'arguments':arguments}, var)
            var.registers(['Buffer', 'process'])
            @Js
            def PyJs_anonymous_2352_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['Parser', 'util', 'Stream', 'Packer', 'PNGSync', 'PNG'])
                Js('use strict')
                var.put('util', var.get('require')(Js('util')))
                var.put('Stream', var.get('require')(Js('stream')))
                var.put('Parser', var.get('require')(Js('./parser-async')))
                var.put('Packer', var.get('require')(Js('./packer-async')))
                var.put('PNGSync', var.get('require')(Js('./png-sync')))
                @Js
                def PyJs_anonymous_2353_(options, this, arguments, var=var):
                    var = Scope({'options':options, 'this':this, 'arguments':arguments}, var)
                    var.registers(['options'])
                    var.get('Stream').callprop('call', var.get(u"this"))
                    var.put('options', (var.get('options') or Js({})))
                    var.get(u"this").put('width', (var.get('options').get('width')|Js(0.0)))
                    var.get(u"this").put('height', (var.get('options').get('height')|Js(0.0)))
                    var.get(u"this").put('data', (var.get('Buffer').create(((Js(4.0)*var.get(u"this").get('width'))*var.get(u"this").get('height'))) if ((var.get(u"this").get('width')>Js(0.0)) and (var.get(u"this").get('height')>Js(0.0))) else var.get(u"null")))
                    if (var.get('options').get('fill') and var.get(u"this").get('data')):
                        var.get(u"this").get('data').callprop('fill', Js(0.0))
                    var.get(u"this").put('gamma', Js(0.0))
                    var.get(u"this").put('readable', var.get(u"this").put('writable', Js(True)))
                    var.get(u"this").put('_parser', var.get('Parser').create(var.get('options')))
                    var.get(u"this").get('_parser').callprop('on', Js('error'), var.get(u"this").get('emit').callprop('bind', var.get(u"this"), Js('error')))
                    var.get(u"this").get('_parser').callprop('on', Js('close'), var.get(u"this").get('_handleClose').callprop('bind', var.get(u"this")))
                    var.get(u"this").get('_parser').callprop('on', Js('metadata'), var.get(u"this").get('_metadata').callprop('bind', var.get(u"this")))
                    var.get(u"this").get('_parser').callprop('on', Js('gamma'), var.get(u"this").get('_gamma').callprop('bind', var.get(u"this")))
                    @Js
                    def PyJs_anonymous_2354_(data, this, arguments, var=var):
                        var = Scope({'data':data, 'this':this, 'arguments':arguments}, var)
                        var.registers(['data'])
                        var.get(u"this").put('data', var.get('data'))
                        var.get(u"this").callprop('emit', Js('parsed'), var.get('data'))
                    PyJs_anonymous_2354_._set_name('anonymous')
                    var.get(u"this").get('_parser').callprop('on', Js('parsed'), PyJs_anonymous_2354_.callprop('bind', var.get(u"this")))
                    var.get(u"this").put('_packer', var.get('Packer').create(var.get('options')))
                    var.get(u"this").get('_packer').callprop('on', Js('data'), var.get(u"this").get('emit').callprop('bind', var.get(u"this"), Js('data')))
                    var.get(u"this").get('_packer').callprop('on', Js('end'), var.get(u"this").get('emit').callprop('bind', var.get(u"this"), Js('end')))
                    var.get(u"this").get('_parser').callprop('on', Js('close'), var.get(u"this").get('_handleClose').callprop('bind', var.get(u"this")))
                    var.get(u"this").get('_packer').callprop('on', Js('error'), var.get(u"this").get('emit').callprop('bind', var.get(u"this"), Js('error')))
                PyJs_anonymous_2353_._set_name('anonymous')
                var.put('PNG', var.get('exports').put('PNG', PyJs_anonymous_2353_))
                var.get('util').callprop('inherits', var.get('PNG'), var.get('Stream'))
                var.get('PNG').put('sync', var.get('PNGSync'))
                @Js
                def PyJs_anonymous_2355_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    if (var.get(u"this").get('data').neg() or var.get(u"this").get('data').get('length').neg()):
                        var.get(u"this").callprop('emit', Js('error'), Js('No data provided'))
                        return var.get(u"this")
                    @Js
                    def PyJs_anonymous_2356_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        var.get(u"this").get('_packer').callprop('pack', var.get(u"this").get('data'), var.get(u"this").get('width'), var.get(u"this").get('height'), var.get(u"this").get('gamma'))
                    PyJs_anonymous_2356_._set_name('anonymous')
                    var.get('process').callprop('nextTick', PyJs_anonymous_2356_.callprop('bind', var.get(u"this")))
                    return var.get(u"this")
                PyJs_anonymous_2355_._set_name('anonymous')
                var.get('PNG').get('prototype').put('pack', PyJs_anonymous_2355_)
                @Js
                def PyJs_anonymous_2357_(data, callback, this, arguments, var=var):
                    var = Scope({'data':data, 'callback':callback, 'this':this, 'arguments':arguments}, var)
                    var.registers(['onParsed', 'data', 'callback', 'onError'])
                    if var.get('callback'):
                        pass
                        @Js
                        def PyJs_anonymous_2358_(parsedData, this, arguments, var=var):
                            var = Scope({'parsedData':parsedData, 'this':this, 'arguments':arguments}, var)
                            var.registers(['parsedData'])
                            var.get(u"this").callprop('removeListener', Js('error'), var.get('onError'))
                            var.get(u"this").put('data', var.get('parsedData'))
                            var.get('callback')(var.get(u"null"), var.get(u"this"))
                        PyJs_anonymous_2358_._set_name('anonymous')
                        var.put('onParsed', PyJs_anonymous_2358_.callprop('bind', var.get(u"this")))
                        @Js
                        def PyJs_anonymous_2359_(err, this, arguments, var=var):
                            var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                            var.registers(['err'])
                            var.get(u"this").callprop('removeListener', Js('parsed'), var.get('onParsed'))
                            var.get('callback')(var.get('err'), var.get(u"null"))
                        PyJs_anonymous_2359_._set_name('anonymous')
                        var.put('onError', PyJs_anonymous_2359_.callprop('bind', var.get(u"this")))
                        var.get(u"this").callprop('once', Js('parsed'), var.get('onParsed'))
                        var.get(u"this").callprop('once', Js('error'), var.get('onError'))
                    var.get(u"this").callprop('end', var.get('data'))
                    return var.get(u"this")
                PyJs_anonymous_2357_._set_name('anonymous')
                var.get('PNG').get('prototype').put('parse', PyJs_anonymous_2357_)
                @Js
                def PyJs_anonymous_2360_(data, this, arguments, var=var):
                    var = Scope({'data':data, 'this':this, 'arguments':arguments}, var)
                    var.registers(['data'])
                    var.get(u"this").get('_parser').callprop('write', var.get('data'))
                    return Js(True)
                PyJs_anonymous_2360_._set_name('anonymous')
                var.get('PNG').get('prototype').put('write', PyJs_anonymous_2360_)
                @Js
                def PyJs_anonymous_2361_(data, this, arguments, var=var):
                    var = Scope({'data':data, 'this':this, 'arguments':arguments}, var)
                    var.registers(['data'])
                    var.get(u"this").get('_parser').callprop('end', var.get('data'))
                PyJs_anonymous_2361_._set_name('anonymous')
                var.get('PNG').get('prototype').put('end', PyJs_anonymous_2361_)
                @Js
                def PyJs_anonymous_2362_(metadata, this, arguments, var=var):
                    var = Scope({'metadata':metadata, 'this':this, 'arguments':arguments}, var)
                    var.registers(['metadata'])
                    var.get(u"this").put('width', var.get('metadata').get('width'))
                    var.get(u"this").put('height', var.get('metadata').get('height'))
                    var.get(u"this").callprop('emit', Js('metadata'), var.get('metadata'))
                PyJs_anonymous_2362_._set_name('anonymous')
                var.get('PNG').get('prototype').put('_metadata', PyJs_anonymous_2362_)
                @Js
                def PyJs_anonymous_2363_(gamma, this, arguments, var=var):
                    var = Scope({'gamma':gamma, 'this':this, 'arguments':arguments}, var)
                    var.registers(['gamma'])
                    var.get(u"this").put('gamma', var.get('gamma'))
                PyJs_anonymous_2363_._set_name('anonymous')
                var.get('PNG').get('prototype').put('_gamma', PyJs_anonymous_2363_)
                @Js
                def PyJs_anonymous_2364_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    if (var.get(u"this").get('_parser').get('writable').neg() and var.get(u"this").get('_packer').get('readable').neg()):
                        var.get(u"this").callprop('emit', Js('close'))
                PyJs_anonymous_2364_._set_name('anonymous')
                var.get('PNG').get('prototype').put('_handleClose', PyJs_anonymous_2364_)
                @Js
                def PyJs_anonymous_2365_(src, dst, srcX, srcY, width, height, deltaX, deltaY, this, arguments, var=var):
                    var = Scope({'src':src, 'dst':dst, 'srcX':srcX, 'srcY':srcY, 'width':width, 'height':height, 'deltaX':deltaX, 'deltaY':deltaY, 'this':this, 'arguments':arguments}, var)
                    var.registers(['srcX', 'y', 'dst', 'height', 'width', 'srcY', 'deltaX', 'deltaY', 'src'])
                    var.put('srcX', Js(0.0), '|')
                    var.put('srcY', Js(0.0), '|')
                    var.put('width', Js(0.0), '|')
                    var.put('height', Js(0.0), '|')
                    var.put('deltaX', Js(0.0), '|')
                    var.put('deltaY', Js(0.0), '|')
                    if ((((var.get('srcX')>var.get('src').get('width')) or (var.get('srcY')>var.get('src').get('height'))) or ((var.get('srcX')+var.get('width'))>var.get('src').get('width'))) or ((var.get('srcY')+var.get('height'))>var.get('src').get('height'))):
                        PyJsTempException = JsToPyException(var.get('Error').create(Js('bitblt reading outside image')))
                        raise PyJsTempException
                    if ((((var.get('deltaX')>var.get('dst').get('width')) or (var.get('deltaY')>var.get('dst').get('height'))) or ((var.get('deltaX')+var.get('width'))>var.get('dst').get('width'))) or ((var.get('deltaY')+var.get('height'))>var.get('dst').get('height'))):
                        PyJsTempException = JsToPyException(var.get('Error').create(Js('bitblt writing outside image')))
                        raise PyJsTempException
                    #for JS loop
                    var.put('y', Js(0.0))
                    while (var.get('y')<var.get('height')):
                        try:
                            var.get('src').get('data').callprop('copy', var.get('dst').get('data'), ((((var.get('deltaY')+var.get('y'))*var.get('dst').get('width'))+var.get('deltaX'))<<Js(2.0)), ((((var.get('srcY')+var.get('y'))*var.get('src').get('width'))+var.get('srcX'))<<Js(2.0)), (((((var.get('srcY')+var.get('y'))*var.get('src').get('width'))+var.get('srcX'))+var.get('width'))<<Js(2.0)))
                        finally:
                                (var.put('y',Js(var.get('y').to_number())+Js(1))-Js(1))
                PyJs_anonymous_2365_._set_name('anonymous')
                var.get('PNG').put('bitblt', PyJs_anonymous_2365_)
                @Js
                def PyJs_anonymous_2366_(dst, srcX, srcY, width, height, deltaX, deltaY, this, arguments, var=var):
                    var = Scope({'dst':dst, 'srcX':srcX, 'srcY':srcY, 'width':width, 'height':height, 'deltaX':deltaX, 'deltaY':deltaY, 'this':this, 'arguments':arguments}, var)
                    var.registers(['srcX', 'dst', 'height', 'width', 'srcY', 'deltaX', 'deltaY'])
                    var.get('PNG').callprop('bitblt', var.get(u"this"), var.get('dst'), var.get('srcX'), var.get('srcY'), var.get('width'), var.get('height'), var.get('deltaX'), var.get('deltaY'))
                    return var.get(u"this")
                PyJs_anonymous_2366_._set_name('anonymous')
                var.get('PNG').get('prototype').put('bitblt', PyJs_anonymous_2366_)
                @Js
                def PyJs_anonymous_2367_(src, this, arguments, var=var):
                    var = Scope({'src':src, 'this':this, 'arguments':arguments}, var)
                    var.registers(['y', 'x', 'i', 'sample', 'idx', 'src'])
                    if var.get('src').get('gamma'):
                        #for JS loop
                        var.put('y', Js(0.0))
                        while (var.get('y')<var.get('src').get('height')):
                            try:
                                #for JS loop
                                var.put('x', Js(0.0))
                                while (var.get('x')<var.get('src').get('width')):
                                    try:
                                        var.put('idx', (((var.get('src').get('width')*var.get('y'))+var.get('x'))<<Js(2.0)))
                                        #for JS loop
                                        var.put('i', Js(0.0))
                                        while (var.get('i')<Js(3.0)):
                                            try:
                                                var.put('sample', (var.get('src').get('data').get((var.get('idx')+var.get('i')))/Js(255.0)))
                                                var.put('sample', var.get('Math').callprop('pow', var.get('sample'), ((Js(1.0)/Js(2.2))/var.get('src').get('gamma'))))
                                                var.get('src').get('data').put((var.get('idx')+var.get('i')), var.get('Math').callprop('round', (var.get('sample')*Js(255.0))))
                                            finally:
                                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                                    finally:
                                            (var.put('x',Js(var.get('x').to_number())+Js(1))-Js(1))
                            finally:
                                    (var.put('y',Js(var.get('y').to_number())+Js(1))-Js(1))
                        var.get('src').put('gamma', Js(0.0))
                PyJs_anonymous_2367_._set_name('anonymous')
                var.get('PNG').put('adjustGamma', PyJs_anonymous_2367_)
                @Js
                def PyJs_anonymous_2368_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.get('PNG').callprop('adjustGamma', var.get(u"this"))
                PyJs_anonymous_2368_._set_name('anonymous')
                var.get('PNG').get('prototype').put('adjustGamma', PyJs_anonymous_2368_)
            PyJs_anonymous_2352_._set_name('anonymous')
            PyJs_anonymous_2352_.callprop('call', var.get(u"this"))
        PyJs_anonymous_2351_._set_name('anonymous')
        PyJs_anonymous_2351_.callprop('call', var.get(u"this"), var.get('require')(Js('_process')), var.get('require')(Js('buffer')).get('Buffer'))
    PyJs_anonymous_2350_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2369_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_2370_(process, Buffer, this, arguments, var=var):
            var = Scope({'process':process, 'Buffer':Buffer, 'this':this, 'arguments':arguments}, var)
            var.registers(['Buffer', 'process'])
            @Js
            def PyJs_anonymous_2371_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['createInflate', 'Inflate', 'util', 'zlib', 'assert', '_close', 'zlibBufferSync', 'kMaxLength', 'inflateSync'])
                @Js
                def PyJsHoisted_Inflate_(opts, this, arguments, var=var):
                    var = Scope({'opts':opts, 'this':this, 'arguments':arguments}, var)
                    var.registers(['opts'])
                    if var.get(u"this").instanceof(var.get('Inflate')).neg():
                        return var.get('Inflate').create(var.get('opts'))
                    if (var.get('opts') and (var.get('opts').get('chunkSize')<var.get('zlib').get('Z_MIN_CHUNK'))):
                        var.get('opts').put('chunkSize', var.get('zlib').get('Z_MIN_CHUNK'))
                    var.get('zlib').get('Inflate').callprop('call', var.get(u"this"), var.get('opts'))
                    var.get(u"this").put('_offset', (var.get(u"this").get('_outOffset') if PyJsStrictEq(var.get(u"this").get('_offset'),var.get('undefined')) else var.get(u"this").get('_offset')))
                    var.get(u"this").put('_buffer', (var.get(u"this").get('_buffer') or var.get(u"this").get('_outBuffer')))
                    if (var.get('opts') and (var.get('opts').get('maxLength')!=var.get(u"null"))):
                        var.get(u"this").put('_maxLength', var.get('opts').get('maxLength'))
                PyJsHoisted_Inflate_.func_name = 'Inflate'
                var.put('Inflate', PyJsHoisted_Inflate_)
                @Js
                def PyJsHoisted_createInflate_(opts, this, arguments, var=var):
                    var = Scope({'opts':opts, 'this':this, 'arguments':arguments}, var)
                    var.registers(['opts'])
                    return var.get('Inflate').create(var.get('opts'))
                PyJsHoisted_createInflate_.func_name = 'createInflate'
                var.put('createInflate', PyJsHoisted_createInflate_)
                @Js
                def PyJsHoisted__close_(engine, callback, this, arguments, var=var):
                    var = Scope({'engine':engine, 'callback':callback, 'this':this, 'arguments':arguments}, var)
                    var.registers(['callback', 'engine'])
                    if var.get('callback'):
                        var.get('process').callprop('nextTick', var.get('callback'))
                    if var.get('engine').get('_handle').neg():
                        return var.get('undefined')
                    var.get('engine').get('_handle').callprop('close')
                    var.get('engine').put('_handle', var.get(u"null"))
                PyJsHoisted__close_.func_name = '_close'
                var.put('_close', PyJsHoisted__close_)
                @Js
                def PyJsHoisted_zlibBufferSync_(engine, buffer, this, arguments, var=var):
                    var = Scope({'engine':engine, 'buffer':buffer, 'this':this, 'arguments':arguments}, var)
                    var.registers(['buffer', 'flushFlag', 'engine'])
                    if PyJsStrictEq(var.get('buffer',throw=False).typeof(),Js('string')):
                        var.put('buffer', var.get('Buffer').callprop('from', var.get('buffer')))
                    if var.get('buffer').instanceof(var.get('Buffer')).neg():
                        PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Not a string or buffer')))
                        raise PyJsTempException
                    var.put('flushFlag', var.get('engine').get('_finishFlushFlag'))
                    if (var.get('flushFlag')==var.get(u"null")):
                        var.put('flushFlag', var.get('zlib').get('Z_FINISH'))
                    return var.get('engine').callprop('_processChunk', var.get('buffer'), var.get('flushFlag'))
                PyJsHoisted_zlibBufferSync_.func_name = 'zlibBufferSync'
                var.put('zlibBufferSync', PyJsHoisted_zlibBufferSync_)
                @Js
                def PyJsHoisted_inflateSync_(buffer, opts, this, arguments, var=var):
                    var = Scope({'buffer':buffer, 'opts':opts, 'this':this, 'arguments':arguments}, var)
                    var.registers(['buffer', 'opts'])
                    return var.get('zlibBufferSync')(var.get('Inflate').create(var.get('opts')), var.get('buffer'))
                PyJsHoisted_inflateSync_.func_name = 'inflateSync'
                var.put('inflateSync', PyJsHoisted_inflateSync_)
                Js('use strict')
                var.put('assert', var.get('require')(Js('assert')).get('ok'))
                var.put('zlib', var.get('require')(Js('zlib')))
                var.put('util', var.get('require')(Js('util')))
                var.put('kMaxLength', var.get('require')(Js('buffer')).get('kMaxLength'))
                pass
                pass
                pass
                @Js
                def PyJs_anonymous_2372_(chunk, flushFlag, asyncCb, this, arguments, var=var):
                    var = Scope({'chunk':chunk, 'flushFlag':flushFlag, 'asyncCb':asyncCb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['nread', 'self', 'buf', 'error', 'inOff', 'flushFlag', 'leftToInflate', 'buffers', 'asyncCb', 'availOutBefore', 'res', 'chunk', 'availInBefore', 'handleChunk'])
                    @Js
                    def PyJsHoisted_handleChunk_(availInAfter, availOutAfter, this, arguments, var=var):
                        var = Scope({'availInAfter':availInAfter, 'availOutAfter':availOutAfter, 'this':this, 'arguments':arguments}, var)
                        var.registers(['availOutAfter', 'have', 'out', 'availInAfter'])
                        if var.get('self').get('_hadError'):
                            return var.get('undefined')
                        var.put('have', (var.get('availOutBefore')-var.get('availOutAfter')))
                        var.get('assert')((var.get('have')>=Js(0.0)), Js('have should not go down'))
                        if (var.get('have')>Js(0.0)):
                            var.put('out', var.get('self').get('_buffer').callprop('slice', var.get('self').get('_offset'), (var.get('self').get('_offset')+var.get('have'))))
                            var.get('self').put('_offset', var.get('have'), '+')
                            if (var.get('out').get('length')>var.get('leftToInflate')):
                                var.put('out', var.get('out').callprop('slice', Js(0.0), var.get('leftToInflate')))
                            var.get('buffers').callprop('push', var.get('out'))
                            var.put('nread', var.get('out').get('length'), '+')
                            var.put('leftToInflate', var.get('out').get('length'), '-')
                            if PyJsStrictEq(var.get('leftToInflate'),Js(0.0)):
                                return Js(False)
                        if (PyJsStrictEq(var.get('availOutAfter'),Js(0.0)) or (var.get('self').get('_offset')>=var.get('self').get('_chunkSize'))):
                            var.put('availOutBefore', var.get('self').get('_chunkSize'))
                            var.get('self').put('_offset', Js(0.0))
                            var.get('self').put('_buffer', var.get('Buffer').callprop('allocUnsafe', var.get('self').get('_chunkSize')))
                        if PyJsStrictEq(var.get('availOutAfter'),Js(0.0)):
                            var.put('inOff', (var.get('availInBefore')-var.get('availInAfter')), '+')
                            var.put('availInBefore', var.get('availInAfter'))
                            return Js(True)
                        return Js(False)
                    PyJsHoisted_handleChunk_.func_name = 'handleChunk'
                    var.put('handleChunk', PyJsHoisted_handleChunk_)
                    if PyJsStrictEq(var.get('asyncCb',throw=False).typeof(),Js('function')):
                        return var.get('zlib').get('Inflate').get('_processChunk').callprop('call', var.get(u"this"), var.get('chunk'), var.get('flushFlag'), var.get('asyncCb'))
                    var.put('self', var.get(u"this"))
                    var.put('availInBefore', (var.get('chunk') and var.get('chunk').get('length')))
                    var.put('availOutBefore', (var.get(u"this").get('_chunkSize')-var.get(u"this").get('_offset')))
                    var.put('leftToInflate', var.get(u"this").get('_maxLength'))
                    var.put('inOff', Js(0.0))
                    var.put('buffers', Js([]))
                    var.put('nread', Js(0.0))
                    pass
                    @Js
                    def PyJs_anonymous_2373_(err, this, arguments, var=var):
                        var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                        var.registers(['err'])
                        var.put('error', var.get('err'))
                    PyJs_anonymous_2373_._set_name('anonymous')
                    var.get(u"this").callprop('on', Js('error'), PyJs_anonymous_2373_)
                    pass
                    var.get('assert')(var.get(u"this").get('_handle'), Js('zlib binding closed'))
                    while 1:
                        var.put('res', var.get(u"this").get('_handle').callprop('writeSync', var.get('flushFlag'), var.get('chunk'), var.get('inOff'), var.get('availInBefore'), var.get(u"this").get('_buffer'), var.get(u"this").get('_offset'), var.get('availOutBefore')))
                        var.put('res', (var.get('res') or var.get(u"this").get('_writeState')))
                        if not (var.get(u"this").get('_hadError').neg() and var.get('handleChunk')(var.get('res').get('0'), var.get('res').get('1'))):
                            break
                    if var.get(u"this").get('_hadError'):
                        PyJsTempException = JsToPyException(var.get('error'))
                        raise PyJsTempException
                    if (var.get('nread')>=var.get('kMaxLength')):
                        var.get('_close')(var.get(u"this"))
                        PyJsTempException = JsToPyException(var.get('RangeError').create(((Js('Cannot create final Buffer. It would be larger than 0x')+var.get('kMaxLength').callprop('toString', Js(16.0)))+Js(' bytes'))))
                        raise PyJsTempException
                    var.put('buf', var.get('Buffer').callprop('concat', var.get('buffers'), var.get('nread')))
                    var.get('_close')(var.get(u"this"))
                    return var.get('buf')
                PyJs_anonymous_2372_._set_name('anonymous')
                var.get('Inflate').get('prototype').put('_processChunk', PyJs_anonymous_2372_)
                var.get('util').callprop('inherits', var.get('Inflate'), var.get('zlib').get('Inflate'))
                pass
                pass
                var.get('module').put('exports', var.put('exports', var.get('inflateSync')))
                var.get('exports').put('Inflate', var.get('Inflate'))
                var.get('exports').put('createInflate', var.get('createInflate'))
                var.get('exports').put('inflateSync', var.get('inflateSync'))
            PyJs_anonymous_2371_._set_name('anonymous')
            PyJs_anonymous_2371_.callprop('call', var.get(u"this"))
        PyJs_anonymous_2370_._set_name('anonymous')
        PyJs_anonymous_2370_.callprop('call', var.get(u"this"), var.get('require')(Js('_process')), var.get('require')(Js('buffer')).get('Buffer'))
    PyJs_anonymous_2369_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2374_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['SyncReader', 'require', 'module', 'exports'])
        Js('use strict')
        @Js
        def PyJs_anonymous_2375_(buffer, this, arguments, var=var):
            var = Scope({'buffer':buffer, 'this':this, 'arguments':arguments}, var)
            var.registers(['buffer'])
            var.get(u"this").put('_buffer', var.get('buffer'))
            var.get(u"this").put('_reads', Js([]))
        PyJs_anonymous_2375_._set_name('anonymous')
        var.put('SyncReader', var.get('module').put('exports', PyJs_anonymous_2375_))
        @Js
        def PyJs_anonymous_2376_(length, callback, this, arguments, var=var):
            var = Scope({'length':length, 'callback':callback, 'this':this, 'arguments':arguments}, var)
            var.registers(['length', 'callback'])
            var.get(u"this").get('_reads').callprop('push', Js({'length':var.get('Math').callprop('abs', var.get('length')),'allowLess':(var.get('length')<Js(0.0)),'func':var.get('callback')}))
        PyJs_anonymous_2376_._set_name('anonymous')
        var.get('SyncReader').get('prototype').put('read', PyJs_anonymous_2376_)
        @Js
        def PyJs_anonymous_2377_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['buf', 'read'])
            while ((var.get(u"this").get('_reads').get('length')>Js(0.0)) and var.get(u"this").get('_buffer').get('length')):
                var.put('read', var.get(u"this").get('_reads').get('0'))
                if (var.get(u"this").get('_buffer').get('length') and ((var.get(u"this").get('_buffer').get('length')>=var.get('read').get('length')) or var.get('read').get('allowLess'))):
                    var.get(u"this").get('_reads').callprop('shift')
                    var.put('buf', var.get(u"this").get('_buffer'))
                    var.get(u"this").put('_buffer', var.get('buf').callprop('slice', var.get('read').get('length')))
                    var.get('read').get('func').callprop('call', var.get(u"this"), var.get('buf').callprop('slice', Js(0.0), var.get('read').get('length')))
                else:
                    break
            if (var.get(u"this").get('_reads').get('length')>Js(0.0)):
                return var.get('Error').create(Js('There are some read requests waitng on finished stream'))
            if (var.get(u"this").get('_buffer').get('length')>Js(0.0)):
                return var.get('Error').create(Js('unrecognised content at end of stream'))
        PyJs_anonymous_2377_._set_name('anonymous')
        var.get('SyncReader').get('prototype').put('process', PyJs_anonymous_2377_)
    PyJs_anonymous_2374_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2378_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['defaultSetTimout', 'currentQueue', 'drainQueue', 'module', 'noop', 'exports', 'cachedSetTimeout', 'process', 'runTimeout', 'runClearTimeout', 'queue', 'draining', 'require', 'Item', 'defaultClearTimeout', 'queueIndex', 'cachedClearTimeout', 'cleanUpNextTick'])
        @Js
        def PyJsHoisted_defaultSetTimout_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            PyJsTempException = JsToPyException(var.get('Error').create(Js('setTimeout has not been defined')))
            raise PyJsTempException
        PyJsHoisted_defaultSetTimout_.func_name = 'defaultSetTimout'
        var.put('defaultSetTimout', PyJsHoisted_defaultSetTimout_)
        @Js
        def PyJsHoisted_defaultClearTimeout_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            PyJsTempException = JsToPyException(var.get('Error').create(Js('clearTimeout has not been defined')))
            raise PyJsTempException
        PyJsHoisted_defaultClearTimeout_.func_name = 'defaultClearTimeout'
        var.put('defaultClearTimeout', PyJsHoisted_defaultClearTimeout_)
        @Js
        def PyJsHoisted_runTimeout_(fun, this, arguments, var=var):
            var = Scope({'fun':fun, 'this':this, 'arguments':arguments}, var)
            var.registers(['fun'])
            if PyJsStrictEq(var.get('cachedSetTimeout'),var.get('setTimeout')):
                return var.get('setTimeout')(var.get('fun'), Js(0.0))
            if ((PyJsStrictEq(var.get('cachedSetTimeout'),var.get('defaultSetTimout')) or var.get('cachedSetTimeout').neg()) and var.get('setTimeout')):
                var.put('cachedSetTimeout', var.get('setTimeout'))
                return var.get('setTimeout')(var.get('fun'), Js(0.0))
            try:
                return var.get('cachedSetTimeout')(var.get('fun'), Js(0.0))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_3733583 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    try:
                        return var.get('cachedSetTimeout').callprop('call', var.get(u"null"), var.get('fun'), Js(0.0))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_65_83645614 = var.own.get('e')
                        var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                        try:
                            return var.get('cachedSetTimeout').callprop('call', var.get(u"this"), var.get('fun'), Js(0.0))
                        finally:
                            if PyJsHolder_65_83645614 is not None:
                                var.own['e'] = PyJsHolder_65_83645614
                            else:
                                del var.own['e']
                            del PyJsHolder_65_83645614
                finally:
                    if PyJsHolder_65_3733583 is not None:
                        var.own['e'] = PyJsHolder_65_3733583
                    else:
                        del var.own['e']
                    del PyJsHolder_65_3733583
        PyJsHoisted_runTimeout_.func_name = 'runTimeout'
        var.put('runTimeout', PyJsHoisted_runTimeout_)
        @Js
        def PyJsHoisted_runClearTimeout_(marker, this, arguments, var=var):
            var = Scope({'marker':marker, 'this':this, 'arguments':arguments}, var)
            var.registers(['marker'])
            if PyJsStrictEq(var.get('cachedClearTimeout'),var.get('clearTimeout')):
                return var.get('clearTimeout')(var.get('marker'))
            if ((PyJsStrictEq(var.get('cachedClearTimeout'),var.get('defaultClearTimeout')) or var.get('cachedClearTimeout').neg()) and var.get('clearTimeout')):
                var.put('cachedClearTimeout', var.get('clearTimeout'))
                return var.get('clearTimeout')(var.get('marker'))
            try:
                return var.get('cachedClearTimeout')(var.get('marker'))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_56677556 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    try:
                        return var.get('cachedClearTimeout').callprop('call', var.get(u"null"), var.get('marker'))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_65_94720509 = var.own.get('e')
                        var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                        try:
                            return var.get('cachedClearTimeout').callprop('call', var.get(u"this"), var.get('marker'))
                        finally:
                            if PyJsHolder_65_94720509 is not None:
                                var.own['e'] = PyJsHolder_65_94720509
                            else:
                                del var.own['e']
                            del PyJsHolder_65_94720509
                finally:
                    if PyJsHolder_65_56677556 is not None:
                        var.own['e'] = PyJsHolder_65_56677556
                    else:
                        del var.own['e']
                    del PyJsHolder_65_56677556
        PyJsHoisted_runClearTimeout_.func_name = 'runClearTimeout'
        var.put('runClearTimeout', PyJsHoisted_runClearTimeout_)
        @Js
        def PyJsHoisted_cleanUpNextTick_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            if (var.get('draining').neg() or var.get('currentQueue').neg()):
                return var.get('undefined')
            var.put('draining', Js(False))
            if var.get('currentQueue').get('length'):
                var.put('queue', var.get('currentQueue').callprop('concat', var.get('queue')))
            else:
                var.put('queueIndex', (-Js(1.0)))
            if var.get('queue').get('length'):
                var.get('drainQueue')()
        PyJsHoisted_cleanUpNextTick_.func_name = 'cleanUpNextTick'
        var.put('cleanUpNextTick', PyJsHoisted_cleanUpNextTick_)
        @Js
        def PyJsHoisted_drainQueue_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['timeout', 'len'])
            if var.get('draining'):
                return var.get('undefined')
            var.put('timeout', var.get('runTimeout')(var.get('cleanUpNextTick')))
            var.put('draining', Js(True))
            var.put('len', var.get('queue').get('length'))
            while var.get('len'):
                var.put('currentQueue', var.get('queue'))
                var.put('queue', Js([]))
                while (var.put('queueIndex',Js(var.get('queueIndex').to_number())+Js(1))<var.get('len')):
                    if var.get('currentQueue'):
                        var.get('currentQueue').get(var.get('queueIndex')).callprop('run')
                var.put('queueIndex', (-Js(1.0)))
                var.put('len', var.get('queue').get('length'))
            var.put('currentQueue', var.get(u"null"))
            var.put('draining', Js(False))
            var.get('runClearTimeout')(var.get('timeout'))
        PyJsHoisted_drainQueue_.func_name = 'drainQueue'
        var.put('drainQueue', PyJsHoisted_drainQueue_)
        @Js
        def PyJsHoisted_Item_(fun, array, this, arguments, var=var):
            var = Scope({'fun':fun, 'array':array, 'this':this, 'arguments':arguments}, var)
            var.registers(['fun', 'array'])
            var.get(u"this").put('fun', var.get('fun'))
            var.get(u"this").put('array', var.get('array'))
        PyJsHoisted_Item_.func_name = 'Item'
        var.put('Item', PyJsHoisted_Item_)
        @Js
        def PyJsHoisted_noop_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            pass
        PyJsHoisted_noop_.func_name = 'noop'
        var.put('noop', PyJsHoisted_noop_)
        var.put('process', var.get('module').put('exports', Js({})))
        pass
        pass
        pass
        pass
        @Js
        def PyJs_anonymous_2379_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            try:
                if PyJsStrictEq(var.get('setTimeout',throw=False).typeof(),Js('function')):
                    var.put('cachedSetTimeout', var.get('setTimeout'))
                else:
                    var.put('cachedSetTimeout', var.get('defaultSetTimout'))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_21745860 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    var.put('cachedSetTimeout', var.get('defaultSetTimout'))
                finally:
                    if PyJsHolder_65_21745860 is not None:
                        var.own['e'] = PyJsHolder_65_21745860
                    else:
                        del var.own['e']
                    del PyJsHolder_65_21745860
            try:
                if PyJsStrictEq(var.get('clearTimeout',throw=False).typeof(),Js('function')):
                    var.put('cachedClearTimeout', var.get('clearTimeout'))
                else:
                    var.put('cachedClearTimeout', var.get('defaultClearTimeout'))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_51238072 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    var.put('cachedClearTimeout', var.get('defaultClearTimeout'))
                finally:
                    if PyJsHolder_65_51238072 is not None:
                        var.own['e'] = PyJsHolder_65_51238072
                    else:
                        del var.own['e']
                    del PyJsHolder_65_51238072
        PyJs_anonymous_2379_._set_name('anonymous')
        PyJs_anonymous_2379_()
        pass
        pass
        var.put('queue', Js([]))
        var.put('draining', Js(False))
        pass
        var.put('queueIndex', (-Js(1.0)))
        pass
        pass
        @Js
        def PyJs_anonymous_2380_(fun, this, arguments, var=var):
            var = Scope({'fun':fun, 'this':this, 'arguments':arguments}, var)
            var.registers(['args', 'fun', 'i'])
            var.put('args', var.get('Array').create((var.get('arguments').get('length')-Js(1.0))))
            if (var.get('arguments').get('length')>Js(1.0)):
                #for JS loop
                var.put('i', Js(1.0))
                while (var.get('i')<var.get('arguments').get('length')):
                    try:
                        var.get('args').put((var.get('i')-Js(1.0)), var.get('arguments').get(var.get('i')))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            var.get('queue').callprop('push', var.get('Item').create(var.get('fun'), var.get('args')))
            if (PyJsStrictEq(var.get('queue').get('length'),Js(1.0)) and var.get('draining').neg()):
                var.get('runTimeout')(var.get('drainQueue'))
        PyJs_anonymous_2380_._set_name('anonymous')
        var.get('process').put('nextTick', PyJs_anonymous_2380_)
        pass
        @Js
        def PyJs_anonymous_2381_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").get('fun').callprop('apply', var.get(u"null"), var.get(u"this").get('array'))
        PyJs_anonymous_2381_._set_name('anonymous')
        var.get('Item').get('prototype').put('run', PyJs_anonymous_2381_)
        var.get('process').put('title', Js('browser'))
        var.get('process').put('browser', Js(True))
        var.get('process').put('env', Js({}))
        var.get('process').put('argv', Js([]))
        var.get('process').put('version', Js(''))
        var.get('process').put('versions', Js({}))
        pass
        var.get('process').put('on', var.get('noop'))
        var.get('process').put('addListener', var.get('noop'))
        var.get('process').put('once', var.get('noop'))
        var.get('process').put('off', var.get('noop'))
        var.get('process').put('removeListener', var.get('noop'))
        var.get('process').put('removeAllListeners', var.get('noop'))
        var.get('process').put('emit', var.get('noop'))
        var.get('process').put('prependListener', var.get('noop'))
        var.get('process').put('prependOnceListener', var.get('noop'))
        @Js
        def PyJs_anonymous_2382_(name, this, arguments, var=var):
            var = Scope({'name':name, 'this':this, 'arguments':arguments}, var)
            var.registers(['name'])
            return Js([])
        PyJs_anonymous_2382_._set_name('anonymous')
        var.get('process').put('listeners', PyJs_anonymous_2382_)
        @Js
        def PyJs_anonymous_2383_(name, this, arguments, var=var):
            var = Scope({'name':name, 'this':this, 'arguments':arguments}, var)
            var.registers(['name'])
            PyJsTempException = JsToPyException(var.get('Error').create(Js('process.binding is not supported')))
            raise PyJsTempException
        PyJs_anonymous_2383_._set_name('anonymous')
        var.get('process').put('binding', PyJs_anonymous_2383_)
        @Js
        def PyJs_anonymous_2384_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return Js('/')
        PyJs_anonymous_2384_._set_name('anonymous')
        var.get('process').put('cwd', PyJs_anonymous_2384_)
        @Js
        def PyJs_anonymous_2385_(dir, this, arguments, var=var):
            var = Scope({'dir':dir, 'this':this, 'arguments':arguments}, var)
            var.registers(['dir'])
            PyJsTempException = JsToPyException(var.get('Error').create(Js('process.chdir is not supported')))
            raise PyJsTempException
        PyJs_anonymous_2385_._set_name('anonymous')
        var.get('process').put('chdir', PyJs_anonymous_2385_)
        @Js
        def PyJs_anonymous_2386_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return Js(0.0)
        PyJs_anonymous_2386_._set_name('anonymous')
        var.get('process').put('umask', PyJs_anonymous_2386_)
    PyJs_anonymous_2378_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2387_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'buffer', 'exports', 'Buffer', 'SafeBuffer', 'require', 'copyProps'])
        @Js
        def PyJsHoisted_copyProps_(src, dst, this, arguments, var=var):
            var = Scope({'src':src, 'dst':dst, 'this':this, 'arguments':arguments}, var)
            var.registers(['key', 'dst', 'src'])
            for PyJsTemp in var.get('src'):
                var.put('key', PyJsTemp)
                var.get('dst').put(var.get('key'), var.get('src').get(var.get('key')))
        PyJsHoisted_copyProps_.func_name = 'copyProps'
        var.put('copyProps', PyJsHoisted_copyProps_)
        @Js
        def PyJsHoisted_SafeBuffer_(arg, encodingOrOffset, length, this, arguments, var=var):
            var = Scope({'arg':arg, 'encodingOrOffset':encodingOrOffset, 'length':length, 'this':this, 'arguments':arguments}, var)
            var.registers(['arg', 'length', 'encodingOrOffset'])
            return var.get('Buffer')(var.get('arg'), var.get('encodingOrOffset'), var.get('length'))
        PyJsHoisted_SafeBuffer_.func_name = 'SafeBuffer'
        var.put('SafeBuffer', PyJsHoisted_SafeBuffer_)
        var.put('buffer', var.get('require')(Js('buffer')))
        var.put('Buffer', var.get('buffer').get('Buffer'))
        pass
        if (((var.get('Buffer').get('from') and var.get('Buffer').get('alloc')) and var.get('Buffer').get('allocUnsafe')) and var.get('Buffer').get('allocUnsafeSlow')):
            var.get('module').put('exports', var.get('buffer'))
        else:
            var.get('copyProps')(var.get('buffer'), var.get('exports'))
            var.get('exports').put('Buffer', var.get('SafeBuffer'))
        pass
        var.get('copyProps')(var.get('Buffer'), var.get('SafeBuffer'))
        @Js
        def PyJs_anonymous_2388_(arg, encodingOrOffset, length, this, arguments, var=var):
            var = Scope({'arg':arg, 'encodingOrOffset':encodingOrOffset, 'length':length, 'this':this, 'arguments':arguments}, var)
            var.registers(['arg', 'length', 'encodingOrOffset'])
            if PyJsStrictEq(var.get('arg',throw=False).typeof(),Js('number')):
                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Argument must not be a number')))
                raise PyJsTempException
            return var.get('Buffer')(var.get('arg'), var.get('encodingOrOffset'), var.get('length'))
        PyJs_anonymous_2388_._set_name('anonymous')
        var.get('SafeBuffer').put('from', PyJs_anonymous_2388_)
        @Js
        def PyJs_anonymous_2389_(size, fill, encoding, this, arguments, var=var):
            var = Scope({'size':size, 'fill':fill, 'encoding':encoding, 'this':this, 'arguments':arguments}, var)
            var.registers(['buf', 'encoding', 'size', 'fill'])
            if PyJsStrictNeq(var.get('size',throw=False).typeof(),Js('number')):
                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Argument must be a number')))
                raise PyJsTempException
            var.put('buf', var.get('Buffer')(var.get('size')))
            if PyJsStrictNeq(var.get('fill'),var.get('undefined')):
                if PyJsStrictEq(var.get('encoding',throw=False).typeof(),Js('string')):
                    var.get('buf').callprop('fill', var.get('fill'), var.get('encoding'))
                else:
                    var.get('buf').callprop('fill', var.get('fill'))
            else:
                var.get('buf').callprop('fill', Js(0.0))
            return var.get('buf')
        PyJs_anonymous_2389_._set_name('anonymous')
        var.get('SafeBuffer').put('alloc', PyJs_anonymous_2389_)
        @Js
        def PyJs_anonymous_2390_(size, this, arguments, var=var):
            var = Scope({'size':size, 'this':this, 'arguments':arguments}, var)
            var.registers(['size'])
            if PyJsStrictNeq(var.get('size',throw=False).typeof(),Js('number')):
                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Argument must be a number')))
                raise PyJsTempException
            return var.get('Buffer')(var.get('size'))
        PyJs_anonymous_2390_._set_name('anonymous')
        var.get('SafeBuffer').put('allocUnsafe', PyJs_anonymous_2390_)
        @Js
        def PyJs_anonymous_2391_(size, this, arguments, var=var):
            var = Scope({'size':size, 'this':this, 'arguments':arguments}, var)
            var.registers(['size'])
            if PyJsStrictNeq(var.get('size',throw=False).typeof(),Js('number')):
                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Argument must be a number')))
                raise PyJsTempException
            return var.get('buffer').callprop('SlowBuffer', var.get('size'))
        PyJs_anonymous_2391_._set_name('anonymous')
        var.get('SafeBuffer').put('allocUnsafeSlow', PyJs_anonymous_2391_)
    PyJs_anonymous_2387_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2392_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'inherits', 'Stream', 'require', 'EE'])
        @Js
        def PyJsHoisted_Stream_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('EE').callprop('call', var.get(u"this"))
        PyJsHoisted_Stream_.func_name = 'Stream'
        var.put('Stream', PyJsHoisted_Stream_)
        var.get('module').put('exports', var.get('Stream'))
        var.put('EE', var.get('require')(Js('events')).get('EventEmitter'))
        var.put('inherits', var.get('require')(Js('inherits')))
        var.get('inherits')(var.get('Stream'), var.get('EE'))
        var.get('Stream').put('Readable', var.get('require')(Js('readable-stream/lib/_stream_readable.js')))
        var.get('Stream').put('Writable', var.get('require')(Js('readable-stream/lib/_stream_writable.js')))
        var.get('Stream').put('Duplex', var.get('require')(Js('readable-stream/lib/_stream_duplex.js')))
        var.get('Stream').put('Transform', var.get('require')(Js('readable-stream/lib/_stream_transform.js')))
        var.get('Stream').put('PassThrough', var.get('require')(Js('readable-stream/lib/_stream_passthrough.js')))
        var.get('Stream').put('finished', var.get('require')(Js('readable-stream/lib/internal/streams/end-of-stream.js')))
        var.get('Stream').put('pipeline', var.get('require')(Js('readable-stream/lib/internal/streams/pipeline.js')))
        var.get('Stream').put('Stream', var.get('Stream'))
        pass
        @Js
        def PyJs_anonymous_2393_(dest, options, this, arguments, var=var):
            var = Scope({'dest':dest, 'options':options, 'this':this, 'arguments':arguments}, var)
            var.registers(['onclose', 'source', 'ondrain', 'ondata', 'options', 'onerror', 'cleanup', 'didOnEnd', 'onend', 'dest'])
            @Js
            def PyJsHoisted_ondata_(chunk, this, arguments, var=var):
                var = Scope({'chunk':chunk, 'this':this, 'arguments':arguments}, var)
                var.registers(['chunk'])
                if var.get('dest').get('writable'):
                    if (PyJsStrictEq(Js(False),var.get('dest').callprop('write', var.get('chunk'))) and var.get('source').get('pause')):
                        var.get('source').callprop('pause')
            PyJsHoisted_ondata_.func_name = 'ondata'
            var.put('ondata', PyJsHoisted_ondata_)
            @Js
            def PyJsHoisted_ondrain_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                if (var.get('source').get('readable') and var.get('source').get('resume')):
                    var.get('source').callprop('resume')
            PyJsHoisted_ondrain_.func_name = 'ondrain'
            var.put('ondrain', PyJsHoisted_ondrain_)
            @Js
            def PyJsHoisted_onend_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                if var.get('didOnEnd'):
                    return var.get('undefined')
                var.put('didOnEnd', Js(True))
                var.get('dest').callprop('end')
            PyJsHoisted_onend_.func_name = 'onend'
            var.put('onend', PyJsHoisted_onend_)
            @Js
            def PyJsHoisted_onclose_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                if var.get('didOnEnd'):
                    return var.get('undefined')
                var.put('didOnEnd', Js(True))
                if PyJsStrictEq(var.get('dest').get('destroy').typeof(),Js('function')):
                    var.get('dest').callprop('destroy')
            PyJsHoisted_onclose_.func_name = 'onclose'
            var.put('onclose', PyJsHoisted_onclose_)
            @Js
            def PyJsHoisted_onerror_(er, this, arguments, var=var):
                var = Scope({'er':er, 'this':this, 'arguments':arguments}, var)
                var.registers(['er'])
                var.get('cleanup')()
                if PyJsStrictEq(var.get('EE').callprop('listenerCount', var.get(u"this"), Js('error')),Js(0.0)):
                    PyJsTempException = JsToPyException(var.get('er'))
                    raise PyJsTempException
            PyJsHoisted_onerror_.func_name = 'onerror'
            var.put('onerror', PyJsHoisted_onerror_)
            @Js
            def PyJsHoisted_cleanup_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('source').callprop('removeListener', Js('data'), var.get('ondata'))
                var.get('dest').callprop('removeListener', Js('drain'), var.get('ondrain'))
                var.get('source').callprop('removeListener', Js('end'), var.get('onend'))
                var.get('source').callprop('removeListener', Js('close'), var.get('onclose'))
                var.get('source').callprop('removeListener', Js('error'), var.get('onerror'))
                var.get('dest').callprop('removeListener', Js('error'), var.get('onerror'))
                var.get('source').callprop('removeListener', Js('end'), var.get('cleanup'))
                var.get('source').callprop('removeListener', Js('close'), var.get('cleanup'))
                var.get('dest').callprop('removeListener', Js('close'), var.get('cleanup'))
            PyJsHoisted_cleanup_.func_name = 'cleanup'
            var.put('cleanup', PyJsHoisted_cleanup_)
            var.put('source', var.get(u"this"))
            pass
            var.get('source').callprop('on', Js('data'), var.get('ondata'))
            pass
            var.get('dest').callprop('on', Js('drain'), var.get('ondrain'))
            if (var.get('dest').get('_isStdio').neg() and (var.get('options').neg() or PyJsStrictNeq(var.get('options').get('end'),Js(False)))):
                var.get('source').callprop('on', Js('end'), var.get('onend'))
                var.get('source').callprop('on', Js('close'), var.get('onclose'))
            var.put('didOnEnd', Js(False))
            pass
            pass
            pass
            var.get('source').callprop('on', Js('error'), var.get('onerror'))
            var.get('dest').callprop('on', Js('error'), var.get('onerror'))
            pass
            var.get('source').callprop('on', Js('end'), var.get('cleanup'))
            var.get('source').callprop('on', Js('close'), var.get('cleanup'))
            var.get('dest').callprop('on', Js('close'), var.get('cleanup'))
            var.get('dest').callprop('emit', Js('pipe'), var.get('source'))
            return var.get('dest')
        PyJs_anonymous_2393_._set_name('anonymous')
        var.get('Stream').get('prototype').put('pipe', PyJs_anonymous_2393_)
    PyJs_anonymous_2392_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2394_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['startsWith', 'module', '_inheritsLoose', 'exports', 'includes', 'oneOf', 'createErrorType', 'require', 'codes', 'endsWith'])
        @Js
        def PyJsHoisted__inheritsLoose_(subClass, superClass, this, arguments, var=var):
            var = Scope({'subClass':subClass, 'superClass':superClass, 'this':this, 'arguments':arguments}, var)
            var.registers(['subClass', 'superClass'])
            var.get('subClass').put('prototype', var.get('Object').callprop('create', var.get('superClass').get('prototype')))
            var.get('subClass').get('prototype').put('constructor', var.get('subClass'))
            var.get('subClass').put('__proto__', var.get('superClass'))
        PyJsHoisted__inheritsLoose_.func_name = '_inheritsLoose'
        var.put('_inheritsLoose', PyJsHoisted__inheritsLoose_)
        @Js
        def PyJsHoisted_createErrorType_(code, message, Base, this, arguments, var=var):
            var = Scope({'code':code, 'message':message, 'Base':Base, 'this':this, 'arguments':arguments}, var)
            var.registers(['NodeError', 'Base', 'code', 'message', 'getMessage'])
            @Js
            def PyJsHoisted_getMessage_(arg1, arg2, arg3, this, arguments, var=var):
                var = Scope({'arg1':arg1, 'arg2':arg2, 'arg3':arg3, 'this':this, 'arguments':arguments}, var)
                var.registers(['arg2', 'arg1', 'arg3'])
                if PyJsStrictEq(var.get('message',throw=False).typeof(),Js('string')):
                    return var.get('message')
                else:
                    return var.get('message')(var.get('arg1'), var.get('arg2'), var.get('arg3'))
            PyJsHoisted_getMessage_.func_name = 'getMessage'
            var.put('getMessage', PyJsHoisted_getMessage_)
            if var.get('Base').neg():
                var.put('Base', var.get('Error'))
            pass
            @Js
            def PyJs_anonymous_2395_(_Base, this, arguments, var=var):
                var = Scope({'_Base':_Base, 'this':this, 'arguments':arguments}, var)
                var.registers(['NodeError', '_Base'])
                @Js
                def PyJsHoisted_NodeError_(arg1, arg2, arg3, this, arguments, var=var):
                    var = Scope({'arg1':arg1, 'arg2':arg2, 'arg3':arg3, 'this':this, 'arguments':arguments}, var)
                    var.registers(['arg2', 'arg1', 'arg3'])
                    return (var.get('_Base').callprop('call', var.get(u"this"), var.get('getMessage')(var.get('arg1'), var.get('arg2'), var.get('arg3'))) or var.get(u"this"))
                PyJsHoisted_NodeError_.func_name = 'NodeError'
                var.put('NodeError', PyJsHoisted_NodeError_)
                var.get('_inheritsLoose')(var.get('NodeError'), var.get('_Base'))
                pass
                return var.get('NodeError')
            PyJs_anonymous_2395_._set_name('anonymous')
            var.put('NodeError', PyJs_anonymous_2395_(var.get('Base')))
            var.get('NodeError').get('prototype').put('name', var.get('Base').get('name'))
            var.get('NodeError').get('prototype').put('code', var.get('code'))
            var.get('codes').put(var.get('code'), var.get('NodeError'))
        PyJsHoisted_createErrorType_.func_name = 'createErrorType'
        var.put('createErrorType', PyJsHoisted_createErrorType_)
        @Js
        def PyJsHoisted_oneOf_(expected, thing, this, arguments, var=var):
            var = Scope({'expected':expected, 'thing':thing, 'this':this, 'arguments':arguments}, var)
            var.registers(['len', 'thing', 'expected'])
            if var.get('Array').callprop('isArray', var.get('expected')):
                var.put('len', var.get('expected').get('length'))
                @Js
                def PyJs_anonymous_2396_(i, this, arguments, var=var):
                    var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                    var.registers(['i'])
                    return var.get('String')(var.get('i'))
                PyJs_anonymous_2396_._set_name('anonymous')
                var.put('expected', var.get('expected').callprop('map', PyJs_anonymous_2396_))
                if (var.get('len')>Js(2.0)):
                    return (Js('one of ').callprop('concat', var.get('thing'), Js(' ')).callprop('concat', var.get('expected').callprop('slice', Js(0.0), (var.get('len')-Js(1.0))).callprop('join', Js(', ')), Js(', or '))+var.get('expected').get((var.get('len')-Js(1.0))))
                else:
                    if PyJsStrictEq(var.get('len'),Js(2.0)):
                        return Js('one of ').callprop('concat', var.get('thing'), Js(' ')).callprop('concat', var.get('expected').get('0'), Js(' or ')).callprop('concat', var.get('expected').get('1'))
                    else:
                        return Js('of ').callprop('concat', var.get('thing'), Js(' ')).callprop('concat', var.get('expected').get('0'))
            else:
                return Js('of ').callprop('concat', var.get('thing'), Js(' ')).callprop('concat', var.get('String')(var.get('expected')))
        PyJsHoisted_oneOf_.func_name = 'oneOf'
        var.put('oneOf', PyJsHoisted_oneOf_)
        @Js
        def PyJsHoisted_startsWith_(str, search, pos, this, arguments, var=var):
            var = Scope({'str':str, 'search':search, 'pos':pos, 'this':this, 'arguments':arguments}, var)
            var.registers(['str', 'search', 'pos'])
            return PyJsStrictEq(var.get('str').callprop('substr', (Js(0.0) if (var.get('pos').neg() or (var.get('pos')<Js(0.0))) else (+var.get('pos'))), var.get('search').get('length')),var.get('search'))
        PyJsHoisted_startsWith_.func_name = 'startsWith'
        var.put('startsWith', PyJsHoisted_startsWith_)
        @Js
        def PyJsHoisted_endsWith_(str, search, this_len, this, arguments, var=var):
            var = Scope({'str':str, 'search':search, 'this_len':this_len, 'this':this, 'arguments':arguments}, var)
            var.registers(['str', 'this_len', 'search'])
            if (PyJsStrictEq(var.get('this_len'),var.get('undefined')) or (var.get('this_len')>var.get('str').get('length'))):
                var.put('this_len', var.get('str').get('length'))
            return PyJsStrictEq(var.get('str').callprop('substring', (var.get('this_len')-var.get('search').get('length')), var.get('this_len')),var.get('search'))
        PyJsHoisted_endsWith_.func_name = 'endsWith'
        var.put('endsWith', PyJsHoisted_endsWith_)
        @Js
        def PyJsHoisted_includes_(str, search, start, this, arguments, var=var):
            var = Scope({'str':str, 'search':search, 'start':start, 'this':this, 'arguments':arguments}, var)
            var.registers(['str', 'search', 'start'])
            if PyJsStrictNeq(var.get('start',throw=False).typeof(),Js('number')):
                var.put('start', Js(0.0))
            if ((var.get('start')+var.get('search').get('length'))>var.get('str').get('length')):
                return Js(False)
            else:
                return PyJsStrictNeq(var.get('str').callprop('indexOf', var.get('search'), var.get('start')),(-Js(1.0)))
        PyJsHoisted_includes_.func_name = 'includes'
        var.put('includes', PyJsHoisted_includes_)
        Js('use strict')
        pass
        var.put('codes', Js({}))
        pass
        pass
        pass
        pass
        pass
        @Js
        def PyJs_anonymous_2397_(name, value, this, arguments, var=var):
            var = Scope({'name':name, 'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['name', 'value'])
            return ((((Js('The value "')+var.get('value'))+Js('" is invalid for option "'))+var.get('name'))+Js('"'))
        PyJs_anonymous_2397_._set_name('anonymous')
        var.get('createErrorType')(Js('ERR_INVALID_OPT_VALUE'), PyJs_anonymous_2397_, var.get('TypeError'))
        @Js
        def PyJs_anonymous_2398_(name, expected, actual, this, arguments, var=var):
            var = Scope({'name':name, 'expected':expected, 'actual':actual, 'this':this, 'arguments':arguments}, var)
            var.registers(['determiner', 'expected', 'name', 'type', 'actual', 'msg'])
            pass
            if (PyJsStrictEq(var.get('expected',throw=False).typeof(),Js('string')) and var.get('startsWith')(var.get('expected'), Js('not '))):
                var.put('determiner', Js('must not be'))
                var.put('expected', var.get('expected').callprop('replace', JsRegExp('/^not /'), Js('')))
            else:
                var.put('determiner', Js('must be'))
            pass
            if var.get('endsWith')(var.get('name'), Js(' argument')):
                var.put('msg', Js('The ').callprop('concat', var.get('name'), Js(' ')).callprop('concat', var.get('determiner'), Js(' ')).callprop('concat', var.get('oneOf')(var.get('expected'), Js('type'))))
            else:
                var.put('type', (Js('property') if var.get('includes')(var.get('name'), Js('.')) else Js('argument')))
                var.put('msg', Js('The "').callprop('concat', var.get('name'), Js('" ')).callprop('concat', var.get('type'), Js(' ')).callprop('concat', var.get('determiner'), Js(' ')).callprop('concat', var.get('oneOf')(var.get('expected'), Js('type'))))
            var.put('msg', Js('. Received type ').callprop('concat', (Js('undefined') if PyJsStrictEq(var.get('actual',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('actual')))), '+')
            return var.get('msg')
        PyJs_anonymous_2398_._set_name('anonymous')
        var.get('createErrorType')(Js('ERR_INVALID_ARG_TYPE'), PyJs_anonymous_2398_, var.get('TypeError'))
        var.get('createErrorType')(Js('ERR_STREAM_PUSH_AFTER_EOF'), Js('stream.push() after EOF'))
        @Js
        def PyJs_anonymous_2399_(name, this, arguments, var=var):
            var = Scope({'name':name, 'this':this, 'arguments':arguments}, var)
            var.registers(['name'])
            return ((Js('The ')+var.get('name'))+Js(' method is not implemented'))
        PyJs_anonymous_2399_._set_name('anonymous')
        var.get('createErrorType')(Js('ERR_METHOD_NOT_IMPLEMENTED'), PyJs_anonymous_2399_)
        var.get('createErrorType')(Js('ERR_STREAM_PREMATURE_CLOSE'), Js('Premature close'))
        @Js
        def PyJs_anonymous_2400_(name, this, arguments, var=var):
            var = Scope({'name':name, 'this':this, 'arguments':arguments}, var)
            var.registers(['name'])
            return ((Js('Cannot call ')+var.get('name'))+Js(' after a stream was destroyed'))
        PyJs_anonymous_2400_._set_name('anonymous')
        var.get('createErrorType')(Js('ERR_STREAM_DESTROYED'), PyJs_anonymous_2400_)
        var.get('createErrorType')(Js('ERR_MULTIPLE_CALLBACK'), Js('Callback called multiple times'))
        var.get('createErrorType')(Js('ERR_STREAM_CANNOT_PIPE'), Js('Cannot pipe, not readable'))
        var.get('createErrorType')(Js('ERR_STREAM_WRITE_AFTER_END'), Js('write after end'))
        var.get('createErrorType')(Js('ERR_STREAM_NULL_VALUES'), Js('May not write null values to stream'), var.get('TypeError'))
        @Js
        def PyJs_anonymous_2401_(arg, this, arguments, var=var):
            var = Scope({'arg':arg, 'this':this, 'arguments':arguments}, var)
            var.registers(['arg'])
            return (Js('Unknown encoding: ')+var.get('arg'))
        PyJs_anonymous_2401_._set_name('anonymous')
        var.get('createErrorType')(Js('ERR_UNKNOWN_ENCODING'), PyJs_anonymous_2401_, var.get('TypeError'))
        var.get('createErrorType')(Js('ERR_STREAM_UNSHIFT_AFTER_END_EVENT'), Js('stream.unshift() after end event'))
        var.get('module').get('exports').put('codes', var.get('codes'))
    PyJs_anonymous_2394_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2402_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_2403_(process, this, arguments, var=var):
            var = Scope({'process':process, 'this':this, 'arguments':arguments}, var)
            var.registers(['process'])
            @Js
            def PyJs_anonymous_2404_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['Duplex', 'Readable', 'onEndNT', 'Writable', 'v', 'method', 'onend', 'keys', 'objectKeys'])
                @Js
                def PyJsHoisted_Duplex_(options, this, arguments, var=var):
                    var = Scope({'options':options, 'this':this, 'arguments':arguments}, var)
                    var.registers(['options'])
                    if var.get(u"this").instanceof(var.get('Duplex')).neg():
                        return var.get('Duplex').create(var.get('options'))
                    var.get('Readable').callprop('call', var.get(u"this"), var.get('options'))
                    var.get('Writable').callprop('call', var.get(u"this"), var.get('options'))
                    var.get(u"this").put('allowHalfOpen', Js(True))
                    if var.get('options'):
                        if PyJsStrictEq(var.get('options').get('readable'),Js(False)):
                            var.get(u"this").put('readable', Js(False))
                        if PyJsStrictEq(var.get('options').get('writable'),Js(False)):
                            var.get(u"this").put('writable', Js(False))
                        if PyJsStrictEq(var.get('options').get('allowHalfOpen'),Js(False)):
                            var.get(u"this").put('allowHalfOpen', Js(False))
                            var.get(u"this").callprop('once', Js('end'), var.get('onend'))
                PyJsHoisted_Duplex_.func_name = 'Duplex'
                var.put('Duplex', PyJsHoisted_Duplex_)
                @Js
                def PyJsHoisted_onend_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    if var.get(u"this").get('_writableState').get('ended'):
                        return var.get('undefined')
                    var.get('process').callprop('nextTick', var.get('onEndNT'), var.get(u"this"))
                PyJsHoisted_onend_.func_name = 'onend'
                var.put('onend', PyJsHoisted_onend_)
                @Js
                def PyJsHoisted_onEndNT_(self, this, arguments, var=var):
                    var = Scope({'self':self, 'this':this, 'arguments':arguments}, var)
                    var.registers(['self'])
                    var.get('self').callprop('end')
                PyJsHoisted_onEndNT_.func_name = 'onEndNT'
                var.put('onEndNT', PyJsHoisted_onEndNT_)
                Js('use strict')
                @Js
                def PyJs_anonymous_2405_(obj, this, arguments, var=var):
                    var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
                    var.registers(['key', 'keys', 'obj'])
                    var.put('keys', Js([]))
                    for PyJsTemp in var.get('obj'):
                        var.put('key', PyJsTemp)
                        var.get('keys').callprop('push', var.get('key'))
                    return var.get('keys')
                PyJs_anonymous_2405_._set_name('anonymous')
                var.put('objectKeys', (var.get('Object').get('keys') or PyJs_anonymous_2405_))
                var.get('module').put('exports', var.get('Duplex'))
                var.put('Readable', var.get('require')(Js('./_stream_readable')))
                var.put('Writable', var.get('require')(Js('./_stream_writable')))
                var.get('require')(Js('inherits'))(var.get('Duplex'), var.get('Readable'))
                var.put('keys', var.get('objectKeys')(var.get('Writable').get('prototype')))
                #for JS loop
                var.put('v', Js(0.0))
                while (var.get('v')<var.get('keys').get('length')):
                    try:
                        var.put('method', var.get('keys').get(var.get('v')))
                        if var.get('Duplex').get('prototype').get(var.get('method')).neg():
                            var.get('Duplex').get('prototype').put(var.get('method'), var.get('Writable').get('prototype').get(var.get('method')))
                    finally:
                            (var.put('v',Js(var.get('v').to_number())+Js(1))-Js(1))
                pass
                @Js
                def PyJs_get_2406_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2406_}, var)
                    var.registers([])
                    return var.get(u"this").get('_writableState').get('highWaterMark')
                PyJs_get_2406_._set_name('get')
                var.get('Object').callprop('defineProperty', var.get('Duplex').get('prototype'), Js('writableHighWaterMark'), Js({'enumerable':Js(False),'get':PyJs_get_2406_}))
                @Js
                def PyJs_get_2407_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2407_}, var)
                    var.registers([])
                    return (var.get(u"this").get('_writableState') and var.get(u"this").get('_writableState').callprop('getBuffer'))
                PyJs_get_2407_._set_name('get')
                var.get('Object').callprop('defineProperty', var.get('Duplex').get('prototype'), Js('writableBuffer'), Js({'enumerable':Js(False),'get':PyJs_get_2407_}))
                @Js
                def PyJs_get_2408_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2408_}, var)
                    var.registers([])
                    return var.get(u"this").get('_writableState').get('length')
                PyJs_get_2408_._set_name('get')
                var.get('Object').callprop('defineProperty', var.get('Duplex').get('prototype'), Js('writableLength'), Js({'enumerable':Js(False),'get':PyJs_get_2408_}))
                pass
                pass
                @Js
                def PyJs_get_2409_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2409_}, var)
                    var.registers([])
                    if (PyJsStrictEq(var.get(u"this").get('_readableState'),var.get('undefined')) or PyJsStrictEq(var.get(u"this").get('_writableState'),var.get('undefined'))):
                        return Js(False)
                    return (var.get(u"this").get('_readableState').get('destroyed') and var.get(u"this").get('_writableState').get('destroyed'))
                PyJs_get_2409_._set_name('get')
                @Js
                def PyJs_set_2410_(value, this, arguments, var=var):
                    var = Scope({'value':value, 'this':this, 'arguments':arguments, 'set':PyJs_set_2410_}, var)
                    var.registers(['value'])
                    if (PyJsStrictEq(var.get(u"this").get('_readableState'),var.get('undefined')) or PyJsStrictEq(var.get(u"this").get('_writableState'),var.get('undefined'))):
                        return var.get('undefined')
                    var.get(u"this").get('_readableState').put('destroyed', var.get('value'))
                    var.get(u"this").get('_writableState').put('destroyed', var.get('value'))
                PyJs_set_2410_._set_name('set')
                var.get('Object').callprop('defineProperty', var.get('Duplex').get('prototype'), Js('destroyed'), Js({'enumerable':Js(False),'get':PyJs_get_2409_,'set':PyJs_set_2410_}))
            PyJs_anonymous_2404_._set_name('anonymous')
            PyJs_anonymous_2404_.callprop('call', var.get(u"this"))
        PyJs_anonymous_2403_._set_name('anonymous')
        PyJs_anonymous_2403_.callprop('call', var.get(u"this"), var.get('require')(Js('_process')))
    PyJs_anonymous_2402_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2411_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'require', 'PassThrough', 'Transform'])
        @Js
        def PyJsHoisted_PassThrough_(options, this, arguments, var=var):
            var = Scope({'options':options, 'this':this, 'arguments':arguments}, var)
            var.registers(['options'])
            if var.get(u"this").instanceof(var.get('PassThrough')).neg():
                return var.get('PassThrough').create(var.get('options'))
            var.get('Transform').callprop('call', var.get(u"this"), var.get('options'))
        PyJsHoisted_PassThrough_.func_name = 'PassThrough'
        var.put('PassThrough', PyJsHoisted_PassThrough_)
        Js('use strict')
        var.get('module').put('exports', var.get('PassThrough'))
        var.put('Transform', var.get('require')(Js('./_stream_transform')))
        var.get('require')(Js('inherits'))(var.get('PassThrough'), var.get('Transform'))
        pass
        @Js
        def PyJs_anonymous_2412_(chunk, encoding, cb, this, arguments, var=var):
            var = Scope({'chunk':chunk, 'encoding':encoding, 'cb':cb, 'this':this, 'arguments':arguments}, var)
            var.registers(['encoding', 'cb', 'chunk'])
            var.get('cb')(var.get(u"null"), var.get('chunk'))
        PyJs_anonymous_2412_._set_name('anonymous')
        var.get('PassThrough').get('prototype').put('_transform', PyJs_anonymous_2412_)
    PyJs_anonymous_2411_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2413_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_2414_(process, PyJsArg_676c6f62616c_, this, arguments, var=var):
            var = Scope({'process':process, 'global':PyJsArg_676c6f62616c_, 'this':this, 'arguments':arguments}, var)
            var.registers(['global', 'process'])
            @Js
            def PyJs_anonymous_2415_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['OurUint8Array', 'indexOf', 'createReadableStreamAsyncIterator', 'ERR_INVALID_ARG_TYPE', 'fromList', 'computeNewHighWaterMark', 'resume_', 'destroyImpl', 'Buffer', 'EE', 'emitReadable', 'Duplex', 'debugUtil', 'pipeOnDrain', 'endReadableNT', 'readableAddChunk', 'flow', 'Stream', '_require$codes', 'prependListener', 'ERR_METHOD_NOT_IMPLEMENTED', 'kProxyEvents', 'errorOrDestroy', '_uint8ArrayToBuffer', 'StringDecoder', 'Readable', 'resume', 'debug', 'MAX_HWM', 'endReadable', 'maybeReadMore', 'BufferList', 'addChunk', 'ReadableState', 'onEofChunk', 'maybeReadMore_', 'howMuchToRead', 'chunkInvalid', 'nReadingNextTick', '_isUint8Array', 'ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'getHighWaterMark', 'from', 'updateReadableListening', '_require', 'EElistenerCount', 'ERR_STREAM_PUSH_AFTER_EOF', 'emitReadable_'])
                @Js
                def PyJsHoisted__uint8ArrayToBuffer_(chunk, this, arguments, var=var):
                    var = Scope({'chunk':chunk, 'this':this, 'arguments':arguments}, var)
                    var.registers(['chunk'])
                    return var.get('Buffer').callprop('from', var.get('chunk'))
                PyJsHoisted__uint8ArrayToBuffer_.func_name = '_uint8ArrayToBuffer'
                var.put('_uint8ArrayToBuffer', PyJsHoisted__uint8ArrayToBuffer_)
                @Js
                def PyJsHoisted__isUint8Array_(obj, this, arguments, var=var):
                    var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
                    var.registers(['obj'])
                    return (var.get('Buffer').callprop('isBuffer', var.get('obj')) or var.get('obj').instanceof(var.get('OurUint8Array')))
                PyJsHoisted__isUint8Array_.func_name = '_isUint8Array'
                var.put('_isUint8Array', PyJsHoisted__isUint8Array_)
                @Js
                def PyJsHoisted_prependListener_(emitter, event, fn, this, arguments, var=var):
                    var = Scope({'emitter':emitter, 'event':event, 'fn':fn, 'this':this, 'arguments':arguments}, var)
                    var.registers(['emitter', 'event', 'fn'])
                    if PyJsStrictEq(var.get('emitter').get('prependListener').typeof(),Js('function')):
                        return var.get('emitter').callprop('prependListener', var.get('event'), var.get('fn'))
                    if (var.get('emitter').get('_events').neg() or var.get('emitter').get('_events').get(var.get('event')).neg()):
                        var.get('emitter').callprop('on', var.get('event'), var.get('fn'))
                    else:
                        if var.get('Array').callprop('isArray', var.get('emitter').get('_events').get(var.get('event'))):
                            var.get('emitter').get('_events').get(var.get('event')).callprop('unshift', var.get('fn'))
                        else:
                            var.get('emitter').get('_events').put(var.get('event'), Js([var.get('fn'), var.get('emitter').get('_events').get(var.get('event'))]))
                PyJsHoisted_prependListener_.func_name = 'prependListener'
                var.put('prependListener', PyJsHoisted_prependListener_)
                @Js
                def PyJsHoisted_ReadableState_(options, stream, isDuplex, this, arguments, var=var):
                    var = Scope({'options':options, 'stream':stream, 'isDuplex':isDuplex, 'this':this, 'arguments':arguments}, var)
                    var.registers(['options', 'isDuplex', 'stream'])
                    var.put('Duplex', (var.get('Duplex') or var.get('require')(Js('./_stream_duplex'))))
                    var.put('options', (var.get('options') or Js({})))
                    if PyJsStrictNeq(var.get('isDuplex',throw=False).typeof(),Js('boolean')):
                        var.put('isDuplex', var.get('stream').instanceof(var.get('Duplex')))
                    var.get(u"this").put('objectMode', var.get('options').get('objectMode').neg().neg())
                    if var.get('isDuplex'):
                        var.get(u"this").put('objectMode', (var.get(u"this").get('objectMode') or var.get('options').get('readableObjectMode').neg().neg()))
                    var.get(u"this").put('highWaterMark', var.get('getHighWaterMark')(var.get(u"this"), var.get('options'), Js('readableHighWaterMark'), var.get('isDuplex')))
                    var.get(u"this").put('buffer', var.get('BufferList').create())
                    var.get(u"this").put('length', Js(0.0))
                    var.get(u"this").put('pipes', var.get(u"null"))
                    var.get(u"this").put('pipesCount', Js(0.0))
                    var.get(u"this").put('flowing', var.get(u"null"))
                    var.get(u"this").put('ended', Js(False))
                    var.get(u"this").put('endEmitted', Js(False))
                    var.get(u"this").put('reading', Js(False))
                    var.get(u"this").put('sync', Js(True))
                    var.get(u"this").put('needReadable', Js(False))
                    var.get(u"this").put('emittedReadable', Js(False))
                    var.get(u"this").put('readableListening', Js(False))
                    var.get(u"this").put('resumeScheduled', Js(False))
                    var.get(u"this").put('paused', Js(True))
                    var.get(u"this").put('emitClose', PyJsStrictNeq(var.get('options').get('emitClose'),Js(False)))
                    var.get(u"this").put('autoDestroy', var.get('options').get('autoDestroy').neg().neg())
                    var.get(u"this").put('destroyed', Js(False))
                    var.get(u"this").put('defaultEncoding', (var.get('options').get('defaultEncoding') or Js('utf8')))
                    var.get(u"this").put('awaitDrain', Js(0.0))
                    var.get(u"this").put('readingMore', Js(False))
                    var.get(u"this").put('decoder', var.get(u"null"))
                    var.get(u"this").put('encoding', var.get(u"null"))
                    if var.get('options').get('encoding'):
                        if var.get('StringDecoder').neg():
                            var.put('StringDecoder', var.get('require')(Js('string_decoder/')).get('StringDecoder'))
                        var.get(u"this").put('decoder', var.get('StringDecoder').create(var.get('options').get('encoding')))
                        var.get(u"this").put('encoding', var.get('options').get('encoding'))
                PyJsHoisted_ReadableState_.func_name = 'ReadableState'
                var.put('ReadableState', PyJsHoisted_ReadableState_)
                @Js
                def PyJsHoisted_Readable_(options, this, arguments, var=var):
                    var = Scope({'options':options, 'this':this, 'arguments':arguments}, var)
                    var.registers(['options', 'isDuplex'])
                    var.put('Duplex', (var.get('Duplex') or var.get('require')(Js('./_stream_duplex'))))
                    if var.get(u"this").instanceof(var.get('Readable')).neg():
                        return var.get('Readable').create(var.get('options'))
                    var.put('isDuplex', var.get(u"this").instanceof(var.get('Duplex')))
                    var.get(u"this").put('_readableState', var.get('ReadableState').create(var.get('options'), var.get(u"this"), var.get('isDuplex')))
                    var.get(u"this").put('readable', Js(True))
                    if var.get('options'):
                        if PyJsStrictEq(var.get('options').get('read').typeof(),Js('function')):
                            var.get(u"this").put('_read', var.get('options').get('read'))
                        if PyJsStrictEq(var.get('options').get('destroy').typeof(),Js('function')):
                            var.get(u"this").put('_destroy', var.get('options').get('destroy'))
                    var.get('Stream').callprop('call', var.get(u"this"))
                PyJsHoisted_Readable_.func_name = 'Readable'
                var.put('Readable', PyJsHoisted_Readable_)
                @Js
                def PyJsHoisted_readableAddChunk_(stream, chunk, encoding, addToFront, skipChunkCheck, this, arguments, var=var):
                    var = Scope({'stream':stream, 'chunk':chunk, 'encoding':encoding, 'addToFront':addToFront, 'skipChunkCheck':skipChunkCheck, 'this':this, 'arguments':arguments}, var)
                    var.registers(['addToFront', 'er', 'state', 'encoding', 'skipChunkCheck', 'stream', 'chunk'])
                    var.get('debug')(Js('readableAddChunk'), var.get('chunk'))
                    var.put('state', var.get('stream').get('_readableState'))
                    if PyJsStrictEq(var.get('chunk'),var.get(u"null")):
                        var.get('state').put('reading', Js(False))
                        var.get('onEofChunk')(var.get('stream'), var.get('state'))
                    else:
                        pass
                        if var.get('skipChunkCheck').neg():
                            var.put('er', var.get('chunkInvalid')(var.get('state'), var.get('chunk')))
                        if var.get('er'):
                            var.get('errorOrDestroy')(var.get('stream'), var.get('er'))
                        else:
                            if (var.get('state').get('objectMode') or (var.get('chunk') and (var.get('chunk').get('length')>Js(0.0)))):
                                if ((PyJsStrictNeq(var.get('chunk',throw=False).typeof(),Js('string')) and var.get('state').get('objectMode').neg()) and PyJsStrictNeq(var.get('Object').callprop('getPrototypeOf', var.get('chunk')),var.get('Buffer').get('prototype'))):
                                    var.put('chunk', var.get('_uint8ArrayToBuffer')(var.get('chunk')))
                                if var.get('addToFront'):
                                    if var.get('state').get('endEmitted'):
                                        var.get('errorOrDestroy')(var.get('stream'), var.get('ERR_STREAM_UNSHIFT_AFTER_END_EVENT').create())
                                    else:
                                        var.get('addChunk')(var.get('stream'), var.get('state'), var.get('chunk'), Js(True))
                                else:
                                    if var.get('state').get('ended'):
                                        var.get('errorOrDestroy')(var.get('stream'), var.get('ERR_STREAM_PUSH_AFTER_EOF').create())
                                    else:
                                        if var.get('state').get('destroyed'):
                                            return Js(False)
                                        else:
                                            var.get('state').put('reading', Js(False))
                                            if (var.get('state').get('decoder') and var.get('encoding').neg()):
                                                var.put('chunk', var.get('state').get('decoder').callprop('write', var.get('chunk')))
                                                if (var.get('state').get('objectMode') or PyJsStrictNeq(var.get('chunk').get('length'),Js(0.0))):
                                                    var.get('addChunk')(var.get('stream'), var.get('state'), var.get('chunk'), Js(False))
                                                else:
                                                    var.get('maybeReadMore')(var.get('stream'), var.get('state'))
                                            else:
                                                var.get('addChunk')(var.get('stream'), var.get('state'), var.get('chunk'), Js(False))
                            else:
                                if var.get('addToFront').neg():
                                    var.get('state').put('reading', Js(False))
                                    var.get('maybeReadMore')(var.get('stream'), var.get('state'))
                    return (var.get('state').get('ended').neg() and ((var.get('state').get('length')<var.get('state').get('highWaterMark')) or PyJsStrictEq(var.get('state').get('length'),Js(0.0))))
                PyJsHoisted_readableAddChunk_.func_name = 'readableAddChunk'
                var.put('readableAddChunk', PyJsHoisted_readableAddChunk_)
                @Js
                def PyJsHoisted_addChunk_(stream, state, chunk, addToFront, this, arguments, var=var):
                    var = Scope({'stream':stream, 'state':state, 'chunk':chunk, 'addToFront':addToFront, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state', 'addToFront', 'stream', 'chunk'])
                    if ((var.get('state').get('flowing') and PyJsStrictEq(var.get('state').get('length'),Js(0.0))) and var.get('state').get('sync').neg()):
                        var.get('state').put('awaitDrain', Js(0.0))
                        var.get('stream').callprop('emit', Js('data'), var.get('chunk'))
                    else:
                        var.get('state').put('length', (Js(1.0) if var.get('state').get('objectMode') else var.get('chunk').get('length')), '+')
                        if var.get('addToFront'):
                            var.get('state').get('buffer').callprop('unshift', var.get('chunk'))
                        else:
                            var.get('state').get('buffer').callprop('push', var.get('chunk'))
                        if var.get('state').get('needReadable'):
                            var.get('emitReadable')(var.get('stream'))
                    var.get('maybeReadMore')(var.get('stream'), var.get('state'))
                PyJsHoisted_addChunk_.func_name = 'addChunk'
                var.put('addChunk', PyJsHoisted_addChunk_)
                @Js
                def PyJsHoisted_chunkInvalid_(state, chunk, this, arguments, var=var):
                    var = Scope({'state':state, 'chunk':chunk, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state', 'er', 'chunk'])
                    pass
                    if (((var.get('_isUint8Array')(var.get('chunk')).neg() and PyJsStrictNeq(var.get('chunk',throw=False).typeof(),Js('string'))) and PyJsStrictNeq(var.get('chunk'),var.get('undefined'))) and var.get('state').get('objectMode').neg()):
                        var.put('er', var.get('ERR_INVALID_ARG_TYPE').create(Js('chunk'), Js([Js('string'), Js('Buffer'), Js('Uint8Array')]), var.get('chunk')))
                    return var.get('er')
                PyJsHoisted_chunkInvalid_.func_name = 'chunkInvalid'
                var.put('chunkInvalid', PyJsHoisted_chunkInvalid_)
                @Js
                def PyJsHoisted_computeNewHighWaterMark_(n, this, arguments, var=var):
                    var = Scope({'n':n, 'this':this, 'arguments':arguments}, var)
                    var.registers(['n'])
                    if (var.get('n')>=var.get('MAX_HWM')):
                        var.put('n', var.get('MAX_HWM'))
                    else:
                        (var.put('n',Js(var.get('n').to_number())-Js(1))+Js(1))
                        var.put('n', PyJsBshift(var.get('n'),Js(1.0)), '|')
                        var.put('n', PyJsBshift(var.get('n'),Js(2.0)), '|')
                        var.put('n', PyJsBshift(var.get('n'),Js(4.0)), '|')
                        var.put('n', PyJsBshift(var.get('n'),Js(8.0)), '|')
                        var.put('n', PyJsBshift(var.get('n'),Js(16.0)), '|')
                        (var.put('n',Js(var.get('n').to_number())+Js(1))-Js(1))
                    return var.get('n')
                PyJsHoisted_computeNewHighWaterMark_.func_name = 'computeNewHighWaterMark'
                var.put('computeNewHighWaterMark', PyJsHoisted_computeNewHighWaterMark_)
                @Js
                def PyJsHoisted_howMuchToRead_(n, state, this, arguments, var=var):
                    var = Scope({'n':n, 'state':state, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state', 'n'])
                    if ((var.get('n')<=Js(0.0)) or (PyJsStrictEq(var.get('state').get('length'),Js(0.0)) and var.get('state').get('ended'))):
                        return Js(0.0)
                    if var.get('state').get('objectMode'):
                        return Js(1.0)
                    if PyJsStrictNeq(var.get('n'),var.get('n')):
                        if (var.get('state').get('flowing') and var.get('state').get('length')):
                            return var.get('state').get('buffer').get('head').get('data').get('length')
                        else:
                            return var.get('state').get('length')
                    if (var.get('n')>var.get('state').get('highWaterMark')):
                        var.get('state').put('highWaterMark', var.get('computeNewHighWaterMark')(var.get('n')))
                    if (var.get('n')<=var.get('state').get('length')):
                        return var.get('n')
                    if var.get('state').get('ended').neg():
                        var.get('state').put('needReadable', Js(True))
                        return Js(0.0)
                    return var.get('state').get('length')
                PyJsHoisted_howMuchToRead_.func_name = 'howMuchToRead'
                var.put('howMuchToRead', PyJsHoisted_howMuchToRead_)
                @Js
                def PyJsHoisted_onEofChunk_(stream, state, this, arguments, var=var):
                    var = Scope({'stream':stream, 'state':state, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state', 'stream', 'chunk'])
                    var.get('debug')(Js('onEofChunk'))
                    if var.get('state').get('ended'):
                        return var.get('undefined')
                    if var.get('state').get('decoder'):
                        var.put('chunk', var.get('state').get('decoder').callprop('end'))
                        if (var.get('chunk') and var.get('chunk').get('length')):
                            var.get('state').get('buffer').callprop('push', var.get('chunk'))
                            var.get('state').put('length', (Js(1.0) if var.get('state').get('objectMode') else var.get('chunk').get('length')), '+')
                    var.get('state').put('ended', Js(True))
                    if var.get('state').get('sync'):
                        var.get('emitReadable')(var.get('stream'))
                    else:
                        var.get('state').put('needReadable', Js(False))
                        if var.get('state').get('emittedReadable').neg():
                            var.get('state').put('emittedReadable', Js(True))
                            var.get('emitReadable_')(var.get('stream'))
                PyJsHoisted_onEofChunk_.func_name = 'onEofChunk'
                var.put('onEofChunk', PyJsHoisted_onEofChunk_)
                @Js
                def PyJsHoisted_emitReadable_(stream, this, arguments, var=var):
                    var = Scope({'stream':stream, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state', 'stream'])
                    var.put('state', var.get('stream').get('_readableState'))
                    var.get('debug')(Js('emitReadable'), var.get('state').get('needReadable'), var.get('state').get('emittedReadable'))
                    var.get('state').put('needReadable', Js(False))
                    if var.get('state').get('emittedReadable').neg():
                        var.get('debug')(Js('emitReadable'), var.get('state').get('flowing'))
                        var.get('state').put('emittedReadable', Js(True))
                        var.get('process').callprop('nextTick', var.get('emitReadable_'), var.get('stream'))
                PyJsHoisted_emitReadable_.func_name = 'emitReadable'
                var.put('emitReadable', PyJsHoisted_emitReadable_)
                @Js
                def PyJsHoisted_emitReadable__(stream, this, arguments, var=var):
                    var = Scope({'stream':stream, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state', 'stream'])
                    var.put('state', var.get('stream').get('_readableState'))
                    var.get('debug')(Js('emitReadable_'), var.get('state').get('destroyed'), var.get('state').get('length'), var.get('state').get('ended'))
                    if (var.get('state').get('destroyed').neg() and (var.get('state').get('length') or var.get('state').get('ended'))):
                        var.get('stream').callprop('emit', Js('readable'))
                        var.get('state').put('emittedReadable', Js(False))
                    var.get('state').put('needReadable', ((var.get('state').get('flowing').neg() and var.get('state').get('ended').neg()) and (var.get('state').get('length')<=var.get('state').get('highWaterMark'))))
                    var.get('flow')(var.get('stream'))
                PyJsHoisted_emitReadable__.func_name = 'emitReadable_'
                var.put('emitReadable_', PyJsHoisted_emitReadable__)
                @Js
                def PyJsHoisted_maybeReadMore_(stream, state, this, arguments, var=var):
                    var = Scope({'stream':stream, 'state':state, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state', 'stream'])
                    if var.get('state').get('readingMore').neg():
                        var.get('state').put('readingMore', Js(True))
                        var.get('process').callprop('nextTick', var.get('maybeReadMore_'), var.get('stream'), var.get('state'))
                PyJsHoisted_maybeReadMore_.func_name = 'maybeReadMore'
                var.put('maybeReadMore', PyJsHoisted_maybeReadMore_)
                @Js
                def PyJsHoisted_maybeReadMore__(stream, state, this, arguments, var=var):
                    var = Scope({'stream':stream, 'state':state, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state', 'len', 'stream'])
                    while ((var.get('state').get('reading').neg() and var.get('state').get('ended').neg()) and ((var.get('state').get('length')<var.get('state').get('highWaterMark')) or (var.get('state').get('flowing') and PyJsStrictEq(var.get('state').get('length'),Js(0.0))))):
                        var.put('len', var.get('state').get('length'))
                        var.get('debug')(Js('maybeReadMore read 0'))
                        var.get('stream').callprop('read', Js(0.0))
                        if PyJsStrictEq(var.get('len'),var.get('state').get('length')):
                            break
                    var.get('state').put('readingMore', Js(False))
                PyJsHoisted_maybeReadMore__.func_name = 'maybeReadMore_'
                var.put('maybeReadMore_', PyJsHoisted_maybeReadMore__)
                @Js
                def PyJsHoisted_pipeOnDrain_(src, this, arguments, var=var):
                    var = Scope({'src':src, 'this':this, 'arguments':arguments}, var)
                    var.registers(['src'])
                    @Js
                    def PyJs_pipeOnDrainFunctionResult_2429_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments, 'pipeOnDrainFunctionResult':PyJs_pipeOnDrainFunctionResult_2429_}, var)
                        var.registers(['state'])
                        var.put('state', var.get('src').get('_readableState'))
                        var.get('debug')(Js('pipeOnDrain'), var.get('state').get('awaitDrain'))
                        if var.get('state').get('awaitDrain'):
                            (var.get('state').put('awaitDrain',Js(var.get('state').get('awaitDrain').to_number())-Js(1))+Js(1))
                        if (PyJsStrictEq(var.get('state').get('awaitDrain'),Js(0.0)) and var.get('EElistenerCount')(var.get('src'), Js('data'))):
                            var.get('state').put('flowing', Js(True))
                            var.get('flow')(var.get('src'))
                    PyJs_pipeOnDrainFunctionResult_2429_._set_name('pipeOnDrainFunctionResult')
                    return PyJs_pipeOnDrainFunctionResult_2429_
                PyJsHoisted_pipeOnDrain_.func_name = 'pipeOnDrain'
                var.put('pipeOnDrain', PyJsHoisted_pipeOnDrain_)
                @Js
                def PyJsHoisted_updateReadableListening_(self, this, arguments, var=var):
                    var = Scope({'self':self, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state', 'self'])
                    var.put('state', var.get('self').get('_readableState'))
                    var.get('state').put('readableListening', (var.get('self').callprop('listenerCount', Js('readable'))>Js(0.0)))
                    if (var.get('state').get('resumeScheduled') and var.get('state').get('paused').neg()):
                        var.get('state').put('flowing', Js(True))
                    else:
                        if (var.get('self').callprop('listenerCount', Js('data'))>Js(0.0)):
                            var.get('self').callprop('resume')
                PyJsHoisted_updateReadableListening_.func_name = 'updateReadableListening'
                var.put('updateReadableListening', PyJsHoisted_updateReadableListening_)
                @Js
                def PyJsHoisted_nReadingNextTick_(self, this, arguments, var=var):
                    var = Scope({'self':self, 'this':this, 'arguments':arguments}, var)
                    var.registers(['self'])
                    var.get('debug')(Js('readable nexttick read 0'))
                    var.get('self').callprop('read', Js(0.0))
                PyJsHoisted_nReadingNextTick_.func_name = 'nReadingNextTick'
                var.put('nReadingNextTick', PyJsHoisted_nReadingNextTick_)
                @Js
                def PyJsHoisted_resume_(stream, state, this, arguments, var=var):
                    var = Scope({'stream':stream, 'state':state, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state', 'stream'])
                    if var.get('state').get('resumeScheduled').neg():
                        var.get('state').put('resumeScheduled', Js(True))
                        var.get('process').callprop('nextTick', var.get('resume_'), var.get('stream'), var.get('state'))
                PyJsHoisted_resume_.func_name = 'resume'
                var.put('resume', PyJsHoisted_resume_)
                @Js
                def PyJsHoisted_resume__(stream, state, this, arguments, var=var):
                    var = Scope({'stream':stream, 'state':state, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state', 'stream'])
                    var.get('debug')(Js('resume'), var.get('state').get('reading'))
                    if var.get('state').get('reading').neg():
                        var.get('stream').callprop('read', Js(0.0))
                    var.get('state').put('resumeScheduled', Js(False))
                    var.get('stream').callprop('emit', Js('resume'))
                    var.get('flow')(var.get('stream'))
                    if (var.get('state').get('flowing') and var.get('state').get('reading').neg()):
                        var.get('stream').callprop('read', Js(0.0))
                PyJsHoisted_resume__.func_name = 'resume_'
                var.put('resume_', PyJsHoisted_resume__)
                @Js
                def PyJsHoisted_flow_(stream, this, arguments, var=var):
                    var = Scope({'stream':stream, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state', 'stream'])
                    var.put('state', var.get('stream').get('_readableState'))
                    var.get('debug')(Js('flow'), var.get('state').get('flowing'))
                    while (var.get('state').get('flowing') and PyJsStrictNeq(var.get('stream').callprop('read'),var.get(u"null"))):
                        pass
                PyJsHoisted_flow_.func_name = 'flow'
                var.put('flow', PyJsHoisted_flow_)
                @Js
                def PyJsHoisted_fromList_(n, state, this, arguments, var=var):
                    var = Scope({'n':n, 'state':state, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state', 'n', 'ret'])
                    if PyJsStrictEq(var.get('state').get('length'),Js(0.0)):
                        return var.get(u"null")
                    pass
                    if var.get('state').get('objectMode'):
                        var.put('ret', var.get('state').get('buffer').callprop('shift'))
                    else:
                        if (var.get('n').neg() or (var.get('n')>=var.get('state').get('length'))):
                            if var.get('state').get('decoder'):
                                var.put('ret', var.get('state').get('buffer').callprop('join', Js('')))
                            else:
                                if PyJsStrictEq(var.get('state').get('buffer').get('length'),Js(1.0)):
                                    var.put('ret', var.get('state').get('buffer').callprop('first'))
                                else:
                                    var.put('ret', var.get('state').get('buffer').callprop('concat', var.get('state').get('length')))
                            var.get('state').get('buffer').callprop('clear')
                        else:
                            var.put('ret', var.get('state').get('buffer').callprop('consume', var.get('n'), var.get('state').get('decoder')))
                    return var.get('ret')
                PyJsHoisted_fromList_.func_name = 'fromList'
                var.put('fromList', PyJsHoisted_fromList_)
                @Js
                def PyJsHoisted_endReadable_(stream, this, arguments, var=var):
                    var = Scope({'stream':stream, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state', 'stream'])
                    var.put('state', var.get('stream').get('_readableState'))
                    var.get('debug')(Js('endReadable'), var.get('state').get('endEmitted'))
                    if var.get('state').get('endEmitted').neg():
                        var.get('state').put('ended', Js(True))
                        var.get('process').callprop('nextTick', var.get('endReadableNT'), var.get('state'), var.get('stream'))
                PyJsHoisted_endReadable_.func_name = 'endReadable'
                var.put('endReadable', PyJsHoisted_endReadable_)
                @Js
                def PyJsHoisted_endReadableNT_(state, stream, this, arguments, var=var):
                    var = Scope({'state':state, 'stream':stream, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state', 'wState', 'stream'])
                    var.get('debug')(Js('endReadableNT'), var.get('state').get('endEmitted'), var.get('state').get('length'))
                    if (var.get('state').get('endEmitted').neg() and PyJsStrictEq(var.get('state').get('length'),Js(0.0))):
                        var.get('state').put('endEmitted', Js(True))
                        var.get('stream').put('readable', Js(False))
                        var.get('stream').callprop('emit', Js('end'))
                        if var.get('state').get('autoDestroy'):
                            var.put('wState', var.get('stream').get('_writableState'))
                            if (var.get('wState').neg() or (var.get('wState').get('autoDestroy') and var.get('wState').get('finished'))):
                                var.get('stream').callprop('destroy')
                PyJsHoisted_endReadableNT_.func_name = 'endReadableNT'
                var.put('endReadableNT', PyJsHoisted_endReadableNT_)
                @Js
                def PyJsHoisted_indexOf_(xs, x, this, arguments, var=var):
                    var = Scope({'xs':xs, 'x':x, 'this':this, 'arguments':arguments}, var)
                    var.registers(['l', 'xs', 'x', 'i'])
                    #for JS loop
                    var.put('i', Js(0.0))
                    var.put('l', var.get('xs').get('length'))
                    while (var.get('i')<var.get('l')):
                        try:
                            if PyJsStrictEq(var.get('xs').get(var.get('i')),var.get('x')):
                                return var.get('i')
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    return (-Js(1.0))
                PyJsHoisted_indexOf_.func_name = 'indexOf'
                var.put('indexOf', PyJsHoisted_indexOf_)
                Js('use strict')
                var.get('module').put('exports', var.get('Readable'))
                pass
                var.get('Readable').put('ReadableState', var.get('ReadableState'))
                var.put('EE', var.get('require')(Js('events')).get('EventEmitter'))
                @Js
                def PyJs_EElistenerCount_2416_(emitter, type, this, arguments, var=var):
                    var = Scope({'emitter':emitter, 'type':type, 'this':this, 'arguments':arguments, 'EElistenerCount':PyJs_EElistenerCount_2416_}, var)
                    var.registers(['emitter', 'type'])
                    return var.get('emitter').callprop('listeners', var.get('type')).get('length')
                PyJs_EElistenerCount_2416_._set_name('EElistenerCount')
                var.put('EElistenerCount', PyJs_EElistenerCount_2416_)
                var.put('Stream', var.get('require')(Js('./internal/streams/stream')))
                var.put('Buffer', var.get('require')(Js('buffer')).get('Buffer'))
                @Js
                def PyJs_anonymous_2417_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    pass
                PyJs_anonymous_2417_._set_name('anonymous')
                var.put('OurUint8Array', (var.get('global').get('Uint8Array') or PyJs_anonymous_2417_))
                pass
                pass
                var.put('debugUtil', var.get('require')(Js('util')))
                pass
                if (var.get('debugUtil') and var.get('debugUtil').get('debuglog')):
                    var.put('debug', var.get('debugUtil').callprop('debuglog', Js('stream')))
                else:
                    @Js
                    def PyJs_debug_2418_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments, 'debug':PyJs_debug_2418_}, var)
                        var.registers([])
                        pass
                    PyJs_debug_2418_._set_name('debug')
                    var.put('debug', PyJs_debug_2418_)
                var.put('BufferList', var.get('require')(Js('./internal/streams/buffer_list')))
                var.put('destroyImpl', var.get('require')(Js('./internal/streams/destroy')))
                var.put('_require', var.get('require')(Js('./internal/streams/state')))
                var.put('getHighWaterMark', var.get('_require').get('getHighWaterMark'))
                var.put('_require$codes', var.get('require')(Js('../errors')).get('codes'))
                var.put('ERR_INVALID_ARG_TYPE', var.get('_require$codes').get('ERR_INVALID_ARG_TYPE'))
                var.put('ERR_STREAM_PUSH_AFTER_EOF', var.get('_require$codes').get('ERR_STREAM_PUSH_AFTER_EOF'))
                var.put('ERR_METHOD_NOT_IMPLEMENTED', var.get('_require$codes').get('ERR_METHOD_NOT_IMPLEMENTED'))
                var.put('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', var.get('_require$codes').get('ERR_STREAM_UNSHIFT_AFTER_END_EVENT'))
                pass
                pass
                pass
                var.get('require')(Js('inherits'))(var.get('Readable'), var.get('Stream'))
                var.put('errorOrDestroy', var.get('destroyImpl').get('errorOrDestroy'))
                var.put('kProxyEvents', Js([Js('error'), Js('close'), Js('destroy'), Js('pause'), Js('resume')]))
                pass
                pass
                pass
                @Js
                def PyJs_get_2419_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2419_}, var)
                    var.registers([])
                    if PyJsStrictEq(var.get(u"this").get('_readableState'),var.get('undefined')):
                        return Js(False)
                    return var.get(u"this").get('_readableState').get('destroyed')
                PyJs_get_2419_._set_name('get')
                @Js
                def PyJs_set_2420_(value, this, arguments, var=var):
                    var = Scope({'value':value, 'this':this, 'arguments':arguments, 'set':PyJs_set_2420_}, var)
                    var.registers(['value'])
                    if var.get(u"this").get('_readableState').neg():
                        return var.get('undefined')
                    var.get(u"this").get('_readableState').put('destroyed', var.get('value'))
                PyJs_set_2420_._set_name('set')
                var.get('Object').callprop('defineProperty', var.get('Readable').get('prototype'), Js('destroyed'), Js({'enumerable':Js(False),'get':PyJs_get_2419_,'set':PyJs_set_2420_}))
                var.get('Readable').get('prototype').put('destroy', var.get('destroyImpl').get('destroy'))
                var.get('Readable').get('prototype').put('_undestroy', var.get('destroyImpl').get('undestroy'))
                @Js
                def PyJs_anonymous_2421_(err, cb, this, arguments, var=var):
                    var = Scope({'err':err, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['err', 'cb'])
                    var.get('cb')(var.get('err'))
                PyJs_anonymous_2421_._set_name('anonymous')
                var.get('Readable').get('prototype').put('_destroy', PyJs_anonymous_2421_)
                @Js
                def PyJs_anonymous_2422_(chunk, encoding, this, arguments, var=var):
                    var = Scope({'chunk':chunk, 'encoding':encoding, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state', 'chunk', 'encoding', 'skipChunkCheck'])
                    var.put('state', var.get(u"this").get('_readableState'))
                    pass
                    if var.get('state').get('objectMode').neg():
                        if PyJsStrictEq(var.get('chunk',throw=False).typeof(),Js('string')):
                            var.put('encoding', (var.get('encoding') or var.get('state').get('defaultEncoding')))
                            if PyJsStrictNeq(var.get('encoding'),var.get('state').get('encoding')):
                                var.put('chunk', var.get('Buffer').callprop('from', var.get('chunk'), var.get('encoding')))
                                var.put('encoding', Js(''))
                            var.put('skipChunkCheck', Js(True))
                    else:
                        var.put('skipChunkCheck', Js(True))
                    return var.get('readableAddChunk')(var.get(u"this"), var.get('chunk'), var.get('encoding'), Js(False), var.get('skipChunkCheck'))
                PyJs_anonymous_2422_._set_name('anonymous')
                var.get('Readable').get('prototype').put('push', PyJs_anonymous_2422_)
                @Js
                def PyJs_anonymous_2423_(chunk, this, arguments, var=var):
                    var = Scope({'chunk':chunk, 'this':this, 'arguments':arguments}, var)
                    var.registers(['chunk'])
                    return var.get('readableAddChunk')(var.get(u"this"), var.get('chunk'), var.get(u"null"), Js(True), Js(False))
                PyJs_anonymous_2423_._set_name('anonymous')
                var.get('Readable').get('prototype').put('unshift', PyJs_anonymous_2423_)
                pass
                pass
                pass
                @Js
                def PyJs_anonymous_2424_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    return PyJsStrictEq(var.get(u"this").get('_readableState').get('flowing'),Js(False))
                PyJs_anonymous_2424_._set_name('anonymous')
                var.get('Readable').get('prototype').put('isPaused', PyJs_anonymous_2424_)
                @Js
                def PyJs_anonymous_2425_(enc, this, arguments, var=var):
                    var = Scope({'enc':enc, 'this':this, 'arguments':arguments}, var)
                    var.registers(['p', 'decoder', 'enc', 'content'])
                    if var.get('StringDecoder').neg():
                        var.put('StringDecoder', var.get('require')(Js('string_decoder/')).get('StringDecoder'))
                    var.put('decoder', var.get('StringDecoder').create(var.get('enc')))
                    var.get(u"this").get('_readableState').put('decoder', var.get('decoder'))
                    var.get(u"this").get('_readableState').put('encoding', var.get(u"this").get('_readableState').get('decoder').get('encoding'))
                    var.put('p', var.get(u"this").get('_readableState').get('buffer').get('head'))
                    var.put('content', Js(''))
                    while PyJsStrictNeq(var.get('p'),var.get(u"null")):
                        var.put('content', var.get('decoder').callprop('write', var.get('p').get('data')), '+')
                        var.put('p', var.get('p').get('next'))
                    var.get(u"this").get('_readableState').get('buffer').callprop('clear')
                    if PyJsStrictNeq(var.get('content'),Js('')):
                        var.get(u"this").get('_readableState').get('buffer').callprop('push', var.get('content'))
                    var.get(u"this").get('_readableState').put('length', var.get('content').get('length'))
                    return var.get(u"this")
                PyJs_anonymous_2425_._set_name('anonymous')
                var.get('Readable').get('prototype').put('setEncoding', PyJs_anonymous_2425_)
                var.put('MAX_HWM', Js(1073741824))
                pass
                pass
                @Js
                def PyJs_anonymous_2426_(n, this, arguments, var=var):
                    var = Scope({'n':n, 'this':this, 'arguments':arguments}, var)
                    var.registers(['n', 'ret', 'state', 'doRead', 'nOrig'])
                    var.get('debug')(Js('read'), var.get('n'))
                    var.put('n', var.get('parseInt')(var.get('n'), Js(10.0)))
                    var.put('state', var.get(u"this").get('_readableState'))
                    var.put('nOrig', var.get('n'))
                    if PyJsStrictNeq(var.get('n'),Js(0.0)):
                        var.get('state').put('emittedReadable', Js(False))
                    if ((PyJsStrictEq(var.get('n'),Js(0.0)) and var.get('state').get('needReadable')) and (((var.get('state').get('length')>=var.get('state').get('highWaterMark')) if PyJsStrictNeq(var.get('state').get('highWaterMark'),Js(0.0)) else (var.get('state').get('length')>Js(0.0))) or var.get('state').get('ended'))):
                        var.get('debug')(Js('read: emitReadable'), var.get('state').get('length'), var.get('state').get('ended'))
                        if (PyJsStrictEq(var.get('state').get('length'),Js(0.0)) and var.get('state').get('ended')):
                            var.get('endReadable')(var.get(u"this"))
                        else:
                            var.get('emitReadable')(var.get(u"this"))
                        return var.get(u"null")
                    var.put('n', var.get('howMuchToRead')(var.get('n'), var.get('state')))
                    if (PyJsStrictEq(var.get('n'),Js(0.0)) and var.get('state').get('ended')):
                        if PyJsStrictEq(var.get('state').get('length'),Js(0.0)):
                            var.get('endReadable')(var.get(u"this"))
                        return var.get(u"null")
                    var.put('doRead', var.get('state').get('needReadable'))
                    var.get('debug')(Js('need readable'), var.get('doRead'))
                    if (PyJsStrictEq(var.get('state').get('length'),Js(0.0)) or ((var.get('state').get('length')-var.get('n'))<var.get('state').get('highWaterMark'))):
                        var.put('doRead', Js(True))
                        var.get('debug')(Js('length less than watermark'), var.get('doRead'))
                    if (var.get('state').get('ended') or var.get('state').get('reading')):
                        var.put('doRead', Js(False))
                        var.get('debug')(Js('reading or ended'), var.get('doRead'))
                    else:
                        if var.get('doRead'):
                            var.get('debug')(Js('do read'))
                            var.get('state').put('reading', Js(True))
                            var.get('state').put('sync', Js(True))
                            if PyJsStrictEq(var.get('state').get('length'),Js(0.0)):
                                var.get('state').put('needReadable', Js(True))
                            var.get(u"this").callprop('_read', var.get('state').get('highWaterMark'))
                            var.get('state').put('sync', Js(False))
                            if var.get('state').get('reading').neg():
                                var.put('n', var.get('howMuchToRead')(var.get('nOrig'), var.get('state')))
                    pass
                    if (var.get('n')>Js(0.0)):
                        var.put('ret', var.get('fromList')(var.get('n'), var.get('state')))
                    else:
                        var.put('ret', var.get(u"null"))
                    if PyJsStrictEq(var.get('ret'),var.get(u"null")):
                        var.get('state').put('needReadable', (var.get('state').get('length')<=var.get('state').get('highWaterMark')))
                        var.put('n', Js(0.0))
                    else:
                        var.get('state').put('length', var.get('n'), '-')
                        var.get('state').put('awaitDrain', Js(0.0))
                    if PyJsStrictEq(var.get('state').get('length'),Js(0.0)):
                        if var.get('state').get('ended').neg():
                            var.get('state').put('needReadable', Js(True))
                        if (PyJsStrictNeq(var.get('nOrig'),var.get('n')) and var.get('state').get('ended')):
                            var.get('endReadable')(var.get(u"this"))
                    if PyJsStrictNeq(var.get('ret'),var.get(u"null")):
                        var.get(u"this").callprop('emit', Js('data'), var.get('ret'))
                    return var.get('ret')
                PyJs_anonymous_2426_._set_name('anonymous')
                var.get('Readable').get('prototype').put('read', PyJs_anonymous_2426_)
                pass
                pass
                pass
                pass
                pass
                @Js
                def PyJs_anonymous_2427_(n, this, arguments, var=var):
                    var = Scope({'n':n, 'this':this, 'arguments':arguments}, var)
                    var.registers(['n'])
                    var.get('errorOrDestroy')(var.get(u"this"), var.get('ERR_METHOD_NOT_IMPLEMENTED').create(Js('_read()')))
                PyJs_anonymous_2427_._set_name('anonymous')
                var.get('Readable').get('prototype').put('_read', PyJs_anonymous_2427_)
                @Js
                def PyJs_anonymous_2428_(dest, pipeOpts, this, arguments, var=var):
                    var = Scope({'dest':dest, 'pipeOpts':pipeOpts, 'this':this, 'arguments':arguments}, var)
                    var.registers(['onclose', 'pipeOpts', 'state', 'ondrain', 'endFn', 'ondata', 'cleanedUp', 'unpipe', 'cleanup', 'onfinish', 'onunpipe', 'onerror', 'doEnd', 'onend', 'dest', 'src'])
                    @Js
                    def PyJsHoisted_onunpipe_(readable, unpipeInfo, this, arguments, var=var):
                        var = Scope({'readable':readable, 'unpipeInfo':unpipeInfo, 'this':this, 'arguments':arguments}, var)
                        var.registers(['readable', 'unpipeInfo'])
                        var.get('debug')(Js('onunpipe'))
                        if PyJsStrictEq(var.get('readable'),var.get('src')):
                            if (var.get('unpipeInfo') and PyJsStrictEq(var.get('unpipeInfo').get('hasUnpiped'),Js(False))):
                                var.get('unpipeInfo').put('hasUnpiped', Js(True))
                                var.get('cleanup')()
                    PyJsHoisted_onunpipe_.func_name = 'onunpipe'
                    var.put('onunpipe', PyJsHoisted_onunpipe_)
                    @Js
                    def PyJsHoisted_onend_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        var.get('debug')(Js('onend'))
                        var.get('dest').callprop('end')
                    PyJsHoisted_onend_.func_name = 'onend'
                    var.put('onend', PyJsHoisted_onend_)
                    @Js
                    def PyJsHoisted_cleanup_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        var.get('debug')(Js('cleanup'))
                        var.get('dest').callprop('removeListener', Js('close'), var.get('onclose'))
                        var.get('dest').callprop('removeListener', Js('finish'), var.get('onfinish'))
                        var.get('dest').callprop('removeListener', Js('drain'), var.get('ondrain'))
                        var.get('dest').callprop('removeListener', Js('error'), var.get('onerror'))
                        var.get('dest').callprop('removeListener', Js('unpipe'), var.get('onunpipe'))
                        var.get('src').callprop('removeListener', Js('end'), var.get('onend'))
                        var.get('src').callprop('removeListener', Js('end'), var.get('unpipe'))
                        var.get('src').callprop('removeListener', Js('data'), var.get('ondata'))
                        var.put('cleanedUp', Js(True))
                        if (var.get('state').get('awaitDrain') and (var.get('dest').get('_writableState').neg() or var.get('dest').get('_writableState').get('needDrain'))):
                            var.get('ondrain')()
                    PyJsHoisted_cleanup_.func_name = 'cleanup'
                    var.put('cleanup', PyJsHoisted_cleanup_)
                    @Js
                    def PyJsHoisted_ondata_(chunk, this, arguments, var=var):
                        var = Scope({'chunk':chunk, 'this':this, 'arguments':arguments}, var)
                        var.registers(['chunk', 'ret'])
                        var.get('debug')(Js('ondata'))
                        var.put('ret', var.get('dest').callprop('write', var.get('chunk')))
                        var.get('debug')(Js('dest.write'), var.get('ret'))
                        if PyJsStrictEq(var.get('ret'),Js(False)):
                            if (((PyJsStrictEq(var.get('state').get('pipesCount'),Js(1.0)) and PyJsStrictEq(var.get('state').get('pipes'),var.get('dest'))) or ((var.get('state').get('pipesCount')>Js(1.0)) and PyJsStrictNeq(var.get('indexOf')(var.get('state').get('pipes'), var.get('dest')),(-Js(1.0))))) and var.get('cleanedUp').neg()):
                                var.get('debug')(Js('false write response, pause'), var.get('state').get('awaitDrain'))
                                (var.get('state').put('awaitDrain',Js(var.get('state').get('awaitDrain').to_number())+Js(1))-Js(1))
                            var.get('src').callprop('pause')
                    PyJsHoisted_ondata_.func_name = 'ondata'
                    var.put('ondata', PyJsHoisted_ondata_)
                    @Js
                    def PyJsHoisted_onerror_(er, this, arguments, var=var):
                        var = Scope({'er':er, 'this':this, 'arguments':arguments}, var)
                        var.registers(['er'])
                        var.get('debug')(Js('onerror'), var.get('er'))
                        var.get('unpipe')()
                        var.get('dest').callprop('removeListener', Js('error'), var.get('onerror'))
                        if PyJsStrictEq(var.get('EElistenerCount')(var.get('dest'), Js('error')),Js(0.0)):
                            var.get('errorOrDestroy')(var.get('dest'), var.get('er'))
                    PyJsHoisted_onerror_.func_name = 'onerror'
                    var.put('onerror', PyJsHoisted_onerror_)
                    @Js
                    def PyJsHoisted_onclose_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        var.get('dest').callprop('removeListener', Js('finish'), var.get('onfinish'))
                        var.get('unpipe')()
                    PyJsHoisted_onclose_.func_name = 'onclose'
                    var.put('onclose', PyJsHoisted_onclose_)
                    @Js
                    def PyJsHoisted_onfinish_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        var.get('debug')(Js('onfinish'))
                        var.get('dest').callprop('removeListener', Js('close'), var.get('onclose'))
                        var.get('unpipe')()
                    PyJsHoisted_onfinish_.func_name = 'onfinish'
                    var.put('onfinish', PyJsHoisted_onfinish_)
                    @Js
                    def PyJsHoisted_unpipe_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        var.get('debug')(Js('unpipe'))
                        var.get('src').callprop('unpipe', var.get('dest'))
                    PyJsHoisted_unpipe_.func_name = 'unpipe'
                    var.put('unpipe', PyJsHoisted_unpipe_)
                    var.put('src', var.get(u"this"))
                    var.put('state', var.get(u"this").get('_readableState'))
                    while 1:
                        SWITCHED = False
                        CONDITION = (var.get('state').get('pipesCount'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(0.0)):
                            SWITCHED = True
                            var.get('state').put('pipes', var.get('dest'))
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(1.0)):
                            SWITCHED = True
                            var.get('state').put('pipes', Js([var.get('state').get('pipes'), var.get('dest')]))
                            break
                        if True:
                            SWITCHED = True
                            var.get('state').get('pipes').callprop('push', var.get('dest'))
                            break
                        SWITCHED = True
                        break
                    var.get('state').put('pipesCount', Js(1.0), '+')
                    var.get('debug')(Js('pipe count=%d opts=%j'), var.get('state').get('pipesCount'), var.get('pipeOpts'))
                    var.put('doEnd', (((var.get('pipeOpts').neg() or PyJsStrictNeq(var.get('pipeOpts').get('end'),Js(False))) and PyJsStrictNeq(var.get('dest'),var.get('process').get('stdout'))) and PyJsStrictNeq(var.get('dest'),var.get('process').get('stderr'))))
                    var.put('endFn', (var.get('onend') if var.get('doEnd') else var.get('unpipe')))
                    if var.get('state').get('endEmitted'):
                        var.get('process').callprop('nextTick', var.get('endFn'))
                    else:
                        var.get('src').callprop('once', Js('end'), var.get('endFn'))
                    var.get('dest').callprop('on', Js('unpipe'), var.get('onunpipe'))
                    pass
                    pass
                    var.put('ondrain', var.get('pipeOnDrain')(var.get('src')))
                    var.get('dest').callprop('on', Js('drain'), var.get('ondrain'))
                    var.put('cleanedUp', Js(False))
                    pass
                    var.get('src').callprop('on', Js('data'), var.get('ondata'))
                    pass
                    pass
                    var.get('prependListener')(var.get('dest'), Js('error'), var.get('onerror'))
                    pass
                    var.get('dest').callprop('once', Js('close'), var.get('onclose'))
                    pass
                    var.get('dest').callprop('once', Js('finish'), var.get('onfinish'))
                    pass
                    var.get('dest').callprop('emit', Js('pipe'), var.get('src'))
                    if var.get('state').get('flowing').neg():
                        var.get('debug')(Js('pipe resume'))
                        var.get('src').callprop('resume')
                    return var.get('dest')
                PyJs_anonymous_2428_._set_name('anonymous')
                var.get('Readable').get('prototype').put('pipe', PyJs_anonymous_2428_)
                pass
                @Js
                def PyJs_anonymous_2430_(dest, this, arguments, var=var):
                    var = Scope({'dest':dest, 'this':this, 'arguments':arguments}, var)
                    var.registers(['unpipeInfo', 'len', 'i', 'state', 'dests', 'dest', 'index'])
                    var.put('state', var.get(u"this").get('_readableState'))
                    var.put('unpipeInfo', Js({'hasUnpiped':Js(False)}))
                    if PyJsStrictEq(var.get('state').get('pipesCount'),Js(0.0)):
                        return var.get(u"this")
                    if PyJsStrictEq(var.get('state').get('pipesCount'),Js(1.0)):
                        if (var.get('dest') and PyJsStrictNeq(var.get('dest'),var.get('state').get('pipes'))):
                            return var.get(u"this")
                        if var.get('dest').neg():
                            var.put('dest', var.get('state').get('pipes'))
                        var.get('state').put('pipes', var.get(u"null"))
                        var.get('state').put('pipesCount', Js(0.0))
                        var.get('state').put('flowing', Js(False))
                        if var.get('dest'):
                            var.get('dest').callprop('emit', Js('unpipe'), var.get(u"this"), var.get('unpipeInfo'))
                        return var.get(u"this")
                    if var.get('dest').neg():
                        var.put('dests', var.get('state').get('pipes'))
                        var.put('len', var.get('state').get('pipesCount'))
                        var.get('state').put('pipes', var.get(u"null"))
                        var.get('state').put('pipesCount', Js(0.0))
                        var.get('state').put('flowing', Js(False))
                        #for JS loop
                        var.put('i', Js(0.0))
                        while (var.get('i')<var.get('len')):
                            try:
                                var.get('dests').get(var.get('i')).callprop('emit', Js('unpipe'), var.get(u"this"), Js({'hasUnpiped':Js(False)}))
                            finally:
                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                        return var.get(u"this")
                    var.put('index', var.get('indexOf')(var.get('state').get('pipes'), var.get('dest')))
                    if PyJsStrictEq(var.get('index'),(-Js(1.0))):
                        return var.get(u"this")
                    var.get('state').get('pipes').callprop('splice', var.get('index'), Js(1.0))
                    var.get('state').put('pipesCount', Js(1.0), '-')
                    if PyJsStrictEq(var.get('state').get('pipesCount'),Js(1.0)):
                        var.get('state').put('pipes', var.get('state').get('pipes').get('0'))
                    var.get('dest').callprop('emit', Js('unpipe'), var.get(u"this"), var.get('unpipeInfo'))
                    return var.get(u"this")
                PyJs_anonymous_2430_._set_name('anonymous')
                var.get('Readable').get('prototype').put('unpipe', PyJs_anonymous_2430_)
                @Js
                def PyJs_anonymous_2431_(ev, fn, this, arguments, var=var):
                    var = Scope({'ev':ev, 'fn':fn, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state', 'ev', 'fn', 'res'])
                    var.put('res', var.get('Stream').get('prototype').get('on').callprop('call', var.get(u"this"), var.get('ev'), var.get('fn')))
                    var.put('state', var.get(u"this").get('_readableState'))
                    if PyJsStrictEq(var.get('ev'),Js('data')):
                        var.get('state').put('readableListening', (var.get(u"this").callprop('listenerCount', Js('readable'))>Js(0.0)))
                        if PyJsStrictNeq(var.get('state').get('flowing'),Js(False)):
                            var.get(u"this").callprop('resume')
                    else:
                        if PyJsStrictEq(var.get('ev'),Js('readable')):
                            if (var.get('state').get('endEmitted').neg() and var.get('state').get('readableListening').neg()):
                                var.get('state').put('readableListening', var.get('state').put('needReadable', Js(True)))
                                var.get('state').put('flowing', Js(False))
                                var.get('state').put('emittedReadable', Js(False))
                                var.get('debug')(Js('on readable'), var.get('state').get('length'), var.get('state').get('reading'))
                                if var.get('state').get('length'):
                                    var.get('emitReadable')(var.get(u"this"))
                                else:
                                    if var.get('state').get('reading').neg():
                                        var.get('process').callprop('nextTick', var.get('nReadingNextTick'), var.get(u"this"))
                    return var.get('res')
                PyJs_anonymous_2431_._set_name('anonymous')
                var.get('Readable').get('prototype').put('on', PyJs_anonymous_2431_)
                var.get('Readable').get('prototype').put('addListener', var.get('Readable').get('prototype').get('on'))
                @Js
                def PyJs_anonymous_2432_(ev, fn, this, arguments, var=var):
                    var = Scope({'ev':ev, 'fn':fn, 'this':this, 'arguments':arguments}, var)
                    var.registers(['ev', 'fn', 'res'])
                    var.put('res', var.get('Stream').get('prototype').get('removeListener').callprop('call', var.get(u"this"), var.get('ev'), var.get('fn')))
                    if PyJsStrictEq(var.get('ev'),Js('readable')):
                        var.get('process').callprop('nextTick', var.get('updateReadableListening'), var.get(u"this"))
                    return var.get('res')
                PyJs_anonymous_2432_._set_name('anonymous')
                var.get('Readable').get('prototype').put('removeListener', PyJs_anonymous_2432_)
                @Js
                def PyJs_anonymous_2433_(ev, this, arguments, var=var):
                    var = Scope({'ev':ev, 'this':this, 'arguments':arguments}, var)
                    var.registers(['ev', 'res'])
                    var.put('res', var.get('Stream').get('prototype').get('removeAllListeners').callprop('apply', var.get(u"this"), var.get('arguments')))
                    if (PyJsStrictEq(var.get('ev'),Js('readable')) or PyJsStrictEq(var.get('ev'),var.get('undefined'))):
                        var.get('process').callprop('nextTick', var.get('updateReadableListening'), var.get(u"this"))
                    return var.get('res')
                PyJs_anonymous_2433_._set_name('anonymous')
                var.get('Readable').get('prototype').put('removeAllListeners', PyJs_anonymous_2433_)
                pass
                pass
                @Js
                def PyJs_anonymous_2434_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers(['state'])
                    var.put('state', var.get(u"this").get('_readableState'))
                    if var.get('state').get('flowing').neg():
                        var.get('debug')(Js('resume'))
                        var.get('state').put('flowing', var.get('state').get('readableListening').neg())
                        var.get('resume')(var.get(u"this"), var.get('state'))
                    var.get('state').put('paused', Js(False))
                    return var.get(u"this")
                PyJs_anonymous_2434_._set_name('anonymous')
                var.get('Readable').get('prototype').put('resume', PyJs_anonymous_2434_)
                pass
                pass
                @Js
                def PyJs_anonymous_2435_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.get('debug')(Js('call pause flowing=%j'), var.get(u"this").get('_readableState').get('flowing'))
                    if PyJsStrictNeq(var.get(u"this").get('_readableState').get('flowing'),Js(False)):
                        var.get('debug')(Js('pause'))
                        var.get(u"this").get('_readableState').put('flowing', Js(False))
                        var.get(u"this").callprop('emit', Js('pause'))
                    var.get(u"this").get('_readableState').put('paused', Js(True))
                    return var.get(u"this")
                PyJs_anonymous_2435_._set_name('anonymous')
                var.get('Readable').get('prototype').put('pause', PyJs_anonymous_2435_)
                pass
                @Js
                def PyJs_anonymous_2436_(stream, this, arguments, var=var):
                    var = Scope({'stream':stream, 'this':this, 'arguments':arguments}, var)
                    var.registers(['n', 'i', 'state', 'paused', 'stream', '_this'])
                    var.put('_this', var.get(u"this"))
                    var.put('state', var.get(u"this").get('_readableState'))
                    var.put('paused', Js(False))
                    @Js
                    def PyJs_anonymous_2437_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['chunk'])
                        var.get('debug')(Js('wrapped end'))
                        if (var.get('state').get('decoder') and var.get('state').get('ended').neg()):
                            var.put('chunk', var.get('state').get('decoder').callprop('end'))
                            if (var.get('chunk') and var.get('chunk').get('length')):
                                var.get('_this').callprop('push', var.get('chunk'))
                        var.get('_this').callprop('push', var.get(u"null"))
                    PyJs_anonymous_2437_._set_name('anonymous')
                    var.get('stream').callprop('on', Js('end'), PyJs_anonymous_2437_)
                    @Js
                    def PyJs_anonymous_2438_(chunk, this, arguments, var=var):
                        var = Scope({'chunk':chunk, 'this':this, 'arguments':arguments}, var)
                        var.registers(['chunk', 'ret'])
                        var.get('debug')(Js('wrapped data'))
                        if var.get('state').get('decoder'):
                            var.put('chunk', var.get('state').get('decoder').callprop('write', var.get('chunk')))
                        if (var.get('state').get('objectMode') and (PyJsStrictEq(var.get('chunk'),var.get(u"null")) or PyJsStrictEq(var.get('chunk'),var.get('undefined')))):
                            return var.get('undefined')
                        else:
                            if (var.get('state').get('objectMode').neg() and (var.get('chunk').neg() or var.get('chunk').get('length').neg())):
                                return var.get('undefined')
                        var.put('ret', var.get('_this').callprop('push', var.get('chunk')))
                        if var.get('ret').neg():
                            var.put('paused', Js(True))
                            var.get('stream').callprop('pause')
                    PyJs_anonymous_2438_._set_name('anonymous')
                    var.get('stream').callprop('on', Js('data'), PyJs_anonymous_2438_)
                    for PyJsTemp in var.get('stream'):
                        var.put('i', PyJsTemp)
                        if (PyJsStrictEq(var.get(u"this").get(var.get('i')),var.get('undefined')) and PyJsStrictEq(var.get('stream').get(var.get('i')).typeof(),Js('function'))):
                            @Js
                            def PyJs_methodWrap_2439_(method, this, arguments, var=var):
                                var = Scope({'method':method, 'this':this, 'arguments':arguments, 'methodWrap':PyJs_methodWrap_2439_}, var)
                                var.registers(['method'])
                                @Js
                                def PyJs_methodWrapReturnFunction_2440_(this, arguments, var=var):
                                    var = Scope({'this':this, 'arguments':arguments, 'methodWrapReturnFunction':PyJs_methodWrapReturnFunction_2440_}, var)
                                    var.registers([])
                                    return var.get('stream').get(var.get('method')).callprop('apply', var.get('stream'), var.get('arguments'))
                                PyJs_methodWrapReturnFunction_2440_._set_name('methodWrapReturnFunction')
                                return PyJs_methodWrapReturnFunction_2440_
                            PyJs_methodWrap_2439_._set_name('methodWrap')
                            var.get(u"this").put(var.get('i'), PyJs_methodWrap_2439_(var.get('i')))
                    #for JS loop
                    var.put('n', Js(0.0))
                    while (var.get('n')<var.get('kProxyEvents').get('length')):
                        try:
                            var.get('stream').callprop('on', var.get('kProxyEvents').get(var.get('n')), var.get(u"this").get('emit').callprop('bind', var.get(u"this"), var.get('kProxyEvents').get(var.get('n'))))
                        finally:
                                (var.put('n',Js(var.get('n').to_number())+Js(1))-Js(1))
                    @Js
                    def PyJs_anonymous_2441_(n, this, arguments, var=var):
                        var = Scope({'n':n, 'this':this, 'arguments':arguments}, var)
                        var.registers(['n'])
                        var.get('debug')(Js('wrapped _read'), var.get('n'))
                        if var.get('paused'):
                            var.put('paused', Js(False))
                            var.get('stream').callprop('resume')
                    PyJs_anonymous_2441_._set_name('anonymous')
                    var.get(u"this").put('_read', PyJs_anonymous_2441_)
                    return var.get(u"this")
                PyJs_anonymous_2436_._set_name('anonymous')
                var.get('Readable').get('prototype').put('wrap', PyJs_anonymous_2436_)
                if PyJsStrictEq(var.get('Symbol',throw=False).typeof(),Js('function')):
                    @Js
                    def PyJs_anonymous_2442_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        if PyJsStrictEq(var.get('createReadableStreamAsyncIterator'),var.get('undefined')):
                            var.put('createReadableStreamAsyncIterator', var.get('require')(Js('./internal/streams/async_iterator')))
                        return var.get('createReadableStreamAsyncIterator')(var.get(u"this"))
                    PyJs_anonymous_2442_._set_name('anonymous')
                    var.get('Readable').get('prototype').put(var.get('Symbol').get('asyncIterator'), PyJs_anonymous_2442_)
                @Js
                def PyJs_get_2443_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2443_}, var)
                    var.registers([])
                    return var.get(u"this").get('_readableState').get('highWaterMark')
                PyJs_get_2443_._set_name('get')
                var.get('Object').callprop('defineProperty', var.get('Readable').get('prototype'), Js('readableHighWaterMark'), Js({'enumerable':Js(False),'get':PyJs_get_2443_}))
                @Js
                def PyJs_get_2444_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2444_}, var)
                    var.registers([])
                    return (var.get(u"this").get('_readableState') and var.get(u"this").get('_readableState').get('buffer'))
                PyJs_get_2444_._set_name('get')
                var.get('Object').callprop('defineProperty', var.get('Readable').get('prototype'), Js('readableBuffer'), Js({'enumerable':Js(False),'get':PyJs_get_2444_}))
                @Js
                def PyJs_get_2445_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2445_}, var)
                    var.registers([])
                    return var.get(u"this").get('_readableState').get('flowing')
                PyJs_get_2445_._set_name('get')
                @Js
                def PyJs_set_2446_(state, this, arguments, var=var):
                    var = Scope({'state':state, 'this':this, 'arguments':arguments, 'set':PyJs_set_2446_}, var)
                    var.registers(['state'])
                    if var.get(u"this").get('_readableState'):
                        var.get(u"this").get('_readableState').put('flowing', var.get('state'))
                PyJs_set_2446_._set_name('set')
                var.get('Object').callprop('defineProperty', var.get('Readable').get('prototype'), Js('readableFlowing'), Js({'enumerable':Js(False),'get':PyJs_get_2445_,'set':PyJs_set_2446_}))
                var.get('Readable').put('_fromList', var.get('fromList'))
                @Js
                def PyJs_get_2447_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2447_}, var)
                    var.registers([])
                    return var.get(u"this").get('_readableState').get('length')
                PyJs_get_2447_._set_name('get')
                var.get('Object').callprop('defineProperty', var.get('Readable').get('prototype'), Js('readableLength'), Js({'enumerable':Js(False),'get':PyJs_get_2447_}))
                pass
                pass
                pass
                if PyJsStrictEq(var.get('Symbol',throw=False).typeof(),Js('function')):
                    @Js
                    def PyJs_anonymous_2448_(iterable, opts, this, arguments, var=var):
                        var = Scope({'iterable':iterable, 'opts':opts, 'this':this, 'arguments':arguments}, var)
                        var.registers(['iterable', 'opts'])
                        if PyJsStrictEq(var.get('from'),var.get('undefined')):
                            var.put('from', var.get('require')(Js('./internal/streams/from')))
                        return var.get('from')(var.get('Readable'), var.get('iterable'), var.get('opts'))
                    PyJs_anonymous_2448_._set_name('anonymous')
                    var.get('Readable').put('from', PyJs_anonymous_2448_)
                pass
            PyJs_anonymous_2415_._set_name('anonymous')
            PyJs_anonymous_2415_.callprop('call', var.get(u"this"))
        PyJs_anonymous_2414_._set_name('anonymous')
        PyJs_anonymous_2414_.callprop('call', var.get(u"this"), var.get('require')(Js('_process')), (var.get('global') if PyJsStrictNeq(var.get('global',throw=False).typeof(),Js('undefined')) else (var.get('self') if PyJsStrictNeq(var.get('self',throw=False).typeof(),Js('undefined')) else (var.get('window') if PyJsStrictNeq(var.get('window',throw=False).typeof(),Js('undefined')) else Js({})))))
    PyJs_anonymous_2413_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2449_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['Duplex', 'ERR_TRANSFORM_WITH_LENGTH_0', 'module', 'ERR_MULTIPLE_CALLBACK', 'prefinish', 'ERR_TRANSFORM_ALREADY_TRANSFORMING', 'done', 'exports', '_require$codes', 'require', 'ERR_METHOD_NOT_IMPLEMENTED', 'afterTransform', 'Transform'])
        @Js
        def PyJsHoisted_afterTransform_(er, data, this, arguments, var=var):
            var = Scope({'er':er, 'data':data, 'this':this, 'arguments':arguments}, var)
            var.registers(['er', 'ts', 'cb', 'data', 'rs'])
            var.put('ts', var.get(u"this").get('_transformState'))
            var.get('ts').put('transforming', Js(False))
            var.put('cb', var.get('ts').get('writecb'))
            if PyJsStrictEq(var.get('cb'),var.get(u"null")):
                return var.get(u"this").callprop('emit', Js('error'), var.get('ERR_MULTIPLE_CALLBACK').create())
            var.get('ts').put('writechunk', var.get(u"null"))
            var.get('ts').put('writecb', var.get(u"null"))
            if (var.get('data')!=var.get(u"null")):
                var.get(u"this").callprop('push', var.get('data'))
            var.get('cb')(var.get('er'))
            var.put('rs', var.get(u"this").get('_readableState'))
            var.get('rs').put('reading', Js(False))
            if (var.get('rs').get('needReadable') or (var.get('rs').get('length')<var.get('rs').get('highWaterMark'))):
                var.get(u"this").callprop('_read', var.get('rs').get('highWaterMark'))
        PyJsHoisted_afterTransform_.func_name = 'afterTransform'
        var.put('afterTransform', PyJsHoisted_afterTransform_)
        @Js
        def PyJsHoisted_Transform_(options, this, arguments, var=var):
            var = Scope({'options':options, 'this':this, 'arguments':arguments}, var)
            var.registers(['options'])
            if var.get(u"this").instanceof(var.get('Transform')).neg():
                return var.get('Transform').create(var.get('options'))
            var.get('Duplex').callprop('call', var.get(u"this"), var.get('options'))
            var.get(u"this").put('_transformState', Js({'afterTransform':var.get('afterTransform').callprop('bind', var.get(u"this")),'needTransform':Js(False),'transforming':Js(False),'writecb':var.get(u"null"),'writechunk':var.get(u"null"),'writeencoding':var.get(u"null")}))
            var.get(u"this").get('_readableState').put('needReadable', Js(True))
            var.get(u"this").get('_readableState').put('sync', Js(False))
            if var.get('options'):
                if PyJsStrictEq(var.get('options').get('transform').typeof(),Js('function')):
                    var.get(u"this").put('_transform', var.get('options').get('transform'))
                if PyJsStrictEq(var.get('options').get('flush').typeof(),Js('function')):
                    var.get(u"this").put('_flush', var.get('options').get('flush'))
            var.get(u"this").callprop('on', Js('prefinish'), var.get('prefinish'))
        PyJsHoisted_Transform_.func_name = 'Transform'
        var.put('Transform', PyJsHoisted_Transform_)
        @Js
        def PyJsHoisted_prefinish_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['_this'])
            var.put('_this', var.get(u"this"))
            if (PyJsStrictEq(var.get(u"this").get('_flush').typeof(),Js('function')) and var.get(u"this").get('_readableState').get('destroyed').neg()):
                @Js
                def PyJs_anonymous_2450_(er, data, this, arguments, var=var):
                    var = Scope({'er':er, 'data':data, 'this':this, 'arguments':arguments}, var)
                    var.registers(['data', 'er'])
                    var.get('done')(var.get('_this'), var.get('er'), var.get('data'))
                PyJs_anonymous_2450_._set_name('anonymous')
                var.get(u"this").callprop('_flush', PyJs_anonymous_2450_)
            else:
                var.get('done')(var.get(u"this"), var.get(u"null"), var.get(u"null"))
        PyJsHoisted_prefinish_.func_name = 'prefinish'
        var.put('prefinish', PyJsHoisted_prefinish_)
        @Js
        def PyJsHoisted_done_(stream, er, data, this, arguments, var=var):
            var = Scope({'stream':stream, 'er':er, 'data':data, 'this':this, 'arguments':arguments}, var)
            var.registers(['data', 'er', 'stream'])
            if var.get('er'):
                return var.get('stream').callprop('emit', Js('error'), var.get('er'))
            if (var.get('data')!=var.get(u"null")):
                var.get('stream').callprop('push', var.get('data'))
            if var.get('stream').get('_writableState').get('length'):
                PyJsTempException = JsToPyException(var.get('ERR_TRANSFORM_WITH_LENGTH_0').create())
                raise PyJsTempException
            if var.get('stream').get('_transformState').get('transforming'):
                PyJsTempException = JsToPyException(var.get('ERR_TRANSFORM_ALREADY_TRANSFORMING').create())
                raise PyJsTempException
            return var.get('stream').callprop('push', var.get(u"null"))
        PyJsHoisted_done_.func_name = 'done'
        var.put('done', PyJsHoisted_done_)
        Js('use strict')
        var.get('module').put('exports', var.get('Transform'))
        var.put('_require$codes', var.get('require')(Js('../errors')).get('codes'))
        var.put('ERR_METHOD_NOT_IMPLEMENTED', var.get('_require$codes').get('ERR_METHOD_NOT_IMPLEMENTED'))
        var.put('ERR_MULTIPLE_CALLBACK', var.get('_require$codes').get('ERR_MULTIPLE_CALLBACK'))
        var.put('ERR_TRANSFORM_ALREADY_TRANSFORMING', var.get('_require$codes').get('ERR_TRANSFORM_ALREADY_TRANSFORMING'))
        var.put('ERR_TRANSFORM_WITH_LENGTH_0', var.get('_require$codes').get('ERR_TRANSFORM_WITH_LENGTH_0'))
        var.put('Duplex', var.get('require')(Js('./_stream_duplex')))
        var.get('require')(Js('inherits'))(var.get('Transform'), var.get('Duplex'))
        pass
        pass
        pass
        @Js
        def PyJs_anonymous_2451_(chunk, encoding, this, arguments, var=var):
            var = Scope({'chunk':chunk, 'encoding':encoding, 'this':this, 'arguments':arguments}, var)
            var.registers(['encoding', 'chunk'])
            var.get(u"this").get('_transformState').put('needTransform', Js(False))
            return var.get('Duplex').get('prototype').get('push').callprop('call', var.get(u"this"), var.get('chunk'), var.get('encoding'))
        PyJs_anonymous_2451_._set_name('anonymous')
        var.get('Transform').get('prototype').put('push', PyJs_anonymous_2451_)
        @Js
        def PyJs_anonymous_2452_(chunk, encoding, cb, this, arguments, var=var):
            var = Scope({'chunk':chunk, 'encoding':encoding, 'cb':cb, 'this':this, 'arguments':arguments}, var)
            var.registers(['encoding', 'cb', 'chunk'])
            var.get('cb')(var.get('ERR_METHOD_NOT_IMPLEMENTED').create(Js('_transform()')))
        PyJs_anonymous_2452_._set_name('anonymous')
        var.get('Transform').get('prototype').put('_transform', PyJs_anonymous_2452_)
        @Js
        def PyJs_anonymous_2453_(chunk, encoding, cb, this, arguments, var=var):
            var = Scope({'chunk':chunk, 'encoding':encoding, 'cb':cb, 'this':this, 'arguments':arguments}, var)
            var.registers(['ts', 'encoding', 'cb', 'rs', 'chunk'])
            var.put('ts', var.get(u"this").get('_transformState'))
            var.get('ts').put('writecb', var.get('cb'))
            var.get('ts').put('writechunk', var.get('chunk'))
            var.get('ts').put('writeencoding', var.get('encoding'))
            if var.get('ts').get('transforming').neg():
                var.put('rs', var.get(u"this").get('_readableState'))
                if ((var.get('ts').get('needTransform') or var.get('rs').get('needReadable')) or (var.get('rs').get('length')<var.get('rs').get('highWaterMark'))):
                    var.get(u"this").callprop('_read', var.get('rs').get('highWaterMark'))
        PyJs_anonymous_2453_._set_name('anonymous')
        var.get('Transform').get('prototype').put('_write', PyJs_anonymous_2453_)
        @Js
        def PyJs_anonymous_2454_(n, this, arguments, var=var):
            var = Scope({'n':n, 'this':this, 'arguments':arguments}, var)
            var.registers(['ts', 'n'])
            var.put('ts', var.get(u"this").get('_transformState'))
            if (PyJsStrictNeq(var.get('ts').get('writechunk'),var.get(u"null")) and var.get('ts').get('transforming').neg()):
                var.get('ts').put('transforming', Js(True))
                var.get(u"this").callprop('_transform', var.get('ts').get('writechunk'), var.get('ts').get('writeencoding'), var.get('ts').get('afterTransform'))
            else:
                var.get('ts').put('needTransform', Js(True))
        PyJs_anonymous_2454_._set_name('anonymous')
        var.get('Transform').get('prototype').put('_read', PyJs_anonymous_2454_)
        @Js
        def PyJs_anonymous_2455_(err, cb, this, arguments, var=var):
            var = Scope({'err':err, 'cb':cb, 'this':this, 'arguments':arguments}, var)
            var.registers(['err', 'cb'])
            @Js
            def PyJs_anonymous_2456_(err2, this, arguments, var=var):
                var = Scope({'err2':err2, 'this':this, 'arguments':arguments}, var)
                var.registers(['err2'])
                var.get('cb')(var.get('err2'))
            PyJs_anonymous_2456_._set_name('anonymous')
            var.get('Duplex').get('prototype').get('_destroy').callprop('call', var.get(u"this"), var.get('err'), PyJs_anonymous_2456_)
        PyJs_anonymous_2455_._set_name('anonymous')
        var.get('Transform').get('prototype').put('_destroy', PyJs_anonymous_2455_)
        pass
    PyJs_anonymous_2449_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2457_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_2458_(process, PyJsArg_676c6f62616c_, this, arguments, var=var):
            var = Scope({'process':process, 'global':PyJsArg_676c6f62616c_, 'this':this, 'arguments':arguments}, var)
            var.registers(['global', 'process'])
            @Js
            def PyJs_anonymous_2459_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['decodeChunk', 'onwriteError', 'callFinal', 'OurUint8Array', 'writeAfterEnd', 'ERR_INVALID_ARG_TYPE', 'onwrite', 'ERR_STREAM_NULL_VALUES', 'finishMaybe', 'destroyImpl', 'Buffer', 'CorkedRequest', 'Duplex', 'endWritable', 'realHasInstance', 'prefinish', 'onwriteDrain', 'Stream', '_require$codes', 'validChunk', 'onCorkedFinish', 'ERR_METHOD_NOT_IMPLEMENTED', 'WritableState', 'nop', 'needFinish', 'doWrite', 'ERR_UNKNOWN_ENCODING', 'errorOrDestroy', '_uint8ArrayToBuffer', 'ERR_MULTIPLE_CALLBACK', 'WriteReq', 'ERR_STREAM_CANNOT_PIPE', 'Writable', 'ERR_STREAM_DESTROYED', 'writeOrBuffer', 'internalUtil', 'ERR_STREAM_WRITE_AFTER_END', '_isUint8Array', 'onwriteStateUpdate', 'getHighWaterMark', 'clearBuffer', '_require', 'afterWrite'])
                @Js
                def PyJsHoisted_WriteReq_(chunk, encoding, cb, this, arguments, var=var):
                    var = Scope({'chunk':chunk, 'encoding':encoding, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['encoding', 'cb', 'chunk'])
                    var.get(u"this").put('chunk', var.get('chunk'))
                    var.get(u"this").put('encoding', var.get('encoding'))
                    var.get(u"this").put('callback', var.get('cb'))
                    var.get(u"this").put('next', var.get(u"null"))
                PyJsHoisted_WriteReq_.func_name = 'WriteReq'
                var.put('WriteReq', PyJsHoisted_WriteReq_)
                @Js
                def PyJsHoisted_CorkedRequest_(state, this, arguments, var=var):
                    var = Scope({'state':state, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state', '_this'])
                    var.put('_this', var.get(u"this"))
                    var.get(u"this").put('next', var.get(u"null"))
                    var.get(u"this").put('entry', var.get(u"null"))
                    @Js
                    def PyJs_anonymous_2460_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        var.get('onCorkedFinish')(var.get('_this'), var.get('state'))
                    PyJs_anonymous_2460_._set_name('anonymous')
                    var.get(u"this").put('finish', PyJs_anonymous_2460_)
                PyJsHoisted_CorkedRequest_.func_name = 'CorkedRequest'
                var.put('CorkedRequest', PyJsHoisted_CorkedRequest_)
                @Js
                def PyJsHoisted__uint8ArrayToBuffer_(chunk, this, arguments, var=var):
                    var = Scope({'chunk':chunk, 'this':this, 'arguments':arguments}, var)
                    var.registers(['chunk'])
                    return var.get('Buffer').callprop('from', var.get('chunk'))
                PyJsHoisted__uint8ArrayToBuffer_.func_name = '_uint8ArrayToBuffer'
                var.put('_uint8ArrayToBuffer', PyJsHoisted__uint8ArrayToBuffer_)
                @Js
                def PyJsHoisted__isUint8Array_(obj, this, arguments, var=var):
                    var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
                    var.registers(['obj'])
                    return (var.get('Buffer').callprop('isBuffer', var.get('obj')) or var.get('obj').instanceof(var.get('OurUint8Array')))
                PyJsHoisted__isUint8Array_.func_name = '_isUint8Array'
                var.put('_isUint8Array', PyJsHoisted__isUint8Array_)
                @Js
                def PyJsHoisted_nop_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    pass
                PyJsHoisted_nop_.func_name = 'nop'
                var.put('nop', PyJsHoisted_nop_)
                @Js
                def PyJsHoisted_WritableState_(options, stream, isDuplex, this, arguments, var=var):
                    var = Scope({'options':options, 'stream':stream, 'isDuplex':isDuplex, 'this':this, 'arguments':arguments}, var)
                    var.registers(['options', 'noDecode', 'isDuplex', 'stream'])
                    var.put('Duplex', (var.get('Duplex') or var.get('require')(Js('./_stream_duplex'))))
                    var.put('options', (var.get('options') or Js({})))
                    if PyJsStrictNeq(var.get('isDuplex',throw=False).typeof(),Js('boolean')):
                        var.put('isDuplex', var.get('stream').instanceof(var.get('Duplex')))
                    var.get(u"this").put('objectMode', var.get('options').get('objectMode').neg().neg())
                    if var.get('isDuplex'):
                        var.get(u"this").put('objectMode', (var.get(u"this").get('objectMode') or var.get('options').get('writableObjectMode').neg().neg()))
                    var.get(u"this").put('highWaterMark', var.get('getHighWaterMark')(var.get(u"this"), var.get('options'), Js('writableHighWaterMark'), var.get('isDuplex')))
                    var.get(u"this").put('finalCalled', Js(False))
                    var.get(u"this").put('needDrain', Js(False))
                    var.get(u"this").put('ending', Js(False))
                    var.get(u"this").put('ended', Js(False))
                    var.get(u"this").put('finished', Js(False))
                    var.get(u"this").put('destroyed', Js(False))
                    var.put('noDecode', PyJsStrictEq(var.get('options').get('decodeStrings'),Js(False)))
                    var.get(u"this").put('decodeStrings', var.get('noDecode').neg())
                    var.get(u"this").put('defaultEncoding', (var.get('options').get('defaultEncoding') or Js('utf8')))
                    var.get(u"this").put('length', Js(0.0))
                    var.get(u"this").put('writing', Js(False))
                    var.get(u"this").put('corked', Js(0.0))
                    var.get(u"this").put('sync', Js(True))
                    var.get(u"this").put('bufferProcessing', Js(False))
                    @Js
                    def PyJs_anonymous_2462_(er, this, arguments, var=var):
                        var = Scope({'er':er, 'this':this, 'arguments':arguments}, var)
                        var.registers(['er'])
                        var.get('onwrite')(var.get('stream'), var.get('er'))
                    PyJs_anonymous_2462_._set_name('anonymous')
                    var.get(u"this").put('onwrite', PyJs_anonymous_2462_)
                    var.get(u"this").put('writecb', var.get(u"null"))
                    var.get(u"this").put('writelen', Js(0.0))
                    var.get(u"this").put('bufferedRequest', var.get(u"null"))
                    var.get(u"this").put('lastBufferedRequest', var.get(u"null"))
                    var.get(u"this").put('pendingcb', Js(0.0))
                    var.get(u"this").put('prefinished', Js(False))
                    var.get(u"this").put('errorEmitted', Js(False))
                    var.get(u"this").put('emitClose', PyJsStrictNeq(var.get('options').get('emitClose'),Js(False)))
                    var.get(u"this").put('autoDestroy', var.get('options').get('autoDestroy').neg().neg())
                    var.get(u"this").put('bufferedRequestCount', Js(0.0))
                    var.get(u"this").put('corkedRequestsFree', var.get('CorkedRequest').create(var.get(u"this")))
                PyJsHoisted_WritableState_.func_name = 'WritableState'
                var.put('WritableState', PyJsHoisted_WritableState_)
                @Js
                def PyJsHoisted_Writable_(options, this, arguments, var=var):
                    var = Scope({'options':options, 'this':this, 'arguments':arguments}, var)
                    var.registers(['options', 'isDuplex'])
                    var.put('Duplex', (var.get('Duplex') or var.get('require')(Js('./_stream_duplex'))))
                    var.put('isDuplex', var.get(u"this").instanceof(var.get('Duplex')))
                    if (var.get('isDuplex').neg() and var.get('realHasInstance').callprop('call', var.get('Writable'), var.get(u"this")).neg()):
                        return var.get('Writable').create(var.get('options'))
                    var.get(u"this").put('_writableState', var.get('WritableState').create(var.get('options'), var.get(u"this"), var.get('isDuplex')))
                    var.get(u"this").put('writable', Js(True))
                    if var.get('options'):
                        if PyJsStrictEq(var.get('options').get('write').typeof(),Js('function')):
                            var.get(u"this").put('_write', var.get('options').get('write'))
                        if PyJsStrictEq(var.get('options').get('writev').typeof(),Js('function')):
                            var.get(u"this").put('_writev', var.get('options').get('writev'))
                        if PyJsStrictEq(var.get('options').get('destroy').typeof(),Js('function')):
                            var.get(u"this").put('_destroy', var.get('options').get('destroy'))
                        if PyJsStrictEq(var.get('options').get('final').typeof(),Js('function')):
                            var.get(u"this").put('_final', var.get('options').get('final'))
                    var.get('Stream').callprop('call', var.get(u"this"))
                PyJsHoisted_Writable_.func_name = 'Writable'
                var.put('Writable', PyJsHoisted_Writable_)
                @Js
                def PyJsHoisted_writeAfterEnd_(stream, cb, this, arguments, var=var):
                    var = Scope({'stream':stream, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['er', 'stream', 'cb'])
                    var.put('er', var.get('ERR_STREAM_WRITE_AFTER_END').create())
                    var.get('errorOrDestroy')(var.get('stream'), var.get('er'))
                    var.get('process').callprop('nextTick', var.get('cb'), var.get('er'))
                PyJsHoisted_writeAfterEnd_.func_name = 'writeAfterEnd'
                var.put('writeAfterEnd', PyJsHoisted_writeAfterEnd_)
                @Js
                def PyJsHoisted_validChunk_(stream, state, chunk, cb, this, arguments, var=var):
                    var = Scope({'stream':stream, 'state':state, 'chunk':chunk, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['er', 'state', 'cb', 'stream', 'chunk'])
                    pass
                    if PyJsStrictEq(var.get('chunk'),var.get(u"null")):
                        var.put('er', var.get('ERR_STREAM_NULL_VALUES').create())
                    else:
                        if (PyJsStrictNeq(var.get('chunk',throw=False).typeof(),Js('string')) and var.get('state').get('objectMode').neg()):
                            var.put('er', var.get('ERR_INVALID_ARG_TYPE').create(Js('chunk'), Js([Js('string'), Js('Buffer')]), var.get('chunk')))
                    if var.get('er'):
                        var.get('errorOrDestroy')(var.get('stream'), var.get('er'))
                        var.get('process').callprop('nextTick', var.get('cb'), var.get('er'))
                        return Js(False)
                    return Js(True)
                PyJsHoisted_validChunk_.func_name = 'validChunk'
                var.put('validChunk', PyJsHoisted_validChunk_)
                @Js
                def PyJsHoisted_decodeChunk_(state, chunk, encoding, this, arguments, var=var):
                    var = Scope({'state':state, 'chunk':chunk, 'encoding':encoding, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state', 'encoding', 'chunk'])
                    if ((var.get('state').get('objectMode').neg() and PyJsStrictNeq(var.get('state').get('decodeStrings'),Js(False))) and PyJsStrictEq(var.get('chunk',throw=False).typeof(),Js('string'))):
                        var.put('chunk', var.get('Buffer').callprop('from', var.get('chunk'), var.get('encoding')))
                    return var.get('chunk')
                PyJsHoisted_decodeChunk_.func_name = 'decodeChunk'
                var.put('decodeChunk', PyJsHoisted_decodeChunk_)
                @Js
                def PyJsHoisted_writeOrBuffer_(stream, state, isBuf, chunk, encoding, cb, this, arguments, var=var):
                    var = Scope({'stream':stream, 'state':state, 'isBuf':isBuf, 'chunk':chunk, 'encoding':encoding, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['len', 'last', 'ret', 'state', 'encoding', 'cb', 'newChunk', 'isBuf', 'stream', 'chunk'])
                    if var.get('isBuf').neg():
                        var.put('newChunk', var.get('decodeChunk')(var.get('state'), var.get('chunk'), var.get('encoding')))
                        if PyJsStrictNeq(var.get('chunk'),var.get('newChunk')):
                            var.put('isBuf', Js(True))
                            var.put('encoding', Js('buffer'))
                            var.put('chunk', var.get('newChunk'))
                    var.put('len', (Js(1.0) if var.get('state').get('objectMode') else var.get('chunk').get('length')))
                    var.get('state').put('length', var.get('len'), '+')
                    var.put('ret', (var.get('state').get('length')<var.get('state').get('highWaterMark')))
                    if var.get('ret').neg():
                        var.get('state').put('needDrain', Js(True))
                    if (var.get('state').get('writing') or var.get('state').get('corked')):
                        var.put('last', var.get('state').get('lastBufferedRequest'))
                        var.get('state').put('lastBufferedRequest', Js({'chunk':var.get('chunk'),'encoding':var.get('encoding'),'isBuf':var.get('isBuf'),'callback':var.get('cb'),'next':var.get(u"null")}))
                        if var.get('last'):
                            var.get('last').put('next', var.get('state').get('lastBufferedRequest'))
                        else:
                            var.get('state').put('bufferedRequest', var.get('state').get('lastBufferedRequest'))
                        var.get('state').put('bufferedRequestCount', Js(1.0), '+')
                    else:
                        var.get('doWrite')(var.get('stream'), var.get('state'), Js(False), var.get('len'), var.get('chunk'), var.get('encoding'), var.get('cb'))
                    return var.get('ret')
                PyJsHoisted_writeOrBuffer_.func_name = 'writeOrBuffer'
                var.put('writeOrBuffer', PyJsHoisted_writeOrBuffer_)
                @Js
                def PyJsHoisted_doWrite_(stream, state, writev, len, chunk, encoding, cb, this, arguments, var=var):
                    var = Scope({'stream':stream, 'state':state, 'writev':writev, 'len':len, 'chunk':chunk, 'encoding':encoding, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['len', 'writev', 'state', 'encoding', 'cb', 'stream', 'chunk'])
                    var.get('state').put('writelen', var.get('len'))
                    var.get('state').put('writecb', var.get('cb'))
                    var.get('state').put('writing', Js(True))
                    var.get('state').put('sync', Js(True))
                    if var.get('state').get('destroyed'):
                        var.get('state').callprop('onwrite', var.get('ERR_STREAM_DESTROYED').create(Js('write')))
                    else:
                        if var.get('writev'):
                            var.get('stream').callprop('_writev', var.get('chunk'), var.get('state').get('onwrite'))
                        else:
                            var.get('stream').callprop('_write', var.get('chunk'), var.get('encoding'), var.get('state').get('onwrite'))
                    var.get('state').put('sync', Js(False))
                PyJsHoisted_doWrite_.func_name = 'doWrite'
                var.put('doWrite', PyJsHoisted_doWrite_)
                @Js
                def PyJsHoisted_onwriteError_(stream, state, sync, er, cb, this, arguments, var=var):
                    var = Scope({'stream':stream, 'state':state, 'sync':sync, 'er':er, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['er', 'state', 'sync', 'cb', 'stream'])
                    var.get('state').put('pendingcb',Js(var.get('state').get('pendingcb').to_number())-Js(1))
                    if var.get('sync'):
                        var.get('process').callprop('nextTick', var.get('cb'), var.get('er'))
                        var.get('process').callprop('nextTick', var.get('finishMaybe'), var.get('stream'), var.get('state'))
                        var.get('stream').get('_writableState').put('errorEmitted', Js(True))
                        var.get('errorOrDestroy')(var.get('stream'), var.get('er'))
                    else:
                        var.get('cb')(var.get('er'))
                        var.get('stream').get('_writableState').put('errorEmitted', Js(True))
                        var.get('errorOrDestroy')(var.get('stream'), var.get('er'))
                        var.get('finishMaybe')(var.get('stream'), var.get('state'))
                PyJsHoisted_onwriteError_.func_name = 'onwriteError'
                var.put('onwriteError', PyJsHoisted_onwriteError_)
                @Js
                def PyJsHoisted_onwriteStateUpdate_(state, this, arguments, var=var):
                    var = Scope({'state':state, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state'])
                    var.get('state').put('writing', Js(False))
                    var.get('state').put('writecb', var.get(u"null"))
                    var.get('state').put('length', var.get('state').get('writelen'), '-')
                    var.get('state').put('writelen', Js(0.0))
                PyJsHoisted_onwriteStateUpdate_.func_name = 'onwriteStateUpdate'
                var.put('onwriteStateUpdate', PyJsHoisted_onwriteStateUpdate_)
                @Js
                def PyJsHoisted_onwrite_(stream, er, this, arguments, var=var):
                    var = Scope({'stream':stream, 'er':er, 'this':this, 'arguments':arguments}, var)
                    var.registers(['er', 'state', 'finished', 'sync', 'cb', 'stream'])
                    var.put('state', var.get('stream').get('_writableState'))
                    var.put('sync', var.get('state').get('sync'))
                    var.put('cb', var.get('state').get('writecb'))
                    if PyJsStrictNeq(var.get('cb',throw=False).typeof(),Js('function')):
                        PyJsTempException = JsToPyException(var.get('ERR_MULTIPLE_CALLBACK').create())
                        raise PyJsTempException
                    var.get('onwriteStateUpdate')(var.get('state'))
                    if var.get('er'):
                        var.get('onwriteError')(var.get('stream'), var.get('state'), var.get('sync'), var.get('er'), var.get('cb'))
                    else:
                        var.put('finished', (var.get('needFinish')(var.get('state')) or var.get('stream').get('destroyed')))
                        if (((var.get('finished').neg() and var.get('state').get('corked').neg()) and var.get('state').get('bufferProcessing').neg()) and var.get('state').get('bufferedRequest')):
                            var.get('clearBuffer')(var.get('stream'), var.get('state'))
                        if var.get('sync'):
                            var.get('process').callprop('nextTick', var.get('afterWrite'), var.get('stream'), var.get('state'), var.get('finished'), var.get('cb'))
                        else:
                            var.get('afterWrite')(var.get('stream'), var.get('state'), var.get('finished'), var.get('cb'))
                PyJsHoisted_onwrite_.func_name = 'onwrite'
                var.put('onwrite', PyJsHoisted_onwrite_)
                @Js
                def PyJsHoisted_afterWrite_(stream, state, finished, cb, this, arguments, var=var):
                    var = Scope({'stream':stream, 'state':state, 'finished':finished, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state', 'finished', 'stream', 'cb'])
                    if var.get('finished').neg():
                        var.get('onwriteDrain')(var.get('stream'), var.get('state'))
                    (var.get('state').put('pendingcb',Js(var.get('state').get('pendingcb').to_number())-Js(1))+Js(1))
                    var.get('cb')()
                    var.get('finishMaybe')(var.get('stream'), var.get('state'))
                PyJsHoisted_afterWrite_.func_name = 'afterWrite'
                var.put('afterWrite', PyJsHoisted_afterWrite_)
                @Js
                def PyJsHoisted_onwriteDrain_(stream, state, this, arguments, var=var):
                    var = Scope({'stream':stream, 'state':state, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state', 'stream'])
                    if (PyJsStrictEq(var.get('state').get('length'),Js(0.0)) and var.get('state').get('needDrain')):
                        var.get('state').put('needDrain', Js(False))
                        var.get('stream').callprop('emit', Js('drain'))
                PyJsHoisted_onwriteDrain_.func_name = 'onwriteDrain'
                var.put('onwriteDrain', PyJsHoisted_onwriteDrain_)
                @Js
                def PyJsHoisted_clearBuffer_(stream, state, this, arguments, var=var):
                    var = Scope({'stream':stream, 'state':state, 'this':this, 'arguments':arguments}, var)
                    var.registers(['entry', 'len', 'holder', 'buffer', 'state', 'count', 'allBuffers', 'encoding', 'cb', 'l', 'stream', 'chunk'])
                    var.get('state').put('bufferProcessing', Js(True))
                    var.put('entry', var.get('state').get('bufferedRequest'))
                    if ((var.get('stream').get('_writev') and var.get('entry')) and var.get('entry').get('next')):
                        var.put('l', var.get('state').get('bufferedRequestCount'))
                        var.put('buffer', var.get('Array').create(var.get('l')))
                        var.put('holder', var.get('state').get('corkedRequestsFree'))
                        var.get('holder').put('entry', var.get('entry'))
                        var.put('count', Js(0.0))
                        var.put('allBuffers', Js(True))
                        while var.get('entry'):
                            var.get('buffer').put(var.get('count'), var.get('entry'))
                            if var.get('entry').get('isBuf').neg():
                                var.put('allBuffers', Js(False))
                            var.put('entry', var.get('entry').get('next'))
                            var.put('count', Js(1.0), '+')
                        var.get('buffer').put('allBuffers', var.get('allBuffers'))
                        var.get('doWrite')(var.get('stream'), var.get('state'), Js(True), var.get('state').get('length'), var.get('buffer'), Js(''), var.get('holder').get('finish'))
                        (var.get('state').put('pendingcb',Js(var.get('state').get('pendingcb').to_number())+Js(1))-Js(1))
                        var.get('state').put('lastBufferedRequest', var.get(u"null"))
                        if var.get('holder').get('next'):
                            var.get('state').put('corkedRequestsFree', var.get('holder').get('next'))
                            var.get('holder').put('next', var.get(u"null"))
                        else:
                            var.get('state').put('corkedRequestsFree', var.get('CorkedRequest').create(var.get('state')))
                        var.get('state').put('bufferedRequestCount', Js(0.0))
                    else:
                        while var.get('entry'):
                            var.put('chunk', var.get('entry').get('chunk'))
                            var.put('encoding', var.get('entry').get('encoding'))
                            var.put('cb', var.get('entry').get('callback'))
                            var.put('len', (Js(1.0) if var.get('state').get('objectMode') else var.get('chunk').get('length')))
                            var.get('doWrite')(var.get('stream'), var.get('state'), Js(False), var.get('len'), var.get('chunk'), var.get('encoding'), var.get('cb'))
                            var.put('entry', var.get('entry').get('next'))
                            (var.get('state').put('bufferedRequestCount',Js(var.get('state').get('bufferedRequestCount').to_number())-Js(1))+Js(1))
                            if var.get('state').get('writing'):
                                break
                        if PyJsStrictEq(var.get('entry'),var.get(u"null")):
                            var.get('state').put('lastBufferedRequest', var.get(u"null"))
                    var.get('state').put('bufferedRequest', var.get('entry'))
                    var.get('state').put('bufferProcessing', Js(False))
                PyJsHoisted_clearBuffer_.func_name = 'clearBuffer'
                var.put('clearBuffer', PyJsHoisted_clearBuffer_)
                @Js
                def PyJsHoisted_needFinish_(state, this, arguments, var=var):
                    var = Scope({'state':state, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state'])
                    return ((((var.get('state').get('ending') and PyJsStrictEq(var.get('state').get('length'),Js(0.0))) and PyJsStrictEq(var.get('state').get('bufferedRequest'),var.get(u"null"))) and var.get('state').get('finished').neg()) and var.get('state').get('writing').neg())
                PyJsHoisted_needFinish_.func_name = 'needFinish'
                var.put('needFinish', PyJsHoisted_needFinish_)
                @Js
                def PyJsHoisted_callFinal_(stream, state, this, arguments, var=var):
                    var = Scope({'stream':stream, 'state':state, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state', 'stream'])
                    @Js
                    def PyJs_anonymous_2478_(err, this, arguments, var=var):
                        var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                        var.registers(['err'])
                        (var.get('state').put('pendingcb',Js(var.get('state').get('pendingcb').to_number())-Js(1))+Js(1))
                        if var.get('err'):
                            var.get('errorOrDestroy')(var.get('stream'), var.get('err'))
                        var.get('state').put('prefinished', Js(True))
                        var.get('stream').callprop('emit', Js('prefinish'))
                        var.get('finishMaybe')(var.get('stream'), var.get('state'))
                    PyJs_anonymous_2478_._set_name('anonymous')
                    var.get('stream').callprop('_final', PyJs_anonymous_2478_)
                PyJsHoisted_callFinal_.func_name = 'callFinal'
                var.put('callFinal', PyJsHoisted_callFinal_)
                @Js
                def PyJsHoisted_prefinish_(stream, state, this, arguments, var=var):
                    var = Scope({'stream':stream, 'state':state, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state', 'stream'])
                    if (var.get('state').get('prefinished').neg() and var.get('state').get('finalCalled').neg()):
                        if (PyJsStrictEq(var.get('stream').get('_final').typeof(),Js('function')) and var.get('state').get('destroyed').neg()):
                            (var.get('state').put('pendingcb',Js(var.get('state').get('pendingcb').to_number())+Js(1))-Js(1))
                            var.get('state').put('finalCalled', Js(True))
                            var.get('process').callprop('nextTick', var.get('callFinal'), var.get('stream'), var.get('state'))
                        else:
                            var.get('state').put('prefinished', Js(True))
                            var.get('stream').callprop('emit', Js('prefinish'))
                PyJsHoisted_prefinish_.func_name = 'prefinish'
                var.put('prefinish', PyJsHoisted_prefinish_)
                @Js
                def PyJsHoisted_finishMaybe_(stream, state, this, arguments, var=var):
                    var = Scope({'stream':stream, 'state':state, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state', 'need', 'rState', 'stream'])
                    var.put('need', var.get('needFinish')(var.get('state')))
                    if var.get('need'):
                        var.get('prefinish')(var.get('stream'), var.get('state'))
                        if PyJsStrictEq(var.get('state').get('pendingcb'),Js(0.0)):
                            var.get('state').put('finished', Js(True))
                            var.get('stream').callprop('emit', Js('finish'))
                            if var.get('state').get('autoDestroy'):
                                var.put('rState', var.get('stream').get('_readableState'))
                                if (var.get('rState').neg() or (var.get('rState').get('autoDestroy') and var.get('rState').get('endEmitted'))):
                                    var.get('stream').callprop('destroy')
                    return var.get('need')
                PyJsHoisted_finishMaybe_.func_name = 'finishMaybe'
                var.put('finishMaybe', PyJsHoisted_finishMaybe_)
                @Js
                def PyJsHoisted_endWritable_(stream, state, cb, this, arguments, var=var):
                    var = Scope({'stream':stream, 'state':state, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state', 'stream', 'cb'])
                    var.get('state').put('ending', Js(True))
                    var.get('finishMaybe')(var.get('stream'), var.get('state'))
                    if var.get('cb'):
                        if var.get('state').get('finished'):
                            var.get('process').callprop('nextTick', var.get('cb'))
                        else:
                            var.get('stream').callprop('once', Js('finish'), var.get('cb'))
                    var.get('state').put('ended', Js(True))
                    var.get('stream').put('writable', Js(False))
                PyJsHoisted_endWritable_.func_name = 'endWritable'
                var.put('endWritable', PyJsHoisted_endWritable_)
                @Js
                def PyJsHoisted_onCorkedFinish_(corkReq, state, err, this, arguments, var=var):
                    var = Scope({'corkReq':corkReq, 'state':state, 'err':err, 'this':this, 'arguments':arguments}, var)
                    var.registers(['entry', 'state', 'err', 'cb', 'corkReq'])
                    var.put('entry', var.get('corkReq').get('entry'))
                    var.get('corkReq').put('entry', var.get(u"null"))
                    while var.get('entry'):
                        var.put('cb', var.get('entry').get('callback'))
                        (var.get('state').put('pendingcb',Js(var.get('state').get('pendingcb').to_number())-Js(1))+Js(1))
                        var.get('cb')(var.get('err'))
                        var.put('entry', var.get('entry').get('next'))
                    var.get('state').get('corkedRequestsFree').put('next', var.get('corkReq'))
                PyJsHoisted_onCorkedFinish_.func_name = 'onCorkedFinish'
                var.put('onCorkedFinish', PyJsHoisted_onCorkedFinish_)
                Js('use strict')
                var.get('module').put('exports', var.get('Writable'))
                pass
                pass
                pass
                var.get('Writable').put('WritableState', var.get('WritableState'))
                var.put('internalUtil', Js({'deprecate':var.get('require')(Js('util-deprecate'))}))
                var.put('Stream', var.get('require')(Js('./internal/streams/stream')))
                var.put('Buffer', var.get('require')(Js('buffer')).get('Buffer'))
                @Js
                def PyJs_anonymous_2461_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    pass
                PyJs_anonymous_2461_._set_name('anonymous')
                var.put('OurUint8Array', (var.get('global').get('Uint8Array') or PyJs_anonymous_2461_))
                pass
                pass
                var.put('destroyImpl', var.get('require')(Js('./internal/streams/destroy')))
                var.put('_require', var.get('require')(Js('./internal/streams/state')))
                var.put('getHighWaterMark', var.get('_require').get('getHighWaterMark'))
                var.put('_require$codes', var.get('require')(Js('../errors')).get('codes'))
                var.put('ERR_INVALID_ARG_TYPE', var.get('_require$codes').get('ERR_INVALID_ARG_TYPE'))
                var.put('ERR_METHOD_NOT_IMPLEMENTED', var.get('_require$codes').get('ERR_METHOD_NOT_IMPLEMENTED'))
                var.put('ERR_MULTIPLE_CALLBACK', var.get('_require$codes').get('ERR_MULTIPLE_CALLBACK'))
                var.put('ERR_STREAM_CANNOT_PIPE', var.get('_require$codes').get('ERR_STREAM_CANNOT_PIPE'))
                var.put('ERR_STREAM_DESTROYED', var.get('_require$codes').get('ERR_STREAM_DESTROYED'))
                var.put('ERR_STREAM_NULL_VALUES', var.get('_require$codes').get('ERR_STREAM_NULL_VALUES'))
                var.put('ERR_STREAM_WRITE_AFTER_END', var.get('_require$codes').get('ERR_STREAM_WRITE_AFTER_END'))
                var.put('ERR_UNKNOWN_ENCODING', var.get('_require$codes').get('ERR_UNKNOWN_ENCODING'))
                var.put('errorOrDestroy', var.get('destroyImpl').get('errorOrDestroy'))
                var.get('require')(Js('inherits'))(var.get('Writable'), var.get('Stream'))
                pass
                pass
                @Js
                def PyJs_getBuffer_2463_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'getBuffer':PyJs_getBuffer_2463_}, var)
                    var.registers(['out', 'current'])
                    var.put('current', var.get(u"this").get('bufferedRequest'))
                    var.put('out', Js([]))
                    while var.get('current'):
                        var.get('out').callprop('push', var.get('current'))
                        var.put('current', var.get('current').get('next'))
                    return var.get('out')
                PyJs_getBuffer_2463_._set_name('getBuffer')
                var.get('WritableState').get('prototype').put('getBuffer', PyJs_getBuffer_2463_)
                @Js
                def PyJs_anonymous_2464_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    try:
                        @Js
                        def PyJs_writableStateBufferGetter_2465_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments, 'writableStateBufferGetter':PyJs_writableStateBufferGetter_2465_}, var)
                            var.registers([])
                            return var.get(u"this").callprop('getBuffer')
                        PyJs_writableStateBufferGetter_2465_._set_name('writableStateBufferGetter')
                        var.get('Object').callprop('defineProperty', var.get('WritableState').get('prototype'), Js('buffer'), Js({'get':var.get('internalUtil').callprop('deprecate', PyJs_writableStateBufferGetter_2465_, (Js('_writableState.buffer is deprecated. Use _writableState.getBuffer ')+Js('instead.')), Js('DEP0003'))}))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_5f_7899086 = var.own.get('_')
                        var.force_own_put('_', PyExceptionToJs(PyJsTempException))
                        try:
                            pass
                        finally:
                            if PyJsHolder_5f_7899086 is not None:
                                var.own['_'] = PyJsHolder_5f_7899086
                            else:
                                del var.own['_']
                            del PyJsHolder_5f_7899086
                PyJs_anonymous_2464_._set_name('anonymous')
                PyJs_anonymous_2464_()
                pass
                if ((PyJsStrictEq(var.get('Symbol',throw=False).typeof(),Js('function')) and var.get('Symbol').get('hasInstance')) and PyJsStrictEq(var.get('Function').get('prototype').get(var.get('Symbol').get('hasInstance')).typeof(),Js('function'))):
                    var.put('realHasInstance', var.get('Function').get('prototype').get(var.get('Symbol').get('hasInstance')))
                    @Js
                    def PyJs_value_2466_(object, this, arguments, var=var):
                        var = Scope({'object':object, 'this':this, 'arguments':arguments, 'value':PyJs_value_2466_}, var)
                        var.registers(['object'])
                        if var.get('realHasInstance').callprop('call', var.get(u"this"), var.get('object')):
                            return Js(True)
                        if PyJsStrictNeq(var.get(u"this"),var.get('Writable')):
                            return Js(False)
                        return (var.get('object') and var.get('object').get('_writableState').instanceof(var.get('WritableState')))
                    PyJs_value_2466_._set_name('value')
                    var.get('Object').callprop('defineProperty', var.get('Writable'), var.get('Symbol').get('hasInstance'), Js({'value':PyJs_value_2466_}))
                else:
                    @Js
                    def PyJs_realHasInstance_2467_(object, this, arguments, var=var):
                        var = Scope({'object':object, 'this':this, 'arguments':arguments, 'realHasInstance':PyJs_realHasInstance_2467_}, var)
                        var.registers(['object'])
                        return var.get('object').instanceof(var.get(u"this"))
                    PyJs_realHasInstance_2467_._set_name('realHasInstance')
                    var.put('realHasInstance', PyJs_realHasInstance_2467_)
                pass
                @Js
                def PyJs_anonymous_2468_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.get('errorOrDestroy')(var.get(u"this"), var.get('ERR_STREAM_CANNOT_PIPE').create())
                PyJs_anonymous_2468_._set_name('anonymous')
                var.get('Writable').get('prototype').put('pipe', PyJs_anonymous_2468_)
                pass
                pass
                @Js
                def PyJs_anonymous_2469_(chunk, encoding, cb, this, arguments, var=var):
                    var = Scope({'chunk':chunk, 'encoding':encoding, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['ret', 'state', 'encoding', 'cb', 'isBuf', 'chunk'])
                    var.put('state', var.get(u"this").get('_writableState'))
                    var.put('ret', Js(False))
                    var.put('isBuf', (var.get('state').get('objectMode').neg() and var.get('_isUint8Array')(var.get('chunk'))))
                    if (var.get('isBuf') and var.get('Buffer').callprop('isBuffer', var.get('chunk')).neg()):
                        var.put('chunk', var.get('_uint8ArrayToBuffer')(var.get('chunk')))
                    if PyJsStrictEq(var.get('encoding',throw=False).typeof(),Js('function')):
                        var.put('cb', var.get('encoding'))
                        var.put('encoding', var.get(u"null"))
                    if var.get('isBuf'):
                        var.put('encoding', Js('buffer'))
                    else:
                        if var.get('encoding').neg():
                            var.put('encoding', var.get('state').get('defaultEncoding'))
                    if PyJsStrictNeq(var.get('cb',throw=False).typeof(),Js('function')):
                        var.put('cb', var.get('nop'))
                    if var.get('state').get('ending'):
                        var.get('writeAfterEnd')(var.get(u"this"), var.get('cb'))
                    else:
                        if (var.get('isBuf') or var.get('validChunk')(var.get(u"this"), var.get('state'), var.get('chunk'), var.get('cb'))):
                            (var.get('state').put('pendingcb',Js(var.get('state').get('pendingcb').to_number())+Js(1))-Js(1))
                            var.put('ret', var.get('writeOrBuffer')(var.get(u"this"), var.get('state'), var.get('isBuf'), var.get('chunk'), var.get('encoding'), var.get('cb')))
                    return var.get('ret')
                PyJs_anonymous_2469_._set_name('anonymous')
                var.get('Writable').get('prototype').put('write', PyJs_anonymous_2469_)
                @Js
                def PyJs_anonymous_2470_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    (var.get(u"this").get('_writableState').put('corked',Js(var.get(u"this").get('_writableState').get('corked').to_number())+Js(1))-Js(1))
                PyJs_anonymous_2470_._set_name('anonymous')
                var.get('Writable').get('prototype').put('cork', PyJs_anonymous_2470_)
                @Js
                def PyJs_anonymous_2471_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers(['state'])
                    var.put('state', var.get(u"this").get('_writableState'))
                    if var.get('state').get('corked'):
                        (var.get('state').put('corked',Js(var.get('state').get('corked').to_number())-Js(1))+Js(1))
                        if (((var.get('state').get('writing').neg() and var.get('state').get('corked').neg()) and var.get('state').get('bufferProcessing').neg()) and var.get('state').get('bufferedRequest')):
                            var.get('clearBuffer')(var.get(u"this"), var.get('state'))
                PyJs_anonymous_2471_._set_name('anonymous')
                var.get('Writable').get('prototype').put('uncork', PyJs_anonymous_2471_)
                @Js
                def PyJs_setDefaultEncoding_2472_(encoding, this, arguments, var=var):
                    var = Scope({'encoding':encoding, 'this':this, 'arguments':arguments, 'setDefaultEncoding':PyJs_setDefaultEncoding_2472_}, var)
                    var.registers(['encoding'])
                    if PyJsStrictEq(var.get('encoding',throw=False).typeof(),Js('string')):
                        var.put('encoding', var.get('encoding').callprop('toLowerCase'))
                    if (Js([Js('hex'), Js('utf8'), Js('utf-8'), Js('ascii'), Js('binary'), Js('base64'), Js('ucs2'), Js('ucs-2'), Js('utf16le'), Js('utf-16le'), Js('raw')]).callprop('indexOf', (var.get('encoding')+Js('')).callprop('toLowerCase'))>(-Js(1.0))).neg():
                        PyJsTempException = JsToPyException(var.get('ERR_UNKNOWN_ENCODING').create(var.get('encoding')))
                        raise PyJsTempException
                    var.get(u"this").get('_writableState').put('defaultEncoding', var.get('encoding'))
                    return var.get(u"this")
                PyJs_setDefaultEncoding_2472_._set_name('setDefaultEncoding')
                var.get('Writable').get('prototype').put('setDefaultEncoding', PyJs_setDefaultEncoding_2472_)
                @Js
                def PyJs_get_2473_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2473_}, var)
                    var.registers([])
                    return (var.get(u"this").get('_writableState') and var.get(u"this").get('_writableState').callprop('getBuffer'))
                PyJs_get_2473_._set_name('get')
                var.get('Object').callprop('defineProperty', var.get('Writable').get('prototype'), Js('writableBuffer'), Js({'enumerable':Js(False),'get':PyJs_get_2473_}))
                pass
                @Js
                def PyJs_get_2474_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2474_}, var)
                    var.registers([])
                    return var.get(u"this").get('_writableState').get('highWaterMark')
                PyJs_get_2474_._set_name('get')
                var.get('Object').callprop('defineProperty', var.get('Writable').get('prototype'), Js('writableHighWaterMark'), Js({'enumerable':Js(False),'get':PyJs_get_2474_}))
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                @Js
                def PyJs_anonymous_2475_(chunk, encoding, cb, this, arguments, var=var):
                    var = Scope({'chunk':chunk, 'encoding':encoding, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['encoding', 'cb', 'chunk'])
                    var.get('cb')(var.get('ERR_METHOD_NOT_IMPLEMENTED').create(Js('_write()')))
                PyJs_anonymous_2475_._set_name('anonymous')
                var.get('Writable').get('prototype').put('_write', PyJs_anonymous_2475_)
                var.get('Writable').get('prototype').put('_writev', var.get(u"null"))
                @Js
                def PyJs_anonymous_2476_(chunk, encoding, cb, this, arguments, var=var):
                    var = Scope({'chunk':chunk, 'encoding':encoding, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state', 'encoding', 'cb', 'chunk'])
                    var.put('state', var.get(u"this").get('_writableState'))
                    if PyJsStrictEq(var.get('chunk',throw=False).typeof(),Js('function')):
                        var.put('cb', var.get('chunk'))
                        var.put('chunk', var.get(u"null"))
                        var.put('encoding', var.get(u"null"))
                    else:
                        if PyJsStrictEq(var.get('encoding',throw=False).typeof(),Js('function')):
                            var.put('cb', var.get('encoding'))
                            var.put('encoding', var.get(u"null"))
                    if (PyJsStrictNeq(var.get('chunk'),var.get(u"null")) and PyJsStrictNeq(var.get('chunk'),var.get('undefined'))):
                        var.get(u"this").callprop('write', var.get('chunk'), var.get('encoding'))
                    if var.get('state').get('corked'):
                        var.get('state').put('corked', Js(1.0))
                        var.get(u"this").callprop('uncork')
                    if var.get('state').get('ending').neg():
                        var.get('endWritable')(var.get(u"this"), var.get('state'), var.get('cb'))
                    return var.get(u"this")
                PyJs_anonymous_2476_._set_name('anonymous')
                var.get('Writable').get('prototype').put('end', PyJs_anonymous_2476_)
                @Js
                def PyJs_get_2477_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2477_}, var)
                    var.registers([])
                    return var.get(u"this").get('_writableState').get('length')
                PyJs_get_2477_._set_name('get')
                var.get('Object').callprop('defineProperty', var.get('Writable').get('prototype'), Js('writableLength'), Js({'enumerable':Js(False),'get':PyJs_get_2477_}))
                pass
                pass
                pass
                pass
                pass
                pass
                @Js
                def PyJs_get_2479_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2479_}, var)
                    var.registers([])
                    if PyJsStrictEq(var.get(u"this").get('_writableState'),var.get('undefined')):
                        return Js(False)
                    return var.get(u"this").get('_writableState').get('destroyed')
                PyJs_get_2479_._set_name('get')
                @Js
                def PyJs_set_2480_(value, this, arguments, var=var):
                    var = Scope({'value':value, 'this':this, 'arguments':arguments, 'set':PyJs_set_2480_}, var)
                    var.registers(['value'])
                    if var.get(u"this").get('_writableState').neg():
                        return var.get('undefined')
                    var.get(u"this").get('_writableState').put('destroyed', var.get('value'))
                PyJs_set_2480_._set_name('set')
                var.get('Object').callprop('defineProperty', var.get('Writable').get('prototype'), Js('destroyed'), Js({'enumerable':Js(False),'get':PyJs_get_2479_,'set':PyJs_set_2480_}))
                var.get('Writable').get('prototype').put('destroy', var.get('destroyImpl').get('destroy'))
                var.get('Writable').get('prototype').put('_undestroy', var.get('destroyImpl').get('undestroy'))
                @Js
                def PyJs_anonymous_2481_(err, cb, this, arguments, var=var):
                    var = Scope({'err':err, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['err', 'cb'])
                    var.get('cb')(var.get('err'))
                PyJs_anonymous_2481_._set_name('anonymous')
                var.get('Writable').get('prototype').put('_destroy', PyJs_anonymous_2481_)
            PyJs_anonymous_2459_._set_name('anonymous')
            PyJs_anonymous_2459_.callprop('call', var.get(u"this"))
        PyJs_anonymous_2458_._set_name('anonymous')
        PyJs_anonymous_2458_.callprop('call', var.get(u"this"), var.get('require')(Js('_process')), (var.get('global') if PyJsStrictNeq(var.get('global',throw=False).typeof(),Js('undefined')) else (var.get('self') if PyJsStrictNeq(var.get('self',throw=False).typeof(),Js('undefined')) else (var.get('window') if PyJsStrictNeq(var.get('window',throw=False).typeof(),Js('undefined')) else Js({})))))
    PyJs_anonymous_2457_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2482_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_2483_(process, this, arguments, var=var):
            var = Scope({'process':process, 'this':this, 'arguments':arguments}, var)
            var.registers(['process'])
            @Js
            def PyJs_anonymous_2484_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['onReadable', 'wrapForNext', 'kLastResolve', 'kStream', 'readAndResolve', 'createReadableStreamAsyncIterator', 'AsyncIteratorPrototype', 'finished', 'kEnded', 'kError', 'ReadableStreamAsyncIteratorPrototype', 'createIterResult', 'kLastPromise', '_Object$setPrototypeO', 'kHandlePromise', 'kLastReject', '_defineProperty'])
                @Js
                def PyJsHoisted__defineProperty_(obj, key, value, this, arguments, var=var):
                    var = Scope({'obj':obj, 'key':key, 'value':value, 'this':this, 'arguments':arguments}, var)
                    var.registers(['key', 'obj', 'value'])
                    if var.get('obj').contains(var.get('key')):
                        var.get('Object').callprop('defineProperty', var.get('obj'), var.get('key'), Js({'value':var.get('value'),'enumerable':Js(True),'configurable':Js(True),'writable':Js(True)}))
                    else:
                        var.get('obj').put(var.get('key'), var.get('value'))
                    return var.get('obj')
                PyJsHoisted__defineProperty_.func_name = '_defineProperty'
                var.put('_defineProperty', PyJsHoisted__defineProperty_)
                @Js
                def PyJsHoisted_createIterResult_(value, done, this, arguments, var=var):
                    var = Scope({'value':value, 'done':done, 'this':this, 'arguments':arguments}, var)
                    var.registers(['done', 'value'])
                    return Js({'value':var.get('value'),'done':var.get('done')})
                PyJsHoisted_createIterResult_.func_name = 'createIterResult'
                var.put('createIterResult', PyJsHoisted_createIterResult_)
                @Js
                def PyJsHoisted_readAndResolve_(iter, this, arguments, var=var):
                    var = Scope({'iter':iter, 'this':this, 'arguments':arguments}, var)
                    var.registers(['resolve', 'data', 'iter'])
                    var.put('resolve', var.get('iter').get(var.get('kLastResolve')))
                    if PyJsStrictNeq(var.get('resolve'),var.get(u"null")):
                        var.put('data', var.get('iter').get(var.get('kStream')).callprop('read'))
                        if PyJsStrictNeq(var.get('data'),var.get(u"null")):
                            var.get('iter').put(var.get('kLastPromise'), var.get(u"null"))
                            var.get('iter').put(var.get('kLastResolve'), var.get(u"null"))
                            var.get('iter').put(var.get('kLastReject'), var.get(u"null"))
                            var.get('resolve')(var.get('createIterResult')(var.get('data'), Js(False)))
                PyJsHoisted_readAndResolve_.func_name = 'readAndResolve'
                var.put('readAndResolve', PyJsHoisted_readAndResolve_)
                @Js
                def PyJsHoisted_onReadable_(iter, this, arguments, var=var):
                    var = Scope({'iter':iter, 'this':this, 'arguments':arguments}, var)
                    var.registers(['iter'])
                    var.get('process').callprop('nextTick', var.get('readAndResolve'), var.get('iter'))
                PyJsHoisted_onReadable_.func_name = 'onReadable'
                var.put('onReadable', PyJsHoisted_onReadable_)
                @Js
                def PyJsHoisted_wrapForNext_(lastPromise, iter, this, arguments, var=var):
                    var = Scope({'lastPromise':lastPromise, 'iter':iter, 'this':this, 'arguments':arguments}, var)
                    var.registers(['lastPromise', 'iter'])
                    @Js
                    def PyJs_anonymous_2485_(resolve, reject, this, arguments, var=var):
                        var = Scope({'resolve':resolve, 'reject':reject, 'this':this, 'arguments':arguments}, var)
                        var.registers(['resolve', 'reject'])
                        @Js
                        def PyJs_anonymous_2486_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers([])
                            if var.get('iter').get(var.get('kEnded')):
                                var.get('resolve')(var.get('createIterResult')(var.get('undefined'), Js(True)))
                                return var.get('undefined')
                            var.get('iter').callprop(var.get('kHandlePromise'), var.get('resolve'), var.get('reject'))
                        PyJs_anonymous_2486_._set_name('anonymous')
                        var.get('lastPromise').callprop('then', PyJs_anonymous_2486_, var.get('reject'))
                    PyJs_anonymous_2485_._set_name('anonymous')
                    return PyJs_anonymous_2485_
                PyJsHoisted_wrapForNext_.func_name = 'wrapForNext'
                var.put('wrapForNext', PyJsHoisted_wrapForNext_)
                Js('use strict')
                pass
                pass
                var.put('finished', var.get('require')(Js('./end-of-stream')))
                var.put('kLastResolve', var.get('Symbol')(Js('lastResolve')))
                var.put('kLastReject', var.get('Symbol')(Js('lastReject')))
                var.put('kError', var.get('Symbol')(Js('error')))
                var.put('kEnded', var.get('Symbol')(Js('ended')))
                var.put('kLastPromise', var.get('Symbol')(Js('lastPromise')))
                var.put('kHandlePromise', var.get('Symbol')(Js('handlePromise')))
                var.put('kStream', var.get('Symbol')(Js('stream')))
                pass
                pass
                pass
                pass
                @Js
                def PyJs_anonymous_2487_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    pass
                PyJs_anonymous_2487_._set_name('anonymous')
                var.put('AsyncIteratorPrototype', var.get('Object').callprop('getPrototypeOf', PyJs_anonymous_2487_))
                def PyJs_LONG_2497_(var=var):
                    def PyJs_Object_2488_():
                        @Js
                        def PyJs_next_2490_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments, 'next':PyJs_next_2490_}, var)
                            var.registers(['lastPromise', 'error', 'promise', 'data', '_this'])
                            var.put('_this', var.get(u"this"))
                            var.put('error', var.get(u"this").get(var.get('kError')))
                            if PyJsStrictNeq(var.get('error'),var.get(u"null")):
                                return var.get('Promise').callprop('reject', var.get('error'))
                            if var.get(u"this").get(var.get('kEnded')):
                                return var.get('Promise').callprop('resolve', var.get('createIterResult')(var.get('undefined'), Js(True)))
                            if var.get(u"this").get(var.get('kStream')).get('destroyed'):
                                @Js
                                def PyJs_anonymous_2491_(resolve, reject, this, arguments, var=var):
                                    var = Scope({'resolve':resolve, 'reject':reject, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['resolve', 'reject'])
                                    @Js
                                    def PyJs_anonymous_2492_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        if var.get('_this').get(var.get('kError')):
                                            var.get('reject')(var.get('_this').get(var.get('kError')))
                                        else:
                                            var.get('resolve')(var.get('createIterResult')(var.get('undefined'), Js(True)))
                                    PyJs_anonymous_2492_._set_name('anonymous')
                                    var.get('process').callprop('nextTick', PyJs_anonymous_2492_)
                                PyJs_anonymous_2491_._set_name('anonymous')
                                return var.get('Promise').create(PyJs_anonymous_2491_)
                            var.put('lastPromise', var.get(u"this").get(var.get('kLastPromise')))
                            pass
                            if var.get('lastPromise'):
                                var.put('promise', var.get('Promise').create(var.get('wrapForNext')(var.get('lastPromise'), var.get(u"this"))))
                            else:
                                var.put('data', var.get(u"this").get(var.get('kStream')).callprop('read'))
                                if PyJsStrictNeq(var.get('data'),var.get(u"null")):
                                    return var.get('Promise').callprop('resolve', var.get('createIterResult')(var.get('data'), Js(False)))
                                var.put('promise', var.get('Promise').create(var.get(u"this").get(var.get('kHandlePromise'))))
                            var.get(u"this").put(var.get('kLastPromise'), var.get('promise'))
                            return var.get('promise')
                        PyJs_next_2490_._set_name('next')
                        PyJs_Object_2488_ = Js({'next':PyJs_next_2490_})
                        @Js
                        def PyJs_anonymous_2489_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers([])
                            return var.get(u"this").get(var.get('kStream'))
                        PyJs_anonymous_2489_._set_name('anonymous')
                        PyJs_Object_2488_.define_own_property('stream', {"get":PyJs_anonymous_2489_, "configurable":True, "enumerable":True})
                        return PyJs_Object_2488_
                    @Js
                    def PyJs_anonymous_2493_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return var.get(u"this")
                    PyJs_anonymous_2493_._set_name('anonymous')
                    @Js
                    def PyJs__return_2494_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments, '_return':PyJs__return_2494_}, var)
                        var.registers(['_this2'])
                        var.put('_this2', var.get(u"this"))
                        @Js
                        def PyJs_anonymous_2495_(resolve, reject, this, arguments, var=var):
                            var = Scope({'resolve':resolve, 'reject':reject, 'this':this, 'arguments':arguments}, var)
                            var.registers(['resolve', 'reject'])
                            @Js
                            def PyJs_anonymous_2496_(err, this, arguments, var=var):
                                var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                                var.registers(['err'])
                                if var.get('err'):
                                    var.get('reject')(var.get('err'))
                                    return var.get('undefined')
                                var.get('resolve')(var.get('createIterResult')(var.get('undefined'), Js(True)))
                            PyJs_anonymous_2496_._set_name('anonymous')
                            var.get('_this2').get(var.get('kStream')).callprop('destroy', var.get(u"null"), PyJs_anonymous_2496_)
                        PyJs_anonymous_2495_._set_name('anonymous')
                        return var.get('Promise').create(PyJs_anonymous_2495_)
                    PyJs__return_2494_._set_name('_return')
                    return var.get('Object').callprop('setPrototypeOf', PyJsComma(PyJsComma(PyJsComma(var.put('_Object$setPrototypeO', PyJs_Object_2488_()),var.get('_defineProperty')(var.get('_Object$setPrototypeO'), var.get('Symbol').get('asyncIterator'), PyJs_anonymous_2493_)),var.get('_defineProperty')(var.get('_Object$setPrototypeO'), Js('return'), PyJs__return_2494_)),var.get('_Object$setPrototypeO')), var.get('AsyncIteratorPrototype'))
                var.put('ReadableStreamAsyncIteratorPrototype', PyJs_LONG_2497_())
                @Js
                def PyJs_createReadableStreamAsyncIterator_2498_(stream, this, arguments, var=var):
                    var = Scope({'stream':stream, 'this':this, 'arguments':arguments, 'createReadableStreamAsyncIterator':PyJs_createReadableStreamAsyncIterator_2498_}, var)
                    var.registers(['stream', '_Object$create', 'iterator'])
                    pass
                    def PyJs_LONG_2500_(var=var):
                        @Js
                        def PyJs_value_2499_(resolve, reject, this, arguments, var=var):
                            var = Scope({'resolve':resolve, 'reject':reject, 'this':this, 'arguments':arguments, 'value':PyJs_value_2499_}, var)
                            var.registers(['resolve', 'data', 'reject'])
                            var.put('data', var.get('iterator').get(var.get('kStream')).callprop('read'))
                            if var.get('data'):
                                var.get('iterator').put(var.get('kLastPromise'), var.get(u"null"))
                                var.get('iterator').put(var.get('kLastResolve'), var.get(u"null"))
                                var.get('iterator').put(var.get('kLastReject'), var.get(u"null"))
                                var.get('resolve')(var.get('createIterResult')(var.get('data'), Js(False)))
                            else:
                                var.get('iterator').put(var.get('kLastResolve'), var.get('resolve'))
                                var.get('iterator').put(var.get('kLastReject'), var.get('reject'))
                        PyJs_value_2499_._set_name('value')
                        return PyJsComma(PyJsComma(PyJsComma(PyJsComma(PyJsComma(PyJsComma(PyJsComma(var.put('_Object$create', Js({})),var.get('_defineProperty')(var.get('_Object$create'), var.get('kStream'), Js({'value':var.get('stream'),'writable':Js(True)}))),var.get('_defineProperty')(var.get('_Object$create'), var.get('kLastResolve'), Js({'value':var.get(u"null"),'writable':Js(True)}))),var.get('_defineProperty')(var.get('_Object$create'), var.get('kLastReject'), Js({'value':var.get(u"null"),'writable':Js(True)}))),var.get('_defineProperty')(var.get('_Object$create'), var.get('kError'), Js({'value':var.get(u"null"),'writable':Js(True)}))),var.get('_defineProperty')(var.get('_Object$create'), var.get('kEnded'), Js({'value':var.get('stream').get('_readableState').get('endEmitted'),'writable':Js(True)}))),var.get('_defineProperty')(var.get('_Object$create'), var.get('kHandlePromise'), Js({'value':PyJs_value_2499_,'writable':Js(True)}))),var.get('_Object$create'))
                    var.put('iterator', var.get('Object').callprop('create', var.get('ReadableStreamAsyncIteratorPrototype'), PyJs_LONG_2500_()))
                    var.get('iterator').put(var.get('kLastPromise'), var.get(u"null"))
                    @Js
                    def PyJs_anonymous_2501_(err, this, arguments, var=var):
                        var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                        var.registers(['resolve', 'reject', 'err'])
                        if (var.get('err') and PyJsStrictNeq(var.get('err').get('code'),Js('ERR_STREAM_PREMATURE_CLOSE'))):
                            var.put('reject', var.get('iterator').get(var.get('kLastReject')))
                            if PyJsStrictNeq(var.get('reject'),var.get(u"null")):
                                var.get('iterator').put(var.get('kLastPromise'), var.get(u"null"))
                                var.get('iterator').put(var.get('kLastResolve'), var.get(u"null"))
                                var.get('iterator').put(var.get('kLastReject'), var.get(u"null"))
                                var.get('reject')(var.get('err'))
                            var.get('iterator').put(var.get('kError'), var.get('err'))
                            return var.get('undefined')
                        var.put('resolve', var.get('iterator').get(var.get('kLastResolve')))
                        if PyJsStrictNeq(var.get('resolve'),var.get(u"null")):
                            var.get('iterator').put(var.get('kLastPromise'), var.get(u"null"))
                            var.get('iterator').put(var.get('kLastResolve'), var.get(u"null"))
                            var.get('iterator').put(var.get('kLastReject'), var.get(u"null"))
                            var.get('resolve')(var.get('createIterResult')(var.get('undefined'), Js(True)))
                        var.get('iterator').put(var.get('kEnded'), Js(True))
                    PyJs_anonymous_2501_._set_name('anonymous')
                    var.get('finished')(var.get('stream'), PyJs_anonymous_2501_)
                    var.get('stream').callprop('on', Js('readable'), var.get('onReadable').callprop('bind', var.get(u"null"), var.get('iterator')))
                    return var.get('iterator')
                PyJs_createReadableStreamAsyncIterator_2498_._set_name('createReadableStreamAsyncIterator')
                var.put('createReadableStreamAsyncIterator', PyJs_createReadableStreamAsyncIterator_2498_)
                var.get('module').put('exports', var.get('createReadableStreamAsyncIterator'))
            PyJs_anonymous_2484_._set_name('anonymous')
            PyJs_anonymous_2484_.callprop('call', var.get(u"this"))
        PyJs_anonymous_2483_._set_name('anonymous')
        PyJs_anonymous_2483_.callprop('call', var.get(u"this"), var.get('require')(Js('_process')))
    PyJs_anonymous_2482_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2502_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['_require2', 'copyBuffer', 'custom', '_objectSpread', 'module', 'exports', 'ownKeys', '_classCallCheck', '_createClass', '_defineProperties', 'require', '_require', 'Buffer', 'inspect', '_defineProperty'])
        @Js
        def PyJsHoisted_ownKeys_(object, enumerableOnly, this, arguments, var=var):
            var = Scope({'object':object, 'enumerableOnly':enumerableOnly, 'this':this, 'arguments':arguments}, var)
            var.registers(['object', 'enumerableOnly', 'keys', 'symbols'])
            var.put('keys', var.get('Object').callprop('keys', var.get('object')))
            if var.get('Object').get('getOwnPropertySymbols'):
                var.put('symbols', var.get('Object').callprop('getOwnPropertySymbols', var.get('object')))
                if var.get('enumerableOnly'):
                    @Js
                    def PyJs_anonymous_2503_(sym, this, arguments, var=var):
                        var = Scope({'sym':sym, 'this':this, 'arguments':arguments}, var)
                        var.registers(['sym'])
                        return var.get('Object').callprop('getOwnPropertyDescriptor', var.get('object'), var.get('sym')).get('enumerable')
                    PyJs_anonymous_2503_._set_name('anonymous')
                    var.put('symbols', var.get('symbols').callprop('filter', PyJs_anonymous_2503_))
                var.get('keys').get('push').callprop('apply', var.get('keys'), var.get('symbols'))
            return var.get('keys')
        PyJsHoisted_ownKeys_.func_name = 'ownKeys'
        var.put('ownKeys', PyJsHoisted_ownKeys_)
        @Js
        def PyJsHoisted__objectSpread_(target, this, arguments, var=var):
            var = Scope({'target':target, 'this':this, 'arguments':arguments}, var)
            var.registers(['target', 'i', 'source'])
            #for JS loop
            var.put('i', Js(1.0))
            while (var.get('i')<var.get('arguments').get('length')):
                try:
                    var.put('source', (var.get('arguments').get(var.get('i')) if (var.get('arguments').get(var.get('i'))!=var.get(u"null")) else Js({})))
                    if (var.get('i')%Js(2.0)):
                        @Js
                        def PyJs_anonymous_2504_(key, this, arguments, var=var):
                            var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                            var.registers(['key'])
                            var.get('_defineProperty')(var.get('target'), var.get('key'), var.get('source').get(var.get('key')))
                        PyJs_anonymous_2504_._set_name('anonymous')
                        var.get('ownKeys')(var.get('Object')(var.get('source')), Js(True)).callprop('forEach', PyJs_anonymous_2504_)
                    else:
                        if var.get('Object').get('getOwnPropertyDescriptors'):
                            var.get('Object').callprop('defineProperties', var.get('target'), var.get('Object').callprop('getOwnPropertyDescriptors', var.get('source')))
                        else:
                            @Js
                            def PyJs_anonymous_2505_(key, this, arguments, var=var):
                                var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                                var.registers(['key'])
                                var.get('Object').callprop('defineProperty', var.get('target'), var.get('key'), var.get('Object').callprop('getOwnPropertyDescriptor', var.get('source'), var.get('key')))
                            PyJs_anonymous_2505_._set_name('anonymous')
                            var.get('ownKeys')(var.get('Object')(var.get('source'))).callprop('forEach', PyJs_anonymous_2505_)
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('target')
        PyJsHoisted__objectSpread_.func_name = '_objectSpread'
        var.put('_objectSpread', PyJsHoisted__objectSpread_)
        @Js
        def PyJsHoisted__defineProperty_(obj, key, value, this, arguments, var=var):
            var = Scope({'obj':obj, 'key':key, 'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['key', 'obj', 'value'])
            if var.get('obj').contains(var.get('key')):
                var.get('Object').callprop('defineProperty', var.get('obj'), var.get('key'), Js({'value':var.get('value'),'enumerable':Js(True),'configurable':Js(True),'writable':Js(True)}))
            else:
                var.get('obj').put(var.get('key'), var.get('value'))
            return var.get('obj')
        PyJsHoisted__defineProperty_.func_name = '_defineProperty'
        var.put('_defineProperty', PyJsHoisted__defineProperty_)
        @Js
        def PyJsHoisted__classCallCheck_(instance, Constructor, this, arguments, var=var):
            var = Scope({'instance':instance, 'Constructor':Constructor, 'this':this, 'arguments':arguments}, var)
            var.registers(['Constructor', 'instance'])
            if var.get('instance').instanceof(var.get('Constructor')).neg():
                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Cannot call a class as a function')))
                raise PyJsTempException
        PyJsHoisted__classCallCheck_.func_name = '_classCallCheck'
        var.put('_classCallCheck', PyJsHoisted__classCallCheck_)
        @Js
        def PyJsHoisted__defineProperties_(target, props, this, arguments, var=var):
            var = Scope({'target':target, 'props':props, 'this':this, 'arguments':arguments}, var)
            var.registers(['target', 'descriptor', 'props', 'i'])
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('props').get('length')):
                try:
                    var.put('descriptor', var.get('props').get(var.get('i')))
                    var.get('descriptor').put('enumerable', (var.get('descriptor').get('enumerable') or Js(False)))
                    var.get('descriptor').put('configurable', Js(True))
                    if var.get('descriptor').contains(Js('value')):
                        var.get('descriptor').put('writable', Js(True))
                    var.get('Object').callprop('defineProperty', var.get('target'), var.get('descriptor').get('key'), var.get('descriptor'))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        PyJsHoisted__defineProperties_.func_name = '_defineProperties'
        var.put('_defineProperties', PyJsHoisted__defineProperties_)
        @Js
        def PyJsHoisted__createClass_(Constructor, protoProps, staticProps, this, arguments, var=var):
            var = Scope({'Constructor':Constructor, 'protoProps':protoProps, 'staticProps':staticProps, 'this':this, 'arguments':arguments}, var)
            var.registers(['Constructor', 'staticProps', 'protoProps'])
            if var.get('protoProps'):
                var.get('_defineProperties')(var.get('Constructor').get('prototype'), var.get('protoProps'))
            if var.get('staticProps'):
                var.get('_defineProperties')(var.get('Constructor'), var.get('staticProps'))
            return var.get('Constructor')
        PyJsHoisted__createClass_.func_name = '_createClass'
        var.put('_createClass', PyJsHoisted__createClass_)
        @Js
        def PyJsHoisted_copyBuffer_(src, target, offset, this, arguments, var=var):
            var = Scope({'src':src, 'target':target, 'offset':offset, 'this':this, 'arguments':arguments}, var)
            var.registers(['target', 'offset', 'src'])
            var.get('Buffer').get('prototype').get('copy').callprop('call', var.get('src'), var.get('target'), var.get('offset'))
        PyJsHoisted_copyBuffer_.func_name = 'copyBuffer'
        var.put('copyBuffer', PyJsHoisted_copyBuffer_)
        Js('use strict')
        pass
        pass
        pass
        pass
        pass
        pass
        var.put('_require', var.get('require')(Js('buffer')))
        var.put('Buffer', var.get('_require').get('Buffer'))
        var.put('_require2', var.get('require')(Js('util')))
        var.put('inspect', var.get('_require2').get('inspect'))
        var.put('custom', ((var.get('inspect') and var.get('inspect').get('custom')) or Js('inspect')))
        pass
        @Js
        def PyJs_anonymous_2506_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['BufferList'])
            @Js
            def PyJsHoisted_BufferList_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('_classCallCheck')(var.get(u"this"), var.get('BufferList'))
                var.get(u"this").put('head', var.get(u"null"))
                var.get(u"this").put('tail', var.get(u"null"))
                var.get(u"this").put('length', Js(0.0))
            PyJsHoisted_BufferList_.func_name = 'BufferList'
            var.put('BufferList', PyJsHoisted_BufferList_)
            pass
            def PyJs_LONG_2518_(var=var):
                @Js
                def PyJs_push_2507_(v, this, arguments, var=var):
                    var = Scope({'v':v, 'this':this, 'arguments':arguments, 'push':PyJs_push_2507_}, var)
                    var.registers(['entry', 'v'])
                    var.put('entry', Js({'data':var.get('v'),'next':var.get(u"null")}))
                    if (var.get(u"this").get('length')>Js(0.0)):
                        var.get(u"this").get('tail').put('next', var.get('entry'))
                    else:
                        var.get(u"this").put('head', var.get('entry'))
                    var.get(u"this").put('tail', var.get('entry'))
                    var.get(u"this").put('length',Js(var.get(u"this").get('length').to_number())+Js(1))
                PyJs_push_2507_._set_name('push')
                @Js
                def PyJs_unshift_2508_(v, this, arguments, var=var):
                    var = Scope({'v':v, 'this':this, 'arguments':arguments, 'unshift':PyJs_unshift_2508_}, var)
                    var.registers(['entry', 'v'])
                    var.put('entry', Js({'data':var.get('v'),'next':var.get(u"this").get('head')}))
                    if PyJsStrictEq(var.get(u"this").get('length'),Js(0.0)):
                        var.get(u"this").put('tail', var.get('entry'))
                    var.get(u"this").put('head', var.get('entry'))
                    var.get(u"this").put('length',Js(var.get(u"this").get('length').to_number())+Js(1))
                PyJs_unshift_2508_._set_name('unshift')
                @Js
                def PyJs_shift_2509_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'shift':PyJs_shift_2509_}, var)
                    var.registers(['ret'])
                    if PyJsStrictEq(var.get(u"this").get('length'),Js(0.0)):
                        return var.get('undefined')
                    var.put('ret', var.get(u"this").get('head').get('data'))
                    if PyJsStrictEq(var.get(u"this").get('length'),Js(1.0)):
                        var.get(u"this").put('head', var.get(u"this").put('tail', var.get(u"null")))
                    else:
                        var.get(u"this").put('head', var.get(u"this").get('head').get('next'))
                    var.get(u"this").put('length',Js(var.get(u"this").get('length').to_number())-Js(1))
                    return var.get('ret')
                PyJs_shift_2509_._set_name('shift')
                @Js
                def PyJs_clear_2510_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'clear':PyJs_clear_2510_}, var)
                    var.registers([])
                    var.get(u"this").put('head', var.get(u"this").put('tail', var.get(u"null")))
                    var.get(u"this").put('length', Js(0.0))
                PyJs_clear_2510_._set_name('clear')
                @Js
                def PyJs_join_2511_(s, this, arguments, var=var):
                    var = Scope({'s':s, 'this':this, 'arguments':arguments, 'join':PyJs_join_2511_}, var)
                    var.registers(['p', 's', 'ret'])
                    if PyJsStrictEq(var.get(u"this").get('length'),Js(0.0)):
                        return Js('')
                    var.put('p', var.get(u"this").get('head'))
                    var.put('ret', (Js('')+var.get('p').get('data')))
                    while var.put('p', var.get('p').get('next')):
                        var.put('ret', (var.get('s')+var.get('p').get('data')), '+')
                    return var.get('ret')
                PyJs_join_2511_._set_name('join')
                @Js
                def PyJs_concat_2512_(n, this, arguments, var=var):
                    var = Scope({'n':n, 'this':this, 'arguments':arguments, 'concat':PyJs_concat_2512_}, var)
                    var.registers(['n', 'p', 'i', 'ret'])
                    if PyJsStrictEq(var.get(u"this").get('length'),Js(0.0)):
                        return var.get('Buffer').callprop('alloc', Js(0.0))
                    var.put('ret', var.get('Buffer').callprop('allocUnsafe', PyJsBshift(var.get('n'),Js(0.0))))
                    var.put('p', var.get(u"this").get('head'))
                    var.put('i', Js(0.0))
                    while var.get('p'):
                        var.get('copyBuffer')(var.get('p').get('data'), var.get('ret'), var.get('i'))
                        var.put('i', var.get('p').get('data').get('length'), '+')
                        var.put('p', var.get('p').get('next'))
                    return var.get('ret')
                PyJs_concat_2512_._set_name('concat')
                @Js
                def PyJs_consume_2513_(n, hasStrings, this, arguments, var=var):
                    var = Scope({'n':n, 'hasStrings':hasStrings, 'this':this, 'arguments':arguments, 'consume':PyJs_consume_2513_}, var)
                    var.registers(['n', 'hasStrings', 'ret'])
                    pass
                    if (var.get('n')<var.get(u"this").get('head').get('data').get('length')):
                        var.put('ret', var.get(u"this").get('head').get('data').callprop('slice', Js(0.0), var.get('n')))
                        var.get(u"this").get('head').put('data', var.get(u"this").get('head').get('data').callprop('slice', var.get('n')))
                    else:
                        if PyJsStrictEq(var.get('n'),var.get(u"this").get('head').get('data').get('length')):
                            var.put('ret', var.get(u"this").callprop('shift'))
                        else:
                            var.put('ret', (var.get(u"this").callprop('_getString', var.get('n')) if var.get('hasStrings') else var.get(u"this").callprop('_getBuffer', var.get('n'))))
                    return var.get('ret')
                PyJs_consume_2513_._set_name('consume')
                @Js
                def PyJs_first_2514_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'first':PyJs_first_2514_}, var)
                    var.registers([])
                    return var.get(u"this").get('head').get('data')
                PyJs_first_2514_._set_name('first')
                @Js
                def PyJs__getString_2515_(n, this, arguments, var=var):
                    var = Scope({'n':n, 'this':this, 'arguments':arguments, '_getString':PyJs__getString_2515_}, var)
                    var.registers(['n', 'nb', 'p', 'ret', 'str', 'c'])
                    var.put('p', var.get(u"this").get('head'))
                    var.put('c', Js(1.0))
                    var.put('ret', var.get('p').get('data'))
                    var.put('n', var.get('ret').get('length'), '-')
                    while var.put('p', var.get('p').get('next')):
                        var.put('str', var.get('p').get('data'))
                        var.put('nb', (var.get('str').get('length') if (var.get('n')>var.get('str').get('length')) else var.get('n')))
                        if PyJsStrictEq(var.get('nb'),var.get('str').get('length')):
                            var.put('ret', var.get('str'), '+')
                        else:
                            var.put('ret', var.get('str').callprop('slice', Js(0.0), var.get('n')), '+')
                        var.put('n', var.get('nb'), '-')
                        if PyJsStrictEq(var.get('n'),Js(0.0)):
                            if PyJsStrictEq(var.get('nb'),var.get('str').get('length')):
                                var.put('c',Js(var.get('c').to_number())+Js(1))
                                if var.get('p').get('next'):
                                    var.get(u"this").put('head', var.get('p').get('next'))
                                else:
                                    var.get(u"this").put('head', var.get(u"this").put('tail', var.get(u"null")))
                            else:
                                var.get(u"this").put('head', var.get('p'))
                                var.get('p').put('data', var.get('str').callprop('slice', var.get('nb')))
                            break
                        var.put('c',Js(var.get('c').to_number())+Js(1))
                    var.get(u"this").put('length', var.get('c'), '-')
                    return var.get('ret')
                PyJs__getString_2515_._set_name('_getString')
                @Js
                def PyJs__getBuffer_2516_(n, this, arguments, var=var):
                    var = Scope({'n':n, 'this':this, 'arguments':arguments, '_getBuffer':PyJs__getBuffer_2516_}, var)
                    var.registers(['n', 'nb', 'buf', 'p', 'ret', 'c'])
                    var.put('ret', var.get('Buffer').callprop('allocUnsafe', var.get('n')))
                    var.put('p', var.get(u"this").get('head'))
                    var.put('c', Js(1.0))
                    var.get('p').get('data').callprop('copy', var.get('ret'))
                    var.put('n', var.get('p').get('data').get('length'), '-')
                    while var.put('p', var.get('p').get('next')):
                        var.put('buf', var.get('p').get('data'))
                        var.put('nb', (var.get('buf').get('length') if (var.get('n')>var.get('buf').get('length')) else var.get('n')))
                        var.get('buf').callprop('copy', var.get('ret'), (var.get('ret').get('length')-var.get('n')), Js(0.0), var.get('nb'))
                        var.put('n', var.get('nb'), '-')
                        if PyJsStrictEq(var.get('n'),Js(0.0)):
                            if PyJsStrictEq(var.get('nb'),var.get('buf').get('length')):
                                var.put('c',Js(var.get('c').to_number())+Js(1))
                                if var.get('p').get('next'):
                                    var.get(u"this").put('head', var.get('p').get('next'))
                                else:
                                    var.get(u"this").put('head', var.get(u"this").put('tail', var.get(u"null")))
                            else:
                                var.get(u"this").put('head', var.get('p'))
                                var.get('p').put('data', var.get('buf').callprop('slice', var.get('nb')))
                            break
                        var.put('c',Js(var.get('c').to_number())+Js(1))
                    var.get(u"this").put('length', var.get('c'), '-')
                    return var.get('ret')
                PyJs__getBuffer_2516_._set_name('_getBuffer')
                @Js
                def PyJs_value_2517_(_, options, this, arguments, var=var):
                    var = Scope({'_':_, 'options':options, 'this':this, 'arguments':arguments, 'value':PyJs_value_2517_}, var)
                    var.registers(['options', '_'])
                    return var.get('inspect')(var.get(u"this"), var.get('_objectSpread')(Js({}), var.get('options'), Js({'depth':Js(0.0),'customInspect':Js(False)})))
                PyJs_value_2517_._set_name('value')
                return var.get('_createClass')(var.get('BufferList'), Js([Js({'key':Js('push'),'value':PyJs_push_2507_}), Js({'key':Js('unshift'),'value':PyJs_unshift_2508_}), Js({'key':Js('shift'),'value':PyJs_shift_2509_}), Js({'key':Js('clear'),'value':PyJs_clear_2510_}), Js({'key':Js('join'),'value':PyJs_join_2511_}), Js({'key':Js('concat'),'value':PyJs_concat_2512_}), Js({'key':Js('consume'),'value':PyJs_consume_2513_}), Js({'key':Js('first'),'value':PyJs_first_2514_}), Js({'key':Js('_getString'),'value':PyJs__getString_2515_}), Js({'key':Js('_getBuffer'),'value':PyJs__getBuffer_2516_}), Js({'key':var.get('custom'),'value':PyJs_value_2517_})]))
            PyJs_LONG_2518_()
            return var.get('BufferList')
        PyJs_anonymous_2506_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_2506_())
    PyJs_anonymous_2502_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2519_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_2520_(process, this, arguments, var=var):
            var = Scope({'process':process, 'this':this, 'arguments':arguments}, var)
            var.registers(['process'])
            @Js
            def PyJs_anonymous_2521_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['destroy', 'emitErrorAndCloseNT', 'emitCloseNT', 'undestroy', 'errorOrDestroy', 'emitErrorNT'])
                @Js
                def PyJsHoisted_destroy_(err, cb, this, arguments, var=var):
                    var = Scope({'err':err, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['readableDestroyed', 'writableDestroyed', 'err', 'cb', '_this'])
                    var.put('_this', var.get(u"this"))
                    var.put('readableDestroyed', (var.get(u"this").get('_readableState') and var.get(u"this").get('_readableState').get('destroyed')))
                    var.put('writableDestroyed', (var.get(u"this").get('_writableState') and var.get(u"this").get('_writableState').get('destroyed')))
                    if (var.get('readableDestroyed') or var.get('writableDestroyed')):
                        if var.get('cb'):
                            var.get('cb')(var.get('err'))
                        else:
                            if var.get('err'):
                                if var.get(u"this").get('_writableState').neg():
                                    var.get('process').callprop('nextTick', var.get('emitErrorNT'), var.get(u"this"), var.get('err'))
                                else:
                                    if var.get(u"this").get('_writableState').get('errorEmitted').neg():
                                        var.get(u"this").get('_writableState').put('errorEmitted', Js(True))
                                        var.get('process').callprop('nextTick', var.get('emitErrorNT'), var.get(u"this"), var.get('err'))
                        return var.get(u"this")
                    if var.get(u"this").get('_readableState'):
                        var.get(u"this").get('_readableState').put('destroyed', Js(True))
                    if var.get(u"this").get('_writableState'):
                        var.get(u"this").get('_writableState').put('destroyed', Js(True))
                    @Js
                    def PyJs_anonymous_2522_(err, this, arguments, var=var):
                        var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                        var.registers(['err'])
                        if (var.get('cb').neg() and var.get('err')):
                            if var.get('_this').get('_writableState').neg():
                                var.get('process').callprop('nextTick', var.get('emitErrorAndCloseNT'), var.get('_this'), var.get('err'))
                            else:
                                if var.get('_this').get('_writableState').get('errorEmitted').neg():
                                    var.get('_this').get('_writableState').put('errorEmitted', Js(True))
                                    var.get('process').callprop('nextTick', var.get('emitErrorAndCloseNT'), var.get('_this'), var.get('err'))
                                else:
                                    var.get('process').callprop('nextTick', var.get('emitCloseNT'), var.get('_this'))
                        else:
                            if var.get('cb'):
                                var.get('process').callprop('nextTick', var.get('emitCloseNT'), var.get('_this'))
                                var.get('cb')(var.get('err'))
                            else:
                                var.get('process').callprop('nextTick', var.get('emitCloseNT'), var.get('_this'))
                    PyJs_anonymous_2522_._set_name('anonymous')
                    var.get(u"this").callprop('_destroy', (var.get('err') or var.get(u"null")), PyJs_anonymous_2522_)
                    return var.get(u"this")
                PyJsHoisted_destroy_.func_name = 'destroy'
                var.put('destroy', PyJsHoisted_destroy_)
                @Js
                def PyJsHoisted_emitErrorAndCloseNT_(self, err, this, arguments, var=var):
                    var = Scope({'self':self, 'err':err, 'this':this, 'arguments':arguments}, var)
                    var.registers(['err', 'self'])
                    var.get('emitErrorNT')(var.get('self'), var.get('err'))
                    var.get('emitCloseNT')(var.get('self'))
                PyJsHoisted_emitErrorAndCloseNT_.func_name = 'emitErrorAndCloseNT'
                var.put('emitErrorAndCloseNT', PyJsHoisted_emitErrorAndCloseNT_)
                @Js
                def PyJsHoisted_emitCloseNT_(self, this, arguments, var=var):
                    var = Scope({'self':self, 'this':this, 'arguments':arguments}, var)
                    var.registers(['self'])
                    if (var.get('self').get('_writableState') and var.get('self').get('_writableState').get('emitClose').neg()):
                        return var.get('undefined')
                    if (var.get('self').get('_readableState') and var.get('self').get('_readableState').get('emitClose').neg()):
                        return var.get('undefined')
                    var.get('self').callprop('emit', Js('close'))
                PyJsHoisted_emitCloseNT_.func_name = 'emitCloseNT'
                var.put('emitCloseNT', PyJsHoisted_emitCloseNT_)
                @Js
                def PyJsHoisted_undestroy_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    if var.get(u"this").get('_readableState'):
                        var.get(u"this").get('_readableState').put('destroyed', Js(False))
                        var.get(u"this").get('_readableState').put('reading', Js(False))
                        var.get(u"this").get('_readableState').put('ended', Js(False))
                        var.get(u"this").get('_readableState').put('endEmitted', Js(False))
                    if var.get(u"this").get('_writableState'):
                        var.get(u"this").get('_writableState').put('destroyed', Js(False))
                        var.get(u"this").get('_writableState').put('ended', Js(False))
                        var.get(u"this").get('_writableState').put('ending', Js(False))
                        var.get(u"this").get('_writableState').put('finalCalled', Js(False))
                        var.get(u"this").get('_writableState').put('prefinished', Js(False))
                        var.get(u"this").get('_writableState').put('finished', Js(False))
                        var.get(u"this").get('_writableState').put('errorEmitted', Js(False))
                PyJsHoisted_undestroy_.func_name = 'undestroy'
                var.put('undestroy', PyJsHoisted_undestroy_)
                @Js
                def PyJsHoisted_emitErrorNT_(self, err, this, arguments, var=var):
                    var = Scope({'self':self, 'err':err, 'this':this, 'arguments':arguments}, var)
                    var.registers(['err', 'self'])
                    var.get('self').callprop('emit', Js('error'), var.get('err'))
                PyJsHoisted_emitErrorNT_.func_name = 'emitErrorNT'
                var.put('emitErrorNT', PyJsHoisted_emitErrorNT_)
                @Js
                def PyJsHoisted_errorOrDestroy_(stream, err, this, arguments, var=var):
                    var = Scope({'stream':stream, 'err':err, 'this':this, 'arguments':arguments}, var)
                    var.registers(['err', 'wState', 'rState', 'stream'])
                    var.put('rState', var.get('stream').get('_readableState'))
                    var.put('wState', var.get('stream').get('_writableState'))
                    if ((var.get('rState') and var.get('rState').get('autoDestroy')) or (var.get('wState') and var.get('wState').get('autoDestroy'))):
                        var.get('stream').callprop('destroy', var.get('err'))
                    else:
                        var.get('stream').callprop('emit', Js('error'), var.get('err'))
                PyJsHoisted_errorOrDestroy_.func_name = 'errorOrDestroy'
                var.put('errorOrDestroy', PyJsHoisted_errorOrDestroy_)
                Js('use strict')
                pass
                pass
                pass
                pass
                pass
                pass
                var.get('module').put('exports', Js({'destroy':var.get('destroy'),'undestroy':var.get('undestroy'),'errorOrDestroy':var.get('errorOrDestroy')}))
            PyJs_anonymous_2521_._set_name('anonymous')
            PyJs_anonymous_2521_.callprop('call', var.get(u"this"))
        PyJs_anonymous_2520_._set_name('anonymous')
        PyJs_anonymous_2520_.callprop('call', var.get(u"this"), var.get('require')(Js('_process')))
    PyJs_anonymous_2519_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2523_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'isRequest', 'noop', 'once', 'exports', 'ERR_STREAM_PREMATURE_CLOSE', 'require', 'eos'])
        @Js
        def PyJsHoisted_once_(callback, this, arguments, var=var):
            var = Scope({'callback':callback, 'this':this, 'arguments':arguments}, var)
            var.registers(['called', 'callback'])
            var.put('called', Js(False))
            @Js
            def PyJs_anonymous_2524_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['args', '_len', '_key'])
                if var.get('called'):
                    return var.get('undefined')
                var.put('called', Js(True))
                #for JS loop
                var.put('_len', var.get('arguments').get('length'))
                var.put('args', var.get('Array').create(var.get('_len')))
                var.put('_key', Js(0.0))
                while (var.get('_key')<var.get('_len')):
                    try:
                        var.get('args').put(var.get('_key'), var.get('arguments').get(var.get('_key')))
                    finally:
                            (var.put('_key',Js(var.get('_key').to_number())+Js(1))-Js(1))
                var.get('callback').callprop('apply', var.get(u"this"), var.get('args'))
            PyJs_anonymous_2524_._set_name('anonymous')
            return PyJs_anonymous_2524_
        PyJsHoisted_once_.func_name = 'once'
        var.put('once', PyJsHoisted_once_)
        @Js
        def PyJsHoisted_noop_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            pass
        PyJsHoisted_noop_.func_name = 'noop'
        var.put('noop', PyJsHoisted_noop_)
        @Js
        def PyJsHoisted_isRequest_(stream, this, arguments, var=var):
            var = Scope({'stream':stream, 'this':this, 'arguments':arguments}, var)
            var.registers(['stream'])
            return (var.get('stream').get('setHeader') and PyJsStrictEq(var.get('stream').get('abort').typeof(),Js('function')))
        PyJsHoisted_isRequest_.func_name = 'isRequest'
        var.put('isRequest', PyJsHoisted_isRequest_)
        @Js
        def PyJsHoisted_eos_(stream, opts, callback, this, arguments, var=var):
            var = Scope({'stream':stream, 'opts':opts, 'callback':callback, 'this':this, 'arguments':arguments}, var)
            var.registers(['onclose', 'callback', 'onrequest', 'readable', 'readableEnded', 'writableEnded', 'onfinish', 'onend', 'onerror', 'stream', 'writable', 'opts', 'onlegacyfinish'])
            if PyJsStrictEq(var.get('opts',throw=False).typeof(),Js('function')):
                return var.get('eos')(var.get('stream'), var.get(u"null"), var.get('opts'))
            if var.get('opts').neg():
                var.put('opts', Js({}))
            var.put('callback', var.get('once')((var.get('callback') or var.get('noop'))))
            var.put('readable', (var.get('opts').get('readable') or (PyJsStrictNeq(var.get('opts').get('readable'),Js(False)) and var.get('stream').get('readable'))))
            var.put('writable', (var.get('opts').get('writable') or (PyJsStrictNeq(var.get('opts').get('writable'),Js(False)) and var.get('stream').get('writable'))))
            @Js
            def PyJs_onlegacyfinish_2525_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'onlegacyfinish':PyJs_onlegacyfinish_2525_}, var)
                var.registers([])
                if var.get('stream').get('writable').neg():
                    var.get('onfinish')()
            PyJs_onlegacyfinish_2525_._set_name('onlegacyfinish')
            var.put('onlegacyfinish', PyJs_onlegacyfinish_2525_)
            var.put('writableEnded', (var.get('stream').get('_writableState') and var.get('stream').get('_writableState').get('finished')))
            @Js
            def PyJs_onfinish_2526_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'onfinish':PyJs_onfinish_2526_}, var)
                var.registers([])
                var.put('writable', Js(False))
                var.put('writableEnded', Js(True))
                if var.get('readable').neg():
                    var.get('callback').callprop('call', var.get('stream'))
            PyJs_onfinish_2526_._set_name('onfinish')
            var.put('onfinish', PyJs_onfinish_2526_)
            var.put('readableEnded', (var.get('stream').get('_readableState') and var.get('stream').get('_readableState').get('endEmitted')))
            @Js
            def PyJs_onend_2527_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'onend':PyJs_onend_2527_}, var)
                var.registers([])
                var.put('readable', Js(False))
                var.put('readableEnded', Js(True))
                if var.get('writable').neg():
                    var.get('callback').callprop('call', var.get('stream'))
            PyJs_onend_2527_._set_name('onend')
            var.put('onend', PyJs_onend_2527_)
            @Js
            def PyJs_onerror_2528_(err, this, arguments, var=var):
                var = Scope({'err':err, 'this':this, 'arguments':arguments, 'onerror':PyJs_onerror_2528_}, var)
                var.registers(['err'])
                var.get('callback').callprop('call', var.get('stream'), var.get('err'))
            PyJs_onerror_2528_._set_name('onerror')
            var.put('onerror', PyJs_onerror_2528_)
            @Js
            def PyJs_onclose_2529_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'onclose':PyJs_onclose_2529_}, var)
                var.registers(['err'])
                pass
                if (var.get('readable') and var.get('readableEnded').neg()):
                    if (var.get('stream').get('_readableState').neg() or var.get('stream').get('_readableState').get('ended').neg()):
                        var.put('err', var.get('ERR_STREAM_PREMATURE_CLOSE').create())
                    return var.get('callback').callprop('call', var.get('stream'), var.get('err'))
                if (var.get('writable') and var.get('writableEnded').neg()):
                    if (var.get('stream').get('_writableState').neg() or var.get('stream').get('_writableState').get('ended').neg()):
                        var.put('err', var.get('ERR_STREAM_PREMATURE_CLOSE').create())
                    return var.get('callback').callprop('call', var.get('stream'), var.get('err'))
            PyJs_onclose_2529_._set_name('onclose')
            var.put('onclose', PyJs_onclose_2529_)
            @Js
            def PyJs_onrequest_2530_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'onrequest':PyJs_onrequest_2530_}, var)
                var.registers([])
                var.get('stream').get('req').callprop('on', Js('finish'), var.get('onfinish'))
            PyJs_onrequest_2530_._set_name('onrequest')
            var.put('onrequest', PyJs_onrequest_2530_)
            if var.get('isRequest')(var.get('stream')):
                var.get('stream').callprop('on', Js('complete'), var.get('onfinish'))
                var.get('stream').callprop('on', Js('abort'), var.get('onclose'))
                if var.get('stream').get('req'):
                    var.get('onrequest')()
                else:
                    var.get('stream').callprop('on', Js('request'), var.get('onrequest'))
            else:
                if (var.get('writable') and var.get('stream').get('_writableState').neg()):
                    var.get('stream').callprop('on', Js('end'), var.get('onlegacyfinish'))
                    var.get('stream').callprop('on', Js('close'), var.get('onlegacyfinish'))
            var.get('stream').callprop('on', Js('end'), var.get('onend'))
            var.get('stream').callprop('on', Js('finish'), var.get('onfinish'))
            if PyJsStrictNeq(var.get('opts').get('error'),Js(False)):
                var.get('stream').callprop('on', Js('error'), var.get('onerror'))
            var.get('stream').callprop('on', Js('close'), var.get('onclose'))
            @Js
            def PyJs_anonymous_2531_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('stream').callprop('removeListener', Js('complete'), var.get('onfinish'))
                var.get('stream').callprop('removeListener', Js('abort'), var.get('onclose'))
                var.get('stream').callprop('removeListener', Js('request'), var.get('onrequest'))
                if var.get('stream').get('req'):
                    var.get('stream').get('req').callprop('removeListener', Js('finish'), var.get('onfinish'))
                var.get('stream').callprop('removeListener', Js('end'), var.get('onlegacyfinish'))
                var.get('stream').callprop('removeListener', Js('close'), var.get('onlegacyfinish'))
                var.get('stream').callprop('removeListener', Js('finish'), var.get('onfinish'))
                var.get('stream').callprop('removeListener', Js('end'), var.get('onend'))
                var.get('stream').callprop('removeListener', Js('error'), var.get('onerror'))
                var.get('stream').callprop('removeListener', Js('close'), var.get('onclose'))
            PyJs_anonymous_2531_._set_name('anonymous')
            return PyJs_anonymous_2531_
        PyJsHoisted_eos_.func_name = 'eos'
        var.put('eos', PyJsHoisted_eos_)
        Js('use strict')
        var.put('ERR_STREAM_PREMATURE_CLOSE', var.get('require')(Js('../../../errors')).get('codes').get('ERR_STREAM_PREMATURE_CLOSE'))
        pass
        pass
        pass
        pass
        var.get('module').put('exports', var.get('eos'))
    PyJs_anonymous_2523_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2532_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_2533_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            PyJsTempException = JsToPyException(var.get('Error').create(Js('Readable.from is not available in the browser')))
            raise PyJsTempException
        PyJs_anonymous_2533_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_2533_)
    PyJs_anonymous_2532_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2534_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'pipeline', 'isRequest', 'noop', 'once', 'destroyer', 'call', 'exports', 'popCallback', 'ERR_MISSING_ARGS', '_require$codes', 'ERR_STREAM_DESTROYED', 'require', 'eos', 'pipe'])
        @Js
        def PyJsHoisted_once_(callback, this, arguments, var=var):
            var = Scope({'callback':callback, 'this':this, 'arguments':arguments}, var)
            var.registers(['called', 'callback'])
            var.put('called', Js(False))
            @Js
            def PyJs_anonymous_2535_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                if var.get('called'):
                    return var.get('undefined')
                var.put('called', Js(True))
                var.get('callback').callprop('apply', PyJsComma(Js(0.0), Js(None)), var.get('arguments'))
            PyJs_anonymous_2535_._set_name('anonymous')
            return PyJs_anonymous_2535_
        PyJsHoisted_once_.func_name = 'once'
        var.put('once', PyJsHoisted_once_)
        @Js
        def PyJsHoisted_noop_(err, this, arguments, var=var):
            var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
            var.registers(['err'])
            if var.get('err'):
                PyJsTempException = JsToPyException(var.get('err'))
                raise PyJsTempException
        PyJsHoisted_noop_.func_name = 'noop'
        var.put('noop', PyJsHoisted_noop_)
        @Js
        def PyJsHoisted_isRequest_(stream, this, arguments, var=var):
            var = Scope({'stream':stream, 'this':this, 'arguments':arguments}, var)
            var.registers(['stream'])
            return (var.get('stream').get('setHeader') and PyJsStrictEq(var.get('stream').get('abort').typeof(),Js('function')))
        PyJsHoisted_isRequest_.func_name = 'isRequest'
        var.put('isRequest', PyJsHoisted_isRequest_)
        @Js
        def PyJsHoisted_destroyer_(stream, reading, writing, callback, this, arguments, var=var):
            var = Scope({'stream':stream, 'reading':reading, 'writing':writing, 'callback':callback, 'this':this, 'arguments':arguments}, var)
            var.registers(['writing', 'callback', 'reading', 'stream', 'closed', 'destroyed'])
            var.put('callback', var.get('once')(var.get('callback')))
            var.put('closed', Js(False))
            @Js
            def PyJs_anonymous_2536_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.put('closed', Js(True))
            PyJs_anonymous_2536_._set_name('anonymous')
            var.get('stream').callprop('on', Js('close'), PyJs_anonymous_2536_)
            if PyJsStrictEq(var.get('eos'),var.get('undefined')):
                var.put('eos', var.get('require')(Js('./end-of-stream')))
            @Js
            def PyJs_anonymous_2537_(err, this, arguments, var=var):
                var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                var.registers(['err'])
                if var.get('err'):
                    return var.get('callback')(var.get('err'))
                var.put('closed', Js(True))
                var.get('callback')()
            PyJs_anonymous_2537_._set_name('anonymous')
            var.get('eos')(var.get('stream'), Js({'readable':var.get('reading'),'writable':var.get('writing')}), PyJs_anonymous_2537_)
            var.put('destroyed', Js(False))
            @Js
            def PyJs_anonymous_2538_(err, this, arguments, var=var):
                var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                var.registers(['err'])
                if var.get('closed'):
                    return var.get('undefined')
                if var.get('destroyed'):
                    return var.get('undefined')
                var.put('destroyed', Js(True))
                if var.get('isRequest')(var.get('stream')):
                    return var.get('stream').callprop('abort')
                if PyJsStrictEq(var.get('stream').get('destroy').typeof(),Js('function')):
                    return var.get('stream').callprop('destroy')
                var.get('callback')((var.get('err') or var.get('ERR_STREAM_DESTROYED').create(Js('pipe'))))
            PyJs_anonymous_2538_._set_name('anonymous')
            return PyJs_anonymous_2538_
        PyJsHoisted_destroyer_.func_name = 'destroyer'
        var.put('destroyer', PyJsHoisted_destroyer_)
        @Js
        def PyJsHoisted_call_(fn, this, arguments, var=var):
            var = Scope({'fn':fn, 'this':this, 'arguments':arguments}, var)
            var.registers(['fn'])
            var.get('fn')()
        PyJsHoisted_call_.func_name = 'call'
        var.put('call', PyJsHoisted_call_)
        @Js
        def PyJsHoisted_pipe_(PyJsArg_66726f6d_, to, this, arguments, var=var):
            var = Scope({'from':PyJsArg_66726f6d_, 'to':to, 'this':this, 'arguments':arguments}, var)
            var.registers(['from', 'to'])
            return var.get('from').callprop('pipe', var.get('to'))
        PyJsHoisted_pipe_.func_name = 'pipe'
        var.put('pipe', PyJsHoisted_pipe_)
        @Js
        def PyJsHoisted_popCallback_(streams, this, arguments, var=var):
            var = Scope({'streams':streams, 'this':this, 'arguments':arguments}, var)
            var.registers(['streams'])
            if var.get('streams').get('length').neg():
                return var.get('noop')
            if PyJsStrictNeq(var.get('streams').get((var.get('streams').get('length')-Js(1.0))).typeof(),Js('function')):
                return var.get('noop')
            return var.get('streams').callprop('pop')
        PyJsHoisted_popCallback_.func_name = 'popCallback'
        var.put('popCallback', PyJsHoisted_popCallback_)
        @Js
        def PyJsHoisted_pipeline_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['_len', 'callback', 'destroys', 'error', 'streams', '_key'])
            #for JS loop
            var.put('_len', var.get('arguments').get('length'))
            var.put('streams', var.get('Array').create(var.get('_len')))
            var.put('_key', Js(0.0))
            while (var.get('_key')<var.get('_len')):
                try:
                    var.get('streams').put(var.get('_key'), var.get('arguments').get(var.get('_key')))
                finally:
                        (var.put('_key',Js(var.get('_key').to_number())+Js(1))-Js(1))
            var.put('callback', var.get('popCallback')(var.get('streams')))
            if var.get('Array').callprop('isArray', var.get('streams').get('0')):
                var.put('streams', var.get('streams').get('0'))
            if (var.get('streams').get('length')<Js(2.0)):
                PyJsTempException = JsToPyException(var.get('ERR_MISSING_ARGS').create(Js('streams')))
                raise PyJsTempException
            pass
            @Js
            def PyJs_anonymous_2539_(stream, i, this, arguments, var=var):
                var = Scope({'stream':stream, 'i':i, 'this':this, 'arguments':arguments}, var)
                var.registers(['i', 'writing', 'reading', 'stream'])
                var.put('reading', (var.get('i')<(var.get('streams').get('length')-Js(1.0))))
                var.put('writing', (var.get('i')>Js(0.0)))
                @Js
                def PyJs_anonymous_2540_(err, this, arguments, var=var):
                    var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                    var.registers(['err'])
                    if var.get('error').neg():
                        var.put('error', var.get('err'))
                    if var.get('err'):
                        var.get('destroys').callprop('forEach', var.get('call'))
                    if var.get('reading'):
                        return var.get('undefined')
                    var.get('destroys').callprop('forEach', var.get('call'))
                    var.get('callback')(var.get('error'))
                PyJs_anonymous_2540_._set_name('anonymous')
                return var.get('destroyer')(var.get('stream'), var.get('reading'), var.get('writing'), PyJs_anonymous_2540_)
            PyJs_anonymous_2539_._set_name('anonymous')
            var.put('destroys', var.get('streams').callprop('map', PyJs_anonymous_2539_))
            return var.get('streams').callprop('reduce', var.get('pipe'))
        PyJsHoisted_pipeline_.func_name = 'pipeline'
        var.put('pipeline', PyJsHoisted_pipeline_)
        Js('use strict')
        pass
        pass
        var.put('_require$codes', var.get('require')(Js('../../../errors')).get('codes'))
        var.put('ERR_MISSING_ARGS', var.get('_require$codes').get('ERR_MISSING_ARGS'))
        var.put('ERR_STREAM_DESTROYED', var.get('_require$codes').get('ERR_STREAM_DESTROYED'))
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        var.get('module').put('exports', var.get('pipeline'))
    PyJs_anonymous_2534_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2541_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'ERR_INVALID_OPT_VALUE', 'exports', 'getHighWaterMark', 'require', 'highWaterMarkFrom'])
        @Js
        def PyJsHoisted_highWaterMarkFrom_(options, isDuplex, duplexKey, this, arguments, var=var):
            var = Scope({'options':options, 'isDuplex':isDuplex, 'duplexKey':duplexKey, 'this':this, 'arguments':arguments}, var)
            var.registers(['options', 'isDuplex', 'duplexKey'])
            return (var.get('options').get('highWaterMark') if (var.get('options').get('highWaterMark')!=var.get(u"null")) else (var.get('options').get(var.get('duplexKey')) if var.get('isDuplex') else var.get(u"null")))
        PyJsHoisted_highWaterMarkFrom_.func_name = 'highWaterMarkFrom'
        var.put('highWaterMarkFrom', PyJsHoisted_highWaterMarkFrom_)
        @Js
        def PyJsHoisted_getHighWaterMark_(state, options, duplexKey, isDuplex, this, arguments, var=var):
            var = Scope({'state':state, 'options':options, 'duplexKey':duplexKey, 'isDuplex':isDuplex, 'this':this, 'arguments':arguments}, var)
            var.registers(['state', 'name', 'hwm', 'options', 'isDuplex', 'duplexKey'])
            var.put('hwm', var.get('highWaterMarkFrom')(var.get('options'), var.get('isDuplex'), var.get('duplexKey')))
            if (var.get('hwm')!=var.get(u"null")):
                if ((var.get('isFinite')(var.get('hwm')) and PyJsStrictEq(var.get('Math').callprop('floor', var.get('hwm')),var.get('hwm'))).neg() or (var.get('hwm')<Js(0.0))):
                    var.put('name', (var.get('duplexKey') if var.get('isDuplex') else Js('highWaterMark')))
                    PyJsTempException = JsToPyException(var.get('ERR_INVALID_OPT_VALUE').create(var.get('name'), var.get('hwm')))
                    raise PyJsTempException
                return var.get('Math').callprop('floor', var.get('hwm'))
            return (Js(16.0) if var.get('state').get('objectMode') else (Js(16.0)*Js(1024.0)))
        PyJsHoisted_getHighWaterMark_.func_name = 'getHighWaterMark'
        var.put('getHighWaterMark', PyJsHoisted_getHighWaterMark_)
        Js('use strict')
        var.put('ERR_INVALID_OPT_VALUE', var.get('require')(Js('../../../errors')).get('codes').get('ERR_INVALID_OPT_VALUE'))
        pass
        pass
        var.get('module').put('exports', Js({'getHighWaterMark':var.get('getHighWaterMark')}))
    PyJs_anonymous_2541_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2542_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('module').put('exports', var.get('require')(Js('events')).get('EventEmitter'))
    PyJs_anonymous_2542_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2543_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['simpleWrite', 'base64Text', 'Buffer', 'isEncoding', 'utf8Text', 'utf8CheckByte', 'normalizeEncoding', 'simpleEnd', 'utf8End', 'StringDecoder', 'base64End', 'utf16End', 'require', 'utf8CheckExtraBytes', 'module', 'utf8FillLast', 'exports', '_normalizeEncoding', 'utf8CheckIncomplete', 'utf16Text'])
        @Js
        def PyJsHoisted__normalizeEncoding_(enc, this, arguments, var=var):
            var = Scope({'enc':enc, 'this':this, 'arguments':arguments}, var)
            var.registers(['retried', 'enc'])
            if var.get('enc').neg():
                return Js('utf8')
            pass
            while Js(True):
                while 1:
                    SWITCHED = False
                    CONDITION = (var.get('enc'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('utf8')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('utf-8')):
                        SWITCHED = True
                        return Js('utf8')
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('ucs2')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('ucs-2')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('utf16le')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('utf-16le')):
                        SWITCHED = True
                        return Js('utf16le')
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('latin1')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('binary')):
                        SWITCHED = True
                        return Js('latin1')
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('base64')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('ascii')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('hex')):
                        SWITCHED = True
                        return var.get('enc')
                    if True:
                        SWITCHED = True
                        if var.get('retried'):
                            return var.get('undefined')
                        var.put('enc', (Js('')+var.get('enc')).callprop('toLowerCase'))
                        var.put('retried', Js(True))
                    SWITCHED = True
                    break
        PyJsHoisted__normalizeEncoding_.func_name = '_normalizeEncoding'
        var.put('_normalizeEncoding', PyJsHoisted__normalizeEncoding_)
        @Js
        def PyJsHoisted_normalizeEncoding_(enc, this, arguments, var=var):
            var = Scope({'enc':enc, 'this':this, 'arguments':arguments}, var)
            var.registers(['enc', 'nenc'])
            var.put('nenc', var.get('_normalizeEncoding')(var.get('enc')))
            if (PyJsStrictNeq(var.get('nenc',throw=False).typeof(),Js('string')) and (PyJsStrictEq(var.get('Buffer').get('isEncoding'),var.get('isEncoding')) or var.get('isEncoding')(var.get('enc')).neg())):
                PyJsTempException = JsToPyException(var.get('Error').create((Js('Unknown encoding: ')+var.get('enc'))))
                raise PyJsTempException
            return (var.get('nenc') or var.get('enc'))
        PyJsHoisted_normalizeEncoding_.func_name = 'normalizeEncoding'
        var.put('normalizeEncoding', PyJsHoisted_normalizeEncoding_)
        @Js
        def PyJsHoisted_StringDecoder_(encoding, this, arguments, var=var):
            var = Scope({'encoding':encoding, 'this':this, 'arguments':arguments}, var)
            var.registers(['nb', 'encoding'])
            var.get(u"this").put('encoding', var.get('normalizeEncoding')(var.get('encoding')))
            pass
            while 1:
                SWITCHED = False
                CONDITION = (var.get(u"this").get('encoding'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js('utf16le')):
                    SWITCHED = True
                    var.get(u"this").put('text', var.get('utf16Text'))
                    var.get(u"this").put('end', var.get('utf16End'))
                    var.put('nb', Js(4.0))
                    break
                if SWITCHED or PyJsStrictEq(CONDITION, Js('utf8')):
                    SWITCHED = True
                    var.get(u"this").put('fillLast', var.get('utf8FillLast'))
                    var.put('nb', Js(4.0))
                    break
                if SWITCHED or PyJsStrictEq(CONDITION, Js('base64')):
                    SWITCHED = True
                    var.get(u"this").put('text', var.get('base64Text'))
                    var.get(u"this").put('end', var.get('base64End'))
                    var.put('nb', Js(3.0))
                    break
                if True:
                    SWITCHED = True
                    var.get(u"this").put('write', var.get('simpleWrite'))
                    var.get(u"this").put('end', var.get('simpleEnd'))
                    return var.get('undefined')
                SWITCHED = True
                break
            var.get(u"this").put('lastNeed', Js(0.0))
            var.get(u"this").put('lastTotal', Js(0.0))
            var.get(u"this").put('lastChar', var.get('Buffer').callprop('allocUnsafe', var.get('nb')))
        PyJsHoisted_StringDecoder_.func_name = 'StringDecoder'
        var.put('StringDecoder', PyJsHoisted_StringDecoder_)
        @Js
        def PyJsHoisted_utf8CheckByte_(byte, this, arguments, var=var):
            var = Scope({'byte':byte, 'this':this, 'arguments':arguments}, var)
            var.registers(['byte'])
            if (var.get('byte')<=Js(127)):
                return Js(0.0)
            else:
                if PyJsStrictEq((var.get('byte')>>Js(5.0)),Js(6)):
                    return Js(2.0)
                else:
                    if PyJsStrictEq((var.get('byte')>>Js(4.0)),Js(14)):
                        return Js(3.0)
                    else:
                        if PyJsStrictEq((var.get('byte')>>Js(3.0)),Js(30)):
                            return Js(4.0)
            return ((-Js(1.0)) if PyJsStrictEq((var.get('byte')>>Js(6.0)),Js(2)) else (-Js(2.0)))
        PyJsHoisted_utf8CheckByte_.func_name = 'utf8CheckByte'
        var.put('utf8CheckByte', PyJsHoisted_utf8CheckByte_)
        @Js
        def PyJsHoisted_utf8CheckIncomplete_(self, buf, i, this, arguments, var=var):
            var = Scope({'self':self, 'buf':buf, 'i':i, 'this':this, 'arguments':arguments}, var)
            var.registers(['self', 'buf', 'i', 'nb', 'j'])
            var.put('j', (var.get('buf').get('length')-Js(1.0)))
            if (var.get('j')<var.get('i')):
                return Js(0.0)
            var.put('nb', var.get('utf8CheckByte')(var.get('buf').get(var.get('j'))))
            if (var.get('nb')>=Js(0.0)):
                if (var.get('nb')>Js(0.0)):
                    var.get('self').put('lastNeed', (var.get('nb')-Js(1.0)))
                return var.get('nb')
            if ((var.put('j',Js(var.get('j').to_number())-Js(1))<var.get('i')) or PyJsStrictEq(var.get('nb'),(-Js(2.0)))):
                return Js(0.0)
            var.put('nb', var.get('utf8CheckByte')(var.get('buf').get(var.get('j'))))
            if (var.get('nb')>=Js(0.0)):
                if (var.get('nb')>Js(0.0)):
                    var.get('self').put('lastNeed', (var.get('nb')-Js(2.0)))
                return var.get('nb')
            if ((var.put('j',Js(var.get('j').to_number())-Js(1))<var.get('i')) or PyJsStrictEq(var.get('nb'),(-Js(2.0)))):
                return Js(0.0)
            var.put('nb', var.get('utf8CheckByte')(var.get('buf').get(var.get('j'))))
            if (var.get('nb')>=Js(0.0)):
                if (var.get('nb')>Js(0.0)):
                    if PyJsStrictEq(var.get('nb'),Js(2.0)):
                        var.put('nb', Js(0.0))
                    else:
                        var.get('self').put('lastNeed', (var.get('nb')-Js(3.0)))
                return var.get('nb')
            return Js(0.0)
        PyJsHoisted_utf8CheckIncomplete_.func_name = 'utf8CheckIncomplete'
        var.put('utf8CheckIncomplete', PyJsHoisted_utf8CheckIncomplete_)
        @Js
        def PyJsHoisted_utf8CheckExtraBytes_(self, buf, p, this, arguments, var=var):
            var = Scope({'self':self, 'buf':buf, 'p':p, 'this':this, 'arguments':arguments}, var)
            var.registers(['self', 'buf', 'p'])
            if PyJsStrictNeq((var.get('buf').get('0')&Js(192)),Js(128)):
                var.get('self').put('lastNeed', Js(0.0))
                return Js('�')
            if ((var.get('self').get('lastNeed')>Js(1.0)) and (var.get('buf').get('length')>Js(1.0))):
                if PyJsStrictNeq((var.get('buf').get('1')&Js(192)),Js(128)):
                    var.get('self').put('lastNeed', Js(1.0))
                    return Js('�')
                if ((var.get('self').get('lastNeed')>Js(2.0)) and (var.get('buf').get('length')>Js(2.0))):
                    if PyJsStrictNeq((var.get('buf').get('2')&Js(192)),Js(128)):
                        var.get('self').put('lastNeed', Js(2.0))
                        return Js('�')
        PyJsHoisted_utf8CheckExtraBytes_.func_name = 'utf8CheckExtraBytes'
        var.put('utf8CheckExtraBytes', PyJsHoisted_utf8CheckExtraBytes_)
        @Js
        def PyJsHoisted_utf8FillLast_(buf, this, arguments, var=var):
            var = Scope({'buf':buf, 'this':this, 'arguments':arguments}, var)
            var.registers(['buf', 'r', 'p'])
            var.put('p', (var.get(u"this").get('lastTotal')-var.get(u"this").get('lastNeed')))
            var.put('r', var.get('utf8CheckExtraBytes')(var.get(u"this"), var.get('buf'), var.get('p')))
            if PyJsStrictNeq(var.get('r'),var.get('undefined')):
                return var.get('r')
            if (var.get(u"this").get('lastNeed')<=var.get('buf').get('length')):
                var.get('buf').callprop('copy', var.get(u"this").get('lastChar'), var.get('p'), Js(0.0), var.get(u"this").get('lastNeed'))
                return var.get(u"this").get('lastChar').callprop('toString', var.get(u"this").get('encoding'), Js(0.0), var.get(u"this").get('lastTotal'))
            var.get('buf').callprop('copy', var.get(u"this").get('lastChar'), var.get('p'), Js(0.0), var.get('buf').get('length'))
            var.get(u"this").put('lastNeed', var.get('buf').get('length'), '-')
        PyJsHoisted_utf8FillLast_.func_name = 'utf8FillLast'
        var.put('utf8FillLast', PyJsHoisted_utf8FillLast_)
        @Js
        def PyJsHoisted_utf8Text_(buf, i, this, arguments, var=var):
            var = Scope({'buf':buf, 'i':i, 'this':this, 'arguments':arguments}, var)
            var.registers(['end', 'buf', 'total', 'i'])
            var.put('total', var.get('utf8CheckIncomplete')(var.get(u"this"), var.get('buf'), var.get('i')))
            if var.get(u"this").get('lastNeed').neg():
                return var.get('buf').callprop('toString', Js('utf8'), var.get('i'))
            var.get(u"this").put('lastTotal', var.get('total'))
            var.put('end', (var.get('buf').get('length')-(var.get('total')-var.get(u"this").get('lastNeed'))))
            var.get('buf').callprop('copy', var.get(u"this").get('lastChar'), Js(0.0), var.get('end'))
            return var.get('buf').callprop('toString', Js('utf8'), var.get('i'), var.get('end'))
        PyJsHoisted_utf8Text_.func_name = 'utf8Text'
        var.put('utf8Text', PyJsHoisted_utf8Text_)
        @Js
        def PyJsHoisted_utf8End_(buf, this, arguments, var=var):
            var = Scope({'buf':buf, 'this':this, 'arguments':arguments}, var)
            var.registers(['r', 'buf'])
            var.put('r', (var.get(u"this").callprop('write', var.get('buf')) if (var.get('buf') and var.get('buf').get('length')) else Js('')))
            if var.get(u"this").get('lastNeed'):
                return (var.get('r')+Js('�'))
            return var.get('r')
        PyJsHoisted_utf8End_.func_name = 'utf8End'
        var.put('utf8End', PyJsHoisted_utf8End_)
        @Js
        def PyJsHoisted_utf16Text_(buf, i, this, arguments, var=var):
            var = Scope({'buf':buf, 'i':i, 'this':this, 'arguments':arguments}, var)
            var.registers(['c', 'r', 'buf', 'i'])
            if PyJsStrictEq(((var.get('buf').get('length')-var.get('i'))%Js(2.0)),Js(0.0)):
                var.put('r', var.get('buf').callprop('toString', Js('utf16le'), var.get('i')))
                if var.get('r'):
                    var.put('c', var.get('r').callprop('charCodeAt', (var.get('r').get('length')-Js(1.0))))
                    if ((var.get('c')>=Js(55296)) and (var.get('c')<=Js(56319))):
                        var.get(u"this").put('lastNeed', Js(2.0))
                        var.get(u"this").put('lastTotal', Js(4.0))
                        var.get(u"this").get('lastChar').put('0', var.get('buf').get((var.get('buf').get('length')-Js(2.0))))
                        var.get(u"this").get('lastChar').put('1', var.get('buf').get((var.get('buf').get('length')-Js(1.0))))
                        return var.get('r').callprop('slice', Js(0.0), (-Js(1.0)))
                return var.get('r')
            var.get(u"this").put('lastNeed', Js(1.0))
            var.get(u"this").put('lastTotal', Js(2.0))
            var.get(u"this").get('lastChar').put('0', var.get('buf').get((var.get('buf').get('length')-Js(1.0))))
            return var.get('buf').callprop('toString', Js('utf16le'), var.get('i'), (var.get('buf').get('length')-Js(1.0)))
        PyJsHoisted_utf16Text_.func_name = 'utf16Text'
        var.put('utf16Text', PyJsHoisted_utf16Text_)
        @Js
        def PyJsHoisted_utf16End_(buf, this, arguments, var=var):
            var = Scope({'buf':buf, 'this':this, 'arguments':arguments}, var)
            var.registers(['end', 'r', 'buf'])
            var.put('r', (var.get(u"this").callprop('write', var.get('buf')) if (var.get('buf') and var.get('buf').get('length')) else Js('')))
            if var.get(u"this").get('lastNeed'):
                var.put('end', (var.get(u"this").get('lastTotal')-var.get(u"this").get('lastNeed')))
                return (var.get('r')+var.get(u"this").get('lastChar').callprop('toString', Js('utf16le'), Js(0.0), var.get('end')))
            return var.get('r')
        PyJsHoisted_utf16End_.func_name = 'utf16End'
        var.put('utf16End', PyJsHoisted_utf16End_)
        @Js
        def PyJsHoisted_base64Text_(buf, i, this, arguments, var=var):
            var = Scope({'buf':buf, 'i':i, 'this':this, 'arguments':arguments}, var)
            var.registers(['n', 'buf', 'i'])
            var.put('n', ((var.get('buf').get('length')-var.get('i'))%Js(3.0)))
            if PyJsStrictEq(var.get('n'),Js(0.0)):
                return var.get('buf').callprop('toString', Js('base64'), var.get('i'))
            var.get(u"this").put('lastNeed', (Js(3.0)-var.get('n')))
            var.get(u"this").put('lastTotal', Js(3.0))
            if PyJsStrictEq(var.get('n'),Js(1.0)):
                var.get(u"this").get('lastChar').put('0', var.get('buf').get((var.get('buf').get('length')-Js(1.0))))
            else:
                var.get(u"this").get('lastChar').put('0', var.get('buf').get((var.get('buf').get('length')-Js(2.0))))
                var.get(u"this").get('lastChar').put('1', var.get('buf').get((var.get('buf').get('length')-Js(1.0))))
            return var.get('buf').callprop('toString', Js('base64'), var.get('i'), (var.get('buf').get('length')-var.get('n')))
        PyJsHoisted_base64Text_.func_name = 'base64Text'
        var.put('base64Text', PyJsHoisted_base64Text_)
        @Js
        def PyJsHoisted_base64End_(buf, this, arguments, var=var):
            var = Scope({'buf':buf, 'this':this, 'arguments':arguments}, var)
            var.registers(['r', 'buf'])
            var.put('r', (var.get(u"this").callprop('write', var.get('buf')) if (var.get('buf') and var.get('buf').get('length')) else Js('')))
            if var.get(u"this").get('lastNeed'):
                return (var.get('r')+var.get(u"this").get('lastChar').callprop('toString', Js('base64'), Js(0.0), (Js(3.0)-var.get(u"this").get('lastNeed'))))
            return var.get('r')
        PyJsHoisted_base64End_.func_name = 'base64End'
        var.put('base64End', PyJsHoisted_base64End_)
        @Js
        def PyJsHoisted_simpleWrite_(buf, this, arguments, var=var):
            var = Scope({'buf':buf, 'this':this, 'arguments':arguments}, var)
            var.registers(['buf'])
            return var.get('buf').callprop('toString', var.get(u"this").get('encoding'))
        PyJsHoisted_simpleWrite_.func_name = 'simpleWrite'
        var.put('simpleWrite', PyJsHoisted_simpleWrite_)
        @Js
        def PyJsHoisted_simpleEnd_(buf, this, arguments, var=var):
            var = Scope({'buf':buf, 'this':this, 'arguments':arguments}, var)
            var.registers(['buf'])
            return (var.get(u"this").callprop('write', var.get('buf')) if (var.get('buf') and var.get('buf').get('length')) else Js(''))
        PyJsHoisted_simpleEnd_.func_name = 'simpleEnd'
        var.put('simpleEnd', PyJsHoisted_simpleEnd_)
        Js('use strict')
        var.put('Buffer', var.get('require')(Js('safe-buffer')).get('Buffer'))
        @Js
        def PyJs_anonymous_2544_(encoding, this, arguments, var=var):
            var = Scope({'encoding':encoding, 'this':this, 'arguments':arguments}, var)
            var.registers(['encoding'])
            var.put('encoding', (Js('')+var.get('encoding')))
            while 1:
                SWITCHED = False
                CONDITION = ((var.get('encoding') and var.get('encoding').callprop('toLowerCase')))
                if SWITCHED or PyJsStrictEq(CONDITION, Js('hex')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('utf8')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('utf-8')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('ascii')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('binary')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('base64')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('ucs2')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('ucs-2')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('utf16le')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('utf-16le')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('raw')):
                    SWITCHED = True
                    return Js(True)
                if True:
                    SWITCHED = True
                    return Js(False)
                SWITCHED = True
                break
        PyJs_anonymous_2544_._set_name('anonymous')
        var.put('isEncoding', (var.get('Buffer').get('isEncoding') or PyJs_anonymous_2544_))
        pass
        pass
        pass
        var.get('exports').put('StringDecoder', var.get('StringDecoder'))
        pass
        @Js
        def PyJs_anonymous_2545_(buf, this, arguments, var=var):
            var = Scope({'buf':buf, 'this':this, 'arguments':arguments}, var)
            var.registers(['r', 'buf', 'i'])
            if PyJsStrictEq(var.get('buf').get('length'),Js(0.0)):
                return Js('')
            pass
            pass
            if var.get(u"this").get('lastNeed'):
                var.put('r', var.get(u"this").callprop('fillLast', var.get('buf')))
                if PyJsStrictEq(var.get('r'),var.get('undefined')):
                    return Js('')
                var.put('i', var.get(u"this").get('lastNeed'))
                var.get(u"this").put('lastNeed', Js(0.0))
            else:
                var.put('i', Js(0.0))
            if (var.get('i')<var.get('buf').get('length')):
                return ((var.get('r')+var.get(u"this").callprop('text', var.get('buf'), var.get('i'))) if var.get('r') else var.get(u"this").callprop('text', var.get('buf'), var.get('i')))
            return (var.get('r') or Js(''))
        PyJs_anonymous_2545_._set_name('anonymous')
        var.get('StringDecoder').get('prototype').put('write', PyJs_anonymous_2545_)
        var.get('StringDecoder').get('prototype').put('end', var.get('utf8End'))
        var.get('StringDecoder').get('prototype').put('text', var.get('utf8Text'))
        @Js
        def PyJs_anonymous_2546_(buf, this, arguments, var=var):
            var = Scope({'buf':buf, 'this':this, 'arguments':arguments}, var)
            var.registers(['buf'])
            if (var.get(u"this").get('lastNeed')<=var.get('buf').get('length')):
                var.get('buf').callprop('copy', var.get(u"this").get('lastChar'), (var.get(u"this").get('lastTotal')-var.get(u"this").get('lastNeed')), Js(0.0), var.get(u"this").get('lastNeed'))
                return var.get(u"this").get('lastChar').callprop('toString', var.get(u"this").get('encoding'), Js(0.0), var.get(u"this").get('lastTotal'))
            var.get('buf').callprop('copy', var.get(u"this").get('lastChar'), (var.get(u"this").get('lastTotal')-var.get(u"this").get('lastNeed')), Js(0.0), var.get('buf').get('length'))
            var.get(u"this").put('lastNeed', var.get('buf').get('length'), '-')
        PyJs_anonymous_2546_._set_name('anonymous')
        var.get('StringDecoder').get('prototype').put('fillLast', PyJs_anonymous_2546_)
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
    PyJs_anonymous_2543_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2547_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_2548_(setImmediate, clearImmediate, this, arguments, var=var):
            var = Scope({'setImmediate':setImmediate, 'clearImmediate':clearImmediate, 'this':this, 'arguments':arguments}, var)
            var.registers(['setImmediate', 'clearImmediate'])
            @Js
            def PyJs_anonymous_2549_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['Timeout', 'nextTick', 'immediateIds', 'apply', 'slice', 'nextImmediateId'])
                @Js
                def PyJsHoisted_Timeout_(id, clearFn, this, arguments, var=var):
                    var = Scope({'id':id, 'clearFn':clearFn, 'this':this, 'arguments':arguments}, var)
                    var.registers(['clearFn', 'id'])
                    var.get(u"this").put('_id', var.get('id'))
                    var.get(u"this").put('_clearFn', var.get('clearFn'))
                PyJsHoisted_Timeout_.func_name = 'Timeout'
                var.put('Timeout', PyJsHoisted_Timeout_)
                var.put('nextTick', var.get('require')(Js('process/browser.js')).get('nextTick'))
                var.put('apply', var.get('Function').get('prototype').get('apply'))
                var.put('slice', var.get('Array').get('prototype').get('slice'))
                var.put('immediateIds', Js({}))
                var.put('nextImmediateId', Js(0.0))
                @Js
                def PyJs_anonymous_2550_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    return var.get('Timeout').create(var.get('apply').callprop('call', var.get('setTimeout'), var.get('window'), var.get('arguments')), var.get('clearTimeout'))
                PyJs_anonymous_2550_._set_name('anonymous')
                var.get('exports').put('setTimeout', PyJs_anonymous_2550_)
                @Js
                def PyJs_anonymous_2551_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    return var.get('Timeout').create(var.get('apply').callprop('call', var.get('setInterval'), var.get('window'), var.get('arguments')), var.get('clearInterval'))
                PyJs_anonymous_2551_._set_name('anonymous')
                var.get('exports').put('setInterval', PyJs_anonymous_2551_)
                @Js
                def PyJs_anonymous_2552_(timeout, this, arguments, var=var):
                    var = Scope({'timeout':timeout, 'this':this, 'arguments':arguments}, var)
                    var.registers(['timeout'])
                    var.get('timeout').callprop('close')
                PyJs_anonymous_2552_._set_name('anonymous')
                var.get('exports').put('clearTimeout', var.get('exports').put('clearInterval', PyJs_anonymous_2552_))
                pass
                @Js
                def PyJs_anonymous_2553_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    pass
                PyJs_anonymous_2553_._set_name('anonymous')
                var.get('Timeout').get('prototype').put('unref', var.get('Timeout').get('prototype').put('ref', PyJs_anonymous_2553_))
                @Js
                def PyJs_anonymous_2554_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.get(u"this").get('_clearFn').callprop('call', var.get('window'), var.get(u"this").get('_id'))
                PyJs_anonymous_2554_._set_name('anonymous')
                var.get('Timeout').get('prototype').put('close', PyJs_anonymous_2554_)
                @Js
                def PyJs_anonymous_2555_(item, msecs, this, arguments, var=var):
                    var = Scope({'item':item, 'msecs':msecs, 'this':this, 'arguments':arguments}, var)
                    var.registers(['item', 'msecs'])
                    var.get('clearTimeout')(var.get('item').get('_idleTimeoutId'))
                    var.get('item').put('_idleTimeout', var.get('msecs'))
                PyJs_anonymous_2555_._set_name('anonymous')
                var.get('exports').put('enroll', PyJs_anonymous_2555_)
                @Js
                def PyJs_anonymous_2556_(item, this, arguments, var=var):
                    var = Scope({'item':item, 'this':this, 'arguments':arguments}, var)
                    var.registers(['item'])
                    var.get('clearTimeout')(var.get('item').get('_idleTimeoutId'))
                    var.get('item').put('_idleTimeout', (-Js(1.0)))
                PyJs_anonymous_2556_._set_name('anonymous')
                var.get('exports').put('unenroll', PyJs_anonymous_2556_)
                @Js
                def PyJs_anonymous_2557_(item, this, arguments, var=var):
                    var = Scope({'item':item, 'this':this, 'arguments':arguments}, var)
                    var.registers(['item', 'msecs'])
                    var.get('clearTimeout')(var.get('item').get('_idleTimeoutId'))
                    var.put('msecs', var.get('item').get('_idleTimeout'))
                    if (var.get('msecs')>=Js(0.0)):
                        @Js
                        def PyJs_onTimeout_2558_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments, 'onTimeout':PyJs_onTimeout_2558_}, var)
                            var.registers([])
                            if var.get('item').get('_onTimeout'):
                                var.get('item').callprop('_onTimeout')
                        PyJs_onTimeout_2558_._set_name('onTimeout')
                        var.get('item').put('_idleTimeoutId', var.get('setTimeout')(PyJs_onTimeout_2558_, var.get('msecs')))
                PyJs_anonymous_2557_._set_name('anonymous')
                var.get('exports').put('_unrefActive', var.get('exports').put('active', PyJs_anonymous_2557_))
                @Js
                def PyJs_anonymous_2559_(fn, this, arguments, var=var):
                    var = Scope({'fn':fn, 'this':this, 'arguments':arguments}, var)
                    var.registers(['args', 'id', 'fn'])
                    var.put('id', (var.put('nextImmediateId',Js(var.get('nextImmediateId').to_number())+Js(1))-Js(1)))
                    var.put('args', (Js(False) if (var.get('arguments').get('length')<Js(2.0)) else var.get('slice').callprop('call', var.get('arguments'), Js(1.0))))
                    var.get('immediateIds').put(var.get('id'), Js(True))
                    @Js
                    def PyJs_onNextTick_2560_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments, 'onNextTick':PyJs_onNextTick_2560_}, var)
                        var.registers([])
                        if var.get('immediateIds').get(var.get('id')):
                            if var.get('args'):
                                var.get('fn').callprop('apply', var.get(u"null"), var.get('args'))
                            else:
                                var.get('fn').callprop('call', var.get(u"null"))
                            var.get('exports').callprop('clearImmediate', var.get('id'))
                    PyJs_onNextTick_2560_._set_name('onNextTick')
                    var.get('nextTick')(PyJs_onNextTick_2560_)
                    return var.get('id')
                PyJs_anonymous_2559_._set_name('anonymous')
                var.get('exports').put('setImmediate', (var.get('setImmediate') if PyJsStrictEq(var.get('setImmediate',throw=False).typeof(),Js('function')) else PyJs_anonymous_2559_))
                @Js
                def PyJs_anonymous_2561_(id, this, arguments, var=var):
                    var = Scope({'id':id, 'this':this, 'arguments':arguments}, var)
                    var.registers(['id'])
                    var.get('immediateIds').delete(var.get('id'))
                PyJs_anonymous_2561_._set_name('anonymous')
                var.get('exports').put('clearImmediate', (var.get('clearImmediate') if PyJsStrictEq(var.get('clearImmediate',throw=False).typeof(),Js('function')) else PyJs_anonymous_2561_))
            PyJs_anonymous_2549_._set_name('anonymous')
            PyJs_anonymous_2549_.callprop('call', var.get(u"this"))
        PyJs_anonymous_2548_._set_name('anonymous')
        PyJs_anonymous_2548_.callprop('call', var.get(u"this"), var.get('require')(Js('timers')).get('setImmediate'), var.get('require')(Js('timers')).get('clearImmediate'))
    PyJs_anonymous_2547_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2562_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        Js('use strict')
        @Js
        def PyJs_anonymous_2563_(fn, this, arguments, var=var):
            var = Scope({'fn':fn, 'this':this, 'arguments':arguments}, var)
            var.registers(['fn'])
            @Js
            def PyJs_anonymous_2564_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['_arguments', '_this3'])
                var.put('_arguments', var.get('arguments'))
                var.put('_this3', var.get(u"this"))
                if PyJsStrictEq(var.get('arguments').get((var.get('arguments').get('length')-Js(1.0))).typeof(),Js('function')):
                    var.get('fn').callprop('apply', var.get(u"this"), var.get('arguments'))
                else:
                    @Js
                    def PyJs_anonymous_2565_(resolve, reject, this, arguments, var=var):
                        var = Scope({'resolve':resolve, 'reject':reject, 'this':this, 'arguments':arguments}, var)
                        var.registers(['resolve', 'reject'])
                        @Js
                        def PyJs_anonymous_2566_(err, res, this, arguments, var=var):
                            var = Scope({'err':err, 'res':res, 'this':this, 'arguments':arguments}, var)
                            var.registers(['err', 'res'])
                            if var.get('err'):
                                return var.get('reject')(var.get('err'))
                            var.get('resolve')(var.get('res'))
                        PyJs_anonymous_2566_._set_name('anonymous')
                        var.get('_arguments').put(var.get('_arguments').get('length'), PyJs_anonymous_2566_)
                        (var.get('_arguments').put('length',Js(var.get('_arguments').get('length').to_number())+Js(1))-Js(1))
                        var.get('fn').callprop('apply', var.get('_this3'), var.get('_arguments'))
                    PyJs_anonymous_2565_._set_name('anonymous')
                    return var.get('Promise').create(PyJs_anonymous_2565_)
            PyJs_anonymous_2564_._set_name('anonymous')
            return var.get('Object').callprop('defineProperty', PyJs_anonymous_2564_, Js('name'), Js({'value':var.get('fn').get('name')}))
        PyJs_anonymous_2563_._set_name('anonymous')
        var.get('exports').put('fromCallback', PyJs_anonymous_2563_)
        @Js
        def PyJs_anonymous_2567_(fn, this, arguments, var=var):
            var = Scope({'fn':fn, 'this':this, 'arguments':arguments}, var)
            var.registers(['fn'])
            @Js
            def PyJs_anonymous_2568_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['cb'])
                var.put('cb', var.get('arguments').get((var.get('arguments').get('length')-Js(1.0))))
                if PyJsStrictNeq(var.get('cb',throw=False).typeof(),Js('function')):
                    return var.get('fn').callprop('apply', var.get(u"this"), var.get('arguments'))
                else:
                    @Js
                    def PyJs_anonymous_2569_(r, this, arguments, var=var):
                        var = Scope({'r':r, 'this':this, 'arguments':arguments}, var)
                        var.registers(['r'])
                        return var.get('cb')(var.get(u"null"), var.get('r'))
                    PyJs_anonymous_2569_._set_name('anonymous')
                    var.get('fn').callprop('apply', var.get(u"this"), var.get('arguments')).callprop('then', PyJs_anonymous_2569_, var.get('cb'))
            PyJs_anonymous_2568_._set_name('anonymous')
            return var.get('Object').callprop('defineProperty', PyJs_anonymous_2568_, Js('name'), Js({'value':var.get('fn').get('name')}))
        PyJs_anonymous_2567_._set_name('anonymous')
        var.get('exports').put('fromPromise', PyJs_anonymous_2567_)
    PyJs_anonymous_2562_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2570_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_2571_(PyJsArg_676c6f62616c_, this, arguments, var=var):
            var = Scope({'global':PyJsArg_676c6f62616c_, 'this':this, 'arguments':arguments}, var)
            var.registers(['global'])
            @Js
            def PyJs_anonymous_2572_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['config', 'deprecate'])
                @Js
                def PyJsHoisted_deprecate_(fn, msg, this, arguments, var=var):
                    var = Scope({'fn':fn, 'msg':msg, 'this':this, 'arguments':arguments}, var)
                    var.registers(['fn', 'msg', 'deprecated', 'warned'])
                    @Js
                    def PyJsHoisted_deprecated_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        if var.get('warned').neg():
                            if var.get('config')(Js('throwDeprecation')):
                                PyJsTempException = JsToPyException(var.get('Error').create(var.get('msg')))
                                raise PyJsTempException
                            else:
                                if var.get('config')(Js('traceDeprecation')):
                                    var.get('console').callprop('trace', var.get('msg'))
                                else:
                                    var.get('console').callprop('warn', var.get('msg'))
                            var.put('warned', Js(True))
                        return var.get('fn').callprop('apply', var.get(u"this"), var.get('arguments'))
                    PyJsHoisted_deprecated_.func_name = 'deprecated'
                    var.put('deprecated', PyJsHoisted_deprecated_)
                    if var.get('config')(Js('noDeprecation')):
                        return var.get('fn')
                    var.put('warned', Js(False))
                    pass
                    return var.get('deprecated')
                PyJsHoisted_deprecate_.func_name = 'deprecate'
                var.put('deprecate', PyJsHoisted_deprecate_)
                @Js
                def PyJsHoisted_config_(name, this, arguments, var=var):
                    var = Scope({'name':name, 'this':this, 'arguments':arguments}, var)
                    var.registers(['val', 'name'])
                    try:
                        if var.get('global').get('localStorage').neg():
                            return Js(False)
                    except PyJsException as PyJsTempException:
                        PyJsHolder_5f_70672777 = var.own.get('_')
                        var.force_own_put('_', PyExceptionToJs(PyJsTempException))
                        try:
                            return Js(False)
                        finally:
                            if PyJsHolder_5f_70672777 is not None:
                                var.own['_'] = PyJsHolder_5f_70672777
                            else:
                                del var.own['_']
                            del PyJsHolder_5f_70672777
                    var.put('val', var.get('global').get('localStorage').get(var.get('name')))
                    if (var.get(u"null")==var.get('val')):
                        return Js(False)
                    return PyJsStrictEq(var.get('String')(var.get('val')).callprop('toLowerCase'),Js('true'))
                PyJsHoisted_config_.func_name = 'config'
                var.put('config', PyJsHoisted_config_)
                var.get('module').put('exports', var.get('deprecate'))
                pass
                pass
            PyJs_anonymous_2572_._set_name('anonymous')
            PyJs_anonymous_2572_.callprop('call', var.get(u"this"))
        PyJs_anonymous_2571_._set_name('anonymous')
        PyJs_anonymous_2571_.callprop('call', var.get(u"this"), (var.get('global') if PyJsStrictNeq(var.get('global',throw=False).typeof(),Js('undefined')) else (var.get('self') if PyJsStrictNeq(var.get('self',throw=False).typeof(),Js('undefined')) else (var.get('window') if PyJsStrictNeq(var.get('window',throw=False).typeof(),Js('undefined')) else Js({})))))
    PyJs_anonymous_2570_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2573_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('arguments').get('4').get('4').get('0').callprop('apply', var.get('exports'), var.get('arguments'))
    PyJs_anonymous_2573_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2574_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['isBigIntObject', 'isInt8Array', 'uncurryThis', 'booleanValue', 'isMapIterator', 'isAsyncFunction', 'isSetToString', 'isDataViewToString', 'SymbolSupported', 'isBigUint64Array', 'isArrayBuffer', 'isGeneratorFunction', 'whichTypedArray', 'isWeakMapToString', 'isTypedArray', 'isPromise', 'isUint16Array', 'isWebAssemblyCompiledModule', 'isMapToString', 'isArgumentsObject', 'isInt16Array', 'isUint8Array', 'isWeakSet', 'BigIntSupported', 'isDataView', 'isSetIterator', 'isUint32Array', 'isGeneratorObject', 'isSet', 'isArrayBufferToString', 'isFloat32Array', 'isNumberObject', 'isBoxedPrimitive', 'bigIntValue', 'ObjectToString', 'isMap', 'require', 'isBooleanObject', 'symbolValue', 'isFloat64Array', 'stringValue', 'isUint8ClampedArray', 'isInt32Array', 'module', 'numberValue', 'isAnyArrayBuffer', 'isSymbolObject', 'exports', 'isWeakMap', 'isWeakSetToString', 'checkBoxedPrimitive', 'isSharedArrayBuffer', 'isSharedArrayBufferToString', 'isStringObject', 'isBigInt64Array', 'isArrayBufferView'])
        @Js
        def PyJsHoisted_uncurryThis_(f, this, arguments, var=var):
            var = Scope({'f':f, 'this':this, 'arguments':arguments}, var)
            var.registers(['f'])
            return var.get('f').get('call').callprop('bind', var.get('f'))
        PyJsHoisted_uncurryThis_.func_name = 'uncurryThis'
        var.put('uncurryThis', PyJsHoisted_uncurryThis_)
        @Js
        def PyJsHoisted_checkBoxedPrimitive_(value, prototypeValueOf, this, arguments, var=var):
            var = Scope({'value':value, 'prototypeValueOf':prototypeValueOf, 'this':this, 'arguments':arguments}, var)
            var.registers(['prototypeValueOf', 'value'])
            if PyJsStrictNeq((Js('undefined') if PyJsStrictEq(var.get('value',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('value'))),Js('object')):
                return Js(False)
            try:
                var.get('prototypeValueOf')(var.get('value'))
                return Js(True)
            except PyJsException as PyJsTempException:
                PyJsHolder_65_80395680 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    return Js(False)
                finally:
                    if PyJsHolder_65_80395680 is not None:
                        var.own['e'] = PyJsHolder_65_80395680
                    else:
                        del var.own['e']
                    del PyJsHolder_65_80395680
        PyJsHoisted_checkBoxedPrimitive_.func_name = 'checkBoxedPrimitive'
        var.put('checkBoxedPrimitive', PyJsHoisted_checkBoxedPrimitive_)
        @Js
        def PyJsHoisted_isPromise_(input, this, arguments, var=var):
            var = Scope({'input':input, 'this':this, 'arguments':arguments}, var)
            var.registers(['input'])
            def PyJs_LONG_2575_(var=var):
                return ((PyJsStrictNeq(var.get('Promise',throw=False).typeof(),Js('undefined')) and var.get('input').instanceof(var.get('Promise'))) or (((PyJsStrictNeq(var.get('input'),var.get(u"null")) and PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('input',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('input'))),Js('object'))) and PyJsStrictEq(var.get('input').get('then').typeof(),Js('function'))) and PyJsStrictEq(var.get('input').get('catch').typeof(),Js('function'))))
            return PyJs_LONG_2575_()
        PyJsHoisted_isPromise_.func_name = 'isPromise'
        var.put('isPromise', PyJsHoisted_isPromise_)
        @Js
        def PyJsHoisted_isArrayBufferView_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            if (PyJsStrictNeq(var.get('ArrayBuffer',throw=False).typeof(),Js('undefined')) and var.get('ArrayBuffer').get('isView')):
                return var.get('ArrayBuffer').callprop('isView', var.get('value'))
            return (var.get('isTypedArray')(var.get('value')) or var.get('isDataView')(var.get('value')))
        PyJsHoisted_isArrayBufferView_.func_name = 'isArrayBufferView'
        var.put('isArrayBufferView', PyJsHoisted_isArrayBufferView_)
        @Js
        def PyJsHoisted_isUint8Array_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            return PyJsStrictEq(var.get('whichTypedArray')(var.get('value')),Js('Uint8Array'))
        PyJsHoisted_isUint8Array_.func_name = 'isUint8Array'
        var.put('isUint8Array', PyJsHoisted_isUint8Array_)
        @Js
        def PyJsHoisted_isUint8ClampedArray_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            return PyJsStrictEq(var.get('whichTypedArray')(var.get('value')),Js('Uint8ClampedArray'))
        PyJsHoisted_isUint8ClampedArray_.func_name = 'isUint8ClampedArray'
        var.put('isUint8ClampedArray', PyJsHoisted_isUint8ClampedArray_)
        @Js
        def PyJsHoisted_isUint16Array_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            return PyJsStrictEq(var.get('whichTypedArray')(var.get('value')),Js('Uint16Array'))
        PyJsHoisted_isUint16Array_.func_name = 'isUint16Array'
        var.put('isUint16Array', PyJsHoisted_isUint16Array_)
        @Js
        def PyJsHoisted_isUint32Array_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            return PyJsStrictEq(var.get('whichTypedArray')(var.get('value')),Js('Uint32Array'))
        PyJsHoisted_isUint32Array_.func_name = 'isUint32Array'
        var.put('isUint32Array', PyJsHoisted_isUint32Array_)
        @Js
        def PyJsHoisted_isInt8Array_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            return PyJsStrictEq(var.get('whichTypedArray')(var.get('value')),Js('Int8Array'))
        PyJsHoisted_isInt8Array_.func_name = 'isInt8Array'
        var.put('isInt8Array', PyJsHoisted_isInt8Array_)
        @Js
        def PyJsHoisted_isInt16Array_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            return PyJsStrictEq(var.get('whichTypedArray')(var.get('value')),Js('Int16Array'))
        PyJsHoisted_isInt16Array_.func_name = 'isInt16Array'
        var.put('isInt16Array', PyJsHoisted_isInt16Array_)
        @Js
        def PyJsHoisted_isInt32Array_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            return PyJsStrictEq(var.get('whichTypedArray')(var.get('value')),Js('Int32Array'))
        PyJsHoisted_isInt32Array_.func_name = 'isInt32Array'
        var.put('isInt32Array', PyJsHoisted_isInt32Array_)
        @Js
        def PyJsHoisted_isFloat32Array_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            return PyJsStrictEq(var.get('whichTypedArray')(var.get('value')),Js('Float32Array'))
        PyJsHoisted_isFloat32Array_.func_name = 'isFloat32Array'
        var.put('isFloat32Array', PyJsHoisted_isFloat32Array_)
        @Js
        def PyJsHoisted_isFloat64Array_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            return PyJsStrictEq(var.get('whichTypedArray')(var.get('value')),Js('Float64Array'))
        PyJsHoisted_isFloat64Array_.func_name = 'isFloat64Array'
        var.put('isFloat64Array', PyJsHoisted_isFloat64Array_)
        @Js
        def PyJsHoisted_isBigInt64Array_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            return PyJsStrictEq(var.get('whichTypedArray')(var.get('value')),Js('BigInt64Array'))
        PyJsHoisted_isBigInt64Array_.func_name = 'isBigInt64Array'
        var.put('isBigInt64Array', PyJsHoisted_isBigInt64Array_)
        @Js
        def PyJsHoisted_isBigUint64Array_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            return PyJsStrictEq(var.get('whichTypedArray')(var.get('value')),Js('BigUint64Array'))
        PyJsHoisted_isBigUint64Array_.func_name = 'isBigUint64Array'
        var.put('isBigUint64Array', PyJsHoisted_isBigUint64Array_)
        @Js
        def PyJsHoisted_isMapToString_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            return PyJsStrictEq(var.get('ObjectToString')(var.get('value')),Js('[object Map]'))
        PyJsHoisted_isMapToString_.func_name = 'isMapToString'
        var.put('isMapToString', PyJsHoisted_isMapToString_)
        @Js
        def PyJsHoisted_isMap_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            if PyJsStrictEq(var.get('Map',throw=False).typeof(),Js('undefined')):
                return Js(False)
            return (var.get('isMapToString')(var.get('value')) if var.get('isMapToString').get('working') else var.get('value').instanceof(var.get('Map')))
        PyJsHoisted_isMap_.func_name = 'isMap'
        var.put('isMap', PyJsHoisted_isMap_)
        @Js
        def PyJsHoisted_isSetToString_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            return PyJsStrictEq(var.get('ObjectToString')(var.get('value')),Js('[object Set]'))
        PyJsHoisted_isSetToString_.func_name = 'isSetToString'
        var.put('isSetToString', PyJsHoisted_isSetToString_)
        @Js
        def PyJsHoisted_isSet_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            if PyJsStrictEq(var.get('Set',throw=False).typeof(),Js('undefined')):
                return Js(False)
            return (var.get('isSetToString')(var.get('value')) if var.get('isSetToString').get('working') else var.get('value').instanceof(var.get('Set')))
        PyJsHoisted_isSet_.func_name = 'isSet'
        var.put('isSet', PyJsHoisted_isSet_)
        @Js
        def PyJsHoisted_isWeakMapToString_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            return PyJsStrictEq(var.get('ObjectToString')(var.get('value')),Js('[object WeakMap]'))
        PyJsHoisted_isWeakMapToString_.func_name = 'isWeakMapToString'
        var.put('isWeakMapToString', PyJsHoisted_isWeakMapToString_)
        @Js
        def PyJsHoisted_isWeakMap_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            if PyJsStrictEq(var.get('WeakMap',throw=False).typeof(),Js('undefined')):
                return Js(False)
            return (var.get('isWeakMapToString')(var.get('value')) if var.get('isWeakMapToString').get('working') else var.get('value').instanceof(var.get('WeakMap')))
        PyJsHoisted_isWeakMap_.func_name = 'isWeakMap'
        var.put('isWeakMap', PyJsHoisted_isWeakMap_)
        @Js
        def PyJsHoisted_isWeakSetToString_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            return PyJsStrictEq(var.get('ObjectToString')(var.get('value')),Js('[object WeakSet]'))
        PyJsHoisted_isWeakSetToString_.func_name = 'isWeakSetToString'
        var.put('isWeakSetToString', PyJsHoisted_isWeakSetToString_)
        @Js
        def PyJsHoisted_isWeakSet_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            return var.get('isWeakSetToString')(var.get('value'))
        PyJsHoisted_isWeakSet_.func_name = 'isWeakSet'
        var.put('isWeakSet', PyJsHoisted_isWeakSet_)
        @Js
        def PyJsHoisted_isArrayBufferToString_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            return PyJsStrictEq(var.get('ObjectToString')(var.get('value')),Js('[object ArrayBuffer]'))
        PyJsHoisted_isArrayBufferToString_.func_name = 'isArrayBufferToString'
        var.put('isArrayBufferToString', PyJsHoisted_isArrayBufferToString_)
        @Js
        def PyJsHoisted_isArrayBuffer_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            if PyJsStrictEq(var.get('ArrayBuffer',throw=False).typeof(),Js('undefined')):
                return Js(False)
            return (var.get('isArrayBufferToString')(var.get('value')) if var.get('isArrayBufferToString').get('working') else var.get('value').instanceof(var.get('ArrayBuffer')))
        PyJsHoisted_isArrayBuffer_.func_name = 'isArrayBuffer'
        var.put('isArrayBuffer', PyJsHoisted_isArrayBuffer_)
        @Js
        def PyJsHoisted_isDataViewToString_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            return PyJsStrictEq(var.get('ObjectToString')(var.get('value')),Js('[object DataView]'))
        PyJsHoisted_isDataViewToString_.func_name = 'isDataViewToString'
        var.put('isDataViewToString', PyJsHoisted_isDataViewToString_)
        @Js
        def PyJsHoisted_isDataView_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            if PyJsStrictEq(var.get('DataView',throw=False).typeof(),Js('undefined')):
                return Js(False)
            return (var.get('isDataViewToString')(var.get('value')) if var.get('isDataViewToString').get('working') else var.get('value').instanceof(var.get('DataView')))
        PyJsHoisted_isDataView_.func_name = 'isDataView'
        var.put('isDataView', PyJsHoisted_isDataView_)
        @Js
        def PyJsHoisted_isSharedArrayBufferToString_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            return PyJsStrictEq(var.get('ObjectToString')(var.get('value')),Js('[object SharedArrayBuffer]'))
        PyJsHoisted_isSharedArrayBufferToString_.func_name = 'isSharedArrayBufferToString'
        var.put('isSharedArrayBufferToString', PyJsHoisted_isSharedArrayBufferToString_)
        @Js
        def PyJsHoisted_isSharedArrayBuffer_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            if PyJsStrictEq(var.get('SharedArrayBuffer',throw=False).typeof(),Js('undefined')):
                return Js(False)
            return (var.get('isSharedArrayBufferToString')(var.get('value')) if var.get('isSharedArrayBufferToString').get('working') else var.get('value').instanceof(var.get('SharedArrayBuffer')))
        PyJsHoisted_isSharedArrayBuffer_.func_name = 'isSharedArrayBuffer'
        var.put('isSharedArrayBuffer', PyJsHoisted_isSharedArrayBuffer_)
        @Js
        def PyJsHoisted_isAsyncFunction_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            return PyJsStrictEq(var.get('ObjectToString')(var.get('value')),Js('[object AsyncFunction]'))
        PyJsHoisted_isAsyncFunction_.func_name = 'isAsyncFunction'
        var.put('isAsyncFunction', PyJsHoisted_isAsyncFunction_)
        @Js
        def PyJsHoisted_isMapIterator_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            return PyJsStrictEq(var.get('ObjectToString')(var.get('value')),Js('[object Map Iterator]'))
        PyJsHoisted_isMapIterator_.func_name = 'isMapIterator'
        var.put('isMapIterator', PyJsHoisted_isMapIterator_)
        @Js
        def PyJsHoisted_isSetIterator_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            return PyJsStrictEq(var.get('ObjectToString')(var.get('value')),Js('[object Set Iterator]'))
        PyJsHoisted_isSetIterator_.func_name = 'isSetIterator'
        var.put('isSetIterator', PyJsHoisted_isSetIterator_)
        @Js
        def PyJsHoisted_isGeneratorObject_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            return PyJsStrictEq(var.get('ObjectToString')(var.get('value')),Js('[object Generator]'))
        PyJsHoisted_isGeneratorObject_.func_name = 'isGeneratorObject'
        var.put('isGeneratorObject', PyJsHoisted_isGeneratorObject_)
        @Js
        def PyJsHoisted_isWebAssemblyCompiledModule_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            return PyJsStrictEq(var.get('ObjectToString')(var.get('value')),Js('[object WebAssembly.Module]'))
        PyJsHoisted_isWebAssemblyCompiledModule_.func_name = 'isWebAssemblyCompiledModule'
        var.put('isWebAssemblyCompiledModule', PyJsHoisted_isWebAssemblyCompiledModule_)
        @Js
        def PyJsHoisted_isNumberObject_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            return var.get('checkBoxedPrimitive')(var.get('value'), var.get('numberValue'))
        PyJsHoisted_isNumberObject_.func_name = 'isNumberObject'
        var.put('isNumberObject', PyJsHoisted_isNumberObject_)
        @Js
        def PyJsHoisted_isStringObject_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            return var.get('checkBoxedPrimitive')(var.get('value'), var.get('stringValue'))
        PyJsHoisted_isStringObject_.func_name = 'isStringObject'
        var.put('isStringObject', PyJsHoisted_isStringObject_)
        @Js
        def PyJsHoisted_isBooleanObject_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            return var.get('checkBoxedPrimitive')(var.get('value'), var.get('booleanValue'))
        PyJsHoisted_isBooleanObject_.func_name = 'isBooleanObject'
        var.put('isBooleanObject', PyJsHoisted_isBooleanObject_)
        @Js
        def PyJsHoisted_isBigIntObject_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            return (var.get('BigIntSupported') and var.get('checkBoxedPrimitive')(var.get('value'), var.get('bigIntValue')))
        PyJsHoisted_isBigIntObject_.func_name = 'isBigIntObject'
        var.put('isBigIntObject', PyJsHoisted_isBigIntObject_)
        @Js
        def PyJsHoisted_isSymbolObject_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            return (var.get('SymbolSupported') and var.get('checkBoxedPrimitive')(var.get('value'), var.get('symbolValue')))
        PyJsHoisted_isSymbolObject_.func_name = 'isSymbolObject'
        var.put('isSymbolObject', PyJsHoisted_isSymbolObject_)
        @Js
        def PyJsHoisted_isBoxedPrimitive_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            return ((((var.get('isNumberObject')(var.get('value')) or var.get('isStringObject')(var.get('value'))) or var.get('isBooleanObject')(var.get('value'))) or var.get('isBigIntObject')(var.get('value'))) or var.get('isSymbolObject')(var.get('value')))
        PyJsHoisted_isBoxedPrimitive_.func_name = 'isBoxedPrimitive'
        var.put('isBoxedPrimitive', PyJsHoisted_isBoxedPrimitive_)
        @Js
        def PyJsHoisted_isAnyArrayBuffer_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            return (PyJsStrictNeq(var.get('Uint8Array',throw=False).typeof(),Js('undefined')) and (var.get('isArrayBuffer')(var.get('value')) or var.get('isSharedArrayBuffer')(var.get('value'))))
        PyJsHoisted_isAnyArrayBuffer_.func_name = 'isAnyArrayBuffer'
        var.put('isAnyArrayBuffer', PyJsHoisted_isAnyArrayBuffer_)
        Js('use strict')
        var.put('isArgumentsObject', var.get('require')(Js('is-arguments')))
        var.put('isGeneratorFunction', var.get('require')(Js('is-generator-function')))
        var.put('whichTypedArray', var.get('require')(Js('which-typed-array')))
        var.put('isTypedArray', var.get('require')(Js('is-typed-array')))
        pass
        var.put('BigIntSupported', PyJsStrictNeq(var.get('BigInt',throw=False).typeof(),Js('undefined')))
        var.put('SymbolSupported', PyJsStrictNeq(var.get('Symbol',throw=False).typeof(),Js('undefined')))
        var.put('ObjectToString', var.get('uncurryThis')(var.get('Object').get('prototype').get('toString')))
        var.put('numberValue', var.get('uncurryThis')(var.get('Number').get('prototype').get('valueOf')))
        var.put('stringValue', var.get('uncurryThis')(var.get('String').get('prototype').get('valueOf')))
        var.put('booleanValue', var.get('uncurryThis')(var.get('Boolean').get('prototype').get('valueOf')))
        if var.get('BigIntSupported'):
            var.put('bigIntValue', var.get('uncurryThis')(var.get('BigInt').get('prototype').get('valueOf')))
        if var.get('SymbolSupported'):
            var.put('symbolValue', var.get('uncurryThis')(var.get('Symbol').get('prototype').get('valueOf')))
        pass
        var.get('exports').put('isArgumentsObject', var.get('isArgumentsObject'))
        var.get('exports').put('isGeneratorFunction', var.get('isGeneratorFunction'))
        var.get('exports').put('isTypedArray', var.get('isTypedArray'))
        pass
        var.get('exports').put('isPromise', var.get('isPromise'))
        pass
        var.get('exports').put('isArrayBufferView', var.get('isArrayBufferView'))
        pass
        var.get('exports').put('isUint8Array', var.get('isUint8Array'))
        pass
        var.get('exports').put('isUint8ClampedArray', var.get('isUint8ClampedArray'))
        pass
        var.get('exports').put('isUint16Array', var.get('isUint16Array'))
        pass
        var.get('exports').put('isUint32Array', var.get('isUint32Array'))
        pass
        var.get('exports').put('isInt8Array', var.get('isInt8Array'))
        pass
        var.get('exports').put('isInt16Array', var.get('isInt16Array'))
        pass
        var.get('exports').put('isInt32Array', var.get('isInt32Array'))
        pass
        var.get('exports').put('isFloat32Array', var.get('isFloat32Array'))
        pass
        var.get('exports').put('isFloat64Array', var.get('isFloat64Array'))
        pass
        var.get('exports').put('isBigInt64Array', var.get('isBigInt64Array'))
        pass
        var.get('exports').put('isBigUint64Array', var.get('isBigUint64Array'))
        pass
        var.get('isMapToString').put('working', (PyJsStrictNeq(var.get('Map',throw=False).typeof(),Js('undefined')) and var.get('isMapToString')(var.get('Map').create())))
        pass
        var.get('exports').put('isMap', var.get('isMap'))
        pass
        var.get('isSetToString').put('working', (PyJsStrictNeq(var.get('Set',throw=False).typeof(),Js('undefined')) and var.get('isSetToString')(var.get('Set').create())))
        pass
        var.get('exports').put('isSet', var.get('isSet'))
        pass
        var.get('isWeakMapToString').put('working', (PyJsStrictNeq(var.get('WeakMap',throw=False).typeof(),Js('undefined')) and var.get('isWeakMapToString')(var.get('WeakMap').create())))
        pass
        var.get('exports').put('isWeakMap', var.get('isWeakMap'))
        pass
        var.get('isWeakSetToString').put('working', (PyJsStrictNeq(var.get('WeakSet',throw=False).typeof(),Js('undefined')) and var.get('isWeakSetToString')(var.get('WeakSet').create())))
        pass
        var.get('exports').put('isWeakSet', var.get('isWeakSet'))
        pass
        var.get('isArrayBufferToString').put('working', (PyJsStrictNeq(var.get('ArrayBuffer',throw=False).typeof(),Js('undefined')) and var.get('isArrayBufferToString')(var.get('ArrayBuffer').create())))
        pass
        var.get('exports').put('isArrayBuffer', var.get('isArrayBuffer'))
        pass
        var.get('isDataViewToString').put('working', ((PyJsStrictNeq(var.get('ArrayBuffer',throw=False).typeof(),Js('undefined')) and PyJsStrictNeq(var.get('DataView',throw=False).typeof(),Js('undefined'))) and var.get('isDataViewToString')(var.get('DataView').create(var.get('ArrayBuffer').create(Js(1.0)), Js(0.0), Js(1.0)))))
        pass
        var.get('exports').put('isDataView', var.get('isDataView'))
        pass
        var.get('isSharedArrayBufferToString').put('working', (PyJsStrictNeq(var.get('SharedArrayBuffer',throw=False).typeof(),Js('undefined')) and var.get('isSharedArrayBufferToString')(var.get('SharedArrayBuffer').create())))
        pass
        var.get('exports').put('isSharedArrayBuffer', var.get('isSharedArrayBuffer'))
        pass
        var.get('exports').put('isAsyncFunction', var.get('isAsyncFunction'))
        pass
        var.get('exports').put('isMapIterator', var.get('isMapIterator'))
        pass
        var.get('exports').put('isSetIterator', var.get('isSetIterator'))
        pass
        var.get('exports').put('isGeneratorObject', var.get('isGeneratorObject'))
        pass
        var.get('exports').put('isWebAssemblyCompiledModule', var.get('isWebAssemblyCompiledModule'))
        pass
        var.get('exports').put('isNumberObject', var.get('isNumberObject'))
        pass
        var.get('exports').put('isStringObject', var.get('isStringObject'))
        pass
        var.get('exports').put('isBooleanObject', var.get('isBooleanObject'))
        pass
        var.get('exports').put('isBigIntObject', var.get('isBigIntObject'))
        pass
        var.get('exports').put('isSymbolObject', var.get('isSymbolObject'))
        pass
        var.get('exports').put('isBoxedPrimitive', var.get('isBoxedPrimitive'))
        pass
        var.get('exports').put('isAnyArrayBuffer', var.get('isAnyArrayBuffer'))
        @Js
        def PyJs_anonymous_2576_(method, this, arguments, var=var):
            var = Scope({'method':method, 'this':this, 'arguments':arguments}, var)
            var.registers(['method'])
            @Js
            def PyJs_value_2577_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'value':PyJs_value_2577_}, var)
                var.registers([])
                PyJsTempException = JsToPyException(var.get('Error').create((var.get('method')+Js(' is not supported in userland'))))
                raise PyJsTempException
            PyJs_value_2577_._set_name('value')
            var.get('Object').callprop('defineProperty', var.get('exports'), var.get('method'), Js({'enumerable':Js(False),'value':PyJs_value_2577_}))
        PyJs_anonymous_2576_._set_name('anonymous')
        Js([Js('isProxy'), Js('isExternal'), Js('isModuleNamespaceObject')]).callprop('forEach', PyJs_anonymous_2576_)
    PyJs_anonymous_2574_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2578_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_2579_(process, this, arguments, var=var):
            var = Scope({'process':process, 'this':this, 'arguments':arguments}, var)
            var.registers(['process'])
            @Js
            def PyJs_anonymous_2580_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['isError', 'objectToString', 'isNumber', 'stylizeNoColor', 'formatRegExp', 'formatError', 'isUndefined', 'kCustomPromisifiedSymbol', 'formatPrimitive', 'isArray', 'reduceToSingleString', 'stylizeWithColor', 'timestamp', 'debugEnvRegex', 'hasOwnProperty', 'isNull', 'inspect', 'formatArray', 'pad', 'isSymbol', 'isBoolean', 'isString', 'isNullOrUndefined', 'isPrimitive', 'debugEnv', 'formatProperty', 'isObject', 'isFunction', 'getOwnPropertyDescriptors', 'callbackifyOnRejected', 'debugs', 'months', 'formatValue', 'callbackify', 'isDate', 'isRegExp', 'arrayToHash'])
                @Js
                def PyJsHoisted_inspect_(obj, opts, this, arguments, var=var):
                    var = Scope({'obj':obj, 'opts':opts, 'this':this, 'arguments':arguments}, var)
                    var.registers(['ctx', 'opts', 'obj'])
                    var.put('ctx', Js({'seen':Js([]),'stylize':var.get('stylizeNoColor')}))
                    if (var.get('arguments').get('length')>=Js(3.0)):
                        var.get('ctx').put('depth', var.get('arguments').get('2'))
                    if (var.get('arguments').get('length')>=Js(4.0)):
                        var.get('ctx').put('colors', var.get('arguments').get('3'))
                    if var.get('isBoolean')(var.get('opts')):
                        var.get('ctx').put('showHidden', var.get('opts'))
                    else:
                        if var.get('opts'):
                            var.get('exports').callprop('_extend', var.get('ctx'), var.get('opts'))
                    if var.get('isUndefined')(var.get('ctx').get('showHidden')):
                        var.get('ctx').put('showHidden', Js(False))
                    if var.get('isUndefined')(var.get('ctx').get('depth')):
                        var.get('ctx').put('depth', Js(2.0))
                    if var.get('isUndefined')(var.get('ctx').get('colors')):
                        var.get('ctx').put('colors', Js(False))
                    if var.get('isUndefined')(var.get('ctx').get('customInspect')):
                        var.get('ctx').put('customInspect', Js(True))
                    if var.get('ctx').get('colors'):
                        var.get('ctx').put('stylize', var.get('stylizeWithColor'))
                    return var.get('formatValue')(var.get('ctx'), var.get('obj'), var.get('ctx').get('depth'))
                PyJsHoisted_inspect_.func_name = 'inspect'
                var.put('inspect', PyJsHoisted_inspect_)
                @Js
                def PyJsHoisted_stylizeWithColor_(str, styleType, this, arguments, var=var):
                    var = Scope({'str':str, 'styleType':styleType, 'this':this, 'arguments':arguments}, var)
                    var.registers(['str', 'style', 'styleType'])
                    var.put('style', var.get('inspect').get('styles').get(var.get('styleType')))
                    if var.get('style'):
                        return ((((((Js('\x1b[')+var.get('inspect').get('colors').get(var.get('style')).get('0'))+Js('m'))+var.get('str'))+Js('\x1b['))+var.get('inspect').get('colors').get(var.get('style')).get('1'))+Js('m'))
                    else:
                        return var.get('str')
                PyJsHoisted_stylizeWithColor_.func_name = 'stylizeWithColor'
                var.put('stylizeWithColor', PyJsHoisted_stylizeWithColor_)
                @Js
                def PyJsHoisted_stylizeNoColor_(str, styleType, this, arguments, var=var):
                    var = Scope({'str':str, 'styleType':styleType, 'this':this, 'arguments':arguments}, var)
                    var.registers(['str', 'styleType'])
                    return var.get('str')
                PyJsHoisted_stylizeNoColor_.func_name = 'stylizeNoColor'
                var.put('stylizeNoColor', PyJsHoisted_stylizeNoColor_)
                @Js
                def PyJsHoisted_arrayToHash_(array, this, arguments, var=var):
                    var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
                    var.registers(['hash', 'array'])
                    var.put('hash', Js({}))
                    @Js
                    def PyJs_anonymous_2590_(val, idx, this, arguments, var=var):
                        var = Scope({'val':val, 'idx':idx, 'this':this, 'arguments':arguments}, var)
                        var.registers(['idx', 'val'])
                        var.get('hash').put(var.get('val'), Js(True))
                    PyJs_anonymous_2590_._set_name('anonymous')
                    var.get('array').callprop('forEach', PyJs_anonymous_2590_)
                    return var.get('hash')
                PyJsHoisted_arrayToHash_.func_name = 'arrayToHash'
                var.put('arrayToHash', PyJsHoisted_arrayToHash_)
                @Js
                def PyJsHoisted_formatValue_(ctx, value, recurseTimes, this, arguments, var=var):
                    var = Scope({'ctx':ctx, 'value':value, 'recurseTimes':recurseTimes, 'this':this, 'arguments':arguments}, var)
                    var.registers(['n', 'visibleKeys', 'braces', 'ret', 'primitive', 'name', 'array', 'value', 'recurseTimes', 'base', 'ctx', 'keys', 'output'])
                    if ((((var.get('ctx').get('customInspect') and var.get('value')) and var.get('isFunction')(var.get('value').get('inspect'))) and PyJsStrictNeq(var.get('value').get('inspect'),var.get('exports').get('inspect'))) and (var.get('value').get('constructor') and PyJsStrictEq(var.get('value').get('constructor').get('prototype'),var.get('value'))).neg()):
                        var.put('ret', var.get('value').callprop('inspect', var.get('recurseTimes'), var.get('ctx')))
                        if var.get('isString')(var.get('ret')).neg():
                            var.put('ret', var.get('formatValue')(var.get('ctx'), var.get('ret'), var.get('recurseTimes')))
                        return var.get('ret')
                    var.put('primitive', var.get('formatPrimitive')(var.get('ctx'), var.get('value')))
                    if var.get('primitive'):
                        return var.get('primitive')
                    var.put('keys', var.get('Object').callprop('keys', var.get('value')))
                    var.put('visibleKeys', var.get('arrayToHash')(var.get('keys')))
                    if var.get('ctx').get('showHidden'):
                        var.put('keys', var.get('Object').callprop('getOwnPropertyNames', var.get('value')))
                    if (var.get('isError')(var.get('value')) and ((var.get('keys').callprop('indexOf', Js('message'))>=Js(0.0)) or (var.get('keys').callprop('indexOf', Js('description'))>=Js(0.0)))):
                        return var.get('formatError')(var.get('value'))
                    if PyJsStrictEq(var.get('keys').get('length'),Js(0.0)):
                        if var.get('isFunction')(var.get('value')):
                            var.put('name', ((Js(': ')+var.get('value').get('name')) if var.get('value').get('name') else Js('')))
                            return var.get('ctx').callprop('stylize', ((Js('[Function')+var.get('name'))+Js(']')), Js('special'))
                        if var.get('isRegExp')(var.get('value')):
                            return var.get('ctx').callprop('stylize', var.get('RegExp').get('prototype').get('toString').callprop('call', var.get('value')), Js('regexp'))
                        if var.get('isDate')(var.get('value')):
                            return var.get('ctx').callprop('stylize', var.get('Date').get('prototype').get('toString').callprop('call', var.get('value')), Js('date'))
                        if var.get('isError')(var.get('value')):
                            return var.get('formatError')(var.get('value'))
                    var.put('base', Js(''))
                    var.put('array', Js(False))
                    var.put('braces', Js([Js('{'), Js('}')]))
                    if var.get('isArray')(var.get('value')):
                        var.put('array', Js(True))
                        var.put('braces', Js([Js('['), Js(']')]))
                    if var.get('isFunction')(var.get('value')):
                        var.put('n', ((Js(': ')+var.get('value').get('name')) if var.get('value').get('name') else Js('')))
                        var.put('base', ((Js(' [Function')+var.get('n'))+Js(']')))
                    if var.get('isRegExp')(var.get('value')):
                        var.put('base', (Js(' ')+var.get('RegExp').get('prototype').get('toString').callprop('call', var.get('value'))))
                    if var.get('isDate')(var.get('value')):
                        var.put('base', (Js(' ')+var.get('Date').get('prototype').get('toUTCString').callprop('call', var.get('value'))))
                    if var.get('isError')(var.get('value')):
                        var.put('base', (Js(' ')+var.get('formatError')(var.get('value'))))
                    if (PyJsStrictEq(var.get('keys').get('length'),Js(0.0)) and (var.get('array').neg() or (var.get('value').get('length')==Js(0.0)))):
                        return ((var.get('braces').get('0')+var.get('base'))+var.get('braces').get('1'))
                    if (var.get('recurseTimes')<Js(0.0)):
                        if var.get('isRegExp')(var.get('value')):
                            return var.get('ctx').callprop('stylize', var.get('RegExp').get('prototype').get('toString').callprop('call', var.get('value')), Js('regexp'))
                        else:
                            return var.get('ctx').callprop('stylize', Js('[Object]'), Js('special'))
                    var.get('ctx').get('seen').callprop('push', var.get('value'))
                    pass
                    if var.get('array'):
                        var.put('output', var.get('formatArray')(var.get('ctx'), var.get('value'), var.get('recurseTimes'), var.get('visibleKeys'), var.get('keys')))
                    else:
                        @Js
                        def PyJs_anonymous_2591_(key, this, arguments, var=var):
                            var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                            var.registers(['key'])
                            return var.get('formatProperty')(var.get('ctx'), var.get('value'), var.get('recurseTimes'), var.get('visibleKeys'), var.get('key'), var.get('array'))
                        PyJs_anonymous_2591_._set_name('anonymous')
                        var.put('output', var.get('keys').callprop('map', PyJs_anonymous_2591_))
                    var.get('ctx').get('seen').callprop('pop')
                    return var.get('reduceToSingleString')(var.get('output'), var.get('base'), var.get('braces'))
                PyJsHoisted_formatValue_.func_name = 'formatValue'
                var.put('formatValue', PyJsHoisted_formatValue_)
                @Js
                def PyJsHoisted_formatPrimitive_(ctx, value, this, arguments, var=var):
                    var = Scope({'ctx':ctx, 'value':value, 'this':this, 'arguments':arguments}, var)
                    var.registers(['ctx', 'value', 'simple'])
                    if var.get('isUndefined')(var.get('value')):
                        return var.get('ctx').callprop('stylize', Js('undefined'), Js('undefined'))
                    if var.get('isString')(var.get('value')):
                        var.put('simple', ((Js("'")+var.get('JSON').callprop('stringify', var.get('value')).callprop('replace', JsRegExp('/^"|"$/g'), Js('')).callprop('replace', JsRegExp("/'/g"), Js("\\'")).callprop('replace', JsRegExp('/\\\\"/g'), Js('"')))+Js("'")))
                        return var.get('ctx').callprop('stylize', var.get('simple'), Js('string'))
                    if var.get('isNumber')(var.get('value')):
                        return var.get('ctx').callprop('stylize', (Js('')+var.get('value')), Js('number'))
                    if var.get('isBoolean')(var.get('value')):
                        return var.get('ctx').callprop('stylize', (Js('')+var.get('value')), Js('boolean'))
                    if var.get('isNull')(var.get('value')):
                        return var.get('ctx').callprop('stylize', Js('null'), Js('null'))
                PyJsHoisted_formatPrimitive_.func_name = 'formatPrimitive'
                var.put('formatPrimitive', PyJsHoisted_formatPrimitive_)
                @Js
                def PyJsHoisted_formatError_(value, this, arguments, var=var):
                    var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                    var.registers(['value'])
                    return ((Js('[')+var.get('Error').get('prototype').get('toString').callprop('call', var.get('value')))+Js(']'))
                PyJsHoisted_formatError_.func_name = 'formatError'
                var.put('formatError', PyJsHoisted_formatError_)
                @Js
                def PyJsHoisted_formatArray_(ctx, value, recurseTimes, visibleKeys, keys, this, arguments, var=var):
                    var = Scope({'ctx':ctx, 'value':value, 'recurseTimes':recurseTimes, 'visibleKeys':visibleKeys, 'keys':keys, 'this':this, 'arguments':arguments}, var)
                    var.registers(['visibleKeys', 'i', 'l', 'recurseTimes', 'value', 'ctx', 'keys', 'output'])
                    var.put('output', Js([]))
                    #for JS loop
                    var.put('i', Js(0.0))
                    var.put('l', var.get('value').get('length'))
                    while (var.get('i')<var.get('l')):
                        try:
                            if var.get('hasOwnProperty')(var.get('value'), var.get('String')(var.get('i'))):
                                var.get('output').callprop('push', var.get('formatProperty')(var.get('ctx'), var.get('value'), var.get('recurseTimes'), var.get('visibleKeys'), var.get('String')(var.get('i')), Js(True)))
                            else:
                                var.get('output').callprop('push', Js(''))
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    @Js
                    def PyJs_anonymous_2592_(key, this, arguments, var=var):
                        var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key'])
                        if var.get('key').callprop('match', JsRegExp('/^\\d+$/')).neg():
                            var.get('output').callprop('push', var.get('formatProperty')(var.get('ctx'), var.get('value'), var.get('recurseTimes'), var.get('visibleKeys'), var.get('key'), Js(True)))
                    PyJs_anonymous_2592_._set_name('anonymous')
                    var.get('keys').callprop('forEach', PyJs_anonymous_2592_)
                    return var.get('output')
                PyJsHoisted_formatArray_.func_name = 'formatArray'
                var.put('formatArray', PyJsHoisted_formatArray_)
                @Js
                def PyJsHoisted_formatProperty_(ctx, value, recurseTimes, visibleKeys, key, array, this, arguments, var=var):
                    var = Scope({'ctx':ctx, 'value':value, 'recurseTimes':recurseTimes, 'visibleKeys':visibleKeys, 'key':key, 'array':array, 'this':this, 'arguments':arguments}, var)
                    var.registers(['visibleKeys', 'str', 'key', 'desc', 'name', 'recurseTimes', 'array', 'ctx', 'value'])
                    pass
                    var.put('desc', (var.get('Object').callprop('getOwnPropertyDescriptor', var.get('value'), var.get('key')) or Js({'value':var.get('value').get(var.get('key'))})))
                    if var.get('desc').get('get'):
                        if var.get('desc').get('set'):
                            var.put('str', var.get('ctx').callprop('stylize', Js('[Getter/Setter]'), Js('special')))
                        else:
                            var.put('str', var.get('ctx').callprop('stylize', Js('[Getter]'), Js('special')))
                    else:
                        if var.get('desc').get('set'):
                            var.put('str', var.get('ctx').callprop('stylize', Js('[Setter]'), Js('special')))
                    if var.get('hasOwnProperty')(var.get('visibleKeys'), var.get('key')).neg():
                        var.put('name', ((Js('[')+var.get('key'))+Js(']')))
                    if var.get('str').neg():
                        if (var.get('ctx').get('seen').callprop('indexOf', var.get('desc').get('value'))<Js(0.0)):
                            if var.get('isNull')(var.get('recurseTimes')):
                                var.put('str', var.get('formatValue')(var.get('ctx'), var.get('desc').get('value'), var.get(u"null")))
                            else:
                                var.put('str', var.get('formatValue')(var.get('ctx'), var.get('desc').get('value'), (var.get('recurseTimes')-Js(1.0))))
                            if (var.get('str').callprop('indexOf', Js('\n'))>(-Js(1.0))):
                                if var.get('array'):
                                    @Js
                                    def PyJs_anonymous_2593_(line, this, arguments, var=var):
                                        var = Scope({'line':line, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['line'])
                                        return (Js('  ')+var.get('line'))
                                    PyJs_anonymous_2593_._set_name('anonymous')
                                    var.put('str', var.get('str').callprop('split', Js('\n')).callprop('map', PyJs_anonymous_2593_).callprop('join', Js('\n')).callprop('substr', Js(2.0)))
                                else:
                                    @Js
                                    def PyJs_anonymous_2594_(line, this, arguments, var=var):
                                        var = Scope({'line':line, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['line'])
                                        return (Js('   ')+var.get('line'))
                                    PyJs_anonymous_2594_._set_name('anonymous')
                                    var.put('str', (Js('\n')+var.get('str').callprop('split', Js('\n')).callprop('map', PyJs_anonymous_2594_).callprop('join', Js('\n'))))
                        else:
                            var.put('str', var.get('ctx').callprop('stylize', Js('[Circular]'), Js('special')))
                    if var.get('isUndefined')(var.get('name')):
                        if (var.get('array') and var.get('key').callprop('match', JsRegExp('/^\\d+$/'))):
                            return var.get('str')
                        var.put('name', var.get('JSON').callprop('stringify', (Js('')+var.get('key'))))
                        if var.get('name').callprop('match', JsRegExp('/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/')):
                            var.put('name', var.get('name').callprop('substr', Js(1.0), (var.get('name').get('length')-Js(2.0))))
                            var.put('name', var.get('ctx').callprop('stylize', var.get('name'), Js('name')))
                        else:
                            var.put('name', var.get('name').callprop('replace', JsRegExp("/'/g"), Js("\\'")).callprop('replace', JsRegExp('/\\\\"/g'), Js('"')).callprop('replace', JsRegExp('/(^"|"$)/g'), Js("'")))
                            var.put('name', var.get('ctx').callprop('stylize', var.get('name'), Js('string')))
                    return ((var.get('name')+Js(': '))+var.get('str'))
                PyJsHoisted_formatProperty_.func_name = 'formatProperty'
                var.put('formatProperty', PyJsHoisted_formatProperty_)
                @Js
                def PyJsHoisted_reduceToSingleString_(output, base, braces, this, arguments, var=var):
                    var = Scope({'output':output, 'base':base, 'braces':braces, 'this':this, 'arguments':arguments}, var)
                    var.registers(['braces', 'numLinesEst', 'length', 'base', 'output'])
                    var.put('numLinesEst', Js(0.0))
                    @Js
                    def PyJs_anonymous_2595_(prev, cur, this, arguments, var=var):
                        var = Scope({'prev':prev, 'cur':cur, 'this':this, 'arguments':arguments}, var)
                        var.registers(['prev', 'cur'])
                        (var.put('numLinesEst',Js(var.get('numLinesEst').to_number())+Js(1))-Js(1))
                        if (var.get('cur').callprop('indexOf', Js('\n'))>=Js(0.0)):
                            (var.put('numLinesEst',Js(var.get('numLinesEst').to_number())+Js(1))-Js(1))
                        return ((var.get('prev')+var.get('cur').callprop('replace', JsRegExp('/\\u001b\\[\\d\\d?m/g'), Js('')).get('length'))+Js(1.0))
                    PyJs_anonymous_2595_._set_name('anonymous')
                    var.put('length', var.get('output').callprop('reduce', PyJs_anonymous_2595_, Js(0.0)))
                    if (var.get('length')>Js(60.0)):
                        return (((((var.get('braces').get('0')+(Js('') if PyJsStrictEq(var.get('base'),Js('')) else (var.get('base')+Js('\n '))))+Js(' '))+var.get('output').callprop('join', Js(',\n  ')))+Js(' '))+var.get('braces').get('1'))
                    return (((((var.get('braces').get('0')+var.get('base'))+Js(' '))+var.get('output').callprop('join', Js(', ')))+Js(' '))+var.get('braces').get('1'))
                PyJsHoisted_reduceToSingleString_.func_name = 'reduceToSingleString'
                var.put('reduceToSingleString', PyJsHoisted_reduceToSingleString_)
                @Js
                def PyJsHoisted_isArray_(ar, this, arguments, var=var):
                    var = Scope({'ar':ar, 'this':this, 'arguments':arguments}, var)
                    var.registers(['ar'])
                    return var.get('Array').callprop('isArray', var.get('ar'))
                PyJsHoisted_isArray_.func_name = 'isArray'
                var.put('isArray', PyJsHoisted_isArray_)
                @Js
                def PyJsHoisted_isBoolean_(arg, this, arguments, var=var):
                    var = Scope({'arg':arg, 'this':this, 'arguments':arguments}, var)
                    var.registers(['arg'])
                    return PyJsStrictEq(var.get('arg',throw=False).typeof(),Js('boolean'))
                PyJsHoisted_isBoolean_.func_name = 'isBoolean'
                var.put('isBoolean', PyJsHoisted_isBoolean_)
                @Js
                def PyJsHoisted_isNull_(arg, this, arguments, var=var):
                    var = Scope({'arg':arg, 'this':this, 'arguments':arguments}, var)
                    var.registers(['arg'])
                    return PyJsStrictEq(var.get('arg'),var.get(u"null"))
                PyJsHoisted_isNull_.func_name = 'isNull'
                var.put('isNull', PyJsHoisted_isNull_)
                @Js
                def PyJsHoisted_isNullOrUndefined_(arg, this, arguments, var=var):
                    var = Scope({'arg':arg, 'this':this, 'arguments':arguments}, var)
                    var.registers(['arg'])
                    return (var.get('arg')==var.get(u"null"))
                PyJsHoisted_isNullOrUndefined_.func_name = 'isNullOrUndefined'
                var.put('isNullOrUndefined', PyJsHoisted_isNullOrUndefined_)
                @Js
                def PyJsHoisted_isNumber_(arg, this, arguments, var=var):
                    var = Scope({'arg':arg, 'this':this, 'arguments':arguments}, var)
                    var.registers(['arg'])
                    return PyJsStrictEq(var.get('arg',throw=False).typeof(),Js('number'))
                PyJsHoisted_isNumber_.func_name = 'isNumber'
                var.put('isNumber', PyJsHoisted_isNumber_)
                @Js
                def PyJsHoisted_isString_(arg, this, arguments, var=var):
                    var = Scope({'arg':arg, 'this':this, 'arguments':arguments}, var)
                    var.registers(['arg'])
                    return PyJsStrictEq(var.get('arg',throw=False).typeof(),Js('string'))
                PyJsHoisted_isString_.func_name = 'isString'
                var.put('isString', PyJsHoisted_isString_)
                @Js
                def PyJsHoisted_isSymbol_(arg, this, arguments, var=var):
                    var = Scope({'arg':arg, 'this':this, 'arguments':arguments}, var)
                    var.registers(['arg'])
                    return PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('arg',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('arg'))),Js('symbol'))
                PyJsHoisted_isSymbol_.func_name = 'isSymbol'
                var.put('isSymbol', PyJsHoisted_isSymbol_)
                @Js
                def PyJsHoisted_isUndefined_(arg, this, arguments, var=var):
                    var = Scope({'arg':arg, 'this':this, 'arguments':arguments}, var)
                    var.registers(['arg'])
                    return PyJsStrictEq(var.get('arg'),PyJsComma(Js(0.0), Js(None)))
                PyJsHoisted_isUndefined_.func_name = 'isUndefined'
                var.put('isUndefined', PyJsHoisted_isUndefined_)
                @Js
                def PyJsHoisted_isRegExp_(re, this, arguments, var=var):
                    var = Scope({'re':re, 'this':this, 'arguments':arguments}, var)
                    var.registers(['re'])
                    return (var.get('isObject')(var.get('re')) and PyJsStrictEq(var.get('objectToString')(var.get('re')),Js('[object RegExp]')))
                PyJsHoisted_isRegExp_.func_name = 'isRegExp'
                var.put('isRegExp', PyJsHoisted_isRegExp_)
                @Js
                def PyJsHoisted_isObject_(arg, this, arguments, var=var):
                    var = Scope({'arg':arg, 'this':this, 'arguments':arguments}, var)
                    var.registers(['arg'])
                    return (PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('arg',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('arg'))),Js('object')) and PyJsStrictNeq(var.get('arg'),var.get(u"null")))
                PyJsHoisted_isObject_.func_name = 'isObject'
                var.put('isObject', PyJsHoisted_isObject_)
                @Js
                def PyJsHoisted_isDate_(d, this, arguments, var=var):
                    var = Scope({'d':d, 'this':this, 'arguments':arguments}, var)
                    var.registers(['d'])
                    return (var.get('isObject')(var.get('d')) and PyJsStrictEq(var.get('objectToString')(var.get('d')),Js('[object Date]')))
                PyJsHoisted_isDate_.func_name = 'isDate'
                var.put('isDate', PyJsHoisted_isDate_)
                @Js
                def PyJsHoisted_isError_(e, this, arguments, var=var):
                    var = Scope({'e':e, 'this':this, 'arguments':arguments}, var)
                    var.registers(['e'])
                    return (var.get('isObject')(var.get('e')) and (PyJsStrictEq(var.get('objectToString')(var.get('e')),Js('[object Error]')) or var.get('e').instanceof(var.get('Error'))))
                PyJsHoisted_isError_.func_name = 'isError'
                var.put('isError', PyJsHoisted_isError_)
                @Js
                def PyJsHoisted_isFunction_(arg, this, arguments, var=var):
                    var = Scope({'arg':arg, 'this':this, 'arguments':arguments}, var)
                    var.registers(['arg'])
                    return PyJsStrictEq(var.get('arg',throw=False).typeof(),Js('function'))
                PyJsHoisted_isFunction_.func_name = 'isFunction'
                var.put('isFunction', PyJsHoisted_isFunction_)
                @Js
                def PyJsHoisted_isPrimitive_(arg, this, arguments, var=var):
                    var = Scope({'arg':arg, 'this':this, 'arguments':arguments}, var)
                    var.registers(['arg'])
                    def PyJs_LONG_2596_(var=var):
                        return ((((PyJsStrictEq(var.get('arg'),var.get(u"null")) or PyJsStrictEq(var.get('arg',throw=False).typeof(),Js('boolean'))) or PyJsStrictEq(var.get('arg',throw=False).typeof(),Js('number'))) or PyJsStrictEq(var.get('arg',throw=False).typeof(),Js('string'))) or PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('arg',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('arg'))),Js('symbol')))
                    return (PyJs_LONG_2596_() or PyJsStrictEq(var.get('arg',throw=False).typeof(),Js('undefined')))
                PyJsHoisted_isPrimitive_.func_name = 'isPrimitive'
                var.put('isPrimitive', PyJsHoisted_isPrimitive_)
                @Js
                def PyJsHoisted_objectToString_(o, this, arguments, var=var):
                    var = Scope({'o':o, 'this':this, 'arguments':arguments}, var)
                    var.registers(['o'])
                    return var.get('Object').get('prototype').get('toString').callprop('call', var.get('o'))
                PyJsHoisted_objectToString_.func_name = 'objectToString'
                var.put('objectToString', PyJsHoisted_objectToString_)
                @Js
                def PyJsHoisted_pad_(n, this, arguments, var=var):
                    var = Scope({'n':n, 'this':this, 'arguments':arguments}, var)
                    var.registers(['n'])
                    return ((Js('0')+var.get('n').callprop('toString', Js(10.0))) if (var.get('n')<Js(10.0)) else var.get('n').callprop('toString', Js(10.0)))
                PyJsHoisted_pad_.func_name = 'pad'
                var.put('pad', PyJsHoisted_pad_)
                @Js
                def PyJsHoisted_timestamp_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers(['d', 'time'])
                    var.put('d', var.get('Date').create())
                    var.put('time', Js([var.get('pad')(var.get('d').callprop('getHours')), var.get('pad')(var.get('d').callprop('getMinutes')), var.get('pad')(var.get('d').callprop('getSeconds'))]).callprop('join', Js(':')))
                    return Js([var.get('d').callprop('getDate'), var.get('months').get(var.get('d').callprop('getMonth')), var.get('time')]).callprop('join', Js(' '))
                PyJsHoisted_timestamp_.func_name = 'timestamp'
                var.put('timestamp', PyJsHoisted_timestamp_)
                @Js
                def PyJsHoisted_hasOwnProperty_(obj, prop, this, arguments, var=var):
                    var = Scope({'obj':obj, 'prop':prop, 'this':this, 'arguments':arguments}, var)
                    var.registers(['prop', 'obj'])
                    return var.get('Object').get('prototype').get('hasOwnProperty').callprop('call', var.get('obj'), var.get('prop'))
                PyJsHoisted_hasOwnProperty_.func_name = 'hasOwnProperty'
                var.put('hasOwnProperty', PyJsHoisted_hasOwnProperty_)
                @Js
                def PyJsHoisted_callbackifyOnRejected_(reason, cb, this, arguments, var=var):
                    var = Scope({'reason':reason, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['reason', 'newReason', 'cb'])
                    if var.get('reason').neg():
                        var.put('newReason', var.get('Error').create(Js('Promise was rejected with a falsy value')))
                        var.get('newReason').put('reason', var.get('reason'))
                        var.put('reason', var.get('newReason'))
                    return var.get('cb')(var.get('reason'))
                PyJsHoisted_callbackifyOnRejected_.func_name = 'callbackifyOnRejected'
                var.put('callbackifyOnRejected', PyJsHoisted_callbackifyOnRejected_)
                @Js
                def PyJsHoisted_callbackify_(original, this, arguments, var=var):
                    var = Scope({'original':original, 'this':this, 'arguments':arguments}, var)
                    var.registers(['callbackified', 'original'])
                    @Js
                    def PyJsHoisted_callbackified_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['self', 'i', 'cb', 'args', 'maybeCb'])
                        var.put('args', Js([]))
                        #for JS loop
                        var.put('i', Js(0.0))
                        while (var.get('i')<var.get('arguments').get('length')):
                            try:
                                var.get('args').callprop('push', var.get('arguments').get(var.get('i')))
                            finally:
                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                        var.put('maybeCb', var.get('args').callprop('pop'))
                        if PyJsStrictNeq(var.get('maybeCb',throw=False).typeof(),Js('function')):
                            PyJsTempException = JsToPyException(var.get('TypeError').create(Js('The last argument must be of type Function')))
                            raise PyJsTempException
                        var.put('self', var.get(u"this"))
                        @Js
                        def PyJs_cb_2602_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments, 'cb':PyJs_cb_2602_}, var)
                            var.registers([])
                            return var.get('maybeCb').callprop('apply', var.get('self'), var.get('arguments'))
                        PyJs_cb_2602_._set_name('cb')
                        var.put('cb', PyJs_cb_2602_)
                        @Js
                        def PyJs_anonymous_2603_(ret, this, arguments, var=var):
                            var = Scope({'ret':ret, 'this':this, 'arguments':arguments}, var)
                            var.registers(['ret'])
                            var.get('process').callprop('nextTick', var.get('cb').callprop('bind', var.get(u"null"), var.get(u"null"), var.get('ret')))
                        PyJs_anonymous_2603_._set_name('anonymous')
                        @Js
                        def PyJs_anonymous_2604_(rej, this, arguments, var=var):
                            var = Scope({'rej':rej, 'this':this, 'arguments':arguments}, var)
                            var.registers(['rej'])
                            var.get('process').callprop('nextTick', var.get('callbackifyOnRejected').callprop('bind', var.get(u"null"), var.get('rej'), var.get('cb')))
                        PyJs_anonymous_2604_._set_name('anonymous')
                        var.get('original').callprop('apply', var.get(u"this"), var.get('args')).callprop('then', PyJs_anonymous_2603_, PyJs_anonymous_2604_)
                    PyJsHoisted_callbackified_.func_name = 'callbackified'
                    var.put('callbackified', PyJsHoisted_callbackified_)
                    if PyJsStrictNeq(var.get('original',throw=False).typeof(),Js('function')):
                        PyJsTempException = JsToPyException(var.get('TypeError').create(Js('The "original" argument must be of type Function')))
                        raise PyJsTempException
                    pass
                    var.get('Object').callprop('setPrototypeOf', var.get('callbackified'), var.get('Object').callprop('getPrototypeOf', var.get('original')))
                    var.get('Object').callprop('defineProperties', var.get('callbackified'), var.get('getOwnPropertyDescriptors')(var.get('original')))
                    return var.get('callbackified')
                PyJsHoisted_callbackify_.func_name = 'callbackify'
                var.put('callbackify', PyJsHoisted_callbackify_)
                @Js
                def PyJs_getOwnPropertyDescriptors_2581_(obj, this, arguments, var=var):
                    var = Scope({'obj':obj, 'this':this, 'arguments':arguments, 'getOwnPropertyDescriptors':PyJs_getOwnPropertyDescriptors_2581_}, var)
                    var.registers(['obj', 'keys', 'descriptors', 'i'])
                    var.put('keys', var.get('Object').callprop('keys', var.get('obj')))
                    var.put('descriptors', Js({}))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('keys').get('length')):
                        try:
                            var.get('descriptors').put(var.get('keys').get(var.get('i')), var.get('Object').callprop('getOwnPropertyDescriptor', var.get('obj'), var.get('keys').get(var.get('i'))))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    return var.get('descriptors')
                PyJs_getOwnPropertyDescriptors_2581_._set_name('getOwnPropertyDescriptors')
                var.put('getOwnPropertyDescriptors', (var.get('Object').get('getOwnPropertyDescriptors') or PyJs_getOwnPropertyDescriptors_2581_))
                var.put('formatRegExp', JsRegExp('/%[sdj%]/g'))
                @Js
                def PyJs_anonymous_2582_(f, this, arguments, var=var):
                    var = Scope({'f':f, 'this':this, 'arguments':arguments}, var)
                    var.registers(['len', 'x', 'i', 'objects', 'str', 'args', 'f'])
                    if var.get('isString')(var.get('f')).neg():
                        var.put('objects', Js([]))
                        #for JS loop
                        var.put('i', Js(0.0))
                        while (var.get('i')<var.get('arguments').get('length')):
                            try:
                                var.get('objects').callprop('push', var.get('inspect')(var.get('arguments').get(var.get('i'))))
                            finally:
                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                        return var.get('objects').callprop('join', Js(' '))
                    var.put('i', Js(1.0))
                    var.put('args', var.get('arguments'))
                    var.put('len', var.get('args').get('length'))
                    @Js
                    def PyJs_anonymous_2583_(x, this, arguments, var=var):
                        var = Scope({'x':x, 'this':this, 'arguments':arguments}, var)
                        var.registers(['x'])
                        if PyJsStrictEq(var.get('x'),Js('%%')):
                            return Js('%')
                        if (var.get('i')>=var.get('len')):
                            return var.get('x')
                        while 1:
                            SWITCHED = False
                            CONDITION = (var.get('x'))
                            if SWITCHED or PyJsStrictEq(CONDITION, Js('%s')):
                                SWITCHED = True
                                return var.get('String')(var.get('args').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))
                            if SWITCHED or PyJsStrictEq(CONDITION, Js('%d')):
                                SWITCHED = True
                                return var.get('Number')(var.get('args').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))
                            if SWITCHED or PyJsStrictEq(CONDITION, Js('%j')):
                                SWITCHED = True
                                try:
                                    return var.get('JSON').callprop('stringify', var.get('args').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))
                                except PyJsException as PyJsTempException:
                                    PyJsHolder_5f_9553301 = var.own.get('_')
                                    var.force_own_put('_', PyExceptionToJs(PyJsTempException))
                                    try:
                                        return Js('[Circular]')
                                    finally:
                                        if PyJsHolder_5f_9553301 is not None:
                                            var.own['_'] = PyJsHolder_5f_9553301
                                        else:
                                            del var.own['_']
                                        del PyJsHolder_5f_9553301
                            if True:
                                SWITCHED = True
                                return var.get('x')
                            SWITCHED = True
                            break
                    PyJs_anonymous_2583_._set_name('anonymous')
                    var.put('str', var.get('String')(var.get('f')).callprop('replace', var.get('formatRegExp'), PyJs_anonymous_2583_))
                    #for JS loop
                    var.put('x', var.get('args').get(var.get('i')))
                    while (var.get('i')<var.get('len')):
                        try:
                            if (var.get('isNull')(var.get('x')) or var.get('isObject')(var.get('x')).neg()):
                                var.put('str', (Js(' ')+var.get('x')), '+')
                            else:
                                var.put('str', (Js(' ')+var.get('inspect')(var.get('x'))), '+')
                        finally:
                                var.put('x', var.get('args').get(var.put('i',Js(var.get('i').to_number())+Js(1))))
                    return var.get('str')
                PyJs_anonymous_2582_._set_name('anonymous')
                var.get('exports').put('format', PyJs_anonymous_2582_)
                @Js
                def PyJs_anonymous_2584_(fn, msg, this, arguments, var=var):
                    var = Scope({'fn':fn, 'msg':msg, 'this':this, 'arguments':arguments}, var)
                    var.registers(['fn', 'msg', 'deprecated', 'warned'])
                    @Js
                    def PyJsHoisted_deprecated_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        if var.get('warned').neg():
                            if var.get('process').get('throwDeprecation'):
                                PyJsTempException = JsToPyException(var.get('Error').create(var.get('msg')))
                                raise PyJsTempException
                            else:
                                if var.get('process').get('traceDeprecation'):
                                    var.get('console').callprop('trace', var.get('msg'))
                                else:
                                    var.get('console').callprop('error', var.get('msg'))
                            var.put('warned', Js(True))
                        return var.get('fn').callprop('apply', var.get(u"this"), var.get('arguments'))
                    PyJsHoisted_deprecated_.func_name = 'deprecated'
                    var.put('deprecated', PyJsHoisted_deprecated_)
                    if (PyJsStrictNeq(var.get('process',throw=False).typeof(),Js('undefined')) and PyJsStrictEq(var.get('process').get('noDeprecation'),Js(True))):
                        return var.get('fn')
                    if PyJsStrictEq(var.get('process',throw=False).typeof(),Js('undefined')):
                        @Js
                        def PyJs_anonymous_2585_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers([])
                            return var.get('exports').callprop('deprecate', var.get('fn'), var.get('msg')).callprop('apply', var.get(u"this"), var.get('arguments'))
                        PyJs_anonymous_2585_._set_name('anonymous')
                        return PyJs_anonymous_2585_
                    var.put('warned', Js(False))
                    pass
                    return var.get('deprecated')
                PyJs_anonymous_2584_._set_name('anonymous')
                var.get('exports').put('deprecate', PyJs_anonymous_2584_)
                var.put('debugs', Js({}))
                var.put('debugEnvRegex', JsRegExp('/^$/'))
                if var.get('process').get('env').get('NODE_DEBUG'):
                    var.put('debugEnv', var.get('process').get('env').get('NODE_DEBUG'))
                    var.put('debugEnv', var.get('debugEnv').callprop('replace', JsRegExp('/[|\\\\{}()[\\]^$+?.]/g'), Js('\\$&')).callprop('replace', JsRegExp('/\\*/g'), Js('.*')).callprop('replace', JsRegExp('/,/g'), Js('$|^')).callprop('toUpperCase'))
                    var.put('debugEnvRegex', var.get('RegExp').create(((Js('^')+var.get('debugEnv'))+Js('$')), Js('i')))
                @Js
                def PyJs_anonymous_2586_(set, this, arguments, var=var):
                    var = Scope({'set':set, 'this':this, 'arguments':arguments}, var)
                    var.registers(['pid', 'set'])
                    var.put('set', var.get('set').callprop('toUpperCase'))
                    if var.get('debugs').get(var.get('set')).neg():
                        if var.get('debugEnvRegex').callprop('test', var.get('set')):
                            var.put('pid', var.get('process').get('pid'))
                            @Js
                            def PyJs_anonymous_2587_(this, arguments, var=var):
                                var = Scope({'this':this, 'arguments':arguments}, var)
                                var.registers(['msg'])
                                var.put('msg', var.get('exports').get('format').callprop('apply', var.get('exports'), var.get('arguments')))
                                var.get('console').callprop('error', Js('%s %d: %s'), var.get('set'), var.get('pid'), var.get('msg'))
                            PyJs_anonymous_2587_._set_name('anonymous')
                            var.get('debugs').put(var.get('set'), PyJs_anonymous_2587_)
                        else:
                            @Js
                            def PyJs_anonymous_2588_(this, arguments, var=var):
                                var = Scope({'this':this, 'arguments':arguments}, var)
                                var.registers([])
                                pass
                            PyJs_anonymous_2588_._set_name('anonymous')
                            var.get('debugs').put(var.get('set'), PyJs_anonymous_2588_)
                    return var.get('debugs').get(var.get('set'))
                PyJs_anonymous_2586_._set_name('anonymous')
                var.get('exports').put('debuglog', PyJs_anonymous_2586_)
                pass
                var.get('exports').put('inspect', var.get('inspect'))
                def PyJs_LONG_2589_(var=var):
                    return var.get('inspect').put('colors', Js({'bold':Js([Js(1.0), Js(22.0)]),'italic':Js([Js(3.0), Js(23.0)]),'underline':Js([Js(4.0), Js(24.0)]),'inverse':Js([Js(7.0), Js(27.0)]),'white':Js([Js(37.0), Js(39.0)]),'grey':Js([Js(90.0), Js(39.0)]),'black':Js([Js(30.0), Js(39.0)]),'blue':Js([Js(34.0), Js(39.0)]),'cyan':Js([Js(36.0), Js(39.0)]),'green':Js([Js(32.0), Js(39.0)]),'magenta':Js([Js(35.0), Js(39.0)]),'red':Js([Js(31.0), Js(39.0)]),'yellow':Js([Js(33.0), Js(39.0)])}))
                PyJs_LONG_2589_()
                var.get('inspect').put('styles', Js({'special':Js('cyan'),'number':Js('yellow'),'boolean':Js('yellow'),'undefined':Js('grey'),'null':Js('bold'),'string':Js('green'),'date':Js('magenta'),'regexp':Js('red')}))
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                var.get('exports').put('types', var.get('require')(Js('./support/types')))
                pass
                var.get('exports').put('isArray', var.get('isArray'))
                pass
                var.get('exports').put('isBoolean', var.get('isBoolean'))
                pass
                var.get('exports').put('isNull', var.get('isNull'))
                pass
                var.get('exports').put('isNullOrUndefined', var.get('isNullOrUndefined'))
                pass
                var.get('exports').put('isNumber', var.get('isNumber'))
                pass
                var.get('exports').put('isString', var.get('isString'))
                pass
                var.get('exports').put('isSymbol', var.get('isSymbol'))
                pass
                var.get('exports').put('isUndefined', var.get('isUndefined'))
                pass
                var.get('exports').put('isRegExp', var.get('isRegExp'))
                var.get('exports').get('types').put('isRegExp', var.get('isRegExp'))
                pass
                var.get('exports').put('isObject', var.get('isObject'))
                pass
                var.get('exports').put('isDate', var.get('isDate'))
                var.get('exports').get('types').put('isDate', var.get('isDate'))
                pass
                var.get('exports').put('isError', var.get('isError'))
                var.get('exports').get('types').put('isNativeError', var.get('isError'))
                pass
                var.get('exports').put('isFunction', var.get('isFunction'))
                pass
                var.get('exports').put('isPrimitive', var.get('isPrimitive'))
                var.get('exports').put('isBuffer', var.get('require')(Js('./support/isBuffer')))
                pass
                pass
                var.put('months', Js([Js('Jan'), Js('Feb'), Js('Mar'), Js('Apr'), Js('May'), Js('Jun'), Js('Jul'), Js('Aug'), Js('Sep'), Js('Oct'), Js('Nov'), Js('Dec')]))
                pass
                @Js
                def PyJs_anonymous_2597_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.get('console').callprop('log', Js('%s - %s'), var.get('timestamp')(), var.get('exports').get('format').callprop('apply', var.get('exports'), var.get('arguments')))
                PyJs_anonymous_2597_._set_name('anonymous')
                var.get('exports').put('log', PyJs_anonymous_2597_)
                var.get('exports').put('inherits', var.get('require')(Js('inherits')))
                @Js
                def PyJs_anonymous_2598_(origin, add, this, arguments, var=var):
                    var = Scope({'origin':origin, 'add':add, 'this':this, 'arguments':arguments}, var)
                    var.registers(['origin', 'keys', 'i', 'add'])
                    if (var.get('add').neg() or var.get('isObject')(var.get('add')).neg()):
                        return var.get('origin')
                    var.put('keys', var.get('Object').callprop('keys', var.get('add')))
                    var.put('i', var.get('keys').get('length'))
                    while (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1)):
                        var.get('origin').put(var.get('keys').get(var.get('i')), var.get('add').get(var.get('keys').get(var.get('i'))))
                    return var.get('origin')
                PyJs_anonymous_2598_._set_name('anonymous')
                var.get('exports').put('_extend', PyJs_anonymous_2598_)
                pass
                var.put('kCustomPromisifiedSymbol', (var.get('Symbol')(Js('util.promisify.custom')) if PyJsStrictNeq(var.get('Symbol',throw=False).typeof(),Js('undefined')) else var.get('undefined')))
                @Js
                def PyJs_promisify_2599_(original, this, arguments, var=var):
                    var = Scope({'original':original, 'this':this, 'arguments':arguments, 'promisify':PyJs_promisify_2599_}, var)
                    var.registers(['fn', 'original'])
                    @Js
                    def PyJsHoisted_fn_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['i', 'promiseReject', 'promise', 'args', 'promiseResolve'])
                        pass
                        @Js
                        def PyJs_anonymous_2600_(resolve, reject, this, arguments, var=var):
                            var = Scope({'resolve':resolve, 'reject':reject, 'this':this, 'arguments':arguments}, var)
                            var.registers(['resolve', 'reject'])
                            var.put('promiseResolve', var.get('resolve'))
                            var.put('promiseReject', var.get('reject'))
                        PyJs_anonymous_2600_._set_name('anonymous')
                        var.put('promise', var.get('Promise').create(PyJs_anonymous_2600_))
                        var.put('args', Js([]))
                        #for JS loop
                        var.put('i', Js(0.0))
                        while (var.get('i')<var.get('arguments').get('length')):
                            try:
                                var.get('args').callprop('push', var.get('arguments').get(var.get('i')))
                            finally:
                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                        @Js
                        def PyJs_anonymous_2601_(err, value, this, arguments, var=var):
                            var = Scope({'err':err, 'value':value, 'this':this, 'arguments':arguments}, var)
                            var.registers(['err', 'value'])
                            if var.get('err'):
                                var.get('promiseReject')(var.get('err'))
                            else:
                                var.get('promiseResolve')(var.get('value'))
                        PyJs_anonymous_2601_._set_name('anonymous')
                        var.get('args').callprop('push', PyJs_anonymous_2601_)
                        try:
                            var.get('original').callprop('apply', var.get(u"this"), var.get('args'))
                        except PyJsException as PyJsTempException:
                            PyJsHolder_657272_88887834 = var.own.get('err')
                            var.force_own_put('err', PyExceptionToJs(PyJsTempException))
                            try:
                                var.get('promiseReject')(var.get('err'))
                            finally:
                                if PyJsHolder_657272_88887834 is not None:
                                    var.own['err'] = PyJsHolder_657272_88887834
                                else:
                                    del var.own['err']
                                del PyJsHolder_657272_88887834
                        return var.get('promise')
                    PyJsHoisted_fn_.func_name = 'fn'
                    var.put('fn', PyJsHoisted_fn_)
                    if PyJsStrictNeq(var.get('original',throw=False).typeof(),Js('function')):
                        PyJsTempException = JsToPyException(var.get('TypeError').create(Js('The "original" argument must be of type Function')))
                        raise PyJsTempException
                    if (var.get('kCustomPromisifiedSymbol') and var.get('original').get(var.get('kCustomPromisifiedSymbol'))):
                        var.put('fn', var.get('original').get(var.get('kCustomPromisifiedSymbol')))
                        if PyJsStrictNeq(var.get('fn',throw=False).typeof(),Js('function')):
                            PyJsTempException = JsToPyException(var.get('TypeError').create(Js('The "util.promisify.custom" argument must be of type Function')))
                            raise PyJsTempException
                        var.get('Object').callprop('defineProperty', var.get('fn'), var.get('kCustomPromisifiedSymbol'), Js({'value':var.get('fn'),'enumerable':Js(False),'writable':Js(False),'configurable':Js(True)}))
                        return var.get('fn')
                    pass
                    var.get('Object').callprop('setPrototypeOf', var.get('fn'), var.get('Object').callprop('getPrototypeOf', var.get('original')))
                    if var.get('kCustomPromisifiedSymbol'):
                        var.get('Object').callprop('defineProperty', var.get('fn'), var.get('kCustomPromisifiedSymbol'), Js({'value':var.get('fn'),'enumerable':Js(False),'writable':Js(False),'configurable':Js(True)}))
                    return var.get('Object').callprop('defineProperties', var.get('fn'), var.get('getOwnPropertyDescriptors')(var.get('original')))
                PyJs_promisify_2599_._set_name('promisify')
                var.get('exports').put('promisify', PyJs_promisify_2599_)
                var.get('exports').get('promisify').put('custom', var.get('kCustomPromisifiedSymbol'))
                pass
                pass
                var.get('exports').put('callbackify', var.get('callbackify'))
            PyJs_anonymous_2580_._set_name('anonymous')
            PyJs_anonymous_2580_.callprop('call', var.get(u"this"))
        PyJs_anonymous_2579_._set_name('anonymous')
        PyJs_anonymous_2579_.callprop('call', var.get(u"this"), var.get('require')(Js('_process')))
    PyJs_anonymous_2578_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2605_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_2606_(PyJsArg_676c6f62616c_, this, arguments, var=var):
            var = Scope({'global':PyJsArg_676c6f62616c_, 'this':this, 'arguments':arguments}, var)
            var.registers(['global'])
            @Js
            def PyJs_anonymous_2607_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['hasToStringTag', 'availableTypedArrays', 'toStrTags', 'getPrototypeOf', 'isTypedArray', '$toString', 'typedArrays', '$slice', 'gOPD', 'tryTypedArrays', 'callBound', 'hasSymbols', 'forEach'])
                Js('use strict')
                var.put('forEach', var.get('require')(Js('foreach')))
                var.put('availableTypedArrays', var.get('require')(Js('available-typed-arrays')))
                var.put('callBound', var.get('require')(Js('es-abstract/helpers/callBound')))
                var.put('$toString', var.get('callBound')(Js('Object.prototype.toString')))
                var.put('hasSymbols', var.get('require')(Js('has-symbols'))())
                var.put('hasToStringTag', (var.get('hasSymbols') and PyJsStrictEq(var.get('_typeof')(var.get('Symbol').get('toStringTag')),Js('symbol'))))
                var.put('typedArrays', var.get('availableTypedArrays')())
                var.put('$slice', var.get('callBound')(Js('String.prototype.slice')))
                var.put('toStrTags', Js({}))
                var.put('gOPD', var.get('require')(Js('es-abstract/helpers/getOwnPropertyDescriptor')))
                var.put('getPrototypeOf', var.get('Object').get('getPrototypeOf'))
                if ((var.get('hasToStringTag') and var.get('gOPD')) and var.get('getPrototypeOf')):
                    @Js
                    def PyJs_anonymous_2608_(typedArray, this, arguments, var=var):
                        var = Scope({'typedArray':typedArray, 'this':this, 'arguments':arguments}, var)
                        var.registers(['typedArray', 'descriptor', 'proto', 'superProto', 'arr'])
                        if PyJsStrictEq(var.get('global').get(var.get('typedArray')).typeof(),Js('function')):
                            var.put('arr', var.get('global').get(var.get('typedArray')).create())
                            if var.get('arr').contains(var.get('Symbol').get('toStringTag')).neg():
                                PyJsTempException = JsToPyException(var.get('EvalError').create(((Js('this engine has support for Symbol.toStringTag, but ')+var.get('typedArray'))+Js(' does not have the property! Please report this.'))))
                                raise PyJsTempException
                            var.put('proto', var.get('getPrototypeOf')(var.get('arr')))
                            var.put('descriptor', var.get('gOPD')(var.get('proto'), var.get('Symbol').get('toStringTag')))
                            if var.get('descriptor').neg():
                                var.put('superProto', var.get('getPrototypeOf')(var.get('proto')))
                                var.put('descriptor', var.get('gOPD')(var.get('superProto'), var.get('Symbol').get('toStringTag')))
                            var.get('toStrTags').put(var.get('typedArray'), var.get('descriptor').get('get'))
                    PyJs_anonymous_2608_._set_name('anonymous')
                    var.get('forEach')(var.get('typedArrays'), PyJs_anonymous_2608_)
                @Js
                def PyJs_tryAllTypedArrays_2609_(value, this, arguments, var=var):
                    var = Scope({'value':value, 'this':this, 'arguments':arguments, 'tryAllTypedArrays':PyJs_tryAllTypedArrays_2609_}, var)
                    var.registers(['foundName', 'value'])
                    var.put('foundName', Js(False))
                    @Js
                    def PyJs_anonymous_2610_(getter, typedArray, this, arguments, var=var):
                        var = Scope({'getter':getter, 'typedArray':typedArray, 'this':this, 'arguments':arguments}, var)
                        var.registers(['typedArray', 'getter', 'name'])
                        if var.get('foundName').neg():
                            try:
                                var.put('name', var.get('getter').callprop('call', var.get('value')))
                                if PyJsStrictEq(var.get('name'),var.get('typedArray')):
                                    var.put('foundName', var.get('name'))
                            except PyJsException as PyJsTempException:
                                PyJsHolder_65_16690655 = var.own.get('e')
                                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                                try:
                                    pass
                                finally:
                                    if PyJsHolder_65_16690655 is not None:
                                        var.own['e'] = PyJsHolder_65_16690655
                                    else:
                                        del var.own['e']
                                    del PyJsHolder_65_16690655
                    PyJs_anonymous_2610_._set_name('anonymous')
                    var.get('forEach')(var.get('toStrTags'), PyJs_anonymous_2610_)
                    return var.get('foundName')
                PyJs_tryAllTypedArrays_2609_._set_name('tryAllTypedArrays')
                var.put('tryTypedArrays', PyJs_tryAllTypedArrays_2609_)
                var.put('isTypedArray', var.get('require')(Js('is-typed-array')))
                @Js
                def PyJs_whichTypedArray_2611_(value, this, arguments, var=var):
                    var = Scope({'value':value, 'this':this, 'arguments':arguments, 'whichTypedArray':PyJs_whichTypedArray_2611_}, var)
                    var.registers(['value'])
                    if var.get('isTypedArray')(var.get('value')).neg():
                        return Js(False)
                    if var.get('hasToStringTag').neg():
                        return var.get('$slice')(var.get('$toString')(var.get('value')), Js(8.0), (-Js(1.0)))
                    return var.get('tryTypedArrays')(var.get('value'))
                PyJs_whichTypedArray_2611_._set_name('whichTypedArray')
                var.get('module').put('exports', PyJs_whichTypedArray_2611_)
            PyJs_anonymous_2607_._set_name('anonymous')
            PyJs_anonymous_2607_.callprop('call', var.get(u"this"))
        PyJs_anonymous_2606_._set_name('anonymous')
        PyJs_anonymous_2606_.callprop('call', var.get(u"this"), (var.get('global') if PyJsStrictNeq(var.get('global',throw=False).typeof(),Js('undefined')) else (var.get('self') if PyJsStrictNeq(var.get('self',throw=False).typeof(),Js('undefined')) else (var.get('window') if PyJsStrictNeq(var.get('window',throw=False).typeof(),Js('undefined')) else Js({})))))
    PyJs_anonymous_2605_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2612_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'module_temp_love_python', 'exports', 'require', 'addToGlobals'])
        @Js
        def PyJsHoisted_addToGlobals_(name, obj, this, arguments, var=var):
            var = Scope({'name':name, 'obj':obj, 'this':this, 'arguments':arguments}, var)
            var.registers(['obj', 'name'])
            if var.get('Object').get('prototype').callprop('hasOwnProperty', Js('_fake_exports')).neg():
                var.get('Object').get('prototype').put('_fake_exports', Js({}))
            var.get('Object').get('prototype').get('_fake_exports').put(var.get('name'), var.get('obj'))
        PyJsHoisted_addToGlobals_.func_name = 'addToGlobals'
        var.put('addToGlobals', PyJsHoisted_addToGlobals_)
        pass
        pass
        pass
        pass
        var.get('require')(Js('babel-polyfill'))
        var.put('module_temp_love_python', var.get('require')(Js('obj2gltf')))
        var.get('addToGlobals')(Js('obj2gltf'), var.get('module_temp_love_python'))
    PyJs_anonymous_2612_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2613_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['r'])
        @Js
        def PyJsHoisted_r_(e, n, t, this, arguments, var=var):
            var = Scope({'e':e, 'n':n, 't':t, 'this':this, 'arguments':arguments}, var)
            var.registers(['n', 'i', 'e', 'o', 'u', 't'])
            @Js
            def PyJsHoisted_o_(i, f, this, arguments, var=var):
                var = Scope({'i':i, 'f':f, 'this':this, 'arguments':arguments}, var)
                var.registers(['p', 'i', 'a', 'c', 'f'])
                if var.get('n').get(var.get('i')).neg():
                    if var.get('e').get(var.get('i')).neg():
                        var.put('c', ((Js('function')==var.get('require',throw=False).typeof()) and var.get('require')))
                        if (var.get('f').neg() and var.get('c')):
                            return var.get('c')(var.get('i'), Js(0.0).neg())
                        if var.get('u'):
                            return var.get('u')(var.get('i'), Js(0.0).neg())
                        var.put('a', var.get('Error').create(((Js("Cannot find module '")+var.get('i'))+Js("'"))))
                        PyJsTempException = JsToPyException(PyJsComma(var.get('a').put('code', Js('MODULE_NOT_FOUND')),var.get('a')))
                        raise PyJsTempException
                    var.put('p', var.get('n').put(var.get('i'), Js({'exports':Js({})})))
                    @Js
                    def PyJs_anonymous_2614_(r, this, arguments, var=var):
                        var = Scope({'r':r, 'this':this, 'arguments':arguments}, var)
                        var.registers(['n', 'r'])
                        var.put('n', var.get('e').get(var.get('i')).get('1').get(var.get('r')))
                        return var.get('o')((var.get('n') or var.get('r')))
                    PyJs_anonymous_2614_._set_name('anonymous')
                    var.get('e').get(var.get('i')).get('0').callprop('call', var.get('p').get('exports'), PyJs_anonymous_2614_, var.get('p'), var.get('p').get('exports'), var.get('r'), var.get('e'), var.get('n'), var.get('t'))
                return var.get('n').get(var.get('i')).get('exports')
            PyJsHoisted_o_.func_name = 'o'
            var.put('o', PyJsHoisted_o_)
            pass
            #for JS loop
            var.put('u', ((Js('function')==var.get('require',throw=False).typeof()) and var.get('require')))
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('t').get('length')):
                try:
                    var.get('o')(var.get('t').get(var.get('i')))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('o')
        PyJsHoisted_r_.func_name = 'r'
        var.put('r', PyJsHoisted_r_)
        pass
        return var.get('r')
    PyJs_anonymous_2613_._set_name('anonymous')
    return PyJs_anonymous_2613_()(Js({'1':Js([PyJs_anonymous_2_, Js({})]),'2':Js([PyJs_anonymous_4_, Js({'object-assign':Js(421.0),'util/':Js(5.0)})]),'3':Js([PyJs_anonymous_23_, Js({})]),'4':Js([PyJs_anonymous_27_, Js({})]),'5':Js([PyJs_anonymous_29_, Js({'./support/isBuffer':Js(4.0),'_process':Js(457.0),'inherits':Js(3.0)})]),'6':Js([PyJs_anonymous_49_, Js({'array-filter':Js(1.0)})]),'7':Js([PyJs_anonymous_54_, Js({'core-js/fn/regexp/escape':Js(18.0),'core-js/shim':Js(346.0),'regenerator-runtime/runtime':Js(8.0)})]),'8':Js([PyJs_anonymous_58_, Js({})]),'9':Js([PyJs_anonymous_90_, Js({})]),'10':Js([PyJs_anonymous_91_, Js({'_process':Js(457.0),'timers':Js(475.0)})]),'11':Js([PyJs_anonymous_581_, Js({})]),'12':Js([PyJs_anonymous_582_, Js({'_process':Js(457.0),'assert':Js(2.0),'buffer':Js(15.0),'pako/lib/zlib/constants':Js(425.0),'pako/lib/zlib/deflate.js':Js(427.0),'pako/lib/zlib/inflate.js':Js(429.0),'pako/lib/zlib/zstream':Js(433.0)})]),'13':Js([PyJs_anonymous_603_, Js({'./binding':Js(12.0),'_process':Js(457.0),'assert':Js(2.0),'buffer':Js(15.0),'stream':Js(459.0),'util':Js(480.0)})]),'14':Js([PyJs_anonymous_640_, Js({'dup':Js(11.0)})]),'15':Js([PyJs_anonymous_641_, Js({'base64-js':Js(9.0),'buffer':Js(15.0),'ieee754':Js(393.0)})]),'16':Js([PyJs_anonymous_706_, Js({'_process':Js(457.0),'path':Js(434.0)})]),'17':Js([PyJs_anonymous_709_, Js({})]),'18':Js([PyJs_anonymous_711_, Js({'../../modules/_core':Js(40.0),'../../modules/core.regexp.escape':Js(148.0)})]),'19':Js([PyJs_anonymous_712_, Js({})]),'20':Js([PyJs_anonymous_714_, Js({'./_cof':Js(35.0)})]),'21':Js([PyJs_anonymous_716_, Js({'./_hide':Js(60.0),'./_wks':Js(146.0)})]),'22':Js([PyJs_anonymous_718_, Js({'./_string-at':Js(123.0)})]),'23':Js([PyJs_anonymous_720_, Js({})]),'24':Js([PyJs_anonymous_722_, Js({'./_is-object':Js(69.0)})]),'25':Js([PyJs_anonymous_724_, Js({'./_to-absolute-index':Js(131.0),'./_to-length':Js(135.0),'./_to-object':Js(136.0)})]),'26':Js([PyJs_anonymous_726_, Js({'./_to-absolute-index':Js(131.0),'./_to-length':Js(135.0),'./_to-object':Js(136.0)})]),'27':Js([PyJs_anonymous_728_, Js({'./_for-of':Js(56.0)})]),'28':Js([PyJs_anonymous_730_, Js({'./_to-absolute-index':Js(131.0),'./_to-iobject':Js(134.0),'./_to-length':Js(135.0)})]),'29':Js([PyJs_anonymous_733_, Js({'./_array-species-create':Js(32.0),'./_ctx':Js(42.0),'./_iobject':Js(65.0),'./_to-length':Js(135.0),'./_to-object':Js(136.0)})]),'30':Js([PyJs_anonymous_736_, Js({'./_a-function':Js(19.0),'./_iobject':Js(65.0),'./_to-length':Js(135.0),'./_to-object':Js(136.0)})]),'31':Js([PyJs_anonymous_738_, Js({'./_is-array':Js(67.0),'./_is-object':Js(69.0),'./_wks':Js(146.0)})]),'32':Js([PyJs_anonymous_740_, Js({'./_array-species-constructor':Js(31.0)})]),'33':Js([PyJs_anonymous_742_, Js({'./_a-function':Js(19.0),'./_invoke':Js(64.0),'./_is-object':Js(69.0)})]),'34':Js([PyJs_anonymous_746_, Js({'./_cof':Js(35.0),'./_wks':Js(146.0)})]),'35':Js([PyJs_anonymous_751_, Js({})]),'36':Js([PyJs_anonymous_753_, Js({'./_an-instance':Js(23.0),'./_ctx':Js(42.0),'./_descriptors':Js(46.0),'./_for-of':Js(56.0),'./_iter-define':Js(73.0),'./_iter-step':Js(75.0),'./_meta':Js(83.0),'./_object-create':Js(88.0),'./_object-dp':Js(89.0),'./_redefine-all':Js(108.0),'./_set-species':Js(117.0),'./_validate-collection':Js(143.0)})]),'37':Js([PyJs_anonymous_766_, Js({'./_array-from-iterable':Js(27.0),'./_classof':Js(34.0)})]),'38':Js([PyJs_anonymous_769_, Js({'./_an-instance':Js(23.0),'./_an-object':Js(24.0),'./_array-methods':Js(29.0),'./_for-of':Js(56.0),'./_has':Js(59.0),'./_is-object':Js(69.0),'./_meta':Js(83.0),'./_redefine-all':Js(108.0),'./_validate-collection':Js(143.0)})]),'39':Js([PyJs_anonymous_784_, Js({'./_an-instance':Js(23.0),'./_export':Js(50.0),'./_fails':Js(52.0),'./_for-of':Js(56.0),'./_global':Js(58.0),'./_inherit-if-required':Js(63.0),'./_is-object':Js(69.0),'./_iter-detect':Js(74.0),'./_meta':Js(83.0),'./_redefine':Js(109.0),'./_redefine-all':Js(108.0),'./_set-to-string-tag':Js(118.0)})]),'40':Js([PyJs_anonymous_797_, Js({})]),'41':Js([PyJs_anonymous_798_, Js({'./_object-dp':Js(89.0),'./_property-desc':Js(107.0)})]),'42':Js([PyJs_anonymous_800_, Js({'./_a-function':Js(19.0)})]),'43':Js([PyJs_anonymous_806_, Js({'./_fails':Js(52.0)})]),'44':Js([PyJs_anonymous_812_, Js({'./_an-object':Js(24.0),'./_to-primitive':Js(137.0)})]),'45':Js([PyJs_anonymous_814_, Js({})]),'46':Js([PyJs_anonymous_816_, Js({'./_fails':Js(52.0)})]),'47':Js([PyJs_anonymous_819_, Js({'./_global':Js(58.0),'./_is-object':Js(69.0)})]),'48':Js([PyJs_anonymous_821_, Js({})]),'49':Js([PyJs_anonymous_822_, Js({'./_object-gops':Js(95.0),'./_object-keys':Js(98.0),'./_object-pie':Js(99.0)})]),'50':Js([PyJs_anonymous_824_, Js({'./_core':Js(40.0),'./_ctx':Js(42.0),'./_global':Js(58.0),'./_hide':Js(60.0),'./_redefine':Js(109.0)})]),'51':Js([PyJs_anonymous_826_, Js({'./_wks':Js(146.0)})]),'52':Js([PyJs_anonymous_828_, Js({})]),'53':Js([PyJs_anonymous_830_, Js({'./_defined':Js(45.0),'./_fails':Js(52.0),'./_hide':Js(60.0),'./_redefine':Js(109.0),'./_regexp-exec':Js(111.0),'./_wks':Js(146.0),'./es6.regexp.exec':Js(243.0)})]),'54':Js([PyJs_anonymous_844_, Js({'./_an-object':Js(24.0)})]),'55':Js([PyJs_anonymous_846_, Js({'./_ctx':Js(42.0),'./_is-array':Js(67.0),'./_is-object':Js(69.0),'./_to-length':Js(135.0),'./_wks':Js(146.0)})]),'56':Js([PyJs_anonymous_847_, Js({'./_an-object':Js(24.0),'./_ctx':Js(42.0),'./_is-array-iter':Js(66.0),'./_iter-call':Js(71.0),'./_to-length':Js(135.0),'./core.get-iterator-method':Js(147.0)})]),'57':Js([PyJs_anonymous_850_, Js({'./_shared':Js(120.0)})]),'58':Js([PyJs_anonymous_851_, Js({})]),'59':Js([PyJs_anonymous_852_, Js({})]),'60':Js([PyJs_anonymous_854_, Js({'./_descriptors':Js(46.0),'./_object-dp':Js(89.0),'./_property-desc':Js(107.0)})]),'61':Js([PyJs_anonymous_857_, Js({'./_global':Js(58.0)})]),'62':Js([PyJs_anonymous_858_, Js({'./_descriptors':Js(46.0),'./_dom-create':Js(47.0),'./_fails':Js(52.0)})]),'63':Js([PyJs_anonymous_861_, Js({'./_is-object':Js(69.0),'./_set-proto':Js(116.0)})]),'64':Js([PyJs_anonymous_863_, Js({})]),'65':Js([PyJs_anonymous_865_, Js({'./_cof':Js(35.0)})]),'66':Js([PyJs_anonymous_867_, Js({'./_iterators':Js(76.0),'./_wks':Js(146.0)})]),'67':Js([PyJs_anonymous_869_, Js({'./_cof':Js(35.0)})]),'68':Js([PyJs_anonymous_871_, Js({'./_is-object':Js(69.0)})]),'69':Js([PyJs_anonymous_873_, Js({})]),'70':Js([PyJs_anonymous_875_, Js({'./_cof':Js(35.0),'./_is-object':Js(69.0),'./_wks':Js(146.0)})]),'71':Js([PyJs_anonymous_877_, Js({'./_an-object':Js(24.0)})]),'72':Js([PyJs_anonymous_879_, Js({'./_hide':Js(60.0),'./_object-create':Js(88.0),'./_property-desc':Js(107.0),'./_set-to-string-tag':Js(118.0),'./_wks':Js(146.0)})]),'73':Js([PyJs_anonymous_882_, Js({'./_export':Js(50.0),'./_hide':Js(60.0),'./_iter-create':Js(72.0),'./_iterators':Js(76.0),'./_library':Js(77.0),'./_object-gpo':Js(96.0),'./_redefine':Js(109.0),'./_set-to-string-tag':Js(118.0),'./_wks':Js(146.0)})]),'74':Js([PyJs_anonymous_890_, Js({'./_wks':Js(146.0)})]),'75':Js([PyJs_anonymous_896_, Js({})]),'76':Js([PyJs_anonymous_898_, Js({})]),'77':Js([PyJs_anonymous_899_, Js({})]),'78':Js([PyJs_anonymous_900_, Js({})]),'79':Js([PyJs_anonymous_902_, Js({'./_math-sign':Js(82.0)})]),'80':Js([PyJs_anonymous_905_, Js({})]),'81':Js([PyJs_anonymous_907_, Js({})]),'82':Js([PyJs_anonymous_909_, Js({})]),'83':Js([PyJs_anonymous_911_, Js({'./_fails':Js(52.0),'./_has':Js(59.0),'./_is-object':Js(69.0),'./_object-dp':Js(89.0),'./_uid':Js(141.0)})]),'84':Js([PyJs_anonymous_918_, Js({'./_export':Js(50.0),'./_shared':Js(120.0),'./es6.map':Js(178.0),'./es6.weak-map':Js(285.0)})]),'85':Js([PyJs_anonymous_927_, Js({'./_cof':Js(35.0),'./_global':Js(58.0),'./_task':Js(130.0)})]),'86':Js([PyJs_anonymous_935_, Js({'./_a-function':Js(19.0)})]),'87':Js([PyJs_anonymous_938_, Js({'./_descriptors':Js(46.0),'./_fails':Js(52.0),'./_iobject':Js(65.0),'./_object-gops':Js(95.0),'./_object-keys':Js(98.0),'./_object-pie':Js(99.0),'./_to-object':Js(136.0)})]),'88':Js([PyJs_anonymous_942_, Js({'./_an-object':Js(24.0),'./_dom-create':Js(47.0),'./_enum-bug-keys':Js(48.0),'./_html':Js(61.0),'./_object-dps':Js(90.0),'./_shared-key':Js(119.0)})]),'89':Js([PyJs_anonymous_946_, Js({'./_an-object':Js(24.0),'./_descriptors':Js(46.0),'./_ie8-dom-define':Js(62.0),'./_to-primitive':Js(137.0)})]),'90':Js([PyJs_anonymous_948_, Js({'./_an-object':Js(24.0),'./_descriptors':Js(46.0),'./_object-dp':Js(89.0),'./_object-keys':Js(98.0)})]),'91':Js([PyJs_anonymous_950_, Js({'./_fails':Js(52.0),'./_global':Js(58.0),'./_library':Js(77.0)})]),'92':Js([PyJs_anonymous_953_, Js({'./_descriptors':Js(46.0),'./_has':Js(59.0),'./_ie8-dom-define':Js(62.0),'./_object-pie':Js(99.0),'./_property-desc':Js(107.0),'./_to-iobject':Js(134.0),'./_to-primitive':Js(137.0)})]),'93':Js([PyJs_anonymous_955_, Js({'./_object-gopn':Js(94.0),'./_to-iobject':Js(134.0)})]),'94':Js([PyJs_anonymous_958_, Js({'./_enum-bug-keys':Js(48.0),'./_object-keys-internal':Js(97.0)})]),'95':Js([PyJs_anonymous_960_, Js({})]),'96':Js([PyJs_anonymous_961_, Js({'./_has':Js(59.0),'./_shared-key':Js(119.0),'./_to-object':Js(136.0)})]),'97':Js([PyJs_anonymous_963_, Js({'./_array-includes':Js(28.0),'./_has':Js(59.0),'./_shared-key':Js(119.0),'./_to-iobject':Js(134.0)})]),'98':Js([PyJs_anonymous_965_, Js({'./_enum-bug-keys':Js(48.0),'./_object-keys-internal':Js(97.0)})]),'99':Js([PyJs_anonymous_967_, Js({})]),'100':Js([PyJs_anonymous_968_, Js({'./_core':Js(40.0),'./_export':Js(50.0),'./_fails':Js(52.0)})]),'101':Js([PyJs_anonymous_971_, Js({'./_descriptors':Js(46.0),'./_object-keys':Js(98.0),'./_object-pie':Js(99.0),'./_to-iobject':Js(134.0)})]),'102':Js([PyJs_anonymous_974_, Js({'./_an-object':Js(24.0),'./_global':Js(58.0),'./_object-gopn':Js(94.0),'./_object-gops':Js(95.0)})]),'103':Js([PyJs_anonymous_976_, Js({'./_global':Js(58.0),'./_string-trim':Js(128.0),'./_string-ws':Js(129.0)})]),'104':Js([PyJs_anonymous_978_, Js({'./_global':Js(58.0),'./_string-trim':Js(128.0),'./_string-ws':Js(129.0)})]),'105':Js([PyJs_anonymous_980_, Js({})]),'106':Js([PyJs_anonymous_982_, Js({'./_an-object':Js(24.0),'./_is-object':Js(69.0),'./_new-promise-capability':Js(86.0)})]),'107':Js([PyJs_anonymous_984_, Js({})]),'108':Js([PyJs_anonymous_986_, Js({'./_redefine':Js(109.0)})]),'109':Js([PyJs_anonymous_988_, Js({'./_core':Js(40.0),'./_function-to-string':Js(57.0),'./_global':Js(58.0),'./_has':Js(59.0),'./_hide':Js(60.0),'./_uid':Js(141.0)})]),'110':Js([PyJs_anonymous_992_, Js({'./_classof':Js(34.0)})]),'111':Js([PyJs_anonymous_994_, Js({'./_flags':Js(54.0)})]),'112':Js([PyJs_anonymous_998_, Js({})]),'113':Js([PyJs_anonymous_1002_, Js({})]),'114':Js([PyJs_anonymous_1004_, Js({'./_a-function':Js(19.0),'./_ctx':Js(42.0),'./_export':Js(50.0),'./_for-of':Js(56.0)})]),'115':Js([PyJs_anonymous_1008_, Js({'./_export':Js(50.0)})]),'116':Js([PyJs_anonymous_1011_, Js({'./_an-object':Js(24.0),'./_ctx':Js(42.0),'./_is-object':Js(69.0),'./_object-gopd':Js(92.0)})]),'117':Js([PyJs_anonymous_1015_, Js({'./_descriptors':Js(46.0),'./_global':Js(58.0),'./_object-dp':Js(89.0),'./_wks':Js(146.0)})]),'118':Js([PyJs_anonymous_1018_, Js({'./_has':Js(59.0),'./_object-dp':Js(89.0),'./_wks':Js(146.0)})]),'119':Js([PyJs_anonymous_1020_, Js({'./_shared':Js(120.0),'./_uid':Js(141.0)})]),'120':Js([PyJs_anonymous_1022_, Js({'./_core':Js(40.0),'./_global':Js(58.0),'./_library':Js(77.0)})]),'121':Js([PyJs_anonymous_1024_, Js({'./_a-function':Js(19.0),'./_an-object':Js(24.0),'./_wks':Js(146.0)})]),'122':Js([PyJs_anonymous_1026_, Js({'./_fails':Js(52.0)})]),'123':Js([PyJs_anonymous_1030_, Js({'./_defined':Js(45.0),'./_to-integer':Js(133.0)})]),'124':Js([PyJs_anonymous_1034_, Js({'./_defined':Js(45.0),'./_is-regexp':Js(70.0)})]),'125':Js([PyJs_anonymous_1036_, Js({'./_defined':Js(45.0),'./_export':Js(50.0),'./_fails':Js(52.0)})]),'126':Js([PyJs_anonymous_1040_, Js({'./_defined':Js(45.0),'./_string-repeat':Js(127.0),'./_to-length':Js(135.0)})]),'127':Js([PyJs_anonymous_1042_, Js({'./_defined':Js(45.0),'./_to-integer':Js(133.0)})]),'128':Js([PyJs_anonymous_1044_, Js({'./_defined':Js(45.0),'./_export':Js(50.0),'./_fails':Js(52.0),'./_string-ws':Js(129.0)})]),'129':Js([PyJs_anonymous_1048_, Js({})]),'130':Js([PyJs_anonymous_1049_, Js({'./_cof':Js(35.0),'./_ctx':Js(42.0),'./_dom-create':Js(47.0),'./_global':Js(58.0),'./_html':Js(61.0),'./_invoke':Js(64.0)})]),'131':Js([PyJs_anonymous_1061_, Js({'./_to-integer':Js(133.0)})]),'132':Js([PyJs_anonymous_1063_, Js({'./_to-integer':Js(133.0),'./_to-length':Js(135.0)})]),'133':Js([PyJs_anonymous_1065_, Js({})]),'134':Js([PyJs_anonymous_1067_, Js({'./_defined':Js(45.0),'./_iobject':Js(65.0)})]),'135':Js([PyJs_anonymous_1069_, Js({'./_to-integer':Js(133.0)})]),'136':Js([PyJs_anonymous_1071_, Js({'./_defined':Js(45.0)})]),'137':Js([PyJs_anonymous_1073_, Js({'./_is-object':Js(69.0)})]),'138':Js([PyJs_anonymous_1075_, Js({'./_an-instance':Js(23.0),'./_array-copy-within':Js(25.0),'./_array-fill':Js(26.0),'./_array-includes':Js(28.0),'./_array-methods':Js(29.0),'./_classof':Js(34.0),'./_ctx':Js(42.0),'./_descriptors':Js(46.0),'./_export':Js(50.0),'./_fails':Js(52.0),'./_global':Js(58.0),'./_has':Js(59.0),'./_hide':Js(60.0),'./_is-array-iter':Js(66.0),'./_is-object':Js(69.0),'./_iter-detect':Js(74.0),'./_iterators':Js(76.0),'./_library':Js(77.0),'./_object-create':Js(88.0),'./_object-dp':Js(89.0),'./_object-gopd':Js(92.0),'./_object-gopn':Js(94.0),'./_object-gpo':Js(96.0),'./_property-desc':Js(107.0),'./_redefine-all':Js(108.0),'./_set-species':Js(117.0),'./_species-constructor':Js(121.0),'./_to-absolute-index':Js(131.0),'./_to-index':Js(132.0),'./_to-integer':Js(133.0),'./_to-length':Js(135.0),'./_to-object':Js(136.0),'./_to-primitive':Js(137.0),'./_typed':Js(140.0),'./_typed-buffer':Js(139.0),'./_uid':Js(141.0),'./_wks':Js(146.0),'./core.get-iterator-method':Js(147.0),'./es6.array.iterator':Js(159.0)})]),'139':Js([PyJs_anonymous_1139_, Js({'./_an-instance':Js(23.0),'./_array-fill':Js(26.0),'./_descriptors':Js(46.0),'./_fails':Js(52.0),'./_global':Js(58.0),'./_hide':Js(60.0),'./_library':Js(77.0),'./_object-dp':Js(89.0),'./_object-gopn':Js(94.0),'./_redefine-all':Js(108.0),'./_set-to-string-tag':Js(118.0),'./_to-index':Js(132.0),'./_to-integer':Js(133.0),'./_to-length':Js(135.0),'./_typed':Js(140.0)})]),'140':Js([PyJs_anonymous_1166_, Js({'./_global':Js(58.0),'./_hide':Js(60.0),'./_uid':Js(141.0)})]),'141':Js([PyJs_anonymous_1167_, Js({})]),'142':Js([PyJs_anonymous_1169_, Js({'./_global':Js(58.0)})]),'143':Js([PyJs_anonymous_1170_, Js({'./_is-object':Js(69.0)})]),'144':Js([PyJs_anonymous_1172_, Js({'./_core':Js(40.0),'./_global':Js(58.0),'./_library':Js(77.0),'./_object-dp':Js(89.0),'./_wks-ext':Js(145.0)})]),'145':Js([PyJs_anonymous_1174_, Js({'./_wks':Js(146.0)})]),'146':Js([PyJs_anonymous_1175_, Js({'./_global':Js(58.0),'./_shared':Js(120.0),'./_uid':Js(141.0)})]),'147':Js([PyJs_anonymous_1177_, Js({'./_classof':Js(34.0),'./_core':Js(40.0),'./_iterators':Js(76.0),'./_wks':Js(146.0)})]),'148':Js([PyJs_anonymous_1179_, Js({'./_export':Js(50.0),'./_replacer':Js(112.0)})]),'149':Js([PyJs_anonymous_1181_, Js({'./_add-to-unscopables':Js(21.0),'./_array-copy-within':Js(25.0),'./_export':Js(50.0)})]),'150':Js([PyJs_anonymous_1182_, Js({'./_array-methods':Js(29.0),'./_export':Js(50.0),'./_strict-method':Js(122.0)})]),'151':Js([PyJs_anonymous_1184_, Js({'./_add-to-unscopables':Js(21.0),'./_array-fill':Js(26.0),'./_export':Js(50.0)})]),'152':Js([PyJs_anonymous_1185_, Js({'./_array-methods':Js(29.0),'./_export':Js(50.0),'./_strict-method':Js(122.0)})]),'153':Js([PyJs_anonymous_1187_, Js({'./_add-to-unscopables':Js(21.0),'./_array-methods':Js(29.0),'./_export':Js(50.0)})]),'154':Js([PyJs_anonymous_1190_, Js({'./_add-to-unscopables':Js(21.0),'./_array-methods':Js(29.0),'./_export':Js(50.0)})]),'155':Js([PyJs_anonymous_1193_, Js({'./_array-methods':Js(29.0),'./_export':Js(50.0),'./_strict-method':Js(122.0)})]),'156':Js([PyJs_anonymous_1195_, Js({'./_create-property':Js(41.0),'./_ctx':Js(42.0),'./_export':Js(50.0),'./_is-array-iter':Js(66.0),'./_iter-call':Js(71.0),'./_iter-detect':Js(74.0),'./_to-length':Js(135.0),'./_to-object':Js(136.0),'./core.get-iterator-method':Js(147.0)})]),'157':Js([PyJs_anonymous_1198_, Js({'./_array-includes':Js(28.0),'./_export':Js(50.0),'./_strict-method':Js(122.0)})]),'158':Js([PyJs_anonymous_1200_, Js({'./_export':Js(50.0),'./_is-array':Js(67.0)})]),'159':Js([PyJs_anonymous_1201_, Js({'./_add-to-unscopables':Js(21.0),'./_iter-define':Js(73.0),'./_iter-step':Js(75.0),'./_iterators':Js(76.0),'./_to-iobject':Js(134.0)})]),'160':Js([PyJs_anonymous_1204_, Js({'./_export':Js(50.0),'./_iobject':Js(65.0),'./_strict-method':Js(122.0),'./_to-iobject':Js(134.0)})]),'161':Js([PyJs_anonymous_1206_, Js({'./_export':Js(50.0),'./_strict-method':Js(122.0),'./_to-integer':Js(133.0),'./_to-iobject':Js(134.0),'./_to-length':Js(135.0)})]),'162':Js([PyJs_anonymous_1208_, Js({'./_array-methods':Js(29.0),'./_export':Js(50.0),'./_strict-method':Js(122.0)})]),'163':Js([PyJs_anonymous_1210_, Js({'./_create-property':Js(41.0),'./_export':Js(50.0),'./_fails':Js(52.0)})]),'164':Js([PyJs_anonymous_1213_, Js({'./_array-reduce':Js(30.0),'./_export':Js(50.0),'./_strict-method':Js(122.0)})]),'165':Js([PyJs_anonymous_1215_, Js({'./_array-reduce':Js(30.0),'./_export':Js(50.0),'./_strict-method':Js(122.0)})]),'166':Js([PyJs_anonymous_1217_, Js({'./_cof':Js(35.0),'./_export':Js(50.0),'./_fails':Js(52.0),'./_html':Js(61.0),'./_to-absolute-index':Js(131.0),'./_to-length':Js(135.0)})]),'167':Js([PyJs_anonymous_1220_, Js({'./_array-methods':Js(29.0),'./_export':Js(50.0),'./_strict-method':Js(122.0)})]),'168':Js([PyJs_anonymous_1222_, Js({'./_a-function':Js(19.0),'./_export':Js(50.0),'./_fails':Js(52.0),'./_strict-method':Js(122.0),'./_to-object':Js(136.0)})]),'169':Js([PyJs_anonymous_1226_, Js({'./_set-species':Js(117.0)})]),'170':Js([PyJs_anonymous_1227_, Js({'./_export':Js(50.0)})]),'171':Js([PyJs_anonymous_1229_, Js({'./_date-to-iso-string':Js(43.0),'./_export':Js(50.0)})]),'172':Js([PyJs_anonymous_1230_, Js({'./_export':Js(50.0),'./_fails':Js(52.0),'./_to-object':Js(136.0),'./_to-primitive':Js(137.0)})]),'173':Js([PyJs_anonymous_1234_, Js({'./_date-to-primitive':Js(44.0),'./_hide':Js(60.0),'./_wks':Js(146.0)})]),'174':Js([PyJs_anonymous_1235_, Js({'./_redefine':Js(109.0)})]),'175':Js([PyJs_anonymous_1237_, Js({'./_bind':Js(33.0),'./_export':Js(50.0)})]),'176':Js([PyJs_anonymous_1238_, Js({'./_is-object':Js(69.0),'./_object-dp':Js(89.0),'./_object-gpo':Js(96.0),'./_wks':Js(146.0)})]),'177':Js([PyJs_anonymous_1240_, Js({'./_descriptors':Js(46.0),'./_object-dp':Js(89.0)})]),'178':Js([PyJs_anonymous_1242_, Js({'./_collection':Js(39.0),'./_collection-strong':Js(36.0),'./_validate-collection':Js(143.0)})]),'179':Js([PyJs_anonymous_1247_, Js({'./_export':Js(50.0),'./_math-log1p':Js(80.0)})]),'180':Js([PyJs_anonymous_1249_, Js({'./_export':Js(50.0)})]),'181':Js([PyJs_anonymous_1250_, Js({'./_export':Js(50.0)})]),'182':Js([PyJs_anonymous_1252_, Js({'./_export':Js(50.0),'./_math-sign':Js(82.0)})]),'183':Js([PyJs_anonymous_1254_, Js({'./_export':Js(50.0)})]),'184':Js([PyJs_anonymous_1256_, Js({'./_export':Js(50.0)})]),'185':Js([PyJs_anonymous_1258_, Js({'./_export':Js(50.0),'./_math-expm1':Js(78.0)})]),'186':Js([PyJs_anonymous_1259_, Js({'./_export':Js(50.0),'./_math-fround':Js(79.0)})]),'187':Js([PyJs_anonymous_1260_, Js({'./_export':Js(50.0)})]),'188':Js([PyJs_anonymous_1262_, Js({'./_export':Js(50.0),'./_fails':Js(52.0)})]),'189':Js([PyJs_anonymous_1265_, Js({'./_export':Js(50.0)})]),'190':Js([PyJs_anonymous_1267_, Js({'./_export':Js(50.0),'./_math-log1p':Js(80.0)})]),'191':Js([PyJs_anonymous_1268_, Js({'./_export':Js(50.0)})]),'192':Js([PyJs_anonymous_1270_, Js({'./_export':Js(50.0),'./_math-sign':Js(82.0)})]),'193':Js([PyJs_anonymous_1271_, Js({'./_export':Js(50.0),'./_fails':Js(52.0),'./_math-expm1':Js(78.0)})]),'194':Js([PyJs_anonymous_1274_, Js({'./_export':Js(50.0),'./_math-expm1':Js(78.0)})]),'195':Js([PyJs_anonymous_1276_, Js({'./_export':Js(50.0)})]),'196':Js([PyJs_anonymous_1278_, Js({'./_cof':Js(35.0),'./_descriptors':Js(46.0),'./_fails':Js(52.0),'./_global':Js(58.0),'./_has':Js(59.0),'./_inherit-if-required':Js(63.0),'./_object-create':Js(88.0),'./_object-dp':Js(89.0),'./_object-gopd':Js(92.0),'./_object-gopn':Js(94.0),'./_redefine':Js(109.0),'./_string-trim':Js(128.0),'./_to-primitive':Js(137.0)})]),'197':Js([PyJs_anonymous_1282_, Js({'./_export':Js(50.0)})]),'198':Js([PyJs_anonymous_1283_, Js({'./_export':Js(50.0),'./_global':Js(58.0)})]),'199':Js([PyJs_anonymous_1285_, Js({'./_export':Js(50.0),'./_is-integer':Js(68.0)})]),'200':Js([PyJs_anonymous_1286_, Js({'./_export':Js(50.0)})]),'201':Js([PyJs_anonymous_1288_, Js({'./_export':Js(50.0),'./_is-integer':Js(68.0)})]),'202':Js([PyJs_anonymous_1290_, Js({'./_export':Js(50.0)})]),'203':Js([PyJs_anonymous_1291_, Js({'./_export':Js(50.0)})]),'204':Js([PyJs_anonymous_1292_, Js({'./_export':Js(50.0),'./_parse-float':Js(103.0)})]),'205':Js([PyJs_anonymous_1293_, Js({'./_export':Js(50.0),'./_parse-int':Js(104.0)})]),'206':Js([PyJs_anonymous_1294_, Js({'./_a-number-value':Js(20.0),'./_export':Js(50.0),'./_fails':Js(52.0),'./_string-repeat':Js(127.0),'./_to-integer':Js(133.0)})]),'207':Js([PyJs_anonymous_1303_, Js({'./_a-number-value':Js(20.0),'./_export':Js(50.0),'./_fails':Js(52.0)})]),'208':Js([PyJs_anonymous_1307_, Js({'./_export':Js(50.0),'./_object-assign':Js(87.0)})]),'209':Js([PyJs_anonymous_1308_, Js({'./_export':Js(50.0),'./_object-create':Js(88.0)})]),'210':Js([PyJs_anonymous_1309_, Js({'./_descriptors':Js(46.0),'./_export':Js(50.0),'./_object-dps':Js(90.0)})]),'211':Js([PyJs_anonymous_1310_, Js({'./_descriptors':Js(46.0),'./_export':Js(50.0),'./_object-dp':Js(89.0)})]),'212':Js([PyJs_anonymous_1311_, Js({'./_is-object':Js(69.0),'./_meta':Js(83.0),'./_object-sap':Js(100.0)})]),'213':Js([PyJs_anonymous_1314_, Js({'./_object-gopd':Js(92.0),'./_object-sap':Js(100.0),'./_to-iobject':Js(134.0)})]),'214':Js([PyJs_anonymous_1317_, Js({'./_object-gopn-ext':Js(93.0),'./_object-sap':Js(100.0)})]),'215':Js([PyJs_anonymous_1319_, Js({'./_object-gpo':Js(96.0),'./_object-sap':Js(100.0),'./_to-object':Js(136.0)})]),'216':Js([PyJs_anonymous_1322_, Js({'./_is-object':Js(69.0),'./_object-sap':Js(100.0)})]),'217':Js([PyJs_anonymous_1325_, Js({'./_is-object':Js(69.0),'./_object-sap':Js(100.0)})]),'218':Js([PyJs_anonymous_1328_, Js({'./_is-object':Js(69.0),'./_object-sap':Js(100.0)})]),'219':Js([PyJs_anonymous_1331_, Js({'./_export':Js(50.0),'./_same-value':Js(113.0)})]),'220':Js([PyJs_anonymous_1332_, Js({'./_object-keys':Js(98.0),'./_object-sap':Js(100.0),'./_to-object':Js(136.0)})]),'221':Js([PyJs_anonymous_1335_, Js({'./_is-object':Js(69.0),'./_meta':Js(83.0),'./_object-sap':Js(100.0)})]),'222':Js([PyJs_anonymous_1338_, Js({'./_is-object':Js(69.0),'./_meta':Js(83.0),'./_object-sap':Js(100.0)})]),'223':Js([PyJs_anonymous_1341_, Js({'./_export':Js(50.0),'./_set-proto':Js(116.0)})]),'224':Js([PyJs_anonymous_1342_, Js({'./_classof':Js(34.0),'./_redefine':Js(109.0),'./_wks':Js(146.0)})]),'225':Js([PyJs_anonymous_1344_, Js({'./_export':Js(50.0),'./_parse-float':Js(103.0)})]),'226':Js([PyJs_anonymous_1345_, Js({'./_export':Js(50.0),'./_parse-int':Js(104.0)})]),'227':Js([PyJs_anonymous_1346_, Js({'./_a-function':Js(19.0),'./_an-instance':Js(23.0),'./_classof':Js(34.0),'./_core':Js(40.0),'./_ctx':Js(42.0),'./_export':Js(50.0),'./_for-of':Js(56.0),'./_global':Js(58.0),'./_is-object':Js(69.0),'./_iter-detect':Js(74.0),'./_library':Js(77.0),'./_microtask':Js(85.0),'./_new-promise-capability':Js(86.0),'./_perform':Js(105.0),'./_promise-resolve':Js(106.0),'./_redefine-all':Js(108.0),'./_set-species':Js(117.0),'./_set-to-string-tag':Js(118.0),'./_species-constructor':Js(121.0),'./_task':Js(130.0),'./_user-agent':Js(142.0),'./_wks':Js(146.0)})]),'228':Js([PyJs_anonymous_1379_, Js({'./_a-function':Js(19.0),'./_an-object':Js(24.0),'./_export':Js(50.0),'./_fails':Js(52.0),'./_global':Js(58.0)})]),'229':Js([PyJs_anonymous_1383_, Js({'./_a-function':Js(19.0),'./_an-object':Js(24.0),'./_bind':Js(33.0),'./_export':Js(50.0),'./_fails':Js(52.0),'./_global':Js(58.0),'./_is-object':Js(69.0),'./_object-create':Js(88.0)})]),'230':Js([PyJs_anonymous_1389_, Js({'./_an-object':Js(24.0),'./_export':Js(50.0),'./_fails':Js(52.0),'./_object-dp':Js(89.0),'./_to-primitive':Js(137.0)})]),'231':Js([PyJs_anonymous_1392_, Js({'./_an-object':Js(24.0),'./_export':Js(50.0),'./_object-gopd':Js(92.0)})]),'232':Js([PyJs_anonymous_1394_, Js({'./_an-object':Js(24.0),'./_export':Js(50.0),'./_iter-create':Js(72.0)})]),'233':Js([PyJs_anonymous_1398_, Js({'./_an-object':Js(24.0),'./_export':Js(50.0),'./_object-gopd':Js(92.0)})]),'234':Js([PyJs_anonymous_1400_, Js({'./_an-object':Js(24.0),'./_export':Js(50.0),'./_object-gpo':Js(96.0)})]),'235':Js([PyJs_anonymous_1402_, Js({'./_an-object':Js(24.0),'./_export':Js(50.0),'./_has':Js(59.0),'./_is-object':Js(69.0),'./_object-gopd':Js(92.0),'./_object-gpo':Js(96.0)})]),'236':Js([PyJs_anonymous_1403_, Js({'./_export':Js(50.0)})]),'237':Js([PyJs_anonymous_1405_, Js({'./_an-object':Js(24.0),'./_export':Js(50.0)})]),'238':Js([PyJs_anonymous_1407_, Js({'./_export':Js(50.0),'./_own-keys':Js(102.0)})]),'239':Js([PyJs_anonymous_1408_, Js({'./_an-object':Js(24.0),'./_export':Js(50.0)})]),'240':Js([PyJs_anonymous_1410_, Js({'./_export':Js(50.0),'./_set-proto':Js(116.0)})]),'241':Js([PyJs_anonymous_1412_, Js({'./_an-object':Js(24.0),'./_export':Js(50.0),'./_has':Js(59.0),'./_is-object':Js(69.0),'./_object-dp':Js(89.0),'./_object-gopd':Js(92.0),'./_object-gpo':Js(96.0),'./_property-desc':Js(107.0)})]),'242':Js([PyJs_anonymous_1413_, Js({'./_descriptors':Js(46.0),'./_fails':Js(52.0),'./_flags':Js(54.0),'./_global':Js(58.0),'./_inherit-if-required':Js(63.0),'./_is-regexp':Js(70.0),'./_object-dp':Js(89.0),'./_object-gopn':Js(94.0),'./_redefine':Js(109.0),'./_set-species':Js(117.0),'./_wks':Js(146.0)})]),'243':Js([PyJs_anonymous_1420_, Js({'./_export':Js(50.0),'./_regexp-exec':Js(111.0)})]),'244':Js([PyJs_anonymous_1421_, Js({'./_descriptors':Js(46.0),'./_flags':Js(54.0),'./_object-dp':Js(89.0)})]),'245':Js([PyJs_anonymous_1422_, Js({'./_advance-string-index':Js(22.0),'./_an-object':Js(24.0),'./_fix-re-wks':Js(53.0),'./_regexp-exec-abstract':Js(110.0),'./_to-length':Js(135.0)})]),'246':Js([PyJs_anonymous_1426_, Js({'./_advance-string-index':Js(22.0),'./_an-object':Js(24.0),'./_fix-re-wks':Js(53.0),'./_regexp-exec-abstract':Js(110.0),'./_to-integer':Js(133.0),'./_to-length':Js(135.0),'./_to-object':Js(136.0)})]),'247':Js([PyJs_anonymous_1432_, Js({'./_an-object':Js(24.0),'./_fix-re-wks':Js(53.0),'./_regexp-exec-abstract':Js(110.0),'./_same-value':Js(113.0)})]),'248':Js([PyJs_anonymous_1436_, Js({'./_advance-string-index':Js(22.0),'./_an-object':Js(24.0),'./_fails':Js(52.0),'./_fix-re-wks':Js(53.0),'./_is-regexp':Js(70.0),'./_regexp-exec':Js(111.0),'./_regexp-exec-abstract':Js(110.0),'./_species-constructor':Js(121.0),'./_to-length':Js(135.0)})]),'249':Js([PyJs_anonymous_1444_, Js({'./_an-object':Js(24.0),'./_descriptors':Js(46.0),'./_fails':Js(52.0),'./_flags':Js(54.0),'./_redefine':Js(109.0),'./es6.regexp.flags':Js(244.0)})]),'250':Js([PyJs_anonymous_1449_, Js({'./_collection':Js(39.0),'./_collection-strong':Js(36.0),'./_validate-collection':Js(143.0)})]),'251':Js([PyJs_anonymous_1453_, Js({'./_string-html':Js(125.0)})]),'252':Js([PyJs_anonymous_1456_, Js({'./_string-html':Js(125.0)})]),'253':Js([PyJs_anonymous_1459_, Js({'./_string-html':Js(125.0)})]),'254':Js([PyJs_anonymous_1462_, Js({'./_string-html':Js(125.0)})]),'255':Js([PyJs_anonymous_1465_, Js({'./_export':Js(50.0),'./_string-at':Js(123.0)})]),'256':Js([PyJs_anonymous_1467_, Js({'./_export':Js(50.0),'./_fails-is-regexp':Js(51.0),'./_string-context':Js(124.0),'./_to-length':Js(135.0)})]),'257':Js([PyJs_anonymous_1469_, Js({'./_string-html':Js(125.0)})]),'258':Js([PyJs_anonymous_1472_, Js({'./_string-html':Js(125.0)})]),'259':Js([PyJs_anonymous_1475_, Js({'./_string-html':Js(125.0)})]),'260':Js([PyJs_anonymous_1478_, Js({'./_export':Js(50.0),'./_to-absolute-index':Js(131.0)})]),'261':Js([PyJs_anonymous_1480_, Js({'./_export':Js(50.0),'./_fails-is-regexp':Js(51.0),'./_string-context':Js(124.0)})]),'262':Js([PyJs_anonymous_1482_, Js({'./_string-html':Js(125.0)})]),'263':Js([PyJs_anonymous_1485_, Js({'./_iter-define':Js(73.0),'./_string-at':Js(123.0)})]),'264':Js([PyJs_anonymous_1488_, Js({'./_string-html':Js(125.0)})]),'265':Js([PyJs_anonymous_1491_, Js({'./_export':Js(50.0),'./_to-iobject':Js(134.0),'./_to-length':Js(135.0)})]),'266':Js([PyJs_anonymous_1493_, Js({'./_export':Js(50.0),'./_string-repeat':Js(127.0)})]),'267':Js([PyJs_anonymous_1494_, Js({'./_string-html':Js(125.0)})]),'268':Js([PyJs_anonymous_1497_, Js({'./_export':Js(50.0),'./_fails-is-regexp':Js(51.0),'./_string-context':Js(124.0),'./_to-length':Js(135.0)})]),'269':Js([PyJs_anonymous_1499_, Js({'./_string-html':Js(125.0)})]),'270':Js([PyJs_anonymous_1502_, Js({'./_string-html':Js(125.0)})]),'271':Js([PyJs_anonymous_1505_, Js({'./_string-html':Js(125.0)})]),'272':Js([PyJs_anonymous_1508_, Js({'./_string-trim':Js(128.0)})]),'273':Js([PyJs_anonymous_1511_, Js({'./_an-object':Js(24.0),'./_descriptors':Js(46.0),'./_enum-keys':Js(49.0),'./_export':Js(50.0),'./_fails':Js(52.0),'./_global':Js(58.0),'./_has':Js(59.0),'./_hide':Js(60.0),'./_is-array':Js(67.0),'./_is-object':Js(69.0),'./_library':Js(77.0),'./_meta':Js(83.0),'./_object-create':Js(88.0),'./_object-dp':Js(89.0),'./_object-gopd':Js(92.0),'./_object-gopn':Js(94.0),'./_object-gopn-ext':Js(93.0),'./_object-gops':Js(95.0),'./_object-keys':Js(98.0),'./_object-pie':Js(99.0),'./_property-desc':Js(107.0),'./_redefine':Js(109.0),'./_set-to-string-tag':Js(118.0),'./_shared':Js(120.0),'./_to-iobject':Js(134.0),'./_to-object':Js(136.0),'./_to-primitive':Js(137.0),'./_uid':Js(141.0),'./_wks':Js(146.0),'./_wks-define':Js(144.0),'./_wks-ext':Js(145.0)})]),'274':Js([PyJs_anonymous_1539_, Js({'./_an-object':Js(24.0),'./_export':Js(50.0),'./_fails':Js(52.0),'./_global':Js(58.0),'./_is-object':Js(69.0),'./_set-species':Js(117.0),'./_species-constructor':Js(121.0),'./_to-absolute-index':Js(131.0),'./_to-length':Js(135.0),'./_typed':Js(140.0),'./_typed-buffer':Js(139.0)})]),'275':Js([PyJs_anonymous_1543_, Js({'./_export':Js(50.0),'./_typed':Js(140.0),'./_typed-buffer':Js(139.0)})]),'276':Js([PyJs_anonymous_1544_, Js({'./_typed-array':Js(138.0)})]),'277':Js([PyJs_anonymous_1547_, Js({'./_typed-array':Js(138.0)})]),'278':Js([PyJs_anonymous_1550_, Js({'./_typed-array':Js(138.0)})]),'279':Js([PyJs_anonymous_1553_, Js({'./_typed-array':Js(138.0)})]),'280':Js([PyJs_anonymous_1556_, Js({'./_typed-array':Js(138.0)})]),'281':Js([PyJs_anonymous_1559_, Js({'./_typed-array':Js(138.0)})]),'282':Js([PyJs_anonymous_1562_, Js({'./_typed-array':Js(138.0)})]),'283':Js([PyJs_anonymous_1565_, Js({'./_typed-array':Js(138.0)})]),'284':Js([PyJs_anonymous_1568_, Js({'./_typed-array':Js(138.0)})]),'285':Js([PyJs_anonymous_1571_, Js({'./_array-methods':Js(29.0),'./_collection':Js(39.0),'./_collection-weak':Js(38.0),'./_global':Js(58.0),'./_is-object':Js(69.0),'./_meta':Js(83.0),'./_object-assign':Js(87.0),'./_redefine':Js(109.0),'./_validate-collection':Js(143.0)})]),'286':Js([PyJs_anonymous_1578_, Js({'./_collection':Js(39.0),'./_collection-weak':Js(38.0),'./_validate-collection':Js(143.0)})]),'287':Js([PyJs_anonymous_1582_, Js({'./_a-function':Js(19.0),'./_add-to-unscopables':Js(21.0),'./_array-species-create':Js(32.0),'./_export':Js(50.0),'./_flatten-into-array':Js(55.0),'./_to-length':Js(135.0),'./_to-object':Js(136.0)})]),'288':Js([PyJs_anonymous_1584_, Js({'./_add-to-unscopables':Js(21.0),'./_array-species-create':Js(32.0),'./_export':Js(50.0),'./_flatten-into-array':Js(55.0),'./_to-integer':Js(133.0),'./_to-length':Js(135.0),'./_to-object':Js(136.0)})]),'289':Js([PyJs_anonymous_1586_, Js({'./_add-to-unscopables':Js(21.0),'./_array-includes':Js(28.0),'./_export':Js(50.0)})]),'290':Js([PyJs_anonymous_1588_, Js({'./_cof':Js(35.0),'./_export':Js(50.0),'./_global':Js(58.0),'./_microtask':Js(85.0)})]),'291':Js([PyJs_anonymous_1590_, Js({'./_cof':Js(35.0),'./_export':Js(50.0)})]),'292':Js([PyJs_anonymous_1592_, Js({'./_export':Js(50.0),'./_global':Js(58.0)})]),'293':Js([PyJs_anonymous_1593_, Js({'./_set-collection-from':Js(114.0)})]),'294':Js([PyJs_anonymous_1594_, Js({'./_set-collection-of':Js(115.0)})]),'295':Js([PyJs_anonymous_1595_, Js({'./_collection-to-json':Js(37.0),'./_export':Js(50.0)})]),'296':Js([PyJs_anonymous_1596_, Js({'./_export':Js(50.0)})]),'297':Js([PyJs_anonymous_1598_, Js({'./_export':Js(50.0)})]),'298':Js([PyJs_anonymous_1599_, Js({'./_export':Js(50.0)})]),'299':Js([PyJs_anonymous_1601_, Js({'./_export':Js(50.0),'./_math-fround':Js(79.0),'./_math-scale':Js(81.0)})]),'300':Js([PyJs_anonymous_1603_, Js({'./_export':Js(50.0)})]),'301':Js([PyJs_anonymous_1605_, Js({'./_export':Js(50.0)})]),'302':Js([PyJs_anonymous_1607_, Js({'./_export':Js(50.0)})]),'303':Js([PyJs_anonymous_1609_, Js({'./_export':Js(50.0)})]),'304':Js([PyJs_anonymous_1610_, Js({'./_export':Js(50.0)})]),'305':Js([PyJs_anonymous_1612_, Js({'./_export':Js(50.0),'./_math-scale':Js(81.0)})]),'306':Js([PyJs_anonymous_1613_, Js({'./_export':Js(50.0)})]),'307':Js([PyJs_anonymous_1615_, Js({'./_export':Js(50.0)})]),'308':Js([PyJs_anonymous_1617_, Js({'./_a-function':Js(19.0),'./_descriptors':Js(46.0),'./_export':Js(50.0),'./_object-dp':Js(89.0),'./_object-forced-pam':Js(91.0),'./_to-object':Js(136.0)})]),'309':Js([PyJs_anonymous_1619_, Js({'./_a-function':Js(19.0),'./_descriptors':Js(46.0),'./_export':Js(50.0),'./_object-dp':Js(89.0),'./_object-forced-pam':Js(91.0),'./_to-object':Js(136.0)})]),'310':Js([PyJs_anonymous_1621_, Js({'./_export':Js(50.0),'./_object-to-array':Js(101.0)})]),'311':Js([PyJs_anonymous_1623_, Js({'./_create-property':Js(41.0),'./_export':Js(50.0),'./_object-gopd':Js(92.0),'./_own-keys':Js(102.0),'./_to-iobject':Js(134.0)})]),'312':Js([PyJs_anonymous_1625_, Js({'./_descriptors':Js(46.0),'./_export':Js(50.0),'./_object-forced-pam':Js(91.0),'./_object-gopd':Js(92.0),'./_object-gpo':Js(96.0),'./_to-object':Js(136.0),'./_to-primitive':Js(137.0)})]),'313':Js([PyJs_anonymous_1627_, Js({'./_descriptors':Js(46.0),'./_export':Js(50.0),'./_object-forced-pam':Js(91.0),'./_object-gopd':Js(92.0),'./_object-gpo':Js(96.0),'./_to-object':Js(136.0),'./_to-primitive':Js(137.0)})]),'314':Js([PyJs_anonymous_1629_, Js({'./_export':Js(50.0),'./_object-to-array':Js(101.0)})]),'315':Js([PyJs_anonymous_1631_, Js({'./_a-function':Js(19.0),'./_an-instance':Js(23.0),'./_an-object':Js(24.0),'./_core':Js(40.0),'./_export':Js(50.0),'./_for-of':Js(56.0),'./_global':Js(58.0),'./_hide':Js(60.0),'./_microtask':Js(85.0),'./_redefine-all':Js(108.0),'./_set-species':Js(117.0),'./_wks':Js(146.0)})]),'316':Js([PyJs_anonymous_1659_, Js({'./_core':Js(40.0),'./_export':Js(50.0),'./_global':Js(58.0),'./_promise-resolve':Js(106.0),'./_species-constructor':Js(121.0)})]),'317':Js([PyJs_anonymous_1665_, Js({'./_export':Js(50.0),'./_new-promise-capability':Js(86.0),'./_perform':Js(105.0)})]),'318':Js([PyJs_anonymous_1667_, Js({'./_an-object':Js(24.0),'./_metadata':Js(84.0)})]),'319':Js([PyJs_anonymous_1669_, Js({'./_an-object':Js(24.0),'./_metadata':Js(84.0)})]),'320':Js([PyJs_anonymous_1671_, Js({'./_an-object':Js(24.0),'./_array-from-iterable':Js(27.0),'./_metadata':Js(84.0),'./_object-gpo':Js(96.0),'./es6.set':Js(250.0)})]),'321':Js([PyJs_anonymous_1674_, Js({'./_an-object':Js(24.0),'./_metadata':Js(84.0),'./_object-gpo':Js(96.0)})]),'322':Js([PyJs_anonymous_1677_, Js({'./_an-object':Js(24.0),'./_metadata':Js(84.0)})]),'323':Js([PyJs_anonymous_1679_, Js({'./_an-object':Js(24.0),'./_metadata':Js(84.0)})]),'324':Js([PyJs_anonymous_1681_, Js({'./_an-object':Js(24.0),'./_metadata':Js(84.0),'./_object-gpo':Js(96.0)})]),'325':Js([PyJs_anonymous_1684_, Js({'./_an-object':Js(24.0),'./_metadata':Js(84.0)})]),'326':Js([PyJs_anonymous_1686_, Js({'./_a-function':Js(19.0),'./_an-object':Js(24.0),'./_metadata':Js(84.0)})]),'327':Js([PyJs_anonymous_1689_, Js({'./_set-collection-from':Js(114.0)})]),'328':Js([PyJs_anonymous_1690_, Js({'./_set-collection-of':Js(115.0)})]),'329':Js([PyJs_anonymous_1691_, Js({'./_collection-to-json':Js(37.0),'./_export':Js(50.0)})]),'330':Js([PyJs_anonymous_1692_, Js({'./_export':Js(50.0),'./_string-at':Js(123.0)})]),'331':Js([PyJs_anonymous_1694_, Js({'./_defined':Js(45.0),'./_export':Js(50.0),'./_flags':Js(54.0),'./_is-regexp':Js(70.0),'./_iter-create':Js(72.0),'./_to-length':Js(135.0)})]),'332':Js([PyJs_anonymous_1698_, Js({'./_export':Js(50.0),'./_string-pad':Js(126.0),'./_user-agent':Js(142.0)})]),'333':Js([PyJs_anonymous_1700_, Js({'./_export':Js(50.0),'./_string-pad':Js(126.0),'./_user-agent':Js(142.0)})]),'334':Js([PyJs_anonymous_1702_, Js({'./_string-trim':Js(128.0)})]),'335':Js([PyJs_anonymous_1705_, Js({'./_string-trim':Js(128.0)})]),'336':Js([PyJs_anonymous_1708_, Js({'./_wks-define':Js(144.0)})]),'337':Js([PyJs_anonymous_1709_, Js({'./_wks-define':Js(144.0)})]),'338':Js([PyJs_anonymous_1710_, Js({'./_export':Js(50.0),'./_global':Js(58.0)})]),'339':Js([PyJs_anonymous_1711_, Js({'./_set-collection-from':Js(114.0)})]),'340':Js([PyJs_anonymous_1712_, Js({'./_set-collection-of':Js(115.0)})]),'341':Js([PyJs_anonymous_1713_, Js({'./_set-collection-from':Js(114.0)})]),'342':Js([PyJs_anonymous_1714_, Js({'./_set-collection-of':Js(115.0)})]),'343':Js([PyJs_anonymous_1715_, Js({'./_global':Js(58.0),'./_hide':Js(60.0),'./_iterators':Js(76.0),'./_object-keys':Js(98.0),'./_redefine':Js(109.0),'./_wks':Js(146.0),'./es6.array.iterator':Js(159.0)})]),'344':Js([PyJs_anonymous_1716_, Js({'./_export':Js(50.0),'./_task':Js(130.0)})]),'345':Js([PyJs_anonymous_1717_, Js({'./_export':Js(50.0),'./_global':Js(58.0),'./_user-agent':Js(142.0)})]),'346':Js([PyJs_anonymous_1721_, Js({'./modules/_core':Js(40.0),'./modules/es6.array.copy-within':Js(149.0),'./modules/es6.array.every':Js(150.0),'./modules/es6.array.fill':Js(151.0),'./modules/es6.array.filter':Js(152.0),'./modules/es6.array.find':Js(154.0),'./modules/es6.array.find-index':Js(153.0),'./modules/es6.array.for-each':Js(155.0),'./modules/es6.array.from':Js(156.0),'./modules/es6.array.index-of':Js(157.0),'./modules/es6.array.is-array':Js(158.0),'./modules/es6.array.iterator':Js(159.0),'./modules/es6.array.join':Js(160.0),'./modules/es6.array.last-index-of':Js(161.0),'./modules/es6.array.map':Js(162.0),'./modules/es6.array.of':Js(163.0),'./modules/es6.array.reduce':Js(165.0),'./modules/es6.array.reduce-right':Js(164.0),'./modules/es6.array.slice':Js(166.0),'./modules/es6.array.some':Js(167.0),'./modules/es6.array.sort':Js(168.0),'./modules/es6.array.species':Js(169.0),'./modules/es6.date.now':Js(170.0),'./modules/es6.date.to-iso-string':Js(171.0),'./modules/es6.date.to-json':Js(172.0),'./modules/es6.date.to-primitive':Js(173.0),'./modules/es6.date.to-string':Js(174.0),'./modules/es6.function.bind':Js(175.0),'./modules/es6.function.has-instance':Js(176.0),'./modules/es6.function.name':Js(177.0),'./modules/es6.map':Js(178.0),'./modules/es6.math.acosh':Js(179.0),'./modules/es6.math.asinh':Js(180.0),'./modules/es6.math.atanh':Js(181.0),'./modules/es6.math.cbrt':Js(182.0),'./modules/es6.math.clz32':Js(183.0),'./modules/es6.math.cosh':Js(184.0),'./modules/es6.math.expm1':Js(185.0),'./modules/es6.math.fround':Js(186.0),'./modules/es6.math.hypot':Js(187.0),'./modules/es6.math.imul':Js(188.0),'./modules/es6.math.log10':Js(189.0),'./modules/es6.math.log1p':Js(190.0),'./modules/es6.math.log2':Js(191.0),'./modules/es6.math.sign':Js(192.0),'./modules/es6.math.sinh':Js(193.0),'./modules/es6.math.tanh':Js(194.0),'./modules/es6.math.trunc':Js(195.0),'./modules/es6.number.constructor':Js(196.0),'./modules/es6.number.epsilon':Js(197.0),'./modules/es6.number.is-finite':Js(198.0),'./modules/es6.number.is-integer':Js(199.0),'./modules/es6.number.is-nan':Js(200.0),'./modules/es6.number.is-safe-integer':Js(201.0),'./modules/es6.number.max-safe-integer':Js(202.0),'./modules/es6.number.min-safe-integer':Js(203.0),'./modules/es6.number.parse-float':Js(204.0),'./modules/es6.number.parse-int':Js(205.0),'./modules/es6.number.to-fixed':Js(206.0),'./modules/es6.number.to-precision':Js(207.0),'./modules/es6.object.assign':Js(208.0),'./modules/es6.object.create':Js(209.0),'./modules/es6.object.define-properties':Js(210.0),'./modules/es6.object.define-property':Js(211.0),'./modules/es6.object.freeze':Js(212.0),'./modules/es6.object.get-own-property-descriptor':Js(213.0),'./modules/es6.object.get-own-property-names':Js(214.0),'./modules/es6.object.get-prototype-of':Js(215.0),'./modules/es6.object.is':Js(219.0),'./modules/es6.object.is-extensible':Js(216.0),'./modules/es6.object.is-frozen':Js(217.0),'./modules/es6.object.is-sealed':Js(218.0),'./modules/es6.object.keys':Js(220.0),'./modules/es6.object.prevent-extensions':Js(221.0),'./modules/es6.object.seal':Js(222.0),'./modules/es6.object.set-prototype-of':Js(223.0),'./modules/es6.object.to-string':Js(224.0),'./modules/es6.parse-float':Js(225.0),'./modules/es6.parse-int':Js(226.0),'./modules/es6.promise':Js(227.0),'./modules/es6.reflect.apply':Js(228.0),'./modules/es6.reflect.construct':Js(229.0),'./modules/es6.reflect.define-property':Js(230.0),'./modules/es6.reflect.delete-property':Js(231.0),'./modules/es6.reflect.enumerate':Js(232.0),'./modules/es6.reflect.get':Js(235.0),'./modules/es6.reflect.get-own-property-descriptor':Js(233.0),'./modules/es6.reflect.get-prototype-of':Js(234.0),'./modules/es6.reflect.has':Js(236.0),'./modules/es6.reflect.is-extensible':Js(237.0),'./modules/es6.reflect.own-keys':Js(238.0),'./modules/es6.reflect.prevent-extensions':Js(239.0),'./modules/es6.reflect.set':Js(241.0),'./modules/es6.reflect.set-prototype-of':Js(240.0),'./modules/es6.regexp.constructor':Js(242.0),'./modules/es6.regexp.exec':Js(243.0),'./modules/es6.regexp.flags':Js(244.0),'./modules/es6.regexp.match':Js(245.0),'./modules/es6.regexp.replace':Js(246.0),'./modules/es6.regexp.search':Js(247.0),'./modules/es6.regexp.split':Js(248.0),'./modules/es6.regexp.to-string':Js(249.0),'./modules/es6.set':Js(250.0),'./modules/es6.string.anchor':Js(251.0),'./modules/es6.string.big':Js(252.0),'./modules/es6.string.blink':Js(253.0),'./modules/es6.string.bold':Js(254.0),'./modules/es6.string.code-point-at':Js(255.0),'./modules/es6.string.ends-with':Js(256.0),'./modules/es6.string.fixed':Js(257.0),'./modules/es6.string.fontcolor':Js(258.0),'./modules/es6.string.fontsize':Js(259.0),'./modules/es6.string.from-code-point':Js(260.0),'./modules/es6.string.includes':Js(261.0),'./modules/es6.string.italics':Js(262.0),'./modules/es6.string.iterator':Js(263.0),'./modules/es6.string.link':Js(264.0),'./modules/es6.string.raw':Js(265.0),'./modules/es6.string.repeat':Js(266.0),'./modules/es6.string.small':Js(267.0),'./modules/es6.string.starts-with':Js(268.0),'./modules/es6.string.strike':Js(269.0),'./modules/es6.string.sub':Js(270.0),'./modules/es6.string.sup':Js(271.0),'./modules/es6.string.trim':Js(272.0),'./modules/es6.symbol':Js(273.0),'./modules/es6.typed.array-buffer':Js(274.0),'./modules/es6.typed.data-view':Js(275.0),'./modules/es6.typed.float32-array':Js(276.0),'./modules/es6.typed.float64-array':Js(277.0),'./modules/es6.typed.int16-array':Js(278.0),'./modules/es6.typed.int32-array':Js(279.0),'./modules/es6.typed.int8-array':Js(280.0),'./modules/es6.typed.uint16-array':Js(281.0),'./modules/es6.typed.uint32-array':Js(282.0),'./modules/es6.typed.uint8-array':Js(283.0),'./modules/es6.typed.uint8-clamped-array':Js(284.0),'./modules/es6.weak-map':Js(285.0),'./modules/es6.weak-set':Js(286.0),'./modules/es7.array.flat-map':Js(287.0),'./modules/es7.array.flatten':Js(288.0),'./modules/es7.array.includes':Js(289.0),'./modules/es7.asap':Js(290.0),'./modules/es7.error.is-error':Js(291.0),'./modules/es7.global':Js(292.0),'./modules/es7.map.from':Js(293.0),'./modules/es7.map.of':Js(294.0),'./modules/es7.map.to-json':Js(295.0),'./modules/es7.math.clamp':Js(296.0),'./modules/es7.math.deg-per-rad':Js(297.0),'./modules/es7.math.degrees':Js(298.0),'./modules/es7.math.fscale':Js(299.0),'./modules/es7.math.iaddh':Js(300.0),'./modules/es7.math.imulh':Js(301.0),'./modules/es7.math.isubh':Js(302.0),'./modules/es7.math.rad-per-deg':Js(303.0),'./modules/es7.math.radians':Js(304.0),'./modules/es7.math.scale':Js(305.0),'./modules/es7.math.signbit':Js(306.0),'./modules/es7.math.umulh':Js(307.0),'./modules/es7.object.define-getter':Js(308.0),'./modules/es7.object.define-setter':Js(309.0),'./modules/es7.object.entries':Js(310.0),'./modules/es7.object.get-own-property-descriptors':Js(311.0),'./modules/es7.object.lookup-getter':Js(312.0),'./modules/es7.object.lookup-setter':Js(313.0),'./modules/es7.object.values':Js(314.0),'./modules/es7.observable':Js(315.0),'./modules/es7.promise.finally':Js(316.0),'./modules/es7.promise.try':Js(317.0),'./modules/es7.reflect.define-metadata':Js(318.0),'./modules/es7.reflect.delete-metadata':Js(319.0),'./modules/es7.reflect.get-metadata':Js(321.0),'./modules/es7.reflect.get-metadata-keys':Js(320.0),'./modules/es7.reflect.get-own-metadata':Js(323.0),'./modules/es7.reflect.get-own-metadata-keys':Js(322.0),'./modules/es7.reflect.has-metadata':Js(324.0),'./modules/es7.reflect.has-own-metadata':Js(325.0),'./modules/es7.reflect.metadata':Js(326.0),'./modules/es7.set.from':Js(327.0),'./modules/es7.set.of':Js(328.0),'./modules/es7.set.to-json':Js(329.0),'./modules/es7.string.at':Js(330.0),'./modules/es7.string.match-all':Js(331.0),'./modules/es7.string.pad-end':Js(332.0),'./modules/es7.string.pad-start':Js(333.0),'./modules/es7.string.trim-left':Js(334.0),'./modules/es7.string.trim-right':Js(335.0),'./modules/es7.symbol.async-iterator':Js(336.0),'./modules/es7.symbol.observable':Js(337.0),'./modules/es7.system.global':Js(338.0),'./modules/es7.weak-map.from':Js(339.0),'./modules/es7.weak-map.of':Js(340.0),'./modules/es7.weak-set.from':Js(341.0),'./modules/es7.weak-set.of':Js(342.0),'./modules/web.dom.iterable':Js(343.0),'./modules/web.immediate':Js(344.0),'./modules/web.timers':Js(345.0)})]),'347':Js([PyJs_anonymous_1722_, Js({'function-bind':Js(386.0),'has-symbols':Js(391.0)})]),'348':Js([PyJs_anonymous_1730_, Js({'../GetIntrinsic':Js(347.0),'function-bind':Js(386.0)})]),'349':Js([PyJs_anonymous_1733_, Js({'../GetIntrinsic':Js(347.0),'./callBind':Js(348.0)})]),'350':Js([PyJs_anonymous_1735_, Js({'../GetIntrinsic':Js(347.0)})]),'351':Js([PyJs_anonymous_1736_, Js({})]),'352':Js([PyJs_anonymous_1759_, Js({})]),'353':Js([PyJs_anonymous_1761_, Js({'../mkdirs':Js(370.0),'../util/buffer':Js(382.0),'../util/stat':Js(383.0),'../util/utimes.js':Js(384.0),'_process':Js(457.0),'graceful-fs':Js(388.0),'path':Js(434.0)})]),'354':Js([PyJs_anonymous_1765_, Js({'./copy-sync':Js(353.0)})]),'355':Js([PyJs_anonymous_1766_, Js({'../mkdirs':Js(370.0),'../path-exists':Js(379.0),'../util/stat':Js(383.0),'../util/utimes':Js(384.0),'_process':Js(457.0),'graceful-fs':Js(388.0),'path':Js(434.0)})]),'356':Js([PyJs_anonymous_1793_, Js({'./copy':Js(355.0),'universalify':Js(476.0)})]),'357':Js([PyJs_anonymous_1794_, Js({'../mkdirs':Js(370.0),'../remove':Js(380.0),'graceful-fs':Js(388.0),'path':Js(434.0),'universalify':Js(476.0)})]),'358':Js([PyJs_anonymous_1801_, Js({'../mkdirs':Js(370.0),'../path-exists':Js(379.0),'graceful-fs':Js(388.0),'path':Js(434.0),'universalify':Js(476.0)})]),'359':Js([PyJs_anonymous_1806_, Js({'./file':Js(358.0),'./link':Js(360.0),'./symlink':Js(363.0)})]),'360':Js([PyJs_anonymous_1808_, Js({'../mkdirs':Js(370.0),'../path-exists':Js(379.0),'graceful-fs':Js(388.0),'path':Js(434.0),'universalify':Js(476.0)})]),'361':Js([PyJs_anonymous_1814_, Js({'../path-exists':Js(379.0),'graceful-fs':Js(388.0),'path':Js(434.0)})]),'362':Js([PyJs_anonymous_1818_, Js({'graceful-fs':Js(388.0)})]),'363':Js([PyJs_anonymous_1820_, Js({'../mkdirs':Js(370.0),'../path-exists':Js(379.0),'./symlink-paths':Js(361.0),'./symlink-type':Js(362.0),'graceful-fs':Js(388.0),'path':Js(434.0),'universalify':Js(476.0)})]),'364':Js([PyJs_anonymous_1826_, Js({'graceful-fs':Js(388.0),'universalify':Js(476.0)})]),'365':Js([PyJs_anonymous_1839_, Js({'./copy':Js(356.0),'./copy-sync':Js(354.0),'./empty':Js(357.0),'./ensure':Js(359.0),'./fs':Js(364.0),'./json':Js(366.0),'./mkdirs':Js(370.0),'./move':Js(376.0),'./move-sync':Js(374.0),'./output':Js(378.0),'./path-exists':Js(379.0),'./remove':Js(380.0),'fs':Js(14.0)})]),'366':Js([PyJs_anonymous_1842_, Js({'./jsonfile':Js(367.0),'./output-json':Js(369.0),'./output-json-sync':Js(368.0),'universalify':Js(476.0)})]),'367':Js([PyJs_anonymous_1843_, Js({'jsonfile':Js(402.0),'universalify':Js(476.0)})]),'368':Js([PyJs_anonymous_1844_, Js({'../mkdirs':Js(370.0),'./jsonfile':Js(367.0),'graceful-fs':Js(388.0),'path':Js(434.0)})]),'369':Js([PyJs_anonymous_1845_, Js({'../mkdirs':Js(370.0),'../path-exists':Js(379.0),'./jsonfile':Js(367.0),'path':Js(434.0)})]),'370':Js([PyJs_anonymous_1848_, Js({'./mkdirs':Js(372.0),'./mkdirs-sync':Js(371.0),'universalify':Js(476.0)})]),'371':Js([PyJs_anonymous_1849_, Js({'./win32':Js(373.0),'_process':Js(457.0),'graceful-fs':Js(388.0),'path':Js(434.0)})]),'372':Js([PyJs_anonymous_1852_, Js({'./win32':Js(373.0),'_process':Js(457.0),'graceful-fs':Js(388.0),'path':Js(434.0)})]),'373':Js([PyJs_anonymous_1859_, Js({'path':Js(434.0)})]),'374':Js([PyJs_anonymous_1860_, Js({'./move-sync':Js(375.0)})]),'375':Js([PyJs_anonymous_1861_, Js({'../copy-sync':Js(354.0),'../mkdirs':Js(370.0),'../remove':Js(380.0),'../util/stat':Js(383.0),'graceful-fs':Js(388.0),'path':Js(434.0)})]),'376':Js([PyJs_anonymous_1862_, Js({'./move':Js(377.0),'universalify':Js(476.0)})]),'377':Js([PyJs_anonymous_1863_, Js({'../copy':Js(356.0),'../mkdirs':Js(370.0),'../path-exists':Js(379.0),'../remove':Js(380.0),'../util/stat':Js(383.0),'graceful-fs':Js(388.0),'path':Js(434.0)})]),'378':Js([PyJs_anonymous_1871_, Js({'../mkdirs':Js(370.0),'../path-exists':Js(379.0),'graceful-fs':Js(388.0),'path':Js(434.0),'universalify':Js(476.0)})]),'379':Js([PyJs_anonymous_1874_, Js({'../fs':Js(364.0),'universalify':Js(476.0)})]),'380':Js([PyJs_anonymous_1877_, Js({'./rimraf':Js(381.0),'universalify':Js(476.0)})]),'381':Js([PyJs_anonymous_1878_, Js({'_process':Js(457.0),'assert':Js(2.0),'graceful-fs':Js(388.0),'path':Js(434.0)})]),'382':Js([PyJs_anonymous_1893_, Js({'buffer':Js(15.0)})]),'383':Js([PyJs_anonymous_1897_, Js({'_process':Js(457.0),'graceful-fs':Js(388.0),'path':Js(434.0)})]),'384':Js([PyJs_anonymous_1910_, Js({'graceful-fs':Js(388.0),'os':Js(422.0),'path':Js(434.0)})]),'385':Js([PyJs_anonymous_1919_, Js({})]),'386':Js([PyJs_anonymous_1923_, Js({'./implementation':Js(385.0)})]),'387':Js([PyJs_anonymous_1924_, Js({})]),'388':Js([PyJs_anonymous_1926_, Js({'./clone.js':Js(387.0),'./legacy-streams.js':Js(389.0),'./polyfills.js':Js(390.0),'_process':Js(457.0),'assert':Js(2.0),'fs':Js(14.0),'util':Js(480.0)})]),'389':Js([PyJs_anonymous_1949_, Js({'_process':Js(457.0),'stream':Js(459.0)})]),'390':Js([PyJs_anonymous_1954_, Js({'_process':Js(457.0),'constants':Js(17.0)})]),'391':Js([PyJs_anonymous_1992_, Js({'./shams':Js(392.0)})]),'392':Js([PyJs_anonymous_1996_, Js({})]),'393':Js([PyJs_anonymous_1998_, Js({})]),'394':Js([PyJs_anonymous_2001_, Js({})]),'395':Js([PyJs_anonymous_2005_, Js({})]),'396':Js([PyJs_anonymous_2010_, Js({})]),'397':Js([PyJs_anonymous_2012_, Js({})]),'398':Js([PyJs_anonymous_2015_, Js({'available-typed-arrays':Js(6.0),'es-abstract/helpers/callBound':Js(349.0),'es-abstract/helpers/getOwnPropertyDescriptor':Js(350.0),'foreach':Js(352.0),'has-symbols':Js(391.0)})]),'399':Js([PyJs_anonymous_2023_, Js({'./lib/decoder':Js(400.0),'./lib/encoder':Js(401.0)})]),'400':Js([PyJs_anonymous_2024_, Js({'buffer':Js(15.0)})]),'401':Js([PyJs_anonymous_2038_, Js({'buffer':Js(15.0)})]),'402':Js([PyJs_anonymous_2043_, Js({'../is-buffer/index.js':Js(396.0),'fs':Js(14.0),'graceful-fs':Js(388.0)})]),'403':Js([PyJs_anonymous_2047_, Js({})]),'404':Js([PyJs_anonymous_2052_, Js({'./Mime':Js(403.0),'./types/other':Js(405.0),'./types/standard':Js(406.0)})]),'405':Js([PyJs_anonymous_2053_, Js({})]),'406':Js([PyJs_anonymous_2055_, Js({})]),'407':Js([PyJs_anonymous_2057_, Js({'./lib/obj2gltf':Js(417.0)})]),'408':Js([PyJs_anonymous_2058_, Js({'buffer':Js(15.0),'cesium':Js(16.0)})]),'409':Js([PyJs_anonymous_2067_, Js({})]),'410':Js([PyJs_anonymous_2068_, Js({'./Texture':Js(409.0),'./getBufferPadded':Js(411.0),'./loadMtl':Js(414.0),'buffer':Js(15.0),'cesium':Js(16.0)})]),'411':Js([PyJs_anonymous_2072_, Js({'buffer':Js(15.0)})]),'412':Js([PyJs_anonymous_2075_, Js({'buffer':Js(15.0)})]),'413':Js([PyJs_anonymous_2078_, Js({'./getJsonBufferPadded':Js(412.0),'buffer':Js(15.0),'cesium':Js(16.0)})]),'414':Js([PyJs_anonymous_2081_, Js({'./Texture':Js(409.0),'./loadTexture':Js(416.0),'./outsideDirectory':Js(418.0),'./readLines':Js(419.0),'bluebird':Js(10.0),'buffer':Js(15.0),'cesium':Js(16.0),'path':Js(434.0)})]),'415':Js([PyJs_anonymous_2097_, Js({'./ArrayStorage':Js(408.0),'./loadMtl':Js(414.0),'./outsideDirectory':Js(418.0),'./readLines':Js(419.0),'bluebird':Js(10.0),'cesium':Js(16.0),'path':Js(434.0)})]),'416':Js([PyJs_anonymous_2112_, Js({'./Texture':Js(409.0),'bluebird':Js(10.0),'cesium':Js(16.0),'fs-extra':Js(365.0),'jpeg-js':Js(399.0),'path':Js(434.0),'pngjs':Js(454.0)})]),'417':Js([PyJs_anonymous_2118_, Js({'./createGltf':Js(410.0),'./loadObj':Js(415.0),'./writeGltf':Js(420.0),'cesium':Js(16.0),'fs-extra':Js(365.0),'path':Js(434.0)})]),'418':Js([PyJs_anonymous_2123_, Js({'path':Js(434.0)})]),'419':Js([PyJs_anonymous_2124_, Js({'bluebird':Js(10.0),'fs-extra':Js(365.0),'readline':Js(14.0)})]),'420':Js([PyJs_anonymous_2127_, Js({'./getBufferPadded':Js(411.0),'./gltfToGlb':Js(413.0),'bluebird':Js(10.0),'buffer':Js(15.0),'cesium':Js(16.0),'mime':Js(404.0),'pngjs':Js(454.0)})]),'421':Js([PyJs_anonymous_2139_, Js({})]),'422':Js([PyJs_anonymous_2143_, Js({})]),'423':Js([PyJs_anonymous_2158_, Js({})]),'424':Js([PyJs_anonymous_2166_, Js({})]),'425':Js([PyJs_anonymous_2167_, Js({})]),'426':Js([PyJs_anonymous_2169_, Js({})]),'427':Js([PyJs_anonymous_2170_, Js({'../utils/common':Js(423.0),'./adler32':Js(424.0),'./crc32':Js(426.0),'./messages':Js(431.0),'./trees':Js(432.0)})]),'428':Js([PyJs_anonymous_2179_, Js({})]),'429':Js([PyJs_anonymous_2181_, Js({'../utils/common':Js(423.0),'./adler32':Js(424.0),'./crc32':Js(426.0),'./inffast':Js(428.0),'./inftrees':Js(430.0)})]),'430':Js([PyJs_anonymous_2182_, Js({'../utils/common':Js(423.0)})]),'431':Js([PyJs_anonymous_2184_, Js({})]),'432':Js([PyJs_anonymous_2185_, Js({'../utils/common':Js(423.0)})]),'433':Js([PyJs_anonymous_2186_, Js({})]),'434':Js([PyJs_anonymous_2187_, Js({'_process':Js(457.0)})]),'435':Js([PyJs_anonymous_2201_, Js({'./interlace':Js(445.0),'buffer':Js(15.0)})]),'436':Js([PyJs_anonymous_2219_, Js({'./constants':Js(438.0),'buffer':Js(15.0)})]),'437':Js([PyJs_anonymous_2224_, Js({'_process':Js(457.0),'buffer':Js(15.0),'stream':Js(459.0),'util':Js(480.0)})]),'438':Js([PyJs_anonymous_2237_, Js({})]),'439':Js([PyJs_anonymous_2239_, Js({})]),'440':Js([PyJs_anonymous_2245_, Js({'./paeth-predictor':Js(449.0),'buffer':Js(15.0)})]),'441':Js([PyJs_anonymous_2249_, Js({'./chunkstream':Js(437.0),'./filter-parse':Js(443.0),'buffer':Js(15.0),'util':Js(480.0)})]),'442':Js([PyJs_anonymous_2255_, Js({'./filter-parse':Js(443.0),'./sync-reader':Js(456.0),'buffer':Js(15.0)})]),'443':Js([PyJs_anonymous_2261_, Js({'./interlace':Js(445.0),'./paeth-predictor':Js(449.0),'buffer':Js(15.0)})]),'444':Js([PyJs_anonymous_2271_, Js({'buffer':Js(15.0)})]),'445':Js([PyJs_anonymous_2275_, Js({})]),'446':Js([PyJs_anonymous_2279_, Js({'./constants':Js(438.0),'./packer':Js(448.0),'buffer':Js(15.0),'stream':Js(459.0),'util':Js(480.0)})]),'447':Js([PyJs_anonymous_2286_, Js({'./constants':Js(438.0),'./packer':Js(448.0),'buffer':Js(15.0),'zlib':Js(13.0)})]),'448':Js([PyJs_anonymous_2290_, Js({'./bitpacker':Js(436.0),'./constants':Js(438.0),'./crc':Js(439.0),'./filter-pack':Js(440.0),'buffer':Js(15.0),'zlib':Js(13.0)})]),'449':Js([PyJs_anonymous_2302_, Js({})]),'450':Js([PyJs_anonymous_2304_, Js({'./bitmapper':Js(435.0),'./chunkstream':Js(437.0),'./filter-parse-async':Js(441.0),'./format-normaliser':Js(444.0),'./parser':Js(452.0),'util':Js(480.0),'zlib':Js(13.0)})]),'451':Js([PyJs_anonymous_2319_, Js({'./bitmapper':Js(435.0),'./filter-parse-sync':Js(442.0),'./format-normaliser':Js(444.0),'./parser':Js(452.0),'./sync-inflate':Js(455.0),'./sync-reader':Js(456.0),'buffer':Js(15.0),'zlib':Js(13.0)})]),'452':Js([PyJs_anonymous_2323_, Js({'./constants':Js(438.0),'./crc':Js(439.0),'buffer':Js(15.0)})]),'453':Js([PyJs_anonymous_2347_, Js({'./packer-sync':Js(447.0),'./parser-sync':Js(451.0)})]),'454':Js([PyJs_anonymous_2350_, Js({'./packer-async':Js(446.0),'./parser-async':Js(450.0),'./png-sync':Js(453.0),'_process':Js(457.0),'buffer':Js(15.0),'stream':Js(459.0),'util':Js(480.0)})]),'455':Js([PyJs_anonymous_2369_, Js({'_process':Js(457.0),'assert':Js(2.0),'buffer':Js(15.0),'util':Js(480.0),'zlib':Js(13.0)})]),'456':Js([PyJs_anonymous_2374_, Js({})]),'457':Js([PyJs_anonymous_2378_, Js({})]),'458':Js([PyJs_anonymous_2387_, Js({'buffer':Js(15.0)})]),'459':Js([PyJs_anonymous_2392_, Js({'events':Js(351.0),'inherits':Js(394.0),'readable-stream/lib/_stream_duplex.js':Js(461.0),'readable-stream/lib/_stream_passthrough.js':Js(462.0),'readable-stream/lib/_stream_readable.js':Js(463.0),'readable-stream/lib/_stream_transform.js':Js(464.0),'readable-stream/lib/_stream_writable.js':Js(465.0),'readable-stream/lib/internal/streams/end-of-stream.js':Js(469.0),'readable-stream/lib/internal/streams/pipeline.js':Js(471.0)})]),'460':Js([PyJs_anonymous_2394_, Js({})]),'461':Js([PyJs_anonymous_2402_, Js({'./_stream_readable':Js(463.0),'./_stream_writable':Js(465.0),'_process':Js(457.0),'inherits':Js(394.0)})]),'462':Js([PyJs_anonymous_2411_, Js({'./_stream_transform':Js(464.0),'inherits':Js(394.0)})]),'463':Js([PyJs_anonymous_2413_, Js({'../errors':Js(460.0),'./_stream_duplex':Js(461.0),'./internal/streams/async_iterator':Js(466.0),'./internal/streams/buffer_list':Js(467.0),'./internal/streams/destroy':Js(468.0),'./internal/streams/from':Js(470.0),'./internal/streams/state':Js(472.0),'./internal/streams/stream':Js(473.0),'_process':Js(457.0),'buffer':Js(15.0),'events':Js(351.0),'inherits':Js(394.0),'string_decoder/':Js(474.0),'util':Js(11.0)})]),'464':Js([PyJs_anonymous_2449_, Js({'../errors':Js(460.0),'./_stream_duplex':Js(461.0),'inherits':Js(394.0)})]),'465':Js([PyJs_anonymous_2457_, Js({'../errors':Js(460.0),'./_stream_duplex':Js(461.0),'./internal/streams/destroy':Js(468.0),'./internal/streams/state':Js(472.0),'./internal/streams/stream':Js(473.0),'_process':Js(457.0),'buffer':Js(15.0),'inherits':Js(394.0),'util-deprecate':Js(477.0)})]),'466':Js([PyJs_anonymous_2482_, Js({'./end-of-stream':Js(469.0),'_process':Js(457.0)})]),'467':Js([PyJs_anonymous_2502_, Js({'buffer':Js(15.0),'util':Js(11.0)})]),'468':Js([PyJs_anonymous_2519_, Js({'_process':Js(457.0)})]),'469':Js([PyJs_anonymous_2523_, Js({'../../../errors':Js(460.0)})]),'470':Js([PyJs_anonymous_2532_, Js({})]),'471':Js([PyJs_anonymous_2534_, Js({'../../../errors':Js(460.0),'./end-of-stream':Js(469.0)})]),'472':Js([PyJs_anonymous_2541_, Js({'../../../errors':Js(460.0)})]),'473':Js([PyJs_anonymous_2542_, Js({'events':Js(351.0)})]),'474':Js([PyJs_anonymous_2543_, Js({'safe-buffer':Js(458.0)})]),'475':Js([PyJs_anonymous_2547_, Js({'process/browser.js':Js(457.0),'timers':Js(475.0)})]),'476':Js([PyJs_anonymous_2562_, Js({})]),'477':Js([PyJs_anonymous_2570_, Js({})]),'478':Js([PyJs_anonymous_2573_, Js({'dup':Js(4.0)})]),'479':Js([PyJs_anonymous_2574_, Js({'is-arguments':Js(395.0),'is-generator-function':Js(397.0),'is-typed-array':Js(398.0),'which-typed-array':Js(481.0)})]),'480':Js([PyJs_anonymous_2578_, Js({'./support/isBuffer':Js(478.0),'./support/types':Js(479.0),'_process':Js(457.0),'inherits':Js(394.0)})]),'481':Js([PyJs_anonymous_2605_, Js({'available-typed-arrays':Js(6.0),'es-abstract/helpers/callBound':Js(349.0),'es-abstract/helpers/getOwnPropertyDescriptor':Js(350.0),'foreach':Js(352.0),'has-symbols':Js(391.0),'is-typed-array':Js(398.0)})]),'482':Js([PyJs_anonymous_2612_, Js({'babel-polyfill':Js(7.0),'obj2gltf':Js(407.0)})])}), Js({}), Js([Js(482.0)]))
PyJs_LONG_2615_()
pass
pass
pass
pass
var.put('obj2gltf', var.get('getFromGlobals')(Js('obj2gltf')))
var.get('obj2gltf')
